
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d850  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0801db20  0801db20  0002db20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e560  0801e560  0002e560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e568  0801e568  0002e568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e56c  0801e56c  0002e56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801e570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003368  240002c8  0801e838  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003630  0801e838  00033630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037be4  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000065d4  00000000  00000000  00067f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002db0  00000000  00000000  0006e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000237c  00000000  00000000  000712a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000b5c0  00000000  00000000  00073624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003f175  00000000  00000000  0007ebe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017fe56  00000000  00000000  000bdd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000da1c  00000000  00000000  0023dbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0024b5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801db08 	.word	0x0801db08

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801db08 	.word	0x0801db08

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b24 <setServo+0x80>
 8000ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000abc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b28 <setServo+0x84>
 8000ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b2c <setServo+0x88>
 8000ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad0:	ee17 3a90 	vmov	r3, s15
 8000ad4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d81a      	bhi.n	8000b14 <setServo+0x70>
 8000ade:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <setServo+0x40>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000af5 	.word	0x08000af5
 8000ae8:	08000afd 	.word	0x08000afd
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b0d 	.word	0x08000b0d
	case 1:
		TIM4->CCR4 = timerVal;
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <setServo+0x8c>)
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000afa:	e00c      	b.n	8000b16 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <setServo+0x8c>)
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b02:	e008      	b.n	8000b16 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <setServo+0x8c>)
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b0a:	e004      	b.n	8000b16 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b0c:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <setServo+0x8c>)
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b12:	e000      	b.n	8000b16 <setServo+0x72>

	default:
		break;
 8000b14:	bf00      	nop
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	42c80000 	.word	0x42c80000
 8000b28:	457a0000 	.word	0x457a0000
 8000b2c:	453b8000 	.word	0x453b8000
 8000b30:	40000800 	.word	0x40000800

08000b34 <setLEDs>:

void setLEDs(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b3e:	e181      	b.n	8000e44 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b40:	4aa1      	ldr	r2, [pc, #644]	; (8000dc8 <setLEDs+0x294>)
 8000b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	f200 8177 	bhi.w	8000e3c <setLEDs+0x308>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <setLEDs+0x20>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000b65 	.word	0x08000b65
 8000b58:	08000c15 	.word	0x08000c15
 8000b5c:	08000cc5 	.word	0x08000cc5
 8000b60:	08000d75 	.word	0x08000d75
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
 8000b68:	e042      	b.n	8000bf0 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b6e:	e039      	b.n	8000be4 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b70:	4996      	ldr	r1, [pc, #600]	; (8000dcc <setLEDs+0x298>)
 8000b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b86:	fa41 f202 	asr.w	r2, r1, r2
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d013      	beq.n	8000bb8 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b92:	00da      	lsls	r2, r3, #3
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	18d1      	adds	r1, r2, r3
 8000b98:	4a8b      	ldr	r2, [pc, #556]	; (8000dc8 <setLEDs+0x294>)
 8000b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	440b      	add	r3, r1
								+ 8] = 60;
 8000bac:	3308      	adds	r3, #8
 8000bae:	4a88      	ldr	r2, [pc, #544]	; (8000dd0 <setLEDs+0x29c>)
 8000bb0:	213c      	movs	r1, #60	; 0x3c
 8000bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bb6:	e012      	b.n	8000bde <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bba:	00da      	lsls	r2, r3, #3
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbe:	18d1      	adds	r1, r2, r3
 8000bc0:	4a81      	ldr	r2, [pc, #516]	; (8000dc8 <setLEDs+0x294>)
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
								+ 8] = 30;
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	4a7e      	ldr	r2, [pc, #504]	; (8000dd0 <setLEDs+0x29c>)
 8000bd8:	211e      	movs	r1, #30
 8000bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	3301      	adds	r3, #1
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	ddc2      	ble.n	8000b70 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bec:	3301      	adds	r3, #1
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	ddb9      	ble.n	8000b6a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bfa:	e007      	b.n	8000c0c <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000bfc:	4a74      	ldr	r2, [pc, #464]	; (8000dd0 <setLEDs+0x29c>)
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	2100      	movs	r1, #0
 8000c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	3301      	adds	r3, #1
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c10:	ddf4      	ble.n	8000bfc <setLEDs+0xc8>
			}
			break;
 8000c12:	e114      	b.n	8000e3e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
 8000c18:	e042      	b.n	8000ca0 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
 8000c1e:	e039      	b.n	8000c94 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c20:	496a      	ldr	r1, [pc, #424]	; (8000dcc <setLEDs+0x298>)
 8000c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2c:	4413      	add	r3, r2
 8000c2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	fa41 f202 	asr.w	r2, r1, r2
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d013      	beq.n	8000c68 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	00da      	lsls	r2, r3, #3
 8000c44:	6a3b      	ldr	r3, [r7, #32]
 8000c46:	18d1      	adds	r1, r2, r3
 8000c48:	4a5f      	ldr	r2, [pc, #380]	; (8000dc8 <setLEDs+0x294>)
 8000c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4413      	add	r3, r2
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	4a5d      	ldr	r2, [pc, #372]	; (8000dd4 <setLEDs+0x2a0>)
 8000c60:	213c      	movs	r1, #60	; 0x3c
 8000c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c66:	e012      	b.n	8000c8e <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	00da      	lsls	r2, r3, #3
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	18d1      	adds	r1, r2, r3
 8000c70:	4a55      	ldr	r2, [pc, #340]	; (8000dc8 <setLEDs+0x294>)
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
								+ 8] = 30;
 8000c84:	3308      	adds	r3, #8
 8000c86:	4a53      	ldr	r2, [pc, #332]	; (8000dd4 <setLEDs+0x2a0>)
 8000c88:	211e      	movs	r1, #30
 8000c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	3301      	adds	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	ddc2      	ble.n	8000c20 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	ddb9      	ble.n	8000c1a <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	e007      	b.n	8000cbc <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000cac:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <setLEDs+0x2a0>)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	2bb1      	cmp	r3, #177	; 0xb1
 8000cc0:	ddf4      	ble.n	8000cac <setLEDs+0x178>
			}
			break;
 8000cc2:	e0bc      	b.n	8000e3e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	e042      	b.n	8000d50 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e039      	b.n	8000d44 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cd0:	493e      	ldr	r1, [pc, #248]	; (8000dcc <setLEDs+0x298>)
 8000cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	fa41 f202 	asr.w	r2, r1, r2
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	00da      	lsls	r2, r3, #3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	18d1      	adds	r1, r2, r3
 8000cf8:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <setLEDs+0x294>)
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4413      	add	r3, r2
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d0c:	3308      	adds	r3, #8
 8000d0e:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <setLEDs+0x2a4>)
 8000d10:	213c      	movs	r1, #60	; 0x3c
 8000d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d16:	e012      	b.n	8000d3e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	00da      	lsls	r2, r3, #3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	18d1      	adds	r1, r2, r3
 8000d20:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <setLEDs+0x294>)
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4413      	add	r3, r2
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
								+ 8] = 30;
 8000d34:	3308      	adds	r3, #8
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <setLEDs+0x2a4>)
 8000d38:	211e      	movs	r1, #30
 8000d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	ddc2      	ble.n	8000cd0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	ddb9      	ble.n	8000cca <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d56:	2338      	movs	r3, #56	; 0x38
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	e007      	b.n	8000d6c <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <setLEDs+0x2a4>)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2100      	movs	r1, #0
 8000d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	2b69      	cmp	r3, #105	; 0x69
 8000d70:	ddf4      	ble.n	8000d5c <setLEDs+0x228>
			}
			break;
 8000d72:	e064      	b.n	8000e3e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e04e      	b.n	8000e18 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	e045      	b.n	8000e0c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000d80:	4912      	ldr	r1, [pc, #72]	; (8000dcc <setLEDs+0x298>)
 8000d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	fa41 f202 	asr.w	r2, r1, r2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d01f      	beq.n	8000de0 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	00da      	lsls	r2, r3, #3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	18d1      	adds	r1, r2, r3
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <setLEDs+0x294>)
 8000daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
								+ 8] = 60;
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <setLEDs+0x2a8>)
 8000dc0:	213c      	movs	r1, #60	; 0x3c
 8000dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dc6:	e01e      	b.n	8000e06 <setLEDs+0x2d2>
 8000dc8:	0801dc34 	.word	0x0801dc34
 8000dcc:	24000bc4 	.word	0x24000bc4
 8000dd0:	240002e4 	.word	0x240002e4
 8000dd4:	240005ac 	.word	0x240005ac
 8000dd8:	24000874 	.word	0x24000874
 8000ddc:	24000a1c 	.word	0x24000a1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	00da      	lsls	r2, r3, #3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	18d1      	adds	r1, r2, r3
 8000de8:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <setLEDs+0x350>)
 8000dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
								+ 8] = 30;
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <setLEDs+0x354>)
 8000e00:	211e      	movs	r1, #30
 8000e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	ddb6      	ble.n	8000d80 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	ddad      	ble.n	8000d7a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e1e:	2338      	movs	r3, #56	; 0x38
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e007      	b.n	8000e34 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <setLEDs+0x354>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b69      	cmp	r3, #105	; 0x69
 8000e38:	ddf4      	ble.n	8000e24 <setLEDs+0x2f0>
			}
			break;
 8000e3a:	e000      	b.n	8000e3e <setLEDs+0x30a>
		default:
			break;
 8000e3c:	bf00      	nop
			i++) {
 8000e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e40:	3301      	adds	r3, #1
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e46:	2b0d      	cmp	r3, #13
 8000e48:	f77f ae7a 	ble.w	8000b40 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e4c:	23b2      	movs	r3, #178	; 0xb2
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <setLEDs+0x358>)
 8000e50:	210c      	movs	r1, #12
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <setLEDs+0x35c>)
 8000e54:	f00e fa86 	bl	800f364 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e58:	23b2      	movs	r3, #178	; 0xb2
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <setLEDs+0x360>)
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <setLEDs+0x364>)
 8000e60:	f00e fa80 	bl	800f364 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e64:	236a      	movs	r3, #106	; 0x6a
 8000e66:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <setLEDs+0x368>)
 8000e68:	2104      	movs	r1, #4
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <setLEDs+0x36c>)
 8000e6c:	f00e fa7a 	bl	800f364 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e70:	236a      	movs	r3, #106	; 0x6a
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <setLEDs+0x354>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <setLEDs+0x36c>)
 8000e78:	f00e fa74 	bl	800f364 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000e7c:	bf00      	nop
 8000e7e:	3738      	adds	r7, #56	; 0x38
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0801dc34 	.word	0x0801dc34
 8000e88:	24000a1c 	.word	0x24000a1c
 8000e8c:	240002e4 	.word	0x240002e4
 8000e90:	24001228 	.word	0x24001228
 8000e94:	240005ac 	.word	0x240005ac
 8000e98:	24001144 	.word	0x24001144
 8000e9c:	24000874 	.word	0x24000874
 8000ea0:	24001190 	.word	0x24001190

08000ea4 <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoRA_Read_Register+0x48>)
 8000eb6:	f006 fe79 	bl	8007bac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000eba:	1df9      	adds	r1, r7, #7
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoRA_Read_Register+0x4c>)
 8000ec2:	f00d fc0f 	bl	800e6e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ec6:	f107 010f 	add.w	r1, r7, #15
 8000eca:	2364      	movs	r3, #100	; 0x64
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <LoRA_Read_Register+0x4c>)
 8000ed0:	f00d fe04 	bl	800eadc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <LoRA_Read_Register+0x48>)
 8000edc:	f006 fe66 	bl	8007bac <HAL_GPIO_WritePin>

	return reg_value;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	240010bc 	.word	0x240010bc

08000ef4 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <LoRA_Write_Register+0x54>)
 8000f16:	f006 fe49 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f1a:	1df9      	adds	r1, r7, #7
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	2201      	movs	r2, #1
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <LoRA_Write_Register+0x58>)
 8000f22:	f00d fbdf 	bl	800e6e4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f26:	1db9      	adds	r1, r7, #6
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <LoRA_Write_Register+0x58>)
 8000f2e:	f00d fbd9 	bl	800e6e4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <LoRA_Write_Register+0x54>)
 8000f3a:	f006 fe37 	bl	8007bac <HAL_GPIO_WritePin>

}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58020000 	.word	0x58020000
 8000f4c:	240010bc 	.word	0x240010bc

08000f50 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff ffcc 	bl	8000ef4 <LoRA_Write_Register>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	17c8      	asrs	r0, r1, #31
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	4603      	mov	r3, r0
 8000f70:	1355      	asrs	r5, r2, #13
 8000f72:	04d4      	lsls	r4, r2, #19
 8000f74:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <LoRA_set_frequency+0x78>)
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff fbdb 	bl	8000738 <__aeabi_uldivmod>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	0c02      	lsrs	r2, r0, #16
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	0c0b      	lsrs	r3, r1, #16
 8000f9e:	b2d3      	uxtb	r3, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2006      	movs	r0, #6
 8000fa4:	f7ff ffa6 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	0a02      	lsrs	r2, r0, #8
 8000fb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fba:	0a0b      	lsrs	r3, r1, #8
 8000fbc:	b2d3      	uxtb	r3, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2007      	movs	r0, #7
 8000fc2:	f7ff ff97 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fc6:	7a3b      	ldrb	r3, [r7, #8]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f7ff ff92 	bl	8000ef4 <LoRA_Write_Register>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd8:	01e84800 	.word	0x01e84800

08000fdc <LoRA_idle>:

void LoRA_idle() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000fe0:	2181      	movs	r1, #129	; 0x81
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ff86 	bl	8000ef4 <LoRA_Write_Register>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8000ff6:	231b      	movs	r3, #27
 8000ff8:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b78      	cmp	r3, #120	; 0x78
 8000ffe:	d809      	bhi.n	8001014 <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	3b2d      	subs	r3, #45	; 0x2d
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <LoRA_setOCP+0x60>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	1052      	asrs	r2, r2, #1
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e00b      	b.n	800102c <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2bf0      	cmp	r3, #240	; 0xf0
 8001018:	d808      	bhi.n	800102c <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	331e      	adds	r3, #30
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoRA_setOCP+0x60>)
 8001020:	fb82 1203 	smull	r1, r2, r2, r3
 8001024:	1092      	asrs	r2, r2, #2
 8001026:	17db      	asrs	r3, r3, #31
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	200b      	movs	r0, #11
 800103e:	f7ff ff59 	bl	8000ef4 <LoRA_Write_Register>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	66666667 	.word	0x66666667

08001050 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b11      	cmp	r3, #17
 800105c:	dd0f      	ble.n	800107e <LoRA_setTxPower+0x2e>
		if (level > 20) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b14      	cmp	r3, #20
 8001062:	dd01      	ble.n	8001068 <LoRA_setTxPower+0x18>
			level = 20;
 8001064:	2314      	movs	r3, #20
 8001066:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b03      	subs	r3, #3
 800106c:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 800106e:	2187      	movs	r1, #135	; 0x87
 8001070:	204d      	movs	r0, #77	; 0x4d
 8001072:	f7ff ff3f 	bl	8000ef4 <LoRA_Write_Register>
		LoRA_setOCP(140);
 8001076:	208c      	movs	r0, #140	; 0x8c
 8001078:	f7ff ffb8 	bl	8000fec <LoRA_setOCP>
 800107c:	e00b      	b.n	8001096 <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b01      	cmp	r3, #1
 8001082:	dc01      	bgt.n	8001088 <LoRA_setTxPower+0x38>
			level = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8001088:	2184      	movs	r1, #132	; 0x84
 800108a:	204d      	movs	r0, #77	; 0x4d
 800108c:	f7ff ff32 	bl	8000ef4 <LoRA_Write_Register>
		LoRA_setOCP(100);
 8001090:	2064      	movs	r0, #100	; 0x64
 8001092:	f7ff ffab 	bl	8000fec <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3b02      	subs	r3, #2
 800109c:	b2db      	uxtb	r3, r3
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	2009      	movs	r0, #9
 80010ac:	f7ff ff22 	bl	8000ef4 <LoRA_Write_Register>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010bc:	201d      	movs	r0, #29
 80010be:	f7ff fef1 	bl	8000ea4 <LoRA_Read_Register>
 80010c2:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	201d      	movs	r0, #29
 80010ce:	f7ff ff11 	bl	8000ef4 <LoRA_Write_Register>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <LoRA_begin>:

void LoRA_begin(long frequency) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2101      	movs	r1, #1
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <LoRA_begin+0x70>)
 80010e6:	f006 fd61 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <LoRA_begin+0x74>)
 80010f2:	f006 fd5b 	bl	8007bac <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 80010f6:	2042      	movs	r0, #66	; 0x42
 80010f8:	f7ff fed4 	bl	8000ea4 <LoRA_Read_Register>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001100:	f7ff ff26 	bl	8000f50 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001104:	4812      	ldr	r0, [pc, #72]	; (8001150 <LoRA_begin+0x78>)
 8001106:	f7ff ff2b 	bl	8000f60 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 800110a:	2100      	movs	r1, #0
 800110c:	200f      	movs	r0, #15
 800110e:	f7ff fef1 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001112:	2100      	movs	r1, #0
 8001114:	200e      	movs	r0, #14
 8001116:	f7ff feed 	bl	8000ef4 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 800111a:	200c      	movs	r0, #12
 800111c:	f7ff fec2 	bl	8000ea4 <LoRA_Read_Register>
 8001120:	4603      	mov	r3, r0
 8001122:	f043 0303 	orr.w	r3, r3, #3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	200c      	movs	r0, #12
 800112c:	f7ff fee2 	bl	8000ef4 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001130:	2104      	movs	r1, #4
 8001132:	2026      	movs	r0, #38	; 0x26
 8001134:	f7ff fede 	bl	8000ef4 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001138:	2011      	movs	r0, #17
 800113a:	f7ff ff89 	bl	8001050 <LoRA_setTxPower>

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	58020c00 	.word	0x58020c00
 800114c:	58020000 	.word	0x58020000
 8001150:	33bca100 	.word	0x33bca100

08001154 <LoRA_beginPacket>:

void LoRA_beginPacket() {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001158:	f7ff ffae 	bl	80010b8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800115c:	2100      	movs	r1, #0
 800115e:	200d      	movs	r0, #13
 8001160:	f7ff fec8 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8001164:	2100      	movs	r1, #0
 8001166:	2022      	movs	r0, #34	; 0x22
 8001168:	f7ff fec4 	bl	8000ef4 <LoRA_Write_Register>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <LoRA_endPacket>:

void LoRA_endPacket() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001176:	2183      	movs	r1, #131	; 0x83
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff febb 	bl	8000ef4 <LoRA_Write_Register>

	while ((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800117e:	bf00      	nop
 8001180:	2012      	movs	r0, #18
 8001182:	f7ff fe8f 	bl	8000ea4 <LoRA_Read_Register>
 8001186:	4603      	mov	r3, r0
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f7      	beq.n	8001180 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001190:	2108      	movs	r1, #8
 8001192:	2012      	movs	r0, #18
 8001194:	f7ff feae 	bl	8000ef4 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001198:	2012      	movs	r0, #18
 800119a:	f7ff fe83 	bl	8000ea4 <LoRA_Read_Register>
 800119e:	4603      	mov	r3, r0
 80011a0:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 80011a2:	f7ff ff89 	bl	80010b8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	2012      	movs	r0, #18
 80011ae:	f7ff fea1 	bl	8000ef4 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00f      	beq.n	80011dc <LoRA_endPacket+0x6c>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10a      	bne.n	80011dc <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 80011c6:	2010      	movs	r0, #16
 80011c8:	f7ff fe6c 	bl	8000ea4 <LoRA_Read_Register>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4619      	mov	r1, r3
 80011d0:	200d      	movs	r0, #13
 80011d2:	f7ff fe8f 	bl	8000ef4 <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 80011d6:	f7ff ff01 	bl	8000fdc <LoRA_idle>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 80011da:	e00d      	b.n	80011f8 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff fe61 	bl	8000ea4 <LoRA_Read_Register>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b86      	cmp	r3, #134	; 0x86
 80011e6:	d007      	beq.n	80011f8 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80011e8:	2100      	movs	r1, #0
 80011ea:	200d      	movs	r0, #13
 80011ec:	f7ff fe82 	bl	8000ef4 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80011f0:	2186      	movs	r1, #134	; 0x86
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fe7e 	bl	8000ef4 <LoRA_Write_Register>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LoRA_sendPacket>:
	}
	return packetLenght;

}

void LoRA_sendPacket(char *data) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	LoRA_beginPacket();
 8001208:	f7ff ffa4 	bl	8001154 <LoRA_beginPacket>
	for (int i = 0; i < strlen(data); i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e00a      	b.n	8001228 <LoRA_sendPacket+0x28>
		LoRA_Write_Register(REG_FIFO, data[i]);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fe69 	bl	8000ef4 <LoRA_Write_Register>
	for (int i = 0; i < strlen(data); i++) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff f8c1 	bl	80003b0 <strlen>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8ed      	bhi.n	8001212 <LoRA_sendPacket+0x12>
	}
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff f8ba 	bl	80003b0 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	2022      	movs	r0, #34	; 0x22
 8001244:	f7ff fe56 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_endPacket();
 8001248:	f7ff ff92 	bl	8001170 <LoRA_endPacket>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	482d      	ldr	r0, [pc, #180]	; (8001318 <disarm+0xc4>)
 8001262:	f006 fca3 	bl	8007bac <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2102      	movs	r1, #2
 800126a:	482c      	ldr	r0, [pc, #176]	; (800131c <disarm+0xc8>)
 800126c:	f006 fc9e 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001276:	482a      	ldr	r0, [pc, #168]	; (8001320 <disarm+0xcc>)
 8001278:	f006 fc98 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	4827      	ldr	r0, [pc, #156]	; (8001320 <disarm+0xcc>)
 8001284:	f006 fc92 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128e:	4824      	ldr	r0, [pc, #144]	; (8001320 <disarm+0xcc>)
 8001290:	f006 fc8c 	bl	8007bac <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2102      	movs	r1, #2
 8001298:	4822      	ldr	r0, [pc, #136]	; (8001324 <disarm+0xd0>)
 800129a:	f006 fc87 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <disarm+0xd4>)
 80012a6:	f006 fc81 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b0:	481d      	ldr	r0, [pc, #116]	; (8001328 <disarm+0xd4>)
 80012b2:	f006 fc7b 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012bc:	481a      	ldr	r0, [pc, #104]	; (8001328 <disarm+0xd4>)
 80012be:	f006 fc75 	bl	8007bac <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012c2:	210c      	movs	r1, #12
 80012c4:	4819      	ldr	r0, [pc, #100]	; (800132c <disarm+0xd8>)
 80012c6:	f00d ff31 	bl	800f12c <HAL_TIM_PWM_Start>
	setServo(1, 0);
 80012ca:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001330 <disarm+0xdc>
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff fbe8 	bl	8000aa4 <setServo>

	LED_Color_Data[7][0] = 255;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <disarm+0xe0>)
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <disarm+0xe0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <disarm+0xe0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <disarm+0xe0>)
 80012e8:	22ff      	movs	r2, #255	; 0xff
 80012ea:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <disarm+0xe0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <disarm+0xe0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
	setLEDs();
 80012f8:	f7ff fc1c 	bl	8000b34 <setLEDs>

	strcpy(state, "DISARMED");
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	490e      	ldr	r1, [pc, #56]	; (8001338 <disarm+0xe4>)
 8001300:	461a      	mov	r2, r3
 8001302:	460b      	mov	r3, r1
 8001304:	cb03      	ldmia	r3!, {r0, r1}
 8001306:	6010      	str	r0, [r2, #0]
 8001308:	6051      	str	r1, [r2, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	7213      	strb	r3, [r2, #8]
	return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58020000 	.word	0x58020000
 800131c:	58020400 	.word	0x58020400
 8001320:	58021400 	.word	0x58021400
 8001324:	58021800 	.word	0x58021800
 8001328:	58021000 	.word	0x58021000
 800132c:	240011dc 	.word	0x240011dc
 8001330:	00000000 	.word	0x00000000
 8001334:	24000bc4 	.word	0x24000bc4
 8001338:	0801db20 	.word	0x0801db20

0800133c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8001342:	b081      	sub	sp, #4
 8001344:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001346:	f002 f905 	bl	8003554 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800134a:	f000 f8c5 	bl	80014d8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800134e:	f000 f93b 	bl	80015c8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001352:	f000 fee7 	bl	8002124 <MX_GPIO_Init>
	MX_DMA_Init();
 8001356:	f000 fe85 	bl	8002064 <MX_DMA_Init>
	MX_SPI3_Init();
 800135a:	f000 fbbb 	bl	8001ad4 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 800135e:	f000 fa4b 	bl	80017f8 <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8001362:	f000 fe33 	bl	8001fcc <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001366:	f000 f961 	bl	800162c <MX_ADC1_Init>
	MX_TIM4_Init();
 800136a:	f000 fcc5 	bl	8001cf8 <MX_TIM4_Init>
	MX_ADC3_Init();
 800136e:	f000 f9d5 	bl	800171c <MX_ADC3_Init>
	MX_SPI2_Init();
 8001372:	f000 fb59 	bl	8001a28 <MX_SPI2_Init>
	MX_I2C2_Init();
 8001376:	f000 faa3 	bl	80018c0 <MX_I2C2_Init>
	MX_TIM2_Init();
 800137a:	f000 fc01 	bl	8001b80 <MX_TIM2_Init>
	MX_TIM5_Init();
 800137e:	f000 fd37 	bl	8001df0 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001382:	f000 fc55 	bl	8001c30 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8001386:	f017 fbfb 	bl	8018b80 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 800138a:	f000 faf7 	bl	800197c <MX_SPI1_Init>
	MX_UART4_Init();
 800138e:	f000 fdd1 	bl	8001f34 <MX_UART4_Init>
	MX_FATFS_Init();
 8001392:	f012 fcbd 	bl	8013d10 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 8001396:	f000 fad3 	bl	8001940 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 800139a:	f000 fd83 	bl	8001ea4 <MX_TIM13_Init>
	MX_TIM14_Init();
 800139e:	f000 fda5 	bl	8001eec <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80013a2:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80013a6:	443b      	add	r3, r7
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff53 	bl	8001254 <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80013ae:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <main+0x174>)
 80013b0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80013b4:	443b      	add	r3, r7
 80013b6:	2201      	movs	r2, #1
 80013b8:	493e      	ldr	r1, [pc, #248]	; (80014b4 <main+0x178>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f017 f804 	bl	80183c8 <f_mount>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f242 72ef 	movw	r2, #10223	; 0x27ef
 80013c6:	443a      	add	r2, r7
 80013c8:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013ca:	210c      	movs	r1, #12
 80013cc:	483a      	ldr	r0, [pc, #232]	; (80014b8 <main+0x17c>)
 80013ce:	f00d fead 	bl	800f12c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2104      	movs	r1, #4
 80013d6:	4839      	ldr	r0, [pc, #228]	; (80014bc <main+0x180>)
 80013d8:	f006 fbe8 	bl	8007bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	2108      	movs	r1, #8
 80013e0:	4836      	ldr	r0, [pc, #216]	; (80014bc <main+0x180>)
 80013e2:	f006 fbe3 	bl	8007bac <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <main+0x184>)
 80013e8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80013ec:	443b      	add	r3, r7
 80013ee:	2204      	movs	r2, #4
 80013f0:	4934      	ldr	r1, [pc, #208]	; (80014c4 <main+0x188>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f017 f82e 	bl	8018454 <f_open>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f242 72ef 	movw	r2, #10223	; 0x27ef
 80013fe:	443a      	add	r2, r7
 8001400:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <main+0x184>)
 8001404:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001408:	443b      	add	r3, r7
 800140a:	4618      	mov	r0, r3
 800140c:	f017 fa6c 	bl	80188e8 <f_close>

	LoRA_begin(868000000);
 8001410:	482d      	ldr	r0, [pc, #180]	; (80014c8 <main+0x18c>)
 8001412:	f7ff fe61 	bl	80010d8 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	f242 72f0 	movw	r2, #10224	; 0x27f0
 800141c:	443a      	add	r2, r7
 800141e:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	f242 72f4 	movw	r2, #10228	; 0x27f4
 8001426:	443a      	add	r2, r7
 8001428:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8001430:	443a      	add	r2, r7
 8001432:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 8001434:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001438:	f5a3 74d4 	sub.w	r4, r3, #424	; 0x1a8
 800143c:	4a23      	ldr	r2, [pc, #140]	; (80014cc <main+0x190>)
 800143e:	4623      	mov	r3, r4
 8001440:	6810      	ldr	r0, [r2, #0]
 8001442:	6851      	ldr	r1, [r2, #4]
 8001444:	c303      	stmia	r3!, {r0, r1}
 8001446:	7a12      	ldrb	r2, [r2, #8]
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	f104 0309 	add.w	r3, r4, #9
 800144e:	22f1      	movs	r2, #241	; 0xf1
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f018 ffe7 	bl	801a426 <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH];
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 8001458:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800145c:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	int have_recieved_anything = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f242 72fc 	movw	r2, #10236	; 0x27fc
 800146a:	443a      	add	r2, r7
 800146c:	6013      	str	r3, [r2, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "RECEIVING RELIABLE";
 800146e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001472:	f2a3 7694 	subw	r6, r3, #1940	; 0x794
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <main+0x194>)
 8001478:	4634      	mov	r4, r6
 800147a:	461d      	mov	r5, r3
 800147c:	6828      	ldr	r0, [r5, #0]
 800147e:	6869      	ldr	r1, [r5, #4]
 8001480:	68aa      	ldr	r2, [r5, #8]
 8001482:	68eb      	ldr	r3, [r5, #12]
 8001484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001486:	8a2b      	ldrh	r3, [r5, #16]
 8001488:	7caa      	ldrb	r2, [r5, #18]
 800148a:	8023      	strh	r3, [r4, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	70a3      	strb	r3, [r4, #2]
 8001490:	f106 0313 	add.w	r3, r6, #19
 8001494:	22e7      	movs	r2, #231	; 0xe7
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f018 ffc4 	bl	801a426 <memset>
		//	sprintf(data, "bajojajo");
		//	CDC_Transmit_HS(data, strlen(data));
		//}
		//sprintf(data, "%x", version);
		//CDC_Transmit_HS(data, strlen(data));
		LoRA_sendPacket("hello");
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <main+0x198>)
 80014a0:	f7ff feae 	bl	8001200 <LoRA_sendPacket>
		HAL_Delay(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f002 f8e6 	bl	8003678 <HAL_Delay>
		LoRA_sendPacket("hello");
 80014ac:	e7f7      	b.n	800149e <main+0x162>
 80014ae:	bf00      	nop
 80014b0:	ffffef84 	.word	0xffffef84
 80014b4:	24001698 	.word	0x24001698
 80014b8:	240011dc 	.word	0x240011dc
 80014bc:	58021800 	.word	0x58021800
 80014c0:	ffffdf54 	.word	0xffffdf54
 80014c4:	0801db34 	.word	0x0801db34
 80014c8:	33bca100 	.word	0x33bca100
 80014cc:	0801db20 	.word	0x0801db20
 80014d0:	0801db4c 	.word	0x0801db4c
 80014d4:	0801db44 	.word	0x0801db44

080014d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b09c      	sub	sp, #112	; 0x70
 80014dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	224c      	movs	r2, #76	; 0x4c
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f018 ff9d 	bl	801a426 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2220      	movs	r2, #32
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f018 ff97 	bl	801a426 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014f8:	2002      	movs	r0, #2
 80014fa:	f007 ff6b 	bl	80093d4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <SystemClock_Config+0xec>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800150a:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <SystemClock_Config+0xec>)
 800150c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <SystemClock_Config+0xec>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800151e:	bf00      	nop
 8001520:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <SystemClock_Config+0xec>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152c:	d1f8      	bne.n	8001520 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800152e:	2322      	movs	r3, #34	; 0x22
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001532:	2301      	movs	r3, #1
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001536:	2340      	movs	r3, #64	; 0x40
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001542:	2300      	movs	r3, #0
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001546:	2304      	movs	r3, #4
 8001548:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 800154a:	230c      	movs	r3, #12
 800154c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001552:	2303      	movs	r3, #3
 8001554:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800155a:	230c      	movs	r3, #12
 800155c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800155e:	2300      	movs	r3, #0
 8001560:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4618      	mov	r0, r3
 800156c:	f007 ff7c 	bl	8009468 <HAL_RCC_OscConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xa2>
		Error_Handler();
 8001576:	f000 ff39 	bl	80023ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800157a:	233f      	movs	r3, #63	; 0x3f
 800157c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157e:	2303      	movs	r3, #3
 8001580:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001586:	2308      	movs	r3, #8
 8001588:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800158a:	2340      	movs	r3, #64	; 0x40
 800158c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800158e:	2340      	movs	r3, #64	; 0x40
 8001590:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2101      	movs	r1, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 fb3b 	bl	8009c1c <HAL_RCC_ClockConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0xd8>
		Error_Handler();
 80015ac:	f000 ff1e 	bl	80023ec <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80015b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015b4:	2100      	movs	r1, #0
 80015b6:	2000      	movs	r0, #0
 80015b8:	f008 fce6 	bl	8009f88 <HAL_RCC_MCOConfig>
}
 80015bc:	bf00      	nop
 80015be:	3770      	adds	r7, #112	; 0x70
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	58024800 	.word	0x58024800

080015c8 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0ae      	sub	sp, #184	; 0xb8
 80015cc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80015ce:	463b      	mov	r3, r7
 80015d0:	22b8      	movs	r2, #184	; 0xb8
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f018 ff26 	bl	801a426 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 80015da:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 80015e6:	2304      	movs	r3, #4
 80015e8:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 80015ea:	230c      	movs	r3, #12
 80015ec:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 80015ee:	2304      	movs	r3, #4
 80015f0:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001612:	463b      	mov	r3, r7
 8001614:	4618      	mov	r0, r3
 8001616:	f008 fef7 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8001620:	f000 fee4 	bl	80023ec <Error_Handler>
	}
}
 8001624:	bf00      	nop
 8001626:	37b8      	adds	r7, #184	; 0xb8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800163e:	463b      	mov	r3, r7
 8001640:	2224      	movs	r2, #36	; 0x24
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f018 feee 	bl	801a426 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <MX_ADC1_Init+0xe4>)
 800164c:	4a31      	ldr	r2, [pc, #196]	; (8001714 <MX_ADC1_Init+0xe8>)
 800164e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001652:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001656:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <MX_ADC1_Init+0xe4>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001666:	2204      	movs	r2, #4
 8001668:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <MX_ADC1_Init+0xe4>)
 800166c:	2200      	movs	r2, #0
 800166e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001672:	2200      	movs	r2, #0
 8001674:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001678:	2201      	movs	r2, #1
 800167a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <MX_ADC1_Init+0xe4>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001686:	2200      	movs	r2, #0
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_ADC1_Init+0xe4>)
 800168c:	2200      	movs	r2, #0
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001692:	2200      	movs	r2, #0
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <MX_ADC1_Init+0xe4>)
 8001698:	2200      	movs	r2, #0
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_ADC1_Init+0xe4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_ADC1_Init+0xe4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80016aa:	4819      	ldr	r0, [pc, #100]	; (8001710 <MX_ADC1_Init+0xe4>)
 80016ac:	f002 fa64 	bl	8003b78 <HAL_ADC_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_ADC1_Init+0x8e>
		Error_Handler();
 80016b6:	f000 fe99 	bl	80023ec <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_ADC1_Init+0xe4>)
 80016c6:	f003 fa9f 	bl	8004c08 <HAL_ADCEx_MultiModeConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0xa8>
		Error_Handler();
 80016d0:	f000 fe8c 	bl	80023ec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <MX_ADC1_Init+0xec>)
 80016d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d8:	2306      	movs	r3, #6
 80016da:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80016dc:	2303      	movs	r3, #3
 80016de:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016e4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016e6:	2304      	movs	r3, #4
 80016e8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_ADC1_Init+0xe4>)
 80016fa:	f002 fc45 	bl	8003f88 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0xdc>
		Error_Handler();
 8001704:	f000 fe72 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	24000c6c 	.word	0x24000c6c
 8001714:	40022000 	.word	0x40022000
 8001718:	3ac04000 	.word	0x3ac04000

0800171c <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2224      	movs	r2, #36	; 0x24
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f018 fe7c 	bl	801a426 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001730:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <MX_ADC3_Init+0xd4>)
 8001732:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001736:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800173a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <MX_ADC3_Init+0xd0>)
 800173e:	2208      	movs	r2, #8
 8001740:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <MX_ADC3_Init+0xd0>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001750:	2204      	movs	r2, #4
 8001752:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001756:	2200      	movs	r2, #0
 8001758:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <MX_ADC3_Init+0xd0>)
 800175c:	2200      	movs	r2, #0
 800175e:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001762:	2201      	movs	r2, #1
 8001764:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001776:	2200      	movs	r2, #0
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_ADC3_Init+0xd0>)
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_ADC3_Init+0xd0>)
 800178a:	2200      	movs	r2, #0
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_ADC3_Init+0xd0>)
 8001796:	2200      	movs	r2, #0
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_ADC3_Init+0xd0>)
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80017a2:	4812      	ldr	r0, [pc, #72]	; (80017ec <MX_ADC3_Init+0xd0>)
 80017a4:	f002 f9e8 	bl	8003b78 <HAL_ADC_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_ADC3_Init+0x96>
		Error_Handler();
 80017ae:	f000 fe1d 	bl	80023ec <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_ADC3_Init+0xd8>)
 80017b4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b6:	2306      	movs	r3, #6
 80017b8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80017c2:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017c4:	2304      	movs	r3, #4
 80017c6:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_ADC3_Init+0xd0>)
 80017d6:	f002 fbd7 	bl	8003f88 <HAL_ADC_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_ADC3_Init+0xc8>
		Error_Handler();
 80017e0:	f000 fe04 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	24000cdc 	.word	0x24000cdc
 80017f0:	58026000 	.word	0x58026000
 80017f4:	04300002 	.word	0x04300002

080017f8 <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <MX_FDCAN3_Init+0xc4>)
 8001800:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001810:	2200      	movs	r2, #0
 8001812:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001816:	2200      	movs	r2, #0
 8001818:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800181c:	2200      	movs	r2, #0
 800181e:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001822:	2210      	movs	r2, #16
 8001824:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001828:	2201      	movs	r2, #1
 800182a:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800182e:	2202      	movs	r2, #2
 8001830:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001834:	2202      	movs	r2, #2
 8001836:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800183a:	2201      	movs	r2, #1
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001840:	2201      	movs	r2, #1
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001846:	2201      	movs	r2, #1
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800184c:	2201      	movs	r2, #1
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001852:	2200      	movs	r2, #0
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800185e:	2200      	movs	r2, #0
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001864:	2200      	movs	r2, #0
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800186a:	2204      	movs	r2, #4
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001870:	2200      	movs	r2, #0
 8001872:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001876:	2204      	movs	r2, #4
 8001878:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800187c:	2200      	movs	r2, #0
 800187e:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001882:	2204      	movs	r2, #4
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001888:	2200      	movs	r2, #0
 800188a:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800188e:	2200      	movs	r2, #0
 8001890:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 8001894:	2200      	movs	r2, #0
 8001896:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 800189a:	2200      	movs	r2, #0
 800189c:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 80018a0:	2204      	movs	r2, #4
 80018a2:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_FDCAN3_Init+0xc0>)
 80018a6:	f005 fc75 	bl	8007194 <HAL_FDCAN_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 80018b0:	f000 fd9c 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	24000e3c 	.word	0x24000e3c
 80018bc:	4000d400 	.word	0x4000d400

080018c0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_I2C2_Init+0x74>)
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <MX_I2C2_Init+0x78>)
 80018c8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_I2C2_Init+0x74>)
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <MX_I2C2_Init+0x7c>)
 80018ce:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_I2C2_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_I2C2_Init+0x74>)
 80018d8:	2201      	movs	r2, #1
 80018da:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_I2C2_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_I2C2_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_I2C2_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_I2C2_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_I2C2_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <MX_I2C2_Init+0x74>)
 80018fc:	f006 f970 	bl	8007be0 <HAL_I2C_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001906:	f000 fd71 	bl	80023ec <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800190a:	2100      	movs	r1, #0
 800190c:	4809      	ldr	r0, [pc, #36]	; (8001934 <MX_I2C2_Init+0x74>)
 800190e:	f006 fa11 	bl	8007d34 <HAL_I2CEx_ConfigAnalogFilter>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001918:	f000 fd68 	bl	80023ec <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800191c:	2100      	movs	r1, #0
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_I2C2_Init+0x74>)
 8001920:	f006 fa53 	bl	8007dca <HAL_I2CEx_ConfigDigitalFilter>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_I2C2_Init+0x6e>
		Error_Handler();
 800192a:	f000 fd5f 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	24000edc 	.word	0x24000edc
 8001938:	40005800 	.word	0x40005800
 800193c:	20303e5d 	.word	0x20303e5d

08001940 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_SDMMC2_SD_Init+0x34>)
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <MX_SDMMC2_SD_Init+0x38>)
 8001948:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_SDMMC2_SD_Init+0x34>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_SDMMC2_SD_Init+0x34>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_SDMMC2_SD_Init+0x34>)
 8001958:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800195c:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <MX_SDMMC2_SD_Init+0x34>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <MX_SDMMC2_SD_Init+0x34>)
 8001966:	2208      	movs	r2, #8
 8001968:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	24000f30 	.word	0x24000f30
 8001978:	48022400 	.word	0x48022400

0800197c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <MX_SPI1_Init+0xa4>)
 8001982:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <MX_SPI1_Init+0xa8>)
 8001984:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_SPI1_Init+0xa4>)
 8001988:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800198c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_SPI1_Init+0xa4>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_SPI1_Init+0xa4>)
 8001996:	2207      	movs	r2, #7
 8001998:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_SPI1_Init+0xa4>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ac:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019b0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80019b4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_SPI1_Init+0xa4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_SPI1_Init+0xa4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_SPI1_Init+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_SPI1_Init+0xa4>)
 8001a0e:	f00c fd45 	bl	800e49c <HAL_SPI_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_SPI1_Init+0xa0>
		Error_Handler();
 8001a18:	f000 fce8 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	24000fac 	.word	0x24000fac
 8001a24:	40013000 	.word	0x40013000

08001a28 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a2e:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <MX_SPI2_Init+0xa8>)
 8001a30:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a38:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a42:	2207      	movs	r2, #7
 8001a44:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a58:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a60:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_SPI2_Init+0xa4>)
 8001aba:	f00c fcef 	bl	800e49c <HAL_SPI_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_SPI2_Init+0xa0>
		Error_Handler();
 8001ac4:	f000 fc92 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	24001034 	.word	0x24001034
 8001ad0:	40003800 	.word	0x40003800

08001ad4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <MX_SPI3_Init+0xa8>)
 8001adc:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001ae0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ae4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001aee:	2207      	movs	r2, #7
 8001af0:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b04:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b08:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b0c:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_SPI3_Init+0xa4>)
 8001b66:	f00c fc99 	bl	800e49c <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_SPI3_Init+0xa0>
		Error_Handler();
 8001b70:	f000 fc3c 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	240010bc 	.word	0x240010bc
 8001b7c:	40003c00 	.word	0x40003c00

08001b80 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b92:	463b      	mov	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001baa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001bba:	225a      	movs	r2, #90	; 0x5a
 8001bbc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001bca:	4818      	ldr	r0, [pc, #96]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001bcc:	f00d fa56 	bl	800f07c <HAL_TIM_PWM_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001bd6:	f000 fc09 	bl	80023ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4810      	ldr	r0, [pc, #64]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001bea:	f00e fcdd 	bl	80105a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001bf4:	f000 fbfa 	bl	80023ec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf8:	2360      	movs	r3, #96	; 0x60
 8001bfa:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001c10:	f00d fefc 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001c1a:	f000 fbe7 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <MX_TIM2_Init+0xac>)
 8001c20:	f001 f91a 	bl	8002e58 <HAL_TIM_MspPostInit>

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	24001144 	.word	0x24001144

08001c30 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c42:	463b      	mov	r3, r7
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
 8001c50:	615a      	str	r2, [r3, #20]
 8001c52:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c56:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <MX_TIM3_Init+0xc4>)
 8001c58:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c68:	225a      	movs	r2, #90	; 0x5a
 8001c6a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001c78:	481d      	ldr	r0, [pc, #116]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c7a:	f00d f9ff 	bl	800f07c <HAL_TIM_PWM_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM3_Init+0x58>
		Error_Handler();
 8001c84:	f000 fbb2 	bl	80023ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4816      	ldr	r0, [pc, #88]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001c98:	f00e fc86 	bl	80105a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001ca2:	f000 fba3 	bl	80023ec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca6:	2360      	movs	r3, #96	; 0x60
 8001ca8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001cbe:	f00d fea5 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001cc8:	f000 fb90 	bl	80023ec <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001cd4:	f00d fe9a 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001cde:	f000 fb85 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <MX_TIM3_Init+0xc0>)
 8001ce4:	f001 f8b8 	bl	8002e58 <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	24001190 	.word	0x24001190
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
 8001d18:	615a      	str	r2, [r3, #20]
 8001d1a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d1e:	4a33      	ldr	r2, [pc, #204]	; (8001dec <MX_TIM4_Init+0xf4>)
 8001d20:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d24:	221d      	movs	r2, #29
 8001d26:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d30:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d34:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001d42:	4829      	ldr	r0, [pc, #164]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d44:	f00d f99a 	bl	800f07c <HAL_TIM_PWM_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM4_Init+0x5a>
		Error_Handler();
 8001d4e:	f000 fb4d 	bl	80023ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4821      	ldr	r0, [pc, #132]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d62:	f00e fc21 	bl	80105a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001d6c:	f000 fb3e 	bl	80023ec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d70:	2360      	movs	r3, #96	; 0x60
 8001d72:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4818      	ldr	r0, [pc, #96]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d88:	f00d fe40 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001d92:	f000 fb2b 	bl	80023ec <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001d96:	463b      	mov	r3, r7
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001d9e:	f00d fe35 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001da8:	f000 fb20 	bl	80023ec <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001dac:	463b      	mov	r3, r7
 8001dae:	2208      	movs	r2, #8
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001db4:	f00d fe2a 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8001dbe:	f000 fb15 	bl	80023ec <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4807      	ldr	r0, [pc, #28]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001dca:	f00d fe1f 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8001dd4:	f000 fb0a 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <MX_TIM4_Init+0xf0>)
 8001dda:	f001 f83d 	bl	8002e58 <HAL_TIM_MspPostInit>

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	240011dc 	.word	0x240011dc
 8001dec:	40000800 	.word	0x40000800

08001df0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e16:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <MX_TIM5_Init+0xb0>)
 8001e18:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e28:	225a      	movs	r2, #90	; 0x5a
 8001e2a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8001e38:	4818      	ldr	r0, [pc, #96]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e3a:	f00d f91f 	bl	800f07c <HAL_TIM_PWM_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM5_Init+0x58>
		Error_Handler();
 8001e44:	f000 fad2 	bl	80023ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4811      	ldr	r0, [pc, #68]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e58:	f00e fba6 	bl	80105a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001e62:	f000 fac3 	bl	80023ec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e66:	2360      	movs	r3, #96	; 0x60
 8001e68:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8001e76:	463b      	mov	r3, r7
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e7e:	f00d fdc5 	bl	800fa0c <HAL_TIM_PWM_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001e88:	f000 fab0 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <MX_TIM5_Init+0xac>)
 8001e8e:	f000 ffe3 	bl	8002e58 <HAL_TIM_MspPostInit>

}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24001228 	.word	0x24001228
 8001ea0:	40000c00 	.word	0x40000c00

08001ea4 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_TIM13_Init+0x40>)
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <MX_TIM13_Init+0x44>)
 8001eac:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_TIM13_Init+0x40>)
 8001eb0:	2263      	movs	r2, #99	; 0x63
 8001eb2:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_TIM13_Init+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_TIM13_Init+0x40>)
 8001ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec0:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_TIM13_Init+0x40>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_TIM13_Init+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM13_Init+0x40>)
 8001ed0:	f00d f87d 	bl	800efce <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM13_Init+0x3a>
		Error_Handler();
 8001eda:	f000 fa87 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	24001274 	.word	0x24001274
 8001ee8:	40001c00 	.word	0x40001c00

08001eec <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_TIM14_Init+0x40>)
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <MX_TIM14_Init+0x44>)
 8001ef4:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <MX_TIM14_Init+0x40>)
 8001ef8:	2263      	movs	r2, #99	; 0x63
 8001efa:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <MX_TIM14_Init+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <MX_TIM14_Init+0x40>)
 8001f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f08:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <MX_TIM14_Init+0x40>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_TIM14_Init+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_TIM14_Init+0x40>)
 8001f18:	f00d f859 	bl	800efce <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM14_Init+0x3a>
		Error_Handler();
 8001f22:	f000 fa63 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	240012c0 	.word	0x240012c0
 8001f30:	40002000 	.word	0x40002000

08001f34 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <MX_UART4_Init+0x94>)
 8001f3c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f7e:	f00e fbcd 	bl	801071c <HAL_UART_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_UART4_Init+0x58>
		Error_Handler();
 8001f88:	f000 fa30 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001f90:	f00f fcd3 	bl	801193a <HAL_UARTEx_SetTxFifoThreshold>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001f9a:	f000 fa27 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001fa2:	f00f fd08 	bl	80119b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001fac:	f000 fa1e 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8001fb0:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <MX_UART4_Init+0x90>)
 8001fb2:	f00f fc89 	bl	80118c8 <HAL_UARTEx_DisableFifoMode>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_UART4_Init+0x8c>
		Error_Handler();
 8001fbc:	f000 fa16 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	24001564 	.word	0x24001564
 8001fc8:	40004c00 	.word	0x40004c00

08001fcc <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001fd2:	4a23      	ldr	r2, [pc, #140]	; (8002060 <MX_USART6_UART_Init+0x94>)
 8001fd4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fdc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_USART6_UART_Init+0x90>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_USART6_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_USART6_UART_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_USART6_UART_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002014:	4811      	ldr	r0, [pc, #68]	; (800205c <MX_USART6_UART_Init+0x90>)
 8002016:	f00e fb81 	bl	801071c <HAL_UART_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8002020:	f000 f9e4 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8002024:	2100      	movs	r1, #0
 8002026:	480d      	ldr	r0, [pc, #52]	; (800205c <MX_USART6_UART_Init+0x90>)
 8002028:	f00f fc87 	bl	801193a <HAL_UARTEx_SetTxFifoThreshold>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002032:	f000 f9db 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8002036:	2100      	movs	r1, #0
 8002038:	4808      	ldr	r0, [pc, #32]	; (800205c <MX_USART6_UART_Init+0x90>)
 800203a:	f00f fcbc 	bl	80119b6 <HAL_UARTEx_SetRxFifoThreshold>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002044:	f000 f9d2 	bl	80023ec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_USART6_UART_Init+0x90>)
 800204a:	f00f fc3d 	bl	80118c8 <HAL_UARTEx_DisableFifoMode>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002054:	f000 f9ca 	bl	80023ec <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	240015f8 	.word	0x240015f8
 8002060:	40011400 	.word	0x40011400

08002064 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <MX_DMA_Init+0xbc>)
 800206c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <MX_DMA_Init+0xbc>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <MX_DMA_Init+0xbc>)
 800207c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <MX_DMA_Init+0xbc>)
 800208a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800208e:	4a24      	ldr	r2, [pc, #144]	; (8002120 <MX_DMA_Init+0xbc>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <MX_DMA_Init+0xbc>)
 800209a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	200b      	movs	r0, #11
 80020ac:	f002 ff69 	bl	8004f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020b0:	200b      	movs	r0, #11
 80020b2:	f002 ff80 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	200c      	movs	r0, #12
 80020bc:	f002 ff61 	bl	8004f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020c0:	200c      	movs	r0, #12
 80020c2:	f002 ff78 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	200d      	movs	r0, #13
 80020cc:	f002 ff59 	bl	8004f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80020d0:	200d      	movs	r0, #13
 80020d2:	f002 ff70 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	200e      	movs	r0, #14
 80020dc:	f002 ff51 	bl	8004f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80020e0:	200e      	movs	r0, #14
 80020e2:	f002 ff68 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	200f      	movs	r0, #15
 80020ec:	f002 ff49 	bl	8004f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80020f0:	200f      	movs	r0, #15
 80020f2:	f002 ff60 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2010      	movs	r0, #16
 80020fc:	f002 ff41 	bl	8004f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002100:	2010      	movs	r0, #16
 8002102:	f002 ff58 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	2046      	movs	r0, #70	; 0x46
 800210c:	f002 ff39 	bl	8004f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002110:	2046      	movs	r0, #70	; 0x46
 8002112:	f002 ff50 	bl	8004fb6 <HAL_NVIC_EnableIRQ>

}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	58024400 	.word	0x58024400

08002124 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800213a:	4ba4      	ldr	r3, [pc, #656]	; (80023cc <MX_GPIO_Init+0x2a8>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	4aa2      	ldr	r2, [pc, #648]	; (80023cc <MX_GPIO_Init+0x2a8>)
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214a:	4ba0      	ldr	r3, [pc, #640]	; (80023cc <MX_GPIO_Init+0x2a8>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002158:	4b9c      	ldr	r3, [pc, #624]	; (80023cc <MX_GPIO_Init+0x2a8>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	4a9b      	ldr	r2, [pc, #620]	; (80023cc <MX_GPIO_Init+0x2a8>)
 8002160:	f043 0320 	orr.w	r3, r3, #32
 8002164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002168:	4b98      	ldr	r3, [pc, #608]	; (80023cc <MX_GPIO_Init+0x2a8>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	4b95      	ldr	r3, [pc, #596]	; (80023cc <MX_GPIO_Init+0x2a8>)
 8002178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217c:	4a93      	ldr	r2, [pc, #588]	; (80023cc <MX_GPIO_Init+0x2a8>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002186:	4b91      	ldr	r3, [pc, #580]	; (80023cc <MX_GPIO_Init+0x2a8>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	4b8d      	ldr	r3, [pc, #564]	; (80023cc <MX_GPIO_Init+0x2a8>)
 8002196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219a:	4a8c      	ldr	r2, [pc, #560]	; (80023cc <MX_GPIO_Init+0x2a8>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a4:	4b89      	ldr	r3, [pc, #548]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b86      	ldr	r3, [pc, #536]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b8:	4a84      	ldr	r2, [pc, #528]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c2:	4b82      	ldr	r3, [pc, #520]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80021d0:	4b7e      	ldr	r3, [pc, #504]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d6:	4a7d      	ldr	r2, [pc, #500]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e0:	4b7a      	ldr	r3, [pc, #488]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	4b77      	ldr	r3, [pc, #476]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f4:	4a75      	ldr	r2, [pc, #468]	; (80023cc <MX_GPIO_Init+0x2a8>)
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fe:	4b73      	ldr	r3, [pc, #460]	; (80023cc <MX_GPIO_Init+0x2a8>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 800220c:	2200      	movs	r2, #0
 800220e:	f241 5104 	movw	r1, #5380	; 0x1504
 8002212:	486f      	ldr	r0, [pc, #444]	; (80023d0 <MX_GPIO_Init+0x2ac>)
 8002214:	f005 fcca 	bl	8007bac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f248 0102 	movw	r1, #32770	; 0x8002
 800221e:	486d      	ldr	r0, [pc, #436]	; (80023d4 <MX_GPIO_Init+0x2b0>)
 8002220:	f005 fcc4 	bl	8007bac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	2130      	movs	r1, #48	; 0x30
 8002228:	486b      	ldr	r0, [pc, #428]	; (80023d8 <MX_GPIO_Init+0x2b4>)
 800222a:	f005 fcbf 	bl	8007bac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	2102      	movs	r1, #2
 8002232:	486a      	ldr	r0, [pc, #424]	; (80023dc <MX_GPIO_Init+0x2b8>)
 8002234:	f005 fcba 	bl	8007bac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002238:	2200      	movs	r2, #0
 800223a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800223e:	4868      	ldr	r0, [pc, #416]	; (80023e0 <MX_GPIO_Init+0x2bc>)
 8002240:	f005 fcb4 	bl	8007bac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002244:	2200      	movs	r2, #0
 8002246:	210e      	movs	r1, #14
 8002248:	4866      	ldr	r0, [pc, #408]	; (80023e4 <MX_GPIO_Init+0x2c0>)
 800224a:	f005 fcaf 	bl	8007bac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 800224e:	2200      	movs	r2, #0
 8002250:	f240 3101 	movw	r1, #769	; 0x301
 8002254:	4864      	ldr	r0, [pc, #400]	; (80023e8 <MX_GPIO_Init+0x2c4>)
 8002256:	f005 fca9 	bl	8007bac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 800225a:	f241 5304 	movw	r3, #5380	; 0x1504
 800225e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4857      	ldr	r0, [pc, #348]	; (80023d0 <MX_GPIO_Init+0x2ac>)
 8002274:	f005 faf2 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002278:	f248 0302 	movw	r3, #32770	; 0x8002
 800227c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	4850      	ldr	r0, [pc, #320]	; (80023d4 <MX_GPIO_Init+0x2b0>)
 8002292:	f005 fae3 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002296:	2330      	movs	r3, #48	; 0x30
 8002298:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a6:	f107 031c 	add.w	r3, r7, #28
 80022aa:	4619      	mov	r1, r3
 80022ac:	484a      	ldr	r0, [pc, #296]	; (80023d8 <MX_GPIO_Init+0x2b4>)
 80022ae:	f005 fad5 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	4844      	ldr	r0, [pc, #272]	; (80023dc <MX_GPIO_Init+0x2b8>)
 80022ca:	f005 fac7 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 80022ce:	2304      	movs	r3, #4
 80022d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	483e      	ldr	r0, [pc, #248]	; (80023dc <MX_GPIO_Init+0x2b8>)
 80022e2:	f005 fabb 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 80022e6:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80022ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	4838      	ldr	r0, [pc, #224]	; (80023e0 <MX_GPIO_Init+0x2bc>)
 8002300:	f005 faac 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002304:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002308:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230e:	2301      	movs	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4831      	ldr	r0, [pc, #196]	; (80023e0 <MX_GPIO_Init+0x2bc>)
 800231a:	f005 fa9f 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 800231e:	2301      	movs	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002326:	2301      	movs	r3, #1
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	482c      	ldr	r0, [pc, #176]	; (80023e4 <MX_GPIO_Init+0x2c0>)
 8002332:	f005 fa93 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002336:	230e      	movs	r3, #14
 8002338:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	4825      	ldr	r0, [pc, #148]	; (80023e4 <MX_GPIO_Init+0x2c0>)
 800234e:	f005 fa85 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002352:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002356:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235c:	2301      	movs	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	481a      	ldr	r0, [pc, #104]	; (80023d0 <MX_GPIO_Init+0x2ac>)
 8002368:	f005 fa78 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 800236c:	f240 3301 	movw	r3, #769	; 0x301
 8002370:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	4818      	ldr	r0, [pc, #96]	; (80023e8 <MX_GPIO_Init+0x2c4>)
 8002386:	f005 fa69 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 800238a:	2310      	movs	r3, #16
 800238c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	4811      	ldr	r0, [pc, #68]	; (80023e4 <MX_GPIO_Init+0x2c0>)
 800239e:	f005 fa5d 	bl	800785c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_GPIO_Init+0x2b0>)
 80023c0:	f005 fa4c 	bl	800785c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	; 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	58024400 	.word	0x58024400
 80023d0:	58021000 	.word	0x58021000
 80023d4:	58020000 	.word	0x58020000
 80023d8:	58020800 	.word	0x58020800
 80023dc:	58020400 	.word	0x58020400
 80023e0:	58021400 	.word	0x58021400
 80023e4:	58021800 	.word	0x58021800
 80023e8:	58020c00 	.word	0x58020c00

080023ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f0:	b672      	cpsid	i
}
 80023f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023f4:	e7fe      	b.n	80023f4 <Error_Handler+0x8>
	...

080023f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_MspInit+0x30>)
 8002400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_MspInit+0x30>)
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_MspInit+0x30>)
 8002410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	58024400 	.word	0x58024400

0800242c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	; 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5d      	ldr	r2, [pc, #372]	; (80025c0 <HAL_ADC_MspInit+0x194>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d159      	bne.n	8002502 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 8002450:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002454:	4a5b      	ldr	r2, [pc, #364]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 8002456:	f043 0320 	orr.w	r3, r3, #32
 800245a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800245e:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 8002460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246c:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800247c:	4b51      	ldr	r3, [pc, #324]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800248a:	2304      	movs	r3, #4
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248e:	2303      	movs	r3, #3
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	484a      	ldr	r0, [pc, #296]	; (80025c8 <HAL_ADC_MspInit+0x19c>)
 800249e:	f005 f9dd 	bl	800785c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024a4:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <HAL_ADC_MspInit+0x1a4>)
 80024a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024a8:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024aa:	2209      	movs	r2, #9
 80024ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b4:	4b45      	ldr	r3, [pc, #276]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024e4:	4839      	ldr	r0, [pc, #228]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024e6:	f002 fd81 	bl	8004fec <HAL_DMA_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80024f0:	f7ff ff7c 	bl	80023ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a35      	ldr	r2, [pc, #212]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024f8:	659a      	str	r2, [r3, #88]	; 0x58
 80024fa:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_ADC_MspInit+0x1a0>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002500:	e059      	b.n	80025b6 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <HAL_ADC_MspInit+0x1a8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d154      	bne.n	80025b6 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002512:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 8002514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 800252c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_ADC_MspInit+0x198>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002548:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800254c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002550:	f001 f8b6 	bl	80036c0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 8002556:	4a21      	ldr	r2, [pc, #132]	; (80025dc <HAL_ADC_MspInit+0x1b0>)
 8002558:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800255a:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 800255c:	2273      	movs	r2, #115	; 0x73
 800255e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002566:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 800256e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002572:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 8002576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800257a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 800257e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002582:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 8002586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 800258e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002592:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800259a:	480f      	ldr	r0, [pc, #60]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 800259c:	f002 fd26 	bl	8004fec <HAL_DMA_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80025a6:	f7ff ff21 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 80025ae:	659a      	str	r2, [r3, #88]	; 0x58
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_ADC_MspInit+0x1ac>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025b6:	bf00      	nop
 80025b8:	3730      	adds	r7, #48	; 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40022000 	.word	0x40022000
 80025c4:	58024400 	.word	0x58024400
 80025c8:	58020000 	.word	0x58020000
 80025cc:	24000d4c 	.word	0x24000d4c
 80025d0:	40020088 	.word	0x40020088
 80025d4:	58026000 	.word	0x58026000
 80025d8:	24000dc4 	.word	0x24000dc4
 80025dc:	400204b8 	.word	0x400204b8

080025e0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0b8      	sub	sp, #224	; 0xe0
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	22b8      	movs	r2, #184	; 0xb8
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f017 ff10 	bl	801a426 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <HAL_FDCAN_MspInit+0xc4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d145      	bne.n	800269c <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002610:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800261c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002620:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f007 feee 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002632:	f7ff fedb 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_FDCAN_MspInit+0xc8>)
 8002638:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_FDCAN_MspInit+0xc8>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_FDCAN_MspInit+0xc8>)
 8002648:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_FDCAN_MspInit+0xc8>)
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <HAL_FDCAN_MspInit+0xc8>)
 800265c:	f043 0320 	orr.w	r3, r3, #32
 8002660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_FDCAN_MspInit+0xc8>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002672:	23c0      	movs	r3, #192	; 0xc0
 8002674:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002690:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002694:	4619      	mov	r1, r3
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_FDCAN_MspInit+0xcc>)
 8002698:	f005 f8e0 	bl	800785c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	37e0      	adds	r7, #224	; 0xe0
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	4000d400 	.word	0x4000d400
 80026a8:	58024400 	.word	0x58024400
 80026ac:	58021400 	.word	0x58021400

080026b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0b8      	sub	sp, #224	; 0xe0
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	22b8      	movs	r2, #184	; 0xb8
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f017 fea8 	bl	801a426 <memset>
  if(hi2c->Instance==I2C2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_I2C_MspInit+0xd4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d14d      	bne.n	800277c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026e0:	f04f 0208 	mov.w	r2, #8
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	4618      	mov	r0, r3
 80026f8:	f007 fe86 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002702:	f7ff fe73 	bl	80023ec <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_I2C_MspInit+0xd8>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270c:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_I2C_MspInit+0xd8>)
 800270e:	f043 0320 	orr.w	r3, r3, #32
 8002712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_I2C_MspInit+0xd8>)
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002724:	2303      	movs	r3, #3
 8002726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272a:	2312      	movs	r3, #18
 800272c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800273c:	2304      	movs	r3, #4
 800273e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002742:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002746:	4619      	mov	r1, r3
 8002748:	4810      	ldr	r0, [pc, #64]	; (800278c <HAL_I2C_MspInit+0xdc>)
 800274a:	f005 f887 	bl	800785c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_I2C_MspInit+0xd8>)
 8002750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002754:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <HAL_I2C_MspInit+0xd8>)
 8002756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800275a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_I2C_MspInit+0xd8>)
 8002760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	2021      	movs	r0, #33	; 0x21
 8002772:	f002 fc06 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002776:	2021      	movs	r0, #33	; 0x21
 8002778:	f002 fc1d 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	37e0      	adds	r7, #224	; 0xe0
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40005800 	.word	0x40005800
 8002788:	58024400 	.word	0x58024400
 800278c:	58021400 	.word	0x58021400

08002790 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0ba      	sub	sp, #232	; 0xe8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a8:	f107 0318 	add.w	r3, r7, #24
 80027ac:	22b8      	movs	r2, #184	; 0xb8
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f017 fe38 	bl	801a426 <memset>
  if(hsd->Instance==SDMMC2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_SD_MspInit+0x1a0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	f040 80b3 	bne.w	8002928 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80027c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d2:	f107 0318 	add.w	r3, r7, #24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f007 fe16 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80027e2:	f7ff fe03 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80027e6:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 80027e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027ec:	4a51      	ldr	r2, [pc, #324]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 80027ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80027f6:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 80027f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280a:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002814:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002828:	4a42      	ldr	r2, [pc, #264]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 800282a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002832:	4b40      	ldr	r3, [pc, #256]	; (8002934 <HAL_SD_MspInit+0x1a4>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002840:	2340      	movs	r3, #64	; 0x40
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002858:	230b      	movs	r3, #11
 800285a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002862:	4619      	mov	r1, r3
 8002864:	4834      	ldr	r0, [pc, #208]	; (8002938 <HAL_SD_MspInit+0x1a8>)
 8002866:	f004 fff9 	bl	800785c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002876:	2301      	movs	r3, #1
 8002878:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002882:	230b      	movs	r3, #11
 8002884:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002888:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800288c:	4619      	mov	r1, r3
 800288e:	482a      	ldr	r0, [pc, #168]	; (8002938 <HAL_SD_MspInit+0x1a8>)
 8002890:	f004 ffe4 	bl	800785c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80028ae:	230b      	movs	r3, #11
 80028b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4820      	ldr	r0, [pc, #128]	; (800293c <HAL_SD_MspInit+0x1ac>)
 80028bc:	f004 ffce 	bl	800785c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80028da:	230b      	movs	r3, #11
 80028dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4815      	ldr	r0, [pc, #84]	; (800293c <HAL_SD_MspInit+0x1ac>)
 80028e8:	f004 ffb8 	bl	800785c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002906:	230a      	movs	r3, #10
 8002908:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800290c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002910:	4619      	mov	r1, r3
 8002912:	480a      	ldr	r0, [pc, #40]	; (800293c <HAL_SD_MspInit+0x1ac>)
 8002914:	f004 ffa2 	bl	800785c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	207c      	movs	r0, #124	; 0x7c
 800291e:	f002 fb30 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002922:	207c      	movs	r0, #124	; 0x7c
 8002924:	f002 fb47 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002928:	bf00      	nop
 800292a:	37e8      	adds	r7, #232	; 0xe8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	48022400 	.word	0x48022400
 8002934:	58024400 	.word	0x58024400
 8002938:	58020c00 	.word	0x58020c00
 800293c:	58021800 	.word	0x58021800

08002940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08e      	sub	sp, #56	; 0x38
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a4f      	ldr	r2, [pc, #316]	; (8002a9c <HAL_SPI_MspInit+0x15c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12e      	bne.n	80029c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002962:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002968:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 800296a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800296e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002972:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002980:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002986:	4a46      	ldr	r2, [pc, #280]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800299e:	23e0      	movs	r3, #224	; 0xe0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ae:	2305      	movs	r3, #5
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b6:	4619      	mov	r1, r3
 80029b8:	483a      	ldr	r0, [pc, #232]	; (8002aa4 <HAL_SPI_MspInit+0x164>)
 80029ba:	f004 ff4f 	bl	800785c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029be:	e068      	b.n	8002a92 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <HAL_SPI_MspInit+0x168>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12f      	bne.n	8002a2a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ca:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 80029cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d0:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 80029d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 80029dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a18:	2305      	movs	r3, #5
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	4822      	ldr	r0, [pc, #136]	; (8002aac <HAL_SPI_MspInit+0x16c>)
 8002a24:	f004 ff1a 	bl	800785c <HAL_GPIO_Init>
}
 8002a28:	e033      	b.n	8002a92 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <HAL_SPI_MspInit+0x170>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d12e      	bne.n	8002a92 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a3a:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_SPI_MspInit+0x160>)
 8002a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a82:	2306      	movs	r3, #6
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4809      	ldr	r0, [pc, #36]	; (8002ab4 <HAL_SPI_MspInit+0x174>)
 8002a8e:	f004 fee5 	bl	800785c <HAL_GPIO_Init>
}
 8002a92:	bf00      	nop
 8002a94:	3738      	adds	r7, #56	; 0x38
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40013000 	.word	0x40013000
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	58020000 	.word	0x58020000
 8002aa8:	40003800 	.word	0x40003800
 8002aac:	58020400 	.word	0x58020400
 8002ab0:	40003c00 	.word	0x40003c00
 8002ab4:	58020800 	.word	0x58020800

08002ab8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d15d      	bne.n	8002b96 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ada:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae0:	4a8c      	ldr	r2, [pc, #560]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aea:	4b8a      	ldr	r3, [pc, #552]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afe:	4a85      	ldr	r2, [pc, #532]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b08:	4b82      	ldr	r3, [pc, #520]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b26:	2301      	movs	r3, #1
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4879      	ldr	r0, [pc, #484]	; (8002d18 <HAL_TIM_PWM_MspInit+0x260>)
 8002b32:	f004 fe93 	bl	800785c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002b36:	4b79      	ldr	r3, [pc, #484]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b38:	4a79      	ldr	r2, [pc, #484]	; (8002d20 <HAL_TIM_PWM_MspInit+0x268>)
 8002b3a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002b3c:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b3e:	2214      	movs	r2, #20
 8002b40:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b48:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b4e:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b54:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b56:	4b71      	ldr	r3, [pc, #452]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b5c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b5e:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b64:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002b66:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002b6c:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b72:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002b78:	4868      	ldr	r0, [pc, #416]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b7a:	f002 fa37 	bl	8004fec <HAL_DMA_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002b84:	f7ff fc32 	bl	80023ec <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a64      	ldr	r2, [pc, #400]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_TIM_PWM_MspInit+0x264>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b94:	e119      	b.n	8002dca <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a62      	ldr	r2, [pc, #392]	; (8002d24 <HAL_TIM_PWM_MspInit+0x26c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d16d      	bne.n	8002c7c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba0:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ba2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ba6:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bb0:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002bbe:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bc0:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <HAL_TIM_PWM_MspInit+0x274>)
 8002bc2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002bc4:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bc6:	2218      	movs	r2, #24
 8002bc8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd0:	4b55      	ldr	r3, [pc, #340]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002bd6:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bdc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bde:	4b52      	ldr	r3, [pc, #328]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002be4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002be6:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002be8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bec:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002bee:	4b4e      	ldr	r3, [pc, #312]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bfa:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002c00:	4849      	ldr	r0, [pc, #292]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002c02:	f002 f9f3 	bl	8004fec <HAL_DMA_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002c0c:	f7ff fbee 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a45      	ldr	r2, [pc, #276]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
 8002c16:	4a44      	ldr	r2, [pc, #272]	; (8002d28 <HAL_TIM_PWM_MspInit+0x270>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002c1c:	4b44      	ldr	r3, [pc, #272]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c1e:	4a45      	ldr	r2, [pc, #276]	; (8002d34 <HAL_TIM_PWM_MspInit+0x27c>)
 8002c20:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c24:	2217      	movs	r2, #23
 8002c26:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c2e:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c34:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c3c:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c42:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c44:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c4a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002c4c:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002c5e:	4834      	ldr	r0, [pc, #208]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c60:	f002 f9c4 	bl	8004fec <HAL_DMA_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002c6a:	f7ff fbbf 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2f      	ldr	r2, [pc, #188]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
 8002c74:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <HAL_TIM_PWM_MspInit+0x278>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c7a:	e0a6      	b.n	8002dca <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2d      	ldr	r2, [pc, #180]	; (8002d38 <HAL_TIM_PWM_MspInit+0x280>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d15e      	bne.n	8002d44 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c8c:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002ca4:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002ca6:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_TIM_PWM_MspInit+0x288>)
 8002ca8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cac:	221f      	movs	r2, #31
 8002cae:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cb2:	2240      	movs	r2, #64	; 0x40
 8002cb4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cca:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cd2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002ce6:	4815      	ldr	r0, [pc, #84]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002ce8:	f002 f980 	bl	8004fec <HAL_DMA_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002cf2:	f7ff fb7b 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_TIM_PWM_MspInit+0x284>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	201e      	movs	r0, #30
 8002d08:	f002 f93b 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d0c:	201e      	movs	r0, #30
 8002d0e:	f002 f952 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
}
 8002d12:	e05a      	b.n	8002dca <HAL_TIM_PWM_MspInit+0x312>
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58020000 	.word	0x58020000
 8002d1c:	2400130c 	.word	0x2400130c
 8002d20:	40020028 	.word	0x40020028
 8002d24:	40000400 	.word	0x40000400
 8002d28:	24001384 	.word	0x24001384
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	240013fc 	.word	0x240013fc
 8002d34:	40020070 	.word	0x40020070
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	24001474 	.word	0x24001474
 8002d40:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_TIM_PWM_MspInit+0x31c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d13d      	bne.n	8002dca <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_TIM_PWM_MspInit+0x320>)
 8002d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_TIM_PWM_MspInit+0x320>)
 8002d56:	f043 0308 	orr.w	r3, r3, #8
 8002d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_TIM_PWM_MspInit+0x320>)
 8002d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_TIM_PWM_MspInit+0x328>)
 8002d70:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d74:	223a      	movs	r2, #58	; 0x3a
 8002d76:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d92:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d9a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002dae:	480b      	ldr	r0, [pc, #44]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002db0:	f002 f91c 	bl	8004fec <HAL_DMA_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002dba:	f7ff fb17 	bl	80023ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc4:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <HAL_TIM_PWM_MspInit+0x324>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002dca:	bf00      	nop
 8002dcc:	3730      	adds	r7, #48	; 0x30
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	240014ec 	.word	0x240014ec
 8002de0:	40020040 	.word	0x40020040

08002de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <HAL_TIM_Base_MspInit+0x68>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10f      	bne.n	8002e16 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_TIM_Base_MspInit+0x6c>)
 8002df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <HAL_TIM_Base_MspInit+0x6c>)
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_TIM_Base_MspInit+0x6c>)
 8002e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002e14:	e013      	b.n	8002e3e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_TIM_Base_MspInit+0x70>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10e      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_TIM_Base_MspInit+0x6c>)
 8002e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_TIM_Base_MspInit+0x6c>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_TIM_Base_MspInit+0x6c>)
 8002e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40001c00 	.word	0x40001c00
 8002e50:	58024400 	.word	0x58024400
 8002e54:	40002000 	.word	0x40002000

08002e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d120      	bne.n	8002ebc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e80:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4844      	ldr	r0, [pc, #272]	; (8002fc8 <HAL_TIM_MspPostInit+0x170>)
 8002eb6:	f004 fcd1 	bl	800785c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002eba:	e07f      	b.n	8002fbc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_TIM_MspPostInit+0x174>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d11f      	bne.n	8002f06 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ecc:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002ece:	f043 0302 	orr.w	r3, r3, #2
 8002ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ee4:	2330      	movs	r3, #48	; 0x30
 8002ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002eec:	2302      	movs	r3, #2
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	4832      	ldr	r0, [pc, #200]	; (8002fc8 <HAL_TIM_MspPostInit+0x170>)
 8002f00:	f004 fcac 	bl	800785c <HAL_GPIO_Init>
}
 8002f04:	e05a      	b.n	8002fbc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <HAL_TIM_MspPostInit+0x178>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d131      	bne.n	8002f74 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f16:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002f2e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f40:	2302      	movs	r3, #2
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4822      	ldr	r0, [pc, #136]	; (8002fd4 <HAL_TIM_MspPostInit+0x17c>)
 8002f4c:	f004 fc86 	bl	800785c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f62:	2302      	movs	r3, #2
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f66:	f107 031c 	add.w	r3, r7, #28
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4819      	ldr	r0, [pc, #100]	; (8002fd4 <HAL_TIM_MspPostInit+0x17c>)
 8002f6e:	f004 fc75 	bl	800785c <HAL_GPIO_Init>
}
 8002f72:	e023      	b.n	8002fbc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_TIM_MspPostInit+0x180>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d11e      	bne.n	8002fbc <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f84:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_TIM_MspPostInit+0x16c>)
 8002f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fac:	2302      	movs	r3, #2
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4809      	ldr	r0, [pc, #36]	; (8002fdc <HAL_TIM_MspPostInit+0x184>)
 8002fb8:	f004 fc50 	bl	800785c <HAL_GPIO_Init>
}
 8002fbc:	bf00      	nop
 8002fbe:	3730      	adds	r7, #48	; 0x30
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	58020400 	.word	0x58020400
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	58020c00 	.word	0x58020c00
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	58020000 	.word	0x58020000

08002fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0ba      	sub	sp, #232	; 0xe8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	22b8      	movs	r2, #184	; 0xb8
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f017 fa10 	bl	801a426 <memset>
  if(huart->Instance==UART4)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a4d      	ldr	r2, [pc, #308]	; (8003140 <HAL_UART_MspInit+0x160>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d147      	bne.n	80030a0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003010:	f04f 0202 	mov.w	r2, #2
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003022:	f107 0318 	add.w	r3, r7, #24
 8003026:	4618      	mov	r0, r3
 8003028:	f007 f9ee 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003032:	f7ff f9db 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_UART_MspInit+0x164>)
 8003038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800303c:	4a41      	ldr	r2, [pc, #260]	; (8003144 <HAL_UART_MspInit+0x164>)
 800303e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003042:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_UART_MspInit+0x164>)
 8003048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800304c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003054:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_UART_MspInit+0x164>)
 8003056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305a:	4a3a      	ldr	r2, [pc, #232]	; (8003144 <HAL_UART_MspInit+0x164>)
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003064:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_UART_MspInit+0x164>)
 8003066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003072:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800308c:	2308      	movs	r3, #8
 800308e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003096:	4619      	mov	r1, r3
 8003098:	482b      	ldr	r0, [pc, #172]	; (8003148 <HAL_UART_MspInit+0x168>)
 800309a:	f004 fbdf 	bl	800785c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800309e:	e04a      	b.n	8003136 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_UART_MspInit+0x16c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d145      	bne.n	8003136 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80030aa:	f04f 0201 	mov.w	r2, #1
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030bc:	f107 0318 	add.w	r3, r7, #24
 80030c0:	4618      	mov	r0, r3
 80030c2:	f007 f9a1 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80030cc:	f7ff f98e 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_UART_MspInit+0x164>)
 80030d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d6:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_UART_MspInit+0x164>)
 80030d8:	f043 0320 	orr.w	r3, r3, #32
 80030dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030e0:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_UART_MspInit+0x164>)
 80030e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_UART_MspInit+0x164>)
 80030f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_UART_MspInit+0x164>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_UART_MspInit+0x164>)
 8003100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800310c:	23c0      	movs	r3, #192	; 0xc0
 800310e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003124:	2307      	movs	r3, #7
 8003126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800312e:	4619      	mov	r1, r3
 8003130:	4807      	ldr	r0, [pc, #28]	; (8003150 <HAL_UART_MspInit+0x170>)
 8003132:	f004 fb93 	bl	800785c <HAL_GPIO_Init>
}
 8003136:	bf00      	nop
 8003138:	37e8      	adds	r7, #232	; 0xe8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40004c00 	.word	0x40004c00
 8003144:	58024400 	.word	0x58024400
 8003148:	58020400 	.word	0x58020400
 800314c:	40011400 	.word	0x40011400
 8003150:	58020800 	.word	0x58020800

08003154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <NMI_Handler+0x4>

0800315a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800315e:	e7fe      	b.n	800315e <HardFault_Handler+0x4>

08003160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <MemManage_Handler+0x4>

08003166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <BusFault_Handler+0x4>

0800316c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <UsageFault_Handler+0x4>

08003172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a0:	f000 fa4a 	bl	8003638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <DMA1_Stream0_IRQHandler+0x10>)
 80031ae:	f002 fcdf 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	24001474 	.word	0x24001474

080031bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <DMA1_Stream1_IRQHandler+0x10>)
 80031c2:	f002 fcd5 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	2400130c 	.word	0x2400130c

080031d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <DMA1_Stream2_IRQHandler+0x10>)
 80031d6:	f002 fccb 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	240014ec 	.word	0x240014ec

080031e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <DMA1_Stream3_IRQHandler+0x10>)
 80031ea:	f002 fcc1 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	24001384 	.word	0x24001384

080031f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <DMA1_Stream4_IRQHandler+0x10>)
 80031fe:	f002 fcb7 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	240013fc 	.word	0x240013fc

0800320c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <DMA1_Stream5_IRQHandler+0x10>)
 8003212:	f002 fcad 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	24000d4c 	.word	0x24000d4c

08003220 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <TIM4_IRQHandler+0x10>)
 8003226:	f00c fad1 	bl	800f7cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	240011dc 	.word	0x240011dc

08003234 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <I2C2_EV_IRQHandler+0x10>)
 800323a:	f004 fd61 	bl	8007d00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	24000edc 	.word	0x24000edc

08003248 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <DMA2_Stream7_IRQHandler+0x10>)
 800324e:	f002 fc8f 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	24000dc4 	.word	0x24000dc4

0800325c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <OTG_HS_IRQHandler+0x10>)
 8003262:	f004 ff57 	bl	8008114 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	24002db8 	.word	0x24002db8

08003270 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003274:	4802      	ldr	r0, [pc, #8]	; (8003280 <SDMMC2_IRQHandler+0x10>)
 8003276:	f009 ff1d 	bl	800d0b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	24000f30 	.word	0x24000f30

08003284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return 1;
 8003288:	2301      	movs	r3, #1
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <_kill>:

int _kill(int pid, int sig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800329e:	f017 f915 	bl	801a4cc <__errno>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2216      	movs	r2, #22
 80032a6:	601a      	str	r2, [r3, #0]
  return -1;
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_exit>:

void _exit (int status)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ffe7 	bl	8003294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032c6:	e7fe      	b.n	80032c6 <_exit+0x12>

080032c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e00a      	b.n	80032f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032da:	f3af 8000 	nop.w
 80032de:	4601      	mov	r1, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	60ba      	str	r2, [r7, #8]
 80032e6:	b2ca      	uxtb	r2, r1
 80032e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dbf0      	blt.n	80032da <_read+0x12>
  }

  return len;
 80032f8:	687b      	ldr	r3, [r7, #4]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e009      	b.n	8003328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	60ba      	str	r2, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	dbf1      	blt.n	8003314 <_write+0x12>
  }
  return len;
 8003330:	687b      	ldr	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <_close>:

int _close(int file)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003362:	605a      	str	r2, [r3, #4]
  return 0;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <_isatty>:

int _isatty(int file)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <_sbrk+0x5c>)
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <_sbrk+0x60>)
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <_sbrk+0x64>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <_sbrk+0x64>)
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <_sbrk+0x68>)
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <_sbrk+0x64>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d207      	bcs.n	80033e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d4:	f017 f87a 	bl	801a4cc <__errno>
 80033d8:	4603      	mov	r3, r0
 80033da:	220c      	movs	r2, #12
 80033dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	e009      	b.n	80033f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <_sbrk+0x64>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <_sbrk+0x64>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <_sbrk+0x64>)
 80033f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	24050000 	.word	0x24050000
 8003404:	00000800 	.word	0x00000800
 8003408:	2400168c 	.word	0x2400168c
 800340c:	24003630 	.word	0x24003630

08003410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <SystemInit+0xd0>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <SystemInit+0xd0>)
 800341c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003424:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <SystemInit+0xd4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2b06      	cmp	r3, #6
 800342e:	d807      	bhi.n	8003440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003430:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <SystemInit+0xd4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 030f 	bic.w	r3, r3, #15
 8003438:	4a2a      	ldr	r2, [pc, #168]	; (80034e4 <SystemInit+0xd4>)
 800343a:	f043 0307 	orr.w	r3, r3, #7
 800343e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <SystemInit+0xd8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <SystemInit+0xd8>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <SystemInit+0xd8>)
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003452:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <SystemInit+0xd8>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4924      	ldr	r1, [pc, #144]	; (80034e8 <SystemInit+0xd8>)
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <SystemInit+0xdc>)
 800345a:	4013      	ands	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <SystemInit+0xd4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800346a:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <SystemInit+0xd4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 030f 	bic.w	r3, r3, #15
 8003472:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <SystemInit+0xd4>)
 8003474:	f043 0307 	orr.w	r3, r3, #7
 8003478:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <SystemInit+0xd8>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <SystemInit+0xd8>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <SystemInit+0xd8>)
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <SystemInit+0xd8>)
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <SystemInit+0xe0>)
 8003490:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <SystemInit+0xd8>)
 8003494:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <SystemInit+0xe4>)
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <SystemInit+0xd8>)
 800349a:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <SystemInit+0xe8>)
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <SystemInit+0xd8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <SystemInit+0xd8>)
 80034a6:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <SystemInit+0xe8>)
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <SystemInit+0xd8>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <SystemInit+0xd8>)
 80034b2:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <SystemInit+0xe8>)
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <SystemInit+0xd8>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <SystemInit+0xd8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <SystemInit+0xd8>)
 80034c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <SystemInit+0xd8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <SystemInit+0xec>)
 80034d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80034d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00
 80034e4:	52002000 	.word	0x52002000
 80034e8:	58024400 	.word	0x58024400
 80034ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80034f0:	02020200 	.word	0x02020200
 80034f4:	01ff0000 	.word	0x01ff0000
 80034f8:	01010280 	.word	0x01010280
 80034fc:	52004000 	.word	0x52004000

08003500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003504:	f7ff ff84 	bl	8003410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800350a:	490d      	ldr	r1, [pc, #52]	; (8003540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003510:	e002      	b.n	8003518 <LoopCopyDataInit>

08003512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003516:	3304      	adds	r3, #4

08003518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800351c:	d3f9      	bcc.n	8003512 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003520:	4c0a      	ldr	r4, [pc, #40]	; (800354c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003524:	e001      	b.n	800352a <LoopFillZerobss>

08003526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003528:	3204      	adds	r2, #4

0800352a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800352c:	d3fb      	bcc.n	8003526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800352e:	f016 ffd3 	bl	801a4d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003532:	f7fd ff03 	bl	800133c <main>
  bx  lr
 8003536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003538:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800353c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003540:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8003544:	0801e570 	.word	0x0801e570
  ldr r2, =_sbss
 8003548:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 800354c:	24003630 	.word	0x24003630

08003550 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003550:	e7fe      	b.n	8003550 <ADC3_IRQHandler>
	...

08003554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800355a:	2003      	movs	r0, #3
 800355c:	f001 fd06 	bl	8004f6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003560:	f006 fd7c 	bl	800a05c <HAL_RCC_GetSysClockFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_Init+0x68>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	4913      	ldr	r1, [pc, #76]	; (80035c0 <HAL_Init+0x6c>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_Init+0x68>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	4a0e      	ldr	r2, [pc, #56]	; (80035c0 <HAL_Init+0x6c>)
 8003588:	5cd3      	ldrb	r3, [r2, r3]
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <HAL_Init+0x70>)
 8003596:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <HAL_Init+0x74>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800359e:	200f      	movs	r0, #15
 80035a0:	f000 f814 	bl	80035cc <HAL_InitTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e002      	b.n	80035b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035ae:	f7fe ff23 	bl	80023f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	58024400 	.word	0x58024400
 80035c0:	0801dca4 	.word	0x0801dca4
 80035c4:	24000004 	.word	0x24000004
 80035c8:	24000000 	.word	0x24000000

080035cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_InitTick+0x60>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e021      	b.n	8003624 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_InitTick+0x64>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_InitTick+0x60>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fceb 	bl	8004fd2 <HAL_SYSTICK_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00e      	b.n	8003624 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d80a      	bhi.n	8003622 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800360c:	2200      	movs	r2, #0
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f001 fcb5 	bl	8004f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <HAL_InitTick+0x68>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	2400000c 	.word	0x2400000c
 8003630:	24000000 	.word	0x24000000
 8003634:	24000008 	.word	0x24000008

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	2400000c 	.word	0x2400000c
 800365c:	24001690 	.word	0x24001690

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	24001690 	.word	0x24001690

08003678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff ffee 	bl	8003660 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d005      	beq.n	800369e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_Delay+0x44>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800369e:	bf00      	nop
 80036a0:	f7ff ffde 	bl	8003660 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d8f7      	bhi.n	80036a0 <HAL_Delay+0x28>
  {
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2400000c 	.word	0x2400000c

080036c0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	401a      	ands	r2, r3
 80036d4:	4904      	ldr	r1, [pc, #16]	; (80036e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	58000400 	.word	0x58000400

080036ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3360      	adds	r3, #96	; 0x60
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <LL_ADC_SetOffset+0x60>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10b      	bne.n	8003790 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	4313      	orrs	r3, r2
 8003786:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800378e:	e00b      	b.n	80037a8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	58026000 	.word	0x58026000

080037b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3360      	adds	r3, #96	; 0x60
 80037c6:	461a      	mov	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	611a      	str	r2, [r3, #16]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3360      	adds	r3, #96	; 0x60
 8003830:	461a      	mov	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	601a      	str	r2, [r3, #0]
  }
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	58026000 	.word	0x58026000

0800385c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <LL_ADC_SetOffsetSaturation+0x40>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d10e      	bne.n	800388e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3360      	adds	r3, #96	; 0x60
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	58026000 	.word	0x58026000

080038a0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <LL_ADC_SetOffsetSign+0x40>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10e      	bne.n	80038d2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3360      	adds	r3, #96	; 0x60
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	58026000 	.word	0x58026000

080038e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3360      	adds	r3, #96	; 0x60
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <LL_ADC_SetOffsetState+0x50>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	431a      	orrs	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003916:	e007      	b.n	8003928 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	431a      	orrs	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	601a      	str	r2, [r3, #0]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	58026000 	.word	0x58026000

08003938 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3330      	adds	r3, #48	; 0x30
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	4413      	add	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	211f      	movs	r1, #31
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	401a      	ands	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	f003 011f 	and.w	r1, r3, #31
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	fa01 f303 	lsl.w	r3, r1, r3
 800397e:	431a      	orrs	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3314      	adds	r3, #20
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	0e5b      	lsrs	r3, r3, #25
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	4413      	add	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	0d1b      	lsrs	r3, r3, #20
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2107      	movs	r1, #7
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	401a      	ands	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	0d1b      	lsrs	r3, r3, #20
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	431a      	orrs	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <LL_ADC_SetChannelSingleDiff+0x78>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d115      	bne.n	8003a28 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0318 	and.w	r3, r3, #24
 8003a12:	4914      	ldr	r1, [pc, #80]	; (8003a64 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a14:	40d9      	lsrs	r1, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	400b      	ands	r3, r1
 8003a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a26:	e014      	b.n	8003a52 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0318 	and.w	r3, r3, #24
 8003a3e:	4909      	ldr	r1, [pc, #36]	; (8003a64 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a40:	40d9      	lsrs	r1, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	400b      	ands	r3, r1
 8003a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	58026000 	.word	0x58026000
 8003a64:	000fffff 	.word	0x000fffff

08003a68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6093      	str	r3, [r2, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	5fffffc0 	.word	0x5fffffc0

08003a8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d101      	bne.n	8003aa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	6fffffc0 	.word	0x6fffffc0

08003adc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af0:	d101      	bne.n	8003af6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <LL_ADC_IsEnabled+0x18>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <LL_ADC_IsEnabled+0x1a>
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d101      	bne.n	8003b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d101      	bne.n	8003b68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e1ee      	b.n	8003f70 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d109      	bne.n	8003bb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fe fc43 	bl	800242c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff67 	bl	8003a8c <LL_ADC_IsDeepPowerDownEnabled>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff4d 	bl	8003a68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff82 	bl	8003adc <LL_ADC_IsInternalRegulatorEnabled>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d114      	bne.n	8003c08 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff66 	bl	8003ab4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003be8:	4b8e      	ldr	r3, [pc, #568]	; (8003e24 <HAL_ADC_Init+0x2ac>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	4a8e      	ldr	r2, [pc, #568]	; (8003e28 <HAL_ADC_Init+0x2b0>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bfa:	e002      	b.n	8003c02 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f9      	bne.n	8003bfc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff65 	bl	8003adc <LL_ADC_IsInternalRegulatorEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	f043 0210 	orr.w	r2, r3, #16
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff76 	bl	8003b2a <LL_ADC_REG_IsConversionOngoing>
 8003c3e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 8188 	bne.w	8003f5e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 8184 	bne.w	8003f5e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c5e:	f043 0202 	orr.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff ff4a 	bl	8003b04 <LL_ADC_IsEnabled>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d136      	bne.n	8003ce4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6c      	ldr	r2, [pc, #432]	; (8003e2c <HAL_ADC_Init+0x2b4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_ADC_Init+0x112>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6a      	ldr	r2, [pc, #424]	; (8003e30 <HAL_ADC_Init+0x2b8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10e      	bne.n	8003ca8 <HAL_ADC_Init+0x130>
 8003c8a:	4868      	ldr	r0, [pc, #416]	; (8003e2c <HAL_ADC_Init+0x2b4>)
 8003c8c:	f7ff ff3a 	bl	8003b04 <LL_ADC_IsEnabled>
 8003c90:	4604      	mov	r4, r0
 8003c92:	4867      	ldr	r0, [pc, #412]	; (8003e30 <HAL_ADC_Init+0x2b8>)
 8003c94:	f7ff ff36 	bl	8003b04 <LL_ADC_IsEnabled>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4323      	orrs	r3, r4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e008      	b.n	8003cba <HAL_ADC_Init+0x142>
 8003ca8:	4862      	ldr	r0, [pc, #392]	; (8003e34 <HAL_ADC_Init+0x2bc>)
 8003caa:	f7ff ff2b 	bl	8003b04 <LL_ADC_IsEnabled>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d012      	beq.n	8003ce4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <HAL_ADC_Init+0x2b4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_ADC_Init+0x15a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_ADC_Init+0x2b8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_Init+0x15e>
 8003cd2:	4a59      	ldr	r2, [pc, #356]	; (8003e38 <HAL_ADC_Init+0x2c0>)
 8003cd4:	e000      	b.n	8003cd8 <HAL_ADC_Init+0x160>
 8003cd6:	4a59      	ldr	r2, [pc, #356]	; (8003e3c <HAL_ADC_Init+0x2c4>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f7ff fd04 	bl	80036ec <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_ADC_Init+0x2bc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d129      	bne.n	8003d42 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7e5b      	ldrb	r3, [r3, #25]
 8003cf2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003cf8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003cfe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d013      	beq.n	8003d30 <HAL_ADC_Init+0x1b8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	d00d      	beq.n	8003d2c <HAL_ADC_Init+0x1b4>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b1c      	cmp	r3, #28
 8003d16:	d007      	beq.n	8003d28 <HAL_ADC_Init+0x1b0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b18      	cmp	r3, #24
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_Init+0x1ac>
 8003d20:	2318      	movs	r3, #24
 8003d22:	e006      	b.n	8003d32 <HAL_ADC_Init+0x1ba>
 8003d24:	2300      	movs	r3, #0
 8003d26:	e004      	b.n	8003d32 <HAL_ADC_Init+0x1ba>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	e002      	b.n	8003d32 <HAL_ADC_Init+0x1ba>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	e000      	b.n	8003d32 <HAL_ADC_Init+0x1ba>
 8003d30:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003d32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d3a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e00e      	b.n	8003d60 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7e5b      	ldrb	r3, [r3, #25]
 8003d46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d4c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d106      	bne.n	8003d78 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	045b      	lsls	r3, r3, #17
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <HAL_ADC_Init+0x2bc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d115      	bne.n	8003dca <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_ADC_Init+0x2c8>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	69b9      	ldr	r1, [r7, #24]
 8003dae:	430b      	orrs	r3, r1
 8003db0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	611a      	str	r2, [r3, #16]
 8003dc8:	e009      	b.n	8003dde <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <HAL_ADC_Init+0x2cc>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fea1 	bl	8003b2a <LL_ADC_REG_IsConversionOngoing>
 8003de8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff feae 	bl	8003b50 <LL_ADC_INJ_IsConversionOngoing>
 8003df4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f040 808e 	bne.w	8003f1a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 808a 	bne.w	8003f1a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_ADC_Init+0x2bc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d11b      	bne.n	8003e48 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7e1b      	ldrb	r3, [r3, #24]
 8003e14:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e1c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e018      	b.n	8003e56 <HAL_ADC_Init+0x2de>
 8003e24:	24000000 	.word	0x24000000
 8003e28:	053e2d63 	.word	0x053e2d63
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40022100 	.word	0x40022100
 8003e34:	58026000 	.word	0x58026000
 8003e38:	40022300 	.word	0x40022300
 8003e3c:	58026300 	.word	0x58026300
 8003e40:	fff04007 	.word	0xfff04007
 8003e44:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7e1b      	ldrb	r3, [r3, #24]
 8003e4c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_ADC_Init+0x400>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	69b9      	ldr	r1, [r7, #24]
 8003e66:	430b      	orrs	r3, r1
 8003e68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d137      	bne.n	8003ee4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <HAL_ADC_Init+0x404>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d116      	bne.n	8003eb2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_ADC_Init+0x408>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	611a      	str	r2, [r3, #16]
 8003eb0:	e020      	b.n	8003ef4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_ADC_Init+0x40c>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ec0:	3a01      	subs	r2, #1
 8003ec2:	0411      	lsls	r1, r2, #16
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ec8:	4311      	orrs	r1, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e007      	b.n	8003ef4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HAL_ADC_Init+0x404>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d002      	beq.n	8003f1a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fd63 	bl	80049e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10c      	bne.n	8003f3c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	f023 010f 	bic.w	r1, r3, #15
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
 8003f3a:	e007      	b.n	8003f4c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020f 	bic.w	r2, r2, #15
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f50:	f023 0303 	bic.w	r3, r3, #3
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	661a      	str	r2, [r3, #96]	; 0x60
 8003f5c:	e007      	b.n	8003f6e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3724      	adds	r7, #36	; 0x24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd90      	pop	{r4, r7, pc}
 8003f78:	ffffbffc 	.word	0xffffbffc
 8003f7c:	58026000 	.word	0x58026000
 8003f80:	fc00f81f 	.word	0xfc00f81f
 8003f84:	fc00f81e 	.word	0xfc00f81e

08003f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b0b9      	sub	sp, #228	; 0xe4
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4aa9      	ldr	r2, [pc, #676]	; (8004250 <HAL_ADC_ConfigChannel+0x2c8>)
 8003faa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d102      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x34>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	f000 bcfa 	b.w	80049b0 <HAL_ADC_ConfigChannel+0xa28>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fdae 	bl	8003b2a <LL_ADC_REG_IsConversionOngoing>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f040 84de 	bne.w	8004992 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a9e      	ldr	r2, [pc, #632]	; (8004254 <HAL_ADC_ConfigChannel+0x2cc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d033      	beq.n	8004048 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x76>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	0e9b      	lsrs	r3, r3, #26
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	e01d      	b.n	800403a <HAL_ADC_ConfigChannel+0xb2>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800401a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e004      	b.n	8004030 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2201      	movs	r2, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	69d1      	ldr	r1, [r2, #28]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430b      	orrs	r3, r1
 8004046:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	f7ff fc6f 	bl	8003938 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fd63 	bl	8003b2a <LL_ADC_REG_IsConversionOngoing>
 8004064:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fd6f 	bl	8003b50 <LL_ADC_INJ_IsConversionOngoing>
 8004072:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800407a:	2b00      	cmp	r3, #0
 800407c:	f040 8270 	bne.w	8004560 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 826b 	bne.w	8004560 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	461a      	mov	r2, r3
 8004098:	f7ff fc7a 	bl	8003990 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6c      	ldr	r2, [pc, #432]	; (8004254 <HAL_ADC_ConfigChannel+0x2cc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d10d      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040c0:	e032      	b.n	8004128 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_ADC_ConfigChannel+0x2d0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80040ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ce:	d10b      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x160>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	e01d      	b.n	8004124 <HAL_ADC_ConfigChannel+0x19c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_ADC_ConfigChannel+0x186>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	e00a      	b.n	8004124 <HAL_ADC_ConfigChannel+0x19c>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d048      	beq.n	80041c2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6919      	ldr	r1, [r3, #16]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004140:	f7ff fb08 	bl	8003754 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a42      	ldr	r2, [pc, #264]	; (8004254 <HAL_ADC_ConfigChannel+0x2cc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d119      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6919      	ldr	r1, [r3, #16]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	461a      	mov	r2, r3
 800415c:	f7ff fba0 	bl	80038a0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6919      	ldr	r1, [r3, #16]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x1f0>
 8004172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004176:	e000      	b.n	800417a <HAL_ADC_ConfigChannel+0x1f2>
 8004178:	2300      	movs	r3, #0
 800417a:	461a      	mov	r2, r3
 800417c:	f7ff fb6e 	bl	800385c <LL_ADC_SetOffsetSaturation>
 8004180:	e1ee      	b.n	8004560 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6919      	ldr	r1, [r3, #16]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004190:	2b01      	cmp	r3, #1
 8004192:	d102      	bne.n	800419a <HAL_ADC_ConfigChannel+0x212>
 8004194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004198:	e000      	b.n	800419c <HAL_ADC_ConfigChannel+0x214>
 800419a:	2300      	movs	r3, #0
 800419c:	461a      	mov	r2, r3
 800419e:	f7ff fb3b 	bl	8003818 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6919      	ldr	r1, [r3, #16]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	7e1b      	ldrb	r3, [r3, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d102      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x230>
 80041b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b6:	e000      	b.n	80041ba <HAL_ADC_ConfigChannel+0x232>
 80041b8:	2300      	movs	r3, #0
 80041ba:	461a      	mov	r2, r3
 80041bc:	f7ff fb12 	bl	80037e4 <LL_ADC_SetDataRightShift>
 80041c0:	e1ce      	b.n	8004560 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a23      	ldr	r2, [pc, #140]	; (8004254 <HAL_ADC_ConfigChannel+0x2cc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	f040 8181 	bne.w	80044d0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff faef 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 80041da:	4603      	mov	r3, r0
 80041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x272>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fae4 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 80041f0:	4603      	mov	r3, r0
 80041f2:	0e9b      	lsrs	r3, r3, #26
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	e01e      	b.n	8004238 <HAL_ADC_ConfigChannel+0x2b0>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fad9 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004206:	4603      	mov	r3, r0
 8004208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800421c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004228:	2320      	movs	r3, #32
 800422a:	e004      	b.n	8004236 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800422c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_ADC_ConfigChannel+0x2d4>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	e01e      	b.n	800428e <HAL_ADC_ConfigChannel+0x306>
 8004250:	47ff0000 	.word	0x47ff0000
 8004254:	58026000 	.word	0x58026000
 8004258:	5c001000 	.word	0x5c001000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004280:	2320      	movs	r3, #32
 8004282:	e004      	b.n	800428e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	429a      	cmp	r2, r3
 8004290:	d106      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fb22 	bl	80038e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fa86 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x344>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fa7b 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	0e9b      	lsrs	r3, r3, #26
 80042c6:	f003 021f 	and.w	r2, r3, #31
 80042ca:	e01e      	b.n	800430a <HAL_ADC_ConfigChannel+0x382>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fa70 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 80042d8:	4603      	mov	r3, r0
 80042da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80042ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80042f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80042fa:	2320      	movs	r3, #32
 80042fc:	e004      	b.n	8004308 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80042fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004312:	2b00      	cmp	r3, #0
 8004314:	d105      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x39a>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	0e9b      	lsrs	r3, r3, #26
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	e018      	b.n	8004354 <HAL_ADC_ConfigChannel+0x3cc>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800433a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800433e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004346:	2320      	movs	r3, #32
 8004348:	e004      	b.n	8004354 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800434a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	429a      	cmp	r2, r3
 8004356:	d106      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	2101      	movs	r1, #1
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fabf 	bl	80038e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fa23 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x40a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fa18 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	0e9b      	lsrs	r3, r3, #26
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	e01e      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x448>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2102      	movs	r1, #2
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fa0d 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 800439e:	4603      	mov	r3, r0
 80043a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80043b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80043b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80043c0:	2320      	movs	r3, #32
 80043c2:	e004      	b.n	80043ce <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80043c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c8:	fab3 f383 	clz	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x460>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	e014      	b.n	8004412 <HAL_ADC_ConfigChannel+0x48a>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80043f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80043fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004404:	2320      	movs	r3, #32
 8004406:	e004      	b.n	8004412 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	b2db      	uxtb	r3, r3
 8004412:	429a      	cmp	r2, r3
 8004414:	d106      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fa60 	bl	80038e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2103      	movs	r1, #3
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f9c4 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x4c8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2103      	movs	r1, #3
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f9b9 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004446:	4603      	mov	r3, r0
 8004448:	0e9b      	lsrs	r3, r3, #26
 800444a:	f003 021f 	and.w	r2, r3, #31
 800444e:	e017      	b.n	8004480 <HAL_ADC_ConfigChannel+0x4f8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2103      	movs	r1, #3
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff f9ae 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 800445c:	4603      	mov	r3, r0
 800445e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800446c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004472:	2320      	movs	r3, #32
 8004474:	e003      	b.n	800447e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x510>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	e011      	b.n	80044bc <HAL_ADC_ConfigChannel+0x534>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80044a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044a8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80044aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80044b0:	2320      	movs	r3, #32
 80044b2:	e003      	b.n	80044bc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80044b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	429a      	cmp	r2, r3
 80044be:	d14f      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2103      	movs	r1, #3
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fa0b 	bl	80038e4 <LL_ADC_SetOffsetState>
 80044ce:	e047      	b.n	8004560 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	069b      	lsls	r3, r3, #26
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	069b      	lsls	r3, r3, #26
 8004504:	429a      	cmp	r2, r3
 8004506:	d107      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004516:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	069b      	lsls	r3, r3, #26
 8004528:	429a      	cmp	r2, r3
 800452a:	d107      	bne.n	800453c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800453a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	069b      	lsls	r3, r3, #26
 800454c:	429a      	cmp	r2, r3
 800454e:	d107      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800455e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff facd 	bl	8003b04 <LL_ADC_IsEnabled>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 8219 	bne.w	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	461a      	mov	r2, r3
 8004580:	f7ff fa32 	bl	80039e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4aa1      	ldr	r2, [pc, #644]	; (8004810 <HAL_ADC_ConfigChannel+0x888>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f040 812e 	bne.w	80047ec <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x630>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	3301      	adds	r3, #1
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e019      	b.n	80045ec <HAL_ADC_ConfigChannel+0x664>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80045c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80045ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80045d0:	2320      	movs	r3, #32
 80045d2:	e003      	b.n	80045dc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80045d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	3301      	adds	r3, #1
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2b09      	cmp	r3, #9
 80045e4:	bf94      	ite	ls
 80045e6:	2301      	movls	r3, #1
 80045e8:	2300      	movhi	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d079      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <HAL_ADC_ConfigChannel+0x684>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	069b      	lsls	r3, r3, #26
 8004606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800460a:	e015      	b.n	8004638 <HAL_ADC_ConfigChannel+0x6b0>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800461a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800461e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004624:	2320      	movs	r3, #32
 8004626:	e003      	b.n	8004630 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	069b      	lsls	r3, r3, #26
 8004634:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x6d0>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	3301      	adds	r3, #1
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	e017      	b.n	8004688 <HAL_ADC_ConfigChannel+0x700>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004668:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800466a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e003      	b.n	800467c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3301      	adds	r3, #1
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	ea42 0103 	orr.w	r1, r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x726>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0e9b      	lsrs	r3, r3, #26
 800469e:	3301      	adds	r3, #1
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	051b      	lsls	r3, r3, #20
 80046ac:	e018      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x758>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80046c6:	2320      	movs	r3, #32
 80046c8:	e003      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e0:	430b      	orrs	r3, r1
 80046e2:	e07e      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x778>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	0e9b      	lsrs	r3, r3, #26
 80046f6:	3301      	adds	r3, #1
 80046f8:	069b      	lsls	r3, r3, #26
 80046fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046fe:	e015      	b.n	800472c <HAL_ADC_ConfigChannel+0x7a4>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004718:	2320      	movs	r3, #32
 800471a:	e003      	b.n	8004724 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3301      	adds	r3, #1
 8004726:	069b      	lsls	r3, r3, #26
 8004728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_ADC_ConfigChannel+0x7c4>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	3301      	adds	r3, #1
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	e017      	b.n	800477c <HAL_ADC_ConfigChannel+0x7f4>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	61bb      	str	r3, [r7, #24]
  return result;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	ea42 0103 	orr.w	r1, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x820>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	3301      	adds	r3, #1
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4613      	mov	r3, r2
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	4413      	add	r3, r2
 800479e:	3b1e      	subs	r3, #30
 80047a0:	051b      	lsls	r3, r3, #20
 80047a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047a6:	e01b      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x858>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	60fb      	str	r3, [r7, #12]
  return result;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e003      	b.n	80047cc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	f003 021f 	and.w	r2, r3, #31
 80047d2:	4613      	mov	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4413      	add	r3, r2
 80047d8:	3b1e      	subs	r3, #30
 80047da:	051b      	lsls	r3, r3, #20
 80047dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e0:	430b      	orrs	r3, r1
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	6892      	ldr	r2, [r2, #8]
 80047e6:	4619      	mov	r1, r3
 80047e8:	f7ff f8d2 	bl	8003990 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f280 80d7 	bge.w	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a06      	ldr	r2, [pc, #24]	; (8004814 <HAL_ADC_ConfigChannel+0x88c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_ADC_ConfigChannel+0x882>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_ADC_ConfigChannel+0x890>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10a      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x898>
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <HAL_ADC_ConfigChannel+0x894>)
 800480c:	e009      	b.n	8004822 <HAL_ADC_ConfigChannel+0x89a>
 800480e:	bf00      	nop
 8004810:	47ff0000 	.word	0x47ff0000
 8004814:	40022000 	.word	0x40022000
 8004818:	40022100 	.word	0x40022100
 800481c:	40022300 	.word	0x40022300
 8004820:	4b65      	ldr	r3, [pc, #404]	; (80049b8 <HAL_ADC_ConfigChannel+0xa30>)
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe ff88 	bl	8003738 <LL_ADC_GetCommonPathInternalCh>
 8004828:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a62      	ldr	r2, [pc, #392]	; (80049bc <HAL_ADC_ConfigChannel+0xa34>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x8b8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a61      	ldr	r2, [pc, #388]	; (80049c0 <HAL_ADC_ConfigChannel+0xa38>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10e      	bne.n	800485e <HAL_ADC_ConfigChannel+0x8d6>
 8004840:	485e      	ldr	r0, [pc, #376]	; (80049bc <HAL_ADC_ConfigChannel+0xa34>)
 8004842:	f7ff f95f 	bl	8003b04 <LL_ADC_IsEnabled>
 8004846:	4604      	mov	r4, r0
 8004848:	485d      	ldr	r0, [pc, #372]	; (80049c0 <HAL_ADC_ConfigChannel+0xa38>)
 800484a:	f7ff f95b 	bl	8003b04 <LL_ADC_IsEnabled>
 800484e:	4603      	mov	r3, r0
 8004850:	4323      	orrs	r3, r4
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	e008      	b.n	8004870 <HAL_ADC_ConfigChannel+0x8e8>
 800485e:	4859      	ldr	r0, [pc, #356]	; (80049c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004860:	f7ff f950 	bl	8003b04 <LL_ADC_IsEnabled>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8084 	beq.w	800497e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a53      	ldr	r2, [pc, #332]	; (80049c8 <HAL_ADC_ConfigChannel+0xa40>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d132      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x95e>
 8004880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d12c      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a4c      	ldr	r2, [pc, #304]	; (80049c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	f040 8086 	bne.w	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a47      	ldr	r2, [pc, #284]	; (80049bc <HAL_ADC_ConfigChannel+0xa34>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x924>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a46      	ldr	r2, [pc, #280]	; (80049c0 <HAL_ADC_ConfigChannel+0xa38>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d101      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x928>
 80048ac:	4a47      	ldr	r2, [pc, #284]	; (80049cc <HAL_ADC_ConfigChannel+0xa44>)
 80048ae:	e000      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x92a>
 80048b0:	4a41      	ldr	r2, [pc, #260]	; (80049b8 <HAL_ADC_ConfigChannel+0xa30>)
 80048b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f7fe ff28 	bl	8003712 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048c2:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <HAL_ADC_ConfigChannel+0xa48>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a42      	ldr	r2, [pc, #264]	; (80049d4 <HAL_ADC_ConfigChannel+0xa4c>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	3301      	adds	r3, #1
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80048d6:	e002      	b.n	80048de <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f9      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048e4:	e05e      	b.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <HAL_ADC_ConfigChannel+0xa50>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d120      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x9aa>
 80048f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11a      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d14e      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <HAL_ADC_ConfigChannel+0xa34>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_ADC_ConfigChannel+0x992>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <HAL_ADC_ConfigChannel+0xa38>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d101      	bne.n	800491e <HAL_ADC_ConfigChannel+0x996>
 800491a:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <HAL_ADC_ConfigChannel+0xa44>)
 800491c:	e000      	b.n	8004920 <HAL_ADC_ConfigChannel+0x998>
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <HAL_ADC_ConfigChannel+0xa30>)
 8004920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7fe fef1 	bl	8003712 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004930:	e038      	b.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_ADC_ConfigChannel+0xa54>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d133      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
 800493c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d12d      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_ADC_ConfigChannel+0xa3c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d128      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a19      	ldr	r2, [pc, #100]	; (80049bc <HAL_ADC_ConfigChannel+0xa34>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_ADC_ConfigChannel+0x9de>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <HAL_ADC_ConfigChannel+0xa38>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <HAL_ADC_ConfigChannel+0x9e2>
 8004966:	4a19      	ldr	r2, [pc, #100]	; (80049cc <HAL_ADC_ConfigChannel+0xa44>)
 8004968:	e000      	b.n	800496c <HAL_ADC_ConfigChannel+0x9e4>
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <HAL_ADC_ConfigChannel+0xa30>)
 800496c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f7fe fecb 	bl	8003712 <LL_ADC_SetCommonPathInternalCh>
 800497c:	e012      	b.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004990:	e008      	b.n	80049a4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	f043 0220 	orr.w	r2, r3, #32
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049ac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	37e4      	adds	r7, #228	; 0xe4
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd90      	pop	{r4, r7, pc}
 80049b8:	58026300 	.word	0x58026300
 80049bc:	40022000 	.word	0x40022000
 80049c0:	40022100 	.word	0x40022100
 80049c4:	58026000 	.word	0x58026000
 80049c8:	c7520000 	.word	0xc7520000
 80049cc:	40022300 	.word	0x40022300
 80049d0:	24000000 	.word	0x24000000
 80049d4:	053e2d63 	.word	0x053e2d63
 80049d8:	c3210000 	.word	0xc3210000
 80049dc:	cb840000 	.word	0xcb840000

080049e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a6c      	ldr	r2, [pc, #432]	; (8004ba0 <ADC_ConfigureBoostMode+0x1c0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <ADC_ConfigureBoostMode+0x1c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6b      	ldr	r2, [pc, #428]	; (8004ba4 <ADC_ConfigureBoostMode+0x1c4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d109      	bne.n	8004a10 <ADC_ConfigureBoostMode+0x30>
 80049fc:	4b6a      	ldr	r3, [pc, #424]	; (8004ba8 <ADC_ConfigureBoostMode+0x1c8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e008      	b.n	8004a22 <ADC_ConfigureBoostMode+0x42>
 8004a10:	4b66      	ldr	r3, [pc, #408]	; (8004bac <ADC_ConfigureBoostMode+0x1cc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01c      	beq.n	8004a60 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a26:	f005 fc93 	bl	800a350 <HAL_RCC_GetHCLKFreq>
 8004a2a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a34:	d010      	beq.n	8004a58 <ADC_ConfigureBoostMode+0x78>
 8004a36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a3a:	d873      	bhi.n	8004b24 <ADC_ConfigureBoostMode+0x144>
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d002      	beq.n	8004a48 <ADC_ConfigureBoostMode+0x68>
 8004a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a46:	d16d      	bne.n	8004b24 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	60fb      	str	r3, [r7, #12]
        break;
 8004a56:	e068      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	60fb      	str	r3, [r7, #12]
        break;
 8004a5e:	e064      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f006 fe6e 	bl	800b748 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a6c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a76:	d051      	beq.n	8004b1c <ADC_ConfigureBoostMode+0x13c>
 8004a78:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a7c:	d854      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004a7e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a82:	d047      	beq.n	8004b14 <ADC_ConfigureBoostMode+0x134>
 8004a84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a88:	d84e      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004a8a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a8e:	d03d      	beq.n	8004b0c <ADC_ConfigureBoostMode+0x12c>
 8004a90:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a94:	d848      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a9a:	d033      	beq.n	8004b04 <ADC_ConfigureBoostMode+0x124>
 8004a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa0:	d842      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004aa2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004aa6:	d029      	beq.n	8004afc <ADC_ConfigureBoostMode+0x11c>
 8004aa8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004aac:	d83c      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004aae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ab2:	d01a      	beq.n	8004aea <ADC_ConfigureBoostMode+0x10a>
 8004ab4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ab8:	d836      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004aba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004abe:	d014      	beq.n	8004aea <ADC_ConfigureBoostMode+0x10a>
 8004ac0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ac4:	d830      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d00e      	beq.n	8004aea <ADC_ConfigureBoostMode+0x10a>
 8004acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad0:	d82a      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004ad2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ad6:	d008      	beq.n	8004aea <ADC_ConfigureBoostMode+0x10a>
 8004ad8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004adc:	d824      	bhi.n	8004b28 <ADC_ConfigureBoostMode+0x148>
 8004ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ae2:	d002      	beq.n	8004aea <ADC_ConfigureBoostMode+0x10a>
 8004ae4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ae8:	d11e      	bne.n	8004b28 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	0c9b      	lsrs	r3, r3, #18
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	60fb      	str	r3, [r7, #12]
        break;
 8004afa:	e016      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]
        break;
 8004b02:	e012      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	60fb      	str	r3, [r7, #12]
        break;
 8004b0a:	e00e      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	60fb      	str	r3, [r7, #12]
        break;
 8004b12:	e00a      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	09db      	lsrs	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]
        break;
 8004b1a:	e006      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	60fb      	str	r3, [r7, #12]
        break;
 8004b22:	e002      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b28:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <ADC_ConfigureBoostMode+0x1d0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d808      	bhi.n	8004b4a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b46:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b48:	e025      	b.n	8004b96 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <ADC_ConfigureBoostMode+0x1d4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d80a      	bhi.n	8004b68 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b64:	609a      	str	r2, [r3, #8]
}
 8004b66:	e016      	b.n	8004b96 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <ADC_ConfigureBoostMode+0x1d8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d80a      	bhi.n	8004b86 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b82:	609a      	str	r2, [r3, #8]
}
 8004b84:	e007      	b.n	8004b96 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b94:	609a      	str	r2, [r3, #8]
}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40022100 	.word	0x40022100
 8004ba8:	40022300 	.word	0x40022300
 8004bac:	58026300 	.word	0x58026300
 8004bb0:	005f5e10 	.word	0x005f5e10
 8004bb4:	00bebc20 	.word	0x00bebc20
 8004bb8:	017d7840 	.word	0x017d7840

08004bbc <LL_ADC_IsEnabled>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <LL_ADC_IsEnabled+0x18>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <LL_ADC_IsEnabled+0x1a>
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d101      	bne.n	8004bfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b0a3      	sub	sp, #140	; 0x8c
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e0c1      	b.n	8004daa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a5e      	ldr	r2, [pc, #376]	; (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d102      	bne.n	8004c46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c40:	4b5d      	ldr	r3, [pc, #372]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e001      	b.n	8004c4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0a0      	b.n	8004daa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ffb9 	bl	8004be2 <LL_ADC_REG_IsConversionOngoing>
 8004c70:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ffb2 	bl	8004be2 <LL_ADC_REG_IsConversionOngoing>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8081 	bne.w	8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d17c      	bne.n	8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a48      	ldr	r2, [pc, #288]	; (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a46      	ldr	r2, [pc, #280]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004ca2:	4b46      	ldr	r3, [pc, #280]	; (8004dbc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ca4:	e000      	b.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004ca6:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ca8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d039      	beq.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cc2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3a      	ldr	r2, [pc, #232]	; (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a39      	ldr	r2, [pc, #228]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10e      	bne.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004cd8:	4836      	ldr	r0, [pc, #216]	; (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cda:	f7ff ff6f 	bl	8004bbc <LL_ADC_IsEnabled>
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4835      	ldr	r0, [pc, #212]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ce2:	f7ff ff6b 	bl	8004bbc <LL_ADC_IsEnabled>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4323      	orrs	r3, r4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	e008      	b.n	8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004cf6:	4833      	ldr	r0, [pc, #204]	; (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cf8:	f7ff ff60 	bl	8004bbc <LL_ADC_IsEnabled>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d047      	beq.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	6811      	ldr	r1, [r2, #0]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d22:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d24:	e03a      	b.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10e      	bne.n	8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004d46:	481b      	ldr	r0, [pc, #108]	; (8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d48:	f7ff ff38 	bl	8004bbc <LL_ADC_IsEnabled>
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	481a      	ldr	r0, [pc, #104]	; (8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d50:	f7ff ff34 	bl	8004bbc <LL_ADC_IsEnabled>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4323      	orrs	r3, r4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e008      	b.n	8004d76 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d64:	4817      	ldr	r0, [pc, #92]	; (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d66:	f7ff ff29 	bl	8004bbc <LL_ADC_IsEnabled>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d86:	e009      	b.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004d9a:	e000      	b.n	8004d9e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004da6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	378c      	adds	r7, #140	; 0x8c
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40022100 	.word	0x40022100
 8004dbc:	40022300 	.word	0x40022300
 8004dc0:	58026300 	.word	0x58026300
 8004dc4:	58026000 	.word	0x58026000
 8004dc8:	fffff0e0 	.word	0xfffff0e0

08004dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <__NVIC_SetPriorityGrouping+0x40>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004de8:	4013      	ands	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <__NVIC_SetPriorityGrouping+0x44>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dfa:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <__NVIC_SetPriorityGrouping+0x40>)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	60d3      	str	r3, [r2, #12]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	e000ed00 	.word	0xe000ed00
 8004e10:	05fa0000 	.word	0x05fa0000

08004e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <__NVIC_GetPriorityGrouping+0x18>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	f003 0307 	and.w	r3, r3, #7
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db0b      	blt.n	8004e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	f003 021f 	and.w	r2, r3, #31
 8004e48:	4907      	ldr	r1, [pc, #28]	; (8004e68 <__NVIC_EnableIRQ+0x38>)
 8004e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2001      	movs	r0, #1
 8004e52:	fa00 f202 	lsl.w	r2, r0, r2
 8004e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000e100 	.word	0xe000e100

08004e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	6039      	str	r1, [r7, #0]
 8004e76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	db0a      	blt.n	8004e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	490c      	ldr	r1, [pc, #48]	; (8004eb8 <__NVIC_SetPriority+0x4c>)
 8004e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e8a:	0112      	lsls	r2, r2, #4
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	440b      	add	r3, r1
 8004e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e94:	e00a      	b.n	8004eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4908      	ldr	r1, [pc, #32]	; (8004ebc <__NVIC_SetPriority+0x50>)
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	3b04      	subs	r3, #4
 8004ea4:	0112      	lsls	r2, r2, #4
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	761a      	strb	r2, [r3, #24]
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000e100 	.word	0xe000e100
 8004ebc:	e000ed00 	.word	0xe000ed00

08004ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b089      	sub	sp, #36	; 0x24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f1c3 0307 	rsb	r3, r3, #7
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	bf28      	it	cs
 8004ede:	2304      	movcs	r3, #4
 8004ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	2b06      	cmp	r3, #6
 8004ee8:	d902      	bls.n	8004ef0 <NVIC_EncodePriority+0x30>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3b03      	subs	r3, #3
 8004eee:	e000      	b.n	8004ef2 <NVIC_EncodePriority+0x32>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43da      	mvns	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	401a      	ands	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f08:	f04f 31ff 	mov.w	r1, #4294967295
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	43d9      	mvns	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f18:	4313      	orrs	r3, r2
         );
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3724      	adds	r7, #36	; 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f38:	d301      	bcc.n	8004f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e00f      	b.n	8004f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <SysTick_Config+0x40>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f46:	210f      	movs	r1, #15
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	f7ff ff8e 	bl	8004e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <SysTick_Config+0x40>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f56:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <SysTick_Config+0x40>)
 8004f58:	2207      	movs	r2, #7
 8004f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	e000e010 	.word	0xe000e010

08004f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ff29 	bl	8004dcc <__NVIC_SetPriorityGrouping>
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	4603      	mov	r3, r0
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f90:	f7ff ff40 	bl	8004e14 <__NVIC_GetPriorityGrouping>
 8004f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	6978      	ldr	r0, [r7, #20]
 8004f9c:	f7ff ff90 	bl	8004ec0 <NVIC_EncodePriority>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ff5f 	bl	8004e6c <__NVIC_SetPriority>
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ff33 	bl	8004e30 <__NVIC_EnableIRQ>
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ffa4 	bl	8004f28 <SysTick_Config>
 8004fe0:	4603      	mov	r3, r0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7fe fb34 	bl	8003660 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e312      	b.n	800562a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a66      	ldr	r2, [pc, #408]	; (80051a4 <HAL_DMA_Init+0x1b8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04a      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a65      	ldr	r2, [pc, #404]	; (80051a8 <HAL_DMA_Init+0x1bc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d045      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a63      	ldr	r2, [pc, #396]	; (80051ac <HAL_DMA_Init+0x1c0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d040      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a62      	ldr	r2, [pc, #392]	; (80051b0 <HAL_DMA_Init+0x1c4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d03b      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a60      	ldr	r2, [pc, #384]	; (80051b4 <HAL_DMA_Init+0x1c8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d036      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5f      	ldr	r2, [pc, #380]	; (80051b8 <HAL_DMA_Init+0x1cc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d031      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5d      	ldr	r2, [pc, #372]	; (80051bc <HAL_DMA_Init+0x1d0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02c      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a5c      	ldr	r2, [pc, #368]	; (80051c0 <HAL_DMA_Init+0x1d4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d027      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5a      	ldr	r2, [pc, #360]	; (80051c4 <HAL_DMA_Init+0x1d8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a59      	ldr	r2, [pc, #356]	; (80051c8 <HAL_DMA_Init+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d01d      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a57      	ldr	r2, [pc, #348]	; (80051cc <HAL_DMA_Init+0x1e0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a56      	ldr	r2, [pc, #344]	; (80051d0 <HAL_DMA_Init+0x1e4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a54      	ldr	r2, [pc, #336]	; (80051d4 <HAL_DMA_Init+0x1e8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a53      	ldr	r2, [pc, #332]	; (80051d8 <HAL_DMA_Init+0x1ec>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a51      	ldr	r2, [pc, #324]	; (80051dc <HAL_DMA_Init+0x1f0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_DMA_Init+0xb8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a50      	ldr	r2, [pc, #320]	; (80051e0 <HAL_DMA_Init+0x1f4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_DMA_Init+0xbc>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_DMA_Init+0xbe>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 813c 	beq.w	8005328 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a37      	ldr	r2, [pc, #220]	; (80051a4 <HAL_DMA_Init+0x1b8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d04a      	beq.n	8005160 <HAL_DMA_Init+0x174>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a36      	ldr	r2, [pc, #216]	; (80051a8 <HAL_DMA_Init+0x1bc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d045      	beq.n	8005160 <HAL_DMA_Init+0x174>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a34      	ldr	r2, [pc, #208]	; (80051ac <HAL_DMA_Init+0x1c0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d040      	beq.n	8005160 <HAL_DMA_Init+0x174>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <HAL_DMA_Init+0x1c4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d03b      	beq.n	8005160 <HAL_DMA_Init+0x174>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a31      	ldr	r2, [pc, #196]	; (80051b4 <HAL_DMA_Init+0x1c8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d036      	beq.n	8005160 <HAL_DMA_Init+0x174>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a30      	ldr	r2, [pc, #192]	; (80051b8 <HAL_DMA_Init+0x1cc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d031      	beq.n	8005160 <HAL_DMA_Init+0x174>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2e      	ldr	r2, [pc, #184]	; (80051bc <HAL_DMA_Init+0x1d0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02c      	beq.n	8005160 <HAL_DMA_Init+0x174>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2d      	ldr	r2, [pc, #180]	; (80051c0 <HAL_DMA_Init+0x1d4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d027      	beq.n	8005160 <HAL_DMA_Init+0x174>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2b      	ldr	r2, [pc, #172]	; (80051c4 <HAL_DMA_Init+0x1d8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_DMA_Init+0x174>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2a      	ldr	r2, [pc, #168]	; (80051c8 <HAL_DMA_Init+0x1dc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d01d      	beq.n	8005160 <HAL_DMA_Init+0x174>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a28      	ldr	r2, [pc, #160]	; (80051cc <HAL_DMA_Init+0x1e0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_DMA_Init+0x174>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <HAL_DMA_Init+0x1e4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_DMA_Init+0x174>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <HAL_DMA_Init+0x1e8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_DMA_Init+0x174>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a24      	ldr	r2, [pc, #144]	; (80051d8 <HAL_DMA_Init+0x1ec>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_DMA_Init+0x174>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a22      	ldr	r2, [pc, #136]	; (80051dc <HAL_DMA_Init+0x1f0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_DMA_Init+0x174>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <HAL_DMA_Init+0x1f4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d108      	bne.n	8005172 <HAL_DMA_Init+0x186>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e007      	b.n	8005182 <HAL_DMA_Init+0x196>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005182:	e02f      	b.n	80051e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005184:	f7fe fa6c 	bl	8003660 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b05      	cmp	r3, #5
 8005190:	d928      	bls.n	80051e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2203      	movs	r2, #3
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e242      	b.n	800562a <HAL_DMA_Init+0x63e>
 80051a4:	40020010 	.word	0x40020010
 80051a8:	40020028 	.word	0x40020028
 80051ac:	40020040 	.word	0x40020040
 80051b0:	40020058 	.word	0x40020058
 80051b4:	40020070 	.word	0x40020070
 80051b8:	40020088 	.word	0x40020088
 80051bc:	400200a0 	.word	0x400200a0
 80051c0:	400200b8 	.word	0x400200b8
 80051c4:	40020410 	.word	0x40020410
 80051c8:	40020428 	.word	0x40020428
 80051cc:	40020440 	.word	0x40020440
 80051d0:	40020458 	.word	0x40020458
 80051d4:	40020470 	.word	0x40020470
 80051d8:	40020488 	.word	0x40020488
 80051dc:	400204a0 	.word	0x400204a0
 80051e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1c8      	bne.n	8005184 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4b83      	ldr	r3, [pc, #524]	; (800540c <HAL_DMA_Init+0x420>)
 80051fe:	4013      	ands	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800520a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005216:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005222:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b04      	cmp	r3, #4
 8005236:	d107      	bne.n	8005248 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	4313      	orrs	r3, r2
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b28      	cmp	r3, #40	; 0x28
 800524e:	d903      	bls.n	8005258 <HAL_DMA_Init+0x26c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b2e      	cmp	r3, #46	; 0x2e
 8005256:	d91f      	bls.n	8005298 <HAL_DMA_Init+0x2ac>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b3e      	cmp	r3, #62	; 0x3e
 800525e:	d903      	bls.n	8005268 <HAL_DMA_Init+0x27c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b42      	cmp	r3, #66	; 0x42
 8005266:	d917      	bls.n	8005298 <HAL_DMA_Init+0x2ac>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b46      	cmp	r3, #70	; 0x46
 800526e:	d903      	bls.n	8005278 <HAL_DMA_Init+0x28c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b48      	cmp	r3, #72	; 0x48
 8005276:	d90f      	bls.n	8005298 <HAL_DMA_Init+0x2ac>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b4e      	cmp	r3, #78	; 0x4e
 800527e:	d903      	bls.n	8005288 <HAL_DMA_Init+0x29c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b52      	cmp	r3, #82	; 0x52
 8005286:	d907      	bls.n	8005298 <HAL_DMA_Init+0x2ac>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b73      	cmp	r3, #115	; 0x73
 800528e:	d905      	bls.n	800529c <HAL_DMA_Init+0x2b0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b77      	cmp	r3, #119	; 0x77
 8005296:	d801      	bhi.n	800529c <HAL_DMA_Init+0x2b0>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_DMA_Init+0x2b2>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d117      	bne.n	8005304 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 fdca 	bl	8006e80 <DMA_CheckFifoParam>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2240      	movs	r2, #64	; 0x40
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e192      	b.n	800562a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 fd05 	bl	8006d1c <DMA_CalcBaseAndBitshift>
 8005312:	4603      	mov	r3, r0
 8005314:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	223f      	movs	r2, #63	; 0x3f
 8005320:	409a      	lsls	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	609a      	str	r2, [r3, #8]
 8005326:	e0c8      	b.n	80054ba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a38      	ldr	r2, [pc, #224]	; (8005410 <HAL_DMA_Init+0x424>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d022      	beq.n	8005378 <HAL_DMA_Init+0x38c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a37      	ldr	r2, [pc, #220]	; (8005414 <HAL_DMA_Init+0x428>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d01d      	beq.n	8005378 <HAL_DMA_Init+0x38c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a35      	ldr	r2, [pc, #212]	; (8005418 <HAL_DMA_Init+0x42c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_DMA_Init+0x38c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a34      	ldr	r2, [pc, #208]	; (800541c <HAL_DMA_Init+0x430>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <HAL_DMA_Init+0x38c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a32      	ldr	r2, [pc, #200]	; (8005420 <HAL_DMA_Init+0x434>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_DMA_Init+0x38c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a31      	ldr	r2, [pc, #196]	; (8005424 <HAL_DMA_Init+0x438>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_DMA_Init+0x38c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2f      	ldr	r2, [pc, #188]	; (8005428 <HAL_DMA_Init+0x43c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_DMA_Init+0x38c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2e      	ldr	r2, [pc, #184]	; (800542c <HAL_DMA_Init+0x440>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d101      	bne.n	800537c <HAL_DMA_Init+0x390>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <HAL_DMA_Init+0x392>
 800537c:	2300      	movs	r3, #0
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8092 	beq.w	80054a8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a21      	ldr	r2, [pc, #132]	; (8005410 <HAL_DMA_Init+0x424>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d021      	beq.n	80053d2 <HAL_DMA_Init+0x3e6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a20      	ldr	r2, [pc, #128]	; (8005414 <HAL_DMA_Init+0x428>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d01c      	beq.n	80053d2 <HAL_DMA_Init+0x3e6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_DMA_Init+0x42c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d017      	beq.n	80053d2 <HAL_DMA_Init+0x3e6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1d      	ldr	r2, [pc, #116]	; (800541c <HAL_DMA_Init+0x430>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d012      	beq.n	80053d2 <HAL_DMA_Init+0x3e6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_DMA_Init+0x434>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00d      	beq.n	80053d2 <HAL_DMA_Init+0x3e6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <HAL_DMA_Init+0x438>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d008      	beq.n	80053d2 <HAL_DMA_Init+0x3e6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_DMA_Init+0x43c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <HAL_DMA_Init+0x3e6>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_DMA_Init+0x440>)
 80053d0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_DMA_Init+0x444>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d01c      	beq.n	8005434 <HAL_DMA_Init+0x448>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d102      	bne.n	8005408 <HAL_DMA_Init+0x41c>
 8005402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005406:	e016      	b.n	8005436 <HAL_DMA_Init+0x44a>
 8005408:	2300      	movs	r3, #0
 800540a:	e014      	b.n	8005436 <HAL_DMA_Init+0x44a>
 800540c:	fe10803f 	.word	0xfe10803f
 8005410:	58025408 	.word	0x58025408
 8005414:	5802541c 	.word	0x5802541c
 8005418:	58025430 	.word	0x58025430
 800541c:	58025444 	.word	0x58025444
 8005420:	58025458 	.word	0x58025458
 8005424:	5802546c 	.word	0x5802546c
 8005428:	58025480 	.word	0x58025480
 800542c:	58025494 	.word	0x58025494
 8005430:	fffe000f 	.word	0xfffe000f
 8005434:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68d2      	ldr	r2, [r2, #12]
 800543a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800543c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800544c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800545c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005464:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	4b6e      	ldr	r3, [pc, #440]	; (8005634 <HAL_DMA_Init+0x648>)
 800547c:	4413      	add	r3, r2
 800547e:	4a6e      	ldr	r2, [pc, #440]	; (8005638 <HAL_DMA_Init+0x64c>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	009a      	lsls	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 fc45 	bl	8006d1c <DMA_CalcBaseAndBitshift>
 8005492:	4603      	mov	r3, r0
 8005494:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	2201      	movs	r2, #1
 80054a0:	409a      	lsls	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e008      	b.n	80054ba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2240      	movs	r2, #64	; 0x40
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0b7      	b.n	800562a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5f      	ldr	r2, [pc, #380]	; (800563c <HAL_DMA_Init+0x650>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d072      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5d      	ldr	r2, [pc, #372]	; (8005640 <HAL_DMA_Init+0x654>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d06d      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5c      	ldr	r2, [pc, #368]	; (8005644 <HAL_DMA_Init+0x658>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d068      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a5a      	ldr	r2, [pc, #360]	; (8005648 <HAL_DMA_Init+0x65c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d063      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a59      	ldr	r2, [pc, #356]	; (800564c <HAL_DMA_Init+0x660>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d05e      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a57      	ldr	r2, [pc, #348]	; (8005650 <HAL_DMA_Init+0x664>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d059      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a56      	ldr	r2, [pc, #344]	; (8005654 <HAL_DMA_Init+0x668>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d054      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a54      	ldr	r2, [pc, #336]	; (8005658 <HAL_DMA_Init+0x66c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04f      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a53      	ldr	r2, [pc, #332]	; (800565c <HAL_DMA_Init+0x670>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d04a      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a51      	ldr	r2, [pc, #324]	; (8005660 <HAL_DMA_Init+0x674>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d045      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a50      	ldr	r2, [pc, #320]	; (8005664 <HAL_DMA_Init+0x678>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d040      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4e      	ldr	r2, [pc, #312]	; (8005668 <HAL_DMA_Init+0x67c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d03b      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4d      	ldr	r2, [pc, #308]	; (800566c <HAL_DMA_Init+0x680>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d036      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4b      	ldr	r2, [pc, #300]	; (8005670 <HAL_DMA_Init+0x684>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d031      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4a      	ldr	r2, [pc, #296]	; (8005674 <HAL_DMA_Init+0x688>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d02c      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a48      	ldr	r2, [pc, #288]	; (8005678 <HAL_DMA_Init+0x68c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d027      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a47      	ldr	r2, [pc, #284]	; (800567c <HAL_DMA_Init+0x690>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a45      	ldr	r2, [pc, #276]	; (8005680 <HAL_DMA_Init+0x694>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01d      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a44      	ldr	r2, [pc, #272]	; (8005684 <HAL_DMA_Init+0x698>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a42      	ldr	r2, [pc, #264]	; (8005688 <HAL_DMA_Init+0x69c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a41      	ldr	r2, [pc, #260]	; (800568c <HAL_DMA_Init+0x6a0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3f      	ldr	r2, [pc, #252]	; (8005690 <HAL_DMA_Init+0x6a4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3e      	ldr	r2, [pc, #248]	; (8005694 <HAL_DMA_Init+0x6a8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_DMA_Init+0x5be>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <HAL_DMA_Init+0x6ac>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <HAL_DMA_Init+0x5c2>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <HAL_DMA_Init+0x5c4>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d032      	beq.n	800561a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fcdf 	bl	8006f78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d102      	bne.n	80055c8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_DMA_Init+0x61c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d80c      	bhi.n	8005608 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 fd5c 	bl	80070ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	e008      	b.n	800561a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	a7fdabf8 	.word	0xa7fdabf8
 8005638:	cccccccd 	.word	0xcccccccd
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
 800567c:	58025408 	.word	0x58025408
 8005680:	5802541c 	.word	0x5802541c
 8005684:	58025430 	.word	0x58025430
 8005688:	58025444 	.word	0x58025444
 800568c:	58025458 	.word	0x58025458
 8005690:	5802546c 	.word	0x5802546c
 8005694:	58025480 	.word	0x58025480
 8005698:	58025494 	.word	0x58025494

0800569c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e226      	b.n	8005b06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_DMA_Start_IT+0x2a>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e21f      	b.n	8005b06 <HAL_DMA_Start_IT+0x46a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	f040 820a 	bne.w	8005af0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a68      	ldr	r2, [pc, #416]	; (8005890 <HAL_DMA_Start_IT+0x1f4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a66      	ldr	r2, [pc, #408]	; (8005894 <HAL_DMA_Start_IT+0x1f8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a65      	ldr	r2, [pc, #404]	; (8005898 <HAL_DMA_Start_IT+0x1fc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a63      	ldr	r2, [pc, #396]	; (800589c <HAL_DMA_Start_IT+0x200>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a62      	ldr	r2, [pc, #392]	; (80058a0 <HAL_DMA_Start_IT+0x204>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a60      	ldr	r2, [pc, #384]	; (80058a4 <HAL_DMA_Start_IT+0x208>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5f      	ldr	r2, [pc, #380]	; (80058a8 <HAL_DMA_Start_IT+0x20c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5d      	ldr	r2, [pc, #372]	; (80058ac <HAL_DMA_Start_IT+0x210>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a5c      	ldr	r2, [pc, #368]	; (80058b0 <HAL_DMA_Start_IT+0x214>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a5a      	ldr	r2, [pc, #360]	; (80058b4 <HAL_DMA_Start_IT+0x218>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a59      	ldr	r2, [pc, #356]	; (80058b8 <HAL_DMA_Start_IT+0x21c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a57      	ldr	r2, [pc, #348]	; (80058bc <HAL_DMA_Start_IT+0x220>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a56      	ldr	r2, [pc, #344]	; (80058c0 <HAL_DMA_Start_IT+0x224>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a54      	ldr	r2, [pc, #336]	; (80058c4 <HAL_DMA_Start_IT+0x228>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a53      	ldr	r2, [pc, #332]	; (80058c8 <HAL_DMA_Start_IT+0x22c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_Start_IT+0xee>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a51      	ldr	r2, [pc, #324]	; (80058cc <HAL_DMA_Start_IT+0x230>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <HAL_DMA_Start_IT+0x100>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e007      	b.n	80057ac <HAL_DMA_Start_IT+0x110>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f001 f906 	bl	80069c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a34      	ldr	r2, [pc, #208]	; (8005890 <HAL_DMA_Start_IT+0x1f4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d04a      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a33      	ldr	r2, [pc, #204]	; (8005894 <HAL_DMA_Start_IT+0x1f8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d045      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a31      	ldr	r2, [pc, #196]	; (8005898 <HAL_DMA_Start_IT+0x1fc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d040      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a30      	ldr	r2, [pc, #192]	; (800589c <HAL_DMA_Start_IT+0x200>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d03b      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2e      	ldr	r2, [pc, #184]	; (80058a0 <HAL_DMA_Start_IT+0x204>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d036      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <HAL_DMA_Start_IT+0x208>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d031      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	; (80058a8 <HAL_DMA_Start_IT+0x20c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02c      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <HAL_DMA_Start_IT+0x210>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d027      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <HAL_DMA_Start_IT+0x214>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d022      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <HAL_DMA_Start_IT+0x218>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d01d      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a25      	ldr	r2, [pc, #148]	; (80058b8 <HAL_DMA_Start_IT+0x21c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d018      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a24      	ldr	r2, [pc, #144]	; (80058bc <HAL_DMA_Start_IT+0x220>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a22      	ldr	r2, [pc, #136]	; (80058c0 <HAL_DMA_Start_IT+0x224>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00e      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_DMA_Start_IT+0x228>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_DMA_Start_IT+0x22c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_DMA_Start_IT+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_DMA_Start_IT+0x230>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d101      	bne.n	800585c <HAL_DMA_Start_IT+0x1c0>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <HAL_DMA_Start_IT+0x1c2>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d036      	beq.n	80058d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f023 021e 	bic.w	r2, r3, #30
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0216 	orr.w	r2, r2, #22
 8005874:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d03e      	beq.n	80058fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0208 	orr.w	r2, r2, #8
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e035      	b.n	80058fc <HAL_DMA_Start_IT+0x260>
 8005890:	40020010 	.word	0x40020010
 8005894:	40020028 	.word	0x40020028
 8005898:	40020040 	.word	0x40020040
 800589c:	40020058 	.word	0x40020058
 80058a0:	40020070 	.word	0x40020070
 80058a4:	40020088 	.word	0x40020088
 80058a8:	400200a0 	.word	0x400200a0
 80058ac:	400200b8 	.word	0x400200b8
 80058b0:	40020410 	.word	0x40020410
 80058b4:	40020428 	.word	0x40020428
 80058b8:	40020440 	.word	0x40020440
 80058bc:	40020458 	.word	0x40020458
 80058c0:	40020470 	.word	0x40020470
 80058c4:	40020488 	.word	0x40020488
 80058c8:	400204a0 	.word	0x400204a0
 80058cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 020e 	bic.w	r2, r3, #14
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 020a 	orr.w	r2, r2, #10
 80058e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0204 	orr.w	r2, r2, #4
 80058fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a83      	ldr	r2, [pc, #524]	; (8005b10 <HAL_DMA_Start_IT+0x474>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d072      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a82      	ldr	r2, [pc, #520]	; (8005b14 <HAL_DMA_Start_IT+0x478>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d06d      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a80      	ldr	r2, [pc, #512]	; (8005b18 <HAL_DMA_Start_IT+0x47c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d068      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7f      	ldr	r2, [pc, #508]	; (8005b1c <HAL_DMA_Start_IT+0x480>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d063      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a7d      	ldr	r2, [pc, #500]	; (8005b20 <HAL_DMA_Start_IT+0x484>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d05e      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7c      	ldr	r2, [pc, #496]	; (8005b24 <HAL_DMA_Start_IT+0x488>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d059      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a7a      	ldr	r2, [pc, #488]	; (8005b28 <HAL_DMA_Start_IT+0x48c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d054      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a79      	ldr	r2, [pc, #484]	; (8005b2c <HAL_DMA_Start_IT+0x490>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d04f      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a77      	ldr	r2, [pc, #476]	; (8005b30 <HAL_DMA_Start_IT+0x494>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d04a      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a76      	ldr	r2, [pc, #472]	; (8005b34 <HAL_DMA_Start_IT+0x498>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d045      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a74      	ldr	r2, [pc, #464]	; (8005b38 <HAL_DMA_Start_IT+0x49c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d040      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a73      	ldr	r2, [pc, #460]	; (8005b3c <HAL_DMA_Start_IT+0x4a0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d03b      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a71      	ldr	r2, [pc, #452]	; (8005b40 <HAL_DMA_Start_IT+0x4a4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d036      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a70      	ldr	r2, [pc, #448]	; (8005b44 <HAL_DMA_Start_IT+0x4a8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d031      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6e      	ldr	r2, [pc, #440]	; (8005b48 <HAL_DMA_Start_IT+0x4ac>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02c      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6d      	ldr	r2, [pc, #436]	; (8005b4c <HAL_DMA_Start_IT+0x4b0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d027      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a6b      	ldr	r2, [pc, #428]	; (8005b50 <HAL_DMA_Start_IT+0x4b4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6a      	ldr	r2, [pc, #424]	; (8005b54 <HAL_DMA_Start_IT+0x4b8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01d      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a68      	ldr	r2, [pc, #416]	; (8005b58 <HAL_DMA_Start_IT+0x4bc>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a67      	ldr	r2, [pc, #412]	; (8005b5c <HAL_DMA_Start_IT+0x4c0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a65      	ldr	r2, [pc, #404]	; (8005b60 <HAL_DMA_Start_IT+0x4c4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a64      	ldr	r2, [pc, #400]	; (8005b64 <HAL_DMA_Start_IT+0x4c8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a62      	ldr	r2, [pc, #392]	; (8005b68 <HAL_DMA_Start_IT+0x4cc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_DMA_Start_IT+0x350>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a61      	ldr	r2, [pc, #388]	; (8005b6c <HAL_DMA_Start_IT+0x4d0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d101      	bne.n	80059f0 <HAL_DMA_Start_IT+0x354>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <HAL_DMA_Start_IT+0x356>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01a      	beq.n	8005a2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a37      	ldr	r2, [pc, #220]	; (8005b10 <HAL_DMA_Start_IT+0x474>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d04a      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a36      	ldr	r2, [pc, #216]	; (8005b14 <HAL_DMA_Start_IT+0x478>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d045      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a34      	ldr	r2, [pc, #208]	; (8005b18 <HAL_DMA_Start_IT+0x47c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d040      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a33      	ldr	r2, [pc, #204]	; (8005b1c <HAL_DMA_Start_IT+0x480>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d03b      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a31      	ldr	r2, [pc, #196]	; (8005b20 <HAL_DMA_Start_IT+0x484>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d036      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a30      	ldr	r2, [pc, #192]	; (8005b24 <HAL_DMA_Start_IT+0x488>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d031      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2e      	ldr	r2, [pc, #184]	; (8005b28 <HAL_DMA_Start_IT+0x48c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d02c      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2d      	ldr	r2, [pc, #180]	; (8005b2c <HAL_DMA_Start_IT+0x490>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d027      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2b      	ldr	r2, [pc, #172]	; (8005b30 <HAL_DMA_Start_IT+0x494>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d022      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <HAL_DMA_Start_IT+0x498>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d01d      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <HAL_DMA_Start_IT+0x49c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <HAL_DMA_Start_IT+0x4a0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a25      	ldr	r2, [pc, #148]	; (8005b40 <HAL_DMA_Start_IT+0x4a4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <HAL_DMA_Start_IT+0x4a8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <HAL_DMA_Start_IT+0x4ac>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_Start_IT+0x430>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <HAL_DMA_Start_IT+0x4b0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d108      	bne.n	8005ade <HAL_DMA_Start_IT+0x442>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e012      	b.n	8005b04 <HAL_DMA_Start_IT+0x468>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e009      	b.n	8005b04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	58025408 	.word	0x58025408
 8005b54:	5802541c 	.word	0x5802541c
 8005b58:	58025430 	.word	0x58025430
 8005b5c:	58025444 	.word	0x58025444
 8005b60:	58025458 	.word	0x58025458
 8005b64:	5802546c 	.word	0x5802546c
 8005b68:	58025480 	.word	0x58025480
 8005b6c:	58025494 	.word	0x58025494

08005b70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b7c:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_DMA_IRQHandler+0x1ac>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a67      	ldr	r2, [pc, #412]	; (8005d20 <HAL_DMA_IRQHandler+0x1b0>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0a9b      	lsrs	r3, r3, #10
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a5f      	ldr	r2, [pc, #380]	; (8005d24 <HAL_DMA_IRQHandler+0x1b4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d04a      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a5d      	ldr	r2, [pc, #372]	; (8005d28 <HAL_DMA_IRQHandler+0x1b8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d045      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a5c      	ldr	r2, [pc, #368]	; (8005d2c <HAL_DMA_IRQHandler+0x1bc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d040      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a5a      	ldr	r2, [pc, #360]	; (8005d30 <HAL_DMA_IRQHandler+0x1c0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d03b      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a59      	ldr	r2, [pc, #356]	; (8005d34 <HAL_DMA_IRQHandler+0x1c4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d036      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a57      	ldr	r2, [pc, #348]	; (8005d38 <HAL_DMA_IRQHandler+0x1c8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d031      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a56      	ldr	r2, [pc, #344]	; (8005d3c <HAL_DMA_IRQHandler+0x1cc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d02c      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a54      	ldr	r2, [pc, #336]	; (8005d40 <HAL_DMA_IRQHandler+0x1d0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d027      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a53      	ldr	r2, [pc, #332]	; (8005d44 <HAL_DMA_IRQHandler+0x1d4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a51      	ldr	r2, [pc, #324]	; (8005d48 <HAL_DMA_IRQHandler+0x1d8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01d      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a50      	ldr	r2, [pc, #320]	; (8005d4c <HAL_DMA_IRQHandler+0x1dc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a4e      	ldr	r2, [pc, #312]	; (8005d50 <HAL_DMA_IRQHandler+0x1e0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a4d      	ldr	r2, [pc, #308]	; (8005d54 <HAL_DMA_IRQHandler+0x1e4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a4b      	ldr	r2, [pc, #300]	; (8005d58 <HAL_DMA_IRQHandler+0x1e8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a4a      	ldr	r2, [pc, #296]	; (8005d5c <HAL_DMA_IRQHandler+0x1ec>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xd2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a48      	ldr	r2, [pc, #288]	; (8005d60 <HAL_DMA_IRQHandler+0x1f0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <HAL_DMA_IRQHandler+0xd6>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_DMA_IRQHandler+0xd8>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 842b 	beq.w	80064a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	2208      	movs	r2, #8
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80a2 	beq.w	8005da8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2e      	ldr	r2, [pc, #184]	; (8005d24 <HAL_DMA_IRQHandler+0x1b4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d04a      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <HAL_DMA_IRQHandler+0x1b8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d045      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2b      	ldr	r2, [pc, #172]	; (8005d2c <HAL_DMA_IRQHandler+0x1bc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d040      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <HAL_DMA_IRQHandler+0x1c0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d03b      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a28      	ldr	r2, [pc, #160]	; (8005d34 <HAL_DMA_IRQHandler+0x1c4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d036      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <HAL_DMA_IRQHandler+0x1c8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d031      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <HAL_DMA_IRQHandler+0x1cc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02c      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <HAL_DMA_IRQHandler+0x1d0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d027      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a22      	ldr	r2, [pc, #136]	; (8005d44 <HAL_DMA_IRQHandler+0x1d4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d022      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <HAL_DMA_IRQHandler+0x1d8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d01d      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <HAL_DMA_IRQHandler+0x1dc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	; (8005d50 <HAL_DMA_IRQHandler+0x1e0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d013      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <HAL_DMA_IRQHandler+0x1e4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1b      	ldr	r2, [pc, #108]	; (8005d58 <HAL_DMA_IRQHandler+0x1e8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a19      	ldr	r2, [pc, #100]	; (8005d5c <HAL_DMA_IRQHandler+0x1ec>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x194>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <HAL_DMA_IRQHandler+0x1f0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d12f      	bne.n	8005d64 <HAL_DMA_IRQHandler+0x1f4>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf14      	ite	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	2300      	moveq	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	e02e      	b.n	8005d78 <HAL_DMA_IRQHandler+0x208>
 8005d1a:	bf00      	nop
 8005d1c:	24000000 	.word	0x24000000
 8005d20:	1b4e81b5 	.word	0x1b4e81b5
 8005d24:	40020010 	.word	0x40020010
 8005d28:	40020028 	.word	0x40020028
 8005d2c:	40020040 	.word	0x40020040
 8005d30:	40020058 	.word	0x40020058
 8005d34:	40020070 	.word	0x40020070
 8005d38:	40020088 	.word	0x40020088
 8005d3c:	400200a0 	.word	0x400200a0
 8005d40:	400200b8 	.word	0x400200b8
 8005d44:	40020410 	.word	0x40020410
 8005d48:	40020428 	.word	0x40020428
 8005d4c:	40020440 	.word	0x40020440
 8005d50:	40020458 	.word	0x40020458
 8005d54:	40020470 	.word	0x40020470
 8005d58:	40020488 	.word	0x40020488
 8005d5c:	400204a0 	.word	0x400204a0
 8005d60:	400204b8 	.word	0x400204b8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf14      	ite	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	2300      	moveq	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d015      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0204 	bic.w	r2, r2, #4
 8005d8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2208      	movs	r2, #8
 8005d96:	409a      	lsls	r2, r3
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	f043 0201 	orr.w	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d06e      	beq.n	8005e9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a69      	ldr	r2, [pc, #420]	; (8005f68 <HAL_DMA_IRQHandler+0x3f8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d04a      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a67      	ldr	r2, [pc, #412]	; (8005f6c <HAL_DMA_IRQHandler+0x3fc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d045      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a66      	ldr	r2, [pc, #408]	; (8005f70 <HAL_DMA_IRQHandler+0x400>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d040      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a64      	ldr	r2, [pc, #400]	; (8005f74 <HAL_DMA_IRQHandler+0x404>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d03b      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a63      	ldr	r2, [pc, #396]	; (8005f78 <HAL_DMA_IRQHandler+0x408>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d036      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a61      	ldr	r2, [pc, #388]	; (8005f7c <HAL_DMA_IRQHandler+0x40c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d031      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a60      	ldr	r2, [pc, #384]	; (8005f80 <HAL_DMA_IRQHandler+0x410>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d02c      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5e      	ldr	r2, [pc, #376]	; (8005f84 <HAL_DMA_IRQHandler+0x414>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d027      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5d      	ldr	r2, [pc, #372]	; (8005f88 <HAL_DMA_IRQHandler+0x418>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d022      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5b      	ldr	r2, [pc, #364]	; (8005f8c <HAL_DMA_IRQHandler+0x41c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01d      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a5a      	ldr	r2, [pc, #360]	; (8005f90 <HAL_DMA_IRQHandler+0x420>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d018      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a58      	ldr	r2, [pc, #352]	; (8005f94 <HAL_DMA_IRQHandler+0x424>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a57      	ldr	r2, [pc, #348]	; (8005f98 <HAL_DMA_IRQHandler+0x428>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00e      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a55      	ldr	r2, [pc, #340]	; (8005f9c <HAL_DMA_IRQHandler+0x42c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d009      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a54      	ldr	r2, [pc, #336]	; (8005fa0 <HAL_DMA_IRQHandler+0x430>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d004      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x2ee>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a52      	ldr	r2, [pc, #328]	; (8005fa4 <HAL_DMA_IRQHandler+0x434>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10a      	bne.n	8005e74 <HAL_DMA_IRQHandler+0x304>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e003      	b.n	8005e7c <HAL_DMA_IRQHandler+0x30c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00d      	beq.n	8005e9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e84:	f003 031f 	and.w	r3, r3, #31
 8005e88:	2201      	movs	r2, #1
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e94:	f043 0202 	orr.w	r2, r3, #2
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 808f 	beq.w	8005fd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <HAL_DMA_IRQHandler+0x3f8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d04a      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <HAL_DMA_IRQHandler+0x3fc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d045      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a29      	ldr	r2, [pc, #164]	; (8005f70 <HAL_DMA_IRQHandler+0x400>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d040      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <HAL_DMA_IRQHandler+0x404>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d03b      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a26      	ldr	r2, [pc, #152]	; (8005f78 <HAL_DMA_IRQHandler+0x408>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d036      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <HAL_DMA_IRQHandler+0x40c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d031      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a23      	ldr	r2, [pc, #140]	; (8005f80 <HAL_DMA_IRQHandler+0x410>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d02c      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <HAL_DMA_IRQHandler+0x414>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d027      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a20      	ldr	r2, [pc, #128]	; (8005f88 <HAL_DMA_IRQHandler+0x418>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d022      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <HAL_DMA_IRQHandler+0x41c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01d      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <HAL_DMA_IRQHandler+0x420>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d018      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_DMA_IRQHandler+0x424>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <HAL_DMA_IRQHandler+0x428>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <HAL_DMA_IRQHandler+0x42c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <HAL_DMA_IRQHandler+0x430>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x3e2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <HAL_DMA_IRQHandler+0x434>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d12a      	bne.n	8005fa8 <HAL_DMA_IRQHandler+0x438>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e023      	b.n	8005fb0 <HAL_DMA_IRQHandler+0x440>
 8005f68:	40020010 	.word	0x40020010
 8005f6c:	40020028 	.word	0x40020028
 8005f70:	40020040 	.word	0x40020040
 8005f74:	40020058 	.word	0x40020058
 8005f78:	40020070 	.word	0x40020070
 8005f7c:	40020088 	.word	0x40020088
 8005f80:	400200a0 	.word	0x400200a0
 8005f84:	400200b8 	.word	0x400200b8
 8005f88:	40020410 	.word	0x40020410
 8005f8c:	40020428 	.word	0x40020428
 8005f90:	40020440 	.word	0x40020440
 8005f94:	40020458 	.word	0x40020458
 8005f98:	40020470 	.word	0x40020470
 8005f9c:	40020488 	.word	0x40020488
 8005fa0:	400204a0 	.word	0x400204a0
 8005fa4:	400204b8 	.word	0x400204b8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	f043 0204 	orr.w	r2, r3, #4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2210      	movs	r2, #16
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80a6 	beq.w	8006132 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a85      	ldr	r2, [pc, #532]	; (8006200 <HAL_DMA_IRQHandler+0x690>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d04a      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a83      	ldr	r2, [pc, #524]	; (8006204 <HAL_DMA_IRQHandler+0x694>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d045      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a82      	ldr	r2, [pc, #520]	; (8006208 <HAL_DMA_IRQHandler+0x698>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d040      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a80      	ldr	r2, [pc, #512]	; (800620c <HAL_DMA_IRQHandler+0x69c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d03b      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a7f      	ldr	r2, [pc, #508]	; (8006210 <HAL_DMA_IRQHandler+0x6a0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d036      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a7d      	ldr	r2, [pc, #500]	; (8006214 <HAL_DMA_IRQHandler+0x6a4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d031      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a7c      	ldr	r2, [pc, #496]	; (8006218 <HAL_DMA_IRQHandler+0x6a8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d02c      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a7a      	ldr	r2, [pc, #488]	; (800621c <HAL_DMA_IRQHandler+0x6ac>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d027      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a79      	ldr	r2, [pc, #484]	; (8006220 <HAL_DMA_IRQHandler+0x6b0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d022      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a77      	ldr	r2, [pc, #476]	; (8006224 <HAL_DMA_IRQHandler+0x6b4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01d      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a76      	ldr	r2, [pc, #472]	; (8006228 <HAL_DMA_IRQHandler+0x6b8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d018      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a74      	ldr	r2, [pc, #464]	; (800622c <HAL_DMA_IRQHandler+0x6bc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a73      	ldr	r2, [pc, #460]	; (8006230 <HAL_DMA_IRQHandler+0x6c0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a71      	ldr	r2, [pc, #452]	; (8006234 <HAL_DMA_IRQHandler+0x6c4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a70      	ldr	r2, [pc, #448]	; (8006238 <HAL_DMA_IRQHandler+0x6c8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_DMA_IRQHandler+0x516>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a6e      	ldr	r2, [pc, #440]	; (800623c <HAL_DMA_IRQHandler+0x6cc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10a      	bne.n	800609c <HAL_DMA_IRQHandler+0x52c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0308 	and.w	r3, r3, #8
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf14      	ite	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2300      	moveq	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	e009      	b.n	80060b0 <HAL_DMA_IRQHandler+0x540>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bf14      	ite	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	2300      	moveq	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d03e      	beq.n	8006132 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	2210      	movs	r2, #16
 80060be:	409a      	lsls	r2, r3
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d018      	beq.n	8006104 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d108      	bne.n	80060f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d024      	beq.n	8006132 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
 80060f0:	e01f      	b.n	8006132 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01b      	beq.n	8006132 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	e016      	b.n	8006132 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0208 	bic.w	r2, r2, #8
 8006120:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	2220      	movs	r2, #32
 800613c:	409a      	lsls	r2, r3
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8110 	beq.w	8006368 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2c      	ldr	r2, [pc, #176]	; (8006200 <HAL_DMA_IRQHandler+0x690>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d04a      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <HAL_DMA_IRQHandler+0x694>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d045      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a29      	ldr	r2, [pc, #164]	; (8006208 <HAL_DMA_IRQHandler+0x698>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d040      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a28      	ldr	r2, [pc, #160]	; (800620c <HAL_DMA_IRQHandler+0x69c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d03b      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a26      	ldr	r2, [pc, #152]	; (8006210 <HAL_DMA_IRQHandler+0x6a0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d036      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a25      	ldr	r2, [pc, #148]	; (8006214 <HAL_DMA_IRQHandler+0x6a4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d031      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a23      	ldr	r2, [pc, #140]	; (8006218 <HAL_DMA_IRQHandler+0x6a8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d02c      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a22      	ldr	r2, [pc, #136]	; (800621c <HAL_DMA_IRQHandler+0x6ac>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d027      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a20      	ldr	r2, [pc, #128]	; (8006220 <HAL_DMA_IRQHandler+0x6b0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d022      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <HAL_DMA_IRQHandler+0x6b4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d01d      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <HAL_DMA_IRQHandler+0x6b8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d018      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	; (800622c <HAL_DMA_IRQHandler+0x6bc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d013      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <HAL_DMA_IRQHandler+0x6c0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a19      	ldr	r2, [pc, #100]	; (8006234 <HAL_DMA_IRQHandler+0x6c4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a17      	ldr	r2, [pc, #92]	; (8006238 <HAL_DMA_IRQHandler+0x6c8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x678>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a16      	ldr	r2, [pc, #88]	; (800623c <HAL_DMA_IRQHandler+0x6cc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d12b      	bne.n	8006240 <HAL_DMA_IRQHandler+0x6d0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bf14      	ite	ne
 80061f6:	2301      	movne	r3, #1
 80061f8:	2300      	moveq	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	e02a      	b.n	8006254 <HAL_DMA_IRQHandler+0x6e4>
 80061fe:	bf00      	nop
 8006200:	40020010 	.word	0x40020010
 8006204:	40020028 	.word	0x40020028
 8006208:	40020040 	.word	0x40020040
 800620c:	40020058 	.word	0x40020058
 8006210:	40020070 	.word	0x40020070
 8006214:	40020088 	.word	0x40020088
 8006218:	400200a0 	.word	0x400200a0
 800621c:	400200b8 	.word	0x400200b8
 8006220:	40020410 	.word	0x40020410
 8006224:	40020428 	.word	0x40020428
 8006228:	40020440 	.word	0x40020440
 800622c:	40020458 	.word	0x40020458
 8006230:	40020470 	.word	0x40020470
 8006234:	40020488 	.word	0x40020488
 8006238:	400204a0 	.word	0x400204a0
 800623c:	400204b8 	.word	0x400204b8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8087 	beq.w	8006368 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2220      	movs	r2, #32
 8006264:	409a      	lsls	r2, r3
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b04      	cmp	r3, #4
 8006274:	d139      	bne.n	80062ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0216 	bic.w	r2, r2, #22
 8006284:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695a      	ldr	r2, [r3, #20]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006294:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <HAL_DMA_IRQHandler+0x736>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0208 	bic.w	r2, r2, #8
 80062b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	223f      	movs	r2, #63	; 0x3f
 80062c0:	409a      	lsls	r2, r3
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 834a 	beq.w	8006974 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
          }
          return;
 80062e8:	e344      	b.n	8006974 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d018      	beq.n	800632a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	2b00      	cmp	r3, #0
 800630c:	d02c      	beq.n	8006368 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
 8006316:	e027      	b.n	8006368 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d023      	beq.n	8006368 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
 8006328:	e01e      	b.n	8006368 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10f      	bne.n	8006358 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0210 	bic.w	r2, r2, #16
 8006346:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8306 	beq.w	800697e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8088 	beq.w	8006490 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2204      	movs	r2, #4
 8006384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a7a      	ldr	r2, [pc, #488]	; (8006578 <HAL_DMA_IRQHandler+0xa08>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04a      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a79      	ldr	r2, [pc, #484]	; (800657c <HAL_DMA_IRQHandler+0xa0c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d045      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a77      	ldr	r2, [pc, #476]	; (8006580 <HAL_DMA_IRQHandler+0xa10>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d040      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a76      	ldr	r2, [pc, #472]	; (8006584 <HAL_DMA_IRQHandler+0xa14>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d03b      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a74      	ldr	r2, [pc, #464]	; (8006588 <HAL_DMA_IRQHandler+0xa18>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d036      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a73      	ldr	r2, [pc, #460]	; (800658c <HAL_DMA_IRQHandler+0xa1c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d031      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a71      	ldr	r2, [pc, #452]	; (8006590 <HAL_DMA_IRQHandler+0xa20>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02c      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a70      	ldr	r2, [pc, #448]	; (8006594 <HAL_DMA_IRQHandler+0xa24>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d027      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6e      	ldr	r2, [pc, #440]	; (8006598 <HAL_DMA_IRQHandler+0xa28>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a6d      	ldr	r2, [pc, #436]	; (800659c <HAL_DMA_IRQHandler+0xa2c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01d      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6b      	ldr	r2, [pc, #428]	; (80065a0 <HAL_DMA_IRQHandler+0xa30>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6a      	ldr	r2, [pc, #424]	; (80065a4 <HAL_DMA_IRQHandler+0xa34>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a68      	ldr	r2, [pc, #416]	; (80065a8 <HAL_DMA_IRQHandler+0xa38>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a67      	ldr	r2, [pc, #412]	; (80065ac <HAL_DMA_IRQHandler+0xa3c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <HAL_DMA_IRQHandler+0xa40>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_DMA_IRQHandler+0x8b8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a64      	ldr	r2, [pc, #400]	; (80065b4 <HAL_DMA_IRQHandler+0xa44>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d108      	bne.n	800643a <HAL_DMA_IRQHandler+0x8ca>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e007      	b.n	800644a <HAL_DMA_IRQHandler+0x8da>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	429a      	cmp	r2, r3
 8006454:	d307      	bcc.n	8006466 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f2      	bne.n	800644a <HAL_DMA_IRQHandler+0x8da>
 8006464:	e000      	b.n	8006468 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006466:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2203      	movs	r2, #3
 800647a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800647e:	e003      	b.n	8006488 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8272 	beq.w	800697e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
 80064a2:	e26c      	b.n	800697e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a43      	ldr	r2, [pc, #268]	; (80065b8 <HAL_DMA_IRQHandler+0xa48>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d022      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x984>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a42      	ldr	r2, [pc, #264]	; (80065bc <HAL_DMA_IRQHandler+0xa4c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d01d      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x984>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a40      	ldr	r2, [pc, #256]	; (80065c0 <HAL_DMA_IRQHandler+0xa50>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d018      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x984>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a3f      	ldr	r2, [pc, #252]	; (80065c4 <HAL_DMA_IRQHandler+0xa54>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x984>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a3d      	ldr	r2, [pc, #244]	; (80065c8 <HAL_DMA_IRQHandler+0xa58>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00e      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x984>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3c      	ldr	r2, [pc, #240]	; (80065cc <HAL_DMA_IRQHandler+0xa5c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x984>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a3a      	ldr	r2, [pc, #232]	; (80065d0 <HAL_DMA_IRQHandler+0xa60>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x984>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a39      	ldr	r2, [pc, #228]	; (80065d4 <HAL_DMA_IRQHandler+0xa64>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d101      	bne.n	80064f8 <HAL_DMA_IRQHandler+0x988>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <HAL_DMA_IRQHandler+0x98a>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 823f 	beq.w	800697e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2204      	movs	r2, #4
 8006512:	409a      	lsls	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80cd 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xb48>
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80c7 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2204      	movs	r2, #4
 8006534:	409a      	lsls	r2, r3
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d049      	beq.n	80065d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8210 	beq.w	8006978 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006560:	e20a      	b.n	8006978 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8206 	beq.w	8006978 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006574:	e200      	b.n	8006978 <HAL_DMA_IRQHandler+0xe08>
 8006576:	bf00      	nop
 8006578:	40020010 	.word	0x40020010
 800657c:	40020028 	.word	0x40020028
 8006580:	40020040 	.word	0x40020040
 8006584:	40020058 	.word	0x40020058
 8006588:	40020070 	.word	0x40020070
 800658c:	40020088 	.word	0x40020088
 8006590:	400200a0 	.word	0x400200a0
 8006594:	400200b8 	.word	0x400200b8
 8006598:	40020410 	.word	0x40020410
 800659c:	40020428 	.word	0x40020428
 80065a0:	40020440 	.word	0x40020440
 80065a4:	40020458 	.word	0x40020458
 80065a8:	40020470 	.word	0x40020470
 80065ac:	40020488 	.word	0x40020488
 80065b0:	400204a0 	.word	0x400204a0
 80065b4:	400204b8 	.word	0x400204b8
 80065b8:	58025408 	.word	0x58025408
 80065bc:	5802541c 	.word	0x5802541c
 80065c0:	58025430 	.word	0x58025430
 80065c4:	58025444 	.word	0x58025444
 80065c8:	58025458 	.word	0x58025458
 80065cc:	5802546c 	.word	0x5802546c
 80065d0:	58025480 	.word	0x58025480
 80065d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d160      	bne.n	80066a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a7f      	ldr	r2, [pc, #508]	; (80067e4 <HAL_DMA_IRQHandler+0xc74>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d04a      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a7d      	ldr	r2, [pc, #500]	; (80067e8 <HAL_DMA_IRQHandler+0xc78>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d045      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a7c      	ldr	r2, [pc, #496]	; (80067ec <HAL_DMA_IRQHandler+0xc7c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d040      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a7a      	ldr	r2, [pc, #488]	; (80067f0 <HAL_DMA_IRQHandler+0xc80>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d03b      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a79      	ldr	r2, [pc, #484]	; (80067f4 <HAL_DMA_IRQHandler+0xc84>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d036      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a77      	ldr	r2, [pc, #476]	; (80067f8 <HAL_DMA_IRQHandler+0xc88>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d031      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a76      	ldr	r2, [pc, #472]	; (80067fc <HAL_DMA_IRQHandler+0xc8c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d02c      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a74      	ldr	r2, [pc, #464]	; (8006800 <HAL_DMA_IRQHandler+0xc90>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d027      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a73      	ldr	r2, [pc, #460]	; (8006804 <HAL_DMA_IRQHandler+0xc94>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d022      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a71      	ldr	r2, [pc, #452]	; (8006808 <HAL_DMA_IRQHandler+0xc98>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01d      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a70      	ldr	r2, [pc, #448]	; (800680c <HAL_DMA_IRQHandler+0xc9c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d018      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a6e      	ldr	r2, [pc, #440]	; (8006810 <HAL_DMA_IRQHandler+0xca0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a6d      	ldr	r2, [pc, #436]	; (8006814 <HAL_DMA_IRQHandler+0xca4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00e      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a6b      	ldr	r2, [pc, #428]	; (8006818 <HAL_DMA_IRQHandler+0xca8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d009      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a6a      	ldr	r2, [pc, #424]	; (800681c <HAL_DMA_IRQHandler+0xcac>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d004      	beq.n	8006682 <HAL_DMA_IRQHandler+0xb12>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a68      	ldr	r2, [pc, #416]	; (8006820 <HAL_DMA_IRQHandler+0xcb0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d108      	bne.n	8006694 <HAL_DMA_IRQHandler+0xb24>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0208 	bic.w	r2, r2, #8
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	e007      	b.n	80066a4 <HAL_DMA_IRQHandler+0xb34>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0204 	bic.w	r2, r2, #4
 80066a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8165 	beq.w	8006978 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b6:	e15f      	b.n	8006978 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2202      	movs	r2, #2
 80066c2:	409a      	lsls	r2, r3
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80c5 	beq.w	8006858 <HAL_DMA_IRQHandler+0xce8>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80bf 	beq.w	8006858 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2202      	movs	r2, #2
 80066e4:	409a      	lsls	r2, r3
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d018      	beq.n	8006726 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d109      	bne.n	8006712 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 813a 	beq.w	800697c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006710:	e134      	b.n	800697c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8130 	beq.w	800697c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006724:	e12a      	b.n	800697c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 8089 	bne.w	8006844 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2b      	ldr	r2, [pc, #172]	; (80067e4 <HAL_DMA_IRQHandler+0xc74>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d04a      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <HAL_DMA_IRQHandler+0xc78>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d045      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a28      	ldr	r2, [pc, #160]	; (80067ec <HAL_DMA_IRQHandler+0xc7c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d040      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <HAL_DMA_IRQHandler+0xc80>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d03b      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a25      	ldr	r2, [pc, #148]	; (80067f4 <HAL_DMA_IRQHandler+0xc84>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d036      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a23      	ldr	r2, [pc, #140]	; (80067f8 <HAL_DMA_IRQHandler+0xc88>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d031      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a22      	ldr	r2, [pc, #136]	; (80067fc <HAL_DMA_IRQHandler+0xc8c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d02c      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a20      	ldr	r2, [pc, #128]	; (8006800 <HAL_DMA_IRQHandler+0xc90>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <HAL_DMA_IRQHandler+0xc94>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <HAL_DMA_IRQHandler+0xc98>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01d      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1c      	ldr	r2, [pc, #112]	; (800680c <HAL_DMA_IRQHandler+0xc9c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1a      	ldr	r2, [pc, #104]	; (8006810 <HAL_DMA_IRQHandler+0xca0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a19      	ldr	r2, [pc, #100]	; (8006814 <HAL_DMA_IRQHandler+0xca4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a17      	ldr	r2, [pc, #92]	; (8006818 <HAL_DMA_IRQHandler+0xca8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a16      	ldr	r2, [pc, #88]	; (800681c <HAL_DMA_IRQHandler+0xcac>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xc62>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a14      	ldr	r2, [pc, #80]	; (8006820 <HAL_DMA_IRQHandler+0xcb0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d128      	bne.n	8006824 <HAL_DMA_IRQHandler+0xcb4>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0214 	bic.w	r2, r2, #20
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	e027      	b.n	8006834 <HAL_DMA_IRQHandler+0xcc4>
 80067e4:	40020010 	.word	0x40020010
 80067e8:	40020028 	.word	0x40020028
 80067ec:	40020040 	.word	0x40020040
 80067f0:	40020058 	.word	0x40020058
 80067f4:	40020070 	.word	0x40020070
 80067f8:	40020088 	.word	0x40020088
 80067fc:	400200a0 	.word	0x400200a0
 8006800:	400200b8 	.word	0x400200b8
 8006804:	40020410 	.word	0x40020410
 8006808:	40020428 	.word	0x40020428
 800680c:	40020440 	.word	0x40020440
 8006810:	40020458 	.word	0x40020458
 8006814:	40020470 	.word	0x40020470
 8006818:	40020488 	.word	0x40020488
 800681c:	400204a0 	.word	0x400204a0
 8006820:	400204b8 	.word	0x400204b8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 020a 	bic.w	r2, r2, #10
 8006832:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8097 	beq.w	800697c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006856:	e091      	b.n	800697c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2208      	movs	r2, #8
 8006862:	409a      	lsls	r2, r3
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8088 	beq.w	800697e <HAL_DMA_IRQHandler+0xe0e>
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8082 	beq.w	800697e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a41      	ldr	r2, [pc, #260]	; (8006984 <HAL_DMA_IRQHandler+0xe14>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d04a      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a3f      	ldr	r2, [pc, #252]	; (8006988 <HAL_DMA_IRQHandler+0xe18>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d045      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a3e      	ldr	r2, [pc, #248]	; (800698c <HAL_DMA_IRQHandler+0xe1c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d040      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <HAL_DMA_IRQHandler+0xe20>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d03b      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a3b      	ldr	r2, [pc, #236]	; (8006994 <HAL_DMA_IRQHandler+0xe24>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d036      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a39      	ldr	r2, [pc, #228]	; (8006998 <HAL_DMA_IRQHandler+0xe28>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d031      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a38      	ldr	r2, [pc, #224]	; (800699c <HAL_DMA_IRQHandler+0xe2c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d02c      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a36      	ldr	r2, [pc, #216]	; (80069a0 <HAL_DMA_IRQHandler+0xe30>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d027      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a35      	ldr	r2, [pc, #212]	; (80069a4 <HAL_DMA_IRQHandler+0xe34>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d022      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a33      	ldr	r2, [pc, #204]	; (80069a8 <HAL_DMA_IRQHandler+0xe38>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01d      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a32      	ldr	r2, [pc, #200]	; (80069ac <HAL_DMA_IRQHandler+0xe3c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d018      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a30      	ldr	r2, [pc, #192]	; (80069b0 <HAL_DMA_IRQHandler+0xe40>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d013      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2f      	ldr	r2, [pc, #188]	; (80069b4 <HAL_DMA_IRQHandler+0xe44>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00e      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2d      	ldr	r2, [pc, #180]	; (80069b8 <HAL_DMA_IRQHandler+0xe48>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2c      	ldr	r2, [pc, #176]	; (80069bc <HAL_DMA_IRQHandler+0xe4c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_DMA_IRQHandler+0xdaa>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a2a      	ldr	r2, [pc, #168]	; (80069c0 <HAL_DMA_IRQHandler+0xe50>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d108      	bne.n	800692c <HAL_DMA_IRQHandler+0xdbc>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 021c 	bic.w	r2, r2, #28
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e007      	b.n	800693c <HAL_DMA_IRQHandler+0xdcc>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 020e 	bic.w	r2, r2, #14
 800693a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	2201      	movs	r2, #1
 8006946:	409a      	lsls	r2, r3
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
 8006972:	e004      	b.n	800697e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006974:	bf00      	nop
 8006976:	e002      	b.n	800697e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006978:	bf00      	nop
 800697a:	e000      	b.n	800697e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800697c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40020010 	.word	0x40020010
 8006988:	40020028 	.word	0x40020028
 800698c:	40020040 	.word	0x40020040
 8006990:	40020058 	.word	0x40020058
 8006994:	40020070 	.word	0x40020070
 8006998:	40020088 	.word	0x40020088
 800699c:	400200a0 	.word	0x400200a0
 80069a0:	400200b8 	.word	0x400200b8
 80069a4:	40020410 	.word	0x40020410
 80069a8:	40020428 	.word	0x40020428
 80069ac:	40020440 	.word	0x40020440
 80069b0:	40020458 	.word	0x40020458
 80069b4:	40020470 	.word	0x40020470
 80069b8:	40020488 	.word	0x40020488
 80069bc:	400204a0 	.word	0x400204a0
 80069c0:	400204b8 	.word	0x400204b8

080069c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7f      	ldr	r2, [pc, #508]	; (8006be0 <DMA_SetConfig+0x21c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d072      	beq.n	8006ace <DMA_SetConfig+0x10a>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a7d      	ldr	r2, [pc, #500]	; (8006be4 <DMA_SetConfig+0x220>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d06d      	beq.n	8006ace <DMA_SetConfig+0x10a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a7c      	ldr	r2, [pc, #496]	; (8006be8 <DMA_SetConfig+0x224>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d068      	beq.n	8006ace <DMA_SetConfig+0x10a>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a7a      	ldr	r2, [pc, #488]	; (8006bec <DMA_SetConfig+0x228>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d063      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a79      	ldr	r2, [pc, #484]	; (8006bf0 <DMA_SetConfig+0x22c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d05e      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a77      	ldr	r2, [pc, #476]	; (8006bf4 <DMA_SetConfig+0x230>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d059      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a76      	ldr	r2, [pc, #472]	; (8006bf8 <DMA_SetConfig+0x234>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d054      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a74      	ldr	r2, [pc, #464]	; (8006bfc <DMA_SetConfig+0x238>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d04f      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a73      	ldr	r2, [pc, #460]	; (8006c00 <DMA_SetConfig+0x23c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d04a      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a71      	ldr	r2, [pc, #452]	; (8006c04 <DMA_SetConfig+0x240>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d045      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a70      	ldr	r2, [pc, #448]	; (8006c08 <DMA_SetConfig+0x244>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d040      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6e      	ldr	r2, [pc, #440]	; (8006c0c <DMA_SetConfig+0x248>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d03b      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6d      	ldr	r2, [pc, #436]	; (8006c10 <DMA_SetConfig+0x24c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d036      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a6b      	ldr	r2, [pc, #428]	; (8006c14 <DMA_SetConfig+0x250>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d031      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a6a      	ldr	r2, [pc, #424]	; (8006c18 <DMA_SetConfig+0x254>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d02c      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a68      	ldr	r2, [pc, #416]	; (8006c1c <DMA_SetConfig+0x258>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d027      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a67      	ldr	r2, [pc, #412]	; (8006c20 <DMA_SetConfig+0x25c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d022      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a65      	ldr	r2, [pc, #404]	; (8006c24 <DMA_SetConfig+0x260>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01d      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a64      	ldr	r2, [pc, #400]	; (8006c28 <DMA_SetConfig+0x264>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a62      	ldr	r2, [pc, #392]	; (8006c2c <DMA_SetConfig+0x268>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a61      	ldr	r2, [pc, #388]	; (8006c30 <DMA_SetConfig+0x26c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a5f      	ldr	r2, [pc, #380]	; (8006c34 <DMA_SetConfig+0x270>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a5e      	ldr	r2, [pc, #376]	; (8006c38 <DMA_SetConfig+0x274>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <DMA_SetConfig+0x10a>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a5c      	ldr	r2, [pc, #368]	; (8006c3c <DMA_SetConfig+0x278>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d101      	bne.n	8006ad2 <DMA_SetConfig+0x10e>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <DMA_SetConfig+0x110>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ae0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006af2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a39      	ldr	r2, [pc, #228]	; (8006be0 <DMA_SetConfig+0x21c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d04a      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a38      	ldr	r2, [pc, #224]	; (8006be4 <DMA_SetConfig+0x220>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d045      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a36      	ldr	r2, [pc, #216]	; (8006be8 <DMA_SetConfig+0x224>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d040      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a35      	ldr	r2, [pc, #212]	; (8006bec <DMA_SetConfig+0x228>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d03b      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a33      	ldr	r2, [pc, #204]	; (8006bf0 <DMA_SetConfig+0x22c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d036      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a32      	ldr	r2, [pc, #200]	; (8006bf4 <DMA_SetConfig+0x230>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d031      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a30      	ldr	r2, [pc, #192]	; (8006bf8 <DMA_SetConfig+0x234>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d02c      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2f      	ldr	r2, [pc, #188]	; (8006bfc <DMA_SetConfig+0x238>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d027      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2d      	ldr	r2, [pc, #180]	; (8006c00 <DMA_SetConfig+0x23c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d022      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a2c      	ldr	r2, [pc, #176]	; (8006c04 <DMA_SetConfig+0x240>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d01d      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a2a      	ldr	r2, [pc, #168]	; (8006c08 <DMA_SetConfig+0x244>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d018      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <DMA_SetConfig+0x248>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <DMA_SetConfig+0x24c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <DMA_SetConfig+0x250>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a24      	ldr	r2, [pc, #144]	; (8006c18 <DMA_SetConfig+0x254>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <DMA_SetConfig+0x1d0>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a23      	ldr	r2, [pc, #140]	; (8006c1c <DMA_SetConfig+0x258>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d101      	bne.n	8006b98 <DMA_SetConfig+0x1d4>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <DMA_SetConfig+0x1d6>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d059      	beq.n	8006c52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	f003 031f 	and.w	r3, r3, #31
 8006ba6:	223f      	movs	r2, #63	; 0x3f
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d138      	bne.n	8006c40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bde:	e086      	b.n	8006cee <DMA_SetConfig+0x32a>
 8006be0:	40020010 	.word	0x40020010
 8006be4:	40020028 	.word	0x40020028
 8006be8:	40020040 	.word	0x40020040
 8006bec:	40020058 	.word	0x40020058
 8006bf0:	40020070 	.word	0x40020070
 8006bf4:	40020088 	.word	0x40020088
 8006bf8:	400200a0 	.word	0x400200a0
 8006bfc:	400200b8 	.word	0x400200b8
 8006c00:	40020410 	.word	0x40020410
 8006c04:	40020428 	.word	0x40020428
 8006c08:	40020440 	.word	0x40020440
 8006c0c:	40020458 	.word	0x40020458
 8006c10:	40020470 	.word	0x40020470
 8006c14:	40020488 	.word	0x40020488
 8006c18:	400204a0 	.word	0x400204a0
 8006c1c:	400204b8 	.word	0x400204b8
 8006c20:	58025408 	.word	0x58025408
 8006c24:	5802541c 	.word	0x5802541c
 8006c28:	58025430 	.word	0x58025430
 8006c2c:	58025444 	.word	0x58025444
 8006c30:	58025458 	.word	0x58025458
 8006c34:	5802546c 	.word	0x5802546c
 8006c38:	58025480 	.word	0x58025480
 8006c3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	60da      	str	r2, [r3, #12]
}
 8006c50:	e04d      	b.n	8006cee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <DMA_SetConfig+0x338>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d022      	beq.n	8006ca2 <DMA_SetConfig+0x2de>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a27      	ldr	r2, [pc, #156]	; (8006d00 <DMA_SetConfig+0x33c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d01d      	beq.n	8006ca2 <DMA_SetConfig+0x2de>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a26      	ldr	r2, [pc, #152]	; (8006d04 <DMA_SetConfig+0x340>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d018      	beq.n	8006ca2 <DMA_SetConfig+0x2de>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a24      	ldr	r2, [pc, #144]	; (8006d08 <DMA_SetConfig+0x344>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <DMA_SetConfig+0x2de>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a23      	ldr	r2, [pc, #140]	; (8006d0c <DMA_SetConfig+0x348>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00e      	beq.n	8006ca2 <DMA_SetConfig+0x2de>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a21      	ldr	r2, [pc, #132]	; (8006d10 <DMA_SetConfig+0x34c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <DMA_SetConfig+0x2de>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <DMA_SetConfig+0x350>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <DMA_SetConfig+0x2de>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <DMA_SetConfig+0x354>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d101      	bne.n	8006ca6 <DMA_SetConfig+0x2e2>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <DMA_SetConfig+0x2e4>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d020      	beq.n	8006cee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	409a      	lsls	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b40      	cmp	r3, #64	; 0x40
 8006cca:	d108      	bne.n	8006cde <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	60da      	str	r2, [r3, #12]
}
 8006cdc:	e007      	b.n	8006cee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	60da      	str	r2, [r3, #12]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	58025408 	.word	0x58025408
 8006d00:	5802541c 	.word	0x5802541c
 8006d04:	58025430 	.word	0x58025430
 8006d08:	58025444 	.word	0x58025444
 8006d0c:	58025458 	.word	0x58025458
 8006d10:	5802546c 	.word	0x5802546c
 8006d14:	58025480 	.word	0x58025480
 8006d18:	58025494 	.word	0x58025494

08006d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a42      	ldr	r2, [pc, #264]	; (8006e34 <DMA_CalcBaseAndBitshift+0x118>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d04a      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a41      	ldr	r2, [pc, #260]	; (8006e38 <DMA_CalcBaseAndBitshift+0x11c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d045      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3f      	ldr	r2, [pc, #252]	; (8006e3c <DMA_CalcBaseAndBitshift+0x120>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d040      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3e      	ldr	r2, [pc, #248]	; (8006e40 <DMA_CalcBaseAndBitshift+0x124>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d03b      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a3c      	ldr	r2, [pc, #240]	; (8006e44 <DMA_CalcBaseAndBitshift+0x128>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d036      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a3b      	ldr	r2, [pc, #236]	; (8006e48 <DMA_CalcBaseAndBitshift+0x12c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d031      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a39      	ldr	r2, [pc, #228]	; (8006e4c <DMA_CalcBaseAndBitshift+0x130>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d02c      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a38      	ldr	r2, [pc, #224]	; (8006e50 <DMA_CalcBaseAndBitshift+0x134>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d027      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a36      	ldr	r2, [pc, #216]	; (8006e54 <DMA_CalcBaseAndBitshift+0x138>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a35      	ldr	r2, [pc, #212]	; (8006e58 <DMA_CalcBaseAndBitshift+0x13c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a33      	ldr	r2, [pc, #204]	; (8006e5c <DMA_CalcBaseAndBitshift+0x140>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a32      	ldr	r2, [pc, #200]	; (8006e60 <DMA_CalcBaseAndBitshift+0x144>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a30      	ldr	r2, [pc, #192]	; (8006e64 <DMA_CalcBaseAndBitshift+0x148>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <DMA_CalcBaseAndBitshift+0x14c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a2d      	ldr	r2, [pc, #180]	; (8006e6c <DMA_CalcBaseAndBitshift+0x150>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a2c      	ldr	r2, [pc, #176]	; (8006e70 <DMA_CalcBaseAndBitshift+0x154>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d101      	bne.n	8006dc8 <DMA_CalcBaseAndBitshift+0xac>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <DMA_CalcBaseAndBitshift+0xae>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d024      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	3b10      	subs	r3, #16
 8006dd6:	4a27      	ldr	r2, [pc, #156]	; (8006e74 <DMA_CalcBaseAndBitshift+0x158>)
 8006dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	4a24      	ldr	r2, [pc, #144]	; (8006e78 <DMA_CalcBaseAndBitshift+0x15c>)
 8006de8:	5cd3      	ldrb	r3, [r2, r3]
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d908      	bls.n	8006e08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4b1f      	ldr	r3, [pc, #124]	; (8006e7c <DMA_CalcBaseAndBitshift+0x160>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	1d1a      	adds	r2, r3, #4
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	659a      	str	r2, [r3, #88]	; 0x58
 8006e06:	e00d      	b.n	8006e24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4b1b      	ldr	r3, [pc, #108]	; (8006e7c <DMA_CalcBaseAndBitshift+0x160>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6593      	str	r3, [r2, #88]	; 0x58
 8006e16:	e005      	b.n	8006e24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	40020010 	.word	0x40020010
 8006e38:	40020028 	.word	0x40020028
 8006e3c:	40020040 	.word	0x40020040
 8006e40:	40020058 	.word	0x40020058
 8006e44:	40020070 	.word	0x40020070
 8006e48:	40020088 	.word	0x40020088
 8006e4c:	400200a0 	.word	0x400200a0
 8006e50:	400200b8 	.word	0x400200b8
 8006e54:	40020410 	.word	0x40020410
 8006e58:	40020428 	.word	0x40020428
 8006e5c:	40020440 	.word	0x40020440
 8006e60:	40020458 	.word	0x40020458
 8006e64:	40020470 	.word	0x40020470
 8006e68:	40020488 	.word	0x40020488
 8006e6c:	400204a0 	.word	0x400204a0
 8006e70:	400204b8 	.word	0x400204b8
 8006e74:	aaaaaaab 	.word	0xaaaaaaab
 8006e78:	0801dcb4 	.word	0x0801dcb4
 8006e7c:	fffffc00 	.word	0xfffffc00

08006e80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d120      	bne.n	8006ed6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d858      	bhi.n	8006f4e <DMA_CheckFifoParam+0xce>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <DMA_CheckFifoParam+0x24>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ec7 	.word	0x08006ec7
 8006eac:	08006eb5 	.word	0x08006eb5
 8006eb0:	08006f4f 	.word	0x08006f4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d048      	beq.n	8006f52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ec4:	e045      	b.n	8006f52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ece:	d142      	bne.n	8006f56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ed4:	e03f      	b.n	8006f56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ede:	d123      	bne.n	8006f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d838      	bhi.n	8006f5a <DMA_CheckFifoParam+0xda>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <DMA_CheckFifoParam+0x70>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f01 	.word	0x08006f01
 8006ef4:	08006f07 	.word	0x08006f07
 8006ef8:	08006f01 	.word	0x08006f01
 8006efc:	08006f19 	.word	0x08006f19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
        break;
 8006f04:	e030      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d025      	beq.n	8006f5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f16:	e022      	b.n	8006f5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f20:	d11f      	bne.n	8006f62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f26:	e01c      	b.n	8006f62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d902      	bls.n	8006f36 <DMA_CheckFifoParam+0xb6>
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d003      	beq.n	8006f3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006f34:	e018      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]
        break;
 8006f3a:	e015      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00e      	beq.n	8006f66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4c:	e00b      	b.n	8006f66 <DMA_CheckFifoParam+0xe6>
        break;
 8006f4e:	bf00      	nop
 8006f50:	e00a      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
        break;
 8006f52:	bf00      	nop
 8006f54:	e008      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
        break;
 8006f56:	bf00      	nop
 8006f58:	e006      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
        break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <DMA_CheckFifoParam+0xe8>
    break;
 8006f66:	bf00      	nop
    }
  }

  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop

08006f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a38      	ldr	r2, [pc, #224]	; (800706c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a36      	ldr	r2, [pc, #216]	; (8007070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01d      	beq.n	8006fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a35      	ldr	r2, [pc, #212]	; (8007074 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a33      	ldr	r2, [pc, #204]	; (8007078 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a32      	ldr	r2, [pc, #200]	; (800707c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a30      	ldr	r2, [pc, #192]	; (8007080 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2f      	ldr	r2, [pc, #188]	; (8007084 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d101      	bne.n	8006fda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01a      	beq.n	8007016 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	3b08      	subs	r3, #8
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006fea:	fba2 2303 	umull	r2, r3, r2, r3
 8006fee:	091b      	lsrs	r3, r3, #4
 8006ff0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4b26      	ldr	r3, [pc, #152]	; (8007090 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007004:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2201      	movs	r2, #1
 800700e:	409a      	lsls	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007014:	e024      	b.n	8007060 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	3b10      	subs	r3, #16
 800701e:	4a1e      	ldr	r2, [pc, #120]	; (8007098 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007020:	fba2 2303 	umull	r2, r3, r2, r3
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4a1c      	ldr	r2, [pc, #112]	; (800709c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d806      	bhi.n	800703e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d902      	bls.n	800703e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3308      	adds	r3, #8
 800703c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	461a      	mov	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007050:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	2201      	movs	r2, #1
 800705a:	409a      	lsls	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	58025408 	.word	0x58025408
 8007070:	5802541c 	.word	0x5802541c
 8007074:	58025430 	.word	0x58025430
 8007078:	58025444 	.word	0x58025444
 800707c:	58025458 	.word	0x58025458
 8007080:	5802546c 	.word	0x5802546c
 8007084:	58025480 	.word	0x58025480
 8007088:	58025494 	.word	0x58025494
 800708c:	cccccccd 	.word	0xcccccccd
 8007090:	16009600 	.word	0x16009600
 8007094:	58025880 	.word	0x58025880
 8007098:	aaaaaaab 	.word	0xaaaaaaab
 800709c:	400204b8 	.word	0x400204b8
 80070a0:	4002040f 	.word	0x4002040f
 80070a4:	10008200 	.word	0x10008200
 80070a8:	40020880 	.word	0x40020880

080070ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d04a      	beq.n	8007158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d847      	bhi.n	8007158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a25      	ldr	r2, [pc, #148]	; (8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d022      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a24      	ldr	r2, [pc, #144]	; (8007168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d01d      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a22      	ldr	r2, [pc, #136]	; (800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d018      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a21      	ldr	r2, [pc, #132]	; (8007170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1f      	ldr	r2, [pc, #124]	; (8007174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00e      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1e      	ldr	r2, [pc, #120]	; (8007178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a1c      	ldr	r2, [pc, #112]	; (800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d101      	bne.n	800711c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800711c:	2300      	movs	r3, #0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4b17      	ldr	r3, [pc, #92]	; (8007184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007134:	671a      	str	r2, [r3, #112]	; 0x70
 8007136:	e009      	b.n	800714c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	461a      	mov	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a11      	ldr	r2, [pc, #68]	; (8007190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800714a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	2201      	movs	r2, #1
 8007152:	409a      	lsls	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	58025408 	.word	0x58025408
 8007168:	5802541c 	.word	0x5802541c
 800716c:	58025430 	.word	0x58025430
 8007170:	58025444 	.word	0x58025444
 8007174:	58025458 	.word	0x58025458
 8007178:	5802546c 	.word	0x5802546c
 800717c:	58025480 	.word	0x58025480
 8007180:	58025494 	.word	0x58025494
 8007184:	1600963f 	.word	0x1600963f
 8007188:	58025940 	.word	0x58025940
 800718c:	1000823f 	.word	0x1000823f
 8007190:	40020940 	.word	0x40020940

08007194 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b098      	sub	sp, #96	; 0x60
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800719c:	4a84      	ldr	r2, [pc, #528]	; (80073b0 <HAL_FDCAN_Init+0x21c>)
 800719e:	f107 030c 	add.w	r3, r7, #12
 80071a2:	4611      	mov	r1, r2
 80071a4:	224c      	movs	r2, #76	; 0x4c
 80071a6:	4618      	mov	r0, r3
 80071a8:	f013 f9bd 	bl	801a526 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e1c6      	b.n	8007544 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a7e      	ldr	r2, [pc, #504]	; (80073b4 <HAL_FDCAN_Init+0x220>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d106      	bne.n	80071ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80071c8:	461a      	mov	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fb f9fc 	bl	80025e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699a      	ldr	r2, [r3, #24]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0210 	bic.w	r2, r2, #16
 80071f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071f8:	f7fc fa32 	bl	8003660 <HAL_GetTick>
 80071fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071fe:	e014      	b.n	800722a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007200:	f7fc fa2e 	bl	8003660 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b0a      	cmp	r3, #10
 800720c:	d90d      	bls.n	800722a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007214:	f043 0201 	orr.w	r2, r3, #1
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2203      	movs	r2, #3
 8007222:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e18c      	b.n	8007544 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b08      	cmp	r3, #8
 8007236:	d0e3      	beq.n	8007200 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007248:	f7fc fa0a 	bl	8003660 <HAL_GetTick>
 800724c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800724e:	e014      	b.n	800727a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007250:	f7fc fa06 	bl	8003660 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b0a      	cmp	r3, #10
 800725c:	d90d      	bls.n	800727a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2203      	movs	r2, #3
 8007272:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e164      	b.n	8007544 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0e3      	beq.n	8007250 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0202 	orr.w	r2, r2, #2
 8007296:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	7c1b      	ldrb	r3, [r3, #16]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d108      	bne.n	80072b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ae:	619a      	str	r2, [r3, #24]
 80072b0:	e007      	b.n	80072c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7c5b      	ldrb	r3, [r3, #17]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d108      	bne.n	80072dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072d8:	619a      	str	r2, [r3, #24]
 80072da:	e007      	b.n	80072ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7c9b      	ldrb	r3, [r3, #18]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d108      	bne.n	8007306 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007302:	619a      	str	r2, [r3, #24]
 8007304:	e007      	b.n	8007316 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007314:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800733a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0210 	bic.w	r2, r2, #16
 800734a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d108      	bne.n	8007366 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0204 	orr.w	r2, r2, #4
 8007362:	619a      	str	r2, [r3, #24]
 8007364:	e030      	b.n	80073c8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d02c      	beq.n	80073c8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d020      	beq.n	80073b8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007384:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0210 	orr.w	r2, r2, #16
 8007394:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d114      	bne.n	80073c8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0220 	orr.w	r2, r2, #32
 80073ac:	619a      	str	r2, [r3, #24]
 80073ae:	e00b      	b.n	80073c8 <HAL_FDCAN_Init+0x234>
 80073b0:	0801db64 	.word	0x0801db64
 80073b4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0220 	orr.w	r2, r2, #32
 80073c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80073e0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80073f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073fc:	d115      	bne.n	800742a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	3b01      	subs	r3, #1
 800740a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800740c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	3b01      	subs	r3, #1
 8007414:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007416:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	3b01      	subs	r3, #1
 8007420:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007426:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007428:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007450:	4413      	add	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800745e:	f023 0107 	bic.w	r1, r3, #7
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	3360      	adds	r3, #96	; 0x60
 800746a:	443b      	add	r3, r7
 800746c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d011      	beq.n	80074a6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800748a:	f023 0107 	bic.w	r1, r3, #7
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	3360      	adds	r3, #96	; 0x60
 8007496:	443b      	add	r3, r7
 8007498:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d012      	beq.n	80074d4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074b6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	3360      	adds	r3, #96	; 0x60
 80074c2:	443b      	add	r3, r7
 80074c4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80074c8:	011a      	lsls	r2, r3, #4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d012      	beq.n	8007502 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074e4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	3360      	adds	r3, #96	; 0x60
 80074f0:	443b      	add	r3, r7
 80074f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80074f6:	021a      	lsls	r2, r3, #8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a11      	ldr	r2, [pc, #68]	; (800754c <HAL_FDCAN_Init+0x3b8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d107      	bne.n	800751c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f022 0203 	bic.w	r2, r2, #3
 800751a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f80b 	bl	8007550 <FDCAN_CalcultateRamBlockAddresses>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007540:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007544:	4618      	mov	r0, r3
 8007546:	3760      	adds	r7, #96	; 0x60
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	4000a000 	.word	0x4000a000

08007550 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007566:	4ba7      	ldr	r3, [pc, #668]	; (8007804 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007568:	4013      	ands	r3, r2
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	0091      	lsls	r1, r2, #2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	430b      	orrs	r3, r1
 8007574:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007580:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	041a      	lsls	r2, r3, #16
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	4413      	add	r3, r2
 800759c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80075a6:	4b97      	ldr	r3, [pc, #604]	; (8007804 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	0091      	lsls	r1, r2, #2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	430b      	orrs	r3, r1
 80075b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	041a      	lsls	r2, r3, #16
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80075e8:	4b86      	ldr	r3, [pc, #536]	; (8007804 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075ea:	4013      	ands	r3, r2
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	0091      	lsls	r1, r2, #2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	430b      	orrs	r3, r1
 80075f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007602:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	041a      	lsls	r2, r3, #16
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	4413      	add	r3, r2
 8007626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007630:	4b74      	ldr	r3, [pc, #464]	; (8007804 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007632:	4013      	ands	r3, r2
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	0091      	lsls	r1, r2, #2
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	430b      	orrs	r3, r1
 800763e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800764a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007652:	041a      	lsls	r2, r3, #16
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007666:	fb02 f303 	mul.w	r3, r2, r3
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007678:	4b62      	ldr	r3, [pc, #392]	; (8007804 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800767a:	4013      	ands	r3, r2
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	0091      	lsls	r1, r2, #2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	430b      	orrs	r3, r1
 8007686:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007692:	fb02 f303 	mul.w	r3, r2, r3
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	4413      	add	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80076a4:	4b57      	ldr	r3, [pc, #348]	; (8007804 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	0091      	lsls	r1, r2, #2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	430b      	orrs	r3, r1
 80076b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076be:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c6:	041a      	lsls	r2, r3, #16
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4413      	add	r3, r2
 80076dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80076e6:	4b47      	ldr	r3, [pc, #284]	; (8007804 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	0091      	lsls	r1, r2, #2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	430b      	orrs	r3, r1
 80076f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007700:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007708:	041a      	lsls	r2, r3, #16
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800771c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007724:	061a      	lsls	r2, r3, #24
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007734:	4b34      	ldr	r3, [pc, #208]	; (8007808 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007736:	4413      	add	r3, r2
 8007738:	009a      	lsls	r2, r3, #2
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	441a      	add	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007782:	fb01 f303 	mul.w	r3, r1, r3
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	441a      	add	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	441a      	add	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80077ca:	fb01 f303 	mul.w	r3, r1, r3
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	441a      	add	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	441a      	add	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fa:	4a04      	ldr	r2, [pc, #16]	; (800780c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d915      	bls.n	800782c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007800:	e006      	b.n	8007810 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007802:	bf00      	nop
 8007804:	ffff0003 	.word	0xffff0003
 8007808:	10002b00 	.word	0x10002b00
 800780c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007816:	f043 0220 	orr.w	r2, r3, #32
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2203      	movs	r2, #3
 8007824:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e010      	b.n	800784e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e005      	b.n	8007840 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3304      	adds	r3, #4
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	429a      	cmp	r2, r3
 800784a:	d3f3      	bcc.n	8007834 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop

0800785c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800785c:	b480      	push	{r7}
 800785e:	b089      	sub	sp, #36	; 0x24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800786a:	4b86      	ldr	r3, [pc, #536]	; (8007a84 <HAL_GPIO_Init+0x228>)
 800786c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800786e:	e18c      	b.n	8007b8a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	2101      	movs	r1, #1
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	4013      	ands	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 817e 	beq.w	8007b84 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	2b01      	cmp	r3, #1
 8007892:	d005      	beq.n	80078a0 <HAL_GPIO_Init+0x44>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f003 0303 	and.w	r3, r3, #3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d130      	bne.n	8007902 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	2203      	movs	r2, #3
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	43db      	mvns	r3, r3
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	4013      	ands	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078d6:	2201      	movs	r2, #1
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	43db      	mvns	r3, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	4013      	ands	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	091b      	lsrs	r3, r3, #4
 80078ec:	f003 0201 	and.w	r2, r3, #1
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b03      	cmp	r3, #3
 800790c:	d017      	beq.n	800793e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	2203      	movs	r2, #3
 800791a:	fa02 f303 	lsl.w	r3, r2, r3
 800791e:	43db      	mvns	r3, r3
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	4013      	ands	r3, r2
 8007924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	fa02 f303 	lsl.w	r3, r2, r3
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	4313      	orrs	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b02      	cmp	r3, #2
 8007948:	d123      	bne.n	8007992 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	08da      	lsrs	r2, r3, #3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3208      	adds	r2, #8
 8007952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	220f      	movs	r2, #15
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	43db      	mvns	r3, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4013      	ands	r3, r2
 800796c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	4313      	orrs	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	08da      	lsrs	r2, r3, #3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3208      	adds	r2, #8
 800798c:	69b9      	ldr	r1, [r7, #24]
 800798e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	2203      	movs	r2, #3
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	43db      	mvns	r3, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4013      	ands	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f003 0203 	and.w	r2, r3, #3
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	4313      	orrs	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80d8 	beq.w	8007b84 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079d4:	4b2c      	ldr	r3, [pc, #176]	; (8007a88 <HAL_GPIO_Init+0x22c>)
 80079d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079da:	4a2b      	ldr	r2, [pc, #172]	; (8007a88 <HAL_GPIO_Init+0x22c>)
 80079dc:	f043 0302 	orr.w	r3, r3, #2
 80079e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80079e4:	4b28      	ldr	r3, [pc, #160]	; (8007a88 <HAL_GPIO_Init+0x22c>)
 80079e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079f2:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <HAL_GPIO_Init+0x230>)
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	3302      	adds	r3, #2
 80079fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	220f      	movs	r2, #15
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <HAL_GPIO_Init+0x234>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d04a      	beq.n	8007ab4 <HAL_GPIO_Init+0x258>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <HAL_GPIO_Init+0x238>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d02b      	beq.n	8007a7e <HAL_GPIO_Init+0x222>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1b      	ldr	r2, [pc, #108]	; (8007a98 <HAL_GPIO_Init+0x23c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d025      	beq.n	8007a7a <HAL_GPIO_Init+0x21e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1a      	ldr	r2, [pc, #104]	; (8007a9c <HAL_GPIO_Init+0x240>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01f      	beq.n	8007a76 <HAL_GPIO_Init+0x21a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a19      	ldr	r2, [pc, #100]	; (8007aa0 <HAL_GPIO_Init+0x244>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d019      	beq.n	8007a72 <HAL_GPIO_Init+0x216>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <HAL_GPIO_Init+0x248>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <HAL_GPIO_Init+0x212>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <HAL_GPIO_Init+0x24c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00d      	beq.n	8007a6a <HAL_GPIO_Init+0x20e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a16      	ldr	r2, [pc, #88]	; (8007aac <HAL_GPIO_Init+0x250>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d007      	beq.n	8007a66 <HAL_GPIO_Init+0x20a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <HAL_GPIO_Init+0x254>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d101      	bne.n	8007a62 <HAL_GPIO_Init+0x206>
 8007a5e:	2309      	movs	r3, #9
 8007a60:	e029      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a62:	230a      	movs	r3, #10
 8007a64:	e027      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a66:	2307      	movs	r3, #7
 8007a68:	e025      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a6a:	2306      	movs	r3, #6
 8007a6c:	e023      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a6e:	2305      	movs	r3, #5
 8007a70:	e021      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a72:	2304      	movs	r3, #4
 8007a74:	e01f      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a76:	2303      	movs	r3, #3
 8007a78:	e01d      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e01b      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e019      	b.n	8007ab6 <HAL_GPIO_Init+0x25a>
 8007a82:	bf00      	nop
 8007a84:	58000080 	.word	0x58000080
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	58000400 	.word	0x58000400
 8007a90:	58020000 	.word	0x58020000
 8007a94:	58020400 	.word	0x58020400
 8007a98:	58020800 	.word	0x58020800
 8007a9c:	58020c00 	.word	0x58020c00
 8007aa0:	58021000 	.word	0x58021000
 8007aa4:	58021400 	.word	0x58021400
 8007aa8:	58021800 	.word	0x58021800
 8007aac:	58021c00 	.word	0x58021c00
 8007ab0:	58022400 	.word	0x58022400
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	f002 0203 	and.w	r2, r2, #3
 8007abc:	0092      	lsls	r2, r2, #2
 8007abe:	4093      	lsls	r3, r2
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ac6:	4938      	ldr	r1, [pc, #224]	; (8007ba8 <HAL_GPIO_Init+0x34c>)
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	089b      	lsrs	r3, r3, #2
 8007acc:	3302      	adds	r3, #2
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	43db      	mvns	r3, r3
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	4013      	ands	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	43db      	mvns	r3, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	4013      	ands	r3, r2
 8007b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	3301      	adds	r3, #1
 8007b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f47f ae6b 	bne.w	8007870 <HAL_GPIO_Init+0x14>
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	3724      	adds	r7, #36	; 0x24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	58000400 	.word	0x58000400

08007bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	807b      	strh	r3, [r7, #2]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bbc:	787b      	ldrb	r3, [r7, #1]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bc2:	887a      	ldrh	r2, [r7, #2]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007bc8:	e003      	b.n	8007bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007bca:	887b      	ldrh	r3, [r7, #2]
 8007bcc:	041a      	lsls	r2, r3, #16
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	619a      	str	r2, [r3, #24]
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e07f      	b.n	8007cf2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fa fd52 	bl	80026b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2224      	movs	r2, #36	; 0x24
 8007c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d107      	bne.n	8007c5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c56:	609a      	str	r2, [r3, #8]
 8007c58:	e006      	b.n	8007c68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007c66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d104      	bne.n	8007c7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6859      	ldr	r1, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <HAL_I2C_Init+0x11c>)
 8007c86:	430b      	orrs	r3, r1
 8007c88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	69d9      	ldr	r1, [r3, #28]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1a      	ldr	r2, [r3, #32]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0201 	orr.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	02008000 	.word	0x02008000

08007d00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d138      	bne.n	8007dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e032      	b.n	8007dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2224      	movs	r2, #36	; 0x24
 8007d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6819      	ldr	r1, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	e000      	b.n	8007dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007dbc:	2302      	movs	r3, #2
  }
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d139      	bne.n	8007e54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d101      	bne.n	8007dee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007dea:	2302      	movs	r3, #2
 8007dec:	e033      	b.n	8007e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2224      	movs	r2, #36	; 0x24
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e000      	b.n	8007e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e54:	2302      	movs	r3, #2
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e64:	b08f      	sub	sp, #60	; 0x3c
 8007e66:	af0a      	add	r7, sp, #40	; 0x28
 8007e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e116      	b.n	80080a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f011 f858 	bl	8018f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2203      	movs	r2, #3
 8007e98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f00a fcf7 	bl	80128a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	687e      	ldr	r6, [r7, #4]
 8007ec0:	466d      	mov	r5, sp
 8007ec2:	f106 0410 	add.w	r4, r6, #16
 8007ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ed6:	1d33      	adds	r3, r6, #4
 8007ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007eda:	6838      	ldr	r0, [r7, #0]
 8007edc:	f00a fbc2 	bl	8012664 <USB_CoreInit>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e0d7      	b.n	80080a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f00a fce5 	bl	80128c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
 8007f02:	e04a      	b.n	8007f9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f04:	7bfa      	ldrb	r2, [r7, #15]
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	333d      	adds	r3, #61	; 0x3d
 8007f14:	2201      	movs	r2, #1
 8007f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f18:	7bfa      	ldrb	r2, [r7, #15]
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	333c      	adds	r3, #60	; 0x3c
 8007f28:	7bfa      	ldrb	r2, [r7, #15]
 8007f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f2c:	7bfa      	ldrb	r2, [r7, #15]
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	b298      	uxth	r0, r3
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	3356      	adds	r3, #86	; 0x56
 8007f40:	4602      	mov	r2, r0
 8007f42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f44:	7bfa      	ldrb	r2, [r7, #15]
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	3340      	adds	r3, #64	; 0x40
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	3344      	adds	r3, #68	; 0x44
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f6c:	7bfa      	ldrb	r2, [r7, #15]
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	3348      	adds	r3, #72	; 0x48
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007f80:	7bfa      	ldrb	r2, [r7, #15]
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	334c      	adds	r3, #76	; 0x4c
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	3301      	adds	r3, #1
 8007f98:	73fb      	strb	r3, [r7, #15]
 8007f9a:	7bfa      	ldrb	r2, [r7, #15]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d3af      	bcc.n	8007f04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
 8007fa8:	e044      	b.n	8008034 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007faa:	7bfa      	ldrb	r2, [r7, #15]
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007fc0:	7bfa      	ldrb	r2, [r7, #15]
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007fd2:	7bfa      	ldrb	r2, [r7, #15]
 8007fd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007fd6:	7bfa      	ldrb	r2, [r7, #15]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007fe8:	2200      	movs	r2, #0
 8007fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007fec:	7bfa      	ldrb	r2, [r7, #15]
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008002:	7bfa      	ldrb	r2, [r7, #15]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008018:	7bfa      	ldrb	r2, [r7, #15]
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	4613      	mov	r3, r2
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	3301      	adds	r3, #1
 8008032:	73fb      	strb	r3, [r7, #15]
 8008034:	7bfa      	ldrb	r2, [r7, #15]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	429a      	cmp	r2, r3
 800803c:	d3b5      	bcc.n	8007faa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	687e      	ldr	r6, [r7, #4]
 8008046:	466d      	mov	r5, sp
 8008048:	f106 0410 	add.w	r4, r6, #16
 800804c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800804e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008054:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008058:	e885 0003 	stmia.w	r5, {r0, r1}
 800805c:	1d33      	adds	r3, r6, #4
 800805e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008060:	6838      	ldr	r0, [r7, #0]
 8008062:	f00a fc7d 	bl	8012960 <USB_DevInit>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e014      	b.n	80080a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b01      	cmp	r3, #1
 800808e:	d102      	bne.n	8008096 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 f96f 	bl	8009374 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f00b fcbf 	bl	8013a1e <USB_DevDisconnect>

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_PCD_Start+0x1c>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e022      	b.n	800810c <HAL_PCD_Start+0x62>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d105      	bne.n	80080ee <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f00a fbc6 	bl	8012884 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f00b fc6d 	bl	80139dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b08d      	sub	sp, #52	; 0x34
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f00b fd2b 	bl	8013b86 <USB_GetMode>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	f040 84b7 	bne.w	8008aa6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f00b fc8f 	bl	8013a60 <USB_ReadInterrupts>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 84ad 	beq.w	8008aa4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	0a1b      	lsrs	r3, r3, #8
 8008154:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f00b fc7c 	bl	8013a60 <USB_ReadInterrupts>
 8008168:	4603      	mov	r3, r0
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b02      	cmp	r3, #2
 8008170:	d107      	bne.n	8008182 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	695a      	ldr	r2, [r3, #20]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f002 0202 	and.w	r2, r2, #2
 8008180:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f00b fc6a 	bl	8013a60 <USB_ReadInterrupts>
 800818c:	4603      	mov	r3, r0
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b10      	cmp	r3, #16
 8008194:	d161      	bne.n	800825a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0210 	bic.w	r2, r2, #16
 80081a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f003 020f 	and.w	r2, r3, #15
 80081b2:	4613      	mov	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	3304      	adds	r3, #4
 80081c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	0c5b      	lsrs	r3, r3, #17
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d124      	bne.n	800821c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d035      	beq.n	800824a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	6a38      	ldr	r0, [r7, #32]
 80081f2:	f00b faa1 	bl	8013738 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	091b      	lsrs	r3, r3, #4
 80081fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008202:	441a      	add	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	695a      	ldr	r2, [r3, #20]
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008214:	441a      	add	r2, r3
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	615a      	str	r2, [r3, #20]
 800821a:	e016      	b.n	800824a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	0c5b      	lsrs	r3, r3, #17
 8008220:	f003 030f 	and.w	r3, r3, #15
 8008224:	2b06      	cmp	r3, #6
 8008226:	d110      	bne.n	800824a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800822e:	2208      	movs	r2, #8
 8008230:	4619      	mov	r1, r3
 8008232:	6a38      	ldr	r0, [r7, #32]
 8008234:	f00b fa80 	bl	8013738 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	695a      	ldr	r2, [r3, #20]
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	091b      	lsrs	r3, r3, #4
 8008240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008244:	441a      	add	r2, r3
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0210 	orr.w	r2, r2, #16
 8008258:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	f00b fbfe 	bl	8013a60 <USB_ReadInterrupts>
 8008264:	4603      	mov	r3, r0
 8008266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800826a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800826e:	f040 80a7 	bne.w	80083c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f00b fc03 	bl	8013a86 <USB_ReadDevAllOutEpInterrupt>
 8008280:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008282:	e099      	b.n	80083b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 808e 	beq.w	80083ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f00b fc27 	bl	8013aee <USB_ReadDevOutEPInterrupt>
 80082a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00c      	beq.n	80082c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b8:	461a      	mov	r2, r3
 80082ba:	2301      	movs	r3, #1
 80082bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80082be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fed1 	bl	8009068 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f003 0308 	and.w	r3, r3, #8
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	461a      	mov	r2, r3
 80082de:	2308      	movs	r3, #8
 80082e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80082e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 ffa7 	bl	8009238 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	461a      	mov	r2, r3
 8008302:	2310      	movs	r3, #16
 8008304:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d030      	beq.n	8008372 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008318:	2b80      	cmp	r3, #128	; 0x80
 800831a:	d109      	bne.n	8008330 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800832a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800832e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008332:	4613      	mov	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	4413      	add	r3, r2
 8008342:	3304      	adds	r3, #4
 8008344:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	78db      	ldrb	r3, [r3, #3]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d108      	bne.n	8008360 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2200      	movs	r2, #0
 8008352:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	b2db      	uxtb	r3, r3
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f010 feea 	bl	8019134 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	461a      	mov	r2, r3
 800836e:	2302      	movs	r3, #2
 8008370:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	d008      	beq.n	800838e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	461a      	mov	r2, r3
 800838a:	2320      	movs	r3, #32
 800838c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d009      	beq.n	80083ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a4:	461a      	mov	r2, r3
 80083a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	3301      	adds	r3, #1
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f47f af62 	bne.w	8008284 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f00b fb4b 	bl	8013a60 <USB_ReadInterrupts>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083d4:	f040 80db 	bne.w	800858e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f00b fb6c 	bl	8013aba <USB_ReadDevAllInEpInterrupt>
 80083e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80083e8:	e0cd      	b.n	8008586 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 80c2 	beq.w	800857a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fc:	b2d2      	uxtb	r2, r2
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f00b fb92 	bl	8013b2a <USB_ReadDevInEPInterrupt>
 8008406:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d057      	beq.n	80084c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	f003 030f 	and.w	r3, r3, #15
 8008418:	2201      	movs	r2, #1
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	43db      	mvns	r3, r3
 800842c:	69f9      	ldr	r1, [r7, #28]
 800842e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008432:	4013      	ands	r3, r2
 8008434:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008442:	461a      	mov	r2, r3
 8008444:	2301      	movs	r3, #1
 8008446:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d132      	bne.n	80084b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008454:	4613      	mov	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	3348      	adds	r3, #72	; 0x48
 8008460:	6819      	ldr	r1, [r3, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008466:	4613      	mov	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4403      	add	r3, r0
 8008470:	3344      	adds	r3, #68	; 0x44
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4419      	add	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4403      	add	r3, r0
 8008484:	3348      	adds	r3, #72	; 0x48
 8008486:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	2b00      	cmp	r3, #0
 800848c:	d113      	bne.n	80084b6 <HAL_PCD_IRQHandler+0x3a2>
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008492:	4613      	mov	r3, r2
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	334c      	adds	r3, #76	; 0x4c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084ae:	461a      	mov	r2, r3
 80084b0:	2101      	movs	r1, #1
 80084b2:	f00b fb9b 	bl	8013bec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f010 fdb4 	bl	801902a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d008      	beq.n	80084de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	461a      	mov	r2, r3
 80084da:	2308      	movs	r3, #8
 80084dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d008      	beq.n	80084fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f4:	461a      	mov	r2, r3
 80084f6:	2310      	movs	r3, #16
 80084f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	461a      	mov	r2, r3
 8008512:	2340      	movs	r3, #64	; 0x40
 8008514:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d023      	beq.n	8008568 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008522:	6a38      	ldr	r0, [r7, #32]
 8008524:	f00a fb7a 	bl	8012c1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852a:	4613      	mov	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	3338      	adds	r3, #56	; 0x38
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	4413      	add	r3, r2
 8008538:	3304      	adds	r3, #4
 800853a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	78db      	ldrb	r3, [r3, #3]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d108      	bne.n	8008556 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2200      	movs	r2, #0
 8008548:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	b2db      	uxtb	r3, r3
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f010 fe01 	bl	8019158 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008562:	461a      	mov	r2, r3
 8008564:	2302      	movs	r3, #2
 8008566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fcea 	bl	8008f4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	3301      	adds	r3, #1
 800857e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	085b      	lsrs	r3, r3, #1
 8008584:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	2b00      	cmp	r3, #0
 800858a:	f47f af2e 	bne.w	80083ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f00b fa64 	bl	8013a60 <USB_ReadInterrupts>
 8008598:	4603      	mov	r3, r0
 800859a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800859e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a2:	d122      	bne.n	80085ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085b2:	f023 0301 	bic.w	r3, r3, #1
 80085b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d108      	bne.n	80085d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80085ca:	2100      	movs	r1, #0
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fef5 	bl	80093bc <HAL_PCDEx_LPM_Callback>
 80085d2:	e002      	b.n	80085da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f010 fd9f 	bl	8019118 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	695a      	ldr	r2, [r3, #20]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80085e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f00b fa36 	bl	8013a60 <USB_ReadInterrupts>
 80085f4:	4603      	mov	r3, r0
 80085f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085fe:	d112      	bne.n	8008626 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b01      	cmp	r3, #1
 800860e:	d102      	bne.n	8008616 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f010 fd5b 	bl	80190cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	695a      	ldr	r2, [r3, #20]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008624:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4618      	mov	r0, r3
 800862c:	f00b fa18 	bl	8013a60 <USB_ReadInterrupts>
 8008630:	4603      	mov	r3, r0
 8008632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863a:	d121      	bne.n	8008680 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800864a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d111      	bne.n	800867a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008664:	089b      	lsrs	r3, r3, #2
 8008666:	f003 020f 	and.w	r2, r3, #15
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008670:	2101      	movs	r1, #1
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fea2 	bl	80093bc <HAL_PCDEx_LPM_Callback>
 8008678:	e002      	b.n	8008680 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f010 fd26 	bl	80190cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f00b f9eb 	bl	8013a60 <USB_ReadInterrupts>
 800868a:	4603      	mov	r3, r0
 800868c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008694:	f040 80b7 	bne.w	8008806 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	69fa      	ldr	r2, [r7, #28]
 80086a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2110      	movs	r1, #16
 80086b2:	4618      	mov	r0, r3
 80086b4:	f00a fab2 	bl	8012c1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086b8:	2300      	movs	r3, #0
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086bc:	e046      	b.n	800874c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	461a      	mov	r2, r3
 80086cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fe:	461a      	mov	r2, r3
 8008700:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008704:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008720:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008724:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	440a      	add	r2, r1
 800873c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008740:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008744:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	3301      	adds	r3, #1
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008752:	429a      	cmp	r2, r3
 8008754:	d3b3      	bcc.n	80086be <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	69fa      	ldr	r2, [r7, #28]
 8008760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008764:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008768:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	2b00      	cmp	r3, #0
 8008770:	d016      	beq.n	80087a0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008782:	f043 030b 	orr.w	r3, r3, #11
 8008786:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008798:	f043 030b 	orr.w	r3, r3, #11
 800879c:	6453      	str	r3, [r2, #68]	; 0x44
 800879e:	e015      	b.n	80087cc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	695a      	ldr	r2, [r3, #20]
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	4619      	mov	r1, r3
 80087b0:	f242 032b 	movw	r3, #8235	; 0x202b
 80087b4:	4313      	orrs	r3, r2
 80087b6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c6:	f043 030b 	orr.w	r3, r3, #11
 80087ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80087de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087f0:	461a      	mov	r2, r3
 80087f2:	f00b f9fb 	bl	8013bec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	695a      	ldr	r2, [r3, #20]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f00b f928 	bl	8013a60 <USB_ReadInterrupts>
 8008810:	4603      	mov	r3, r0
 8008812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800881a:	d124      	bne.n	8008866 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f00b f9bf 	bl	8013ba4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f00a fa73 	bl	8012d16 <USB_GetDevSpeed>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681c      	ldr	r4, [r3, #0]
 800883c:	f001 fd88 	bl	800a350 <HAL_RCC_GetHCLKFreq>
 8008840:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008846:	b2db      	uxtb	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	4620      	mov	r0, r4
 800884c:	f009 ff78 	bl	8012740 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f010 fc12 	bl	801907a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695a      	ldr	r2, [r3, #20]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008864:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f00b f8f8 	bl	8013a60 <USB_ReadInterrupts>
 8008870:	4603      	mov	r3, r0
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b08      	cmp	r3, #8
 8008878:	d10a      	bne.n	8008890 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f010 fbef 	bl	801905e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695a      	ldr	r2, [r3, #20]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f002 0208 	and.w	r2, r2, #8
 800888e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f00b f8e3 	bl	8013a60 <USB_ReadInterrupts>
 800889a:	4603      	mov	r3, r0
 800889c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a0:	2b80      	cmp	r3, #128	; 0x80
 80088a2:	d122      	bne.n	80088ea <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088b0:	2301      	movs	r3, #1
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
 80088b4:	e014      	b.n	80088e0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	4613      	mov	r3, r2
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d105      	bne.n	80088da <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fb09 	bl	8008eec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	3301      	adds	r3, #1
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d3e5      	bcc.n	80088b6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f00b f8b6 	bl	8013a60 <USB_ReadInterrupts>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088fe:	d13b      	bne.n	8008978 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008900:	2301      	movs	r3, #1
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
 8008904:	e02b      	b.n	800895e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891a:	4613      	mov	r3, r2
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	3340      	adds	r3, #64	; 0x40
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d115      	bne.n	8008958 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800892c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800892e:	2b00      	cmp	r3, #0
 8008930:	da12      	bge.n	8008958 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008936:	4613      	mov	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	440b      	add	r3, r1
 8008940:	333f      	adds	r3, #63	; 0x3f
 8008942:	2201      	movs	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800894e:	b2db      	uxtb	r3, r3
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 faca 	bl	8008eec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	3301      	adds	r3, #1
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008964:	429a      	cmp	r2, r3
 8008966:	d3ce      	bcc.n	8008906 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695a      	ldr	r2, [r3, #20]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f00b f86f 	bl	8013a60 <USB_ReadInterrupts>
 8008982:	4603      	mov	r3, r0
 8008984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800898c:	d155      	bne.n	8008a3a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800898e:	2301      	movs	r3, #1
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
 8008992:	e045      	b.n	8008a20 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a8:	4613      	mov	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	4413      	add	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d12e      	bne.n	8008a1a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089be:	2b00      	cmp	r3, #0
 80089c0:	da2b      	bge.n	8008a1a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80089ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d121      	bne.n	8008a1a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	4613      	mov	r3, r2
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80089e8:	2201      	movs	r2, #1
 80089ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a16:	6053      	str	r3, [r2, #4]
            break;
 8008a18:	e007      	b.n	8008a2a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d3b4      	bcc.n	8008994 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	695a      	ldr	r2, [r3, #20]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f00b f80e 	bl	8013a60 <USB_ReadInterrupts>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4e:	d10a      	bne.n	8008a66 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f010 fb93 	bl	801917c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f00a fff8 	bl	8013a60 <USB_ReadInterrupts>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d115      	bne.n	8008aa6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f010 fb83 	bl	8019198 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6859      	ldr	r1, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
 8008aa2:	e000      	b.n	8008aa6 <HAL_PCD_IRQHandler+0x992>
      return;
 8008aa4:	bf00      	nop
    }
  }
}
 8008aa6:	3734      	adds	r7, #52	; 0x34
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd90      	pop	{r4, r7, pc}

08008aac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_PCD_SetAddress+0x1a>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e013      	b.n	8008aee <HAL_PCD_SetAddress+0x42>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	4611      	mov	r1, r2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f00a ff56 	bl	8013990 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	461a      	mov	r2, r3
 8008b04:	4603      	mov	r3, r0
 8008b06:	70fb      	strb	r3, [r7, #3]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	803b      	strh	r3, [r7, #0]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da0f      	bge.n	8008b3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	f003 020f 	and.w	r2, r3, #15
 8008b22:	4613      	mov	r3, r2
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	3338      	adds	r3, #56	; 0x38
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	3304      	adds	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	705a      	strb	r2, [r3, #1]
 8008b3a:	e00f      	b.n	8008b5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	f003 020f 	and.w	r2, r3, #15
 8008b42:	4613      	mov	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4413      	add	r3, r2
 8008b52:	3304      	adds	r3, #4
 8008b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b68:	883a      	ldrh	r2, [r7, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	78ba      	ldrb	r2, [r7, #2]
 8008b72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b86:	78bb      	ldrb	r3, [r7, #2]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d102      	bne.n	8008b92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_PCD_EP_Open+0xaa>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e00e      	b.n	8008bbe <HAL_PCD_EP_Open+0xc8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68f9      	ldr	r1, [r7, #12]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f00a f8d6 	bl	8012d60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008bbc:	7afb      	ldrb	r3, [r7, #11]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da0f      	bge.n	8008bfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	f003 020f 	and.w	r2, r3, #15
 8008be0:	4613      	mov	r3, r2
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	3338      	adds	r3, #56	; 0x38
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	3304      	adds	r3, #4
 8008bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	705a      	strb	r2, [r3, #1]
 8008bf8:	e00f      	b.n	8008c1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	f003 020f 	and.w	r2, r3, #15
 8008c00:	4613      	mov	r3, r2
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4413      	add	r3, r2
 8008c10:	3304      	adds	r3, #4
 8008c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_PCD_EP_Close+0x6e>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e00e      	b.n	8008c52 <HAL_PCD_EP_Close+0x8c>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68f9      	ldr	r1, [r7, #12]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f00a f914 	bl	8012e70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
 8008c66:	460b      	mov	r3, r1
 8008c68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c6a:	7afb      	ldrb	r3, [r7, #11]
 8008c6c:	f003 020f 	and.w	r2, r3, #15
 8008c70:	4613      	mov	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	3304      	adds	r3, #4
 8008c82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2200      	movs	r2, #0
 8008c94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d102      	bne.n	8008cb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	f00a f9b0 	bl	8013028 <USB_EPStartXfer>

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	f003 020f 	and.w	r2, r3, #15
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008cf4:	681b      	ldr	r3, [r3, #0]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	3338      	adds	r3, #56	; 0x38
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	4413      	add	r3, r2
 8008d26:	3304      	adds	r3, #4
 8008d28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d102      	bne.n	8008d5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	6979      	ldr	r1, [r7, #20]
 8008d6a:	f00a f95d 	bl	8013028 <USB_EPStartXfer>

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	f003 020f 	and.w	r2, r3, #15
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d901      	bls.n	8008d96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e050      	b.n	8008e38 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da0f      	bge.n	8008dbe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	f003 020f 	and.w	r2, r3, #15
 8008da4:	4613      	mov	r3, r2
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	3338      	adds	r3, #56	; 0x38
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	3304      	adds	r3, #4
 8008db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	705a      	strb	r2, [r3, #1]
 8008dbc:	e00d      	b.n	8008dda <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	4413      	add	r3, r2
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <HAL_PCD_EP_SetStall+0x82>
 8008df6:	2302      	movs	r3, #2
 8008df8:	e01e      	b.n	8008e38 <HAL_PCD_EP_SetStall+0xc0>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68f9      	ldr	r1, [r7, #12]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f00a fced 	bl	80137e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	b2d9      	uxtb	r1, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e28:	461a      	mov	r2, r3
 8008e2a:	f00a fedf 	bl	8013bec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	f003 020f 	and.w	r2, r3, #15
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d901      	bls.n	8008e5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e042      	b.n	8008ee4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da0f      	bge.n	8008e86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	f003 020f 	and.w	r2, r3, #15
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	3338      	adds	r3, #56	; 0x38
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	4413      	add	r3, r2
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	705a      	strb	r2, [r3, #1]
 8008e84:	e00f      	b.n	8008ea6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	f003 020f 	and.w	r2, r3, #15
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_PCD_EP_ClrStall+0x86>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e00e      	b.n	8008ee4 <HAL_PCD_EP_ClrStall+0xa4>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68f9      	ldr	r1, [r7, #12]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f00a fcf5 	bl	80138c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	da0c      	bge.n	8008f1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	f003 020f 	and.w	r2, r3, #15
 8008f06:	4613      	mov	r3, r2
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	3338      	adds	r3, #56	; 0x38
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	4413      	add	r3, r2
 8008f14:	3304      	adds	r3, #4
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	e00c      	b.n	8008f34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	f003 020f 	and.w	r2, r3, #15
 8008f20:	4613      	mov	r3, r2
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	3304      	adds	r3, #4
 8008f32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68f9      	ldr	r1, [r7, #12]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f00a fb14 	bl	8013568 <USB_EPStopXfer>
 8008f40:	4603      	mov	r3, r0
 8008f42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008f44:	7afb      	ldrb	r3, [r7, #11]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b08a      	sub	sp, #40	; 0x28
 8008f52:	af02      	add	r7, sp, #8
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4613      	mov	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	3338      	adds	r3, #56	; 0x38
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4413      	add	r3, r2
 8008f72:	3304      	adds	r3, #4
 8008f74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d901      	bls.n	8008f86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e06c      	b.n	8009060 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	69fa      	ldr	r2, [r7, #28]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d902      	bls.n	8008fa2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	3303      	adds	r3, #3
 8008fa6:	089b      	lsrs	r3, r3, #2
 8008fa8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008faa:	e02b      	b.n	8009004 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d902      	bls.n	8008fc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	3303      	adds	r3, #3
 8008fcc:	089b      	lsrs	r3, r3, #2
 8008fce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68d9      	ldr	r1, [r3, #12]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	6978      	ldr	r0, [r7, #20]
 8008fe8:	f00a fb68 	bl	80136bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	441a      	add	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	695a      	ldr	r2, [r3, #20]
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	441a      	add	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	429a      	cmp	r2, r3
 8009018:	d809      	bhi.n	800902e <PCD_WriteEmptyTxFifo+0xe0>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	695a      	ldr	r2, [r3, #20]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009022:	429a      	cmp	r2, r3
 8009024:	d203      	bcs.n	800902e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1be      	bne.n	8008fac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	429a      	cmp	r2, r3
 8009038:	d811      	bhi.n	800905e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	2201      	movs	r2, #1
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	43db      	mvns	r3, r3
 8009054:	6939      	ldr	r1, [r7, #16]
 8009056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800905a:	4013      	ands	r3, r2
 800905c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	333c      	adds	r3, #60	; 0x3c
 8009080:	3304      	adds	r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d17b      	bne.n	8009196 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d015      	beq.n	80090d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	4a61      	ldr	r2, [pc, #388]	; (8009230 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	f240 80b9 	bls.w	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80b3 	beq.w	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ca:	461a      	mov	r2, r3
 80090cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090d0:	6093      	str	r3, [r2, #8]
 80090d2:	e0a7      	b.n	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	461a      	mov	r2, r3
 80090ec:	2320      	movs	r3, #32
 80090ee:	6093      	str	r3, [r2, #8]
 80090f0:	e098      	b.n	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f040 8093 	bne.w	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	4a4b      	ldr	r2, [pc, #300]	; (8009230 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d90f      	bls.n	8009126 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911c:	461a      	mov	r2, r3
 800911e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009122:	6093      	str	r3, [r2, #8]
 8009124:	e07e      	b.n	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	4613      	mov	r3, r2
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	4413      	add	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	4413      	add	r3, r2
 8009138:	3304      	adds	r3, #4
 800913a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1a      	ldr	r2, [r3, #32]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	0159      	lsls	r1, r3, #5
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	440b      	add	r3, r1
 8009148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009152:	1ad2      	subs	r2, r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d114      	bne.n	8009188 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d109      	bne.n	800917a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009170:	461a      	mov	r2, r3
 8009172:	2101      	movs	r1, #1
 8009174:	f00a fd3a 	bl	8013bec <USB_EP0_OutStart>
 8009178:	e006      	b.n	8009188 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	441a      	add	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	b2db      	uxtb	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f00f ff30 	bl	8018ff4 <HAL_PCD_DataOutStageCallback>
 8009194:	e046      	b.n	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	4a26      	ldr	r2, [pc, #152]	; (8009234 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d124      	bne.n	80091e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	461a      	mov	r2, r3
 80091b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ba:	6093      	str	r3, [r2, #8]
 80091bc:	e032      	b.n	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d008      	beq.n	80091da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	461a      	mov	r2, r3
 80091d6:	2320      	movs	r3, #32
 80091d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f00f ff07 	bl	8018ff4 <HAL_PCD_DataOutStageCallback>
 80091e6:	e01d      	b.n	8009224 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d114      	bne.n	8009218 <PCD_EP_OutXfrComplete_int+0x1b0>
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	4613      	mov	r3, r2
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d108      	bne.n	8009218 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009210:	461a      	mov	r2, r3
 8009212:	2100      	movs	r1, #0
 8009214:	f00a fcea 	bl	8013bec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f00f fee8 	bl	8018ff4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3720      	adds	r7, #32
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	4f54300a 	.word	0x4f54300a
 8009234:	4f54310a 	.word	0x4f54310a

08009238 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	333c      	adds	r3, #60	; 0x3c
 8009250:	3304      	adds	r3, #4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4a15      	ldr	r2, [pc, #84]	; (80092c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d90e      	bls.n	800928c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009284:	461a      	mov	r2, r3
 8009286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800928a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f00f fe9f 	bl	8018fd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4a0a      	ldr	r2, [pc, #40]	; (80092c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d90c      	bls.n	80092b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d108      	bne.n	80092b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092ac:	461a      	mov	r2, r3
 80092ae:	2101      	movs	r1, #1
 80092b0:	f00a fc9c 	bl	8013bec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	4f54300a 	.word	0x4f54300a

080092c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
 80092d0:	4613      	mov	r3, r2
 80092d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d107      	bne.n	80092f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80092e2:	883b      	ldrh	r3, [r7, #0]
 80092e4:	0419      	lsls	r1, r3, #16
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	629a      	str	r2, [r3, #40]	; 0x28
 80092f0:	e028      	b.n	8009344 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	0c1b      	lsrs	r3, r3, #16
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	4413      	add	r3, r2
 80092fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
 8009304:	e00d      	b.n	8009322 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	3340      	adds	r3, #64	; 0x40
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	4413      	add	r3, r2
 800931a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	3301      	adds	r3, #1
 8009320:	73fb      	strb	r3, [r7, #15]
 8009322:	7bfa      	ldrb	r2, [r7, #15]
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	3b01      	subs	r3, #1
 8009328:	429a      	cmp	r2, r3
 800932a:	d3ec      	bcc.n	8009306 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800932c:	883b      	ldrh	r3, [r7, #0]
 800932e:	0418      	lsls	r0, r3, #16
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6819      	ldr	r1, [r3, #0]
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	3b01      	subs	r3, #1
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	4302      	orrs	r2, r0
 800933c:	3340      	adds	r3, #64	; 0x40
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	440b      	add	r3, r1
 8009342:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	887a      	ldrh	r2, [r7, #2]
 8009364:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093a2:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	10000003 	.word	0x10000003

080093bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80093dc:	4b19      	ldr	r3, [pc, #100]	; (8009444 <HAL_PWREx_ConfigSupply+0x70>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d00a      	beq.n	80093fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80093e8:	4b16      	ldr	r3, [pc, #88]	; (8009444 <HAL_PWREx_ConfigSupply+0x70>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d001      	beq.n	80093fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e01f      	b.n	800943a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	e01d      	b.n	800943a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80093fe:	4b11      	ldr	r3, [pc, #68]	; (8009444 <HAL_PWREx_ConfigSupply+0x70>)
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f023 0207 	bic.w	r2, r3, #7
 8009406:	490f      	ldr	r1, [pc, #60]	; (8009444 <HAL_PWREx_ConfigSupply+0x70>)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4313      	orrs	r3, r2
 800940c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800940e:	f7fa f927 	bl	8003660 <HAL_GetTick>
 8009412:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009414:	e009      	b.n	800942a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009416:	f7fa f923 	bl	8003660 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009424:	d901      	bls.n	800942a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e007      	b.n	800943a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <HAL_PWREx_ConfigSupply+0x70>)
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009436:	d1ee      	bne.n	8009416 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	58024800 	.word	0x58024800

08009448 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800944c:	4b05      	ldr	r3, [pc, #20]	; (8009464 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	4a04      	ldr	r2, [pc, #16]	; (8009464 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009456:	60d3      	str	r3, [r2, #12]
}
 8009458:	bf00      	nop
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	58024800 	.word	0x58024800

08009468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08c      	sub	sp, #48	; 0x30
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e3c8      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8087 	beq.w	8009596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009488:	4b88      	ldr	r3, [pc, #544]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009490:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009492:	4b86      	ldr	r3, [pc, #536]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	2b10      	cmp	r3, #16
 800949c:	d007      	beq.n	80094ae <HAL_RCC_OscConfig+0x46>
 800949e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a0:	2b18      	cmp	r3, #24
 80094a2:	d110      	bne.n	80094c6 <HAL_RCC_OscConfig+0x5e>
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d10b      	bne.n	80094c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094ae:	4b7f      	ldr	r3, [pc, #508]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d06c      	beq.n	8009594 <HAL_RCC_OscConfig+0x12c>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d168      	bne.n	8009594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e3a2      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ce:	d106      	bne.n	80094de <HAL_RCC_OscConfig+0x76>
 80094d0:	4b76      	ldr	r3, [pc, #472]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a75      	ldr	r2, [pc, #468]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80094d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	e02e      	b.n	800953c <HAL_RCC_OscConfig+0xd4>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10c      	bne.n	8009500 <HAL_RCC_OscConfig+0x98>
 80094e6:	4b71      	ldr	r3, [pc, #452]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a70      	ldr	r2, [pc, #448]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80094ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	4b6e      	ldr	r3, [pc, #440]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a6d      	ldr	r2, [pc, #436]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80094f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	e01d      	b.n	800953c <HAL_RCC_OscConfig+0xd4>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009508:	d10c      	bne.n	8009524 <HAL_RCC_OscConfig+0xbc>
 800950a:	4b68      	ldr	r3, [pc, #416]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a67      	ldr	r2, [pc, #412]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	4b65      	ldr	r3, [pc, #404]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a64      	ldr	r2, [pc, #400]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800951c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	e00b      	b.n	800953c <HAL_RCC_OscConfig+0xd4>
 8009524:	4b61      	ldr	r3, [pc, #388]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a60      	ldr	r2, [pc, #384]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800952a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	4b5e      	ldr	r3, [pc, #376]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a5d      	ldr	r2, [pc, #372]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800953a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d013      	beq.n	800956c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009544:	f7fa f88c 	bl	8003660 <HAL_GetTick>
 8009548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800954a:	e008      	b.n	800955e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800954c:	f7fa f888 	bl	8003660 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b64      	cmp	r3, #100	; 0x64
 8009558:	d901      	bls.n	800955e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e356      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800955e:	4b53      	ldr	r3, [pc, #332]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0f0      	beq.n	800954c <HAL_RCC_OscConfig+0xe4>
 800956a:	e014      	b.n	8009596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7fa f878 	bl	8003660 <HAL_GetTick>
 8009570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009574:	f7fa f874 	bl	8003660 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b64      	cmp	r3, #100	; 0x64
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e342      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009586:	4b49      	ldr	r3, [pc, #292]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f0      	bne.n	8009574 <HAL_RCC_OscConfig+0x10c>
 8009592:	e000      	b.n	8009596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 808c 	beq.w	80096bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095a4:	4b41      	ldr	r3, [pc, #260]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095ae:	4b3f      	ldr	r3, [pc, #252]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80095b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <HAL_RCC_OscConfig+0x162>
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	2b18      	cmp	r3, #24
 80095be:	d137      	bne.n	8009630 <HAL_RCC_OscConfig+0x1c8>
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d132      	bne.n	8009630 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095ca:	4b38      	ldr	r3, [pc, #224]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <HAL_RCC_OscConfig+0x17a>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e314      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095e2:	4b32      	ldr	r3, [pc, #200]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f023 0219 	bic.w	r2, r3, #25
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	492f      	ldr	r1, [pc, #188]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f4:	f7fa f834 	bl	8003660 <HAL_GetTick>
 80095f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095fa:	e008      	b.n	800960e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095fc:	f7fa f830 	bl	8003660 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	2b02      	cmp	r3, #2
 8009608:	d901      	bls.n	800960e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e2fe      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800960e:	4b27      	ldr	r3, [pc, #156]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0f0      	beq.n	80095fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800961a:	4b24      	ldr	r3, [pc, #144]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	061b      	lsls	r3, r3, #24
 8009628:	4920      	ldr	r1, [pc, #128]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800962a:	4313      	orrs	r3, r2
 800962c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800962e:	e045      	b.n	80096bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d026      	beq.n	8009686 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009638:	4b1c      	ldr	r3, [pc, #112]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f023 0219 	bic.w	r2, r3, #25
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	4919      	ldr	r1, [pc, #100]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009646:	4313      	orrs	r3, r2
 8009648:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800964a:	f7fa f809 	bl	8003660 <HAL_GetTick>
 800964e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009650:	e008      	b.n	8009664 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009652:	f7fa f805 	bl	8003660 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b02      	cmp	r3, #2
 800965e:	d901      	bls.n	8009664 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e2d3      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009664:	4b11      	ldr	r3, [pc, #68]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0304 	and.w	r3, r3, #4
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0f0      	beq.n	8009652 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	061b      	lsls	r3, r3, #24
 800967e:	490b      	ldr	r1, [pc, #44]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009680:	4313      	orrs	r3, r2
 8009682:	604b      	str	r3, [r1, #4]
 8009684:	e01a      	b.n	80096bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009686:	4b09      	ldr	r3, [pc, #36]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a08      	ldr	r2, [pc, #32]	; (80096ac <HAL_RCC_OscConfig+0x244>)
 800968c:	f023 0301 	bic.w	r3, r3, #1
 8009690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009692:	f7f9 ffe5 	bl	8003660 <HAL_GetTick>
 8009696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009698:	e00a      	b.n	80096b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800969a:	f7f9 ffe1 	bl	8003660 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d903      	bls.n	80096b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e2af      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
 80096ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80096b0:	4b96      	ldr	r3, [pc, #600]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1ee      	bne.n	800969a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d06a      	beq.n	800979e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096c8:	4b90      	ldr	r3, [pc, #576]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096d2:	4b8e      	ldr	r3, [pc, #568]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b08      	cmp	r3, #8
 80096dc:	d007      	beq.n	80096ee <HAL_RCC_OscConfig+0x286>
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b18      	cmp	r3, #24
 80096e2:	d11b      	bne.n	800971c <HAL_RCC_OscConfig+0x2b4>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d116      	bne.n	800971c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096ee:	4b87      	ldr	r3, [pc, #540]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <HAL_RCC_OscConfig+0x29e>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	2b80      	cmp	r3, #128	; 0x80
 8009700:	d001      	beq.n	8009706 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e282      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009706:	4b81      	ldr	r3, [pc, #516]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	061b      	lsls	r3, r3, #24
 8009714:	497d      	ldr	r1, [pc, #500]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009716:	4313      	orrs	r3, r2
 8009718:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800971a:	e040      	b.n	800979e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d023      	beq.n	800976c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009724:	4b79      	ldr	r3, [pc, #484]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a78      	ldr	r2, [pc, #480]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 800972a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009730:	f7f9 ff96 	bl	8003660 <HAL_GetTick>
 8009734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009738:	f7f9 ff92 	bl	8003660 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e260      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800974a:	4b70      	ldr	r3, [pc, #448]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0f0      	beq.n	8009738 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009756:	4b6d      	ldr	r3, [pc, #436]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	061b      	lsls	r3, r3, #24
 8009764:	4969      	ldr	r1, [pc, #420]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009766:	4313      	orrs	r3, r2
 8009768:	60cb      	str	r3, [r1, #12]
 800976a:	e018      	b.n	800979e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800976c:	4b67      	ldr	r3, [pc, #412]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a66      	ldr	r2, [pc, #408]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009778:	f7f9 ff72 	bl	8003660 <HAL_GetTick>
 800977c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800977e:	e008      	b.n	8009792 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009780:	f7f9 ff6e 	bl	8003660 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b02      	cmp	r3, #2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e23c      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009792:	4b5e      	ldr	r3, [pc, #376]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f0      	bne.n	8009780 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d036      	beq.n	8009818 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d019      	beq.n	80097e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097b2:	4b56      	ldr	r3, [pc, #344]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80097b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b6:	4a55      	ldr	r2, [pc, #340]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80097b8:	f043 0301 	orr.w	r3, r3, #1
 80097bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097be:	f7f9 ff4f 	bl	8003660 <HAL_GetTick>
 80097c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097c4:	e008      	b.n	80097d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097c6:	f7f9 ff4b 	bl	8003660 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e219      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097d8:	4b4c      	ldr	r3, [pc, #304]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80097da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <HAL_RCC_OscConfig+0x35e>
 80097e4:	e018      	b.n	8009818 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097e6:	4b49      	ldr	r3, [pc, #292]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80097e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ea:	4a48      	ldr	r2, [pc, #288]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80097ec:	f023 0301 	bic.w	r3, r3, #1
 80097f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097f2:	f7f9 ff35 	bl	8003660 <HAL_GetTick>
 80097f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097f8:	e008      	b.n	800980c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097fa:	f7f9 ff31 	bl	8003660 <HAL_GetTick>
 80097fe:	4602      	mov	r2, r0
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	2b02      	cmp	r3, #2
 8009806:	d901      	bls.n	800980c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e1ff      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800980c:	4b3f      	ldr	r3, [pc, #252]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 800980e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1f0      	bne.n	80097fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d036      	beq.n	8009892 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d019      	beq.n	8009860 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800982c:	4b37      	ldr	r3, [pc, #220]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a36      	ldr	r2, [pc, #216]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009838:	f7f9 ff12 	bl	8003660 <HAL_GetTick>
 800983c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009840:	f7f9 ff0e 	bl	8003660 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b02      	cmp	r3, #2
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e1dc      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009852:	4b2e      	ldr	r3, [pc, #184]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0f0      	beq.n	8009840 <HAL_RCC_OscConfig+0x3d8>
 800985e:	e018      	b.n	8009892 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009860:	4b2a      	ldr	r3, [pc, #168]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a29      	ldr	r2, [pc, #164]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800986a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800986c:	f7f9 fef8 	bl	8003660 <HAL_GetTick>
 8009870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009874:	f7f9 fef4 	bl	8003660 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b02      	cmp	r3, #2
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e1c2      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009886:	4b21      	ldr	r3, [pc, #132]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f0      	bne.n	8009874 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 8086 	beq.w	80099ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80098a0:	4b1b      	ldr	r3, [pc, #108]	; (8009910 <HAL_RCC_OscConfig+0x4a8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a1a      	ldr	r2, [pc, #104]	; (8009910 <HAL_RCC_OscConfig+0x4a8>)
 80098a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098ac:	f7f9 fed8 	bl	8003660 <HAL_GetTick>
 80098b0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098b2:	e008      	b.n	80098c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098b4:	f7f9 fed4 	bl	8003660 <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	2b64      	cmp	r3, #100	; 0x64
 80098c0:	d901      	bls.n	80098c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e1a2      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098c6:	4b12      	ldr	r3, [pc, #72]	; (8009910 <HAL_RCC_OscConfig+0x4a8>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0f0      	beq.n	80098b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d106      	bne.n	80098e8 <HAL_RCC_OscConfig+0x480>
 80098da:	4b0c      	ldr	r3, [pc, #48]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80098dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098de:	4a0b      	ldr	r2, [pc, #44]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80098e0:	f043 0301 	orr.w	r3, r3, #1
 80098e4:	6713      	str	r3, [r2, #112]	; 0x70
 80098e6:	e032      	b.n	800994e <HAL_RCC_OscConfig+0x4e6>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d111      	bne.n	8009914 <HAL_RCC_OscConfig+0x4ac>
 80098f0:	4b06      	ldr	r3, [pc, #24]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80098f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f4:	4a05      	ldr	r2, [pc, #20]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80098f6:	f023 0301 	bic.w	r3, r3, #1
 80098fa:	6713      	str	r3, [r2, #112]	; 0x70
 80098fc:	4b03      	ldr	r3, [pc, #12]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 80098fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009900:	4a02      	ldr	r2, [pc, #8]	; (800990c <HAL_RCC_OscConfig+0x4a4>)
 8009902:	f023 0304 	bic.w	r3, r3, #4
 8009906:	6713      	str	r3, [r2, #112]	; 0x70
 8009908:	e021      	b.n	800994e <HAL_RCC_OscConfig+0x4e6>
 800990a:	bf00      	nop
 800990c:	58024400 	.word	0x58024400
 8009910:	58024800 	.word	0x58024800
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	2b05      	cmp	r3, #5
 800991a:	d10c      	bne.n	8009936 <HAL_RCC_OscConfig+0x4ce>
 800991c:	4b83      	ldr	r3, [pc, #524]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 800991e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009920:	4a82      	ldr	r2, [pc, #520]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009922:	f043 0304 	orr.w	r3, r3, #4
 8009926:	6713      	str	r3, [r2, #112]	; 0x70
 8009928:	4b80      	ldr	r3, [pc, #512]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 800992a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992c:	4a7f      	ldr	r2, [pc, #508]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	6713      	str	r3, [r2, #112]	; 0x70
 8009934:	e00b      	b.n	800994e <HAL_RCC_OscConfig+0x4e6>
 8009936:	4b7d      	ldr	r3, [pc, #500]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993a:	4a7c      	ldr	r2, [pc, #496]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 800993c:	f023 0301 	bic.w	r3, r3, #1
 8009940:	6713      	str	r3, [r2, #112]	; 0x70
 8009942:	4b7a      	ldr	r3, [pc, #488]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009946:	4a79      	ldr	r2, [pc, #484]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009948:	f023 0304 	bic.w	r3, r3, #4
 800994c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d015      	beq.n	8009982 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009956:	f7f9 fe83 	bl	8003660 <HAL_GetTick>
 800995a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800995c:	e00a      	b.n	8009974 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800995e:	f7f9 fe7f 	bl	8003660 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	f241 3288 	movw	r2, #5000	; 0x1388
 800996c:	4293      	cmp	r3, r2
 800996e:	d901      	bls.n	8009974 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e14b      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009974:	4b6d      	ldr	r3, [pc, #436]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009978:	f003 0302 	and.w	r3, r3, #2
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0ee      	beq.n	800995e <HAL_RCC_OscConfig+0x4f6>
 8009980:	e014      	b.n	80099ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009982:	f7f9 fe6d 	bl	8003660 <HAL_GetTick>
 8009986:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009988:	e00a      	b.n	80099a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800998a:	f7f9 fe69 	bl	8003660 <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	f241 3288 	movw	r2, #5000	; 0x1388
 8009998:	4293      	cmp	r3, r2
 800999a:	d901      	bls.n	80099a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e135      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099a0:	4b62      	ldr	r3, [pc, #392]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 80099a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a4:	f003 0302 	and.w	r3, r3, #2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1ee      	bne.n	800998a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 812a 	beq.w	8009c0a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80099b6:	4b5d      	ldr	r3, [pc, #372]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099be:	2b18      	cmp	r3, #24
 80099c0:	f000 80ba 	beq.w	8009b38 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	f040 8095 	bne.w	8009af8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099ce:	4b57      	ldr	r3, [pc, #348]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a56      	ldr	r2, [pc, #344]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 80099d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099da:	f7f9 fe41 	bl	8003660 <HAL_GetTick>
 80099de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099e0:	e008      	b.n	80099f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099e2:	f7f9 fe3d 	bl	8003660 <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d901      	bls.n	80099f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e10b      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099f4:	4b4d      	ldr	r3, [pc, #308]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1f0      	bne.n	80099e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a00:	4b4a      	ldr	r3, [pc, #296]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a04:	4b4a      	ldr	r3, [pc, #296]	; (8009b30 <HAL_RCC_OscConfig+0x6c8>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a10:	0112      	lsls	r2, r2, #4
 8009a12:	430a      	orrs	r2, r1
 8009a14:	4945      	ldr	r1, [pc, #276]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	628b      	str	r3, [r1, #40]	; 0x28
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	025b      	lsls	r3, r3, #9
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a34:	3b01      	subs	r3, #1
 8009a36:	041b      	lsls	r3, r3, #16
 8009a38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a42:	3b01      	subs	r3, #1
 8009a44:	061b      	lsls	r3, r3, #24
 8009a46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a4a:	4938      	ldr	r1, [pc, #224]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009a50:	4b36      	ldr	r3, [pc, #216]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a54:	4a35      	ldr	r2, [pc, #212]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a56:	f023 0301 	bic.w	r3, r3, #1
 8009a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a5c:	4b33      	ldr	r3, [pc, #204]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a60:	4b34      	ldr	r3, [pc, #208]	; (8009b34 <HAL_RCC_OscConfig+0x6cc>)
 8009a62:	4013      	ands	r3, r2
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a68:	00d2      	lsls	r2, r2, #3
 8009a6a:	4930      	ldr	r1, [pc, #192]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009a70:	4b2e      	ldr	r3, [pc, #184]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	f023 020c 	bic.w	r2, r3, #12
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	492b      	ldr	r1, [pc, #172]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009a82:	4b2a      	ldr	r3, [pc, #168]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a86:	f023 0202 	bic.w	r2, r3, #2
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8e:	4927      	ldr	r1, [pc, #156]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a94:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	4a24      	ldr	r2, [pc, #144]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa0:	4b22      	ldr	r3, [pc, #136]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	4a21      	ldr	r2, [pc, #132]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009aac:	4b1f      	ldr	r3, [pc, #124]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab0:	4a1e      	ldr	r2, [pc, #120]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ab8:	4b1c      	ldr	r3, [pc, #112]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	4a1b      	ldr	r2, [pc, #108]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009abe:	f043 0301 	orr.w	r3, r3, #1
 8009ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ac4:	4b19      	ldr	r3, [pc, #100]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a18      	ldr	r2, [pc, #96]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad0:	f7f9 fdc6 	bl	8003660 <HAL_GetTick>
 8009ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ad6:	e008      	b.n	8009aea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ad8:	f7f9 fdc2 	bl	8003660 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d901      	bls.n	8009aea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e090      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009aea:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0f0      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x670>
 8009af6:	e088      	b.n	8009c0a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009af8:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a0b      	ldr	r2, [pc, #44]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b04:	f7f9 fdac 	bl	8003660 <HAL_GetTick>
 8009b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b0c:	f7f9 fda8 	bl	8003660 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e076      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b1e:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <HAL_RCC_OscConfig+0x6c4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1f0      	bne.n	8009b0c <HAL_RCC_OscConfig+0x6a4>
 8009b2a:	e06e      	b.n	8009c0a <HAL_RCC_OscConfig+0x7a2>
 8009b2c:	58024400 	.word	0x58024400
 8009b30:	fffffc0c 	.word	0xfffffc0c
 8009b34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b38:	4b36      	ldr	r3, [pc, #216]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b3e:	4b35      	ldr	r3, [pc, #212]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d031      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f003 0203 	and.w	r2, r3, #3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d12a      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	091b      	lsrs	r3, r3, #4
 8009b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d122      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d11a      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	0a5b      	lsrs	r3, r3, #9
 8009b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d111      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	0c1b      	lsrs	r3, r3, #16
 8009b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d108      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	0e1b      	lsrs	r3, r3, #24
 8009ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009baa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d001      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e02b      	b.n	8009c0c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009bb4:	4b17      	ldr	r3, [pc, #92]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb8:	08db      	lsrs	r3, r3, #3
 8009bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d01f      	beq.n	8009c0a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009bca:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bce:	4a11      	ldr	r2, [pc, #68]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009bd0:	f023 0301 	bic.w	r3, r3, #1
 8009bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009bd6:	f7f9 fd43 	bl	8003660 <HAL_GetTick>
 8009bda:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009bdc:	bf00      	nop
 8009bde:	f7f9 fd3f 	bl	8003660 <HAL_GetTick>
 8009be2:	4602      	mov	r2, r0
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d0f9      	beq.n	8009bde <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bea:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <HAL_RCC_OscConfig+0x7b0>)
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009bf6:	00d2      	lsls	r2, r2, #3
 8009bf8:	4906      	ldr	r1, [pc, #24]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009bfe:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	4a04      	ldr	r2, [pc, #16]	; (8009c14 <HAL_RCC_OscConfig+0x7ac>)
 8009c04:	f043 0301 	orr.w	r3, r3, #1
 8009c08:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3730      	adds	r7, #48	; 0x30
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	58024400 	.word	0x58024400
 8009c18:	ffff0007 	.word	0xffff0007

08009c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e19c      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c30:	4b8a      	ldr	r3, [pc, #552]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d910      	bls.n	8009c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c3e:	4b87      	ldr	r3, [pc, #540]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f023 020f 	bic.w	r2, r3, #15
 8009c46:	4985      	ldr	r1, [pc, #532]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c4e:	4b83      	ldr	r3, [pc, #524]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d001      	beq.n	8009c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e184      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0304 	and.w	r3, r3, #4
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d010      	beq.n	8009c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	691a      	ldr	r2, [r3, #16]
 8009c70:	4b7b      	ldr	r3, [pc, #492]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d908      	bls.n	8009c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c7c:	4b78      	ldr	r3, [pc, #480]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	4975      	ldr	r1, [pc, #468]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d010      	beq.n	8009cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	695a      	ldr	r2, [r3, #20]
 8009c9e:	4b70      	ldr	r3, [pc, #448]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d908      	bls.n	8009cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009caa:	4b6d      	ldr	r3, [pc, #436]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	496a      	ldr	r1, [pc, #424]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d010      	beq.n	8009cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	4b64      	ldr	r3, [pc, #400]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d908      	bls.n	8009cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009cd8:	4b61      	ldr	r3, [pc, #388]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	495e      	ldr	r1, [pc, #376]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d010      	beq.n	8009d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69da      	ldr	r2, [r3, #28]
 8009cfa:	4b59      	ldr	r3, [pc, #356]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d908      	bls.n	8009d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d06:	4b56      	ldr	r3, [pc, #344]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	4953      	ldr	r1, [pc, #332]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d010      	beq.n	8009d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68da      	ldr	r2, [r3, #12]
 8009d28:	4b4d      	ldr	r3, [pc, #308]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d908      	bls.n	8009d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d34:	4b4a      	ldr	r3, [pc, #296]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	f023 020f 	bic.w	r2, r3, #15
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	4947      	ldr	r1, [pc, #284]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d055      	beq.n	8009dfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009d52:	4b43      	ldr	r3, [pc, #268]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	4940      	ldr	r1, [pc, #256]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d107      	bne.n	8009d7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d6c:	4b3c      	ldr	r3, [pc, #240]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d121      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e0f6      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d107      	bne.n	8009d94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d84:	4b36      	ldr	r3, [pc, #216]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d115      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e0ea      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d107      	bne.n	8009dac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d9c:	4b30      	ldr	r3, [pc, #192]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e0de      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dac:	4b2c      	ldr	r3, [pc, #176]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e0d6      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dbc:	4b28      	ldr	r3, [pc, #160]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f023 0207 	bic.w	r2, r3, #7
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4925      	ldr	r1, [pc, #148]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dce:	f7f9 fc47 	bl	8003660 <HAL_GetTick>
 8009dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dd4:	e00a      	b.n	8009dec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dd6:	f7f9 fc43 	bl	8003660 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d901      	bls.n	8009dec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e0be      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	00db      	lsls	r3, r3, #3
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d1eb      	bne.n	8009dd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d010      	beq.n	8009e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f003 030f 	and.w	r3, r3, #15
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d208      	bcs.n	8009e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e1a:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f023 020f 	bic.w	r2, r3, #15
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	490e      	ldr	r1, [pc, #56]	; (8009e60 <HAL_RCC_ClockConfig+0x244>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e2c:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 030f 	and.w	r3, r3, #15
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d214      	bcs.n	8009e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e3a:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f023 020f 	bic.w	r2, r3, #15
 8009e42:	4906      	ldr	r1, [pc, #24]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e4a:	4b04      	ldr	r3, [pc, #16]	; (8009e5c <HAL_RCC_ClockConfig+0x240>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d005      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e086      	b.n	8009f6a <HAL_RCC_ClockConfig+0x34e>
 8009e5c:	52002000 	.word	0x52002000
 8009e60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d010      	beq.n	8009e92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	4b3f      	ldr	r3, [pc, #252]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d208      	bcs.n	8009e92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e80:	4b3c      	ldr	r3, [pc, #240]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	4939      	ldr	r1, [pc, #228]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0308 	and.w	r3, r3, #8
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d010      	beq.n	8009ec0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	4b34      	ldr	r3, [pc, #208]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d208      	bcs.n	8009ec0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009eae:	4b31      	ldr	r3, [pc, #196]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	492e      	ldr	r1, [pc, #184]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d010      	beq.n	8009eee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	699a      	ldr	r2, [r3, #24]
 8009ed0:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d208      	bcs.n	8009eee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009edc:	4b25      	ldr	r3, [pc, #148]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	4922      	ldr	r1, [pc, #136]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0320 	and.w	r3, r3, #32
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d010      	beq.n	8009f1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	69da      	ldr	r2, [r3, #28]
 8009efe:	4b1d      	ldr	r3, [pc, #116]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d208      	bcs.n	8009f1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f0a:	4b1a      	ldr	r3, [pc, #104]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	4917      	ldr	r1, [pc, #92]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f1c:	f000 f89e 	bl	800a05c <HAL_RCC_GetSysClockFreq>
 8009f20:	4602      	mov	r2, r0
 8009f22:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	0a1b      	lsrs	r3, r3, #8
 8009f28:	f003 030f 	and.w	r3, r3, #15
 8009f2c:	4912      	ldr	r1, [pc, #72]	; (8009f78 <HAL_RCC_ClockConfig+0x35c>)
 8009f2e:	5ccb      	ldrb	r3, [r1, r3]
 8009f30:	f003 031f 	and.w	r3, r3, #31
 8009f34:	fa22 f303 	lsr.w	r3, r2, r3
 8009f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f3a:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <HAL_RCC_ClockConfig+0x358>)
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	4a0d      	ldr	r2, [pc, #52]	; (8009f78 <HAL_RCC_ClockConfig+0x35c>)
 8009f44:	5cd3      	ldrb	r3, [r2, r3]
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <HAL_RCC_ClockConfig+0x360>)
 8009f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f54:	4a0a      	ldr	r2, [pc, #40]	; (8009f80 <HAL_RCC_ClockConfig+0x364>)
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <HAL_RCC_ClockConfig+0x368>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f9 fb34 	bl	80035cc <HAL_InitTick>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	58024400 	.word	0x58024400
 8009f78:	0801dca4 	.word	0x0801dca4
 8009f7c:	24000004 	.word	0x24000004
 8009f80:	24000000 	.word	0x24000000
 8009f84:	24000008 	.word	0x24000008

08009f88 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d12a      	bne.n	8009ff0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009f9a:	4b2d      	ldr	r3, [pc, #180]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 8009f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fa0:	4a2b      	ldr	r2, [pc, #172]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 8009fa2:	f043 0301 	orr.w	r3, r3, #1
 8009fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009faa:	4b29      	ldr	r3, [pc, #164]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 8009fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	61bb      	str	r3, [r7, #24]
 8009fb6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009fce:	f107 031c 	add.w	r3, r7, #28
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	481f      	ldr	r0, [pc, #124]	; (800a054 <HAL_RCC_MCOConfig+0xcc>)
 8009fd6:	f7fd fc41 	bl	800785c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009fda:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	4919      	ldr	r1, [pc, #100]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009fee:	e02a      	b.n	800a046 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009ff0:	4b17      	ldr	r3, [pc, #92]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 8009ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ff6:	4a16      	ldr	r2, [pc, #88]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 8009ff8:	f043 0304 	orr.w	r3, r3, #4
 8009ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a000:	4b13      	ldr	r3, [pc, #76]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 800a002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	617b      	str	r3, [r7, #20]
 800a00c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a00e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a014:	2302      	movs	r3, #2
 800a016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a018:	2303      	movs	r3, #3
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a01c:	2300      	movs	r3, #0
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a020:	2300      	movs	r3, #0
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a024:	f107 031c 	add.w	r3, r7, #28
 800a028:	4619      	mov	r1, r3
 800a02a:	480b      	ldr	r0, [pc, #44]	; (800a058 <HAL_RCC_MCOConfig+0xd0>)
 800a02c:	f7fd fc16 	bl	800785c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	01d9      	lsls	r1, r3, #7
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	430b      	orrs	r3, r1
 800a040:	4903      	ldr	r1, [pc, #12]	; (800a050 <HAL_RCC_MCOConfig+0xc8>)
 800a042:	4313      	orrs	r3, r2
 800a044:	610b      	str	r3, [r1, #16]
}
 800a046:	bf00      	nop
 800a048:	3730      	adds	r7, #48	; 0x30
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	58024400 	.word	0x58024400
 800a054:	58020000 	.word	0x58020000
 800a058:	58020800 	.word	0x58020800

0800a05c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b089      	sub	sp, #36	; 0x24
 800a060:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a062:	4bb3      	ldr	r3, [pc, #716]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a06a:	2b18      	cmp	r3, #24
 800a06c:	f200 8155 	bhi.w	800a31a <HAL_RCC_GetSysClockFreq+0x2be>
 800a070:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a0dd 	.word	0x0800a0dd
 800a07c:	0800a31b 	.word	0x0800a31b
 800a080:	0800a31b 	.word	0x0800a31b
 800a084:	0800a31b 	.word	0x0800a31b
 800a088:	0800a31b 	.word	0x0800a31b
 800a08c:	0800a31b 	.word	0x0800a31b
 800a090:	0800a31b 	.word	0x0800a31b
 800a094:	0800a31b 	.word	0x0800a31b
 800a098:	0800a103 	.word	0x0800a103
 800a09c:	0800a31b 	.word	0x0800a31b
 800a0a0:	0800a31b 	.word	0x0800a31b
 800a0a4:	0800a31b 	.word	0x0800a31b
 800a0a8:	0800a31b 	.word	0x0800a31b
 800a0ac:	0800a31b 	.word	0x0800a31b
 800a0b0:	0800a31b 	.word	0x0800a31b
 800a0b4:	0800a31b 	.word	0x0800a31b
 800a0b8:	0800a109 	.word	0x0800a109
 800a0bc:	0800a31b 	.word	0x0800a31b
 800a0c0:	0800a31b 	.word	0x0800a31b
 800a0c4:	0800a31b 	.word	0x0800a31b
 800a0c8:	0800a31b 	.word	0x0800a31b
 800a0cc:	0800a31b 	.word	0x0800a31b
 800a0d0:	0800a31b 	.word	0x0800a31b
 800a0d4:	0800a31b 	.word	0x0800a31b
 800a0d8:	0800a10f 	.word	0x0800a10f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0dc:	4b94      	ldr	r3, [pc, #592]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 0320 	and.w	r3, r3, #32
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d009      	beq.n	800a0fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0e8:	4b91      	ldr	r3, [pc, #580]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	08db      	lsrs	r3, r3, #3
 800a0ee:	f003 0303 	and.w	r3, r3, #3
 800a0f2:	4a90      	ldr	r2, [pc, #576]	; (800a334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a0fa:	e111      	b.n	800a320 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a0fc:	4b8d      	ldr	r3, [pc, #564]	; (800a334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0fe:	61bb      	str	r3, [r7, #24]
      break;
 800a100:	e10e      	b.n	800a320 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a102:	4b8d      	ldr	r3, [pc, #564]	; (800a338 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a104:	61bb      	str	r3, [r7, #24]
      break;
 800a106:	e10b      	b.n	800a320 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a108:	4b8c      	ldr	r3, [pc, #560]	; (800a33c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a10a:	61bb      	str	r3, [r7, #24]
      break;
 800a10c:	e108      	b.n	800a320 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a10e:	4b88      	ldr	r3, [pc, #544]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	f003 0303 	and.w	r3, r3, #3
 800a116:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a118:	4b85      	ldr	r3, [pc, #532]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11c:	091b      	lsrs	r3, r3, #4
 800a11e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a122:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a124:	4b82      	ldr	r3, [pc, #520]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a12e:	4b80      	ldr	r3, [pc, #512]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a132:	08db      	lsrs	r3, r3, #3
 800a134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	fb02 f303 	mul.w	r3, r2, r3
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 80e1 	beq.w	800a314 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2b02      	cmp	r3, #2
 800a156:	f000 8083 	beq.w	800a260 <HAL_RCC_GetSysClockFreq+0x204>
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	f200 80a1 	bhi.w	800a2a4 <HAL_RCC_GetSysClockFreq+0x248>
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <HAL_RCC_GetSysClockFreq+0x114>
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d056      	beq.n	800a21c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a16e:	e099      	b.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a170:	4b6f      	ldr	r3, [pc, #444]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0320 	and.w	r3, r3, #32
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d02d      	beq.n	800a1d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a17c:	4b6c      	ldr	r3, [pc, #432]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	08db      	lsrs	r3, r3, #3
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	4a6b      	ldr	r2, [pc, #428]	; (800a334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a188:	fa22 f303 	lsr.w	r3, r2, r3
 800a18c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a6:	4b62      	ldr	r3, [pc, #392]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ae:	ee07 3a90 	vmov	s15, r3
 800a1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a340 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a1d6:	e087      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a344 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ea:	4b51      	ldr	r3, [pc, #324]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a340 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a20a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a21a:	e065      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	ee07 3a90 	vmov	s15, r3
 800a222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a226:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a348 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22e:	4b40      	ldr	r3, [pc, #256]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a23e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a242:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a340 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a25a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a25e:	e043      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	ee07 3a90 	vmov	s15, r3
 800a266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a34c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a272:	4b2f      	ldr	r3, [pc, #188]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27a:	ee07 3a90 	vmov	s15, r3
 800a27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a282:	ed97 6a02 	vldr	s12, [r7, #8]
 800a286:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a340 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2a2:	e021      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a348 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2b6:	4b1e      	ldr	r3, [pc, #120]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2be:	ee07 3a90 	vmov	s15, r3
 800a2c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a340 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a2e8:	4b11      	ldr	r3, [pc, #68]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ec:	0a5b      	lsrs	r3, r3, #9
 800a2ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	ee07 3a90 	vmov	s15, r3
 800a2fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a300:	edd7 6a07 	vldr	s13, [r7, #28]
 800a304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a30c:	ee17 3a90 	vmov	r3, s15
 800a310:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a312:	e005      	b.n	800a320 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	61bb      	str	r3, [r7, #24]
      break;
 800a318:	e002      	b.n	800a320 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a31a:	4b07      	ldr	r3, [pc, #28]	; (800a338 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a31c:	61bb      	str	r3, [r7, #24]
      break;
 800a31e:	bf00      	nop
  }

  return sysclockfreq;
 800a320:	69bb      	ldr	r3, [r7, #24]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3724      	adds	r7, #36	; 0x24
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	58024400 	.word	0x58024400
 800a334:	03d09000 	.word	0x03d09000
 800a338:	003d0900 	.word	0x003d0900
 800a33c:	02faf080 	.word	0x02faf080
 800a340:	46000000 	.word	0x46000000
 800a344:	4c742400 	.word	0x4c742400
 800a348:	4a742400 	.word	0x4a742400
 800a34c:	4c3ebc20 	.word	0x4c3ebc20

0800a350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a356:	f7ff fe81 	bl	800a05c <HAL_RCC_GetSysClockFreq>
 800a35a:	4602      	mov	r2, r0
 800a35c:	4b10      	ldr	r3, [pc, #64]	; (800a3a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	0a1b      	lsrs	r3, r3, #8
 800a362:	f003 030f 	and.w	r3, r3, #15
 800a366:	490f      	ldr	r1, [pc, #60]	; (800a3a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a368:	5ccb      	ldrb	r3, [r1, r3]
 800a36a:	f003 031f 	and.w	r3, r3, #31
 800a36e:	fa22 f303 	lsr.w	r3, r2, r3
 800a372:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a374:	4b0a      	ldr	r3, [pc, #40]	; (800a3a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	f003 030f 	and.w	r3, r3, #15
 800a37c:	4a09      	ldr	r2, [pc, #36]	; (800a3a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a37e:	5cd3      	ldrb	r3, [r2, r3]
 800a380:	f003 031f 	and.w	r3, r3, #31
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	fa22 f303 	lsr.w	r3, r2, r3
 800a38a:	4a07      	ldr	r2, [pc, #28]	; (800a3a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a38c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a38e:	4a07      	ldr	r2, [pc, #28]	; (800a3ac <HAL_RCC_GetHCLKFreq+0x5c>)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a394:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a396:	681b      	ldr	r3, [r3, #0]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	58024400 	.word	0x58024400
 800a3a4:	0801dca4 	.word	0x0801dca4
 800a3a8:	24000004 	.word	0x24000004
 800a3ac:	24000000 	.word	0x24000000

0800a3b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a3b4:	f7ff ffcc 	bl	800a350 <HAL_RCC_GetHCLKFreq>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	091b      	lsrs	r3, r3, #4
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	4904      	ldr	r1, [pc, #16]	; (800a3d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a3c6:	5ccb      	ldrb	r3, [r1, r3]
 800a3c8:	f003 031f 	and.w	r3, r3, #31
 800a3cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	0801dca4 	.word	0x0801dca4

0800a3dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a3e0:	f7ff ffb6 	bl	800a350 <HAL_RCC_GetHCLKFreq>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	4b06      	ldr	r3, [pc, #24]	; (800a400 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	f003 0307 	and.w	r3, r3, #7
 800a3f0:	4904      	ldr	r1, [pc, #16]	; (800a404 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a3f2:	5ccb      	ldrb	r3, [r1, r3]
 800a3f4:	f003 031f 	and.w	r3, r3, #31
 800a3f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	58024400 	.word	0x58024400
 800a404:	0801dca4 	.word	0x0801dca4

0800a408 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a40c:	b0c6      	sub	sp, #280	; 0x118
 800a40e:	af00      	add	r7, sp, #0
 800a410:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a414:	2300      	movs	r3, #0
 800a416:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a41a:	2300      	movs	r3, #0
 800a41c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a42c:	2500      	movs	r5, #0
 800a42e:	ea54 0305 	orrs.w	r3, r4, r5
 800a432:	d049      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a43a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a43e:	d02f      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a444:	d828      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a44a:	d01a      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a44c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a450:	d822      	bhi.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a45a:	d007      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a45c:	e01c      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a45e:	4bab      	ldr	r3, [pc, #684]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a462:	4aaa      	ldr	r2, [pc, #680]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a468:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a46a:	e01a      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a470:	3308      	adds	r3, #8
 800a472:	2102      	movs	r1, #2
 800a474:	4618      	mov	r0, r3
 800a476:	f002 fa49 	bl	800c90c <RCCEx_PLL2_Config>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a480:	e00f      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a486:	3328      	adds	r3, #40	; 0x28
 800a488:	2102      	movs	r1, #2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f002 faf0 	bl	800ca70 <RCCEx_PLL3_Config>
 800a490:	4603      	mov	r3, r0
 800a492:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a496:	e004      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a49e:	e000      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a4aa:	4b98      	ldr	r3, [pc, #608]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4b8:	4a94      	ldr	r2, [pc, #592]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	6513      	str	r3, [r2, #80]	; 0x50
 800a4be:	e003      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a4d4:	f04f 0900 	mov.w	r9, #0
 800a4d8:	ea58 0309 	orrs.w	r3, r8, r9
 800a4dc:	d047      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d82a      	bhi.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a4e8:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a505 	.word	0x0800a505
 800a4f4:	0800a513 	.word	0x0800a513
 800a4f8:	0800a529 	.word	0x0800a529
 800a4fc:	0800a547 	.word	0x0800a547
 800a500:	0800a547 	.word	0x0800a547
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a504:	4b81      	ldr	r3, [pc, #516]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	4a80      	ldr	r2, [pc, #512]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a50a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a50e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a510:	e01a      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a516:	3308      	adds	r3, #8
 800a518:	2100      	movs	r1, #0
 800a51a:	4618      	mov	r0, r3
 800a51c:	f002 f9f6 	bl	800c90c <RCCEx_PLL2_Config>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a526:	e00f      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52c:	3328      	adds	r3, #40	; 0x28
 800a52e:	2100      	movs	r1, #0
 800a530:	4618      	mov	r0, r3
 800a532:	f002 fa9d 	bl	800ca70 <RCCEx_PLL3_Config>
 800a536:	4603      	mov	r3, r0
 800a538:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a53c:	e004      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a544:	e000      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a546:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a550:	4b6e      	ldr	r3, [pc, #440]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a554:	f023 0107 	bic.w	r1, r3, #7
 800a558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55e:	4a6b      	ldr	r2, [pc, #428]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a560:	430b      	orrs	r3, r1
 800a562:	6513      	str	r3, [r2, #80]	; 0x50
 800a564:	e003      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a566:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a56a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a57a:	f04f 0b00 	mov.w	fp, #0
 800a57e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a582:	d05b      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a588:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a58c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a590:	d03b      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a592:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a596:	d834      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a59c:	d037      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a59e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5a2:	d82e      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5a8:	d033      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a5aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5ae:	d828      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5b4:	d01a      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a5b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5ba:	d822      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a5c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5c4:	d007      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a5c6:	e01c      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c8:	4b50      	ldr	r3, [pc, #320]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	4a4f      	ldr	r2, [pc, #316]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5d4:	e01e      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5da:	3308      	adds	r3, #8
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f002 f994 	bl	800c90c <RCCEx_PLL2_Config>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a5ea:	e013      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f0:	3328      	adds	r3, #40	; 0x28
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f002 fa3b 	bl	800ca70 <RCCEx_PLL3_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a600:	e008      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a608:	e004      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a60a:	bf00      	nop
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a612:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a614:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10b      	bne.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a61c:	4b3b      	ldr	r3, [pc, #236]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a620:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a62c:	4a37      	ldr	r2, [pc, #220]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a62e:	430b      	orrs	r3, r1
 800a630:	6593      	str	r3, [r2, #88]	; 0x58
 800a632:	e003      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a64c:	2300      	movs	r3, #0
 800a64e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a652:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a656:	460b      	mov	r3, r1
 800a658:	4313      	orrs	r3, r2
 800a65a:	d05d      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a664:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a668:	d03b      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a66a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a66e:	d834      	bhi.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a674:	d037      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a67a:	d82e      	bhi.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a67c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a680:	d033      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a686:	d828      	bhi.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a68c:	d01a      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a68e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a692:	d822      	bhi.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d003      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a69c:	d007      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a69e:	e01c      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a0:	4b1a      	ldr	r3, [pc, #104]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a4:	4a19      	ldr	r2, [pc, #100]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6ac:	e01e      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f002 f928 	bl	800c90c <RCCEx_PLL2_Config>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a6c2:	e013      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c8:	3328      	adds	r3, #40	; 0x28
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f002 f9cf 	bl	800ca70 <RCCEx_PLL3_Config>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6d8:	e008      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6e0:	e004      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a6e2:	bf00      	nop
 800a6e4:	e002      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a6e6:	bf00      	nop
 800a6e8:	e000      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a6ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10d      	bne.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a6f4:	4b05      	ldr	r3, [pc, #20]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a704:	4a01      	ldr	r2, [pc, #4]	; (800a70c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a706:	430b      	orrs	r3, r1
 800a708:	6593      	str	r3, [r2, #88]	; 0x58
 800a70a:	e005      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a70c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a714:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a724:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a728:	2300      	movs	r3, #0
 800a72a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a72e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a732:	460b      	mov	r3, r1
 800a734:	4313      	orrs	r3, r2
 800a736:	d03a      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73e:	2b30      	cmp	r3, #48	; 0x30
 800a740:	d01f      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a742:	2b30      	cmp	r3, #48	; 0x30
 800a744:	d819      	bhi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a746:	2b20      	cmp	r3, #32
 800a748:	d00c      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a74a:	2b20      	cmp	r3, #32
 800a74c:	d815      	bhi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d019      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a752:	2b10      	cmp	r3, #16
 800a754:	d111      	bne.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a756:	4baa      	ldr	r3, [pc, #680]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75a:	4aa9      	ldr	r2, [pc, #676]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a75c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a762:	e011      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a768:	3308      	adds	r3, #8
 800a76a:	2102      	movs	r1, #2
 800a76c:	4618      	mov	r0, r3
 800a76e:	f002 f8cd 	bl	800c90c <RCCEx_PLL2_Config>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a778:	e006      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a780:	e002      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a782:	bf00      	nop
 800a784:	e000      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a786:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a790:	4b9b      	ldr	r3, [pc, #620]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a794:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a79e:	4a98      	ldr	r2, [pc, #608]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7a4:	e003      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a7ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	d051      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7d8:	d035      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a7da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7de:	d82e      	bhi.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a7e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7e4:	d031      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a7e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7ea:	d828      	bhi.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a7ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7f0:	d01a      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a7f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7f6:	d822      	bhi.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a7fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a800:	d007      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a802:	e01c      	b.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a804:	4b7e      	ldr	r3, [pc, #504]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	4a7d      	ldr	r2, [pc, #500]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a80a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a80e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a810:	e01c      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a816:	3308      	adds	r3, #8
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f002 f876 	bl	800c90c <RCCEx_PLL2_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a826:	e011      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82c:	3328      	adds	r3, #40	; 0x28
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f002 f91d 	bl	800ca70 <RCCEx_PLL3_Config>
 800a836:	4603      	mov	r3, r0
 800a838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a83c:	e006      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a844:	e002      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a846:	bf00      	nop
 800a848:	e000      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a84c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10a      	bne.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a854:	4b6a      	ldr	r3, [pc, #424]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a858:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a862:	4a67      	ldr	r2, [pc, #412]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a864:	430b      	orrs	r3, r1
 800a866:	6513      	str	r3, [r2, #80]	; 0x50
 800a868:	e003      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a86e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a87e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a882:	2300      	movs	r3, #0
 800a884:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a888:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4313      	orrs	r3, r2
 800a890:	d053      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a89c:	d033      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a89e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8a2:	d82c      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8a8:	d02f      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a8aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8ae:	d826      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8b4:	d02b      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a8b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8ba:	d820      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c0:	d012      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c6:	d81a      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d022      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d0:	d115      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	2101      	movs	r1, #1
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f002 f816 	bl	800c90c <RCCEx_PLL2_Config>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8e6:	e015      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ec:	3328      	adds	r3, #40	; 0x28
 800a8ee:	2101      	movs	r1, #1
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f002 f8bd 	bl	800ca70 <RCCEx_PLL3_Config>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a8fc:	e00a      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a904:	e006      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a906:	bf00      	nop
 800a908:	e004      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a90a:	bf00      	nop
 800a90c:	e002      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a90e:	bf00      	nop
 800a910:	e000      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a912:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a91c:	4b38      	ldr	r3, [pc, #224]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a920:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a92a:	4a35      	ldr	r2, [pc, #212]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a92c:	430b      	orrs	r3, r1
 800a92e:	6513      	str	r3, [r2, #80]	; 0x50
 800a930:	e003      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a932:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a936:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a94a:	2300      	movs	r3, #0
 800a94c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a950:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a954:	460b      	mov	r3, r1
 800a956:	4313      	orrs	r3, r2
 800a958:	d058      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a966:	d033      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a96c:	d82c      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a96e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a972:	d02f      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a978:	d826      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a97a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a97e:	d02b      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a984:	d820      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a98a:	d012      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a990:	d81a      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d022      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a99a:	d115      	bne.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f001 ffb1 	bl	800c90c <RCCEx_PLL2_Config>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a9b0:	e015      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b6:	3328      	adds	r3, #40	; 0x28
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f002 f858 	bl	800ca70 <RCCEx_PLL3_Config>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a9c6:	e00a      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9ce:	e006      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9d0:	bf00      	nop
 800a9d2:	e004      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9d4:	bf00      	nop
 800a9d6:	e002      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9d8:	bf00      	nop
 800a9da:	e000      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10e      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a9e6:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a9f6:	4a02      	ldr	r2, [pc, #8]	; (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	6593      	str	r3, [r2, #88]	; 0x58
 800a9fc:	e006      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a9fe:	bf00      	nop
 800aa00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aa0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aa18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aa22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	d037      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aa2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa36:	d00e      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aa38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3c:	d816      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d018      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aa42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa46:	d111      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa48:	4bc4      	ldr	r3, [pc, #784]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4ac3      	ldr	r2, [pc, #780]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa54:	e00f      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5a:	3308      	adds	r3, #8
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 ff54 	bl	800c90c <RCCEx_PLL2_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa6a:	e004      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa72:	e000      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aa74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10a      	bne.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa7e:	4bb7      	ldr	r3, [pc, #732]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8c:	4ab3      	ldr	r2, [pc, #716]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa8e:	430b      	orrs	r3, r1
 800aa90:	6513      	str	r3, [r2, #80]	; 0x50
 800aa92:	e003      	b.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aaa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaac:	2300      	movs	r3, #0
 800aaae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aab2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aab6:	460b      	mov	r3, r1
 800aab8:	4313      	orrs	r3, r2
 800aaba:	d039      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d81c      	bhi.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800ab09 	.word	0x0800ab09
 800aad0:	0800aadd 	.word	0x0800aadd
 800aad4:	0800aaeb 	.word	0x0800aaeb
 800aad8:	0800ab09 	.word	0x0800ab09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aadc:	4b9f      	ldr	r3, [pc, #636]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	4a9e      	ldr	r2, [pc, #632]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aae8:	e00f      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaee:	3308      	adds	r3, #8
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 ff0a 	bl	800c90c <RCCEx_PLL2_Config>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aafe:	e004      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab06:	e000      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ab08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10a      	bne.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ab12:	4b92      	ldr	r3, [pc, #584]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab16:	f023 0103 	bic.w	r1, r3, #3
 800ab1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab20:	4a8e      	ldr	r2, [pc, #568]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab22:	430b      	orrs	r3, r1
 800ab24:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab26:	e003      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ab3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab40:	2300      	movs	r3, #0
 800ab42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	f000 8099 	beq.w	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab52:	4b83      	ldr	r3, [pc, #524]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a82      	ldr	r2, [pc, #520]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab5e:	f7f8 fd7f 	bl	8003660 <HAL_GetTick>
 800ab62:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab66:	e00b      	b.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab68:	f7f8 fd7a 	bl	8003660 <HAL_GetTick>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	2b64      	cmp	r3, #100	; 0x64
 800ab76:	d903      	bls.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab7e:	e005      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab80:	4b77      	ldr	r3, [pc, #476]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0ed      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ab8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d173      	bne.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ab94:	4b71      	ldr	r3, [pc, #452]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aba0:	4053      	eors	r3, r2
 800aba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d015      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abaa:	4b6c      	ldr	r3, [pc, #432]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abb6:	4b69      	ldr	r3, [pc, #420]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abba:	4a68      	ldr	r2, [pc, #416]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abc0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abc2:	4b66      	ldr	r3, [pc, #408]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	4a65      	ldr	r2, [pc, #404]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abcc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800abce:	4a63      	ldr	r2, [pc, #396]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800abd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800abde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe2:	d118      	bne.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe4:	f7f8 fd3c 	bl	8003660 <HAL_GetTick>
 800abe8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abec:	e00d      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abee:	f7f8 fd37 	bl	8003660 <HAL_GetTick>
 800abf2:	4602      	mov	r2, r0
 800abf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800abf8:	1ad2      	subs	r2, r2, r3
 800abfa:	f241 3388 	movw	r3, #5000	; 0x1388
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d903      	bls.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800ac08:	e005      	b.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac0a:	4b54      	ldr	r3, [pc, #336]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0eb      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ac16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d129      	bne.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac2e:	d10e      	bne.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ac30:	4b4a      	ldr	r3, [pc, #296]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ac38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac40:	091a      	lsrs	r2, r3, #4
 800ac42:	4b48      	ldr	r3, [pc, #288]	; (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ac44:	4013      	ands	r3, r2
 800ac46:	4a45      	ldr	r2, [pc, #276]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	6113      	str	r3, [r2, #16]
 800ac4c:	e005      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ac4e:	4b43      	ldr	r3, [pc, #268]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	4a42      	ldr	r2, [pc, #264]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac58:	6113      	str	r3, [r2, #16]
 800ac5a:	4b40      	ldr	r3, [pc, #256]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ac5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac6a:	4a3c      	ldr	r2, [pc, #240]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac6c:	430b      	orrs	r3, r1
 800ac6e:	6713      	str	r3, [r2, #112]	; 0x70
 800ac70:	e008      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800ac7a:	e003      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f002 0301 	and.w	r3, r2, #1
 800ac90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac94:	2300      	movs	r3, #0
 800ac96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ac9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4313      	orrs	r3, r2
 800aca2:	f000 808f 	beq.w	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800aca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acac:	2b28      	cmp	r3, #40	; 0x28
 800acae:	d871      	bhi.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800acb0:	a201      	add	r2, pc, #4	; (adr r2, 800acb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800acb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb6:	bf00      	nop
 800acb8:	0800ad9d 	.word	0x0800ad9d
 800acbc:	0800ad95 	.word	0x0800ad95
 800acc0:	0800ad95 	.word	0x0800ad95
 800acc4:	0800ad95 	.word	0x0800ad95
 800acc8:	0800ad95 	.word	0x0800ad95
 800accc:	0800ad95 	.word	0x0800ad95
 800acd0:	0800ad95 	.word	0x0800ad95
 800acd4:	0800ad95 	.word	0x0800ad95
 800acd8:	0800ad69 	.word	0x0800ad69
 800acdc:	0800ad95 	.word	0x0800ad95
 800ace0:	0800ad95 	.word	0x0800ad95
 800ace4:	0800ad95 	.word	0x0800ad95
 800ace8:	0800ad95 	.word	0x0800ad95
 800acec:	0800ad95 	.word	0x0800ad95
 800acf0:	0800ad95 	.word	0x0800ad95
 800acf4:	0800ad95 	.word	0x0800ad95
 800acf8:	0800ad7f 	.word	0x0800ad7f
 800acfc:	0800ad95 	.word	0x0800ad95
 800ad00:	0800ad95 	.word	0x0800ad95
 800ad04:	0800ad95 	.word	0x0800ad95
 800ad08:	0800ad95 	.word	0x0800ad95
 800ad0c:	0800ad95 	.word	0x0800ad95
 800ad10:	0800ad95 	.word	0x0800ad95
 800ad14:	0800ad95 	.word	0x0800ad95
 800ad18:	0800ad9d 	.word	0x0800ad9d
 800ad1c:	0800ad95 	.word	0x0800ad95
 800ad20:	0800ad95 	.word	0x0800ad95
 800ad24:	0800ad95 	.word	0x0800ad95
 800ad28:	0800ad95 	.word	0x0800ad95
 800ad2c:	0800ad95 	.word	0x0800ad95
 800ad30:	0800ad95 	.word	0x0800ad95
 800ad34:	0800ad95 	.word	0x0800ad95
 800ad38:	0800ad9d 	.word	0x0800ad9d
 800ad3c:	0800ad95 	.word	0x0800ad95
 800ad40:	0800ad95 	.word	0x0800ad95
 800ad44:	0800ad95 	.word	0x0800ad95
 800ad48:	0800ad95 	.word	0x0800ad95
 800ad4c:	0800ad95 	.word	0x0800ad95
 800ad50:	0800ad95 	.word	0x0800ad95
 800ad54:	0800ad95 	.word	0x0800ad95
 800ad58:	0800ad9d 	.word	0x0800ad9d
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	58024800 	.word	0x58024800
 800ad64:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	2101      	movs	r1, #1
 800ad70:	4618      	mov	r0, r3
 800ad72:	f001 fdcb 	bl	800c90c <RCCEx_PLL2_Config>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ad7c:	e00f      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad82:	3328      	adds	r3, #40	; 0x28
 800ad84:	2101      	movs	r1, #1
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 fe72 	bl	800ca70 <RCCEx_PLL3_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ad92:	e004      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad9a:	e000      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ad9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ada6:	4bbf      	ldr	r3, [pc, #764]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ada8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adaa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adb4:	4abb      	ldr	r2, [pc, #748]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800adb6:	430b      	orrs	r3, r1
 800adb8:	6553      	str	r3, [r2, #84]	; 0x54
 800adba:	e003      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800adc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	f002 0302 	and.w	r3, r2, #2
 800add0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800add4:	2300      	movs	r3, #0
 800add6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800adde:	460b      	mov	r3, r1
 800ade0:	4313      	orrs	r3, r2
 800ade2:	d041      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ade4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adea:	2b05      	cmp	r3, #5
 800adec:	d824      	bhi.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800adee:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae41 	.word	0x0800ae41
 800adf8:	0800ae0d 	.word	0x0800ae0d
 800adfc:	0800ae23 	.word	0x0800ae23
 800ae00:	0800ae41 	.word	0x0800ae41
 800ae04:	0800ae41 	.word	0x0800ae41
 800ae08:	0800ae41 	.word	0x0800ae41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae10:	3308      	adds	r3, #8
 800ae12:	2101      	movs	r1, #1
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 fd79 	bl	800c90c <RCCEx_PLL2_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae20:	e00f      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae26:	3328      	adds	r3, #40	; 0x28
 800ae28:	2101      	movs	r1, #1
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 fe20 	bl	800ca70 <RCCEx_PLL3_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae36:	e004      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae3e:	e000      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800ae40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae4a:	4b96      	ldr	r3, [pc, #600]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4e:	f023 0107 	bic.w	r1, r3, #7
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae58:	4a92      	ldr	r2, [pc, #584]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae5a:	430b      	orrs	r3, r1
 800ae5c:	6553      	str	r3, [r2, #84]	; 0x54
 800ae5e:	e003      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f002 0304 	and.w	r3, r2, #4
 800ae74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae7e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ae82:	460b      	mov	r3, r1
 800ae84:	4313      	orrs	r3, r2
 800ae86:	d044      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae90:	2b05      	cmp	r3, #5
 800ae92:	d825      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ae94:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ae96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9a:	bf00      	nop
 800ae9c:	0800aee9 	.word	0x0800aee9
 800aea0:	0800aeb5 	.word	0x0800aeb5
 800aea4:	0800aecb 	.word	0x0800aecb
 800aea8:	0800aee9 	.word	0x0800aee9
 800aeac:	0800aee9 	.word	0x0800aee9
 800aeb0:	0800aee9 	.word	0x0800aee9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb8:	3308      	adds	r3, #8
 800aeba:	2101      	movs	r1, #1
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 fd25 	bl	800c90c <RCCEx_PLL2_Config>
 800aec2:	4603      	mov	r3, r0
 800aec4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aec8:	e00f      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aece:	3328      	adds	r3, #40	; 0x28
 800aed0:	2101      	movs	r1, #1
 800aed2:	4618      	mov	r0, r3
 800aed4:	f001 fdcc 	bl	800ca70 <RCCEx_PLL3_Config>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aede:	e004      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aee6:	e000      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800aee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aef2:	4b6c      	ldr	r3, [pc, #432]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef6:	f023 0107 	bic.w	r1, r3, #7
 800aefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af02:	4a68      	ldr	r2, [pc, #416]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af04:	430b      	orrs	r3, r1
 800af06:	6593      	str	r3, [r2, #88]	; 0x58
 800af08:	e003      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1a:	f002 0320 	and.w	r3, r2, #32
 800af1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af22:	2300      	movs	r3, #0
 800af24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800af28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4313      	orrs	r3, r2
 800af30:	d055      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af3e:	d033      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800af40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af44:	d82c      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af4a:	d02f      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800af4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af50:	d826      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af56:	d02b      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800af58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af5c:	d820      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af62:	d012      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800af64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af68:	d81a      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d022      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800af6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af72:	d115      	bne.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af78:	3308      	adds	r3, #8
 800af7a:	2100      	movs	r1, #0
 800af7c:	4618      	mov	r0, r3
 800af7e:	f001 fcc5 	bl	800c90c <RCCEx_PLL2_Config>
 800af82:	4603      	mov	r3, r0
 800af84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800af88:	e015      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8e:	3328      	adds	r3, #40	; 0x28
 800af90:	2102      	movs	r1, #2
 800af92:	4618      	mov	r0, r3
 800af94:	f001 fd6c 	bl	800ca70 <RCCEx_PLL3_Config>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800af9e:	e00a      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afa6:	e006      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afa8:	bf00      	nop
 800afaa:	e004      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afac:	bf00      	nop
 800afae:	e002      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afb0:	bf00      	nop
 800afb2:	e000      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10b      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800afbe:	4b39      	ldr	r3, [pc, #228]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800afc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afce:	4a35      	ldr	r2, [pc, #212]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afd0:	430b      	orrs	r3, r1
 800afd2:	6553      	str	r3, [r2, #84]	; 0x54
 800afd4:	e003      	b.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800afde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800afea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800afee:	2300      	movs	r3, #0
 800aff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aff4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800aff8:	460b      	mov	r3, r1
 800affa:	4313      	orrs	r3, r2
 800affc:	d058      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b00a:	d033      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b00c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b010:	d82c      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b016:	d02f      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01c:	d826      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b01e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b022:	d02b      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b028:	d820      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b02a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b02e:	d012      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b034:	d81a      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b036:	2b00      	cmp	r3, #0
 800b038:	d022      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b03e:	d115      	bne.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b044:	3308      	adds	r3, #8
 800b046:	2100      	movs	r1, #0
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 fc5f 	bl	800c90c <RCCEx_PLL2_Config>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b054:	e015      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05a:	3328      	adds	r3, #40	; 0x28
 800b05c:	2102      	movs	r1, #2
 800b05e:	4618      	mov	r0, r3
 800b060:	f001 fd06 	bl	800ca70 <RCCEx_PLL3_Config>
 800b064:	4603      	mov	r3, r0
 800b066:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b06a:	e00a      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b072:	e006      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b074:	bf00      	nop
 800b076:	e004      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b078:	bf00      	nop
 800b07a:	e002      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b07c:	bf00      	nop
 800b07e:	e000      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b080:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10e      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b08a:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b08e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b09a:	4a02      	ldr	r2, [pc, #8]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b09c:	430b      	orrs	r3, r1
 800b09e:	6593      	str	r3, [r2, #88]	; 0x58
 800b0a0:	e006      	b.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b0a2:	bf00      	nop
 800b0a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b0bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	d055      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0dc:	d033      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b0de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0e2:	d82c      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b0e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0e8:	d02f      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b0ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0ee:	d826      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b0f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0f4:	d02b      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b0f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0fa:	d820      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b100:	d012      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b106:	d81a      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d022      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b10c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b110:	d115      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b116:	3308      	adds	r3, #8
 800b118:	2100      	movs	r1, #0
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 fbf6 	bl	800c90c <RCCEx_PLL2_Config>
 800b120:	4603      	mov	r3, r0
 800b122:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b126:	e015      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12c:	3328      	adds	r3, #40	; 0x28
 800b12e:	2102      	movs	r1, #2
 800b130:	4618      	mov	r0, r3
 800b132:	f001 fc9d 	bl	800ca70 <RCCEx_PLL3_Config>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b13c:	e00a      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b144:	e006      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b146:	bf00      	nop
 800b148:	e004      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b14a:	bf00      	nop
 800b14c:	e002      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b14e:	bf00      	nop
 800b150:	e000      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b152:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b154:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10b      	bne.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b15c:	4ba0      	ldr	r3, [pc, #640]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b15e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b160:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b16c:	4a9c      	ldr	r2, [pc, #624]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b16e:	430b      	orrs	r3, r1
 800b170:	6593      	str	r3, [r2, #88]	; 0x58
 800b172:	e003      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b174:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b178:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f002 0308 	and.w	r3, r2, #8
 800b188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b18c:	2300      	movs	r3, #0
 800b18e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b192:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b196:	460b      	mov	r3, r1
 800b198:	4313      	orrs	r3, r2
 800b19a:	d01e      	beq.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a8:	d10c      	bne.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ae:	3328      	adds	r3, #40	; 0x28
 800b1b0:	2102      	movs	r1, #2
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f001 fc5c 	bl	800ca70 <RCCEx_PLL3_Config>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b1c4:	4b86      	ldr	r3, [pc, #536]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1d4:	4a82      	ldr	r2, [pc, #520]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	f002 0310 	and.w	r3, r2, #16
 800b1e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b1f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	d01e      	beq.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b206:	d10c      	bne.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20c:	3328      	adds	r3, #40	; 0x28
 800b20e:	2102      	movs	r1, #2
 800b210:	4618      	mov	r0, r3
 800b212:	f001 fc2d 	bl	800ca70 <RCCEx_PLL3_Config>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b222:	4b6f      	ldr	r3, [pc, #444]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b232:	4a6b      	ldr	r2, [pc, #428]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b234:	430b      	orrs	r3, r1
 800b236:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b244:	67bb      	str	r3, [r7, #120]	; 0x78
 800b246:	2300      	movs	r3, #0
 800b248:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b24a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b24e:	460b      	mov	r3, r1
 800b250:	4313      	orrs	r3, r2
 800b252:	d03e      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b258:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b25c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b260:	d022      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b266:	d81b      	bhi.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b26c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b270:	d00b      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b272:	e015      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b278:	3308      	adds	r3, #8
 800b27a:	2100      	movs	r1, #0
 800b27c:	4618      	mov	r0, r3
 800b27e:	f001 fb45 	bl	800c90c <RCCEx_PLL2_Config>
 800b282:	4603      	mov	r3, r0
 800b284:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b288:	e00f      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28e:	3328      	adds	r3, #40	; 0x28
 800b290:	2102      	movs	r1, #2
 800b292:	4618      	mov	r0, r3
 800b294:	f001 fbec 	bl	800ca70 <RCCEx_PLL3_Config>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b29e:	e004      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2a6:	e000      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10b      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b2b2:	4b4b      	ldr	r3, [pc, #300]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2c2:	4a47      	ldr	r2, [pc, #284]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b2c8:	e003      	b.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b2de:	673b      	str	r3, [r7, #112]	; 0x70
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	677b      	str	r3, [r7, #116]	; 0x74
 800b2e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	d03b      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2fa:	d01f      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b2fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b300:	d818      	bhi.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b306:	d003      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b30c:	d007      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b30e:	e011      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b310:	4b33      	ldr	r3, [pc, #204]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	4a32      	ldr	r2, [pc, #200]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b31c:	e00f      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	3328      	adds	r3, #40	; 0x28
 800b324:	2101      	movs	r1, #1
 800b326:	4618      	mov	r0, r3
 800b328:	f001 fba2 	bl	800ca70 <RCCEx_PLL3_Config>
 800b32c:	4603      	mov	r3, r0
 800b32e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b332:	e004      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b33a:	e000      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b33e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10b      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b346:	4b26      	ldr	r3, [pc, #152]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b34a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b356:	4a22      	ldr	r2, [pc, #136]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b358:	430b      	orrs	r3, r1
 800b35a:	6553      	str	r3, [r2, #84]	; 0x54
 800b35c:	e003      	b.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b362:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b372:	66bb      	str	r3, [r7, #104]	; 0x68
 800b374:	2300      	movs	r3, #0
 800b376:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b378:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b37c:	460b      	mov	r3, r1
 800b37e:	4313      	orrs	r3, r2
 800b380:	d034      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b390:	d007      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b392:	e011      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b394:	4b12      	ldr	r3, [pc, #72]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	4a11      	ldr	r2, [pc, #68]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b39a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b39e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b3a0:	e00e      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	2102      	movs	r1, #2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 faae 	bl	800c90c <RCCEx_PLL2_Config>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b3b6:	e003      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10d      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b3c8:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d6:	4a02      	ldr	r2, [pc, #8]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3d8:	430b      	orrs	r3, r1
 800b3da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3dc:	e006      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b3de:	bf00      	nop
 800b3e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b3f8:	663b      	str	r3, [r7, #96]	; 0x60
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b3fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b402:	460b      	mov	r3, r1
 800b404:	4313      	orrs	r3, r2
 800b406:	d00c      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40c:	3328      	adds	r3, #40	; 0x28
 800b40e:	2102      	movs	r1, #2
 800b410:	4618      	mov	r0, r3
 800b412:	f001 fb2d 	bl	800ca70 <RCCEx_PLL3_Config>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b42e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b430:	2300      	movs	r3, #0
 800b432:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b434:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b438:	460b      	mov	r3, r1
 800b43a:	4313      	orrs	r3, r2
 800b43c:	d036      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b448:	d018      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b44a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b44e:	d811      	bhi.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b454:	d014      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b45a:	d80b      	bhi.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d011      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b464:	d106      	bne.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b466:	4bb7      	ldr	r3, [pc, #732]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46a:	4ab6      	ldr	r2, [pc, #728]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b46c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b470:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b472:	e008      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b47a:	e004      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b47c:	bf00      	nop
 800b47e:	e002      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b480:	bf00      	nop
 800b482:	e000      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b484:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b486:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10a      	bne.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b48e:	4bad      	ldr	r3, [pc, #692]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b49c:	4aa9      	ldr	r2, [pc, #676]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	6553      	str	r3, [r2, #84]	; 0x54
 800b4a2:	e003      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b4b8:	653b      	str	r3, [r7, #80]	; 0x50
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	657b      	str	r3, [r7, #84]	; 0x54
 800b4be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	d009      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b4c8:	4b9e      	ldr	r3, [pc, #632]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d6:	4a9b      	ldr	r2, [pc, #620]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4d8:	430b      	orrs	r3, r1
 800b4da:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b4e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	d009      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b4f8:	4b92      	ldr	r3, [pc, #584]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4fc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b506:	4a8f      	ldr	r2, [pc, #572]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b508:	430b      	orrs	r3, r1
 800b50a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b518:	643b      	str	r3, [r7, #64]	; 0x40
 800b51a:	2300      	movs	r3, #0
 800b51c:	647b      	str	r3, [r7, #68]	; 0x44
 800b51e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b522:	460b      	mov	r3, r1
 800b524:	4313      	orrs	r3, r2
 800b526:	d00e      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b528:	4b86      	ldr	r3, [pc, #536]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	4a85      	ldr	r2, [pc, #532]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b52e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b532:	6113      	str	r3, [r2, #16]
 800b534:	4b83      	ldr	r3, [pc, #524]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b536:	6919      	ldr	r1, [r3, #16]
 800b538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b540:	4a80      	ldr	r2, [pc, #512]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b542:	430b      	orrs	r3, r1
 800b544:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b552:	63bb      	str	r3, [r7, #56]	; 0x38
 800b554:	2300      	movs	r3, #0
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b558:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b55c:	460b      	mov	r3, r1
 800b55e:	4313      	orrs	r3, r2
 800b560:	d009      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b562:	4b78      	ldr	r3, [pc, #480]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b566:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b570:	4a74      	ldr	r2, [pc, #464]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b572:	430b      	orrs	r3, r1
 800b574:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b582:	633b      	str	r3, [r7, #48]	; 0x30
 800b584:	2300      	movs	r3, #0
 800b586:	637b      	str	r3, [r7, #52]	; 0x34
 800b588:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b58c:	460b      	mov	r3, r1
 800b58e:	4313      	orrs	r3, r2
 800b590:	d00a      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b592:	4b6c      	ldr	r3, [pc, #432]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b596:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a2:	4a68      	ldr	r2, [pc, #416]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	62b9      	str	r1, [r7, #40]	; 0x28
 800b5b4:	f003 0301 	and.w	r3, r3, #1
 800b5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	d011      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f001 f99d 	bl	800c90c <RCCEx_PLL2_Config>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b5d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6239      	str	r1, [r7, #32]
 800b5f4:	f003 0302 	and.w	r3, r3, #2
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b5fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b5fe:	460b      	mov	r3, r1
 800b600:	4313      	orrs	r3, r2
 800b602:	d011      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b608:	3308      	adds	r3, #8
 800b60a:	2101      	movs	r1, #1
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 f97d 	bl	800c90c <RCCEx_PLL2_Config>
 800b612:	4603      	mov	r3, r0
 800b614:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b618:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b620:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b624:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	2100      	movs	r1, #0
 800b632:	61b9      	str	r1, [r7, #24]
 800b634:	f003 0304 	and.w	r3, r3, #4
 800b638:	61fb      	str	r3, [r7, #28]
 800b63a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b63e:	460b      	mov	r3, r1
 800b640:	4313      	orrs	r3, r2
 800b642:	d011      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b648:	3308      	adds	r3, #8
 800b64a:	2102      	movs	r1, #2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 f95d 	bl	800c90c <RCCEx_PLL2_Config>
 800b652:	4603      	mov	r3, r0
 800b654:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b658:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b660:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b664:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	2100      	movs	r1, #0
 800b672:	6139      	str	r1, [r7, #16]
 800b674:	f003 0308 	and.w	r3, r3, #8
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b67e:	460b      	mov	r3, r1
 800b680:	4313      	orrs	r3, r2
 800b682:	d011      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b688:	3328      	adds	r3, #40	; 0x28
 800b68a:	2100      	movs	r1, #0
 800b68c:	4618      	mov	r0, r3
 800b68e:	f001 f9ef 	bl	800ca70 <RCCEx_PLL3_Config>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d003      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	60b9      	str	r1, [r7, #8]
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	d011      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c8:	3328      	adds	r3, #40	; 0x28
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f001 f9cf 	bl	800ca70 <RCCEx_PLL3_Config>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b6d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	6039      	str	r1, [r7, #0]
 800b6f4:	f003 0320 	and.w	r3, r3, #32
 800b6f8:	607b      	str	r3, [r7, #4]
 800b6fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b6fe:	460b      	mov	r3, r1
 800b700:	4313      	orrs	r3, r2
 800b702:	d011      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b708:	3328      	adds	r3, #40	; 0x28
 800b70a:	2102      	movs	r1, #2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 f9af 	bl	800ca70 <RCCEx_PLL3_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d003      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b724:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b728:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	e000      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
}
 800b736:	4618      	mov	r0, r3
 800b738:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b73c:	46bd      	mov	sp, r7
 800b73e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b742:	bf00      	nop
 800b744:	58024400 	.word	0x58024400

0800b748 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b090      	sub	sp, #64	; 0x40
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b752:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b756:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b75a:	430b      	orrs	r3, r1
 800b75c:	f040 8094 	bne.w	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b760:	4b9b      	ldr	r3, [pc, #620]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b764:	f003 0307 	and.w	r3, r3, #7
 800b768:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	f200 8087 	bhi.w	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b772:	a201      	add	r2, pc, #4	; (adr r2, 800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b778:	0800b78d 	.word	0x0800b78d
 800b77c:	0800b7b5 	.word	0x0800b7b5
 800b780:	0800b7dd 	.word	0x0800b7dd
 800b784:	0800b879 	.word	0x0800b879
 800b788:	0800b805 	.word	0x0800b805
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b78c:	4b90      	ldr	r3, [pc, #576]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b798:	d108      	bne.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b79a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 ff62 	bl	800c668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a8:	f000 bc93 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b0:	f000 bc8f 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7b4:	4b86      	ldr	r3, [pc, #536]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7c0:	d108      	bne.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7c2:	f107 0318 	add.w	r3, r7, #24
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 fca6 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7d0:	f000 bc7f 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7d8:	f000 bc7b 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7dc:	4b7c      	ldr	r3, [pc, #496]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7e8:	d108      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ea:	f107 030c 	add.w	r3, r7, #12
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 fde6 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7f8:	f000 bc6b 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b800:	f000 bc67 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b804:	4b72      	ldr	r3, [pc, #456]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b80c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b80e:	4b70      	ldr	r3, [pc, #448]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 0304 	and.w	r3, r3, #4
 800b816:	2b04      	cmp	r3, #4
 800b818:	d10c      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d109      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b820:	4b6b      	ldr	r3, [pc, #428]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	08db      	lsrs	r3, r3, #3
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	4a6a      	ldr	r2, [pc, #424]	; (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b82c:	fa22 f303 	lsr.w	r3, r2, r3
 800b830:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b832:	e01f      	b.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b834:	4b66      	ldr	r3, [pc, #408]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b840:	d106      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b848:	d102      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b84a:	4b63      	ldr	r3, [pc, #396]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b84e:	e011      	b.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b850:	4b5f      	ldr	r3, [pc, #380]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b85c:	d106      	bne.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b864:	d102      	bne.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b866:	4b5d      	ldr	r3, [pc, #372]	; (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b86a:	e003      	b.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b870:	f000 bc2f 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b874:	f000 bc2d 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b878:	4b59      	ldr	r3, [pc, #356]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b87c:	f000 bc29 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b884:	f000 bc25 	b.w	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b88c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b890:	430b      	orrs	r3, r1
 800b892:	f040 80a7 	bne.w	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b896:	4b4e      	ldr	r3, [pc, #312]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b89a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b89e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8a6:	d054      	beq.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8ae:	f200 808b 	bhi.w	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b8b8:	f000 8083 	beq.w	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b8c2:	f200 8081 	bhi.w	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8cc:	d02f      	beq.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8d4:	d878      	bhi.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d004      	beq.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8e2:	d012      	beq.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b8e4:	e070      	b.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8e6:	4b3a      	ldr	r3, [pc, #232]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8f2:	d107      	bne.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f000 feb5 	bl	800c668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b902:	e3e6      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b908:	e3e3      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b90a:	4b31      	ldr	r3, [pc, #196]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b916:	d107      	bne.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b918:	f107 0318 	add.w	r3, r7, #24
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 fbfb 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b926:	e3d4      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b92c:	e3d1      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b92e:	4b28      	ldr	r3, [pc, #160]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b93a:	d107      	bne.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b93c:	f107 030c 	add.w	r3, r7, #12
 800b940:	4618      	mov	r0, r3
 800b942:	f000 fd3d 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b94a:	e3c2      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b950:	e3bf      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b952:	4b1f      	ldr	r3, [pc, #124]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b95a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b95c:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b04      	cmp	r3, #4
 800b966:	d10c      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d109      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b96e:	4b18      	ldr	r3, [pc, #96]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	08db      	lsrs	r3, r3, #3
 800b974:	f003 0303 	and.w	r3, r3, #3
 800b978:	4a16      	ldr	r2, [pc, #88]	; (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b97a:	fa22 f303 	lsr.w	r3, r2, r3
 800b97e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b980:	e01e      	b.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b982:	4b13      	ldr	r3, [pc, #76]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b98a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b98e:	d106      	bne.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b996:	d102      	bne.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b998:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b99a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b99c:	e010      	b.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b99e:	4b0c      	ldr	r3, [pc, #48]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9aa:	d106      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9b2:	d102      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b9b4:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9b8:	e002      	b.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b9be:	e388      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9c0:	e387      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9c6:	e384      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9cc:	e381      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9ce:	bf00      	nop
 800b9d0:	58024400 	.word	0x58024400
 800b9d4:	03d09000 	.word	0x03d09000
 800b9d8:	003d0900 	.word	0x003d0900
 800b9dc:	02faf080 	.word	0x02faf080
 800b9e0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9e8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	f040 809c 	bne.w	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b9f2:	4b9e      	ldr	r3, [pc, #632]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b9fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba02:	d054      	beq.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba0a:	f200 808b 	bhi.w	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba14:	f000 8083 	beq.w	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba1e:	f200 8081 	bhi.w	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba28:	d02f      	beq.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba30:	d878      	bhi.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d004      	beq.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba3e:	d012      	beq.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ba40:	e070      	b.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba42:	4b8a      	ldr	r3, [pc, #552]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba4e:	d107      	bne.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 fe07 	bl	800c668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba5e:	e338      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba64:	e335      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba66:	4b81      	ldr	r3, [pc, #516]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba72:	d107      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba74:	f107 0318 	add.w	r3, r7, #24
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 fb4d 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba82:	e326      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba88:	e323      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba8a:	4b78      	ldr	r3, [pc, #480]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba96:	d107      	bne.n	800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba98:	f107 030c 	add.w	r3, r7, #12
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 fc8f 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa6:	e314      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baac:	e311      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baae:	4b6f      	ldr	r3, [pc, #444]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bab6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bab8:	4b6c      	ldr	r3, [pc, #432]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d10c      	bne.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800baca:	4b68      	ldr	r3, [pc, #416]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	08db      	lsrs	r3, r3, #3
 800bad0:	f003 0303 	and.w	r3, r3, #3
 800bad4:	4a66      	ldr	r2, [pc, #408]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bad6:	fa22 f303 	lsr.w	r3, r2, r3
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
 800badc:	e01e      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bade:	4b63      	ldr	r3, [pc, #396]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baea:	d106      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800baec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baf2:	d102      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800baf4:	4b5f      	ldr	r3, [pc, #380]	; (800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800baf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf8:	e010      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bafa:	4b5c      	ldr	r3, [pc, #368]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb06:	d106      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb0e:	d102      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb10:	4b59      	ldr	r3, [pc, #356]	; (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb14:	e002      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb1a:	e2da      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb1c:	e2d9      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb1e:	4b57      	ldr	r3, [pc, #348]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bb20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb22:	e2d6      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb28:	e2d3      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bb2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb2e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bb32:	430b      	orrs	r3, r1
 800bb34:	f040 80a7 	bne.w	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bb38:	4b4c      	ldr	r3, [pc, #304]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bb40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb48:	d055      	beq.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb50:	f200 8096 	bhi.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb5a:	f000 8084 	beq.w	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb64:	f200 808c 	bhi.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb6e:	d030      	beq.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb76:	f200 8083 	bhi.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d004      	beq.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb86:	d012      	beq.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bb88:	e07a      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb8a:	4b38      	ldr	r3, [pc, #224]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb96:	d107      	bne.n	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 fd63 	bl	800c668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bba6:	e294      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbac:	e291      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbae:	4b2f      	ldr	r3, [pc, #188]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbba:	d107      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbbc:	f107 0318 	add.w	r3, r7, #24
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 faa9 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbca:	e282      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd0:	e27f      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbd2:	4b26      	ldr	r3, [pc, #152]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbde:	d107      	bne.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbe0:	f107 030c 	add.w	r3, r7, #12
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 fbeb 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbee:	e270      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf4:	e26d      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbf6:	4b1d      	ldr	r3, [pc, #116]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbfe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc00:	4b1a      	ldr	r3, [pc, #104]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b04      	cmp	r3, #4
 800bc0a:	d10c      	bne.n	800bc26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d109      	bne.n	800bc26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc12:	4b16      	ldr	r3, [pc, #88]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	08db      	lsrs	r3, r3, #3
 800bc18:	f003 0303 	and.w	r3, r3, #3
 800bc1c:	4a14      	ldr	r2, [pc, #80]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bc1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc24:	e01e      	b.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc26:	4b11      	ldr	r3, [pc, #68]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc32:	d106      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc3a:	d102      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc3c:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc40:	e010      	b.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc42:	4b0a      	ldr	r3, [pc, #40]	; (800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc4e:	d106      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc56:	d102      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc58:	4b07      	ldr	r3, [pc, #28]	; (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc5c:	e002      	b.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc62:	e236      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc64:	e235      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc6a:	e232      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc6c:	58024400 	.word	0x58024400
 800bc70:	03d09000 	.word	0x03d09000
 800bc74:	003d0900 	.word	0x003d0900
 800bc78:	02faf080 	.word	0x02faf080
 800bc7c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc84:	e225      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc8a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bc8e:	430b      	orrs	r3, r1
 800bc90:	f040 8085 	bne.w	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bc94:	4b9c      	ldr	r3, [pc, #624]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc98:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bc9c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bca4:	d06b      	beq.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcac:	d874      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcb4:	d056      	beq.n	800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcbc:	d86c      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bcc4:	d03b      	beq.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bccc:	d864      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcd4:	d021      	beq.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcdc:	d85c      	bhi.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d004      	beq.n	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcea:	d004      	beq.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bcec:	e054      	b.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bcee:	f7fe fb5f 	bl	800a3b0 <HAL_RCC_GetPCLK1Freq>
 800bcf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bcf4:	e1ed      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcf6:	4b84      	ldr	r3, [pc, #528]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd02:	d107      	bne.n	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd04:	f107 0318 	add.w	r3, r7, #24
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 fa05 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd12:	e1de      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd14:	2300      	movs	r3, #0
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd18:	e1db      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd1a:	4b7b      	ldr	r3, [pc, #492]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd26:	d107      	bne.n	800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd28:	f107 030c 	add.w	r3, r7, #12
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 fb47 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd36:	e1cc      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd3c:	e1c9      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd3e:	4b72      	ldr	r3, [pc, #456]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0304 	and.w	r3, r3, #4
 800bd46:	2b04      	cmp	r3, #4
 800bd48:	d109      	bne.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd4a:	4b6f      	ldr	r3, [pc, #444]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	08db      	lsrs	r3, r3, #3
 800bd50:	f003 0303 	and.w	r3, r3, #3
 800bd54:	4a6d      	ldr	r2, [pc, #436]	; (800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bd56:	fa22 f303 	lsr.w	r3, r2, r3
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd5c:	e1b9      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd62:	e1b6      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bd64:	4b68      	ldr	r3, [pc, #416]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd70:	d102      	bne.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bd72:	4b67      	ldr	r3, [pc, #412]	; (800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bd74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd76:	e1ac      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd7c:	e1a9      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bd7e:	4b62      	ldr	r3, [pc, #392]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd8a:	d102      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bd8c:	4b61      	ldr	r3, [pc, #388]	; (800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd90:	e19f      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd96:	e19c      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd9c:	e199      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bd9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bda2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bda6:	430b      	orrs	r3, r1
 800bda8:	d173      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bdaa:	4b57      	ldr	r3, [pc, #348]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bdb2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdba:	d02f      	beq.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdc2:	d863      	bhi.n	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d004      	beq.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd0:	d012      	beq.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bdd2:	e05b      	b.n	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdd4:	4b4c      	ldr	r3, [pc, #304]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bde0:	d107      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bde2:	f107 0318 	add.w	r3, r7, #24
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 f996 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdf0:	e16f      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf6:	e16c      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdf8:	4b43      	ldr	r3, [pc, #268]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be04:	d107      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be06:	f107 030c 	add.w	r3, r7, #12
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fad8 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be14:	e15d      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be1a:	e15a      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be1c:	4b3a      	ldr	r3, [pc, #232]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be24:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be26:	4b38      	ldr	r3, [pc, #224]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 0304 	and.w	r3, r3, #4
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d10c      	bne.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800be32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be34:	2b00      	cmp	r3, #0
 800be36:	d109      	bne.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be38:	4b33      	ldr	r3, [pc, #204]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	08db      	lsrs	r3, r3, #3
 800be3e:	f003 0303 	and.w	r3, r3, #3
 800be42:	4a32      	ldr	r2, [pc, #200]	; (800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800be44:	fa22 f303 	lsr.w	r3, r2, r3
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be4a:	e01e      	b.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be4c:	4b2e      	ldr	r3, [pc, #184]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be58:	d106      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800be5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be60:	d102      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be62:	4b2b      	ldr	r3, [pc, #172]	; (800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800be64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be66:	e010      	b.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be68:	4b27      	ldr	r3, [pc, #156]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be74:	d106      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be7c:	d102      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be7e:	4b25      	ldr	r3, [pc, #148]	; (800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be82:	e002      	b.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be84:	2300      	movs	r3, #0
 800be86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be88:	e123      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be8a:	e122      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be90:	e11f      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800be92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be96:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800be9a:	430b      	orrs	r3, r1
 800be9c:	d13c      	bne.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800be9e:	4b1a      	ldr	r3, [pc, #104]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bea6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d004      	beq.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beb4:	d012      	beq.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800beb6:	e023      	b.n	800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beb8:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bec4:	d107      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beca:	4618      	mov	r0, r3
 800becc:	f000 fbcc 	bl	800c668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed4:	e0fd      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beda:	e0fa      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bee8:	d107      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beea:	f107 0318 	add.w	r3, r7, #24
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 f912 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef8:	e0eb      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800befe:	e0e8      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf04:	e0e5      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf06:	bf00      	nop
 800bf08:	58024400 	.word	0x58024400
 800bf0c:	03d09000 	.word	0x03d09000
 800bf10:	003d0900 	.word	0x003d0900
 800bf14:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bf18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf1c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bf20:	430b      	orrs	r3, r1
 800bf22:	f040 8085 	bne.w	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf26:	4b6d      	ldr	r3, [pc, #436]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bf2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf36:	d06b      	beq.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf3e:	d874      	bhi.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf46:	d056      	beq.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4e:	d86c      	bhi.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf56:	d03b      	beq.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf5e:	d864      	bhi.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf66:	d021      	beq.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf6e:	d85c      	bhi.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d004      	beq.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf7c:	d004      	beq.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bf7e:	e054      	b.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bf80:	f000 f8b4 	bl	800c0ec <HAL_RCCEx_GetD3PCLK1Freq>
 800bf84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf86:	e0a4      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf88:	4b54      	ldr	r3, [pc, #336]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf94:	d107      	bne.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf96:	f107 0318 	add.w	r3, r7, #24
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 f8bc 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfa4:	e095      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfaa:	e092      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfac:	4b4b      	ldr	r3, [pc, #300]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb8:	d107      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfba:	f107 030c 	add.w	r3, r7, #12
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 f9fe 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfc8:	e083      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfce:	e080      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bfd0:	4b42      	ldr	r3, [pc, #264]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 0304 	and.w	r3, r3, #4
 800bfd8:	2b04      	cmp	r3, #4
 800bfda:	d109      	bne.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfdc:	4b3f      	ldr	r3, [pc, #252]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	08db      	lsrs	r3, r3, #3
 800bfe2:	f003 0303 	and.w	r3, r3, #3
 800bfe6:	4a3e      	ldr	r2, [pc, #248]	; (800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bfe8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfee:	e070      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff4:	e06d      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bff6:	4b39      	ldr	r3, [pc, #228]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c002:	d102      	bne.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c004:	4b37      	ldr	r3, [pc, #220]	; (800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c008:	e063      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c00e:	e060      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c010:	4b32      	ldr	r3, [pc, #200]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c01c:	d102      	bne.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c01e:	4b32      	ldr	r3, [pc, #200]	; (800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c022:	e056      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c028:	e053      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02e:	e050      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c030:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c034:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c038:	430b      	orrs	r3, r1
 800c03a:	d148      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c03c:	4b27      	ldr	r3, [pc, #156]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c044:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c04c:	d02a      	beq.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c054:	d838      	bhi.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c062:	d00d      	beq.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c064:	e030      	b.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c066:	4b1d      	ldr	r3, [pc, #116]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c06e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c072:	d102      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c074:	4b1c      	ldr	r3, [pc, #112]	; (800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c078:	e02b      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c07e:	e028      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c080:	4b16      	ldr	r3, [pc, #88]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c08c:	d107      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c08e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c092:	4618      	mov	r0, r3
 800c094:	f000 fae8 	bl	800c668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c09c:	e019      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a2:	e016      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0a4:	4b0d      	ldr	r3, [pc, #52]	; (800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0b0:	d107      	bne.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0b2:	f107 0318 	add.w	r3, r7, #24
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 f82e 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0c0:	e007      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c6:	e004      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0cc:	e001      	b.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3740      	adds	r7, #64	; 0x40
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	58024400 	.word	0x58024400
 800c0e0:	03d09000 	.word	0x03d09000
 800c0e4:	003d0900 	.word	0x003d0900
 800c0e8:	02faf080 	.word	0x02faf080

0800c0ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c0f0:	f7fe f92e 	bl	800a350 <HAL_RCC_GetHCLKFreq>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	4b06      	ldr	r3, [pc, #24]	; (800c110 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	091b      	lsrs	r3, r3, #4
 800c0fc:	f003 0307 	and.w	r3, r3, #7
 800c100:	4904      	ldr	r1, [pc, #16]	; (800c114 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c102:	5ccb      	ldrb	r3, [r1, r3]
 800c104:	f003 031f 	and.w	r3, r3, #31
 800c108:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	58024400 	.word	0x58024400
 800c114:	0801dca4 	.word	0x0801dca4

0800c118 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c118:	b480      	push	{r7}
 800c11a:	b089      	sub	sp, #36	; 0x24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c120:	4ba1      	ldr	r3, [pc, #644]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c124:	f003 0303 	and.w	r3, r3, #3
 800c128:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c12a:	4b9f      	ldr	r3, [pc, #636]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c12e:	0b1b      	lsrs	r3, r3, #12
 800c130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c134:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c136:	4b9c      	ldr	r3, [pc, #624]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13a:	091b      	lsrs	r3, r3, #4
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c142:	4b99      	ldr	r3, [pc, #612]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c146:	08db      	lsrs	r3, r3, #3
 800c148:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	fb02 f303 	mul.w	r3, r2, r3
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 8111 	beq.w	800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	2b02      	cmp	r3, #2
 800c16a:	f000 8083 	beq.w	800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	2b02      	cmp	r3, #2
 800c172:	f200 80a1 	bhi.w	800c2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d003      	beq.n	800c184 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d056      	beq.n	800c230 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c182:	e099      	b.n	800c2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c184:	4b88      	ldr	r3, [pc, #544]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0320 	and.w	r3, r3, #32
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d02d      	beq.n	800c1ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c190:	4b85      	ldr	r3, [pc, #532]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	08db      	lsrs	r3, r3, #3
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	4a84      	ldr	r2, [pc, #528]	; (800c3ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	ee07 3a90 	vmov	s15, r3
 800c1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ba:	4b7b      	ldr	r3, [pc, #492]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1ea:	e087      	b.n	800c2fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fe:	4b6a      	ldr	r3, [pc, #424]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c212:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c22e:	e065      	b.n	800c2fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	ee07 3a90 	vmov	s15, r3
 800c236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c242:	4b59      	ldr	r3, [pc, #356]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c24a:	ee07 3a90 	vmov	s15, r3
 800c24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c252:	ed97 6a03 	vldr	s12, [r7, #12]
 800c256:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c26e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c272:	e043      	b.n	800c2fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	ee07 3a90 	vmov	s15, r3
 800c27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c27e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c3bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c286:	4b48      	ldr	r3, [pc, #288]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c28e:	ee07 3a90 	vmov	s15, r3
 800c292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c296:	ed97 6a03 	vldr	s12, [r7, #12]
 800c29a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c29e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2b6:	e021      	b.n	800c2fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	ee07 3a90 	vmov	s15, r3
 800c2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ca:	4b37      	ldr	r3, [pc, #220]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d2:	ee07 3a90 	vmov	s15, r3
 800c2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c2fc:	4b2a      	ldr	r3, [pc, #168]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c300:	0a5b      	lsrs	r3, r3, #9
 800c302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c306:	ee07 3a90 	vmov	s15, r3
 800c30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c312:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c316:	edd7 6a07 	vldr	s13, [r7, #28]
 800c31a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c31e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c322:	ee17 2a90 	vmov	r2, s15
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c32a:	4b1f      	ldr	r3, [pc, #124]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32e:	0c1b      	lsrs	r3, r3, #16
 800c330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c334:	ee07 3a90 	vmov	s15, r3
 800c338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c33c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c340:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c344:	edd7 6a07 	vldr	s13, [r7, #28]
 800c348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c34c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c350:	ee17 2a90 	vmov	r2, s15
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c358:	4b13      	ldr	r3, [pc, #76]	; (800c3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35c:	0e1b      	lsrs	r3, r3, #24
 800c35e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c362:	ee07 3a90 	vmov	s15, r3
 800c366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c36a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c36e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c372:	edd7 6a07 	vldr	s13, [r7, #28]
 800c376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c37a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c37e:	ee17 2a90 	vmov	r2, s15
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c386:	e008      	b.n	800c39a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	609a      	str	r2, [r3, #8]
}
 800c39a:	bf00      	nop
 800c39c:	3724      	adds	r7, #36	; 0x24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	58024400 	.word	0x58024400
 800c3ac:	03d09000 	.word	0x03d09000
 800c3b0:	46000000 	.word	0x46000000
 800c3b4:	4c742400 	.word	0x4c742400
 800c3b8:	4a742400 	.word	0x4a742400
 800c3bc:	4c3ebc20 	.word	0x4c3ebc20

0800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b089      	sub	sp, #36	; 0x24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3c8:	4ba1      	ldr	r3, [pc, #644]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3cc:	f003 0303 	and.w	r3, r3, #3
 800c3d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c3d2:	4b9f      	ldr	r3, [pc, #636]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d6:	0d1b      	lsrs	r3, r3, #20
 800c3d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c3de:	4b9c      	ldr	r3, [pc, #624]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e2:	0a1b      	lsrs	r3, r3, #8
 800c3e4:	f003 0301 	and.w	r3, r3, #1
 800c3e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c3ea:	4b99      	ldr	r3, [pc, #612]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ee:	08db      	lsrs	r3, r3, #3
 800c3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	fb02 f303 	mul.w	r3, r2, r3
 800c3fa:	ee07 3a90 	vmov	s15, r3
 800c3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c402:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 8111 	beq.w	800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	2b02      	cmp	r3, #2
 800c412:	f000 8083 	beq.w	800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	f200 80a1 	bhi.w	800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d003      	beq.n	800c42c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d056      	beq.n	800c4d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c42a:	e099      	b.n	800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c42c:	4b88      	ldr	r3, [pc, #544]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0320 	and.w	r3, r3, #32
 800c434:	2b00      	cmp	r3, #0
 800c436:	d02d      	beq.n	800c494 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c438:	4b85      	ldr	r3, [pc, #532]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	08db      	lsrs	r3, r3, #3
 800c43e:	f003 0303 	and.w	r3, r3, #3
 800c442:	4a84      	ldr	r2, [pc, #528]	; (800c654 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c444:	fa22 f303 	lsr.w	r3, r2, r3
 800c448:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	ee07 3a90 	vmov	s15, r3
 800c450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	ee07 3a90 	vmov	s15, r3
 800c45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c462:	4b7b      	ldr	r3, [pc, #492]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c472:	ed97 6a03 	vldr	s12, [r7, #12]
 800c476:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c658 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c48e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c492:	e087      	b.n	800c5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	ee07 3a90 	vmov	s15, r3
 800c49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c65c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4a6:	4b6a      	ldr	r3, [pc, #424]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ae:	ee07 3a90 	vmov	s15, r3
 800c4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c658 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4d6:	e065      	b.n	800c5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	ee07 3a90 	vmov	s15, r3
 800c4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c660 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4ea:	4b59      	ldr	r3, [pc, #356]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f2:	ee07 3a90 	vmov	s15, r3
 800c4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c658 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c50a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c51a:	e043      	b.n	800c5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	ee07 3a90 	vmov	s15, r3
 800c522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c526:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c52e:	4b48      	ldr	r3, [pc, #288]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c53e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c542:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c658 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c55a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c55e:	e021      	b.n	800c5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	ee07 3a90 	vmov	s15, r3
 800c566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c56a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c660 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c572:	4b37      	ldr	r3, [pc, #220]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57a:	ee07 3a90 	vmov	s15, r3
 800c57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c582:	ed97 6a03 	vldr	s12, [r7, #12]
 800c586:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c658 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c5a4:	4b2a      	ldr	r3, [pc, #168]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a8:	0a5b      	lsrs	r3, r3, #9
 800c5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5ca:	ee17 2a90 	vmov	r2, s15
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c5d2:	4b1f      	ldr	r3, [pc, #124]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d6:	0c1b      	lsrs	r3, r3, #16
 800c5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5dc:	ee07 3a90 	vmov	s15, r3
 800c5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5f8:	ee17 2a90 	vmov	r2, s15
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c600:	4b13      	ldr	r3, [pc, #76]	; (800c650 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c604:	0e1b      	lsrs	r3, r3, #24
 800c606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c61a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c626:	ee17 2a90 	vmov	r2, s15
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c62e:	e008      	b.n	800c642 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	609a      	str	r2, [r3, #8]
}
 800c642:	bf00      	nop
 800c644:	3724      	adds	r7, #36	; 0x24
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	58024400 	.word	0x58024400
 800c654:	03d09000 	.word	0x03d09000
 800c658:	46000000 	.word	0x46000000
 800c65c:	4c742400 	.word	0x4c742400
 800c660:	4a742400 	.word	0x4a742400
 800c664:	4c3ebc20 	.word	0x4c3ebc20

0800c668 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c668:	b480      	push	{r7}
 800c66a:	b089      	sub	sp, #36	; 0x24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c670:	4ba0      	ldr	r3, [pc, #640]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c674:	f003 0303 	and.w	r3, r3, #3
 800c678:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c67a:	4b9e      	ldr	r3, [pc, #632]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67e:	091b      	lsrs	r3, r3, #4
 800c680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c684:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c686:	4b9b      	ldr	r3, [pc, #620]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c690:	4b98      	ldr	r3, [pc, #608]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c694:	08db      	lsrs	r3, r3, #3
 800c696:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	fb02 f303 	mul.w	r3, r2, r3
 800c6a0:	ee07 3a90 	vmov	s15, r3
 800c6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 8111 	beq.w	800c8d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	f000 8083 	beq.w	800c7c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	f200 80a1 	bhi.w	800c806 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d056      	beq.n	800c77e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c6d0:	e099      	b.n	800c806 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6d2:	4b88      	ldr	r3, [pc, #544]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 0320 	and.w	r3, r3, #32
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d02d      	beq.n	800c73a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6de:	4b85      	ldr	r3, [pc, #532]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	08db      	lsrs	r3, r3, #3
 800c6e4:	f003 0303 	and.w	r3, r3, #3
 800c6e8:	4a83      	ldr	r2, [pc, #524]	; (800c8f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	ee07 3a90 	vmov	s15, r3
 800c6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	ee07 3a90 	vmov	s15, r3
 800c700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c708:	4b7a      	ldr	r3, [pc, #488]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c710:	ee07 3a90 	vmov	s15, r3
 800c714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c718:	ed97 6a03 	vldr	s12, [r7, #12]
 800c71c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c8fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c72c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c730:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c734:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c738:	e087      	b.n	800c84a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	ee07 3a90 	vmov	s15, r3
 800c740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c744:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c900 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c74c:	4b69      	ldr	r3, [pc, #420]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c754:	ee07 3a90 	vmov	s15, r3
 800c758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c75c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c760:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c8fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c76c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c774:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c778:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c77c:	e065      	b.n	800c84a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	ee07 3a90 	vmov	s15, r3
 800c784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c788:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c904 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c78c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c790:	4b58      	ldr	r3, [pc, #352]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c798:	ee07 3a90 	vmov	s15, r3
 800c79c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c8fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7c0:	e043      	b.n	800c84a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	ee07 3a90 	vmov	s15, r3
 800c7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c908 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c7d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7d4:	4b47      	ldr	r3, [pc, #284]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7dc:	ee07 3a90 	vmov	s15, r3
 800c7e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c8fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c800:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c804:	e021      	b.n	800c84a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	ee07 3a90 	vmov	s15, r3
 800c80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c810:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c900 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c818:	4b36      	ldr	r3, [pc, #216]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c820:	ee07 3a90 	vmov	s15, r3
 800c824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c828:	ed97 6a03 	vldr	s12, [r7, #12]
 800c82c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c8fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c83c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c840:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c844:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c848:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c84a:	4b2a      	ldr	r3, [pc, #168]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84e:	0a5b      	lsrs	r3, r3, #9
 800c850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c854:	ee07 3a90 	vmov	s15, r3
 800c858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c860:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c864:	edd7 6a07 	vldr	s13, [r7, #28]
 800c868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c86c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c870:	ee17 2a90 	vmov	r2, s15
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c878:	4b1e      	ldr	r3, [pc, #120]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87c:	0c1b      	lsrs	r3, r3, #16
 800c87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c882:	ee07 3a90 	vmov	s15, r3
 800c886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c88a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c88e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c892:	edd7 6a07 	vldr	s13, [r7, #28]
 800c896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c89a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c89e:	ee17 2a90 	vmov	r2, s15
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c8a6:	4b13      	ldr	r3, [pc, #76]	; (800c8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8aa:	0e1b      	lsrs	r3, r3, #24
 800c8ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b0:	ee07 3a90 	vmov	s15, r3
 800c8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8cc:	ee17 2a90 	vmov	r2, s15
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c8d4:	e008      	b.n	800c8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	609a      	str	r2, [r3, #8]
}
 800c8e8:	bf00      	nop
 800c8ea:	3724      	adds	r7, #36	; 0x24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	03d09000 	.word	0x03d09000
 800c8fc:	46000000 	.word	0x46000000
 800c900:	4c742400 	.word	0x4c742400
 800c904:	4a742400 	.word	0x4a742400
 800c908:	4c3ebc20 	.word	0x4c3ebc20

0800c90c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c91a:	4b53      	ldr	r3, [pc, #332]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91e:	f003 0303 	and.w	r3, r3, #3
 800c922:	2b03      	cmp	r3, #3
 800c924:	d101      	bne.n	800c92a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	e099      	b.n	800ca5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c92a:	4b4f      	ldr	r3, [pc, #316]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a4e      	ldr	r2, [pc, #312]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c930:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c936:	f7f6 fe93 	bl	8003660 <HAL_GetTick>
 800c93a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c93c:	e008      	b.n	800c950 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c93e:	f7f6 fe8f 	bl	8003660 <HAL_GetTick>
 800c942:	4602      	mov	r2, r0
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	2b02      	cmp	r3, #2
 800c94a:	d901      	bls.n	800c950 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c94c:	2303      	movs	r3, #3
 800c94e:	e086      	b.n	800ca5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c950:	4b45      	ldr	r3, [pc, #276]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1f0      	bne.n	800c93e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c95c:	4b42      	ldr	r3, [pc, #264]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c960:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	031b      	lsls	r3, r3, #12
 800c96a:	493f      	ldr	r1, [pc, #252]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c96c:	4313      	orrs	r3, r2
 800c96e:	628b      	str	r3, [r1, #40]	; 0x28
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	3b01      	subs	r3, #1
 800c976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	3b01      	subs	r3, #1
 800c980:	025b      	lsls	r3, r3, #9
 800c982:	b29b      	uxth	r3, r3
 800c984:	431a      	orrs	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	041b      	lsls	r3, r3, #16
 800c98e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c992:	431a      	orrs	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	3b01      	subs	r3, #1
 800c99a:	061b      	lsls	r3, r3, #24
 800c99c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c9a0:	4931      	ldr	r1, [pc, #196]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c9a6:	4b30      	ldr	r3, [pc, #192]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	492d      	ldr	r1, [pc, #180]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9bc:	f023 0220 	bic.w	r2, r3, #32
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	4928      	ldr	r1, [pc, #160]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c9ca:	4b27      	ldr	r3, [pc, #156]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ce:	4a26      	ldr	r2, [pc, #152]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9d0:	f023 0310 	bic.w	r3, r3, #16
 800c9d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c9d6:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9da:	4b24      	ldr	r3, [pc, #144]	; (800ca6c <RCCEx_PLL2_Config+0x160>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	69d2      	ldr	r2, [r2, #28]
 800c9e2:	00d2      	lsls	r2, r2, #3
 800c9e4:	4920      	ldr	r1, [pc, #128]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c9ea:	4b1f      	ldr	r3, [pc, #124]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	4a1e      	ldr	r2, [pc, #120]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9f0:	f043 0310 	orr.w	r3, r3, #16
 800c9f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d106      	bne.n	800ca0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c9fc:	4b1a      	ldr	r3, [pc, #104]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800c9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca00:	4a19      	ldr	r2, [pc, #100]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca08:	e00f      	b.n	800ca2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d106      	bne.n	800ca1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ca10:	4b15      	ldr	r3, [pc, #84]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca14:	4a14      	ldr	r2, [pc, #80]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca1c:	e005      	b.n	800ca2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ca1e:	4b12      	ldr	r3, [pc, #72]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca22:	4a11      	ldr	r2, [pc, #68]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ca2a:	4b0f      	ldr	r3, [pc, #60]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a0e      	ldr	r2, [pc, #56]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca36:	f7f6 fe13 	bl	8003660 <HAL_GetTick>
 800ca3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca3c:	e008      	b.n	800ca50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca3e:	f7f6 fe0f 	bl	8003660 <HAL_GetTick>
 800ca42:	4602      	mov	r2, r0
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d901      	bls.n	800ca50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	e006      	b.n	800ca5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca50:	4b05      	ldr	r3, [pc, #20]	; (800ca68 <RCCEx_PLL2_Config+0x15c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d0f0      	beq.n	800ca3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	58024400 	.word	0x58024400
 800ca6c:	ffff0007 	.word	0xffff0007

0800ca70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca7e:	4b53      	ldr	r3, [pc, #332]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800ca80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca82:	f003 0303 	and.w	r3, r3, #3
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d101      	bne.n	800ca8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e099      	b.n	800cbc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ca8e:	4b4f      	ldr	r3, [pc, #316]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a4e      	ldr	r2, [pc, #312]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800ca94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca9a:	f7f6 fde1 	bl	8003660 <HAL_GetTick>
 800ca9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800caa0:	e008      	b.n	800cab4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800caa2:	f7f6 fddd 	bl	8003660 <HAL_GetTick>
 800caa6:	4602      	mov	r2, r0
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	2b02      	cmp	r3, #2
 800caae:	d901      	bls.n	800cab4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cab0:	2303      	movs	r3, #3
 800cab2:	e086      	b.n	800cbc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cab4:	4b45      	ldr	r3, [pc, #276]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1f0      	bne.n	800caa2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cac0:	4b42      	ldr	r3, [pc, #264]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	051b      	lsls	r3, r3, #20
 800cace:	493f      	ldr	r1, [pc, #252]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cad0:	4313      	orrs	r3, r2
 800cad2:	628b      	str	r3, [r1, #40]	; 0x28
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	3b01      	subs	r3, #1
 800cada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	025b      	lsls	r3, r3, #9
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	3b01      	subs	r3, #1
 800caf0:	041b      	lsls	r3, r3, #16
 800caf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800caf6:	431a      	orrs	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	061b      	lsls	r3, r3, #24
 800cb00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb04:	4931      	ldr	r1, [pc, #196]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb06:	4313      	orrs	r3, r2
 800cb08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cb0a:	4b30      	ldr	r3, [pc, #192]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	492d      	ldr	r1, [pc, #180]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb1c:	4b2b      	ldr	r3, [pc, #172]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	4928      	ldr	r1, [pc, #160]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb2e:	4b27      	ldr	r3, [pc, #156]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb32:	4a26      	ldr	r2, [pc, #152]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb3a:	4b24      	ldr	r3, [pc, #144]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb3e:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <RCCEx_PLL3_Config+0x160>)
 800cb40:	4013      	ands	r3, r2
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	69d2      	ldr	r2, [r2, #28]
 800cb46:	00d2      	lsls	r2, r2, #3
 800cb48:	4920      	ldr	r1, [pc, #128]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cb4e:	4b1f      	ldr	r3, [pc, #124]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb52:	4a1e      	ldr	r2, [pc, #120]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d106      	bne.n	800cb6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb60:	4b1a      	ldr	r3, [pc, #104]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	4a19      	ldr	r2, [pc, #100]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb6c:	e00f      	b.n	800cb8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d106      	bne.n	800cb82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cb74:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb78:	4a14      	ldr	r2, [pc, #80]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb80:	e005      	b.n	800cb8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb82:	4b12      	ldr	r3, [pc, #72]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	4a11      	ldr	r2, [pc, #68]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb8e:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a0e      	ldr	r2, [pc, #56]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cb94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb9a:	f7f6 fd61 	bl	8003660 <HAL_GetTick>
 800cb9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cba0:	e008      	b.n	800cbb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cba2:	f7f6 fd5d 	bl	8003660 <HAL_GetTick>
 800cba6:	4602      	mov	r2, r0
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d901      	bls.n	800cbb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e006      	b.n	800cbc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbb4:	4b05      	ldr	r3, [pc, #20]	; (800cbcc <RCCEx_PLL3_Config+0x15c>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0f0      	beq.n	800cba2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	58024400 	.word	0x58024400
 800cbd0:	ffff0007 	.word	0xffff0007

0800cbd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08a      	sub	sp, #40	; 0x28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e075      	b.n	800ccd2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d105      	bne.n	800cbfe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7f5 fdc9 	bl	8002790 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2204      	movs	r2, #4
 800cc02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 f868 	bl	800ccdc <HAL_SD_InitCard>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d001      	beq.n	800cc16 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e05d      	b.n	800ccd2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cc16:	f107 0308 	add.w	r3, r7, #8
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fdaf 	bl	800d780 <HAL_SD_GetCardStatus>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d001      	beq.n	800cc2c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e052      	b.n	800ccd2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cc2c:	7e3b      	ldrb	r3, [r7, #24]
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cc32:	7e7b      	ldrb	r3, [r7, #25]
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d10a      	bne.n	800cc56 <HAL_SD_Init+0x82>
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d102      	bne.n	800cc4c <HAL_SD_Init+0x78>
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc52:	659a      	str	r2, [r3, #88]	; 0x58
 800cc54:	e00b      	b.n	800cc6e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d104      	bne.n	800cc68 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc64:	659a      	str	r2, [r3, #88]	; 0x58
 800cc66:	e002      	b.n	800cc6e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 fe6d 	bl	800d954 <HAL_SD_ConfigWideBusOperation>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e026      	b.n	800ccd2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cc84:	f7f6 fcec 	bl	8003660 <HAL_GetTick>
 800cc88:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cc8a:	e011      	b.n	800ccb0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc8c:	f7f6 fce8 	bl	8003660 <HAL_GetTick>
 800cc90:	4602      	mov	r2, r0
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9a:	d109      	bne.n	800ccb0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cca2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e010      	b.n	800ccd2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 ff61 	bl	800db78 <HAL_SD_GetCardState>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d1e7      	bne.n	800cc8c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3728      	adds	r7, #40	; 0x28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
	...

0800ccdc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ccdc:	b590      	push	{r4, r7, lr}
 800ccde:	b08d      	sub	sp, #52	; 0x34
 800cce0:	af02      	add	r7, sp, #8
 800cce2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ccec:	2300      	movs	r3, #0
 800ccee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ccf4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ccf8:	f04f 0100 	mov.w	r1, #0
 800ccfc:	f7fe fd24 	bl	800b748 <HAL_RCCEx_GetPeriphCLKFreq>
 800cd00:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d109      	bne.n	800cd1c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cd16:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e070      	b.n	800cdfe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	0a1b      	lsrs	r3, r3, #8
 800cd20:	4a39      	ldr	r2, [pc, #228]	; (800ce08 <HAL_SD_InitCard+0x12c>)
 800cd22:	fba2 2303 	umull	r2, r3, r2, r3
 800cd26:	091b      	lsrs	r3, r3, #4
 800cd28:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681c      	ldr	r4, [r3, #0]
 800cd2e:	466a      	mov	r2, sp
 800cd30:	f107 0318 	add.w	r3, r7, #24
 800cd34:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd38:	e882 0003 	stmia.w	r2, {r0, r1}
 800cd3c:	f107 030c 	add.w	r3, r7, #12
 800cd40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd42:	4620      	mov	r0, r4
 800cd44:	f004 fec4 	bl	8011ad0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f004 ff07 	bl	8011b60 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d005      	beq.n	800cd64 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d007      	beq.n	800cd7a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cd6a:	4a28      	ldr	r2, [pc, #160]	; (800ce0c <HAL_SD_InitCard+0x130>)
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd72:	3301      	adds	r3, #1
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7f6 fc7f 	bl	8003678 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 ffea 	bl	800dd54 <SD_PowerON>
 800cd80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00b      	beq.n	800cda0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd94:	6a3b      	ldr	r3, [r7, #32]
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e02e      	b.n	800cdfe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 ff09 	bl	800dbb8 <SD_InitCard>
 800cda6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cda8:	6a3b      	ldr	r3, [r7, #32]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00b      	beq.n	800cdc6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e01b      	b.n	800cdfe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f004 ff5c 	bl	8011c8c <SDMMC_CmdBlockLength>
 800cdd4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00f      	beq.n	800cdfc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a0b      	ldr	r2, [pc, #44]	; (800ce10 <HAL_SD_InitCard+0x134>)
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	431a      	orrs	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e000      	b.n	800cdfe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	372c      	adds	r7, #44	; 0x2c
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd90      	pop	{r4, r7, pc}
 800ce06:	bf00      	nop
 800ce08:	014f8b59 	.word	0x014f8b59
 800ce0c:	00012110 	.word	0x00012110
 800ce10:	1fe00fff 	.word	0x1fe00fff

0800ce14 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b08c      	sub	sp, #48	; 0x30
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
 800ce20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d107      	bne.n	800ce3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e08d      	b.n	800cf58 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	f040 8086 	bne.w	800cf56 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	441a      	add	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d907      	bls.n	800ce6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e074      	b.n	800cf58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2203      	movs	r2, #3
 800ce72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	025a      	lsls	r2, r3, #9
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d002      	beq.n	800ce9a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	025b      	lsls	r3, r3, #9
 800ce98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	025b      	lsls	r3, r3, #9
 800cea4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cea6:	2390      	movs	r3, #144	; 0x90
 800cea8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ceaa:	2302      	movs	r3, #2
 800ceac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f107 0210 	add.w	r2, r7, #16
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f004 feb7 	bl	8011c34 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ced4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2201      	movs	r2, #1
 800cee4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d90a      	bls.n	800cf02 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2282      	movs	r2, #130	; 0x82
 800cef0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cef8:	4618      	mov	r0, r3
 800cefa:	f004 ff0d 	bl	8011d18 <SDMMC_CmdReadMultiBlock>
 800cefe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf00:	e009      	b.n	800cf16 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2281      	movs	r2, #129	; 0x81
 800cf06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f004 fedf 	bl	8011cd2 <SDMMC_CmdReadSingleBlock>
 800cf14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d012      	beq.n	800cf42 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a0f      	ldr	r2, [pc, #60]	; (800cf60 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800cf22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e00a      	b.n	800cf58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cf50:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	e000      	b.n	800cf58 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cf56:	2302      	movs	r3, #2
  }
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3730      	adds	r7, #48	; 0x30
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	1fe00fff 	.word	0x1fe00fff

0800cf64 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b08c      	sub	sp, #48	; 0x30
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
 800cf70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d107      	bne.n	800cf8c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e08d      	b.n	800d0a8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	f040 8086 	bne.w	800d0a6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	441a      	add	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d907      	bls.n	800cfbe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e074      	b.n	800d0a8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2203      	movs	r2, #3
 800cfc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	025a      	lsls	r2, r3, #9
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d002      	beq.n	800cfea <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	025b      	lsls	r3, r3, #9
 800cfe8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfea:	f04f 33ff 	mov.w	r3, #4294967295
 800cfee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	025b      	lsls	r3, r3, #9
 800cff4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cff6:	2390      	movs	r3, #144	; 0x90
 800cff8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cffa:	2300      	movs	r3, #0
 800cffc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cffe:	2300      	movs	r3, #0
 800d000:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d002:	2300      	movs	r3, #0
 800d004:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f107 0210 	add.w	r2, r7, #16
 800d00e:	4611      	mov	r1, r2
 800d010:	4618      	mov	r0, r3
 800d012:	f004 fe0f 	bl	8011c34 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68da      	ldr	r2, [r3, #12]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d024:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2201      	movs	r2, #1
 800d034:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d90a      	bls.n	800d052 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	22a0      	movs	r2, #160	; 0xa0
 800d040:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d048:	4618      	mov	r0, r3
 800d04a:	f004 feab 	bl	8011da4 <SDMMC_CmdWriteMultiBlock>
 800d04e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d050:	e009      	b.n	800d066 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2290      	movs	r2, #144	; 0x90
 800d056:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d05e:	4618      	mov	r0, r3
 800d060:	f004 fe7d 	bl	8011d5e <SDMMC_CmdWriteSingleBlock>
 800d064:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d012      	beq.n	800d092 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a0f      	ldr	r2, [pc, #60]	; (800d0b0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	431a      	orrs	r2, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2200      	movs	r2, #0
 800d08c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	e00a      	b.n	800d0a8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d0a0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e000      	b.n	800d0a8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d0a6:	2302      	movs	r3, #2
  }
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3730      	adds	r7, #48	; 0x30
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	1fe00fff 	.word	0x1fe00fff

0800d0b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d008      	beq.n	800d0e2 <HAL_SD_IRQHandler+0x2e>
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f003 0308 	and.w	r3, r3, #8
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f001 f926 	bl	800e32c <SD_Read_IT>
 800d0e0:	e19a      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 80ac 	beq.w	800d24a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0fa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	4b59      	ldr	r3, [pc, #356]	; (800d26c <HAL_SD_IRQHandler+0x1b8>)
 800d108:	400b      	ands	r3, r1
 800d10a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d11a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68da      	ldr	r2, [r3, #12]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d12a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f003 0308 	and.w	r3, r3, #8
 800d132:	2b00      	cmp	r3, #0
 800d134:	d038      	beq.n	800d1a8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f003 0302 	and.w	r3, r3, #2
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d104      	bne.n	800d14a <HAL_SD_IRQHandler+0x96>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f003 0320 	and.w	r3, r3, #32
 800d146:	2b00      	cmp	r3, #0
 800d148:	d011      	beq.n	800d16e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4618      	mov	r0, r3
 800d150:	f004 fe4c 	bl	8011dec <SDMMC_CmdStopTransfer>
 800d154:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d008      	beq.n	800d16e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	431a      	orrs	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f95b 	bl	800d424 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a3f      	ldr	r2, [pc, #252]	; (800d270 <HAL_SD_IRQHandler+0x1bc>)
 800d174:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2201      	movs	r2, #1
 800d17a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d104      	bne.n	800d198 <HAL_SD_IRQHandler+0xe4>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f003 0302 	and.w	r3, r3, #2
 800d194:	2b00      	cmp	r3, #0
 800d196:	d003      	beq.n	800d1a0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f006 fe55 	bl	8013e48 <HAL_SD_RxCpltCallback>
 800d19e:	e13b      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f006 fe47 	bl	8013e34 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d1a6:	e137      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 8132 	beq.w	800d418 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f003 0302 	and.w	r3, r3, #2
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d104      	bne.n	800d1e0 <HAL_SD_IRQHandler+0x12c>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f003 0320 	and.w	r3, r3, #32
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d011      	beq.n	800d204 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f004 fe01 	bl	8011dec <SDMMC_CmdStopTransfer>
 800d1ea:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d008      	beq.n	800d204 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	431a      	orrs	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f910 	bl	800d424 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d104      	bne.n	800d226 <HAL_SD_IRQHandler+0x172>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f003 0320 	and.w	r3, r3, #32
 800d222:	2b00      	cmp	r3, #0
 800d224:	d002      	beq.n	800d22c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f006 fe04 	bl	8013e34 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d105      	bne.n	800d242 <HAL_SD_IRQHandler+0x18e>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f003 0302 	and.w	r3, r3, #2
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 80eb 	beq.w	800d418 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f006 fe00 	bl	8013e48 <HAL_SD_RxCpltCallback>
}
 800d248:	e0e6      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00d      	beq.n	800d274 <HAL_SD_IRQHandler+0x1c0>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f003 0308 	and.w	r3, r3, #8
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f001 f8a8 	bl	800e3b8 <SD_Write_IT>
 800d268:	e0d6      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
 800d26a:	bf00      	nop
 800d26c:	ffff3ec5 	.word	0xffff3ec5
 800d270:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 809d 	beq.w	800d3be <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d005      	beq.n	800d29e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d296:	f043 0202 	orr.w	r2, r3, #2
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a4:	f003 0308 	and.w	r3, r3, #8
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d005      	beq.n	800d2b8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b0:	f043 0208 	orr.w	r2, r3, #8
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2be:	f003 0320 	and.w	r3, r3, #32
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d005      	beq.n	800d2d2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ca:	f043 0220 	orr.w	r2, r3, #32
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d005      	beq.n	800d2ec <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e4:	f043 0210 	orr.w	r2, r3, #16
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a4b      	ldr	r2, [pc, #300]	; (800d420 <HAL_SD_IRQHandler+0x36c>)
 800d2f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d302:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68da      	ldr	r2, [r3, #12]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d312:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d322:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d332:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f004 fd57 	bl	8011dec <SDMMC_CmdStopTransfer>
 800d33e:	4602      	mov	r2, r0
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d344:	431a      	orrs	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68da      	ldr	r2, [r3, #12]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d358:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d362:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f003 0308 	and.w	r3, r3, #8
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 f851 	bl	800d424 <HAL_SD_ErrorCallback>
}
 800d382:	e049      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d044      	beq.n	800d418 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d392:	2b00      	cmp	r3, #0
 800d394:	d040      	beq.n	800d418 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d3a4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f834 	bl	800d424 <HAL_SD_ErrorCallback>
}
 800d3bc:	e02c      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d025      	beq.n	800d418 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3dc:	f003 0304 	and.w	r3, r3, #4
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10c      	bne.n	800d3fe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f003 0320 	and.w	r3, r3, #32
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f001 f84a 	bl	800e488 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d3f4:	e010      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f001 f832 	bl	800e460 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d3fc:	e00c      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f003 0320 	and.w	r3, r3, #32
 800d404:	2b00      	cmp	r3, #0
 800d406:	d003      	beq.n	800d410 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f001 f833 	bl	800e474 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d40e:	e003      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f001 f81b 	bl	800e44c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d416:	e7ff      	b.n	800d418 <HAL_SD_IRQHandler+0x364>
 800d418:	bf00      	nop
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	18000f3a 	.word	0x18000f3a

0800d424 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d446:	0f9b      	lsrs	r3, r3, #30
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d452:	0e9b      	lsrs	r3, r3, #26
 800d454:	b2db      	uxtb	r3, r3
 800d456:	f003 030f 	and.w	r3, r3, #15
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d464:	0e1b      	lsrs	r3, r3, #24
 800d466:	b2db      	uxtb	r3, r3
 800d468:	f003 0303 	and.w	r3, r3, #3
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d476:	0c1b      	lsrs	r3, r3, #16
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d482:	0a1b      	lsrs	r3, r3, #8
 800d484:	b2da      	uxtb	r2, r3
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d498:	0d1b      	lsrs	r3, r3, #20
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4a4:	0c1b      	lsrs	r3, r3, #16
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	f003 030f 	and.w	r3, r3, #15
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4b6:	0bdb      	lsrs	r3, r3, #15
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	f003 0301 	and.w	r3, r3, #1
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4c8:	0b9b      	lsrs	r3, r3, #14
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	f003 0301 	and.w	r3, r3, #1
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4da:	0b5b      	lsrs	r3, r3, #13
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4ec:	0b1b      	lsrs	r3, r3, #12
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	b2da      	uxtb	r2, r3
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d504:	2b00      	cmp	r3, #0
 800d506:	d163      	bne.n	800d5d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d50c:	009a      	lsls	r2, r3, #2
 800d50e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d512:	4013      	ands	r3, r2
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d518:	0f92      	lsrs	r2, r2, #30
 800d51a:	431a      	orrs	r2, r3
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d524:	0edb      	lsrs	r3, r3, #27
 800d526:	b2db      	uxtb	r3, r3
 800d528:	f003 0307 	and.w	r3, r3, #7
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d536:	0e1b      	lsrs	r3, r3, #24
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d548:	0d5b      	lsrs	r3, r3, #21
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	f003 0307 	and.w	r3, r3, #7
 800d550:	b2da      	uxtb	r2, r3
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d55a:	0c9b      	lsrs	r3, r3, #18
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	f003 0307 	and.w	r3, r3, #7
 800d562:	b2da      	uxtb	r2, r3
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d56c:	0bdb      	lsrs	r3, r3, #15
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	f003 0307 	and.w	r3, r3, #7
 800d574:	b2da      	uxtb	r2, r3
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	1c5a      	adds	r2, r3, #1
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	7e1b      	ldrb	r3, [r3, #24]
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	f003 0307 	and.w	r3, r3, #7
 800d58e:	3302      	adds	r3, #2
 800d590:	2201      	movs	r2, #1
 800d592:	fa02 f303 	lsl.w	r3, r2, r3
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d59a:	fb03 f202 	mul.w	r2, r3, r2
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	7a1b      	ldrb	r3, [r3, #8]
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	f003 030f 	and.w	r3, r3, #15
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	409a      	lsls	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d5bc:	0a52      	lsrs	r2, r2, #9
 800d5be:	fb03 f202 	mul.w	r2, r3, r2
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5cc:	655a      	str	r2, [r3, #84]	; 0x54
 800d5ce:	e031      	b.n	800d634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d11d      	bne.n	800d614 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5dc:	041b      	lsls	r3, r3, #16
 800d5de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5e6:	0c1b      	lsrs	r3, r3, #16
 800d5e8:	431a      	orrs	r2, r3
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	029a      	lsls	r2, r3, #10
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d608:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	655a      	str	r2, [r3, #84]	; 0x54
 800d612:	e00f      	b.n	800d634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a58      	ldr	r2, [pc, #352]	; (800d77c <HAL_SD_GetCardCSD+0x344>)
 800d61a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	e09d      	b.n	800d770 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d638:	0b9b      	lsrs	r3, r3, #14
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	b2da      	uxtb	r2, r3
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d64a:	09db      	lsrs	r3, r3, #7
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d652:	b2da      	uxtb	r2, r3
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d662:	b2da      	uxtb	r2, r3
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d66c:	0fdb      	lsrs	r3, r3, #31
 800d66e:	b2da      	uxtb	r2, r3
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d678:	0f5b      	lsrs	r3, r3, #29
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	f003 0303 	and.w	r3, r3, #3
 800d680:	b2da      	uxtb	r2, r3
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d68a:	0e9b      	lsrs	r3, r3, #26
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0307 	and.w	r3, r3, #7
 800d692:	b2da      	uxtb	r2, r3
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d69c:	0d9b      	lsrs	r3, r3, #22
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	f003 030f 	and.w	r3, r3, #15
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ae:	0d5b      	lsrs	r3, r3, #21
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ca:	0c1b      	lsrs	r3, r3, #16
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6de:	0bdb      	lsrs	r3, r3, #15
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	b2da      	uxtb	r2, r3
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6f2:	0b9b      	lsrs	r3, r3, #14
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d706:	0b5b      	lsrs	r3, r3, #13
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	f003 0301 	and.w	r3, r3, #1
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d71a:	0b1b      	lsrs	r3, r3, #12
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	b2da      	uxtb	r2, r3
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d72e:	0a9b      	lsrs	r3, r3, #10
 800d730:	b2db      	uxtb	r3, r3
 800d732:	f003 0303 	and.w	r3, r3, #3
 800d736:	b2da      	uxtb	r2, r3
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d742:	0a1b      	lsrs	r3, r3, #8
 800d744:	b2db      	uxtb	r3, r3
 800d746:	f003 0303 	and.w	r3, r3, #3
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d756:	085b      	lsrs	r3, r3, #1
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2201      	movs	r2, #1
 800d76a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr
 800d77c:	1fe00fff 	.word	0x1fe00fff

0800d780 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b094      	sub	sp, #80	; 0x50
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d796:	b2db      	uxtb	r3, r3
 800d798:	2b03      	cmp	r3, #3
 800d79a:	d101      	bne.n	800d7a0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e0a7      	b.n	800d8f0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d7a0:	f107 0308 	add.w	r3, r7, #8
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fb62 	bl	800de70 <SD_SendSDStatus>
 800d7ac:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d011      	beq.n	800d7d8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a4f      	ldr	r2, [pc, #316]	; (800d8f8 <HAL_SD_GetCardStatus+0x178>)
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d7d6:	e070      	b.n	800d8ba <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	099b      	lsrs	r3, r3, #6
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	f003 0303 	and.w	r3, r3, #3
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	095b      	lsrs	r3, r3, #5
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f003 0301 	and.w	r3, r3, #1
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	0a1b      	lsrs	r3, r3, #8
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d802:	b29a      	uxth	r2, r3
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	0e1b      	lsrs	r3, r3, #24
 800d808:	b29b      	uxth	r3, r3
 800d80a:	4313      	orrs	r3, r2
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	061a      	lsls	r2, r3, #24
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	021b      	lsls	r3, r3, #8
 800d81a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d81e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	0a1b      	lsrs	r3, r3, #8
 800d824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d828:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	0e1b      	lsrs	r3, r3, #24
 800d82e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	b2da      	uxtb	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	0a1b      	lsrs	r3, r3, #8
 800d840:	b2da      	uxtb	r2, r3
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	0d1b      	lsrs	r3, r3, #20
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f003 030f 	and.w	r3, r3, #15
 800d850:	b2da      	uxtb	r2, r3
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	0c1b      	lsrs	r3, r3, #16
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d860:	b29a      	uxth	r2, r3
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	b29b      	uxth	r3, r3
 800d866:	b2db      	uxtb	r3, r3
 800d868:	b29b      	uxth	r3, r3
 800d86a:	4313      	orrs	r3, r2
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	0a9b      	lsrs	r3, r3, #10
 800d876:	b2db      	uxtb	r3, r3
 800d878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	0a1b      	lsrs	r3, r3, #8
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 0303 	and.w	r3, r3, #3
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	091b      	lsrs	r3, r3, #4
 800d896:	b2db      	uxtb	r3, r3
 800d898:	f003 030f 	and.w	r3, r3, #15
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f003 030f 	and.w	r3, r3, #15
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	0e1b      	lsrs	r3, r3, #24
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f004 f9e2 	bl	8011c8c <SDMMC_CmdBlockLength>
 800d8c8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00d      	beq.n	800d8ec <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a08      	ldr	r2, [pc, #32]	; (800d8f8 <HAL_SD_GetCardStatus+0x178>)
 800d8d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8dc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d8ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3750      	adds	r7, #80	; 0x50
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	1fe00fff 	.word	0x1fe00fff

0800d8fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d954:	b590      	push	{r4, r7, lr}
 800d956:	b08d      	sub	sp, #52	; 0x34
 800d958:	af02      	add	r7, sp, #8
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2203      	movs	r2, #3
 800d968:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d970:	2b03      	cmp	r3, #3
 800d972:	d02e      	beq.n	800d9d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d97a:	d106      	bne.n	800d98a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	635a      	str	r2, [r3, #52]	; 0x34
 800d988:	e029      	b.n	800d9de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d990:	d10a      	bne.n	800d9a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 fb64 	bl	800e060 <SD_WideBus_Enable>
 800d998:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	431a      	orrs	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	635a      	str	r2, [r3, #52]	; 0x34
 800d9a6:	e01a      	b.n	800d9de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d10a      	bne.n	800d9c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fba1 	bl	800e0f6 <SD_WideBus_Disable>
 800d9b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	635a      	str	r2, [r3, #52]	; 0x34
 800d9c2:	e00c      	b.n	800d9de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	635a      	str	r2, [r3, #52]	; 0x34
 800d9d0:	e005      	b.n	800d9de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d007      	beq.n	800d9f6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a5f      	ldr	r2, [pc, #380]	; (800db68 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d9ec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9f4:	e096      	b.n	800db24 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d9f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d9fa:	f04f 0100 	mov.w	r1, #0
 800d9fe:	f7fd fea3 	bl	800b748 <HAL_RCCEx_GetPeriphCLKFreq>
 800da02:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f000 8083 	beq.w	800db12 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	695a      	ldr	r2, [r3, #20]
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	4950      	ldr	r1, [pc, #320]	; (800db6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800da2a:	fba1 1303 	umull	r1, r3, r1, r3
 800da2e:	0e1b      	lsrs	r3, r3, #24
 800da30:	429a      	cmp	r2, r3
 800da32:	d303      	bcc.n	800da3c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	61bb      	str	r3, [r7, #24]
 800da3a:	e05a      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da44:	d103      	bne.n	800da4e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	61bb      	str	r3, [r7, #24]
 800da4c:	e051      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da56:	d126      	bne.n	800daa6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10e      	bne.n	800da7e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	4a43      	ldr	r2, [pc, #268]	; (800db70 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d906      	bls.n	800da76 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	4a40      	ldr	r2, [pc, #256]	; (800db6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800da6c:	fba2 2303 	umull	r2, r3, r2, r3
 800da70:	0e5b      	lsrs	r3, r3, #25
 800da72:	61bb      	str	r3, [r7, #24]
 800da74:	e03d      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	61bb      	str	r3, [r7, #24]
 800da7c:	e039      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	695b      	ldr	r3, [r3, #20]
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	69fa      	ldr	r2, [r7, #28]
 800da86:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8a:	4a39      	ldr	r2, [pc, #228]	; (800db70 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d906      	bls.n	800da9e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	4a36      	ldr	r2, [pc, #216]	; (800db6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800da94:	fba2 2303 	umull	r2, r3, r2, r3
 800da98:	0e5b      	lsrs	r3, r3, #25
 800da9a:	61bb      	str	r3, [r7, #24]
 800da9c:	e029      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	61bb      	str	r3, [r7, #24]
 800daa4:	e025      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10e      	bne.n	800dacc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	4a30      	ldr	r2, [pc, #192]	; (800db74 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d906      	bls.n	800dac4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	4a2c      	ldr	r2, [pc, #176]	; (800db6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800daba:	fba2 2303 	umull	r2, r3, r2, r3
 800dabe:	0e1b      	lsrs	r3, r3, #24
 800dac0:	61bb      	str	r3, [r7, #24]
 800dac2:	e016      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	695b      	ldr	r3, [r3, #20]
 800dac8:	61bb      	str	r3, [r7, #24]
 800daca:	e012      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	69fa      	ldr	r2, [r7, #28]
 800dad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad8:	4a26      	ldr	r2, [pc, #152]	; (800db74 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d906      	bls.n	800daec <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	4a22      	ldr	r2, [pc, #136]	; (800db6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800dae2:	fba2 2303 	umull	r2, r3, r2, r3
 800dae6:	0e1b      	lsrs	r3, r3, #24
 800dae8:	61bb      	str	r3, [r7, #24]
 800daea:	e002      	b.n	800daf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681c      	ldr	r4, [r3, #0]
 800daf6:	466a      	mov	r2, sp
 800daf8:	f107 0314 	add.w	r3, r7, #20
 800dafc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800db00:	e882 0003 	stmia.w	r2, {r0, r1}
 800db04:	f107 0308 	add.w	r3, r7, #8
 800db08:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db0a:	4620      	mov	r0, r4
 800db0c:	f003 ffe0 	bl	8011ad0 <SDMMC_Init>
 800db10:	e008      	b.n	800db24 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800db1e:	2301      	movs	r3, #1
 800db20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db2c:	4618      	mov	r0, r3
 800db2e:	f004 f8ad 	bl	8011c8c <SDMMC_CmdBlockLength>
 800db32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db34:	6a3b      	ldr	r3, [r7, #32]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00c      	beq.n	800db54 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a0a      	ldr	r2, [pc, #40]	; (800db68 <HAL_SD_ConfigWideBusOperation+0x214>)
 800db40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	431a      	orrs	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800db5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800db60:	4618      	mov	r0, r3
 800db62:	372c      	adds	r7, #44	; 0x2c
 800db64:	46bd      	mov	sp, r7
 800db66:	bd90      	pop	{r4, r7, pc}
 800db68:	1fe00fff 	.word	0x1fe00fff
 800db6c:	55e63b89 	.word	0x55e63b89
 800db70:	02faf080 	.word	0x02faf080
 800db74:	017d7840 	.word	0x017d7840

0800db78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800db84:	f107 030c 	add.w	r3, r7, #12
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fa40 	bl	800e010 <SD_SendStatus>
 800db90:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d005      	beq.n	800dba4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	431a      	orrs	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	0a5b      	lsrs	r3, r3, #9
 800dba8:	f003 030f 	and.w	r3, r3, #15
 800dbac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dbae:	693b      	ldr	r3, [r7, #16]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b090      	sub	sp, #64	; 0x40
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dbc4:	f7f5 fd4c 	bl	8003660 <HAL_GetTick>
 800dbc8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f003 ffd7 	bl	8011b82 <SDMMC_GetPowerState>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d102      	bne.n	800dbe0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dbde:	e0b5      	b.n	800dd4c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe4:	2b03      	cmp	r3, #3
 800dbe6:	d02e      	beq.n	800dc46 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f004 fa22 	bl	8012036 <SDMMC_CmdSendCID>
 800dbf2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <SD_InitCard+0x46>
    {
      return errorstate;
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfc:	e0a6      	b.n	800dd4c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2100      	movs	r1, #0
 800dc04:	4618      	mov	r0, r3
 800dc06:	f004 f802 	bl	8011c0e <SDMMC_GetResponse>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2104      	movs	r1, #4
 800dc16:	4618      	mov	r0, r3
 800dc18:	f003 fff9 	bl	8011c0e <SDMMC_GetResponse>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2108      	movs	r1, #8
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f003 fff0 	bl	8011c0e <SDMMC_GetResponse>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	210c      	movs	r1, #12
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f003 ffe7 	bl	8011c0e <SDMMC_GetResponse>
 800dc40:	4602      	mov	r2, r0
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d01d      	beq.n	800dc8a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dc4e:	e019      	b.n	800dc84 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f107 020a 	add.w	r2, r7, #10
 800dc58:	4611      	mov	r1, r2
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f004 fa2a 	bl	80120b4 <SDMMC_CmdSetRelAdd>
 800dc60:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800dc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <SD_InitCard+0xb4>
      {
        return errorstate;
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	e06f      	b.n	800dd4c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800dc6c:	f7f5 fcf8 	bl	8003660 <HAL_GetTick>
 800dc70:	4602      	mov	r2, r0
 800dc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	f241 3287 	movw	r2, #4999	; 0x1387
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d902      	bls.n	800dc84 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dc7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc82:	e063      	b.n	800dd4c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dc84:	897b      	ldrh	r3, [r7, #10]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0e2      	beq.n	800dc50 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	d036      	beq.n	800dd00 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dc92:	897b      	ldrh	r3, [r7, #10]
 800dc94:	461a      	mov	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dca2:	041b      	lsls	r3, r3, #16
 800dca4:	4619      	mov	r1, r3
 800dca6:	4610      	mov	r0, r2
 800dca8:	f004 f9e4 	bl	8012074 <SDMMC_CmdSendCSD>
 800dcac:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <SD_InitCard+0x100>
    {
      return errorstate;
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb6:	e049      	b.n	800dd4c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f003 ffa5 	bl	8011c0e <SDMMC_GetResponse>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2104      	movs	r1, #4
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f003 ff9c 	bl	8011c0e <SDMMC_GetResponse>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2108      	movs	r1, #8
 800dce2:	4618      	mov	r0, r3
 800dce4:	f003 ff93 	bl	8011c0e <SDMMC_GetResponse>
 800dce8:	4602      	mov	r2, r0
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	210c      	movs	r1, #12
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f003 ff8a 	bl	8011c0e <SDMMC_GetResponse>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2104      	movs	r1, #4
 800dd06:	4618      	mov	r0, r3
 800dd08:	f003 ff81 	bl	8011c0e <SDMMC_GetResponse>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	0d1a      	lsrs	r2, r3, #20
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dd14:	f107 030c 	add.w	r3, r7, #12
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7ff fb8c 	bl	800d438 <HAL_SD_GetCardCSD>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d002      	beq.n	800dd2c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd2a:	e00f      	b.n	800dd4c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd34:	041b      	lsls	r3, r3, #16
 800dd36:	4619      	mov	r1, r3
 800dd38:	4610      	mov	r0, r2
 800dd3a:	f004 f893 	bl	8011e64 <SDMMC_CmdSelDesel>
 800dd3e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <SD_InitCard+0x192>
  {
    return errorstate;
 800dd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd48:	e000      	b.n	800dd4c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3740      	adds	r7, #64	; 0x40
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800dd60:	2300      	movs	r3, #0
 800dd62:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800dd64:	2300      	movs	r3, #0
 800dd66:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f004 f89c 	bl	8011eaa <SDMMC_CmdGoIdleState>
 800dd72:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <SD_PowerON+0x2a>
  {
    return errorstate;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	e072      	b.n	800de64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f004 f8af 	bl	8011ee6 <SDMMC_CmdOperCond>
 800dd88:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd90:	d10d      	bne.n	800ddae <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f004 f884 	bl	8011eaa <SDMMC_CmdGoIdleState>
 800dda2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d004      	beq.n	800ddb4 <SD_PowerON+0x60>
    {
      return errorstate;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	e05a      	b.n	800de64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d137      	bne.n	800de2c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f004 f8af 	bl	8011f26 <SDMMC_CmdAppCommand>
 800ddc8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d02d      	beq.n	800de2c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ddd4:	e046      	b.n	800de64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2100      	movs	r1, #0
 800dddc:	4618      	mov	r0, r3
 800ddde:	f004 f8a2 	bl	8011f26 <SDMMC_CmdAppCommand>
 800dde2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <SD_PowerON+0x9a>
    {
      return errorstate;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	e03a      	b.n	800de64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	491e      	ldr	r1, [pc, #120]	; (800de6c <SD_PowerON+0x118>)
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f004 f8b9 	bl	8011f6c <SDMMC_CmdAppOperCommand>
 800ddfa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d002      	beq.n	800de08 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de06:	e02d      	b.n	800de64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2100      	movs	r1, #0
 800de0e:	4618      	mov	r0, r3
 800de10:	f003 fefd 	bl	8011c0e <SDMMC_GetResponse>
 800de14:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	0fdb      	lsrs	r3, r3, #31
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d101      	bne.n	800de22 <SD_PowerON+0xce>
 800de1e:	2301      	movs	r3, #1
 800de20:	e000      	b.n	800de24 <SD_PowerON+0xd0>
 800de22:	2300      	movs	r3, #0
 800de24:	613b      	str	r3, [r7, #16]

    count++;
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	3301      	adds	r3, #1
 800de2a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de32:	4293      	cmp	r3, r2
 800de34:	d802      	bhi.n	800de3c <SD_PowerON+0xe8>
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d0cc      	beq.n	800ddd6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de42:	4293      	cmp	r3, r2
 800de44:	d902      	bls.n	800de4c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800de46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de4a:	e00b      	b.n	800de64 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	c1100000 	.word	0xc1100000

0800de70 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b08c      	sub	sp, #48	; 0x30
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800de7a:	f7f5 fbf1 	bl	8003660 <HAL_GetTick>
 800de7e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2100      	movs	r1, #0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f003 febf 	bl	8011c0e <SDMMC_GetResponse>
 800de90:	4603      	mov	r3, r0
 800de92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de9a:	d102      	bne.n	800dea2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dea0:	e0b0      	b.n	800e004 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2140      	movs	r1, #64	; 0x40
 800dea8:	4618      	mov	r0, r3
 800deaa:	f003 feef 	bl	8011c8c <SDMMC_CmdBlockLength>
 800deae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800deb0:	6a3b      	ldr	r3, [r7, #32]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d005      	beq.n	800dec2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	e0a0      	b.n	800e004 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deca:	041b      	lsls	r3, r3, #16
 800decc:	4619      	mov	r1, r3
 800dece:	4610      	mov	r0, r2
 800ded0:	f004 f829 	bl	8011f26 <SDMMC_CmdAppCommand>
 800ded4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d005      	beq.n	800dee8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	e08d      	b.n	800e004 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dee8:	f04f 33ff 	mov.w	r3, #4294967295
 800deec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800deee:	2340      	movs	r3, #64	; 0x40
 800def0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800def2:	2360      	movs	r3, #96	; 0x60
 800def4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800def6:	2302      	movs	r3, #2
 800def8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800defa:	2300      	movs	r3, #0
 800defc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800defe:	2301      	movs	r3, #1
 800df00:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f107 0208 	add.w	r2, r7, #8
 800df0a:	4611      	mov	r1, r2
 800df0c:	4618      	mov	r0, r3
 800df0e:	f003 fe91 	bl	8011c34 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4618      	mov	r0, r3
 800df18:	f004 f911 	bl	801213e <SDMMC_CmdStatusRegister>
 800df1c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d02b      	beq.n	800df7c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	e069      	b.n	800e004 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d013      	beq.n	800df66 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800df3e:	2300      	movs	r3, #0
 800df40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df42:	e00d      	b.n	800df60 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4618      	mov	r0, r3
 800df4a:	f003 fdeb 	bl	8011b24 <SDMMC_ReadFIFO>
 800df4e:	4602      	mov	r2, r0
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	601a      	str	r2, [r3, #0]
        pData++;
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	3304      	adds	r3, #4
 800df58:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	3301      	adds	r3, #1
 800df5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	2b07      	cmp	r3, #7
 800df64:	d9ee      	bls.n	800df44 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df66:	f7f5 fb7b 	bl	8003660 <HAL_GetTick>
 800df6a:	4602      	mov	r2, r0
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df74:	d102      	bne.n	800df7c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800df76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df7a:	e043      	b.n	800e004 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df82:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800df86:	2b00      	cmp	r3, #0
 800df88:	d0d2      	beq.n	800df30 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df90:	f003 0308 	and.w	r3, r3, #8
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800df98:	2308      	movs	r3, #8
 800df9a:	e033      	b.n	800e004 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa2:	f003 0302 	and.w	r3, r3, #2
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dfaa:	2302      	movs	r3, #2
 800dfac:	e02a      	b.n	800e004 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb4:	f003 0320 	and.w	r3, r3, #32
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d017      	beq.n	800dfec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800dfbc:	2320      	movs	r3, #32
 800dfbe:	e021      	b.n	800e004 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f003 fdad 	bl	8011b24 <SDMMC_ReadFIFO>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfce:	601a      	str	r2, [r3, #0]
    pData++;
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dfd6:	f7f5 fb43 	bl	8003660 <HAL_GetTick>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe4:	d102      	bne.n	800dfec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dfe6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfea:	e00b      	b.n	800e004 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1e2      	bne.n	800dfc0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a03      	ldr	r2, [pc, #12]	; (800e00c <SD_SendSDStatus+0x19c>)
 800e000:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3730      	adds	r7, #48	; 0x30
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	18000f3a 	.word	0x18000f3a

0800e010 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d102      	bne.n	800e026 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e024:	e018      	b.n	800e058 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e02e:	041b      	lsls	r3, r3, #16
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f004 f860 	bl	80120f8 <SDMMC_CmdSendStatus>
 800e038:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d001      	beq.n	800e044 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	e009      	b.n	800e058 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2100      	movs	r1, #0
 800e04a:	4618      	mov	r0, r3
 800e04c:	f003 fddf 	bl	8011c0e <SDMMC_GetResponse>
 800e050:	4602      	mov	r2, r0
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e068:	2300      	movs	r3, #0
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	2300      	movs	r3, #0
 800e06e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2100      	movs	r1, #0
 800e076:	4618      	mov	r0, r3
 800e078:	f003 fdc9 	bl	8011c0e <SDMMC_GetResponse>
 800e07c:	4603      	mov	r3, r0
 800e07e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e086:	d102      	bne.n	800e08e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e08c:	e02f      	b.n	800e0ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e08e:	f107 030c 	add.w	r3, r7, #12
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 f879 	bl	800e18c <SD_FindSCR>
 800e09a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	e023      	b.n	800e0ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d01c      	beq.n	800e0ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b8:	041b      	lsls	r3, r3, #16
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	4610      	mov	r0, r2
 800e0be:	f003 ff32 	bl	8011f26 <SDMMC_CmdAppCommand>
 800e0c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	e00f      	b.n	800e0ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2102      	movs	r1, #2
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f003 ff69 	bl	8011fac <SDMMC_CmdBusWidth>
 800e0da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d001      	beq.n	800e0e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	e003      	b.n	800e0ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e001      	b.n	800e0ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e0ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b086      	sub	sp, #24
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e0fe:	2300      	movs	r3, #0
 800e100:	60fb      	str	r3, [r7, #12]
 800e102:	2300      	movs	r3, #0
 800e104:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2100      	movs	r1, #0
 800e10c:	4618      	mov	r0, r3
 800e10e:	f003 fd7e 	bl	8011c0e <SDMMC_GetResponse>
 800e112:	4603      	mov	r3, r0
 800e114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e11c:	d102      	bne.n	800e124 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e11e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e122:	e02f      	b.n	800e184 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e124:	f107 030c 	add.w	r3, r7, #12
 800e128:	4619      	mov	r1, r3
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f82e 	bl	800e18c <SD_FindSCR>
 800e130:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	e023      	b.n	800e184 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e142:	2b00      	cmp	r3, #0
 800e144:	d01c      	beq.n	800e180 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e14e:	041b      	lsls	r3, r3, #16
 800e150:	4619      	mov	r1, r3
 800e152:	4610      	mov	r0, r2
 800e154:	f003 fee7 	bl	8011f26 <SDMMC_CmdAppCommand>
 800e158:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	e00f      	b.n	800e184 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2100      	movs	r1, #0
 800e16a:	4618      	mov	r0, r3
 800e16c:	f003 ff1e 	bl	8011fac <SDMMC_CmdBusWidth>
 800e170:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	e003      	b.n	800e184 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e17c:	2300      	movs	r3, #0
 800e17e:	e001      	b.n	800e184 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e180:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e184:	4618      	mov	r0, r3
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08e      	sub	sp, #56	; 0x38
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e196:	f7f5 fa63 	bl	8003660 <HAL_GetTick>
 800e19a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e19c:	2300      	movs	r3, #0
 800e19e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	60bb      	str	r3, [r7, #8]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2108      	movs	r1, #8
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f003 fd6a 	bl	8011c8c <SDMMC_CmdBlockLength>
 800e1b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c2:	e0ad      	b.n	800e320 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1cc:	041b      	lsls	r3, r3, #16
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f003 fea8 	bl	8011f26 <SDMMC_CmdAppCommand>
 800e1d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e0:	e09e      	b.n	800e320 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e1ec:	2330      	movs	r3, #48	; 0x30
 800e1ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e1f0:	2302      	movs	r3, #2
 800e1f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f107 0210 	add.w	r2, r7, #16
 800e204:	4611      	mov	r1, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f003 fd14 	bl	8011c34 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4618      	mov	r0, r3
 800e212:	f003 feee 	bl	8011ff2 <SDMMC_CmdSendSCR>
 800e216:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d027      	beq.n	800e26e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e220:	e07e      	b.n	800e320 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d113      	bne.n	800e258 <SD_FindSCR+0xcc>
 800e230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e232:	2b00      	cmp	r3, #0
 800e234:	d110      	bne.n	800e258 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4618      	mov	r0, r3
 800e23c:	f003 fc72 	bl	8011b24 <SDMMC_ReadFIFO>
 800e240:	4603      	mov	r3, r0
 800e242:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4618      	mov	r0, r3
 800e24a:	f003 fc6b 	bl	8011b24 <SDMMC_ReadFIFO>
 800e24e:	4603      	mov	r3, r0
 800e250:	60fb      	str	r3, [r7, #12]
      index++;
 800e252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e254:	3301      	adds	r3, #1
 800e256:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e258:	f7f5 fa02 	bl	8003660 <HAL_GetTick>
 800e25c:	4602      	mov	r2, r0
 800e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e266:	d102      	bne.n	800e26e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e26c:	e058      	b.n	800e320 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e274:	f240 532a 	movw	r3, #1322	; 0x52a
 800e278:	4013      	ands	r3, r2
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d0d1      	beq.n	800e222 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e284:	f003 0308 	and.w	r3, r3, #8
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2208      	movs	r2, #8
 800e292:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e294:	2308      	movs	r3, #8
 800e296:	e043      	b.n	800e320 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e29e:	f003 0302 	and.w	r3, r3, #2
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d005      	beq.n	800e2b2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e036      	b.n	800e320 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b8:	f003 0320 	and.w	r3, r3, #32
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e2c8:	2320      	movs	r3, #32
 800e2ca:	e029      	b.n	800e320 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a15      	ldr	r2, [pc, #84]	; (800e328 <SD_FindSCR+0x19c>)
 800e2d2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	061a      	lsls	r2, r3, #24
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	021b      	lsls	r3, r3, #8
 800e2dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e2e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	0a1b      	lsrs	r3, r3, #8
 800e2e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e2ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	0e1b      	lsrs	r3, r3, #24
 800e2f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	601a      	str	r2, [r3, #0]
    scr++;
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	061a      	lsls	r2, r3, #24
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	021b      	lsls	r3, r3, #8
 800e304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e308:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	0a1b      	lsrs	r3, r3, #8
 800e30e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e312:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	0e1b      	lsrs	r3, r3, #24
 800e318:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e31e:	2300      	movs	r3, #0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3738      	adds	r7, #56	; 0x38
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	18000f3a 	.word	0x18000f3a

0800e32c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e338:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33e:	2b1f      	cmp	r3, #31
 800e340:	d936      	bls.n	800e3b0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e342:	2300      	movs	r3, #0
 800e344:	617b      	str	r3, [r7, #20]
 800e346:	e027      	b.n	800e398 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f003 fbe9 	bl	8011b24 <SDMMC_ReadFIFO>
 800e352:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	b2da      	uxtb	r2, r3
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	3301      	adds	r3, #1
 800e360:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	0a1b      	lsrs	r3, r3, #8
 800e366:	b2da      	uxtb	r2, r3
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	3301      	adds	r3, #1
 800e370:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	0c1b      	lsrs	r3, r3, #16
 800e376:	b2da      	uxtb	r2, r3
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	3301      	adds	r3, #1
 800e380:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	0e1b      	lsrs	r3, r3, #24
 800e386:	b2da      	uxtb	r2, r3
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	3301      	adds	r3, #1
 800e390:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	3301      	adds	r3, #1
 800e396:	617b      	str	r3, [r7, #20]
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	2b07      	cmp	r3, #7
 800e39c:	d9d4      	bls.n	800e348 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	693a      	ldr	r2, [r7, #16]
 800e3a2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a8:	f1a3 0220 	sub.w	r2, r3, #32
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e3b0:	bf00      	nop
 800e3b2:	3718      	adds	r7, #24
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	69db      	ldr	r3, [r3, #28]
 800e3c4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6a1b      	ldr	r3, [r3, #32]
 800e3ca:	2b1f      	cmp	r3, #31
 800e3cc:	d93a      	bls.n	800e444 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	617b      	str	r3, [r7, #20]
 800e3d2:	e02b      	b.n	800e42c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	021a      	lsls	r2, r3, #8
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	041a      	lsls	r2, r3, #16
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	3301      	adds	r3, #1
 800e402:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	061a      	lsls	r2, r3, #24
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	3301      	adds	r3, #1
 800e414:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f107 020c 	add.w	r2, r7, #12
 800e41e:	4611      	mov	r1, r2
 800e420:	4618      	mov	r0, r3
 800e422:	f003 fb8c 	bl	8011b3e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	3301      	adds	r3, #1
 800e42a:	617b      	str	r3, [r7, #20]
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	2b07      	cmp	r3, #7
 800e430:	d9d0      	bls.n	800e3d4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a1b      	ldr	r3, [r3, #32]
 800e43c:	f1a3 0220 	sub.w	r2, r3, #32
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	621a      	str	r2, [r3, #32]
  }
}
 800e444:	bf00      	nop
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e10f      	b.n	800e6ce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a87      	ldr	r2, [pc, #540]	; (800e6d8 <HAL_SPI_Init+0x23c>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d00f      	beq.n	800e4de <HAL_SPI_Init+0x42>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a86      	ldr	r2, [pc, #536]	; (800e6dc <HAL_SPI_Init+0x240>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d00a      	beq.n	800e4de <HAL_SPI_Init+0x42>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a84      	ldr	r2, [pc, #528]	; (800e6e0 <HAL_SPI_Init+0x244>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d005      	beq.n	800e4de <HAL_SPI_Init+0x42>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	2b0f      	cmp	r3, #15
 800e4d8:	d901      	bls.n	800e4de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e0f7      	b.n	800e6ce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 fd5a 	bl	800ef98 <SPI_GetPacketSize>
 800e4e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a7b      	ldr	r2, [pc, #492]	; (800e6d8 <HAL_SPI_Init+0x23c>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d00c      	beq.n	800e50a <HAL_SPI_Init+0x6e>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a79      	ldr	r2, [pc, #484]	; (800e6dc <HAL_SPI_Init+0x240>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d007      	beq.n	800e50a <HAL_SPI_Init+0x6e>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4a78      	ldr	r2, [pc, #480]	; (800e6e0 <HAL_SPI_Init+0x244>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d002      	beq.n	800e50a <HAL_SPI_Init+0x6e>
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2b08      	cmp	r3, #8
 800e508:	d811      	bhi.n	800e52e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e50e:	4a72      	ldr	r2, [pc, #456]	; (800e6d8 <HAL_SPI_Init+0x23c>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d009      	beq.n	800e528 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a70      	ldr	r2, [pc, #448]	; (800e6dc <HAL_SPI_Init+0x240>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d004      	beq.n	800e528 <HAL_SPI_Init+0x8c>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4a6f      	ldr	r2, [pc, #444]	; (800e6e0 <HAL_SPI_Init+0x244>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d104      	bne.n	800e532 <HAL_SPI_Init+0x96>
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2b10      	cmp	r3, #16
 800e52c:	d901      	bls.n	800e532 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
 800e530:	e0cd      	b.n	800e6ce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7f4 f9fa 	bl	8002940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2202      	movs	r2, #2
 800e550:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f022 0201 	bic.w	r2, r2, #1
 800e562:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e56e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e578:	d119      	bne.n	800e5ae <HAL_SPI_Init+0x112>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e582:	d103      	bne.n	800e58c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d008      	beq.n	800e59e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e590:	2b00      	cmp	r3, #0
 800e592:	d10c      	bne.n	800e5ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e59c:	d107      	bne.n	800e5ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e5ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00f      	beq.n	800e5da <HAL_SPI_Init+0x13e>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	2b06      	cmp	r3, #6
 800e5c0:	d90b      	bls.n	800e5da <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	430a      	orrs	r2, r1
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	e007      	b.n	800e5ea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e5e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	69da      	ldr	r2, [r3, #28]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f2:	431a      	orrs	r2, r3
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	431a      	orrs	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5fc:	ea42 0103 	orr.w	r1, r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	68da      	ldr	r2, [r3, #12]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	430a      	orrs	r2, r1
 800e60a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e614:	431a      	orrs	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61a:	431a      	orrs	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	699b      	ldr	r3, [r3, #24]
 800e620:	431a      	orrs	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	431a      	orrs	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	695b      	ldr	r3, [r3, #20]
 800e62c:	431a      	orrs	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a1b      	ldr	r3, [r3, #32]
 800e632:	431a      	orrs	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	431a      	orrs	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e63e:	431a      	orrs	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	431a      	orrs	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e64a:	ea42 0103 	orr.w	r1, r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	430a      	orrs	r2, r1
 800e658:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d113      	bne.n	800e68a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e674:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e688:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f022 0201 	bic.w	r2, r2, #1
 800e698:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00a      	beq.n	800e6bc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	430a      	orrs	r2, r1
 800e6ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	40013000 	.word	0x40013000
 800e6dc:	40003800 	.word	0x40003800
 800e6e0:	40003c00 	.word	0x40003c00

0800e6e4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b08a      	sub	sp, #40	; 0x28
 800e6e8:	af02      	add	r7, sp, #8
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	603b      	str	r3, [r7, #0]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3320      	adds	r3, #32
 800e6fa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e706:	2b01      	cmp	r3, #1
 800e708:	d101      	bne.n	800e70e <HAL_SPI_Transmit+0x2a>
 800e70a:	2302      	movs	r3, #2
 800e70c:	e1e1      	b.n	800ead2 <HAL_SPI_Transmit+0x3ee>
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2201      	movs	r2, #1
 800e712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e716:	f7f4 ffa3 	bl	8003660 <HAL_GetTick>
 800e71a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b01      	cmp	r3, #1
 800e726:	d007      	beq.n	800e738 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e728:	2302      	movs	r3, #2
 800e72a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e734:	7efb      	ldrb	r3, [r7, #27]
 800e736:	e1cc      	b.n	800ead2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <HAL_SPI_Transmit+0x60>
 800e73e:	88fb      	ldrh	r3, [r7, #6]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d107      	bne.n	800e754 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e744:	2301      	movs	r3, #1
 800e746:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e750:	7efb      	ldrb	r3, [r7, #27]
 800e752:	e1be      	b.n	800ead2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2203      	movs	r2, #3
 800e758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	88fa      	ldrh	r2, [r7, #6]
 800e76e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	88fa      	ldrh	r2, [r7, #6]
 800e776:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2200      	movs	r2, #0
 800e794:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e7a4:	d108      	bne.n	800e7b8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	e009      	b.n	800e7cc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e7ca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	4b96      	ldr	r3, [pc, #600]	; (800ea2c <HAL_SPI_Transmit+0x348>)
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	88f9      	ldrh	r1, [r7, #6]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	6812      	ldr	r2, [r2, #0]
 800e7dc:	430b      	orrs	r3, r1
 800e7de:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f042 0201 	orr.w	r2, r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e7f8:	d107      	bne.n	800e80a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e808:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	2b0f      	cmp	r3, #15
 800e810:	d947      	bls.n	800e8a2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e812:	e03f      	b.n	800e894 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	695b      	ldr	r3, [r3, #20]
 800e81a:	f003 0302 	and.w	r3, r3, #2
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d114      	bne.n	800e84c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	6812      	ldr	r2, [r2, #0]
 800e82c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e832:	1d1a      	adds	r2, r3, #4
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e83e:	b29b      	uxth	r3, r3
 800e840:	3b01      	subs	r3, #1
 800e842:	b29a      	uxth	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e84a:	e023      	b.n	800e894 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e84c:	f7f4 ff08 	bl	8003660 <HAL_GetTick>
 800e850:	4602      	mov	r2, r0
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d803      	bhi.n	800e864 <HAL_SPI_Transmit+0x180>
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e862:	d102      	bne.n	800e86a <HAL_SPI_Transmit+0x186>
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d114      	bne.n	800e894 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f000 fac6 	bl	800edfc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e87e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e890:	2303      	movs	r3, #3
 800e892:	e11e      	b.n	800ead2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1b9      	bne.n	800e814 <HAL_SPI_Transmit+0x130>
 800e8a0:	e0f1      	b.n	800ea86 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	2b07      	cmp	r3, #7
 800e8a8:	f240 80e6 	bls.w	800ea78 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e8ac:	e05d      	b.n	800e96a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	695b      	ldr	r3, [r3, #20]
 800e8b4:	f003 0302 	and.w	r3, r3, #2
 800e8b8:	2b02      	cmp	r3, #2
 800e8ba:	d132      	bne.n	800e922 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d918      	bls.n	800e8fa <HAL_SPI_Transmit+0x216>
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d014      	beq.n	800e8fa <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6812      	ldr	r2, [r2, #0]
 800e8da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8e0:	1d1a      	adds	r2, r3, #4
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	3b02      	subs	r3, #2
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e8f8:	e037      	b.n	800e96a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8fe:	881a      	ldrh	r2, [r3, #0]
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e908:	1c9a      	adds	r2, r3, #2
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e914:	b29b      	uxth	r3, r3
 800e916:	3b01      	subs	r3, #1
 800e918:	b29a      	uxth	r2, r3
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e920:	e023      	b.n	800e96a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e922:	f7f4 fe9d 	bl	8003660 <HAL_GetTick>
 800e926:	4602      	mov	r2, r0
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d803      	bhi.n	800e93a <HAL_SPI_Transmit+0x256>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e938:	d102      	bne.n	800e940 <HAL_SPI_Transmit+0x25c>
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d114      	bne.n	800e96a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f000 fa5b 	bl	800edfc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e966:	2303      	movs	r3, #3
 800e968:	e0b3      	b.n	800ead2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e970:	b29b      	uxth	r3, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	d19b      	bne.n	800e8ae <HAL_SPI_Transmit+0x1ca>
 800e976:	e086      	b.n	800ea86 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	695b      	ldr	r3, [r3, #20]
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b02      	cmp	r3, #2
 800e984:	d154      	bne.n	800ea30 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	2b03      	cmp	r3, #3
 800e990:	d918      	bls.n	800e9c4 <HAL_SPI_Transmit+0x2e0>
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e996:	2b40      	cmp	r3, #64	; 0x40
 800e998:	d914      	bls.n	800e9c4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	6812      	ldr	r2, [r2, #0]
 800e9a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9aa:	1d1a      	adds	r2, r3, #4
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	3b04      	subs	r3, #4
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e9c2:	e059      	b.n	800ea78 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d917      	bls.n	800ea00 <HAL_SPI_Transmit+0x31c>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d013      	beq.n	800ea00 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9dc:	881a      	ldrh	r2, [r3, #0]
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9e6:	1c9a      	adds	r2, r3, #2
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	3b02      	subs	r3, #2
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e9fe:	e03b      	b.n	800ea78 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3320      	adds	r3, #32
 800ea0a:	7812      	ldrb	r2, [r2, #0]
 800ea0c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	3b01      	subs	r3, #1
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ea2a:	e025      	b.n	800ea78 <HAL_SPI_Transmit+0x394>
 800ea2c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea30:	f7f4 fe16 	bl	8003660 <HAL_GetTick>
 800ea34:	4602      	mov	r2, r0
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d803      	bhi.n	800ea48 <HAL_SPI_Transmit+0x364>
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea46:	d102      	bne.n	800ea4e <HAL_SPI_Transmit+0x36a>
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d114      	bne.n	800ea78 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f000 f9d4 	bl	800edfc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e02c      	b.n	800ead2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f47f af79 	bne.w	800e978 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	2108      	movs	r1, #8
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f000 fa53 	bl	800ef3c <SPI_WaitOnFlagUntilTimeout>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d007      	beq.n	800eaac <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaa2:	f043 0220 	orr.w	r2, r3, #32
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f000 f9a5 	bl	800edfc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d001      	beq.n	800ead0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800eacc:	2301      	movs	r3, #1
 800eace:	e000      	b.n	800ead2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ead0:	7efb      	ldrb	r3, [r7, #27]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3720      	adds	r7, #32
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop

0800eadc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	603b      	str	r3, [r7, #0]
 800eae8:	4613      	mov	r3, r2
 800eaea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eaec:	2300      	movs	r3, #0
 800eaee:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	3330      	adds	r3, #48	; 0x30
 800eaf6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d101      	bne.n	800eb06 <HAL_SPI_Receive+0x2a>
 800eb02:	2302      	movs	r3, #2
 800eb04:	e173      	b.n	800edee <HAL_SPI_Receive+0x312>
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb0e:	f7f4 fda7 	bl	8003660 <HAL_GetTick>
 800eb12:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d007      	beq.n	800eb30 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800eb20:	2302      	movs	r3, #2
 800eb22:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb2c:	7ffb      	ldrb	r3, [r7, #31]
 800eb2e:	e15e      	b.n	800edee <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d002      	beq.n	800eb3c <HAL_SPI_Receive+0x60>
 800eb36:	88fb      	ldrh	r3, [r7, #6]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d107      	bne.n	800eb4c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb48:	7ffb      	ldrb	r3, [r7, #31]
 800eb4a:	e150      	b.n	800edee <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2204      	movs	r2, #4
 800eb50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	88fa      	ldrh	r2, [r7, #6]
 800eb66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	88fa      	ldrh	r2, [r7, #6]
 800eb6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eb9c:	d108      	bne.n	800ebb0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	e009      	b.n	800ebc4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ebc2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	685a      	ldr	r2, [r3, #4]
 800ebca:	4b8b      	ldr	r3, [pc, #556]	; (800edf8 <HAL_SPI_Receive+0x31c>)
 800ebcc:	4013      	ands	r3, r2
 800ebce:	88f9      	ldrh	r1, [r7, #6]
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	6812      	ldr	r2, [r2, #0]
 800ebd4:	430b      	orrs	r3, r1
 800ebd6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f042 0201 	orr.w	r2, r2, #1
 800ebe6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebf0:	d107      	bne.n	800ec02 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	2b0f      	cmp	r3, #15
 800ec08:	d948      	bls.n	800ec9c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ec0a:	e040      	b.n	800ec8e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	695a      	ldr	r2, [r3, #20]
 800ec12:	f248 0308 	movw	r3, #32776	; 0x8008
 800ec16:	4013      	ands	r3, r2
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d014      	beq.n	800ec46 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ec26:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec2c:	1d1a      	adds	r2, r3, #4
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ec44:	e023      	b.n	800ec8e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec46:	f7f4 fd0b 	bl	8003660 <HAL_GetTick>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d803      	bhi.n	800ec5e <HAL_SPI_Receive+0x182>
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5c:	d102      	bne.n	800ec64 <HAL_SPI_Receive+0x188>
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d114      	bne.n	800ec8e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f000 f8c9 	bl	800edfc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2201      	movs	r2, #1
 800ec86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	e0af      	b.n	800edee <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1b8      	bne.n	800ec0c <HAL_SPI_Receive+0x130>
 800ec9a:	e095      	b.n	800edc8 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	2b07      	cmp	r3, #7
 800eca2:	f240 808b 	bls.w	800edbc <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800eca6:	e03f      	b.n	800ed28 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	f003 0301 	and.w	r3, r3, #1
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d114      	bne.n	800ece0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	8812      	ldrh	r2, [r2, #0]
 800ecbe:	b292      	uxth	r2, r2
 800ecc0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecc6:	1c9a      	adds	r2, r3, #2
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ecde:	e023      	b.n	800ed28 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ece0:	f7f4 fcbe 	bl	8003660 <HAL_GetTick>
 800ece4:	4602      	mov	r2, r0
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d803      	bhi.n	800ecf8 <HAL_SPI_Receive+0x21c>
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf6:	d102      	bne.n	800ecfe <HAL_SPI_Receive+0x222>
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d114      	bne.n	800ed28 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f000 f87c 	bl	800edfc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed24:	2303      	movs	r3, #3
 800ed26:	e062      	b.n	800edee <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1b9      	bne.n	800eca8 <HAL_SPI_Receive+0x1cc>
 800ed34:	e048      	b.n	800edc8 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d117      	bne.n	800ed74 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed50:	7812      	ldrb	r2, [r2, #0]
 800ed52:	b2d2      	uxtb	r2, r2
 800ed54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ed72:	e023      	b.n	800edbc <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed74:	f7f4 fc74 	bl	8003660 <HAL_GetTick>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	1ad3      	subs	r3, r2, r3
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d803      	bhi.n	800ed8c <HAL_SPI_Receive+0x2b0>
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed8a:	d102      	bne.n	800ed92 <HAL_SPI_Receive+0x2b6>
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d114      	bne.n	800edbc <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed92:	68f8      	ldr	r0, [r7, #12]
 800ed94:	f000 f832 	bl	800edfc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eda6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edb8:	2303      	movs	r3, #3
 800edba:	e018      	b.n	800edee <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1b6      	bne.n	800ed36 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f000 f817 	bl	800edfc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	e000      	b.n	800edee <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800edec:	7ffb      	ldrb	r3, [r7, #31]
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3720      	adds	r7, #32
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	ffff0000 	.word	0xffff0000

0800edfc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	699a      	ldr	r2, [r3, #24]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f042 0208 	orr.w	r2, r2, #8
 800ee1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	699a      	ldr	r2, [r3, #24]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f042 0210 	orr.w	r2, r2, #16
 800ee2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f022 0201 	bic.w	r2, r2, #1
 800ee3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6919      	ldr	r1, [r3, #16]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	4b3c      	ldr	r3, [pc, #240]	; (800ef38 <SPI_CloseTransfer+0x13c>)
 800ee48:	400b      	ands	r3, r1
 800ee4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	689a      	ldr	r2, [r3, #8]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ee5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b04      	cmp	r3, #4
 800ee66:	d014      	beq.n	800ee92 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f003 0320 	and.w	r3, r3, #32
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00f      	beq.n	800ee92 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	699a      	ldr	r2, [r3, #24]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f042 0220 	orr.w	r2, r2, #32
 800ee90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d014      	beq.n	800eec8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00f      	beq.n	800eec8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeae:	f043 0204 	orr.w	r2, r3, #4
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	699a      	ldr	r2, [r3, #24]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eec6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00f      	beq.n	800eef2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eed8:	f043 0201 	orr.w	r2, r3, #1
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	699a      	ldr	r2, [r3, #24]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eef0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00f      	beq.n	800ef1c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef02:	f043 0208 	orr.w	r2, r3, #8
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	699a      	ldr	r2, [r3, #24]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ef2c:	bf00      	nop
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr
 800ef38:	fffffc90 	.word	0xfffffc90

0800ef3c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	603b      	str	r3, [r7, #0]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ef4c:	e010      	b.n	800ef70 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef4e:	f7f4 fb87 	bl	8003660 <HAL_GetTick>
 800ef52:	4602      	mov	r2, r0
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	683a      	ldr	r2, [r7, #0]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d803      	bhi.n	800ef66 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef64:	d102      	bne.n	800ef6c <SPI_WaitOnFlagUntilTimeout+0x30>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	e00f      	b.n	800ef90 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	695a      	ldr	r2, [r3, #20]
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	4013      	ands	r3, r2
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	bf0c      	ite	eq
 800ef80:	2301      	moveq	r3, #1
 800ef82:	2300      	movne	r3, #0
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	461a      	mov	r2, r3
 800ef88:	79fb      	ldrb	r3, [r7, #7]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d0df      	beq.n	800ef4e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa4:	095b      	lsrs	r3, r3, #5
 800efa6:	3301      	adds	r3, #1
 800efa8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	3301      	adds	r3, #1
 800efb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	3307      	adds	r3, #7
 800efb6:	08db      	lsrs	r3, r3, #3
 800efb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	68fa      	ldr	r2, [r7, #12]
 800efbe:	fb02 f303 	mul.w	r3, r2, r3
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3714      	adds	r7, #20
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr

0800efce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d101      	bne.n	800efe0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efdc:	2301      	movs	r3, #1
 800efde:	e049      	b.n	800f074 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7f3 fef5 	bl	8002de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2202      	movs	r2, #2
 800effe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	3304      	adds	r3, #4
 800f00a:	4619      	mov	r1, r3
 800f00c:	4610      	mov	r0, r2
 800f00e:	f000 ff29 	bl	800fe64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2201      	movs	r2, #1
 800f01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2201      	movs	r2, #1
 800f026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2201      	movs	r2, #1
 800f036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2201      	movs	r2, #1
 800f04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2201      	movs	r2, #1
 800f056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2201      	movs	r2, #1
 800f05e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2201      	movs	r2, #1
 800f066:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2201      	movs	r2, #1
 800f06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d101      	bne.n	800f08e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f08a:	2301      	movs	r3, #1
 800f08c:	e049      	b.n	800f122 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b00      	cmp	r3, #0
 800f098:	d106      	bne.n	800f0a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7f3 fd08 	bl	8002ab8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	3304      	adds	r3, #4
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	4610      	mov	r0, r2
 800f0bc:	f000 fed2 	bl	800fe64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2201      	movs	r2, #1
 800f11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
	...

0800f12c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d109      	bne.n	800f150 <HAL_TIM_PWM_Start+0x24>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f142:	b2db      	uxtb	r3, r3
 800f144:	2b01      	cmp	r3, #1
 800f146:	bf14      	ite	ne
 800f148:	2301      	movne	r3, #1
 800f14a:	2300      	moveq	r3, #0
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	e03c      	b.n	800f1ca <HAL_TIM_PWM_Start+0x9e>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2b04      	cmp	r3, #4
 800f154:	d109      	bne.n	800f16a <HAL_TIM_PWM_Start+0x3e>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	2b01      	cmp	r3, #1
 800f160:	bf14      	ite	ne
 800f162:	2301      	movne	r3, #1
 800f164:	2300      	moveq	r3, #0
 800f166:	b2db      	uxtb	r3, r3
 800f168:	e02f      	b.n	800f1ca <HAL_TIM_PWM_Start+0x9e>
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	2b08      	cmp	r3, #8
 800f16e:	d109      	bne.n	800f184 <HAL_TIM_PWM_Start+0x58>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b01      	cmp	r3, #1
 800f17a:	bf14      	ite	ne
 800f17c:	2301      	movne	r3, #1
 800f17e:	2300      	moveq	r3, #0
 800f180:	b2db      	uxtb	r3, r3
 800f182:	e022      	b.n	800f1ca <HAL_TIM_PWM_Start+0x9e>
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	2b0c      	cmp	r3, #12
 800f188:	d109      	bne.n	800f19e <HAL_TIM_PWM_Start+0x72>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f190:	b2db      	uxtb	r3, r3
 800f192:	2b01      	cmp	r3, #1
 800f194:	bf14      	ite	ne
 800f196:	2301      	movne	r3, #1
 800f198:	2300      	moveq	r3, #0
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	e015      	b.n	800f1ca <HAL_TIM_PWM_Start+0x9e>
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b10      	cmp	r3, #16
 800f1a2:	d109      	bne.n	800f1b8 <HAL_TIM_PWM_Start+0x8c>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	bf14      	ite	ne
 800f1b0:	2301      	movne	r3, #1
 800f1b2:	2300      	moveq	r3, #0
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	e008      	b.n	800f1ca <HAL_TIM_PWM_Start+0x9e>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	bf14      	ite	ne
 800f1c4:	2301      	movne	r3, #1
 800f1c6:	2300      	moveq	r3, #0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e0ab      	b.n	800f32a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d104      	bne.n	800f1e2 <HAL_TIM_PWM_Start+0xb6>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2202      	movs	r2, #2
 800f1dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f1e0:	e023      	b.n	800f22a <HAL_TIM_PWM_Start+0xfe>
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	2b04      	cmp	r3, #4
 800f1e6:	d104      	bne.n	800f1f2 <HAL_TIM_PWM_Start+0xc6>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1f0:	e01b      	b.n	800f22a <HAL_TIM_PWM_Start+0xfe>
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	2b08      	cmp	r3, #8
 800f1f6:	d104      	bne.n	800f202 <HAL_TIM_PWM_Start+0xd6>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f200:	e013      	b.n	800f22a <HAL_TIM_PWM_Start+0xfe>
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	2b0c      	cmp	r3, #12
 800f206:	d104      	bne.n	800f212 <HAL_TIM_PWM_Start+0xe6>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2202      	movs	r2, #2
 800f20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f210:	e00b      	b.n	800f22a <HAL_TIM_PWM_Start+0xfe>
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	2b10      	cmp	r3, #16
 800f216:	d104      	bne.n	800f222 <HAL_TIM_PWM_Start+0xf6>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2202      	movs	r2, #2
 800f21c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f220:	e003      	b.n	800f22a <HAL_TIM_PWM_Start+0xfe>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2202      	movs	r2, #2
 800f226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2201      	movs	r2, #1
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	4618      	mov	r0, r3
 800f234:	f001 f992 	bl	801055c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a3d      	ldr	r2, [pc, #244]	; (800f334 <HAL_TIM_PWM_Start+0x208>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d013      	beq.n	800f26a <HAL_TIM_PWM_Start+0x13e>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a3c      	ldr	r2, [pc, #240]	; (800f338 <HAL_TIM_PWM_Start+0x20c>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d00e      	beq.n	800f26a <HAL_TIM_PWM_Start+0x13e>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a3a      	ldr	r2, [pc, #232]	; (800f33c <HAL_TIM_PWM_Start+0x210>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d009      	beq.n	800f26a <HAL_TIM_PWM_Start+0x13e>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a39      	ldr	r2, [pc, #228]	; (800f340 <HAL_TIM_PWM_Start+0x214>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d004      	beq.n	800f26a <HAL_TIM_PWM_Start+0x13e>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a37      	ldr	r2, [pc, #220]	; (800f344 <HAL_TIM_PWM_Start+0x218>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d101      	bne.n	800f26e <HAL_TIM_PWM_Start+0x142>
 800f26a:	2301      	movs	r3, #1
 800f26c:	e000      	b.n	800f270 <HAL_TIM_PWM_Start+0x144>
 800f26e:	2300      	movs	r3, #0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d007      	beq.n	800f284 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f282:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a2a      	ldr	r2, [pc, #168]	; (800f334 <HAL_TIM_PWM_Start+0x208>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d02c      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f296:	d027      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a2a      	ldr	r2, [pc, #168]	; (800f348 <HAL_TIM_PWM_Start+0x21c>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d022      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a29      	ldr	r2, [pc, #164]	; (800f34c <HAL_TIM_PWM_Start+0x220>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d01d      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4a27      	ldr	r2, [pc, #156]	; (800f350 <HAL_TIM_PWM_Start+0x224>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d018      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a1f      	ldr	r2, [pc, #124]	; (800f338 <HAL_TIM_PWM_Start+0x20c>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d013      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a23      	ldr	r2, [pc, #140]	; (800f354 <HAL_TIM_PWM_Start+0x228>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d00e      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a1b      	ldr	r2, [pc, #108]	; (800f33c <HAL_TIM_PWM_Start+0x210>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d009      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a1f      	ldr	r2, [pc, #124]	; (800f358 <HAL_TIM_PWM_Start+0x22c>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d004      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x1bc>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a1e      	ldr	r2, [pc, #120]	; (800f35c <HAL_TIM_PWM_Start+0x230>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d115      	bne.n	800f314 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	689a      	ldr	r2, [r3, #8]
 800f2ee:	4b1c      	ldr	r3, [pc, #112]	; (800f360 <HAL_TIM_PWM_Start+0x234>)
 800f2f0:	4013      	ands	r3, r2
 800f2f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2b06      	cmp	r3, #6
 800f2f8:	d015      	beq.n	800f326 <HAL_TIM_PWM_Start+0x1fa>
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f300:	d011      	beq.n	800f326 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f042 0201 	orr.w	r2, r2, #1
 800f310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f312:	e008      	b.n	800f326 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f042 0201 	orr.w	r2, r2, #1
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	e000      	b.n	800f328 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	40010000 	.word	0x40010000
 800f338:	40010400 	.word	0x40010400
 800f33c:	40014000 	.word	0x40014000
 800f340:	40014400 	.word	0x40014400
 800f344:	40014800 	.word	0x40014800
 800f348:	40000400 	.word	0x40000400
 800f34c:	40000800 	.word	0x40000800
 800f350:	40000c00 	.word	0x40000c00
 800f354:	40001800 	.word	0x40001800
 800f358:	4000e000 	.word	0x4000e000
 800f35c:	4000e400 	.word	0x4000e400
 800f360:	00010007 	.word	0x00010007

0800f364 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f372:	2300      	movs	r3, #0
 800f374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d109      	bne.n	800f390 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f382:	b2db      	uxtb	r3, r3
 800f384:	2b02      	cmp	r3, #2
 800f386:	bf0c      	ite	eq
 800f388:	2301      	moveq	r3, #1
 800f38a:	2300      	movne	r3, #0
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	e03c      	b.n	800f40a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2b04      	cmp	r3, #4
 800f394:	d109      	bne.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x46>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	bf0c      	ite	eq
 800f3a2:	2301      	moveq	r3, #1
 800f3a4:	2300      	movne	r3, #0
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	e02f      	b.n	800f40a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2b08      	cmp	r3, #8
 800f3ae:	d109      	bne.n	800f3c4 <HAL_TIM_PWM_Start_DMA+0x60>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	bf0c      	ite	eq
 800f3bc:	2301      	moveq	r3, #1
 800f3be:	2300      	movne	r3, #0
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	e022      	b.n	800f40a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	2b0c      	cmp	r3, #12
 800f3c8:	d109      	bne.n	800f3de <HAL_TIM_PWM_Start_DMA+0x7a>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b02      	cmp	r3, #2
 800f3d4:	bf0c      	ite	eq
 800f3d6:	2301      	moveq	r3, #1
 800f3d8:	2300      	movne	r3, #0
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	e015      	b.n	800f40a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2b10      	cmp	r3, #16
 800f3e2:	d109      	bne.n	800f3f8 <HAL_TIM_PWM_Start_DMA+0x94>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	bf0c      	ite	eq
 800f3f0:	2301      	moveq	r3, #1
 800f3f2:	2300      	movne	r3, #0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	e008      	b.n	800f40a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	2b02      	cmp	r3, #2
 800f402:	bf0c      	ite	eq
 800f404:	2301      	moveq	r3, #1
 800f406:	2300      	movne	r3, #0
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d001      	beq.n	800f412 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f40e:	2302      	movs	r3, #2
 800f410:	e1ba      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d109      	bne.n	800f42c <HAL_TIM_PWM_Start_DMA+0xc8>
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b01      	cmp	r3, #1
 800f422:	bf0c      	ite	eq
 800f424:	2301      	moveq	r3, #1
 800f426:	2300      	movne	r3, #0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	e03c      	b.n	800f4a6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	2b04      	cmp	r3, #4
 800f430:	d109      	bne.n	800f446 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	bf0c      	ite	eq
 800f43e:	2301      	moveq	r3, #1
 800f440:	2300      	movne	r3, #0
 800f442:	b2db      	uxtb	r3, r3
 800f444:	e02f      	b.n	800f4a6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2b08      	cmp	r3, #8
 800f44a:	d109      	bne.n	800f460 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b01      	cmp	r3, #1
 800f456:	bf0c      	ite	eq
 800f458:	2301      	moveq	r3, #1
 800f45a:	2300      	movne	r3, #0
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	e022      	b.n	800f4a6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	2b0c      	cmp	r3, #12
 800f464:	d109      	bne.n	800f47a <HAL_TIM_PWM_Start_DMA+0x116>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	2b01      	cmp	r3, #1
 800f470:	bf0c      	ite	eq
 800f472:	2301      	moveq	r3, #1
 800f474:	2300      	movne	r3, #0
 800f476:	b2db      	uxtb	r3, r3
 800f478:	e015      	b.n	800f4a6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	2b10      	cmp	r3, #16
 800f47e:	d109      	bne.n	800f494 <HAL_TIM_PWM_Start_DMA+0x130>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b01      	cmp	r3, #1
 800f48a:	bf0c      	ite	eq
 800f48c:	2301      	moveq	r3, #1
 800f48e:	2300      	movne	r3, #0
 800f490:	b2db      	uxtb	r3, r3
 800f492:	e008      	b.n	800f4a6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	bf0c      	ite	eq
 800f4a0:	2301      	moveq	r3, #1
 800f4a2:	2300      	movne	r3, #0
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d034      	beq.n	800f514 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d002      	beq.n	800f4b6 <HAL_TIM_PWM_Start_DMA+0x152>
 800f4b0:	887b      	ldrh	r3, [r7, #2]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e166      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d104      	bne.n	800f4ca <HAL_TIM_PWM_Start_DMA+0x166>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4c8:	e026      	b.n	800f518 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	2b04      	cmp	r3, #4
 800f4ce:	d104      	bne.n	800f4da <HAL_TIM_PWM_Start_DMA+0x176>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2202      	movs	r2, #2
 800f4d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4d8:	e01e      	b.n	800f518 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	2b08      	cmp	r3, #8
 800f4de:	d104      	bne.n	800f4ea <HAL_TIM_PWM_Start_DMA+0x186>
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2202      	movs	r2, #2
 800f4e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4e8:	e016      	b.n	800f518 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2b0c      	cmp	r3, #12
 800f4ee:	d104      	bne.n	800f4fa <HAL_TIM_PWM_Start_DMA+0x196>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4f8:	e00e      	b.n	800f518 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	2b10      	cmp	r3, #16
 800f4fe:	d104      	bne.n	800f50a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2202      	movs	r2, #2
 800f504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f508:	e006      	b.n	800f518 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2202      	movs	r2, #2
 800f50e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f512:	e001      	b.n	800f518 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f514:	2301      	movs	r3, #1
 800f516:	e137      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	2b0c      	cmp	r3, #12
 800f51c:	f200 80ae 	bhi.w	800f67c <HAL_TIM_PWM_Start_DMA+0x318>
 800f520:	a201      	add	r2, pc, #4	; (adr r2, 800f528 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f526:	bf00      	nop
 800f528:	0800f55d 	.word	0x0800f55d
 800f52c:	0800f67d 	.word	0x0800f67d
 800f530:	0800f67d 	.word	0x0800f67d
 800f534:	0800f67d 	.word	0x0800f67d
 800f538:	0800f5a5 	.word	0x0800f5a5
 800f53c:	0800f67d 	.word	0x0800f67d
 800f540:	0800f67d 	.word	0x0800f67d
 800f544:	0800f67d 	.word	0x0800f67d
 800f548:	0800f5ed 	.word	0x0800f5ed
 800f54c:	0800f67d 	.word	0x0800f67d
 800f550:	0800f67d 	.word	0x0800f67d
 800f554:	0800f67d 	.word	0x0800f67d
 800f558:	0800f635 	.word	0x0800f635
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f560:	4a8b      	ldr	r2, [pc, #556]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f562:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f568:	4a8a      	ldr	r2, [pc, #552]	; (800f794 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f56a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f570:	4a89      	ldr	r2, [pc, #548]	; (800f798 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f572:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f578:	6879      	ldr	r1, [r7, #4]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	3334      	adds	r3, #52	; 0x34
 800f580:	461a      	mov	r2, r3
 800f582:	887b      	ldrh	r3, [r7, #2]
 800f584:	f7f6 f88a 	bl	800569c <HAL_DMA_Start_IT>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f58e:	2301      	movs	r3, #1
 800f590:	e0fa      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68da      	ldr	r2, [r3, #12]
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5a0:	60da      	str	r2, [r3, #12]
      break;
 800f5a2:	e06e      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a8:	4a79      	ldr	r2, [pc, #484]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f5aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b0:	4a78      	ldr	r2, [pc, #480]	; (800f794 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f5b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b8:	4a77      	ldr	r2, [pc, #476]	; (800f798 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f5ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f5c0:	6879      	ldr	r1, [r7, #4]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3338      	adds	r3, #56	; 0x38
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	887b      	ldrh	r3, [r7, #2]
 800f5cc:	f7f6 f866 	bl	800569c <HAL_DMA_Start_IT>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e0d6      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68da      	ldr	r2, [r3, #12]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f5e8:	60da      	str	r2, [r3, #12]
      break;
 800f5ea:	e04a      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f0:	4a67      	ldr	r2, [pc, #412]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f5f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f8:	4a66      	ldr	r2, [pc, #408]	; (800f794 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f5fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f600:	4a65      	ldr	r2, [pc, #404]	; (800f798 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f602:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f608:	6879      	ldr	r1, [r7, #4]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	333c      	adds	r3, #60	; 0x3c
 800f610:	461a      	mov	r2, r3
 800f612:	887b      	ldrh	r3, [r7, #2]
 800f614:	f7f6 f842 	bl	800569c <HAL_DMA_Start_IT>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f61e:	2301      	movs	r3, #1
 800f620:	e0b2      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	68da      	ldr	r2, [r3, #12]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f630:	60da      	str	r2, [r3, #12]
      break;
 800f632:	e026      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f638:	4a55      	ldr	r2, [pc, #340]	; (800f790 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f63a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f640:	4a54      	ldr	r2, [pc, #336]	; (800f794 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f648:	4a53      	ldr	r2, [pc, #332]	; (800f798 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f64a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	3340      	adds	r3, #64	; 0x40
 800f658:	461a      	mov	r2, r3
 800f65a:	887b      	ldrh	r3, [r7, #2]
 800f65c:	f7f6 f81e 	bl	800569c <HAL_DMA_Start_IT>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d001      	beq.n	800f66a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	e08e      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68da      	ldr	r2, [r3, #12]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f678:	60da      	str	r2, [r3, #12]
      break;
 800f67a:	e002      	b.n	800f682 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f67c:	2301      	movs	r3, #1
 800f67e:	75fb      	strb	r3, [r7, #23]
      break;
 800f680:	bf00      	nop
  }

  if (status == HAL_OK)
 800f682:	7dfb      	ldrb	r3, [r7, #23]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d17e      	bne.n	800f786 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2201      	movs	r2, #1
 800f68e:	68b9      	ldr	r1, [r7, #8]
 800f690:	4618      	mov	r0, r3
 800f692:	f000 ff63 	bl	801055c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a40      	ldr	r2, [pc, #256]	; (800f79c <HAL_TIM_PWM_Start_DMA+0x438>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d013      	beq.n	800f6c8 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a3e      	ldr	r2, [pc, #248]	; (800f7a0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d00e      	beq.n	800f6c8 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a3d      	ldr	r2, [pc, #244]	; (800f7a4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d009      	beq.n	800f6c8 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a3b      	ldr	r2, [pc, #236]	; (800f7a8 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d004      	beq.n	800f6c8 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a3a      	ldr	r2, [pc, #232]	; (800f7ac <HAL_TIM_PWM_Start_DMA+0x448>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d101      	bne.n	800f6cc <HAL_TIM_PWM_Start_DMA+0x368>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e000      	b.n	800f6ce <HAL_TIM_PWM_Start_DMA+0x36a>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d007      	beq.n	800f6e2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a2d      	ldr	r2, [pc, #180]	; (800f79c <HAL_TIM_PWM_Start_DMA+0x438>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d02c      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6f4:	d027      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a2d      	ldr	r2, [pc, #180]	; (800f7b0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d022      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a2b      	ldr	r2, [pc, #172]	; (800f7b4 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d01d      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a2a      	ldr	r2, [pc, #168]	; (800f7b8 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d018      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a21      	ldr	r2, [pc, #132]	; (800f7a0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d013      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a26      	ldr	r2, [pc, #152]	; (800f7bc <HAL_TIM_PWM_Start_DMA+0x458>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d00e      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a1d      	ldr	r2, [pc, #116]	; (800f7a4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d009      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a22      	ldr	r2, [pc, #136]	; (800f7c0 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d004      	beq.n	800f746 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a20      	ldr	r2, [pc, #128]	; (800f7c4 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d115      	bne.n	800f772 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	689a      	ldr	r2, [r3, #8]
 800f74c:	4b1e      	ldr	r3, [pc, #120]	; (800f7c8 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f74e:	4013      	ands	r3, r2
 800f750:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	2b06      	cmp	r3, #6
 800f756:	d015      	beq.n	800f784 <HAL_TIM_PWM_Start_DMA+0x420>
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f75e:	d011      	beq.n	800f784 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f042 0201 	orr.w	r2, r2, #1
 800f76e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f770:	e008      	b.n	800f784 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f042 0201 	orr.w	r2, r2, #1
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	e000      	b.n	800f786 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f784:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f786:	7dfb      	ldrb	r3, [r7, #23]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3718      	adds	r7, #24
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	0800fd53 	.word	0x0800fd53
 800f794:	0800fdfb 	.word	0x0800fdfb
 800f798:	0800fcc1 	.word	0x0800fcc1
 800f79c:	40010000 	.word	0x40010000
 800f7a0:	40010400 	.word	0x40010400
 800f7a4:	40014000 	.word	0x40014000
 800f7a8:	40014400 	.word	0x40014400
 800f7ac:	40014800 	.word	0x40014800
 800f7b0:	40000400 	.word	0x40000400
 800f7b4:	40000800 	.word	0x40000800
 800f7b8:	40000c00 	.word	0x40000c00
 800f7bc:	40001800 	.word	0x40001800
 800f7c0:	4000e000 	.word	0x4000e000
 800f7c4:	4000e400 	.word	0x4000e400
 800f7c8:	00010007 	.word	0x00010007

0800f7cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	f003 0302 	and.w	r3, r3, #2
 800f7de:	2b02      	cmp	r3, #2
 800f7e0:	d122      	bne.n	800f828 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	f003 0302 	and.w	r3, r3, #2
 800f7ec:	2b02      	cmp	r3, #2
 800f7ee:	d11b      	bne.n	800f828 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f06f 0202 	mvn.w	r2, #2
 800f7f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	699b      	ldr	r3, [r3, #24]
 800f806:	f003 0303 	and.w	r3, r3, #3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d003      	beq.n	800f816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 fa24 	bl	800fc5c <HAL_TIM_IC_CaptureCallback>
 800f814:	e005      	b.n	800f822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f000 fa16 	bl	800fc48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 fa27 	bl	800fc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	691b      	ldr	r3, [r3, #16]
 800f82e:	f003 0304 	and.w	r3, r3, #4
 800f832:	2b04      	cmp	r3, #4
 800f834:	d122      	bne.n	800f87c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	f003 0304 	and.w	r3, r3, #4
 800f840:	2b04      	cmp	r3, #4
 800f842:	d11b      	bne.n	800f87c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f06f 0204 	mvn.w	r2, #4
 800f84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2202      	movs	r2, #2
 800f852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	699b      	ldr	r3, [r3, #24]
 800f85a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f9fa 	bl	800fc5c <HAL_TIM_IC_CaptureCallback>
 800f868:	e005      	b.n	800f876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 f9ec 	bl	800fc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 f9fd 	bl	800fc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	691b      	ldr	r3, [r3, #16]
 800f882:	f003 0308 	and.w	r3, r3, #8
 800f886:	2b08      	cmp	r3, #8
 800f888:	d122      	bne.n	800f8d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	f003 0308 	and.w	r3, r3, #8
 800f894:	2b08      	cmp	r3, #8
 800f896:	d11b      	bne.n	800f8d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f06f 0208 	mvn.w	r2, #8
 800f8a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2204      	movs	r2, #4
 800f8a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	69db      	ldr	r3, [r3, #28]
 800f8ae:	f003 0303 	and.w	r3, r3, #3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d003      	beq.n	800f8be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f9d0 	bl	800fc5c <HAL_TIM_IC_CaptureCallback>
 800f8bc:	e005      	b.n	800f8ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f9c2 	bl	800fc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f9d3 	bl	800fc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	691b      	ldr	r3, [r3, #16]
 800f8d6:	f003 0310 	and.w	r3, r3, #16
 800f8da:	2b10      	cmp	r3, #16
 800f8dc:	d122      	bne.n	800f924 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	f003 0310 	and.w	r3, r3, #16
 800f8e8:	2b10      	cmp	r3, #16
 800f8ea:	d11b      	bne.n	800f924 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f06f 0210 	mvn.w	r2, #16
 800f8f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2208      	movs	r2, #8
 800f8fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	69db      	ldr	r3, [r3, #28]
 800f902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f9a6 	bl	800fc5c <HAL_TIM_IC_CaptureCallback>
 800f910:	e005      	b.n	800f91e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f998 	bl	800fc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 f9a9 	bl	800fc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	691b      	ldr	r3, [r3, #16]
 800f92a:	f003 0301 	and.w	r3, r3, #1
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d10e      	bne.n	800f950 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	f003 0301 	and.w	r3, r3, #1
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d107      	bne.n	800f950 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f06f 0201 	mvn.w	r2, #1
 800f948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f972 	bl	800fc34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	691b      	ldr	r3, [r3, #16]
 800f956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f95a:	2b80      	cmp	r3, #128	; 0x80
 800f95c:	d10e      	bne.n	800f97c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f968:	2b80      	cmp	r3, #128	; 0x80
 800f96a:	d107      	bne.n	800f97c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 febc 	bl	80106f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	691b      	ldr	r3, [r3, #16]
 800f982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f98a:	d10e      	bne.n	800f9aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f996:	2b80      	cmp	r3, #128	; 0x80
 800f998:	d107      	bne.n	800f9aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f9a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 feaf 	bl	8010708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	691b      	ldr	r3, [r3, #16]
 800f9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9b4:	2b40      	cmp	r3, #64	; 0x40
 800f9b6:	d10e      	bne.n	800f9d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9c2:	2b40      	cmp	r3, #64	; 0x40
 800f9c4:	d107      	bne.n	800f9d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f9ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 f961 	bl	800fc98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	f003 0320 	and.w	r3, r3, #32
 800f9e0:	2b20      	cmp	r3, #32
 800f9e2:	d10e      	bne.n	800fa02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	f003 0320 	and.w	r3, r3, #32
 800f9ee:	2b20      	cmp	r3, #32
 800f9f0:	d107      	bne.n	800fa02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f06f 0220 	mvn.w	r2, #32
 800f9fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 fe6f 	bl	80106e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa02:	bf00      	nop
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
	...

0800fa0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b086      	sub	sp, #24
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d101      	bne.n	800fa2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fa26:	2302      	movs	r3, #2
 800fa28:	e0ff      	b.n	800fc2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2b14      	cmp	r3, #20
 800fa36:	f200 80f0 	bhi.w	800fc1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fa3a:	a201      	add	r2, pc, #4	; (adr r2, 800fa40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa40:	0800fa95 	.word	0x0800fa95
 800fa44:	0800fc1b 	.word	0x0800fc1b
 800fa48:	0800fc1b 	.word	0x0800fc1b
 800fa4c:	0800fc1b 	.word	0x0800fc1b
 800fa50:	0800fad5 	.word	0x0800fad5
 800fa54:	0800fc1b 	.word	0x0800fc1b
 800fa58:	0800fc1b 	.word	0x0800fc1b
 800fa5c:	0800fc1b 	.word	0x0800fc1b
 800fa60:	0800fb17 	.word	0x0800fb17
 800fa64:	0800fc1b 	.word	0x0800fc1b
 800fa68:	0800fc1b 	.word	0x0800fc1b
 800fa6c:	0800fc1b 	.word	0x0800fc1b
 800fa70:	0800fb57 	.word	0x0800fb57
 800fa74:	0800fc1b 	.word	0x0800fc1b
 800fa78:	0800fc1b 	.word	0x0800fc1b
 800fa7c:	0800fc1b 	.word	0x0800fc1b
 800fa80:	0800fb99 	.word	0x0800fb99
 800fa84:	0800fc1b 	.word	0x0800fc1b
 800fa88:	0800fc1b 	.word	0x0800fc1b
 800fa8c:	0800fc1b 	.word	0x0800fc1b
 800fa90:	0800fbd9 	.word	0x0800fbd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68b9      	ldr	r1, [r7, #8]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f000 fa88 	bl	800ffb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	699a      	ldr	r2, [r3, #24]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f042 0208 	orr.w	r2, r2, #8
 800faae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	699a      	ldr	r2, [r3, #24]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f022 0204 	bic.w	r2, r2, #4
 800fabe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	6999      	ldr	r1, [r3, #24]
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	691a      	ldr	r2, [r3, #16]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	430a      	orrs	r2, r1
 800fad0:	619a      	str	r2, [r3, #24]
      break;
 800fad2:	e0a5      	b.n	800fc20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	68b9      	ldr	r1, [r7, #8]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 faf8 	bl	80100d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	699a      	ldr	r2, [r3, #24]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800faee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	699a      	ldr	r2, [r3, #24]
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fafe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	6999      	ldr	r1, [r3, #24]
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	691b      	ldr	r3, [r3, #16]
 800fb0a:	021a      	lsls	r2, r3, #8
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	430a      	orrs	r2, r1
 800fb12:	619a      	str	r2, [r3, #24]
      break;
 800fb14:	e084      	b.n	800fc20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	68b9      	ldr	r1, [r7, #8]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 fb61 	bl	80101e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	69da      	ldr	r2, [r3, #28]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f042 0208 	orr.w	r2, r2, #8
 800fb30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	69da      	ldr	r2, [r3, #28]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f022 0204 	bic.w	r2, r2, #4
 800fb40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	69d9      	ldr	r1, [r3, #28]
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	691a      	ldr	r2, [r3, #16]
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	430a      	orrs	r2, r1
 800fb52:	61da      	str	r2, [r3, #28]
      break;
 800fb54:	e064      	b.n	800fc20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68b9      	ldr	r1, [r7, #8]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 fbc9 	bl	80102f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	69da      	ldr	r2, [r3, #28]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	69da      	ldr	r2, [r3, #28]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	69d9      	ldr	r1, [r3, #28]
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	691b      	ldr	r3, [r3, #16]
 800fb8c:	021a      	lsls	r2, r3, #8
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	430a      	orrs	r2, r1
 800fb94:	61da      	str	r2, [r3, #28]
      break;
 800fb96:	e043      	b.n	800fc20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	68b9      	ldr	r1, [r7, #8]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f000 fc12 	bl	80103c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f042 0208 	orr.w	r2, r2, #8
 800fbb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f022 0204 	bic.w	r2, r2, #4
 800fbc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	691a      	ldr	r2, [r3, #16]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	430a      	orrs	r2, r1
 800fbd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fbd6:	e023      	b.n	800fc20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68b9      	ldr	r1, [r7, #8]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 fc56 	bl	8010490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	021a      	lsls	r2, r3, #8
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	430a      	orrs	r2, r1
 800fc16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc18:	e002      	b.n	800fc20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	75fb      	strb	r3, [r7, #23]
      break;
 800fc1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fc28:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3718      	adds	r7, #24
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop

0800fc34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fc3c:	bf00      	nop
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc64:	bf00      	nop
 800fc66:	370c      	adds	r7, #12
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fc78:	bf00      	nop
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fc8c:	bf00      	nop
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fca0:	bf00      	nop
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fcb4:	bf00      	nop
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fccc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d107      	bne.n	800fce8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2201      	movs	r2, #1
 800fce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fce6:	e02a      	b.n	800fd3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d107      	bne.n	800fd02 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd00:	e01d      	b.n	800fd3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d107      	bne.n	800fd1c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2204      	movs	r2, #4
 800fd10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2201      	movs	r2, #1
 800fd16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd1a:	e010      	b.n	800fd3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d107      	bne.n	800fd36 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2208      	movs	r2, #8
 800fd2a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fd34:	e003      	b.n	800fd3e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2201      	movs	r2, #1
 800fd3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f7ff ffb4 	bl	800fcac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	771a      	strb	r2, [r3, #28]
}
 800fd4a:	bf00      	nop
 800fd4c:	3710      	adds	r7, #16
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b084      	sub	sp, #16
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d10b      	bne.n	800fd82 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	69db      	ldr	r3, [r3, #28]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d136      	bne.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd80:	e031      	b.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d10b      	bne.n	800fda4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2202      	movs	r2, #2
 800fd90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	69db      	ldr	r3, [r3, #28]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d125      	bne.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fda2:	e020      	b.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d10b      	bne.n	800fdc6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2204      	movs	r2, #4
 800fdb2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	69db      	ldr	r3, [r3, #28]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d114      	bne.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fdc4:	e00f      	b.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d10a      	bne.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2208      	movs	r2, #8
 800fdd4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	69db      	ldr	r3, [r3, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d103      	bne.n	800fde6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2201      	movs	r2, #1
 800fde2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f7ff ff42 	bl	800fc70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	771a      	strb	r2, [r3, #28]
}
 800fdf2:	bf00      	nop
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	b084      	sub	sp, #16
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe06:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d103      	bne.n	800fe1a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2201      	movs	r2, #1
 800fe16:	771a      	strb	r2, [r3, #28]
 800fe18:	e019      	b.n	800fe4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d103      	bne.n	800fe2c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2202      	movs	r2, #2
 800fe28:	771a      	strb	r2, [r3, #28]
 800fe2a:	e010      	b.n	800fe4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d103      	bne.n	800fe3e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2204      	movs	r2, #4
 800fe3a:	771a      	strb	r2, [r3, #28]
 800fe3c:	e007      	b.n	800fe4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d102      	bne.n	800fe4e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2208      	movs	r2, #8
 800fe4c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f7ff ff18 	bl	800fc84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	771a      	strb	r2, [r3, #28]
}
 800fe5a:	bf00      	nop
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4a44      	ldr	r2, [pc, #272]	; (800ff88 <TIM_Base_SetConfig+0x124>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d013      	beq.n	800fea4 <TIM_Base_SetConfig+0x40>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe82:	d00f      	beq.n	800fea4 <TIM_Base_SetConfig+0x40>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4a41      	ldr	r2, [pc, #260]	; (800ff8c <TIM_Base_SetConfig+0x128>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d00b      	beq.n	800fea4 <TIM_Base_SetConfig+0x40>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4a40      	ldr	r2, [pc, #256]	; (800ff90 <TIM_Base_SetConfig+0x12c>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d007      	beq.n	800fea4 <TIM_Base_SetConfig+0x40>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	4a3f      	ldr	r2, [pc, #252]	; (800ff94 <TIM_Base_SetConfig+0x130>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d003      	beq.n	800fea4 <TIM_Base_SetConfig+0x40>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	4a3e      	ldr	r2, [pc, #248]	; (800ff98 <TIM_Base_SetConfig+0x134>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d108      	bne.n	800feb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	4313      	orrs	r3, r2
 800feb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4a33      	ldr	r2, [pc, #204]	; (800ff88 <TIM_Base_SetConfig+0x124>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d027      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fec4:	d023      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4a30      	ldr	r2, [pc, #192]	; (800ff8c <TIM_Base_SetConfig+0x128>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d01f      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4a2f      	ldr	r2, [pc, #188]	; (800ff90 <TIM_Base_SetConfig+0x12c>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d01b      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4a2e      	ldr	r2, [pc, #184]	; (800ff94 <TIM_Base_SetConfig+0x130>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d017      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4a2d      	ldr	r2, [pc, #180]	; (800ff98 <TIM_Base_SetConfig+0x134>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d013      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4a2c      	ldr	r2, [pc, #176]	; (800ff9c <TIM_Base_SetConfig+0x138>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d00f      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4a2b      	ldr	r2, [pc, #172]	; (800ffa0 <TIM_Base_SetConfig+0x13c>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d00b      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4a2a      	ldr	r2, [pc, #168]	; (800ffa4 <TIM_Base_SetConfig+0x140>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d007      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4a29      	ldr	r2, [pc, #164]	; (800ffa8 <TIM_Base_SetConfig+0x144>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d003      	beq.n	800ff0e <TIM_Base_SetConfig+0xaa>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4a28      	ldr	r2, [pc, #160]	; (800ffac <TIM_Base_SetConfig+0x148>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d108      	bne.n	800ff20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	695b      	ldr	r3, [r3, #20]
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	689a      	ldr	r2, [r3, #8]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4a10      	ldr	r2, [pc, #64]	; (800ff88 <TIM_Base_SetConfig+0x124>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d00f      	beq.n	800ff6c <TIM_Base_SetConfig+0x108>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	4a12      	ldr	r2, [pc, #72]	; (800ff98 <TIM_Base_SetConfig+0x134>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d00b      	beq.n	800ff6c <TIM_Base_SetConfig+0x108>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a11      	ldr	r2, [pc, #68]	; (800ff9c <TIM_Base_SetConfig+0x138>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d007      	beq.n	800ff6c <TIM_Base_SetConfig+0x108>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a10      	ldr	r2, [pc, #64]	; (800ffa0 <TIM_Base_SetConfig+0x13c>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d003      	beq.n	800ff6c <TIM_Base_SetConfig+0x108>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4a0f      	ldr	r2, [pc, #60]	; (800ffa4 <TIM_Base_SetConfig+0x140>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d103      	bne.n	800ff74 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	691a      	ldr	r2, [r3, #16]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2201      	movs	r2, #1
 800ff78:	615a      	str	r2, [r3, #20]
}
 800ff7a:	bf00      	nop
 800ff7c:	3714      	adds	r7, #20
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	40010000 	.word	0x40010000
 800ff8c:	40000400 	.word	0x40000400
 800ff90:	40000800 	.word	0x40000800
 800ff94:	40000c00 	.word	0x40000c00
 800ff98:	40010400 	.word	0x40010400
 800ff9c:	40014000 	.word	0x40014000
 800ffa0:	40014400 	.word	0x40014400
 800ffa4:	40014800 	.word	0x40014800
 800ffa8:	4000e000 	.word	0x4000e000
 800ffac:	4000e400 	.word	0x4000e400

0800ffb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6a1b      	ldr	r3, [r3, #32]
 800ffbe:	f023 0201 	bic.w	r2, r3, #1
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	699b      	ldr	r3, [r3, #24]
 800ffd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	4b37      	ldr	r3, [pc, #220]	; (80100b8 <TIM_OC1_SetConfig+0x108>)
 800ffdc:	4013      	ands	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f023 0303 	bic.w	r3, r3, #3
 800ffe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	4313      	orrs	r3, r2
 800fff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	f023 0302 	bic.w	r3, r3, #2
 800fff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	697a      	ldr	r2, [r7, #20]
 8010000:	4313      	orrs	r3, r2
 8010002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4a2d      	ldr	r2, [pc, #180]	; (80100bc <TIM_OC1_SetConfig+0x10c>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d00f      	beq.n	801002c <TIM_OC1_SetConfig+0x7c>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	4a2c      	ldr	r2, [pc, #176]	; (80100c0 <TIM_OC1_SetConfig+0x110>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d00b      	beq.n	801002c <TIM_OC1_SetConfig+0x7c>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a2b      	ldr	r2, [pc, #172]	; (80100c4 <TIM_OC1_SetConfig+0x114>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d007      	beq.n	801002c <TIM_OC1_SetConfig+0x7c>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4a2a      	ldr	r2, [pc, #168]	; (80100c8 <TIM_OC1_SetConfig+0x118>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d003      	beq.n	801002c <TIM_OC1_SetConfig+0x7c>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4a29      	ldr	r2, [pc, #164]	; (80100cc <TIM_OC1_SetConfig+0x11c>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d10c      	bne.n	8010046 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	f023 0308 	bic.w	r3, r3, #8
 8010032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	697a      	ldr	r2, [r7, #20]
 801003a:	4313      	orrs	r3, r2
 801003c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f023 0304 	bic.w	r3, r3, #4
 8010044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a1c      	ldr	r2, [pc, #112]	; (80100bc <TIM_OC1_SetConfig+0x10c>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d00f      	beq.n	801006e <TIM_OC1_SetConfig+0xbe>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a1b      	ldr	r2, [pc, #108]	; (80100c0 <TIM_OC1_SetConfig+0x110>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d00b      	beq.n	801006e <TIM_OC1_SetConfig+0xbe>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a1a      	ldr	r2, [pc, #104]	; (80100c4 <TIM_OC1_SetConfig+0x114>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d007      	beq.n	801006e <TIM_OC1_SetConfig+0xbe>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4a19      	ldr	r2, [pc, #100]	; (80100c8 <TIM_OC1_SetConfig+0x118>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d003      	beq.n	801006e <TIM_OC1_SetConfig+0xbe>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4a18      	ldr	r2, [pc, #96]	; (80100cc <TIM_OC1_SetConfig+0x11c>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d111      	bne.n	8010092 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801007c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	695b      	ldr	r3, [r3, #20]
 8010082:	693a      	ldr	r2, [r7, #16]
 8010084:	4313      	orrs	r3, r2
 8010086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	699b      	ldr	r3, [r3, #24]
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	4313      	orrs	r3, r2
 8010090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	693a      	ldr	r2, [r7, #16]
 8010096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	621a      	str	r2, [r3, #32]
}
 80100ac:	bf00      	nop
 80100ae:	371c      	adds	r7, #28
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr
 80100b8:	fffeff8f 	.word	0xfffeff8f
 80100bc:	40010000 	.word	0x40010000
 80100c0:	40010400 	.word	0x40010400
 80100c4:	40014000 	.word	0x40014000
 80100c8:	40014400 	.word	0x40014400
 80100cc:	40014800 	.word	0x40014800

080100d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b087      	sub	sp, #28
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6a1b      	ldr	r3, [r3, #32]
 80100de:	f023 0210 	bic.w	r2, r3, #16
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a1b      	ldr	r3, [r3, #32]
 80100ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	699b      	ldr	r3, [r3, #24]
 80100f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	4b34      	ldr	r3, [pc, #208]	; (80101cc <TIM_OC2_SetConfig+0xfc>)
 80100fc:	4013      	ands	r3, r2
 80100fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	021b      	lsls	r3, r3, #8
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	4313      	orrs	r3, r2
 8010112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	f023 0320 	bic.w	r3, r3, #32
 801011a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	011b      	lsls	r3, r3, #4
 8010122:	697a      	ldr	r2, [r7, #20]
 8010124:	4313      	orrs	r3, r2
 8010126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a29      	ldr	r2, [pc, #164]	; (80101d0 <TIM_OC2_SetConfig+0x100>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d003      	beq.n	8010138 <TIM_OC2_SetConfig+0x68>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4a28      	ldr	r2, [pc, #160]	; (80101d4 <TIM_OC2_SetConfig+0x104>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d10d      	bne.n	8010154 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801013e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	011b      	lsls	r3, r3, #4
 8010146:	697a      	ldr	r2, [r7, #20]
 8010148:	4313      	orrs	r3, r2
 801014a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a1e      	ldr	r2, [pc, #120]	; (80101d0 <TIM_OC2_SetConfig+0x100>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d00f      	beq.n	801017c <TIM_OC2_SetConfig+0xac>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a1d      	ldr	r2, [pc, #116]	; (80101d4 <TIM_OC2_SetConfig+0x104>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d00b      	beq.n	801017c <TIM_OC2_SetConfig+0xac>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4a1c      	ldr	r2, [pc, #112]	; (80101d8 <TIM_OC2_SetConfig+0x108>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d007      	beq.n	801017c <TIM_OC2_SetConfig+0xac>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4a1b      	ldr	r2, [pc, #108]	; (80101dc <TIM_OC2_SetConfig+0x10c>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d003      	beq.n	801017c <TIM_OC2_SetConfig+0xac>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	4a1a      	ldr	r2, [pc, #104]	; (80101e0 <TIM_OC2_SetConfig+0x110>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d113      	bne.n	80101a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801018a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	693a      	ldr	r2, [r7, #16]
 8010194:	4313      	orrs	r3, r2
 8010196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	699b      	ldr	r3, [r3, #24]
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	4313      	orrs	r3, r2
 80101a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	693a      	ldr	r2, [r7, #16]
 80101a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	68fa      	ldr	r2, [r7, #12]
 80101ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	685a      	ldr	r2, [r3, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	621a      	str	r2, [r3, #32]
}
 80101be:	bf00      	nop
 80101c0:	371c      	adds	r7, #28
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	feff8fff 	.word	0xfeff8fff
 80101d0:	40010000 	.word	0x40010000
 80101d4:	40010400 	.word	0x40010400
 80101d8:	40014000 	.word	0x40014000
 80101dc:	40014400 	.word	0x40014400
 80101e0:	40014800 	.word	0x40014800

080101e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b087      	sub	sp, #28
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a1b      	ldr	r3, [r3, #32]
 80101f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a1b      	ldr	r3, [r3, #32]
 80101fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	69db      	ldr	r3, [r3, #28]
 801020a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801020c:	68fa      	ldr	r2, [r7, #12]
 801020e:	4b33      	ldr	r3, [pc, #204]	; (80102dc <TIM_OC3_SetConfig+0xf8>)
 8010210:	4013      	ands	r3, r2
 8010212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f023 0303 	bic.w	r3, r3, #3
 801021a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	4313      	orrs	r3, r2
 8010224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801022c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	021b      	lsls	r3, r3, #8
 8010234:	697a      	ldr	r2, [r7, #20]
 8010236:	4313      	orrs	r3, r2
 8010238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a28      	ldr	r2, [pc, #160]	; (80102e0 <TIM_OC3_SetConfig+0xfc>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d003      	beq.n	801024a <TIM_OC3_SetConfig+0x66>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4a27      	ldr	r2, [pc, #156]	; (80102e4 <TIM_OC3_SetConfig+0x100>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d10d      	bne.n	8010266 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	021b      	lsls	r3, r3, #8
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	4313      	orrs	r3, r2
 801025c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4a1d      	ldr	r2, [pc, #116]	; (80102e0 <TIM_OC3_SetConfig+0xfc>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d00f      	beq.n	801028e <TIM_OC3_SetConfig+0xaa>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a1c      	ldr	r2, [pc, #112]	; (80102e4 <TIM_OC3_SetConfig+0x100>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d00b      	beq.n	801028e <TIM_OC3_SetConfig+0xaa>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a1b      	ldr	r2, [pc, #108]	; (80102e8 <TIM_OC3_SetConfig+0x104>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d007      	beq.n	801028e <TIM_OC3_SetConfig+0xaa>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a1a      	ldr	r2, [pc, #104]	; (80102ec <TIM_OC3_SetConfig+0x108>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d003      	beq.n	801028e <TIM_OC3_SetConfig+0xaa>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a19      	ldr	r2, [pc, #100]	; (80102f0 <TIM_OC3_SetConfig+0x10c>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d113      	bne.n	80102b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801029c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	695b      	ldr	r3, [r3, #20]
 80102a2:	011b      	lsls	r3, r3, #4
 80102a4:	693a      	ldr	r2, [r7, #16]
 80102a6:	4313      	orrs	r3, r2
 80102a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	699b      	ldr	r3, [r3, #24]
 80102ae:	011b      	lsls	r3, r3, #4
 80102b0:	693a      	ldr	r2, [r7, #16]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	693a      	ldr	r2, [r7, #16]
 80102ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	68fa      	ldr	r2, [r7, #12]
 80102c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	685a      	ldr	r2, [r3, #4]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	697a      	ldr	r2, [r7, #20]
 80102ce:	621a      	str	r2, [r3, #32]
}
 80102d0:	bf00      	nop
 80102d2:	371c      	adds	r7, #28
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	fffeff8f 	.word	0xfffeff8f
 80102e0:	40010000 	.word	0x40010000
 80102e4:	40010400 	.word	0x40010400
 80102e8:	40014000 	.word	0x40014000
 80102ec:	40014400 	.word	0x40014400
 80102f0:	40014800 	.word	0x40014800

080102f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b087      	sub	sp, #28
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6a1b      	ldr	r3, [r3, #32]
 8010302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6a1b      	ldr	r3, [r3, #32]
 801030e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	69db      	ldr	r3, [r3, #28]
 801031a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	4b24      	ldr	r3, [pc, #144]	; (80103b0 <TIM_OC4_SetConfig+0xbc>)
 8010320:	4013      	ands	r3, r2
 8010322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801032a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	021b      	lsls	r3, r3, #8
 8010332:	68fa      	ldr	r2, [r7, #12]
 8010334:	4313      	orrs	r3, r2
 8010336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801033e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	031b      	lsls	r3, r3, #12
 8010346:	693a      	ldr	r2, [r7, #16]
 8010348:	4313      	orrs	r3, r2
 801034a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a19      	ldr	r2, [pc, #100]	; (80103b4 <TIM_OC4_SetConfig+0xc0>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d00f      	beq.n	8010374 <TIM_OC4_SetConfig+0x80>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a18      	ldr	r2, [pc, #96]	; (80103b8 <TIM_OC4_SetConfig+0xc4>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d00b      	beq.n	8010374 <TIM_OC4_SetConfig+0x80>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a17      	ldr	r2, [pc, #92]	; (80103bc <TIM_OC4_SetConfig+0xc8>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d007      	beq.n	8010374 <TIM_OC4_SetConfig+0x80>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a16      	ldr	r2, [pc, #88]	; (80103c0 <TIM_OC4_SetConfig+0xcc>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d003      	beq.n	8010374 <TIM_OC4_SetConfig+0x80>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a15      	ldr	r2, [pc, #84]	; (80103c4 <TIM_OC4_SetConfig+0xd0>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d109      	bne.n	8010388 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801037a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	695b      	ldr	r3, [r3, #20]
 8010380:	019b      	lsls	r3, r3, #6
 8010382:	697a      	ldr	r2, [r7, #20]
 8010384:	4313      	orrs	r3, r2
 8010386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	697a      	ldr	r2, [r7, #20]
 801038c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	685a      	ldr	r2, [r3, #4]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	693a      	ldr	r2, [r7, #16]
 80103a0:	621a      	str	r2, [r3, #32]
}
 80103a2:	bf00      	nop
 80103a4:	371c      	adds	r7, #28
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop
 80103b0:	feff8fff 	.word	0xfeff8fff
 80103b4:	40010000 	.word	0x40010000
 80103b8:	40010400 	.word	0x40010400
 80103bc:	40014000 	.word	0x40014000
 80103c0:	40014400 	.word	0x40014400
 80103c4:	40014800 	.word	0x40014800

080103c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b087      	sub	sp, #28
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
 80103d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a1b      	ldr	r3, [r3, #32]
 80103e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	4b21      	ldr	r3, [pc, #132]	; (8010478 <TIM_OC5_SetConfig+0xb0>)
 80103f4:	4013      	ands	r3, r2
 80103f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	4313      	orrs	r3, r2
 8010400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	689b      	ldr	r3, [r3, #8]
 801040e:	041b      	lsls	r3, r3, #16
 8010410:	693a      	ldr	r2, [r7, #16]
 8010412:	4313      	orrs	r3, r2
 8010414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a18      	ldr	r2, [pc, #96]	; (801047c <TIM_OC5_SetConfig+0xb4>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d00f      	beq.n	801043e <TIM_OC5_SetConfig+0x76>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a17      	ldr	r2, [pc, #92]	; (8010480 <TIM_OC5_SetConfig+0xb8>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d00b      	beq.n	801043e <TIM_OC5_SetConfig+0x76>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a16      	ldr	r2, [pc, #88]	; (8010484 <TIM_OC5_SetConfig+0xbc>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d007      	beq.n	801043e <TIM_OC5_SetConfig+0x76>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4a15      	ldr	r2, [pc, #84]	; (8010488 <TIM_OC5_SetConfig+0xc0>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d003      	beq.n	801043e <TIM_OC5_SetConfig+0x76>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4a14      	ldr	r2, [pc, #80]	; (801048c <TIM_OC5_SetConfig+0xc4>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d109      	bne.n	8010452 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010444:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	695b      	ldr	r3, [r3, #20]
 801044a:	021b      	lsls	r3, r3, #8
 801044c:	697a      	ldr	r2, [r7, #20]
 801044e:	4313      	orrs	r3, r2
 8010450:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	697a      	ldr	r2, [r7, #20]
 8010456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	685a      	ldr	r2, [r3, #4]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	693a      	ldr	r2, [r7, #16]
 801046a:	621a      	str	r2, [r3, #32]
}
 801046c:	bf00      	nop
 801046e:	371c      	adds	r7, #28
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	fffeff8f 	.word	0xfffeff8f
 801047c:	40010000 	.word	0x40010000
 8010480:	40010400 	.word	0x40010400
 8010484:	40014000 	.word	0x40014000
 8010488:	40014400 	.word	0x40014400
 801048c:	40014800 	.word	0x40014800

08010490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010490:	b480      	push	{r7}
 8010492:	b087      	sub	sp, #28
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	4b22      	ldr	r3, [pc, #136]	; (8010544 <TIM_OC6_SetConfig+0xb4>)
 80104bc:	4013      	ands	r3, r2
 80104be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	021b      	lsls	r3, r3, #8
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	4313      	orrs	r3, r2
 80104ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80104d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	051b      	lsls	r3, r3, #20
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	4313      	orrs	r3, r2
 80104de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a19      	ldr	r2, [pc, #100]	; (8010548 <TIM_OC6_SetConfig+0xb8>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d00f      	beq.n	8010508 <TIM_OC6_SetConfig+0x78>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a18      	ldr	r2, [pc, #96]	; (801054c <TIM_OC6_SetConfig+0xbc>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d00b      	beq.n	8010508 <TIM_OC6_SetConfig+0x78>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a17      	ldr	r2, [pc, #92]	; (8010550 <TIM_OC6_SetConfig+0xc0>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d007      	beq.n	8010508 <TIM_OC6_SetConfig+0x78>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4a16      	ldr	r2, [pc, #88]	; (8010554 <TIM_OC6_SetConfig+0xc4>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d003      	beq.n	8010508 <TIM_OC6_SetConfig+0x78>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	4a15      	ldr	r2, [pc, #84]	; (8010558 <TIM_OC6_SetConfig+0xc8>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d109      	bne.n	801051c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801050e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	695b      	ldr	r3, [r3, #20]
 8010514:	029b      	lsls	r3, r3, #10
 8010516:	697a      	ldr	r2, [r7, #20]
 8010518:	4313      	orrs	r3, r2
 801051a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	685a      	ldr	r2, [r3, #4]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	693a      	ldr	r2, [r7, #16]
 8010534:	621a      	str	r2, [r3, #32]
}
 8010536:	bf00      	nop
 8010538:	371c      	adds	r7, #28
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr
 8010542:	bf00      	nop
 8010544:	feff8fff 	.word	0xfeff8fff
 8010548:	40010000 	.word	0x40010000
 801054c:	40010400 	.word	0x40010400
 8010550:	40014000 	.word	0x40014000
 8010554:	40014400 	.word	0x40014400
 8010558:	40014800 	.word	0x40014800

0801055c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801055c:	b480      	push	{r7}
 801055e:	b087      	sub	sp, #28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	f003 031f 	and.w	r3, r3, #31
 801056e:	2201      	movs	r2, #1
 8010570:	fa02 f303 	lsl.w	r3, r2, r3
 8010574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6a1a      	ldr	r2, [r3, #32]
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	43db      	mvns	r3, r3
 801057e:	401a      	ands	r2, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6a1a      	ldr	r2, [r3, #32]
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	f003 031f 	and.w	r3, r3, #31
 801058e:	6879      	ldr	r1, [r7, #4]
 8010590:	fa01 f303 	lsl.w	r3, r1, r3
 8010594:	431a      	orrs	r2, r3
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	621a      	str	r2, [r3, #32]
}
 801059a:	bf00      	nop
 801059c:	371c      	adds	r7, #28
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
	...

080105a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d101      	bne.n	80105c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80105bc:	2302      	movs	r3, #2
 80105be:	e077      	b.n	80106b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2202      	movs	r2, #2
 80105cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a35      	ldr	r2, [pc, #212]	; (80106bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d004      	beq.n	80105f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4a34      	ldr	r2, [pc, #208]	; (80106c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d108      	bne.n	8010606 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80105fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	4313      	orrs	r3, r2
 8010604:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801060c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	4313      	orrs	r3, r2
 8010616:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a25      	ldr	r2, [pc, #148]	; (80106bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d02c      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010632:	d027      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a22      	ldr	r2, [pc, #136]	; (80106c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d022      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a21      	ldr	r2, [pc, #132]	; (80106c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d01d      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a1f      	ldr	r2, [pc, #124]	; (80106cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d018      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a1a      	ldr	r2, [pc, #104]	; (80106c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d013      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a1b      	ldr	r2, [pc, #108]	; (80106d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d00e      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a1a      	ldr	r2, [pc, #104]	; (80106d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d009      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a18      	ldr	r2, [pc, #96]	; (80106d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d004      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a17      	ldr	r2, [pc, #92]	; (80106dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d10c      	bne.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801068a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	689b      	ldr	r3, [r3, #8]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	4313      	orrs	r3, r2
 8010694:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	68ba      	ldr	r2, [r7, #8]
 801069c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2201      	movs	r2, #1
 80106a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	40010000 	.word	0x40010000
 80106c0:	40010400 	.word	0x40010400
 80106c4:	40000400 	.word	0x40000400
 80106c8:	40000800 	.word	0x40000800
 80106cc:	40000c00 	.word	0x40000c00
 80106d0:	40001800 	.word	0x40001800
 80106d4:	40014000 	.word	0x40014000
 80106d8:	4000e000 	.word	0x4000e000
 80106dc:	4000e400 	.word	0x4000e400

080106e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106e8:	bf00      	nop
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010710:	bf00      	nop
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d101      	bne.n	801072e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801072a:	2301      	movs	r3, #1
 801072c:	e042      	b.n	80107b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010734:	2b00      	cmp	r3, #0
 8010736:	d106      	bne.n	8010746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7f2 fc4d 	bl	8002fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2224      	movs	r2, #36	; 0x24
 801074a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f022 0201 	bic.w	r2, r2, #1
 801075c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f82c 	bl	80107bc <UART_SetConfig>
 8010764:	4603      	mov	r3, r0
 8010766:	2b01      	cmp	r3, #1
 8010768:	d101      	bne.n	801076e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801076a:	2301      	movs	r3, #1
 801076c:	e022      	b.n	80107b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010772:	2b00      	cmp	r3, #0
 8010774:	d002      	beq.n	801077c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 fe8c 	bl	8011494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	685a      	ldr	r2, [r3, #4]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801078a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	689a      	ldr	r2, [r3, #8]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801079a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	681a      	ldr	r2, [r3, #0]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	f042 0201 	orr.w	r2, r2, #1
 80107aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f000 ff13 	bl	80115d8 <UART_CheckIdleState>
 80107b2:	4603      	mov	r3, r0
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107c0:	b092      	sub	sp, #72	; 0x48
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	689a      	ldr	r2, [r3, #8]
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	691b      	ldr	r3, [r3, #16]
 80107d4:	431a      	orrs	r2, r3
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	431a      	orrs	r2, r3
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	69db      	ldr	r3, [r3, #28]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	4bbe      	ldr	r3, [pc, #760]	; (8010ae4 <UART_SetConfig+0x328>)
 80107ec:	4013      	ands	r3, r2
 80107ee:	697a      	ldr	r2, [r7, #20]
 80107f0:	6812      	ldr	r2, [r2, #0]
 80107f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107f4:	430b      	orrs	r3, r1
 80107f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	68da      	ldr	r2, [r3, #12]
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	430a      	orrs	r2, r1
 801080c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	699b      	ldr	r3, [r3, #24]
 8010812:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4ab3      	ldr	r2, [pc, #716]	; (8010ae8 <UART_SetConfig+0x32c>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d004      	beq.n	8010828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	6a1b      	ldr	r3, [r3, #32]
 8010822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010824:	4313      	orrs	r3, r2
 8010826:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	689a      	ldr	r2, [r3, #8]
 801082e:	4baf      	ldr	r3, [pc, #700]	; (8010aec <UART_SetConfig+0x330>)
 8010830:	4013      	ands	r3, r2
 8010832:	697a      	ldr	r2, [r7, #20]
 8010834:	6812      	ldr	r2, [r2, #0]
 8010836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010838:	430b      	orrs	r3, r1
 801083a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010842:	f023 010f 	bic.w	r1, r3, #15
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	430a      	orrs	r2, r1
 8010850:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4aa6      	ldr	r2, [pc, #664]	; (8010af0 <UART_SetConfig+0x334>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d177      	bne.n	801094c <UART_SetConfig+0x190>
 801085c:	4ba5      	ldr	r3, [pc, #660]	; (8010af4 <UART_SetConfig+0x338>)
 801085e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010864:	2b28      	cmp	r3, #40	; 0x28
 8010866:	d86d      	bhi.n	8010944 <UART_SetConfig+0x188>
 8010868:	a201      	add	r2, pc, #4	; (adr r2, 8010870 <UART_SetConfig+0xb4>)
 801086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086e:	bf00      	nop
 8010870:	08010915 	.word	0x08010915
 8010874:	08010945 	.word	0x08010945
 8010878:	08010945 	.word	0x08010945
 801087c:	08010945 	.word	0x08010945
 8010880:	08010945 	.word	0x08010945
 8010884:	08010945 	.word	0x08010945
 8010888:	08010945 	.word	0x08010945
 801088c:	08010945 	.word	0x08010945
 8010890:	0801091d 	.word	0x0801091d
 8010894:	08010945 	.word	0x08010945
 8010898:	08010945 	.word	0x08010945
 801089c:	08010945 	.word	0x08010945
 80108a0:	08010945 	.word	0x08010945
 80108a4:	08010945 	.word	0x08010945
 80108a8:	08010945 	.word	0x08010945
 80108ac:	08010945 	.word	0x08010945
 80108b0:	08010925 	.word	0x08010925
 80108b4:	08010945 	.word	0x08010945
 80108b8:	08010945 	.word	0x08010945
 80108bc:	08010945 	.word	0x08010945
 80108c0:	08010945 	.word	0x08010945
 80108c4:	08010945 	.word	0x08010945
 80108c8:	08010945 	.word	0x08010945
 80108cc:	08010945 	.word	0x08010945
 80108d0:	0801092d 	.word	0x0801092d
 80108d4:	08010945 	.word	0x08010945
 80108d8:	08010945 	.word	0x08010945
 80108dc:	08010945 	.word	0x08010945
 80108e0:	08010945 	.word	0x08010945
 80108e4:	08010945 	.word	0x08010945
 80108e8:	08010945 	.word	0x08010945
 80108ec:	08010945 	.word	0x08010945
 80108f0:	08010935 	.word	0x08010935
 80108f4:	08010945 	.word	0x08010945
 80108f8:	08010945 	.word	0x08010945
 80108fc:	08010945 	.word	0x08010945
 8010900:	08010945 	.word	0x08010945
 8010904:	08010945 	.word	0x08010945
 8010908:	08010945 	.word	0x08010945
 801090c:	08010945 	.word	0x08010945
 8010910:	0801093d 	.word	0x0801093d
 8010914:	2301      	movs	r3, #1
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091a:	e326      	b.n	8010f6a <UART_SetConfig+0x7ae>
 801091c:	2304      	movs	r3, #4
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010922:	e322      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010924:	2308      	movs	r3, #8
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092a:	e31e      	b.n	8010f6a <UART_SetConfig+0x7ae>
 801092c:	2310      	movs	r3, #16
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010932:	e31a      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010934:	2320      	movs	r3, #32
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093a:	e316      	b.n	8010f6a <UART_SetConfig+0x7ae>
 801093c:	2340      	movs	r3, #64	; 0x40
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010942:	e312      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010944:	2380      	movs	r3, #128	; 0x80
 8010946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094a:	e30e      	b.n	8010f6a <UART_SetConfig+0x7ae>
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	4a69      	ldr	r2, [pc, #420]	; (8010af8 <UART_SetConfig+0x33c>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d130      	bne.n	80109b8 <UART_SetConfig+0x1fc>
 8010956:	4b67      	ldr	r3, [pc, #412]	; (8010af4 <UART_SetConfig+0x338>)
 8010958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801095a:	f003 0307 	and.w	r3, r3, #7
 801095e:	2b05      	cmp	r3, #5
 8010960:	d826      	bhi.n	80109b0 <UART_SetConfig+0x1f4>
 8010962:	a201      	add	r2, pc, #4	; (adr r2, 8010968 <UART_SetConfig+0x1ac>)
 8010964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010968:	08010981 	.word	0x08010981
 801096c:	08010989 	.word	0x08010989
 8010970:	08010991 	.word	0x08010991
 8010974:	08010999 	.word	0x08010999
 8010978:	080109a1 	.word	0x080109a1
 801097c:	080109a9 	.word	0x080109a9
 8010980:	2300      	movs	r3, #0
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010986:	e2f0      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010988:	2304      	movs	r3, #4
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801098e:	e2ec      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010990:	2308      	movs	r3, #8
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010996:	e2e8      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010998:	2310      	movs	r3, #16
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099e:	e2e4      	b.n	8010f6a <UART_SetConfig+0x7ae>
 80109a0:	2320      	movs	r3, #32
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a6:	e2e0      	b.n	8010f6a <UART_SetConfig+0x7ae>
 80109a8:	2340      	movs	r3, #64	; 0x40
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ae:	e2dc      	b.n	8010f6a <UART_SetConfig+0x7ae>
 80109b0:	2380      	movs	r3, #128	; 0x80
 80109b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b6:	e2d8      	b.n	8010f6a <UART_SetConfig+0x7ae>
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a4f      	ldr	r2, [pc, #316]	; (8010afc <UART_SetConfig+0x340>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d130      	bne.n	8010a24 <UART_SetConfig+0x268>
 80109c2:	4b4c      	ldr	r3, [pc, #304]	; (8010af4 <UART_SetConfig+0x338>)
 80109c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109c6:	f003 0307 	and.w	r3, r3, #7
 80109ca:	2b05      	cmp	r3, #5
 80109cc:	d826      	bhi.n	8010a1c <UART_SetConfig+0x260>
 80109ce:	a201      	add	r2, pc, #4	; (adr r2, 80109d4 <UART_SetConfig+0x218>)
 80109d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d4:	080109ed 	.word	0x080109ed
 80109d8:	080109f5 	.word	0x080109f5
 80109dc:	080109fd 	.word	0x080109fd
 80109e0:	08010a05 	.word	0x08010a05
 80109e4:	08010a0d 	.word	0x08010a0d
 80109e8:	08010a15 	.word	0x08010a15
 80109ec:	2300      	movs	r3, #0
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f2:	e2ba      	b.n	8010f6a <UART_SetConfig+0x7ae>
 80109f4:	2304      	movs	r3, #4
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109fa:	e2b6      	b.n	8010f6a <UART_SetConfig+0x7ae>
 80109fc:	2308      	movs	r3, #8
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a02:	e2b2      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a04:	2310      	movs	r3, #16
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0a:	e2ae      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a0c:	2320      	movs	r3, #32
 8010a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a12:	e2aa      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a14:	2340      	movs	r3, #64	; 0x40
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1a:	e2a6      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a1c:	2380      	movs	r3, #128	; 0x80
 8010a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a22:	e2a2      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a35      	ldr	r2, [pc, #212]	; (8010b00 <UART_SetConfig+0x344>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d130      	bne.n	8010a90 <UART_SetConfig+0x2d4>
 8010a2e:	4b31      	ldr	r3, [pc, #196]	; (8010af4 <UART_SetConfig+0x338>)
 8010a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a32:	f003 0307 	and.w	r3, r3, #7
 8010a36:	2b05      	cmp	r3, #5
 8010a38:	d826      	bhi.n	8010a88 <UART_SetConfig+0x2cc>
 8010a3a:	a201      	add	r2, pc, #4	; (adr r2, 8010a40 <UART_SetConfig+0x284>)
 8010a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a40:	08010a59 	.word	0x08010a59
 8010a44:	08010a61 	.word	0x08010a61
 8010a48:	08010a69 	.word	0x08010a69
 8010a4c:	08010a71 	.word	0x08010a71
 8010a50:	08010a79 	.word	0x08010a79
 8010a54:	08010a81 	.word	0x08010a81
 8010a58:	2300      	movs	r3, #0
 8010a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a5e:	e284      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a60:	2304      	movs	r3, #4
 8010a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a66:	e280      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a68:	2308      	movs	r3, #8
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6e:	e27c      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a70:	2310      	movs	r3, #16
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a76:	e278      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a78:	2320      	movs	r3, #32
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7e:	e274      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a80:	2340      	movs	r3, #64	; 0x40
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a86:	e270      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a88:	2380      	movs	r3, #128	; 0x80
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8e:	e26c      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a1b      	ldr	r2, [pc, #108]	; (8010b04 <UART_SetConfig+0x348>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d142      	bne.n	8010b20 <UART_SetConfig+0x364>
 8010a9a:	4b16      	ldr	r3, [pc, #88]	; (8010af4 <UART_SetConfig+0x338>)
 8010a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a9e:	f003 0307 	and.w	r3, r3, #7
 8010aa2:	2b05      	cmp	r3, #5
 8010aa4:	d838      	bhi.n	8010b18 <UART_SetConfig+0x35c>
 8010aa6:	a201      	add	r2, pc, #4	; (adr r2, 8010aac <UART_SetConfig+0x2f0>)
 8010aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aac:	08010ac5 	.word	0x08010ac5
 8010ab0:	08010acd 	.word	0x08010acd
 8010ab4:	08010ad5 	.word	0x08010ad5
 8010ab8:	08010add 	.word	0x08010add
 8010abc:	08010b09 	.word	0x08010b09
 8010ac0:	08010b11 	.word	0x08010b11
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aca:	e24e      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010acc:	2304      	movs	r3, #4
 8010ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ad2:	e24a      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ad4:	2308      	movs	r3, #8
 8010ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ada:	e246      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010adc:	2310      	movs	r3, #16
 8010ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae2:	e242      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ae4:	cfff69f3 	.word	0xcfff69f3
 8010ae8:	58000c00 	.word	0x58000c00
 8010aec:	11fff4ff 	.word	0x11fff4ff
 8010af0:	40011000 	.word	0x40011000
 8010af4:	58024400 	.word	0x58024400
 8010af8:	40004400 	.word	0x40004400
 8010afc:	40004800 	.word	0x40004800
 8010b00:	40004c00 	.word	0x40004c00
 8010b04:	40005000 	.word	0x40005000
 8010b08:	2320      	movs	r3, #32
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e22c      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010b10:	2340      	movs	r3, #64	; 0x40
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e228      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010b18:	2380      	movs	r3, #128	; 0x80
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1e:	e224      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4ab1      	ldr	r2, [pc, #708]	; (8010dec <UART_SetConfig+0x630>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d176      	bne.n	8010c18 <UART_SetConfig+0x45c>
 8010b2a:	4bb1      	ldr	r3, [pc, #708]	; (8010df0 <UART_SetConfig+0x634>)
 8010b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b32:	2b28      	cmp	r3, #40	; 0x28
 8010b34:	d86c      	bhi.n	8010c10 <UART_SetConfig+0x454>
 8010b36:	a201      	add	r2, pc, #4	; (adr r2, 8010b3c <UART_SetConfig+0x380>)
 8010b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3c:	08010be1 	.word	0x08010be1
 8010b40:	08010c11 	.word	0x08010c11
 8010b44:	08010c11 	.word	0x08010c11
 8010b48:	08010c11 	.word	0x08010c11
 8010b4c:	08010c11 	.word	0x08010c11
 8010b50:	08010c11 	.word	0x08010c11
 8010b54:	08010c11 	.word	0x08010c11
 8010b58:	08010c11 	.word	0x08010c11
 8010b5c:	08010be9 	.word	0x08010be9
 8010b60:	08010c11 	.word	0x08010c11
 8010b64:	08010c11 	.word	0x08010c11
 8010b68:	08010c11 	.word	0x08010c11
 8010b6c:	08010c11 	.word	0x08010c11
 8010b70:	08010c11 	.word	0x08010c11
 8010b74:	08010c11 	.word	0x08010c11
 8010b78:	08010c11 	.word	0x08010c11
 8010b7c:	08010bf1 	.word	0x08010bf1
 8010b80:	08010c11 	.word	0x08010c11
 8010b84:	08010c11 	.word	0x08010c11
 8010b88:	08010c11 	.word	0x08010c11
 8010b8c:	08010c11 	.word	0x08010c11
 8010b90:	08010c11 	.word	0x08010c11
 8010b94:	08010c11 	.word	0x08010c11
 8010b98:	08010c11 	.word	0x08010c11
 8010b9c:	08010bf9 	.word	0x08010bf9
 8010ba0:	08010c11 	.word	0x08010c11
 8010ba4:	08010c11 	.word	0x08010c11
 8010ba8:	08010c11 	.word	0x08010c11
 8010bac:	08010c11 	.word	0x08010c11
 8010bb0:	08010c11 	.word	0x08010c11
 8010bb4:	08010c11 	.word	0x08010c11
 8010bb8:	08010c11 	.word	0x08010c11
 8010bbc:	08010c01 	.word	0x08010c01
 8010bc0:	08010c11 	.word	0x08010c11
 8010bc4:	08010c11 	.word	0x08010c11
 8010bc8:	08010c11 	.word	0x08010c11
 8010bcc:	08010c11 	.word	0x08010c11
 8010bd0:	08010c11 	.word	0x08010c11
 8010bd4:	08010c11 	.word	0x08010c11
 8010bd8:	08010c11 	.word	0x08010c11
 8010bdc:	08010c09 	.word	0x08010c09
 8010be0:	2301      	movs	r3, #1
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e1c0      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010be8:	2304      	movs	r3, #4
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e1bc      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010bf0:	2308      	movs	r3, #8
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e1b8      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010bf8:	2310      	movs	r3, #16
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e1b4      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c00:	2320      	movs	r3, #32
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e1b0      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c08:	2340      	movs	r3, #64	; 0x40
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e1ac      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c10:	2380      	movs	r3, #128	; 0x80
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c16:	e1a8      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a75      	ldr	r2, [pc, #468]	; (8010df4 <UART_SetConfig+0x638>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d130      	bne.n	8010c84 <UART_SetConfig+0x4c8>
 8010c22:	4b73      	ldr	r3, [pc, #460]	; (8010df0 <UART_SetConfig+0x634>)
 8010c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c26:	f003 0307 	and.w	r3, r3, #7
 8010c2a:	2b05      	cmp	r3, #5
 8010c2c:	d826      	bhi.n	8010c7c <UART_SetConfig+0x4c0>
 8010c2e:	a201      	add	r2, pc, #4	; (adr r2, 8010c34 <UART_SetConfig+0x478>)
 8010c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c34:	08010c4d 	.word	0x08010c4d
 8010c38:	08010c55 	.word	0x08010c55
 8010c3c:	08010c5d 	.word	0x08010c5d
 8010c40:	08010c65 	.word	0x08010c65
 8010c44:	08010c6d 	.word	0x08010c6d
 8010c48:	08010c75 	.word	0x08010c75
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c52:	e18a      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c54:	2304      	movs	r3, #4
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5a:	e186      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c5c:	2308      	movs	r3, #8
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c62:	e182      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c64:	2310      	movs	r3, #16
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6a:	e17e      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c6c:	2320      	movs	r3, #32
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c72:	e17a      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c74:	2340      	movs	r3, #64	; 0x40
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e176      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c7c:	2380      	movs	r3, #128	; 0x80
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e172      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4a5b      	ldr	r2, [pc, #364]	; (8010df8 <UART_SetConfig+0x63c>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d130      	bne.n	8010cf0 <UART_SetConfig+0x534>
 8010c8e:	4b58      	ldr	r3, [pc, #352]	; (8010df0 <UART_SetConfig+0x634>)
 8010c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c92:	f003 0307 	and.w	r3, r3, #7
 8010c96:	2b05      	cmp	r3, #5
 8010c98:	d826      	bhi.n	8010ce8 <UART_SetConfig+0x52c>
 8010c9a:	a201      	add	r2, pc, #4	; (adr r2, 8010ca0 <UART_SetConfig+0x4e4>)
 8010c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca0:	08010cb9 	.word	0x08010cb9
 8010ca4:	08010cc1 	.word	0x08010cc1
 8010ca8:	08010cc9 	.word	0x08010cc9
 8010cac:	08010cd1 	.word	0x08010cd1
 8010cb0:	08010cd9 	.word	0x08010cd9
 8010cb4:	08010ce1 	.word	0x08010ce1
 8010cb8:	2300      	movs	r3, #0
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cbe:	e154      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010cc0:	2304      	movs	r3, #4
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc6:	e150      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010cc8:	2308      	movs	r3, #8
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e14c      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010cd0:	2310      	movs	r3, #16
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd6:	e148      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010cd8:	2320      	movs	r3, #32
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cde:	e144      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ce0:	2340      	movs	r3, #64	; 0x40
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e140      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ce8:	2380      	movs	r3, #128	; 0x80
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cee:	e13c      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a41      	ldr	r2, [pc, #260]	; (8010dfc <UART_SetConfig+0x640>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	f040 8082 	bne.w	8010e00 <UART_SetConfig+0x644>
 8010cfc:	4b3c      	ldr	r3, [pc, #240]	; (8010df0 <UART_SetConfig+0x634>)
 8010cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d04:	2b28      	cmp	r3, #40	; 0x28
 8010d06:	d86d      	bhi.n	8010de4 <UART_SetConfig+0x628>
 8010d08:	a201      	add	r2, pc, #4	; (adr r2, 8010d10 <UART_SetConfig+0x554>)
 8010d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d0e:	bf00      	nop
 8010d10:	08010db5 	.word	0x08010db5
 8010d14:	08010de5 	.word	0x08010de5
 8010d18:	08010de5 	.word	0x08010de5
 8010d1c:	08010de5 	.word	0x08010de5
 8010d20:	08010de5 	.word	0x08010de5
 8010d24:	08010de5 	.word	0x08010de5
 8010d28:	08010de5 	.word	0x08010de5
 8010d2c:	08010de5 	.word	0x08010de5
 8010d30:	08010dbd 	.word	0x08010dbd
 8010d34:	08010de5 	.word	0x08010de5
 8010d38:	08010de5 	.word	0x08010de5
 8010d3c:	08010de5 	.word	0x08010de5
 8010d40:	08010de5 	.word	0x08010de5
 8010d44:	08010de5 	.word	0x08010de5
 8010d48:	08010de5 	.word	0x08010de5
 8010d4c:	08010de5 	.word	0x08010de5
 8010d50:	08010dc5 	.word	0x08010dc5
 8010d54:	08010de5 	.word	0x08010de5
 8010d58:	08010de5 	.word	0x08010de5
 8010d5c:	08010de5 	.word	0x08010de5
 8010d60:	08010de5 	.word	0x08010de5
 8010d64:	08010de5 	.word	0x08010de5
 8010d68:	08010de5 	.word	0x08010de5
 8010d6c:	08010de5 	.word	0x08010de5
 8010d70:	08010dcd 	.word	0x08010dcd
 8010d74:	08010de5 	.word	0x08010de5
 8010d78:	08010de5 	.word	0x08010de5
 8010d7c:	08010de5 	.word	0x08010de5
 8010d80:	08010de5 	.word	0x08010de5
 8010d84:	08010de5 	.word	0x08010de5
 8010d88:	08010de5 	.word	0x08010de5
 8010d8c:	08010de5 	.word	0x08010de5
 8010d90:	08010dd5 	.word	0x08010dd5
 8010d94:	08010de5 	.word	0x08010de5
 8010d98:	08010de5 	.word	0x08010de5
 8010d9c:	08010de5 	.word	0x08010de5
 8010da0:	08010de5 	.word	0x08010de5
 8010da4:	08010de5 	.word	0x08010de5
 8010da8:	08010de5 	.word	0x08010de5
 8010dac:	08010de5 	.word	0x08010de5
 8010db0:	08010ddd 	.word	0x08010ddd
 8010db4:	2301      	movs	r3, #1
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e0d6      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010dbc:	2304      	movs	r3, #4
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e0d2      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010dc4:	2308      	movs	r3, #8
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e0ce      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010dcc:	2310      	movs	r3, #16
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd2:	e0ca      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010dd4:	2320      	movs	r3, #32
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e0c6      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ddc:	2340      	movs	r3, #64	; 0x40
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e0c2      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010de4:	2380      	movs	r3, #128	; 0x80
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e0be      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010dec:	40011400 	.word	0x40011400
 8010df0:	58024400 	.word	0x58024400
 8010df4:	40007800 	.word	0x40007800
 8010df8:	40007c00 	.word	0x40007c00
 8010dfc:	40011800 	.word	0x40011800
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4aad      	ldr	r2, [pc, #692]	; (80110bc <UART_SetConfig+0x900>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d176      	bne.n	8010ef8 <UART_SetConfig+0x73c>
 8010e0a:	4bad      	ldr	r3, [pc, #692]	; (80110c0 <UART_SetConfig+0x904>)
 8010e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010e12:	2b28      	cmp	r3, #40	; 0x28
 8010e14:	d86c      	bhi.n	8010ef0 <UART_SetConfig+0x734>
 8010e16:	a201      	add	r2, pc, #4	; (adr r2, 8010e1c <UART_SetConfig+0x660>)
 8010e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1c:	08010ec1 	.word	0x08010ec1
 8010e20:	08010ef1 	.word	0x08010ef1
 8010e24:	08010ef1 	.word	0x08010ef1
 8010e28:	08010ef1 	.word	0x08010ef1
 8010e2c:	08010ef1 	.word	0x08010ef1
 8010e30:	08010ef1 	.word	0x08010ef1
 8010e34:	08010ef1 	.word	0x08010ef1
 8010e38:	08010ef1 	.word	0x08010ef1
 8010e3c:	08010ec9 	.word	0x08010ec9
 8010e40:	08010ef1 	.word	0x08010ef1
 8010e44:	08010ef1 	.word	0x08010ef1
 8010e48:	08010ef1 	.word	0x08010ef1
 8010e4c:	08010ef1 	.word	0x08010ef1
 8010e50:	08010ef1 	.word	0x08010ef1
 8010e54:	08010ef1 	.word	0x08010ef1
 8010e58:	08010ef1 	.word	0x08010ef1
 8010e5c:	08010ed1 	.word	0x08010ed1
 8010e60:	08010ef1 	.word	0x08010ef1
 8010e64:	08010ef1 	.word	0x08010ef1
 8010e68:	08010ef1 	.word	0x08010ef1
 8010e6c:	08010ef1 	.word	0x08010ef1
 8010e70:	08010ef1 	.word	0x08010ef1
 8010e74:	08010ef1 	.word	0x08010ef1
 8010e78:	08010ef1 	.word	0x08010ef1
 8010e7c:	08010ed9 	.word	0x08010ed9
 8010e80:	08010ef1 	.word	0x08010ef1
 8010e84:	08010ef1 	.word	0x08010ef1
 8010e88:	08010ef1 	.word	0x08010ef1
 8010e8c:	08010ef1 	.word	0x08010ef1
 8010e90:	08010ef1 	.word	0x08010ef1
 8010e94:	08010ef1 	.word	0x08010ef1
 8010e98:	08010ef1 	.word	0x08010ef1
 8010e9c:	08010ee1 	.word	0x08010ee1
 8010ea0:	08010ef1 	.word	0x08010ef1
 8010ea4:	08010ef1 	.word	0x08010ef1
 8010ea8:	08010ef1 	.word	0x08010ef1
 8010eac:	08010ef1 	.word	0x08010ef1
 8010eb0:	08010ef1 	.word	0x08010ef1
 8010eb4:	08010ef1 	.word	0x08010ef1
 8010eb8:	08010ef1 	.word	0x08010ef1
 8010ebc:	08010ee9 	.word	0x08010ee9
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e050      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ec8:	2304      	movs	r3, #4
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e04c      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ed0:	2308      	movs	r3, #8
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed6:	e048      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ed8:	2310      	movs	r3, #16
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ede:	e044      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ee0:	2320      	movs	r3, #32
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee6:	e040      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ee8:	2340      	movs	r3, #64	; 0x40
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eee:	e03c      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ef0:	2380      	movs	r3, #128	; 0x80
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef6:	e038      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	4a71      	ldr	r2, [pc, #452]	; (80110c4 <UART_SetConfig+0x908>)
 8010efe:	4293      	cmp	r3, r2
 8010f00:	d130      	bne.n	8010f64 <UART_SetConfig+0x7a8>
 8010f02:	4b6f      	ldr	r3, [pc, #444]	; (80110c0 <UART_SetConfig+0x904>)
 8010f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f06:	f003 0307 	and.w	r3, r3, #7
 8010f0a:	2b05      	cmp	r3, #5
 8010f0c:	d826      	bhi.n	8010f5c <UART_SetConfig+0x7a0>
 8010f0e:	a201      	add	r2, pc, #4	; (adr r2, 8010f14 <UART_SetConfig+0x758>)
 8010f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f14:	08010f2d 	.word	0x08010f2d
 8010f18:	08010f35 	.word	0x08010f35
 8010f1c:	08010f3d 	.word	0x08010f3d
 8010f20:	08010f45 	.word	0x08010f45
 8010f24:	08010f4d 	.word	0x08010f4d
 8010f28:	08010f55 	.word	0x08010f55
 8010f2c:	2302      	movs	r3, #2
 8010f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f32:	e01a      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010f34:	2304      	movs	r3, #4
 8010f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3a:	e016      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010f3c:	2308      	movs	r3, #8
 8010f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f42:	e012      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010f44:	2310      	movs	r3, #16
 8010f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4a:	e00e      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010f4c:	2320      	movs	r3, #32
 8010f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f52:	e00a      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010f54:	2340      	movs	r3, #64	; 0x40
 8010f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5a:	e006      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010f5c:	2380      	movs	r3, #128	; 0x80
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f62:	e002      	b.n	8010f6a <UART_SetConfig+0x7ae>
 8010f64:	2380      	movs	r3, #128	; 0x80
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	4a55      	ldr	r2, [pc, #340]	; (80110c4 <UART_SetConfig+0x908>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	f040 80f8 	bne.w	8011166 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f7a:	2b20      	cmp	r3, #32
 8010f7c:	dc46      	bgt.n	801100c <UART_SetConfig+0x850>
 8010f7e:	2b02      	cmp	r3, #2
 8010f80:	db75      	blt.n	801106e <UART_SetConfig+0x8b2>
 8010f82:	3b02      	subs	r3, #2
 8010f84:	2b1e      	cmp	r3, #30
 8010f86:	d872      	bhi.n	801106e <UART_SetConfig+0x8b2>
 8010f88:	a201      	add	r2, pc, #4	; (adr r2, 8010f90 <UART_SetConfig+0x7d4>)
 8010f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f8e:	bf00      	nop
 8010f90:	08011013 	.word	0x08011013
 8010f94:	0801106f 	.word	0x0801106f
 8010f98:	0801101b 	.word	0x0801101b
 8010f9c:	0801106f 	.word	0x0801106f
 8010fa0:	0801106f 	.word	0x0801106f
 8010fa4:	0801106f 	.word	0x0801106f
 8010fa8:	0801102b 	.word	0x0801102b
 8010fac:	0801106f 	.word	0x0801106f
 8010fb0:	0801106f 	.word	0x0801106f
 8010fb4:	0801106f 	.word	0x0801106f
 8010fb8:	0801106f 	.word	0x0801106f
 8010fbc:	0801106f 	.word	0x0801106f
 8010fc0:	0801106f 	.word	0x0801106f
 8010fc4:	0801106f 	.word	0x0801106f
 8010fc8:	0801103b 	.word	0x0801103b
 8010fcc:	0801106f 	.word	0x0801106f
 8010fd0:	0801106f 	.word	0x0801106f
 8010fd4:	0801106f 	.word	0x0801106f
 8010fd8:	0801106f 	.word	0x0801106f
 8010fdc:	0801106f 	.word	0x0801106f
 8010fe0:	0801106f 	.word	0x0801106f
 8010fe4:	0801106f 	.word	0x0801106f
 8010fe8:	0801106f 	.word	0x0801106f
 8010fec:	0801106f 	.word	0x0801106f
 8010ff0:	0801106f 	.word	0x0801106f
 8010ff4:	0801106f 	.word	0x0801106f
 8010ff8:	0801106f 	.word	0x0801106f
 8010ffc:	0801106f 	.word	0x0801106f
 8011000:	0801106f 	.word	0x0801106f
 8011004:	0801106f 	.word	0x0801106f
 8011008:	08011061 	.word	0x08011061
 801100c:	2b40      	cmp	r3, #64	; 0x40
 801100e:	d02a      	beq.n	8011066 <UART_SetConfig+0x8aa>
 8011010:	e02d      	b.n	801106e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011012:	f7fb f86b 	bl	800c0ec <HAL_RCCEx_GetD3PCLK1Freq>
 8011016:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011018:	e02f      	b.n	801107a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801101e:	4618      	mov	r0, r3
 8011020:	f7fb f87a 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011028:	e027      	b.n	801107a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801102a:	f107 0318 	add.w	r3, r7, #24
 801102e:	4618      	mov	r0, r3
 8011030:	f7fb f9c6 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011034:	69fb      	ldr	r3, [r7, #28]
 8011036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011038:	e01f      	b.n	801107a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801103a:	4b21      	ldr	r3, [pc, #132]	; (80110c0 <UART_SetConfig+0x904>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f003 0320 	and.w	r3, r3, #32
 8011042:	2b00      	cmp	r3, #0
 8011044:	d009      	beq.n	801105a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011046:	4b1e      	ldr	r3, [pc, #120]	; (80110c0 <UART_SetConfig+0x904>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	08db      	lsrs	r3, r3, #3
 801104c:	f003 0303 	and.w	r3, r3, #3
 8011050:	4a1d      	ldr	r2, [pc, #116]	; (80110c8 <UART_SetConfig+0x90c>)
 8011052:	fa22 f303 	lsr.w	r3, r2, r3
 8011056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011058:	e00f      	b.n	801107a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801105a:	4b1b      	ldr	r3, [pc, #108]	; (80110c8 <UART_SetConfig+0x90c>)
 801105c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801105e:	e00c      	b.n	801107a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011060:	4b1a      	ldr	r3, [pc, #104]	; (80110cc <UART_SetConfig+0x910>)
 8011062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011064:	e009      	b.n	801107a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801106a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801106c:	e005      	b.n	801107a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801106e:	2300      	movs	r3, #0
 8011070:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011072:	2301      	movs	r3, #1
 8011074:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801107a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 81ee 	beq.w	801145e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011086:	4a12      	ldr	r2, [pc, #72]	; (80110d0 <UART_SetConfig+0x914>)
 8011088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801108c:	461a      	mov	r2, r3
 801108e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011090:	fbb3 f3f2 	udiv	r3, r3, r2
 8011094:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	4613      	mov	r3, r2
 801109c:	005b      	lsls	r3, r3, #1
 801109e:	4413      	add	r3, r2
 80110a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d305      	bcc.n	80110b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d910      	bls.n	80110d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80110b8:	e1d1      	b.n	801145e <UART_SetConfig+0xca2>
 80110ba:	bf00      	nop
 80110bc:	40011c00 	.word	0x40011c00
 80110c0:	58024400 	.word	0x58024400
 80110c4:	58000c00 	.word	0x58000c00
 80110c8:	03d09000 	.word	0x03d09000
 80110cc:	003d0900 	.word	0x003d0900
 80110d0:	0801dcbc 	.word	0x0801dcbc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110d6:	2200      	movs	r2, #0
 80110d8:	60bb      	str	r3, [r7, #8]
 80110da:	60fa      	str	r2, [r7, #12]
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e0:	4ac0      	ldr	r2, [pc, #768]	; (80113e4 <UART_SetConfig+0xc28>)
 80110e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	2200      	movs	r2, #0
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	607a      	str	r2, [r7, #4]
 80110ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80110f6:	f7ef fb1f 	bl	8000738 <__aeabi_uldivmod>
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	4610      	mov	r0, r2
 8011100:	4619      	mov	r1, r3
 8011102:	f04f 0200 	mov.w	r2, #0
 8011106:	f04f 0300 	mov.w	r3, #0
 801110a:	020b      	lsls	r3, r1, #8
 801110c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011110:	0202      	lsls	r2, r0, #8
 8011112:	6979      	ldr	r1, [r7, #20]
 8011114:	6849      	ldr	r1, [r1, #4]
 8011116:	0849      	lsrs	r1, r1, #1
 8011118:	2000      	movs	r0, #0
 801111a:	460c      	mov	r4, r1
 801111c:	4605      	mov	r5, r0
 801111e:	eb12 0804 	adds.w	r8, r2, r4
 8011122:	eb43 0905 	adc.w	r9, r3, r5
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	469a      	mov	sl, r3
 801112e:	4693      	mov	fp, r2
 8011130:	4652      	mov	r2, sl
 8011132:	465b      	mov	r3, fp
 8011134:	4640      	mov	r0, r8
 8011136:	4649      	mov	r1, r9
 8011138:	f7ef fafe 	bl	8000738 <__aeabi_uldivmod>
 801113c:	4602      	mov	r2, r0
 801113e:	460b      	mov	r3, r1
 8011140:	4613      	mov	r3, r2
 8011142:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801114a:	d308      	bcc.n	801115e <UART_SetConfig+0x9a2>
 801114c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011152:	d204      	bcs.n	801115e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801115a:	60da      	str	r2, [r3, #12]
 801115c:	e17f      	b.n	801145e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801115e:	2301      	movs	r3, #1
 8011160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011164:	e17b      	b.n	801145e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	69db      	ldr	r3, [r3, #28]
 801116a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801116e:	f040 80bd 	bne.w	80112ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011172:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011176:	2b20      	cmp	r3, #32
 8011178:	dc48      	bgt.n	801120c <UART_SetConfig+0xa50>
 801117a:	2b00      	cmp	r3, #0
 801117c:	db7b      	blt.n	8011276 <UART_SetConfig+0xaba>
 801117e:	2b20      	cmp	r3, #32
 8011180:	d879      	bhi.n	8011276 <UART_SetConfig+0xaba>
 8011182:	a201      	add	r2, pc, #4	; (adr r2, 8011188 <UART_SetConfig+0x9cc>)
 8011184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011188:	08011213 	.word	0x08011213
 801118c:	0801121b 	.word	0x0801121b
 8011190:	08011277 	.word	0x08011277
 8011194:	08011277 	.word	0x08011277
 8011198:	08011223 	.word	0x08011223
 801119c:	08011277 	.word	0x08011277
 80111a0:	08011277 	.word	0x08011277
 80111a4:	08011277 	.word	0x08011277
 80111a8:	08011233 	.word	0x08011233
 80111ac:	08011277 	.word	0x08011277
 80111b0:	08011277 	.word	0x08011277
 80111b4:	08011277 	.word	0x08011277
 80111b8:	08011277 	.word	0x08011277
 80111bc:	08011277 	.word	0x08011277
 80111c0:	08011277 	.word	0x08011277
 80111c4:	08011277 	.word	0x08011277
 80111c8:	08011243 	.word	0x08011243
 80111cc:	08011277 	.word	0x08011277
 80111d0:	08011277 	.word	0x08011277
 80111d4:	08011277 	.word	0x08011277
 80111d8:	08011277 	.word	0x08011277
 80111dc:	08011277 	.word	0x08011277
 80111e0:	08011277 	.word	0x08011277
 80111e4:	08011277 	.word	0x08011277
 80111e8:	08011277 	.word	0x08011277
 80111ec:	08011277 	.word	0x08011277
 80111f0:	08011277 	.word	0x08011277
 80111f4:	08011277 	.word	0x08011277
 80111f8:	08011277 	.word	0x08011277
 80111fc:	08011277 	.word	0x08011277
 8011200:	08011277 	.word	0x08011277
 8011204:	08011277 	.word	0x08011277
 8011208:	08011269 	.word	0x08011269
 801120c:	2b40      	cmp	r3, #64	; 0x40
 801120e:	d02e      	beq.n	801126e <UART_SetConfig+0xab2>
 8011210:	e031      	b.n	8011276 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011212:	f7f9 f8cd 	bl	800a3b0 <HAL_RCC_GetPCLK1Freq>
 8011216:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011218:	e033      	b.n	8011282 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801121a:	f7f9 f8df 	bl	800a3dc <HAL_RCC_GetPCLK2Freq>
 801121e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011220:	e02f      	b.n	8011282 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011226:	4618      	mov	r0, r3
 8011228:	f7fa ff76 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011230:	e027      	b.n	8011282 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011232:	f107 0318 	add.w	r3, r7, #24
 8011236:	4618      	mov	r0, r3
 8011238:	f7fb f8c2 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011240:	e01f      	b.n	8011282 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011242:	4b69      	ldr	r3, [pc, #420]	; (80113e8 <UART_SetConfig+0xc2c>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f003 0320 	and.w	r3, r3, #32
 801124a:	2b00      	cmp	r3, #0
 801124c:	d009      	beq.n	8011262 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801124e:	4b66      	ldr	r3, [pc, #408]	; (80113e8 <UART_SetConfig+0xc2c>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	08db      	lsrs	r3, r3, #3
 8011254:	f003 0303 	and.w	r3, r3, #3
 8011258:	4a64      	ldr	r2, [pc, #400]	; (80113ec <UART_SetConfig+0xc30>)
 801125a:	fa22 f303 	lsr.w	r3, r2, r3
 801125e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011260:	e00f      	b.n	8011282 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011262:	4b62      	ldr	r3, [pc, #392]	; (80113ec <UART_SetConfig+0xc30>)
 8011264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011266:	e00c      	b.n	8011282 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011268:	4b61      	ldr	r3, [pc, #388]	; (80113f0 <UART_SetConfig+0xc34>)
 801126a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801126c:	e009      	b.n	8011282 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801126e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011274:	e005      	b.n	8011282 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011276:	2300      	movs	r3, #0
 8011278:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801127a:	2301      	movs	r3, #1
 801127c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011284:	2b00      	cmp	r3, #0
 8011286:	f000 80ea 	beq.w	801145e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801128e:	4a55      	ldr	r2, [pc, #340]	; (80113e4 <UART_SetConfig+0xc28>)
 8011290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011294:	461a      	mov	r2, r3
 8011296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011298:	fbb3 f3f2 	udiv	r3, r3, r2
 801129c:	005a      	lsls	r2, r3, #1
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	085b      	lsrs	r3, r3, #1
 80112a4:	441a      	add	r2, r3
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b2:	2b0f      	cmp	r3, #15
 80112b4:	d916      	bls.n	80112e4 <UART_SetConfig+0xb28>
 80112b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112bc:	d212      	bcs.n	80112e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	f023 030f 	bic.w	r3, r3, #15
 80112c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ca:	085b      	lsrs	r3, r3, #1
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	f003 0307 	and.w	r3, r3, #7
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80112d6:	4313      	orrs	r3, r2
 80112d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80112e0:	60da      	str	r2, [r3, #12]
 80112e2:	e0bc      	b.n	801145e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80112e4:	2301      	movs	r3, #1
 80112e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80112ea:	e0b8      	b.n	801145e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80112ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112f0:	2b20      	cmp	r3, #32
 80112f2:	dc4b      	bgt.n	801138c <UART_SetConfig+0xbd0>
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f2c0 8087 	blt.w	8011408 <UART_SetConfig+0xc4c>
 80112fa:	2b20      	cmp	r3, #32
 80112fc:	f200 8084 	bhi.w	8011408 <UART_SetConfig+0xc4c>
 8011300:	a201      	add	r2, pc, #4	; (adr r2, 8011308 <UART_SetConfig+0xb4c>)
 8011302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011306:	bf00      	nop
 8011308:	08011393 	.word	0x08011393
 801130c:	0801139b 	.word	0x0801139b
 8011310:	08011409 	.word	0x08011409
 8011314:	08011409 	.word	0x08011409
 8011318:	080113a3 	.word	0x080113a3
 801131c:	08011409 	.word	0x08011409
 8011320:	08011409 	.word	0x08011409
 8011324:	08011409 	.word	0x08011409
 8011328:	080113b3 	.word	0x080113b3
 801132c:	08011409 	.word	0x08011409
 8011330:	08011409 	.word	0x08011409
 8011334:	08011409 	.word	0x08011409
 8011338:	08011409 	.word	0x08011409
 801133c:	08011409 	.word	0x08011409
 8011340:	08011409 	.word	0x08011409
 8011344:	08011409 	.word	0x08011409
 8011348:	080113c3 	.word	0x080113c3
 801134c:	08011409 	.word	0x08011409
 8011350:	08011409 	.word	0x08011409
 8011354:	08011409 	.word	0x08011409
 8011358:	08011409 	.word	0x08011409
 801135c:	08011409 	.word	0x08011409
 8011360:	08011409 	.word	0x08011409
 8011364:	08011409 	.word	0x08011409
 8011368:	08011409 	.word	0x08011409
 801136c:	08011409 	.word	0x08011409
 8011370:	08011409 	.word	0x08011409
 8011374:	08011409 	.word	0x08011409
 8011378:	08011409 	.word	0x08011409
 801137c:	08011409 	.word	0x08011409
 8011380:	08011409 	.word	0x08011409
 8011384:	08011409 	.word	0x08011409
 8011388:	080113fb 	.word	0x080113fb
 801138c:	2b40      	cmp	r3, #64	; 0x40
 801138e:	d037      	beq.n	8011400 <UART_SetConfig+0xc44>
 8011390:	e03a      	b.n	8011408 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011392:	f7f9 f80d 	bl	800a3b0 <HAL_RCC_GetPCLK1Freq>
 8011396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011398:	e03c      	b.n	8011414 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801139a:	f7f9 f81f 	bl	800a3dc <HAL_RCC_GetPCLK2Freq>
 801139e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80113a0:	e038      	b.n	8011414 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fa feb6 	bl	800c118 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113b0:	e030      	b.n	8011414 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113b2:	f107 0318 	add.w	r3, r7, #24
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fb f802 	bl	800c3c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113c0:	e028      	b.n	8011414 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113c2:	4b09      	ldr	r3, [pc, #36]	; (80113e8 <UART_SetConfig+0xc2c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f003 0320 	and.w	r3, r3, #32
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d012      	beq.n	80113f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113ce:	4b06      	ldr	r3, [pc, #24]	; (80113e8 <UART_SetConfig+0xc2c>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	08db      	lsrs	r3, r3, #3
 80113d4:	f003 0303 	and.w	r3, r3, #3
 80113d8:	4a04      	ldr	r2, [pc, #16]	; (80113ec <UART_SetConfig+0xc30>)
 80113da:	fa22 f303 	lsr.w	r3, r2, r3
 80113de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113e0:	e018      	b.n	8011414 <UART_SetConfig+0xc58>
 80113e2:	bf00      	nop
 80113e4:	0801dcbc 	.word	0x0801dcbc
 80113e8:	58024400 	.word	0x58024400
 80113ec:	03d09000 	.word	0x03d09000
 80113f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80113f4:	4b24      	ldr	r3, [pc, #144]	; (8011488 <UART_SetConfig+0xccc>)
 80113f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f8:	e00c      	b.n	8011414 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113fa:	4b24      	ldr	r3, [pc, #144]	; (801148c <UART_SetConfig+0xcd0>)
 80113fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113fe:	e009      	b.n	8011414 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011406:	e005      	b.n	8011414 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011408:	2300      	movs	r3, #0
 801140a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801140c:	2301      	movs	r3, #1
 801140e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011412:	bf00      	nop
    }

    if (pclk != 0U)
 8011414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011416:	2b00      	cmp	r3, #0
 8011418:	d021      	beq.n	801145e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801141e:	4a1c      	ldr	r2, [pc, #112]	; (8011490 <UART_SetConfig+0xcd4>)
 8011420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011424:	461a      	mov	r2, r3
 8011426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011428:	fbb3 f2f2 	udiv	r2, r3, r2
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	085b      	lsrs	r3, r3, #1
 8011432:	441a      	add	r2, r3
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	fbb2 f3f3 	udiv	r3, r2, r3
 801143c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011440:	2b0f      	cmp	r3, #15
 8011442:	d909      	bls.n	8011458 <UART_SetConfig+0xc9c>
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801144a:	d205      	bcs.n	8011458 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801144c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801144e:	b29a      	uxth	r2, r3
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	60da      	str	r2, [r3, #12]
 8011456:	e002      	b.n	801145e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011458:	2301      	movs	r3, #1
 801145a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	2201      	movs	r2, #1
 8011462:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	2201      	movs	r2, #1
 801146a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	2200      	movs	r2, #0
 8011472:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	2200      	movs	r2, #0
 8011478:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801147a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801147e:	4618      	mov	r0, r3
 8011480:	3748      	adds	r7, #72	; 0x48
 8011482:	46bd      	mov	sp, r7
 8011484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011488:	03d09000 	.word	0x03d09000
 801148c:	003d0900 	.word	0x003d0900
 8011490:	0801dcbc 	.word	0x0801dcbc

08011494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a0:	f003 0301 	and.w	r3, r3, #1
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00a      	beq.n	80114be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	430a      	orrs	r2, r1
 80114bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c2:	f003 0302 	and.w	r3, r3, #2
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00a      	beq.n	80114e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	430a      	orrs	r2, r1
 80114de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114e4:	f003 0304 	and.w	r3, r3, #4
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00a      	beq.n	8011502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	430a      	orrs	r2, r1
 8011500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011506:	f003 0308 	and.w	r3, r3, #8
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00a      	beq.n	8011524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	430a      	orrs	r2, r1
 8011522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011528:	f003 0310 	and.w	r3, r3, #16
 801152c:	2b00      	cmp	r3, #0
 801152e:	d00a      	beq.n	8011546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	430a      	orrs	r2, r1
 8011544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801154a:	f003 0320 	and.w	r3, r3, #32
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00a      	beq.n	8011568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	430a      	orrs	r2, r1
 8011566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011570:	2b00      	cmp	r3, #0
 8011572:	d01a      	beq.n	80115aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	430a      	orrs	r2, r1
 8011588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801158e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011592:	d10a      	bne.n	80115aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	430a      	orrs	r2, r1
 80115a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00a      	beq.n	80115cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	430a      	orrs	r2, r1
 80115ca:	605a      	str	r2, [r3, #4]
  }
}
 80115cc:	bf00      	nop
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b098      	sub	sp, #96	; 0x60
 80115dc:	af02      	add	r7, sp, #8
 80115de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115e8:	f7f2 f83a 	bl	8003660 <HAL_GetTick>
 80115ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f003 0308 	and.w	r3, r3, #8
 80115f8:	2b08      	cmp	r3, #8
 80115fa:	d12f      	bne.n	801165c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011600:	9300      	str	r3, [sp, #0]
 8011602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011604:	2200      	movs	r2, #0
 8011606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 f88e 	bl	801172c <UART_WaitOnFlagUntilTimeout>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d022      	beq.n	801165c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	e853 3f00 	ldrex	r3, [r3]
 8011622:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801162a:	653b      	str	r3, [r7, #80]	; 0x50
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	461a      	mov	r2, r3
 8011632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011634:	647b      	str	r3, [r7, #68]	; 0x44
 8011636:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801163a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801163c:	e841 2300 	strex	r3, r2, [r1]
 8011640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011644:	2b00      	cmp	r3, #0
 8011646:	d1e6      	bne.n	8011616 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2220      	movs	r2, #32
 801164c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011658:	2303      	movs	r3, #3
 801165a:	e063      	b.n	8011724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f003 0304 	and.w	r3, r3, #4
 8011666:	2b04      	cmp	r3, #4
 8011668:	d149      	bne.n	80116fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801166a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011672:	2200      	movs	r2, #0
 8011674:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 f857 	bl	801172c <UART_WaitOnFlagUntilTimeout>
 801167e:	4603      	mov	r3, r0
 8011680:	2b00      	cmp	r3, #0
 8011682:	d03c      	beq.n	80116fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168c:	e853 3f00 	ldrex	r3, [r3]
 8011690:	623b      	str	r3, [r7, #32]
   return(result);
 8011692:	6a3b      	ldr	r3, [r7, #32]
 8011694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011698:	64fb      	str	r3, [r7, #76]	; 0x4c
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	461a      	mov	r2, r3
 80116a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116a2:	633b      	str	r3, [r7, #48]	; 0x30
 80116a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116aa:	e841 2300 	strex	r3, r2, [r1]
 80116ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80116b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1e6      	bne.n	8011684 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3308      	adds	r3, #8
 80116bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	e853 3f00 	ldrex	r3, [r3]
 80116c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f023 0301 	bic.w	r3, r3, #1
 80116cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	3308      	adds	r3, #8
 80116d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116d6:	61fa      	str	r2, [r7, #28]
 80116d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116da:	69b9      	ldr	r1, [r7, #24]
 80116dc:	69fa      	ldr	r2, [r7, #28]
 80116de:	e841 2300 	strex	r3, r2, [r1]
 80116e2:	617b      	str	r3, [r7, #20]
   return(result);
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1e5      	bne.n	80116b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2220      	movs	r2, #32
 80116ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116fa:	2303      	movs	r3, #3
 80116fc:	e012      	b.n	8011724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2220      	movs	r2, #32
 8011702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2220      	movs	r2, #32
 801170a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2200      	movs	r2, #0
 8011712:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2200      	movs	r2, #0
 801171e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3758      	adds	r7, #88	; 0x58
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	603b      	str	r3, [r7, #0]
 8011738:	4613      	mov	r3, r2
 801173a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801173c:	e049      	b.n	80117d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011744:	d045      	beq.n	80117d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011746:	f7f1 ff8b 	bl	8003660 <HAL_GetTick>
 801174a:	4602      	mov	r2, r0
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	429a      	cmp	r2, r3
 8011754:	d302      	bcc.n	801175c <UART_WaitOnFlagUntilTimeout+0x30>
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d101      	bne.n	8011760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801175c:	2303      	movs	r3, #3
 801175e:	e048      	b.n	80117f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f003 0304 	and.w	r3, r3, #4
 801176a:	2b00      	cmp	r3, #0
 801176c:	d031      	beq.n	80117d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	69db      	ldr	r3, [r3, #28]
 8011774:	f003 0308 	and.w	r3, r3, #8
 8011778:	2b08      	cmp	r3, #8
 801177a:	d110      	bne.n	801179e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2208      	movs	r2, #8
 8011782:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f000 f839 	bl	80117fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2208      	movs	r2, #8
 801178e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2200      	movs	r2, #0
 8011796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801179a:	2301      	movs	r3, #1
 801179c:	e029      	b.n	80117f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	69db      	ldr	r3, [r3, #28]
 80117a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117ac:	d111      	bne.n	80117d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80117b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f000 f81f 	bl	80117fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2220      	movs	r2, #32
 80117c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2200      	movs	r2, #0
 80117ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80117ce:	2303      	movs	r3, #3
 80117d0:	e00f      	b.n	80117f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	69da      	ldr	r2, [r3, #28]
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	4013      	ands	r3, r2
 80117dc:	68ba      	ldr	r2, [r7, #8]
 80117de:	429a      	cmp	r2, r3
 80117e0:	bf0c      	ite	eq
 80117e2:	2301      	moveq	r3, #1
 80117e4:	2300      	movne	r3, #0
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	461a      	mov	r2, r3
 80117ea:	79fb      	ldrb	r3, [r7, #7]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d0a6      	beq.n	801173e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117f0:	2300      	movs	r3, #0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
	...

080117fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b095      	sub	sp, #84	; 0x54
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801180c:	e853 3f00 	ldrex	r3, [r3]
 8011810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011818:	64fb      	str	r3, [r7, #76]	; 0x4c
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	461a      	mov	r2, r3
 8011820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011822:	643b      	str	r3, [r7, #64]	; 0x40
 8011824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801182a:	e841 2300 	strex	r3, r2, [r1]
 801182e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011832:	2b00      	cmp	r3, #0
 8011834:	d1e6      	bne.n	8011804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	3308      	adds	r3, #8
 801183c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801183e:	6a3b      	ldr	r3, [r7, #32]
 8011840:	e853 3f00 	ldrex	r3, [r3]
 8011844:	61fb      	str	r3, [r7, #28]
   return(result);
 8011846:	69fa      	ldr	r2, [r7, #28]
 8011848:	4b1e      	ldr	r3, [pc, #120]	; (80118c4 <UART_EndRxTransfer+0xc8>)
 801184a:	4013      	ands	r3, r2
 801184c:	64bb      	str	r3, [r7, #72]	; 0x48
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	3308      	adds	r3, #8
 8011854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801185a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801185c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801185e:	e841 2300 	strex	r3, r2, [r1]
 8011862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	2b00      	cmp	r3, #0
 8011868:	d1e5      	bne.n	8011836 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801186e:	2b01      	cmp	r3, #1
 8011870:	d118      	bne.n	80118a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	e853 3f00 	ldrex	r3, [r3]
 801187e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	f023 0310 	bic.w	r3, r3, #16
 8011886:	647b      	str	r3, [r7, #68]	; 0x44
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	461a      	mov	r2, r3
 801188e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011890:	61bb      	str	r3, [r7, #24]
 8011892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011894:	6979      	ldr	r1, [r7, #20]
 8011896:	69ba      	ldr	r2, [r7, #24]
 8011898:	e841 2300 	strex	r3, r2, [r1]
 801189c:	613b      	str	r3, [r7, #16]
   return(result);
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d1e6      	bne.n	8011872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2220      	movs	r2, #32
 80118a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2200      	movs	r2, #0
 80118b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2200      	movs	r2, #0
 80118b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80118b8:	bf00      	nop
 80118ba:	3754      	adds	r7, #84	; 0x54
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	effffffe 	.word	0xeffffffe

080118c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b085      	sub	sp, #20
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d101      	bne.n	80118de <HAL_UARTEx_DisableFifoMode+0x16>
 80118da:	2302      	movs	r3, #2
 80118dc:	e027      	b.n	801192e <HAL_UARTEx_DisableFifoMode+0x66>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2201      	movs	r2, #1
 80118e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2224      	movs	r2, #36	; 0x24
 80118ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f022 0201 	bic.w	r2, r2, #1
 8011904:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801190c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2220      	movs	r2, #32
 8011920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801192c:	2300      	movs	r3, #0
}
 801192e:	4618      	mov	r0, r3
 8011930:	3714      	adds	r7, #20
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b084      	sub	sp, #16
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801194a:	2b01      	cmp	r3, #1
 801194c:	d101      	bne.n	8011952 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801194e:	2302      	movs	r3, #2
 8011950:	e02d      	b.n	80119ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2201      	movs	r2, #1
 8011956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2224      	movs	r2, #36	; 0x24
 801195e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f022 0201 	bic.w	r2, r2, #1
 8011978:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	689b      	ldr	r3, [r3, #8]
 8011980:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	683a      	ldr	r2, [r7, #0]
 801198a:	430a      	orrs	r2, r1
 801198c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 f850 	bl	8011a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	68fa      	ldr	r2, [r7, #12]
 801199a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2220      	movs	r2, #32
 80119a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2200      	movs	r2, #0
 80119a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
 80119be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d101      	bne.n	80119ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119ca:	2302      	movs	r3, #2
 80119cc:	e02d      	b.n	8011a2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2201      	movs	r2, #1
 80119d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2224      	movs	r2, #36	; 0x24
 80119da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f022 0201 	bic.w	r2, r2, #1
 80119f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	683a      	ldr	r2, [r7, #0]
 8011a06:	430a      	orrs	r2, r1
 8011a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 f812 	bl	8011a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	68fa      	ldr	r2, [r7, #12]
 8011a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2220      	movs	r2, #32
 8011a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a28:	2300      	movs	r3, #0
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
	...

08011a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d108      	bne.n	8011a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a54:	e031      	b.n	8011aba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a56:	2310      	movs	r3, #16
 8011a58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a5a:	2310      	movs	r3, #16
 8011a5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	0e5b      	lsrs	r3, r3, #25
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	f003 0307 	and.w	r3, r3, #7
 8011a6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	689b      	ldr	r3, [r3, #8]
 8011a74:	0f5b      	lsrs	r3, r3, #29
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	f003 0307 	and.w	r3, r3, #7
 8011a7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a7e:	7bbb      	ldrb	r3, [r7, #14]
 8011a80:	7b3a      	ldrb	r2, [r7, #12]
 8011a82:	4911      	ldr	r1, [pc, #68]	; (8011ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8011a84:	5c8a      	ldrb	r2, [r1, r2]
 8011a86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a8a:	7b3a      	ldrb	r2, [r7, #12]
 8011a8c:	490f      	ldr	r1, [pc, #60]	; (8011acc <UARTEx_SetNbDataToProcess+0x98>)
 8011a8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a9c:	7bfb      	ldrb	r3, [r7, #15]
 8011a9e:	7b7a      	ldrb	r2, [r7, #13]
 8011aa0:	4909      	ldr	r1, [pc, #36]	; (8011ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8011aa2:	5c8a      	ldrb	r2, [r1, r2]
 8011aa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011aa8:	7b7a      	ldrb	r2, [r7, #13]
 8011aaa:	4908      	ldr	r1, [pc, #32]	; (8011acc <UARTEx_SetNbDataToProcess+0x98>)
 8011aac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011aba:	bf00      	nop
 8011abc:	3714      	adds	r7, #20
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop
 8011ac8:	0801dcd4 	.word	0x0801dcd4
 8011acc:	0801dcdc 	.word	0x0801dcdc

08011ad0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011ad0:	b084      	sub	sp, #16
 8011ad2:	b480      	push	{r7}
 8011ad4:	b085      	sub	sp, #20
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
 8011ada:	f107 001c 	add.w	r0, r7, #28
 8011ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011ae6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011ae8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011aea:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011aee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011af2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011af6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	4313      	orrs	r3, r2
 8011afc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	685a      	ldr	r2, [r3, #4]
 8011b02:	4b07      	ldr	r3, [pc, #28]	; (8011b20 <SDMMC_Init+0x50>)
 8011b04:	4013      	ands	r3, r2
 8011b06:	68fa      	ldr	r2, [r7, #12]
 8011b08:	431a      	orrs	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3714      	adds	r7, #20
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	b004      	add	sp, #16
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop
 8011b20:	ffc02c00 	.word	0xffc02c00

08011b24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	370c      	adds	r7, #12
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr

08011b3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011b3e:	b480      	push	{r7}
 8011b40:	b083      	sub	sp, #12
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
 8011b46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b52:	2300      	movs	r3, #0
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	370c      	adds	r7, #12
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr

08011b60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b083      	sub	sp, #12
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f043 0203 	orr.w	r2, r3, #3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011b74:	2300      	movs	r3, #0
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	370c      	adds	r7, #12
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr

08011b82 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011b82:	b480      	push	{r7}
 8011b84:	b083      	sub	sp, #12
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f003 0303 	and.w	r3, r3, #3
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr
	...

08011ba0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011baa:	2300      	movs	r3, #0
 8011bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bbe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011bc4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011bca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	68da      	ldr	r2, [r3, #12]
 8011bd6:	4b06      	ldr	r3, [pc, #24]	; (8011bf0 <SDMMC_SendCommand+0x50>)
 8011bd8:	4013      	ands	r3, r2
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	431a      	orrs	r2, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3714      	adds	r7, #20
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr
 8011bf0:	fffee0c0 	.word	0xfffee0c0

08011bf4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	691b      	ldr	r3, [r3, #16]
 8011c00:	b2db      	uxtb	r3, r3
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	370c      	adds	r7, #12
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr

08011c0e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011c0e:	b480      	push	{r7}
 8011c10:	b085      	sub	sp, #20
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	6078      	str	r0, [r7, #4]
 8011c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	3314      	adds	r3, #20
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	4413      	add	r3, r2
 8011c22:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681b      	ldr	r3, [r3, #0]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011c34:	b480      	push	{r7}
 8011c36:	b085      	sub	sp, #20
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	685a      	ldr	r2, [r3, #4]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c5a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011c60:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011c66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c68:	68fa      	ldr	r2, [r7, #12]
 8011c6a:	4313      	orrs	r3, r2
 8011c6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	431a      	orrs	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011c7e:	2300      	movs	r3, #0

}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3714      	adds	r7, #20
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr

08011c8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b088      	sub	sp, #32
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011c9a:	2310      	movs	r3, #16
 8011c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cae:	f107 0308 	add.w	r3, r7, #8
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7ff ff73 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cbe:	2110      	movs	r1, #16
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 fa5f 	bl	8012184 <SDMMC_GetCmdResp1>
 8011cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cc8:	69fb      	ldr	r3, [r7, #28]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3720      	adds	r7, #32
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}

08011cd2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011cd2:	b580      	push	{r7, lr}
 8011cd4:	b088      	sub	sp, #32
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	6078      	str	r0, [r7, #4]
 8011cda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011ce0:	2311      	movs	r3, #17
 8011ce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cea:	2300      	movs	r3, #0
 8011cec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cf4:	f107 0308 	add.w	r3, r7, #8
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7ff ff50 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d04:	2111      	movs	r1, #17
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 fa3c 	bl	8012184 <SDMMC_GetCmdResp1>
 8011d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d0e:	69fb      	ldr	r3, [r7, #28]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3720      	adds	r7, #32
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b088      	sub	sp, #32
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011d26:	2312      	movs	r3, #18
 8011d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d30:	2300      	movs	r3, #0
 8011d32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d3a:	f107 0308 	add.w	r3, r7, #8
 8011d3e:	4619      	mov	r1, r3
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f7ff ff2d 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d4a:	2112      	movs	r1, #18
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 fa19 	bl	8012184 <SDMMC_GetCmdResp1>
 8011d52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d54:	69fb      	ldr	r3, [r7, #28]
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3720      	adds	r7, #32
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b088      	sub	sp, #32
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011d6c:	2318      	movs	r3, #24
 8011d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d76:	2300      	movs	r3, #0
 8011d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d80:	f107 0308 	add.w	r3, r7, #8
 8011d84:	4619      	mov	r1, r3
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7ff ff0a 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d90:	2118      	movs	r1, #24
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f000 f9f6 	bl	8012184 <SDMMC_GetCmdResp1>
 8011d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d9a:	69fb      	ldr	r3, [r7, #28]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3720      	adds	r7, #32
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b088      	sub	sp, #32
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011db2:	2319      	movs	r3, #25
 8011db4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dc6:	f107 0308 	add.w	r3, r7, #8
 8011dca:	4619      	mov	r1, r3
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f7ff fee7 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dd6:	2119      	movs	r1, #25
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 f9d3 	bl	8012184 <SDMMC_GetCmdResp1>
 8011dde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011de0:	69fb      	ldr	r3, [r7, #28]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3720      	adds	r7, #32
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
	...

08011dec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b088      	sub	sp, #32
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011df4:	2300      	movs	r3, #0
 8011df6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011df8:	230c      	movs	r3, #12
 8011dfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e02:	2300      	movs	r3, #0
 8011e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e0a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e24:	f107 0308 	add.w	r3, r7, #8
 8011e28:	4619      	mov	r1, r3
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff feb8 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011e30:	4a0b      	ldr	r2, [pc, #44]	; (8011e60 <SDMMC_CmdStopTransfer+0x74>)
 8011e32:	210c      	movs	r1, #12
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 f9a5 	bl	8012184 <SDMMC_GetCmdResp1>
 8011e3a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e4e:	d101      	bne.n	8011e54 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011e50:	2300      	movs	r3, #0
 8011e52:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011e54:	69fb      	ldr	r3, [r7, #28]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3720      	adds	r7, #32
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	05f5e100 	.word	0x05f5e100

08011e64 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b088      	sub	sp, #32
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011e72:	2307      	movs	r3, #7
 8011e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e86:	f107 0308 	add.w	r3, r7, #8
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f7ff fe87 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e96:	2107      	movs	r1, #7
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f000 f973 	bl	8012184 <SDMMC_GetCmdResp1>
 8011e9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ea0:	69fb      	ldr	r3, [r7, #28]
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3720      	adds	r7, #32
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b088      	sub	sp, #32
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ec8:	f107 0308 	add.w	r3, r7, #8
 8011ecc:	4619      	mov	r1, r3
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7ff fe66 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 fb97 	bl	8012608 <SDMMC_GetCmdError>
 8011eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011edc:	69fb      	ldr	r3, [r7, #28]
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3720      	adds	r7, #32
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}

08011ee6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b088      	sub	sp, #32
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011eee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011ef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011ef4:	2308      	movs	r3, #8
 8011ef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011efe:	2300      	movs	r3, #0
 8011f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f08:	f107 0308 	add.w	r3, r7, #8
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f7ff fe46 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 fb29 	bl	801256c <SDMMC_GetCmdResp7>
 8011f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f1c:	69fb      	ldr	r3, [r7, #28]
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3720      	adds	r7, #32
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b088      	sub	sp, #32
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
 8011f2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011f34:	2337      	movs	r3, #55	; 0x37
 8011f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f48:	f107 0308 	add.w	r3, r7, #8
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff fe26 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f58:	2137      	movs	r1, #55	; 0x37
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 f912 	bl	8012184 <SDMMC_GetCmdResp1>
 8011f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f62:	69fb      	ldr	r3, [r7, #28]
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3720      	adds	r7, #32
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b088      	sub	sp, #32
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011f7a:	2329      	movs	r3, #41	; 0x29
 8011f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f84:	2300      	movs	r3, #0
 8011f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f8e:	f107 0308 	add.w	r3, r7, #8
 8011f92:	4619      	mov	r1, r3
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff fe03 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 fa2e 	bl	80123fc <SDMMC_GetCmdResp3>
 8011fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fa2:	69fb      	ldr	r3, [r7, #28]
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3720      	adds	r7, #32
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b088      	sub	sp, #32
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011fba:	2306      	movs	r3, #6
 8011fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fce:	f107 0308 	add.w	r3, r7, #8
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f7ff fde3 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fde:	2106      	movs	r1, #6
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 f8cf 	bl	8012184 <SDMMC_GetCmdResp1>
 8011fe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fe8:	69fb      	ldr	r3, [r7, #28]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3720      	adds	r7, #32
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b088      	sub	sp, #32
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011ffe:	2333      	movs	r3, #51	; 0x33
 8012000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012008:	2300      	movs	r3, #0
 801200a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801200c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012012:	f107 0308 	add.w	r3, r7, #8
 8012016:	4619      	mov	r1, r3
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f7ff fdc1 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012022:	2133      	movs	r1, #51	; 0x33
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f000 f8ad 	bl	8012184 <SDMMC_GetCmdResp1>
 801202a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801202c:	69fb      	ldr	r3, [r7, #28]
}
 801202e:	4618      	mov	r0, r3
 8012030:	3720      	adds	r7, #32
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b088      	sub	sp, #32
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801203e:	2300      	movs	r3, #0
 8012040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012042:	2302      	movs	r3, #2
 8012044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012046:	f44f 7340 	mov.w	r3, #768	; 0x300
 801204a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801204c:	2300      	movs	r3, #0
 801204e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012054:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012056:	f107 0308 	add.w	r3, r7, #8
 801205a:	4619      	mov	r1, r3
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7ff fd9f 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f000 f980 	bl	8012368 <SDMMC_GetCmdResp2>
 8012068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801206a:	69fb      	ldr	r3, [r7, #28]
}
 801206c:	4618      	mov	r0, r3
 801206e:	3720      	adds	r7, #32
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b088      	sub	sp, #32
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012082:	2309      	movs	r3, #9
 8012084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012086:	f44f 7340 	mov.w	r3, #768	; 0x300
 801208a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801208c:	2300      	movs	r3, #0
 801208e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012094:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012096:	f107 0308 	add.w	r3, r7, #8
 801209a:	4619      	mov	r1, r3
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f7ff fd7f 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f000 f960 	bl	8012368 <SDMMC_GetCmdResp2>
 80120a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120aa:	69fb      	ldr	r3, [r7, #28]
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3720      	adds	r7, #32
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b088      	sub	sp, #32
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80120be:	2300      	movs	r3, #0
 80120c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80120c2:	2303      	movs	r3, #3
 80120c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120cc:	2300      	movs	r3, #0
 80120ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120d6:	f107 0308 	add.w	r3, r7, #8
 80120da:	4619      	mov	r1, r3
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ff fd5f 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	2103      	movs	r1, #3
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 f9c8 	bl	801247c <SDMMC_GetCmdResp6>
 80120ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120ee:	69fb      	ldr	r3, [r7, #28]
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3720      	adds	r7, #32
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b088      	sub	sp, #32
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012106:	230d      	movs	r3, #13
 8012108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801210a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801210e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012110:	2300      	movs	r3, #0
 8012112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012118:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801211a:	f107 0308 	add.w	r3, r7, #8
 801211e:	4619      	mov	r1, r3
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7ff fd3d 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012126:	f241 3288 	movw	r2, #5000	; 0x1388
 801212a:	210d      	movs	r1, #13
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 f829 	bl	8012184 <SDMMC_GetCmdResp1>
 8012132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012134:	69fb      	ldr	r3, [r7, #28]
}
 8012136:	4618      	mov	r0, r3
 8012138:	3720      	adds	r7, #32
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801213e:	b580      	push	{r7, lr}
 8012140:	b088      	sub	sp, #32
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012146:	2300      	movs	r3, #0
 8012148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801214a:	230d      	movs	r3, #13
 801214c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801214e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012154:	2300      	movs	r3, #0
 8012156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801215c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801215e:	f107 0308 	add.w	r3, r7, #8
 8012162:	4619      	mov	r1, r3
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7ff fd1b 	bl	8011ba0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801216a:	f241 3288 	movw	r2, #5000	; 0x1388
 801216e:	210d      	movs	r1, #13
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f807 	bl	8012184 <SDMMC_GetCmdResp1>
 8012176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012178:	69fb      	ldr	r3, [r7, #28]
}
 801217a:	4618      	mov	r0, r3
 801217c:	3720      	adds	r7, #32
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
	...

08012184 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b088      	sub	sp, #32
 8012188:	af00      	add	r7, sp, #0
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	460b      	mov	r3, r1
 801218e:	607a      	str	r2, [r7, #4]
 8012190:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012192:	4b70      	ldr	r3, [pc, #448]	; (8012354 <SDMMC_GetCmdResp1+0x1d0>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	4a70      	ldr	r2, [pc, #448]	; (8012358 <SDMMC_GetCmdResp1+0x1d4>)
 8012198:	fba2 2303 	umull	r2, r3, r2, r3
 801219c:	0a5a      	lsrs	r2, r3, #9
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	fb02 f303 	mul.w	r3, r2, r3
 80121a4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	1e5a      	subs	r2, r3, #1
 80121aa:	61fa      	str	r2, [r7, #28]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d102      	bne.n	80121b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121b4:	e0c9      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ba:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80121bc:	69ba      	ldr	r2, [r7, #24]
 80121be:	4b67      	ldr	r3, [pc, #412]	; (801235c <SDMMC_GetCmdResp1+0x1d8>)
 80121c0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d0ef      	beq.n	80121a6 <SDMMC_GetCmdResp1+0x22>
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1ea      	bne.n	80121a6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121d4:	f003 0304 	and.w	r3, r3, #4
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d004      	beq.n	80121e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2204      	movs	r2, #4
 80121e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80121e2:	2304      	movs	r3, #4
 80121e4:	e0b1      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ea:	f003 0301 	and.w	r3, r3, #1
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d004      	beq.n	80121fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2201      	movs	r2, #1
 80121f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121f8:	2301      	movs	r3, #1
 80121fa:	e0a6      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	4a58      	ldr	r2, [pc, #352]	; (8012360 <SDMMC_GetCmdResp1+0x1dc>)
 8012200:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	f7ff fcf6 	bl	8011bf4 <SDMMC_GetCommandResponse>
 8012208:	4603      	mov	r3, r0
 801220a:	461a      	mov	r2, r3
 801220c:	7afb      	ldrb	r3, [r7, #11]
 801220e:	4293      	cmp	r3, r2
 8012210:	d001      	beq.n	8012216 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012212:	2301      	movs	r3, #1
 8012214:	e099      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012216:	2100      	movs	r1, #0
 8012218:	68f8      	ldr	r0, [r7, #12]
 801221a:	f7ff fcf8 	bl	8011c0e <SDMMC_GetResponse>
 801221e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012220:	697a      	ldr	r2, [r7, #20]
 8012222:	4b50      	ldr	r3, [pc, #320]	; (8012364 <SDMMC_GetCmdResp1+0x1e0>)
 8012224:	4013      	ands	r3, r2
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801222a:	2300      	movs	r3, #0
 801222c:	e08d      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	2b00      	cmp	r3, #0
 8012232:	da02      	bge.n	801223a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012238:	e087      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012240:	2b00      	cmp	r3, #0
 8012242:	d001      	beq.n	8012248 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012244:	2340      	movs	r3, #64	; 0x40
 8012246:	e080      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801224e:	2b00      	cmp	r3, #0
 8012250:	d001      	beq.n	8012256 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012252:	2380      	movs	r3, #128	; 0x80
 8012254:	e079      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801225c:	2b00      	cmp	r3, #0
 801225e:	d002      	beq.n	8012266 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012264:	e071      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801226c:	2b00      	cmp	r3, #0
 801226e:	d002      	beq.n	8012276 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012274:	e069      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801227c:	2b00      	cmp	r3, #0
 801227e:	d002      	beq.n	8012286 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012284:	e061      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801228c:	2b00      	cmp	r3, #0
 801228e:	d002      	beq.n	8012296 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012294:	e059      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801229c:	2b00      	cmp	r3, #0
 801229e:	d002      	beq.n	80122a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80122a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122a4:	e051      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d002      	beq.n	80122b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80122b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122b4:	e049      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d002      	beq.n	80122c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80122c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80122c4:	e041      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d002      	beq.n	80122d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80122d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122d4:	e039      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d002      	beq.n	80122e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80122e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80122e4:	e031      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d002      	beq.n	80122f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80122f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80122f4:	e029      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d002      	beq.n	8012306 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012300:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012304:	e021      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801230c:	2b00      	cmp	r3, #0
 801230e:	d002      	beq.n	8012316 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012310:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012314:	e019      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801231c:	2b00      	cmp	r3, #0
 801231e:	d002      	beq.n	8012326 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012320:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012324:	e011      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801232c:	2b00      	cmp	r3, #0
 801232e:	d002      	beq.n	8012336 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012330:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012334:	e009      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	f003 0308 	and.w	r3, r3, #8
 801233c:	2b00      	cmp	r3, #0
 801233e:	d002      	beq.n	8012346 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012340:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012344:	e001      	b.n	801234a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801234a:	4618      	mov	r0, r3
 801234c:	3720      	adds	r7, #32
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	24000000 	.word	0x24000000
 8012358:	10624dd3 	.word	0x10624dd3
 801235c:	00200045 	.word	0x00200045
 8012360:	002000c5 	.word	0x002000c5
 8012364:	fdffe008 	.word	0xfdffe008

08012368 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012368:	b480      	push	{r7}
 801236a:	b085      	sub	sp, #20
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012370:	4b1f      	ldr	r3, [pc, #124]	; (80123f0 <SDMMC_GetCmdResp2+0x88>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	4a1f      	ldr	r2, [pc, #124]	; (80123f4 <SDMMC_GetCmdResp2+0x8c>)
 8012376:	fba2 2303 	umull	r2, r3, r2, r3
 801237a:	0a5b      	lsrs	r3, r3, #9
 801237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012380:	fb02 f303 	mul.w	r3, r2, r3
 8012384:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	1e5a      	subs	r2, r3, #1
 801238a:	60fa      	str	r2, [r7, #12]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d102      	bne.n	8012396 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012394:	e026      	b.n	80123e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801239a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d0ef      	beq.n	8012386 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1ea      	bne.n	8012386 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123b4:	f003 0304 	and.w	r3, r3, #4
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d004      	beq.n	80123c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2204      	movs	r2, #4
 80123c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123c2:	2304      	movs	r3, #4
 80123c4:	e00e      	b.n	80123e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ca:	f003 0301 	and.w	r3, r3, #1
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d004      	beq.n	80123dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2201      	movs	r2, #1
 80123d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123d8:	2301      	movs	r3, #1
 80123da:	e003      	b.n	80123e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4a06      	ldr	r2, [pc, #24]	; (80123f8 <SDMMC_GetCmdResp2+0x90>)
 80123e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80123e2:	2300      	movs	r3, #0
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3714      	adds	r7, #20
 80123e8:	46bd      	mov	sp, r7
 80123ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ee:	4770      	bx	lr
 80123f0:	24000000 	.word	0x24000000
 80123f4:	10624dd3 	.word	0x10624dd3
 80123f8:	002000c5 	.word	0x002000c5

080123fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b085      	sub	sp, #20
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012404:	4b1a      	ldr	r3, [pc, #104]	; (8012470 <SDMMC_GetCmdResp3+0x74>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4a1a      	ldr	r2, [pc, #104]	; (8012474 <SDMMC_GetCmdResp3+0x78>)
 801240a:	fba2 2303 	umull	r2, r3, r2, r3
 801240e:	0a5b      	lsrs	r3, r3, #9
 8012410:	f241 3288 	movw	r2, #5000	; 0x1388
 8012414:	fb02 f303 	mul.w	r3, r2, r3
 8012418:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	1e5a      	subs	r2, r3, #1
 801241e:	60fa      	str	r2, [r7, #12]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d102      	bne.n	801242a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012428:	e01b      	b.n	8012462 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801242e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012436:	2b00      	cmp	r3, #0
 8012438:	d0ef      	beq.n	801241a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012440:	2b00      	cmp	r3, #0
 8012442:	d1ea      	bne.n	801241a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012448:	f003 0304 	and.w	r3, r3, #4
 801244c:	2b00      	cmp	r3, #0
 801244e:	d004      	beq.n	801245a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2204      	movs	r2, #4
 8012454:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012456:	2304      	movs	r3, #4
 8012458:	e003      	b.n	8012462 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	4a06      	ldr	r2, [pc, #24]	; (8012478 <SDMMC_GetCmdResp3+0x7c>)
 801245e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012460:	2300      	movs	r3, #0
}
 8012462:	4618      	mov	r0, r3
 8012464:	3714      	adds	r7, #20
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop
 8012470:	24000000 	.word	0x24000000
 8012474:	10624dd3 	.word	0x10624dd3
 8012478:	002000c5 	.word	0x002000c5

0801247c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b088      	sub	sp, #32
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	460b      	mov	r3, r1
 8012486:	607a      	str	r2, [r7, #4]
 8012488:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801248a:	4b35      	ldr	r3, [pc, #212]	; (8012560 <SDMMC_GetCmdResp6+0xe4>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	4a35      	ldr	r2, [pc, #212]	; (8012564 <SDMMC_GetCmdResp6+0xe8>)
 8012490:	fba2 2303 	umull	r2, r3, r2, r3
 8012494:	0a5b      	lsrs	r3, r3, #9
 8012496:	f241 3288 	movw	r2, #5000	; 0x1388
 801249a:	fb02 f303 	mul.w	r3, r2, r3
 801249e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	1e5a      	subs	r2, r3, #1
 80124a4:	61fa      	str	r2, [r7, #28]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d102      	bne.n	80124b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124ae:	e052      	b.n	8012556 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124b4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d0ef      	beq.n	80124a0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80124c0:	69bb      	ldr	r3, [r7, #24]
 80124c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1ea      	bne.n	80124a0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ce:	f003 0304 	and.w	r3, r3, #4
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d004      	beq.n	80124e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	2204      	movs	r2, #4
 80124da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80124dc:	2304      	movs	r3, #4
 80124de:	e03a      	b.n	8012556 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124e4:	f003 0301 	and.w	r3, r3, #1
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d004      	beq.n	80124f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2201      	movs	r2, #1
 80124f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124f2:	2301      	movs	r3, #1
 80124f4:	e02f      	b.n	8012556 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	f7ff fb7c 	bl	8011bf4 <SDMMC_GetCommandResponse>
 80124fc:	4603      	mov	r3, r0
 80124fe:	461a      	mov	r2, r3
 8012500:	7afb      	ldrb	r3, [r7, #11]
 8012502:	4293      	cmp	r3, r2
 8012504:	d001      	beq.n	801250a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012506:	2301      	movs	r3, #1
 8012508:	e025      	b.n	8012556 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	4a16      	ldr	r2, [pc, #88]	; (8012568 <SDMMC_GetCmdResp6+0xec>)
 801250e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012510:	2100      	movs	r1, #0
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f7ff fb7b 	bl	8011c0e <SDMMC_GetResponse>
 8012518:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012520:	2b00      	cmp	r3, #0
 8012522:	d106      	bne.n	8012532 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	0c1b      	lsrs	r3, r3, #16
 8012528:	b29a      	uxth	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801252e:	2300      	movs	r3, #0
 8012530:	e011      	b.n	8012556 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801253c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012540:	e009      	b.n	8012556 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801254c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012550:	e001      	b.n	8012556 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012556:	4618      	mov	r0, r3
 8012558:	3720      	adds	r7, #32
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	24000000 	.word	0x24000000
 8012564:	10624dd3 	.word	0x10624dd3
 8012568:	002000c5 	.word	0x002000c5

0801256c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801256c:	b480      	push	{r7}
 801256e:	b085      	sub	sp, #20
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012574:	4b22      	ldr	r3, [pc, #136]	; (8012600 <SDMMC_GetCmdResp7+0x94>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4a22      	ldr	r2, [pc, #136]	; (8012604 <SDMMC_GetCmdResp7+0x98>)
 801257a:	fba2 2303 	umull	r2, r3, r2, r3
 801257e:	0a5b      	lsrs	r3, r3, #9
 8012580:	f241 3288 	movw	r2, #5000	; 0x1388
 8012584:	fb02 f303 	mul.w	r3, r2, r3
 8012588:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	1e5a      	subs	r2, r3, #1
 801258e:	60fa      	str	r2, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d102      	bne.n	801259a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012594:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012598:	e02c      	b.n	80125f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801259e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d0ef      	beq.n	801258a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d1ea      	bne.n	801258a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125b8:	f003 0304 	and.w	r3, r3, #4
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d004      	beq.n	80125ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2204      	movs	r2, #4
 80125c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125c6:	2304      	movs	r3, #4
 80125c8:	e014      	b.n	80125f4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125ce:	f003 0301 	and.w	r3, r3, #1
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d004      	beq.n	80125e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2201      	movs	r2, #1
 80125da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125dc:	2301      	movs	r3, #1
 80125de:	e009      	b.n	80125f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d002      	beq.n	80125f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2240      	movs	r2, #64	; 0x40
 80125f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80125f2:	2300      	movs	r3, #0

}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3714      	adds	r7, #20
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr
 8012600:	24000000 	.word	0x24000000
 8012604:	10624dd3 	.word	0x10624dd3

08012608 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012610:	4b11      	ldr	r3, [pc, #68]	; (8012658 <SDMMC_GetCmdError+0x50>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a11      	ldr	r2, [pc, #68]	; (801265c <SDMMC_GetCmdError+0x54>)
 8012616:	fba2 2303 	umull	r2, r3, r2, r3
 801261a:	0a5b      	lsrs	r3, r3, #9
 801261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012620:	fb02 f303 	mul.w	r3, r2, r3
 8012624:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	1e5a      	subs	r2, r3, #1
 801262a:	60fa      	str	r2, [r7, #12]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d102      	bne.n	8012636 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012634:	e009      	b.n	801264a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801263e:	2b00      	cmp	r3, #0
 8012640:	d0f1      	beq.n	8012626 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4a06      	ldr	r2, [pc, #24]	; (8012660 <SDMMC_GetCmdError+0x58>)
 8012646:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3714      	adds	r7, #20
 801264e:	46bd      	mov	sp, r7
 8012650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012654:	4770      	bx	lr
 8012656:	bf00      	nop
 8012658:	24000000 	.word	0x24000000
 801265c:	10624dd3 	.word	0x10624dd3
 8012660:	002000c5 	.word	0x002000c5

08012664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012664:	b084      	sub	sp, #16
 8012666:	b580      	push	{r7, lr}
 8012668:	b084      	sub	sp, #16
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
 801266e:	f107 001c 	add.w	r0, r7, #28
 8012672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012678:	2b01      	cmp	r3, #1
 801267a:	d120      	bne.n	80126be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	68da      	ldr	r2, [r3, #12]
 801268c:	4b2a      	ldr	r3, [pc, #168]	; (8012738 <USB_CoreInit+0xd4>)
 801268e:	4013      	ands	r3, r2
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	68db      	ldr	r3, [r3, #12]
 8012698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80126a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d105      	bne.n	80126b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f001 faf8 	bl	8013ca8 <USB_CoreReset>
 80126b8:	4603      	mov	r3, r0
 80126ba:	73fb      	strb	r3, [r7, #15]
 80126bc:	e01a      	b.n	80126f4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f001 faec 	bl	8013ca8 <USB_CoreReset>
 80126d0:	4603      	mov	r3, r0
 80126d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80126d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d106      	bne.n	80126e8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	639a      	str	r2, [r3, #56]	; 0x38
 80126e6:	e005      	b.n	80126f4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	2b01      	cmp	r3, #1
 80126f8:	d116      	bne.n	8012728 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126fe:	b29a      	uxth	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012708:	4b0c      	ldr	r3, [pc, #48]	; (801273c <USB_CoreInit+0xd8>)
 801270a:	4313      	orrs	r3, r2
 801270c:	687a      	ldr	r2, [r7, #4]
 801270e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	689b      	ldr	r3, [r3, #8]
 8012714:	f043 0206 	orr.w	r2, r3, #6
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	689b      	ldr	r3, [r3, #8]
 8012720:	f043 0220 	orr.w	r2, r3, #32
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012728:	7bfb      	ldrb	r3, [r7, #15]
}
 801272a:	4618      	mov	r0, r3
 801272c:	3710      	adds	r7, #16
 801272e:	46bd      	mov	sp, r7
 8012730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012734:	b004      	add	sp, #16
 8012736:	4770      	bx	lr
 8012738:	ffbdffbf 	.word	0xffbdffbf
 801273c:	03ee0000 	.word	0x03ee0000

08012740 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012740:	b480      	push	{r7}
 8012742:	b087      	sub	sp, #28
 8012744:	af00      	add	r7, sp, #0
 8012746:	60f8      	str	r0, [r7, #12]
 8012748:	60b9      	str	r1, [r7, #8]
 801274a:	4613      	mov	r3, r2
 801274c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801274e:	79fb      	ldrb	r3, [r7, #7]
 8012750:	2b02      	cmp	r3, #2
 8012752:	d165      	bne.n	8012820 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	4a41      	ldr	r2, [pc, #260]	; (801285c <USB_SetTurnaroundTime+0x11c>)
 8012758:	4293      	cmp	r3, r2
 801275a:	d906      	bls.n	801276a <USB_SetTurnaroundTime+0x2a>
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	4a40      	ldr	r2, [pc, #256]	; (8012860 <USB_SetTurnaroundTime+0x120>)
 8012760:	4293      	cmp	r3, r2
 8012762:	d202      	bcs.n	801276a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012764:	230f      	movs	r3, #15
 8012766:	617b      	str	r3, [r7, #20]
 8012768:	e062      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	4a3c      	ldr	r2, [pc, #240]	; (8012860 <USB_SetTurnaroundTime+0x120>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d306      	bcc.n	8012780 <USB_SetTurnaroundTime+0x40>
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	4a3b      	ldr	r2, [pc, #236]	; (8012864 <USB_SetTurnaroundTime+0x124>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d202      	bcs.n	8012780 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801277a:	230e      	movs	r3, #14
 801277c:	617b      	str	r3, [r7, #20]
 801277e:	e057      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	4a38      	ldr	r2, [pc, #224]	; (8012864 <USB_SetTurnaroundTime+0x124>)
 8012784:	4293      	cmp	r3, r2
 8012786:	d306      	bcc.n	8012796 <USB_SetTurnaroundTime+0x56>
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	4a37      	ldr	r2, [pc, #220]	; (8012868 <USB_SetTurnaroundTime+0x128>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d202      	bcs.n	8012796 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012790:	230d      	movs	r3, #13
 8012792:	617b      	str	r3, [r7, #20]
 8012794:	e04c      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	4a33      	ldr	r2, [pc, #204]	; (8012868 <USB_SetTurnaroundTime+0x128>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d306      	bcc.n	80127ac <USB_SetTurnaroundTime+0x6c>
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	4a32      	ldr	r2, [pc, #200]	; (801286c <USB_SetTurnaroundTime+0x12c>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d802      	bhi.n	80127ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80127a6:	230c      	movs	r3, #12
 80127a8:	617b      	str	r3, [r7, #20]
 80127aa:	e041      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	4a2f      	ldr	r2, [pc, #188]	; (801286c <USB_SetTurnaroundTime+0x12c>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d906      	bls.n	80127c2 <USB_SetTurnaroundTime+0x82>
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	4a2e      	ldr	r2, [pc, #184]	; (8012870 <USB_SetTurnaroundTime+0x130>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d802      	bhi.n	80127c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80127bc:	230b      	movs	r3, #11
 80127be:	617b      	str	r3, [r7, #20]
 80127c0:	e036      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	4a2a      	ldr	r2, [pc, #168]	; (8012870 <USB_SetTurnaroundTime+0x130>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d906      	bls.n	80127d8 <USB_SetTurnaroundTime+0x98>
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	4a29      	ldr	r2, [pc, #164]	; (8012874 <USB_SetTurnaroundTime+0x134>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d802      	bhi.n	80127d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80127d2:	230a      	movs	r3, #10
 80127d4:	617b      	str	r3, [r7, #20]
 80127d6:	e02b      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	4a26      	ldr	r2, [pc, #152]	; (8012874 <USB_SetTurnaroundTime+0x134>)
 80127dc:	4293      	cmp	r3, r2
 80127de:	d906      	bls.n	80127ee <USB_SetTurnaroundTime+0xae>
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	4a25      	ldr	r2, [pc, #148]	; (8012878 <USB_SetTurnaroundTime+0x138>)
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d202      	bcs.n	80127ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80127e8:	2309      	movs	r3, #9
 80127ea:	617b      	str	r3, [r7, #20]
 80127ec:	e020      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	4a21      	ldr	r2, [pc, #132]	; (8012878 <USB_SetTurnaroundTime+0x138>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d306      	bcc.n	8012804 <USB_SetTurnaroundTime+0xc4>
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	4a20      	ldr	r2, [pc, #128]	; (801287c <USB_SetTurnaroundTime+0x13c>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d802      	bhi.n	8012804 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80127fe:	2308      	movs	r3, #8
 8012800:	617b      	str	r3, [r7, #20]
 8012802:	e015      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	4a1d      	ldr	r2, [pc, #116]	; (801287c <USB_SetTurnaroundTime+0x13c>)
 8012808:	4293      	cmp	r3, r2
 801280a:	d906      	bls.n	801281a <USB_SetTurnaroundTime+0xda>
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	4a1c      	ldr	r2, [pc, #112]	; (8012880 <USB_SetTurnaroundTime+0x140>)
 8012810:	4293      	cmp	r3, r2
 8012812:	d202      	bcs.n	801281a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012814:	2307      	movs	r3, #7
 8012816:	617b      	str	r3, [r7, #20]
 8012818:	e00a      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801281a:	2306      	movs	r3, #6
 801281c:	617b      	str	r3, [r7, #20]
 801281e:	e007      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012820:	79fb      	ldrb	r3, [r7, #7]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d102      	bne.n	801282c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012826:	2309      	movs	r3, #9
 8012828:	617b      	str	r3, [r7, #20]
 801282a:	e001      	b.n	8012830 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801282c:	2309      	movs	r3, #9
 801282e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	68da      	ldr	r2, [r3, #12]
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	029b      	lsls	r3, r3, #10
 8012844:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012848:	431a      	orrs	r2, r3
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801284e:	2300      	movs	r3, #0
}
 8012850:	4618      	mov	r0, r3
 8012852:	371c      	adds	r7, #28
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr
 801285c:	00d8acbf 	.word	0x00d8acbf
 8012860:	00e4e1c0 	.word	0x00e4e1c0
 8012864:	00f42400 	.word	0x00f42400
 8012868:	01067380 	.word	0x01067380
 801286c:	011a499f 	.word	0x011a499f
 8012870:	01312cff 	.word	0x01312cff
 8012874:	014ca43f 	.word	0x014ca43f
 8012878:	016e3600 	.word	0x016e3600
 801287c:	01a6ab1f 	.word	0x01a6ab1f
 8012880:	01e84800 	.word	0x01e84800

08012884 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	689b      	ldr	r3, [r3, #8]
 8012890:	f043 0201 	orr.w	r2, r3, #1
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012898:	2300      	movs	r3, #0
}
 801289a:	4618      	mov	r0, r3
 801289c:	370c      	adds	r7, #12
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr

080128a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80128a6:	b480      	push	{r7}
 80128a8:	b083      	sub	sp, #12
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	f023 0201 	bic.w	r2, r3, #1
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	460b      	mov	r3, r1
 80128d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80128d4:	2300      	movs	r3, #0
 80128d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80128e4:	78fb      	ldrb	r3, [r7, #3]
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d115      	bne.n	8012916 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	68db      	ldr	r3, [r3, #12]
 80128ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80128f6:	2001      	movs	r0, #1
 80128f8:	f7f0 febe 	bl	8003678 <HAL_Delay>
      ms++;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	3301      	adds	r3, #1
 8012900:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f001 f93f 	bl	8013b86 <USB_GetMode>
 8012908:	4603      	mov	r3, r0
 801290a:	2b01      	cmp	r3, #1
 801290c:	d01e      	beq.n	801294c <USB_SetCurrentMode+0x84>
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2b31      	cmp	r3, #49	; 0x31
 8012912:	d9f0      	bls.n	80128f6 <USB_SetCurrentMode+0x2e>
 8012914:	e01a      	b.n	801294c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012916:	78fb      	ldrb	r3, [r7, #3]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d115      	bne.n	8012948 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012928:	2001      	movs	r0, #1
 801292a:	f7f0 fea5 	bl	8003678 <HAL_Delay>
      ms++;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	3301      	adds	r3, #1
 8012932:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f001 f926 	bl	8013b86 <USB_GetMode>
 801293a:	4603      	mov	r3, r0
 801293c:	2b00      	cmp	r3, #0
 801293e:	d005      	beq.n	801294c <USB_SetCurrentMode+0x84>
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2b31      	cmp	r3, #49	; 0x31
 8012944:	d9f0      	bls.n	8012928 <USB_SetCurrentMode+0x60>
 8012946:	e001      	b.n	801294c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012948:	2301      	movs	r3, #1
 801294a:	e005      	b.n	8012958 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2b32      	cmp	r3, #50	; 0x32
 8012950:	d101      	bne.n	8012956 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012952:	2301      	movs	r3, #1
 8012954:	e000      	b.n	8012958 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012956:	2300      	movs	r3, #0
}
 8012958:	4618      	mov	r0, r3
 801295a:	3710      	adds	r7, #16
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012960:	b084      	sub	sp, #16
 8012962:	b580      	push	{r7, lr}
 8012964:	b086      	sub	sp, #24
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
 801296a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801296e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801297a:	2300      	movs	r3, #0
 801297c:	613b      	str	r3, [r7, #16]
 801297e:	e009      	b.n	8012994 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	3340      	adds	r3, #64	; 0x40
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	2200      	movs	r2, #0
 801298c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	3301      	adds	r3, #1
 8012992:	613b      	str	r3, [r7, #16]
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	2b0e      	cmp	r3, #14
 8012998:	d9f2      	bls.n	8012980 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801299c:	2b00      	cmp	r3, #0
 801299e:	d11c      	bne.n	80129da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80129ae:	f043 0302 	orr.w	r3, r3, #2
 80129b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	601a      	str	r2, [r3, #0]
 80129d8:	e005      	b.n	80129e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80129ec:	461a      	mov	r2, r3
 80129ee:	2300      	movs	r3, #0
 80129f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129f8:	4619      	mov	r1, r3
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a00:	461a      	mov	r2, r3
 8012a02:	680b      	ldr	r3, [r1, #0]
 8012a04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d10c      	bne.n	8012a26 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d104      	bne.n	8012a1c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012a12:	2100      	movs	r1, #0
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f000 f965 	bl	8012ce4 <USB_SetDevSpeed>
 8012a1a:	e008      	b.n	8012a2e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012a1c:	2101      	movs	r1, #1
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 f960 	bl	8012ce4 <USB_SetDevSpeed>
 8012a24:	e003      	b.n	8012a2e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012a26:	2103      	movs	r1, #3
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f000 f95b 	bl	8012ce4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012a2e:	2110      	movs	r1, #16
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 f8f3 	bl	8012c1c <USB_FlushTxFifo>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d001      	beq.n	8012a40 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f000 f91f 	bl	8012c84 <USB_FlushRxFifo>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d001      	beq.n	8012a50 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a56:	461a      	mov	r2, r3
 8012a58:	2300      	movs	r3, #0
 8012a5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a62:	461a      	mov	r2, r3
 8012a64:	2300      	movs	r3, #0
 8012a66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a6e:	461a      	mov	r2, r3
 8012a70:	2300      	movs	r3, #0
 8012a72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012a74:	2300      	movs	r3, #0
 8012a76:	613b      	str	r3, [r7, #16]
 8012a78:	e043      	b.n	8012b02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	015a      	lsls	r2, r3, #5
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	4413      	add	r3, r2
 8012a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a90:	d118      	bne.n	8012ac4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d10a      	bne.n	8012aae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	015a      	lsls	r2, r3, #5
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012aaa:	6013      	str	r3, [r2, #0]
 8012aac:	e013      	b.n	8012ad6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	015a      	lsls	r2, r3, #5
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aba:	461a      	mov	r2, r3
 8012abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012ac0:	6013      	str	r3, [r2, #0]
 8012ac2:	e008      	b.n	8012ad6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	015a      	lsls	r2, r3, #5
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	4413      	add	r3, r2
 8012acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	015a      	lsls	r2, r3, #5
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	4413      	add	r3, r2
 8012ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	015a      	lsls	r2, r3, #5
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	4413      	add	r3, r2
 8012af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012af4:	461a      	mov	r2, r3
 8012af6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012afa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	3301      	adds	r3, #1
 8012b00:	613b      	str	r3, [r7, #16]
 8012b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b04:	693a      	ldr	r2, [r7, #16]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d3b7      	bcc.n	8012a7a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	613b      	str	r3, [r7, #16]
 8012b0e:	e043      	b.n	8012b98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	015a      	lsls	r2, r3, #5
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	4413      	add	r3, r2
 8012b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b26:	d118      	bne.n	8012b5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d10a      	bne.n	8012b44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	015a      	lsls	r2, r3, #5
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	4413      	add	r3, r2
 8012b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012b40:	6013      	str	r3, [r2, #0]
 8012b42:	e013      	b.n	8012b6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	015a      	lsls	r2, r3, #5
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b50:	461a      	mov	r2, r3
 8012b52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012b56:	6013      	str	r3, [r2, #0]
 8012b58:	e008      	b.n	8012b6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	015a      	lsls	r2, r3, #5
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	4413      	add	r3, r2
 8012b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b66:	461a      	mov	r2, r3
 8012b68:	2300      	movs	r3, #0
 8012b6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	015a      	lsls	r2, r3, #5
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	4413      	add	r3, r2
 8012b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b78:	461a      	mov	r2, r3
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	015a      	lsls	r2, r3, #5
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	4413      	add	r3, r2
 8012b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012b90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	3301      	adds	r3, #1
 8012b96:	613b      	str	r3, [r7, #16]
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	693a      	ldr	r2, [r7, #16]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d3b7      	bcc.n	8012b10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ba6:	691b      	ldr	r3, [r3, #16]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012bb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012bc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d105      	bne.n	8012bd4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	699b      	ldr	r3, [r3, #24]
 8012bcc:	f043 0210 	orr.w	r2, r3, #16
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	699a      	ldr	r2, [r3, #24]
 8012bd8:	4b0e      	ldr	r3, [pc, #56]	; (8012c14 <USB_DevInit+0x2b4>)
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d005      	beq.n	8012bf2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	699b      	ldr	r3, [r3, #24]
 8012bea:	f043 0208 	orr.w	r2, r3, #8
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d105      	bne.n	8012c04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	699a      	ldr	r2, [r3, #24]
 8012bfc:	4b06      	ldr	r3, [pc, #24]	; (8012c18 <USB_DevInit+0x2b8>)
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3718      	adds	r7, #24
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012c10:	b004      	add	sp, #16
 8012c12:	4770      	bx	lr
 8012c14:	803c3800 	.word	0x803c3800
 8012c18:	40000004 	.word	0x40000004

08012c1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012c26:	2300      	movs	r3, #0
 8012c28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	4a13      	ldr	r2, [pc, #76]	; (8012c80 <USB_FlushTxFifo+0x64>)
 8012c34:	4293      	cmp	r3, r2
 8012c36:	d901      	bls.n	8012c3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012c38:	2303      	movs	r3, #3
 8012c3a:	e01b      	b.n	8012c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	691b      	ldr	r3, [r3, #16]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	daf2      	bge.n	8012c2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012c44:	2300      	movs	r3, #0
 8012c46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	019b      	lsls	r3, r3, #6
 8012c4c:	f043 0220 	orr.w	r2, r3, #32
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	3301      	adds	r3, #1
 8012c58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	4a08      	ldr	r2, [pc, #32]	; (8012c80 <USB_FlushTxFifo+0x64>)
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	d901      	bls.n	8012c66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012c62:	2303      	movs	r3, #3
 8012c64:	e006      	b.n	8012c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	f003 0320 	and.w	r3, r3, #32
 8012c6e:	2b20      	cmp	r3, #32
 8012c70:	d0f0      	beq.n	8012c54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012c72:	2300      	movs	r3, #0
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr
 8012c80:	00030d40 	.word	0x00030d40

08012c84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b085      	sub	sp, #20
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	3301      	adds	r3, #1
 8012c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	4a11      	ldr	r2, [pc, #68]	; (8012ce0 <USB_FlushRxFifo+0x5c>)
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d901      	bls.n	8012ca2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012c9e:	2303      	movs	r3, #3
 8012ca0:	e018      	b.n	8012cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	691b      	ldr	r3, [r3, #16]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	daf2      	bge.n	8012c90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012caa:	2300      	movs	r3, #0
 8012cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2210      	movs	r2, #16
 8012cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	4a08      	ldr	r2, [pc, #32]	; (8012ce0 <USB_FlushRxFifo+0x5c>)
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d901      	bls.n	8012cc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012cc2:	2303      	movs	r3, #3
 8012cc4:	e006      	b.n	8012cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	691b      	ldr	r3, [r3, #16]
 8012cca:	f003 0310 	and.w	r3, r3, #16
 8012cce:	2b10      	cmp	r3, #16
 8012cd0:	d0f0      	beq.n	8012cb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3714      	adds	r7, #20
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr
 8012ce0:	00030d40 	.word	0x00030d40

08012ce4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b085      	sub	sp, #20
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	460b      	mov	r3, r1
 8012cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	78fb      	ldrb	r3, [r7, #3]
 8012cfe:	68f9      	ldr	r1, [r7, #12]
 8012d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d04:	4313      	orrs	r3, r2
 8012d06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012d16:	b480      	push	{r7}
 8012d18:	b087      	sub	sp, #28
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d28:	689b      	ldr	r3, [r3, #8]
 8012d2a:	f003 0306 	and.w	r3, r3, #6
 8012d2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d102      	bne.n	8012d3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012d36:	2300      	movs	r3, #0
 8012d38:	75fb      	strb	r3, [r7, #23]
 8012d3a:	e00a      	b.n	8012d52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2b02      	cmp	r3, #2
 8012d40:	d002      	beq.n	8012d48 <USB_GetDevSpeed+0x32>
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2b06      	cmp	r3, #6
 8012d46:	d102      	bne.n	8012d4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012d48:	2302      	movs	r3, #2
 8012d4a:	75fb      	strb	r3, [r7, #23]
 8012d4c:	e001      	b.n	8012d52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012d4e:	230f      	movs	r3, #15
 8012d50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	371c      	adds	r7, #28
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr

08012d60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b085      	sub	sp, #20
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	785b      	ldrb	r3, [r3, #1]
 8012d78:	2b01      	cmp	r3, #1
 8012d7a:	d139      	bne.n	8012df0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d82:	69da      	ldr	r2, [r3, #28]
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	f003 030f 	and.w	r3, r3, #15
 8012d8c:	2101      	movs	r1, #1
 8012d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	68f9      	ldr	r1, [r7, #12]
 8012d96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	015a      	lsls	r2, r3, #5
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	4413      	add	r3, r2
 8012da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d153      	bne.n	8012e5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	015a      	lsls	r2, r3, #5
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	4413      	add	r3, r2
 8012dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	689b      	ldr	r3, [r3, #8]
 8012dc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	791b      	ldrb	r3, [r3, #4]
 8012dce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012dd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	059b      	lsls	r3, r3, #22
 8012dd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012dd8:	431a      	orrs	r2, r3
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	0159      	lsls	r1, r3, #5
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	440b      	add	r3, r1
 8012de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de6:	4619      	mov	r1, r3
 8012de8:	4b20      	ldr	r3, [pc, #128]	; (8012e6c <USB_ActivateEndpoint+0x10c>)
 8012dea:	4313      	orrs	r3, r2
 8012dec:	600b      	str	r3, [r1, #0]
 8012dee:	e035      	b.n	8012e5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012df6:	69da      	ldr	r2, [r3, #28]
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	f003 030f 	and.w	r3, r3, #15
 8012e00:	2101      	movs	r1, #1
 8012e02:	fa01 f303 	lsl.w	r3, r1, r3
 8012e06:	041b      	lsls	r3, r3, #16
 8012e08:	68f9      	ldr	r1, [r7, #12]
 8012e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e0e:	4313      	orrs	r3, r2
 8012e10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	015a      	lsls	r2, r3, #5
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	4413      	add	r3, r2
 8012e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d119      	bne.n	8012e5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	015a      	lsls	r2, r3, #5
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	4413      	add	r3, r2
 8012e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	689b      	ldr	r3, [r3, #8]
 8012e3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	791b      	ldrb	r3, [r3, #4]
 8012e42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e44:	430b      	orrs	r3, r1
 8012e46:	431a      	orrs	r2, r3
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	0159      	lsls	r1, r3, #5
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	440b      	add	r3, r1
 8012e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e54:	4619      	mov	r1, r3
 8012e56:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <USB_ActivateEndpoint+0x10c>)
 8012e58:	4313      	orrs	r3, r2
 8012e5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012e5c:	2300      	movs	r3, #0
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3714      	adds	r7, #20
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr
 8012e6a:	bf00      	nop
 8012e6c:	10008000 	.word	0x10008000

08012e70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b085      	sub	sp, #20
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	785b      	ldrb	r3, [r3, #1]
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d161      	bne.n	8012f50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	015a      	lsls	r2, r3, #5
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	4413      	add	r3, r2
 8012e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ea2:	d11f      	bne.n	8012ee4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	015a      	lsls	r2, r3, #5
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	4413      	add	r3, r2
 8012eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	68ba      	ldr	r2, [r7, #8]
 8012eb4:	0151      	lsls	r1, r2, #5
 8012eb6:	68fa      	ldr	r2, [r7, #12]
 8012eb8:	440a      	add	r2, r1
 8012eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ebe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012ec2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	015a      	lsls	r2, r3, #5
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	4413      	add	r3, r2
 8012ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	68ba      	ldr	r2, [r7, #8]
 8012ed4:	0151      	lsls	r1, r2, #5
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	440a      	add	r2, r1
 8012eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	f003 030f 	and.w	r3, r3, #15
 8012ef4:	2101      	movs	r1, #1
 8012ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	43db      	mvns	r3, r3
 8012efe:	68f9      	ldr	r1, [r7, #12]
 8012f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f04:	4013      	ands	r3, r2
 8012f06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f0e:	69da      	ldr	r2, [r3, #28]
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	f003 030f 	and.w	r3, r3, #15
 8012f18:	2101      	movs	r1, #1
 8012f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	43db      	mvns	r3, r3
 8012f22:	68f9      	ldr	r1, [r7, #12]
 8012f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f28:	4013      	ands	r3, r2
 8012f2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	015a      	lsls	r2, r3, #5
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	4413      	add	r3, r2
 8012f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	0159      	lsls	r1, r3, #5
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	440b      	add	r3, r1
 8012f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f46:	4619      	mov	r1, r3
 8012f48:	4b35      	ldr	r3, [pc, #212]	; (8013020 <USB_DeactivateEndpoint+0x1b0>)
 8012f4a:	4013      	ands	r3, r2
 8012f4c:	600b      	str	r3, [r1, #0]
 8012f4e:	e060      	b.n	8013012 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	015a      	lsls	r2, r3, #5
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	4413      	add	r3, r2
 8012f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f66:	d11f      	bne.n	8012fa8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	015a      	lsls	r2, r3, #5
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	4413      	add	r3, r2
 8012f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	68ba      	ldr	r2, [r7, #8]
 8012f78:	0151      	lsls	r1, r2, #5
 8012f7a:	68fa      	ldr	r2, [r7, #12]
 8012f7c:	440a      	add	r2, r1
 8012f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	015a      	lsls	r2, r3, #5
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	4413      	add	r3, r2
 8012f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	68ba      	ldr	r2, [r7, #8]
 8012f98:	0151      	lsls	r1, r2, #5
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	440a      	add	r2, r1
 8012f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	f003 030f 	and.w	r3, r3, #15
 8012fb8:	2101      	movs	r1, #1
 8012fba:	fa01 f303 	lsl.w	r3, r1, r3
 8012fbe:	041b      	lsls	r3, r3, #16
 8012fc0:	43db      	mvns	r3, r3
 8012fc2:	68f9      	ldr	r1, [r7, #12]
 8012fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fc8:	4013      	ands	r3, r2
 8012fca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd2:	69da      	ldr	r2, [r3, #28]
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	f003 030f 	and.w	r3, r3, #15
 8012fdc:	2101      	movs	r1, #1
 8012fde:	fa01 f303 	lsl.w	r3, r1, r3
 8012fe2:	041b      	lsls	r3, r3, #16
 8012fe4:	43db      	mvns	r3, r3
 8012fe6:	68f9      	ldr	r1, [r7, #12]
 8012fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fec:	4013      	ands	r3, r2
 8012fee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	015a      	lsls	r2, r3, #5
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	0159      	lsls	r1, r3, #5
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	440b      	add	r3, r1
 8013006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801300a:	4619      	mov	r1, r3
 801300c:	4b05      	ldr	r3, [pc, #20]	; (8013024 <USB_DeactivateEndpoint+0x1b4>)
 801300e:	4013      	ands	r3, r2
 8013010:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013012:	2300      	movs	r3, #0
}
 8013014:	4618      	mov	r0, r3
 8013016:	3714      	adds	r7, #20
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr
 8013020:	ec337800 	.word	0xec337800
 8013024:	eff37800 	.word	0xeff37800

08013028 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b08a      	sub	sp, #40	; 0x28
 801302c:	af02      	add	r7, sp, #8
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	4613      	mov	r3, r2
 8013034:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	785b      	ldrb	r3, [r3, #1]
 8013044:	2b01      	cmp	r3, #1
 8013046:	f040 8181 	bne.w	801334c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	691b      	ldr	r3, [r3, #16]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d132      	bne.n	80130b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	015a      	lsls	r2, r3, #5
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	4413      	add	r3, r2
 801305a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801305e:	691a      	ldr	r2, [r3, #16]
 8013060:	69bb      	ldr	r3, [r7, #24]
 8013062:	0159      	lsls	r1, r3, #5
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	440b      	add	r3, r1
 8013068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801306c:	4619      	mov	r1, r3
 801306e:	4ba5      	ldr	r3, [pc, #660]	; (8013304 <USB_EPStartXfer+0x2dc>)
 8013070:	4013      	ands	r3, r2
 8013072:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	015a      	lsls	r2, r3, #5
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	4413      	add	r3, r2
 801307c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013080:	691b      	ldr	r3, [r3, #16]
 8013082:	69ba      	ldr	r2, [r7, #24]
 8013084:	0151      	lsls	r1, r2, #5
 8013086:	69fa      	ldr	r2, [r7, #28]
 8013088:	440a      	add	r2, r1
 801308a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801308e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013094:	69bb      	ldr	r3, [r7, #24]
 8013096:	015a      	lsls	r2, r3, #5
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	4413      	add	r3, r2
 801309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130a0:	691a      	ldr	r2, [r3, #16]
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	0159      	lsls	r1, r3, #5
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	440b      	add	r3, r1
 80130aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130ae:	4619      	mov	r1, r3
 80130b0:	4b95      	ldr	r3, [pc, #596]	; (8013308 <USB_EPStartXfer+0x2e0>)
 80130b2:	4013      	ands	r3, r2
 80130b4:	610b      	str	r3, [r1, #16]
 80130b6:	e092      	b.n	80131de <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	015a      	lsls	r2, r3, #5
 80130bc:	69fb      	ldr	r3, [r7, #28]
 80130be:	4413      	add	r3, r2
 80130c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c4:	691a      	ldr	r2, [r3, #16]
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	0159      	lsls	r1, r3, #5
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	440b      	add	r3, r1
 80130ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130d2:	4619      	mov	r1, r3
 80130d4:	4b8c      	ldr	r3, [pc, #560]	; (8013308 <USB_EPStartXfer+0x2e0>)
 80130d6:	4013      	ands	r3, r2
 80130d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	015a      	lsls	r2, r3, #5
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	4413      	add	r3, r2
 80130e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130e6:	691a      	ldr	r2, [r3, #16]
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	0159      	lsls	r1, r3, #5
 80130ec:	69fb      	ldr	r3, [r7, #28]
 80130ee:	440b      	add	r3, r1
 80130f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130f4:	4619      	mov	r1, r3
 80130f6:	4b83      	ldr	r3, [pc, #524]	; (8013304 <USB_EPStartXfer+0x2dc>)
 80130f8:	4013      	ands	r3, r2
 80130fa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80130fc:	69bb      	ldr	r3, [r7, #24]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d11a      	bne.n	8013138 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	691a      	ldr	r2, [r3, #16]
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	689b      	ldr	r3, [r3, #8]
 801310a:	429a      	cmp	r2, r3
 801310c:	d903      	bls.n	8013116 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	689a      	ldr	r2, [r3, #8]
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013116:	69bb      	ldr	r3, [r7, #24]
 8013118:	015a      	lsls	r2, r3, #5
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	4413      	add	r3, r2
 801311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013122:	691b      	ldr	r3, [r3, #16]
 8013124:	69ba      	ldr	r2, [r7, #24]
 8013126:	0151      	lsls	r1, r2, #5
 8013128:	69fa      	ldr	r2, [r7, #28]
 801312a:	440a      	add	r2, r1
 801312c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013134:	6113      	str	r3, [r2, #16]
 8013136:	e01b      	b.n	8013170 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	015a      	lsls	r2, r3, #5
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	4413      	add	r3, r2
 8013140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013144:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	6919      	ldr	r1, [r3, #16]
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	689b      	ldr	r3, [r3, #8]
 801314e:	440b      	add	r3, r1
 8013150:	1e59      	subs	r1, r3, #1
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	689b      	ldr	r3, [r3, #8]
 8013156:	fbb1 f3f3 	udiv	r3, r1, r3
 801315a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801315c:	4b6b      	ldr	r3, [pc, #428]	; (801330c <USB_EPStartXfer+0x2e4>)
 801315e:	400b      	ands	r3, r1
 8013160:	69b9      	ldr	r1, [r7, #24]
 8013162:	0148      	lsls	r0, r1, #5
 8013164:	69f9      	ldr	r1, [r7, #28]
 8013166:	4401      	add	r1, r0
 8013168:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801316c:	4313      	orrs	r3, r2
 801316e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	015a      	lsls	r2, r3, #5
 8013174:	69fb      	ldr	r3, [r7, #28]
 8013176:	4413      	add	r3, r2
 8013178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801317c:	691a      	ldr	r2, [r3, #16]
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	691b      	ldr	r3, [r3, #16]
 8013182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013186:	69b9      	ldr	r1, [r7, #24]
 8013188:	0148      	lsls	r0, r1, #5
 801318a:	69f9      	ldr	r1, [r7, #28]
 801318c:	4401      	add	r1, r0
 801318e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013192:	4313      	orrs	r3, r2
 8013194:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	791b      	ldrb	r3, [r3, #4]
 801319a:	2b01      	cmp	r3, #1
 801319c:	d11f      	bne.n	80131de <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	015a      	lsls	r2, r3, #5
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	4413      	add	r3, r2
 80131a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131aa:	691b      	ldr	r3, [r3, #16]
 80131ac:	69ba      	ldr	r2, [r7, #24]
 80131ae:	0151      	lsls	r1, r2, #5
 80131b0:	69fa      	ldr	r2, [r7, #28]
 80131b2:	440a      	add	r2, r1
 80131b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80131bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80131be:	69bb      	ldr	r3, [r7, #24]
 80131c0:	015a      	lsls	r2, r3, #5
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	4413      	add	r3, r2
 80131c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ca:	691b      	ldr	r3, [r3, #16]
 80131cc:	69ba      	ldr	r2, [r7, #24]
 80131ce:	0151      	lsls	r1, r2, #5
 80131d0:	69fa      	ldr	r2, [r7, #28]
 80131d2:	440a      	add	r2, r1
 80131d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80131de:	79fb      	ldrb	r3, [r7, #7]
 80131e0:	2b01      	cmp	r3, #1
 80131e2:	d14b      	bne.n	801327c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	69db      	ldr	r3, [r3, #28]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d009      	beq.n	8013200 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80131ec:	69bb      	ldr	r3, [r7, #24]
 80131ee:	015a      	lsls	r2, r3, #5
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	4413      	add	r3, r2
 80131f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f8:	461a      	mov	r2, r3
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	69db      	ldr	r3, [r3, #28]
 80131fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	791b      	ldrb	r3, [r3, #4]
 8013204:	2b01      	cmp	r3, #1
 8013206:	d128      	bne.n	801325a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013208:	69fb      	ldr	r3, [r7, #28]
 801320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801320e:	689b      	ldr	r3, [r3, #8]
 8013210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013214:	2b00      	cmp	r3, #0
 8013216:	d110      	bne.n	801323a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	015a      	lsls	r2, r3, #5
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	4413      	add	r3, r2
 8013220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	69ba      	ldr	r2, [r7, #24]
 8013228:	0151      	lsls	r1, r2, #5
 801322a:	69fa      	ldr	r2, [r7, #28]
 801322c:	440a      	add	r2, r1
 801322e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013236:	6013      	str	r3, [r2, #0]
 8013238:	e00f      	b.n	801325a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	015a      	lsls	r2, r3, #5
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	4413      	add	r3, r2
 8013242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	69ba      	ldr	r2, [r7, #24]
 801324a:	0151      	lsls	r1, r2, #5
 801324c:	69fa      	ldr	r2, [r7, #28]
 801324e:	440a      	add	r2, r1
 8013250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013258:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	015a      	lsls	r2, r3, #5
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	4413      	add	r3, r2
 8013262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	69ba      	ldr	r2, [r7, #24]
 801326a:	0151      	lsls	r1, r2, #5
 801326c:	69fa      	ldr	r2, [r7, #28]
 801326e:	440a      	add	r2, r1
 8013270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013278:	6013      	str	r3, [r2, #0]
 801327a:	e16a      	b.n	8013552 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801327c:	69bb      	ldr	r3, [r7, #24]
 801327e:	015a      	lsls	r2, r3, #5
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	4413      	add	r3, r2
 8013284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	69ba      	ldr	r2, [r7, #24]
 801328c:	0151      	lsls	r1, r2, #5
 801328e:	69fa      	ldr	r2, [r7, #28]
 8013290:	440a      	add	r2, r1
 8013292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801329a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	791b      	ldrb	r3, [r3, #4]
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d015      	beq.n	80132d0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	691b      	ldr	r3, [r3, #16]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	f000 8152 	beq.w	8013552 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	f003 030f 	and.w	r3, r3, #15
 80132be:	2101      	movs	r1, #1
 80132c0:	fa01 f303 	lsl.w	r3, r1, r3
 80132c4:	69f9      	ldr	r1, [r7, #28]
 80132c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132ca:	4313      	orrs	r3, r2
 80132cc:	634b      	str	r3, [r1, #52]	; 0x34
 80132ce:	e140      	b.n	8013552 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d117      	bne.n	8013310 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	015a      	lsls	r2, r3, #5
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	4413      	add	r3, r2
 80132e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	69ba      	ldr	r2, [r7, #24]
 80132f0:	0151      	lsls	r1, r2, #5
 80132f2:	69fa      	ldr	r2, [r7, #28]
 80132f4:	440a      	add	r2, r1
 80132f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	e016      	b.n	8013330 <USB_EPStartXfer+0x308>
 8013302:	bf00      	nop
 8013304:	e007ffff 	.word	0xe007ffff
 8013308:	fff80000 	.word	0xfff80000
 801330c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	015a      	lsls	r2, r3, #5
 8013314:	69fb      	ldr	r3, [r7, #28]
 8013316:	4413      	add	r3, r2
 8013318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	69ba      	ldr	r2, [r7, #24]
 8013320:	0151      	lsls	r1, r2, #5
 8013322:	69fa      	ldr	r2, [r7, #28]
 8013324:	440a      	add	r2, r1
 8013326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801332a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801332e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	68d9      	ldr	r1, [r3, #12]
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	781a      	ldrb	r2, [r3, #0]
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	b298      	uxth	r0, r3
 801333e:	79fb      	ldrb	r3, [r7, #7]
 8013340:	9300      	str	r3, [sp, #0]
 8013342:	4603      	mov	r3, r0
 8013344:	68f8      	ldr	r0, [r7, #12]
 8013346:	f000 f9b9 	bl	80136bc <USB_WritePacket>
 801334a:	e102      	b.n	8013552 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	015a      	lsls	r2, r3, #5
 8013350:	69fb      	ldr	r3, [r7, #28]
 8013352:	4413      	add	r3, r2
 8013354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013358:	691a      	ldr	r2, [r3, #16]
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	0159      	lsls	r1, r3, #5
 801335e:	69fb      	ldr	r3, [r7, #28]
 8013360:	440b      	add	r3, r1
 8013362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013366:	4619      	mov	r1, r3
 8013368:	4b7c      	ldr	r3, [pc, #496]	; (801355c <USB_EPStartXfer+0x534>)
 801336a:	4013      	ands	r3, r2
 801336c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	015a      	lsls	r2, r3, #5
 8013372:	69fb      	ldr	r3, [r7, #28]
 8013374:	4413      	add	r3, r2
 8013376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801337a:	691a      	ldr	r2, [r3, #16]
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	0159      	lsls	r1, r3, #5
 8013380:	69fb      	ldr	r3, [r7, #28]
 8013382:	440b      	add	r3, r1
 8013384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013388:	4619      	mov	r1, r3
 801338a:	4b75      	ldr	r3, [pc, #468]	; (8013560 <USB_EPStartXfer+0x538>)
 801338c:	4013      	ands	r3, r2
 801338e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013390:	69bb      	ldr	r3, [r7, #24]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d12f      	bne.n	80133f6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	691b      	ldr	r3, [r3, #16]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d003      	beq.n	80133a6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	689a      	ldr	r2, [r3, #8]
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	689a      	ldr	r2, [r3, #8]
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	015a      	lsls	r2, r3, #5
 80133b2:	69fb      	ldr	r3, [r7, #28]
 80133b4:	4413      	add	r3, r2
 80133b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ba:	691a      	ldr	r2, [r3, #16]
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	6a1b      	ldr	r3, [r3, #32]
 80133c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133c4:	69b9      	ldr	r1, [r7, #24]
 80133c6:	0148      	lsls	r0, r1, #5
 80133c8:	69f9      	ldr	r1, [r7, #28]
 80133ca:	4401      	add	r1, r0
 80133cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80133d0:	4313      	orrs	r3, r2
 80133d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	015a      	lsls	r2, r3, #5
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	4413      	add	r3, r2
 80133dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133e0:	691b      	ldr	r3, [r3, #16]
 80133e2:	69ba      	ldr	r2, [r7, #24]
 80133e4:	0151      	lsls	r1, r2, #5
 80133e6:	69fa      	ldr	r2, [r7, #28]
 80133e8:	440a      	add	r2, r1
 80133ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133f2:	6113      	str	r3, [r2, #16]
 80133f4:	e05f      	b.n	80134b6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	691b      	ldr	r3, [r3, #16]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d123      	bne.n	8013446 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	015a      	lsls	r2, r3, #5
 8013402:	69fb      	ldr	r3, [r7, #28]
 8013404:	4413      	add	r3, r2
 8013406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801340a:	691a      	ldr	r2, [r3, #16]
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013414:	69b9      	ldr	r1, [r7, #24]
 8013416:	0148      	lsls	r0, r1, #5
 8013418:	69f9      	ldr	r1, [r7, #28]
 801341a:	4401      	add	r1, r0
 801341c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013420:	4313      	orrs	r3, r2
 8013422:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	015a      	lsls	r2, r3, #5
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	4413      	add	r3, r2
 801342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013430:	691b      	ldr	r3, [r3, #16]
 8013432:	69ba      	ldr	r2, [r7, #24]
 8013434:	0151      	lsls	r1, r2, #5
 8013436:	69fa      	ldr	r2, [r7, #28]
 8013438:	440a      	add	r2, r1
 801343a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801343e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013442:	6113      	str	r3, [r2, #16]
 8013444:	e037      	b.n	80134b6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	691a      	ldr	r2, [r3, #16]
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	689b      	ldr	r3, [r3, #8]
 801344e:	4413      	add	r3, r2
 8013450:	1e5a      	subs	r2, r3, #1
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	689b      	ldr	r3, [r3, #8]
 8013456:	fbb2 f3f3 	udiv	r3, r2, r3
 801345a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	689b      	ldr	r3, [r3, #8]
 8013460:	8afa      	ldrh	r2, [r7, #22]
 8013462:	fb03 f202 	mul.w	r2, r3, r2
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	015a      	lsls	r2, r3, #5
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	4413      	add	r3, r2
 8013472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013476:	691a      	ldr	r2, [r3, #16]
 8013478:	8afb      	ldrh	r3, [r7, #22]
 801347a:	04d9      	lsls	r1, r3, #19
 801347c:	4b39      	ldr	r3, [pc, #228]	; (8013564 <USB_EPStartXfer+0x53c>)
 801347e:	400b      	ands	r3, r1
 8013480:	69b9      	ldr	r1, [r7, #24]
 8013482:	0148      	lsls	r0, r1, #5
 8013484:	69f9      	ldr	r1, [r7, #28]
 8013486:	4401      	add	r1, r0
 8013488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801348c:	4313      	orrs	r3, r2
 801348e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	015a      	lsls	r2, r3, #5
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	4413      	add	r3, r2
 8013498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801349c:	691a      	ldr	r2, [r3, #16]
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	6a1b      	ldr	r3, [r3, #32]
 80134a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134a6:	69b9      	ldr	r1, [r7, #24]
 80134a8:	0148      	lsls	r0, r1, #5
 80134aa:	69f9      	ldr	r1, [r7, #28]
 80134ac:	4401      	add	r1, r0
 80134ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80134b2:	4313      	orrs	r3, r2
 80134b4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80134b6:	79fb      	ldrb	r3, [r7, #7]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d10d      	bne.n	80134d8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d009      	beq.n	80134d8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	68d9      	ldr	r1, [r3, #12]
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	015a      	lsls	r2, r3, #5
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	4413      	add	r3, r2
 80134d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134d4:	460a      	mov	r2, r1
 80134d6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	791b      	ldrb	r3, [r3, #4]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d128      	bne.n	8013532 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80134e0:	69fb      	ldr	r3, [r7, #28]
 80134e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d110      	bne.n	8013512 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	015a      	lsls	r2, r3, #5
 80134f4:	69fb      	ldr	r3, [r7, #28]
 80134f6:	4413      	add	r3, r2
 80134f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	69ba      	ldr	r2, [r7, #24]
 8013500:	0151      	lsls	r1, r2, #5
 8013502:	69fa      	ldr	r2, [r7, #28]
 8013504:	440a      	add	r2, r1
 8013506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801350a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801350e:	6013      	str	r3, [r2, #0]
 8013510:	e00f      	b.n	8013532 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013512:	69bb      	ldr	r3, [r7, #24]
 8013514:	015a      	lsls	r2, r3, #5
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	4413      	add	r3, r2
 801351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	69ba      	ldr	r2, [r7, #24]
 8013522:	0151      	lsls	r1, r2, #5
 8013524:	69fa      	ldr	r2, [r7, #28]
 8013526:	440a      	add	r2, r1
 8013528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013530:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	015a      	lsls	r2, r3, #5
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	4413      	add	r3, r2
 801353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	69ba      	ldr	r2, [r7, #24]
 8013542:	0151      	lsls	r1, r2, #5
 8013544:	69fa      	ldr	r2, [r7, #28]
 8013546:	440a      	add	r2, r1
 8013548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801354c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013552:	2300      	movs	r3, #0
}
 8013554:	4618      	mov	r0, r3
 8013556:	3720      	adds	r7, #32
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	fff80000 	.word	0xfff80000
 8013560:	e007ffff 	.word	0xe007ffff
 8013564:	1ff80000 	.word	0x1ff80000

08013568 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013568:	b480      	push	{r7}
 801356a:	b087      	sub	sp, #28
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013572:	2300      	movs	r3, #0
 8013574:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013576:	2300      	movs	r3, #0
 8013578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	785b      	ldrb	r3, [r3, #1]
 8013582:	2b01      	cmp	r3, #1
 8013584:	d14a      	bne.n	801361c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	015a      	lsls	r2, r3, #5
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	4413      	add	r3, r2
 8013590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801359a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801359e:	f040 8086 	bne.w	80136ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	015a      	lsls	r2, r3, #5
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	4413      	add	r3, r2
 80135ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	683a      	ldr	r2, [r7, #0]
 80135b4:	7812      	ldrb	r2, [r2, #0]
 80135b6:	0151      	lsls	r1, r2, #5
 80135b8:	693a      	ldr	r2, [r7, #16]
 80135ba:	440a      	add	r2, r1
 80135bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80135c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	015a      	lsls	r2, r3, #5
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	4413      	add	r3, r2
 80135d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	683a      	ldr	r2, [r7, #0]
 80135d8:	7812      	ldrb	r2, [r2, #0]
 80135da:	0151      	lsls	r1, r2, #5
 80135dc:	693a      	ldr	r2, [r7, #16]
 80135de:	440a      	add	r2, r1
 80135e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80135e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	3301      	adds	r3, #1
 80135ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80135f6:	4293      	cmp	r3, r2
 80135f8:	d902      	bls.n	8013600 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80135fa:	2301      	movs	r3, #1
 80135fc:	75fb      	strb	r3, [r7, #23]
          break;
 80135fe:	e056      	b.n	80136ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	015a      	lsls	r2, r3, #5
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	4413      	add	r3, r2
 801360a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013618:	d0e7      	beq.n	80135ea <USB_EPStopXfer+0x82>
 801361a:	e048      	b.n	80136ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	015a      	lsls	r2, r3, #5
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	4413      	add	r3, r2
 8013626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013634:	d13b      	bne.n	80136ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	015a      	lsls	r2, r3, #5
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	4413      	add	r3, r2
 8013640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	683a      	ldr	r2, [r7, #0]
 8013648:	7812      	ldrb	r2, [r2, #0]
 801364a:	0151      	lsls	r1, r2, #5
 801364c:	693a      	ldr	r2, [r7, #16]
 801364e:	440a      	add	r2, r1
 8013650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013658:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	015a      	lsls	r2, r3, #5
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	4413      	add	r3, r2
 8013664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	683a      	ldr	r2, [r7, #0]
 801366c:	7812      	ldrb	r2, [r2, #0]
 801366e:	0151      	lsls	r1, r2, #5
 8013670:	693a      	ldr	r2, [r7, #16]
 8013672:	440a      	add	r2, r1
 8013674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801367c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	3301      	adds	r3, #1
 8013682:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f242 7210 	movw	r2, #10000	; 0x2710
 801368a:	4293      	cmp	r3, r2
 801368c:	d902      	bls.n	8013694 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801368e:	2301      	movs	r3, #1
 8013690:	75fb      	strb	r3, [r7, #23]
          break;
 8013692:	e00c      	b.n	80136ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	015a      	lsls	r2, r3, #5
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	4413      	add	r3, r2
 801369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136ac:	d0e7      	beq.n	801367e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80136ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	371c      	adds	r7, #28
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr

080136bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80136bc:	b480      	push	{r7}
 80136be:	b089      	sub	sp, #36	; 0x24
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	4611      	mov	r1, r2
 80136c8:	461a      	mov	r2, r3
 80136ca:	460b      	mov	r3, r1
 80136cc:	71fb      	strb	r3, [r7, #7]
 80136ce:	4613      	mov	r3, r2
 80136d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80136da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d123      	bne.n	801372a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80136e2:	88bb      	ldrh	r3, [r7, #4]
 80136e4:	3303      	adds	r3, #3
 80136e6:	089b      	lsrs	r3, r3, #2
 80136e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80136ea:	2300      	movs	r3, #0
 80136ec:	61bb      	str	r3, [r7, #24]
 80136ee:	e018      	b.n	8013722 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80136f0:	79fb      	ldrb	r3, [r7, #7]
 80136f2:	031a      	lsls	r2, r3, #12
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	4413      	add	r3, r2
 80136f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80136fc:	461a      	mov	r2, r3
 80136fe:	69fb      	ldr	r3, [r7, #28]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	3301      	adds	r3, #1
 8013708:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801370a:	69fb      	ldr	r3, [r7, #28]
 801370c:	3301      	adds	r3, #1
 801370e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	3301      	adds	r3, #1
 8013714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	3301      	adds	r3, #1
 801371a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	3301      	adds	r3, #1
 8013720:	61bb      	str	r3, [r7, #24]
 8013722:	69ba      	ldr	r2, [r7, #24]
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	429a      	cmp	r2, r3
 8013728:	d3e2      	bcc.n	80136f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801372a:	2300      	movs	r3, #0
}
 801372c:	4618      	mov	r0, r3
 801372e:	3724      	adds	r7, #36	; 0x24
 8013730:	46bd      	mov	sp, r7
 8013732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013736:	4770      	bx	lr

08013738 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013738:	b480      	push	{r7}
 801373a:	b08b      	sub	sp, #44	; 0x2c
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	4613      	mov	r3, r2
 8013744:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801374e:	88fb      	ldrh	r3, [r7, #6]
 8013750:	089b      	lsrs	r3, r3, #2
 8013752:	b29b      	uxth	r3, r3
 8013754:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013756:	88fb      	ldrh	r3, [r7, #6]
 8013758:	f003 0303 	and.w	r3, r3, #3
 801375c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801375e:	2300      	movs	r3, #0
 8013760:	623b      	str	r3, [r7, #32]
 8013762:	e014      	b.n	801378e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801376a:	681a      	ldr	r2, [r3, #0]
 801376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013772:	3301      	adds	r3, #1
 8013774:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013778:	3301      	adds	r3, #1
 801377a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377e:	3301      	adds	r3, #1
 8013780:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013784:	3301      	adds	r3, #1
 8013786:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013788:	6a3b      	ldr	r3, [r7, #32]
 801378a:	3301      	adds	r3, #1
 801378c:	623b      	str	r3, [r7, #32]
 801378e:	6a3a      	ldr	r2, [r7, #32]
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	429a      	cmp	r2, r3
 8013794:	d3e6      	bcc.n	8013764 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013796:	8bfb      	ldrh	r3, [r7, #30]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d01e      	beq.n	80137da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801379c:	2300      	movs	r3, #0
 801379e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137a6:	461a      	mov	r2, r3
 80137a8:	f107 0310 	add.w	r3, r7, #16
 80137ac:	6812      	ldr	r2, [r2, #0]
 80137ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80137b0:	693a      	ldr	r2, [r7, #16]
 80137b2:	6a3b      	ldr	r3, [r7, #32]
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	00db      	lsls	r3, r3, #3
 80137b8:	fa22 f303 	lsr.w	r3, r2, r3
 80137bc:	b2da      	uxtb	r2, r3
 80137be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c0:	701a      	strb	r2, [r3, #0]
      i++;
 80137c2:	6a3b      	ldr	r3, [r7, #32]
 80137c4:	3301      	adds	r3, #1
 80137c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ca:	3301      	adds	r3, #1
 80137cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80137ce:	8bfb      	ldrh	r3, [r7, #30]
 80137d0:	3b01      	subs	r3, #1
 80137d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80137d4:	8bfb      	ldrh	r3, [r7, #30]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d1ea      	bne.n	80137b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80137da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80137dc:	4618      	mov	r0, r3
 80137de:	372c      	adds	r7, #44	; 0x2c
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80137e8:	b480      	push	{r7}
 80137ea:	b085      	sub	sp, #20
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	785b      	ldrb	r3, [r3, #1]
 8013800:	2b01      	cmp	r3, #1
 8013802:	d12c      	bne.n	801385e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	015a      	lsls	r2, r3, #5
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	4413      	add	r3, r2
 801380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	db12      	blt.n	801383c <USB_EPSetStall+0x54>
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00f      	beq.n	801383c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	015a      	lsls	r2, r3, #5
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	4413      	add	r3, r2
 8013824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	68ba      	ldr	r2, [r7, #8]
 801382c:	0151      	lsls	r1, r2, #5
 801382e:	68fa      	ldr	r2, [r7, #12]
 8013830:	440a      	add	r2, r1
 8013832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801383a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	015a      	lsls	r2, r3, #5
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	4413      	add	r3, r2
 8013844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	68ba      	ldr	r2, [r7, #8]
 801384c:	0151      	lsls	r1, r2, #5
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	440a      	add	r2, r1
 8013852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801385a:	6013      	str	r3, [r2, #0]
 801385c:	e02b      	b.n	80138b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	015a      	lsls	r2, r3, #5
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	4413      	add	r3, r2
 8013866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	2b00      	cmp	r3, #0
 801386e:	db12      	blt.n	8013896 <USB_EPSetStall+0xae>
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00f      	beq.n	8013896 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	015a      	lsls	r2, r3, #5
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	4413      	add	r3, r2
 801387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	68ba      	ldr	r2, [r7, #8]
 8013886:	0151      	lsls	r1, r2, #5
 8013888:	68fa      	ldr	r2, [r7, #12]
 801388a:	440a      	add	r2, r1
 801388c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013890:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013894:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	015a      	lsls	r2, r3, #5
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	4413      	add	r3, r2
 801389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	68ba      	ldr	r2, [r7, #8]
 80138a6:	0151      	lsls	r1, r2, #5
 80138a8:	68fa      	ldr	r2, [r7, #12]
 80138aa:	440a      	add	r2, r1
 80138ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80138b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80138b6:	2300      	movs	r3, #0
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3714      	adds	r7, #20
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138c4:	b480      	push	{r7}
 80138c6:	b085      	sub	sp, #20
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	785b      	ldrb	r3, [r3, #1]
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d128      	bne.n	8013932 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	015a      	lsls	r2, r3, #5
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	4413      	add	r3, r2
 80138e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	68ba      	ldr	r2, [r7, #8]
 80138f0:	0151      	lsls	r1, r2, #5
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	440a      	add	r2, r1
 80138f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80138fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	791b      	ldrb	r3, [r3, #4]
 8013904:	2b03      	cmp	r3, #3
 8013906:	d003      	beq.n	8013910 <USB_EPClearStall+0x4c>
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	791b      	ldrb	r3, [r3, #4]
 801390c:	2b02      	cmp	r3, #2
 801390e:	d138      	bne.n	8013982 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	4413      	add	r3, r2
 8013918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	0151      	lsls	r1, r2, #5
 8013922:	68fa      	ldr	r2, [r7, #12]
 8013924:	440a      	add	r2, r1
 8013926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801392e:	6013      	str	r3, [r2, #0]
 8013930:	e027      	b.n	8013982 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	015a      	lsls	r2, r3, #5
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	4413      	add	r3, r2
 801393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	0151      	lsls	r1, r2, #5
 8013944:	68fa      	ldr	r2, [r7, #12]
 8013946:	440a      	add	r2, r1
 8013948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801394c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013950:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	791b      	ldrb	r3, [r3, #4]
 8013956:	2b03      	cmp	r3, #3
 8013958:	d003      	beq.n	8013962 <USB_EPClearStall+0x9e>
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	791b      	ldrb	r3, [r3, #4]
 801395e:	2b02      	cmp	r3, #2
 8013960:	d10f      	bne.n	8013982 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	015a      	lsls	r2, r3, #5
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	4413      	add	r3, r2
 801396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	68ba      	ldr	r2, [r7, #8]
 8013972:	0151      	lsls	r1, r2, #5
 8013974:	68fa      	ldr	r2, [r7, #12]
 8013976:	440a      	add	r2, r1
 8013978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013980:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013982:	2300      	movs	r3, #0
}
 8013984:	4618      	mov	r0, r3
 8013986:	3714      	adds	r7, #20
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013990:	b480      	push	{r7}
 8013992:	b085      	sub	sp, #20
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	460b      	mov	r3, r1
 801399a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80139ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80139b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	78fb      	ldrb	r3, [r7, #3]
 80139be:	011b      	lsls	r3, r3, #4
 80139c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80139c4:	68f9      	ldr	r1, [r7, #12]
 80139c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139ca:	4313      	orrs	r3, r2
 80139cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80139ce:	2300      	movs	r3, #0
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	3714      	adds	r7, #20
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	68fa      	ldr	r2, [r7, #12]
 80139f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80139f6:	f023 0303 	bic.w	r3, r3, #3
 80139fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a0a:	f023 0302 	bic.w	r3, r3, #2
 8013a0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a10:	2300      	movs	r3, #0
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3714      	adds	r7, #20
 8013a16:	46bd      	mov	sp, r7
 8013a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1c:	4770      	bx	lr

08013a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013a1e:	b480      	push	{r7}
 8013a20:	b085      	sub	sp, #20
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	68fa      	ldr	r2, [r7, #12]
 8013a34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a38:	f023 0303 	bic.w	r3, r3, #3
 8013a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	68fa      	ldr	r2, [r7, #12]
 8013a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a4c:	f043 0302 	orr.w	r3, r3, #2
 8013a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a52:	2300      	movs	r3, #0
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3714      	adds	r7, #20
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b085      	sub	sp, #20
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	695b      	ldr	r3, [r3, #20]
 8013a6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	699b      	ldr	r3, [r3, #24]
 8013a72:	68fa      	ldr	r2, [r7, #12]
 8013a74:	4013      	ands	r3, r2
 8013a76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013a78:	68fb      	ldr	r3, [r7, #12]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3714      	adds	r7, #20
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr

08013a86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013a86:	b480      	push	{r7}
 8013a88:	b085      	sub	sp, #20
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a98:	699b      	ldr	r3, [r3, #24]
 8013a9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aa2:	69db      	ldr	r3, [r3, #28]
 8013aa4:	68ba      	ldr	r2, [r7, #8]
 8013aa6:	4013      	ands	r3, r2
 8013aa8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	0c1b      	lsrs	r3, r3, #16
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3714      	adds	r7, #20
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab8:	4770      	bx	lr

08013aba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013aba:	b480      	push	{r7}
 8013abc:	b085      	sub	sp, #20
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013acc:	699b      	ldr	r3, [r3, #24]
 8013ace:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ad6:	69db      	ldr	r3, [r3, #28]
 8013ad8:	68ba      	ldr	r2, [r7, #8]
 8013ada:	4013      	ands	r3, r2
 8013adc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	b29b      	uxth	r3, r3
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3714      	adds	r7, #20
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aec:	4770      	bx	lr

08013aee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013aee:	b480      	push	{r7}
 8013af0:	b085      	sub	sp, #20
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
 8013af6:	460b      	mov	r3, r1
 8013af8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013afe:	78fb      	ldrb	r3, [r7, #3]
 8013b00:	015a      	lsls	r2, r3, #5
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	4413      	add	r3, r2
 8013b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b14:	695b      	ldr	r3, [r3, #20]
 8013b16:	68ba      	ldr	r2, [r7, #8]
 8013b18:	4013      	ands	r3, r2
 8013b1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013b1c:	68bb      	ldr	r3, [r7, #8]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3714      	adds	r7, #20
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr

08013b2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013b2a:	b480      	push	{r7}
 8013b2c:	b087      	sub	sp, #28
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	460b      	mov	r3, r1
 8013b34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b40:	691b      	ldr	r3, [r3, #16]
 8013b42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013b4e:	78fb      	ldrb	r3, [r7, #3]
 8013b50:	f003 030f 	and.w	r3, r3, #15
 8013b54:	68fa      	ldr	r2, [r7, #12]
 8013b56:	fa22 f303 	lsr.w	r3, r2, r3
 8013b5a:	01db      	lsls	r3, r3, #7
 8013b5c:	b2db      	uxtb	r3, r3
 8013b5e:	693a      	ldr	r2, [r7, #16]
 8013b60:	4313      	orrs	r3, r2
 8013b62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013b64:	78fb      	ldrb	r3, [r7, #3]
 8013b66:	015a      	lsls	r2, r3, #5
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b70:	689b      	ldr	r3, [r3, #8]
 8013b72:	693a      	ldr	r2, [r7, #16]
 8013b74:	4013      	ands	r3, r2
 8013b76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013b78:	68bb      	ldr	r3, [r7, #8]
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	371c      	adds	r7, #28
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	695b      	ldr	r3, [r3, #20]
 8013b92:	f003 0301 	and.w	r3, r3, #1
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	370c      	adds	r7, #12
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba0:	4770      	bx	lr
	...

08013ba4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b085      	sub	sp, #20
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	4b09      	ldr	r3, [pc, #36]	; (8013be8 <USB_ActivateSetup+0x44>)
 8013bc2:	4013      	ands	r3, r2
 8013bc4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013bda:	2300      	movs	r3, #0
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3714      	adds	r7, #20
 8013be0:	46bd      	mov	sp, r7
 8013be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be6:	4770      	bx	lr
 8013be8:	fffff800 	.word	0xfffff800

08013bec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b087      	sub	sp, #28
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	460b      	mov	r3, r1
 8013bf6:	607a      	str	r2, [r7, #4]
 8013bf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	333c      	adds	r3, #60	; 0x3c
 8013c02:	3304      	adds	r3, #4
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	4a26      	ldr	r2, [pc, #152]	; (8013ca4 <USB_EP0_OutStart+0xb8>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d90a      	bls.n	8013c26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c20:	d101      	bne.n	8013c26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013c22:	2300      	movs	r3, #0
 8013c24:	e037      	b.n	8013c96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	2300      	movs	r3, #0
 8013c30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c38:	691b      	ldr	r3, [r3, #16]
 8013c3a:	697a      	ldr	r2, [r7, #20]
 8013c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013c44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c4c:	691b      	ldr	r3, [r3, #16]
 8013c4e:	697a      	ldr	r2, [r7, #20]
 8013c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c54:	f043 0318 	orr.w	r3, r3, #24
 8013c58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c60:	691b      	ldr	r3, [r3, #16]
 8013c62:	697a      	ldr	r2, [r7, #20]
 8013c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013c6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013c6e:	7afb      	ldrb	r3, [r7, #11]
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d10f      	bne.n	8013c94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	697a      	ldr	r2, [r7, #20]
 8013c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013c92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c94:	2300      	movs	r3, #0
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	371c      	adds	r7, #28
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca0:	4770      	bx	lr
 8013ca2:	bf00      	nop
 8013ca4:	4f54300a 	.word	0x4f54300a

08013ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b085      	sub	sp, #20
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	4a13      	ldr	r2, [pc, #76]	; (8013d0c <USB_CoreReset+0x64>)
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d901      	bls.n	8013cc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013cc2:	2303      	movs	r3, #3
 8013cc4:	e01b      	b.n	8013cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	691b      	ldr	r3, [r3, #16]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	daf2      	bge.n	8013cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	691b      	ldr	r3, [r3, #16]
 8013cd6:	f043 0201 	orr.w	r2, r3, #1
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	4a09      	ldr	r2, [pc, #36]	; (8013d0c <USB_CoreReset+0x64>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d901      	bls.n	8013cf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013cec:	2303      	movs	r3, #3
 8013cee:	e006      	b.n	8013cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	f003 0301 	and.w	r3, r3, #1
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d0f0      	beq.n	8013cde <USB_CoreReset+0x36>

  return HAL_OK;
 8013cfc:	2300      	movs	r3, #0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3714      	adds	r7, #20
 8013d02:	46bd      	mov	sp, r7
 8013d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d08:	4770      	bx	lr
 8013d0a:	bf00      	nop
 8013d0c:	00030d40 	.word	0x00030d40

08013d10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013d14:	4904      	ldr	r1, [pc, #16]	; (8013d28 <MX_FATFS_Init+0x18>)
 8013d16:	4805      	ldr	r0, [pc, #20]	; (8013d2c <MX_FATFS_Init+0x1c>)
 8013d18:	f004 fe5c 	bl	80189d4 <FATFS_LinkDriver>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	461a      	mov	r2, r3
 8013d20:	4b03      	ldr	r3, [pc, #12]	; (8013d30 <MX_FATFS_Init+0x20>)
 8013d22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013d24:	bf00      	nop
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	24001698 	.word	0x24001698
 8013d2c:	0801dce4 	.word	0x0801dce4
 8013d30:	24001694 	.word	0x24001694

08013d34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013d34:	b480      	push	{r7}
 8013d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013d38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013d4e:	f000 f885 	bl	8013e5c <BSP_SD_IsDetected>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d001      	beq.n	8013d5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013d58:	2302      	movs	r3, #2
 8013d5a:	e012      	b.n	8013d82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013d5c:	480b      	ldr	r0, [pc, #44]	; (8013d8c <BSP_SD_Init+0x48>)
 8013d5e:	f7f8 ff39 	bl	800cbd4 <HAL_SD_Init>
 8013d62:	4603      	mov	r3, r0
 8013d64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013d66:	79fb      	ldrb	r3, [r7, #7]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d109      	bne.n	8013d80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013d70:	4806      	ldr	r0, [pc, #24]	; (8013d8c <BSP_SD_Init+0x48>)
 8013d72:	f7f9 fdef 	bl	800d954 <HAL_SD_ConfigWideBusOperation>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d001      	beq.n	8013d80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013d80:	79fb      	ldrb	r3, [r7, #7]
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3708      	adds	r7, #8
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	24000f30 	.word	0x24000f30

08013d90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	60b9      	str	r1, [r7, #8]
 8013d9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	68f9      	ldr	r1, [r7, #12]
 8013da6:	4806      	ldr	r0, [pc, #24]	; (8013dc0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013da8:	f7f9 f834 	bl	800ce14 <HAL_SD_ReadBlocks_DMA>
 8013dac:	4603      	mov	r3, r0
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d001      	beq.n	8013db6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013db2:	2301      	movs	r3, #1
 8013db4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3718      	adds	r7, #24
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}
 8013dc0:	24000f30 	.word	0x24000f30

08013dc4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b086      	sub	sp, #24
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	68ba      	ldr	r2, [r7, #8]
 8013dd8:	68f9      	ldr	r1, [r7, #12]
 8013dda:	4806      	ldr	r0, [pc, #24]	; (8013df4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013ddc:	f7f9 f8c2 	bl	800cf64 <HAL_SD_WriteBlocks_DMA>
 8013de0:	4603      	mov	r3, r0
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d001      	beq.n	8013dea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013de6:	2301      	movs	r3, #1
 8013de8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3718      	adds	r7, #24
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}
 8013df4:	24000f30 	.word	0x24000f30

08013df8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013dfc:	4805      	ldr	r0, [pc, #20]	; (8013e14 <BSP_SD_GetCardState+0x1c>)
 8013dfe:	f7f9 febb 	bl	800db78 <HAL_SD_GetCardState>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b04      	cmp	r3, #4
 8013e06:	bf14      	ite	ne
 8013e08:	2301      	movne	r3, #1
 8013e0a:	2300      	moveq	r3, #0
 8013e0c:	b2db      	uxtb	r3, r3
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	bf00      	nop
 8013e14:	24000f30 	.word	0x24000f30

08013e18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013e20:	6879      	ldr	r1, [r7, #4]
 8013e22:	4803      	ldr	r0, [pc, #12]	; (8013e30 <BSP_SD_GetCardInfo+0x18>)
 8013e24:	f7f9 fd6a 	bl	800d8fc <HAL_SD_GetCardInfo>
}
 8013e28:	bf00      	nop
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	24000f30 	.word	0x24000f30

08013e34 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013e3c:	f000 f984 	bl	8014148 <BSP_SD_WriteCpltCallback>
}
 8013e40:	bf00      	nop
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013e50:	f000 f986 	bl	8014160 <BSP_SD_ReadCpltCallback>
}
 8013e54:	bf00      	nop
 8013e56:	3708      	adds	r7, #8
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b083      	sub	sp, #12
 8013e60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013e62:	2301      	movs	r3, #1
 8013e64:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8013e66:	79fb      	ldrb	r3, [r7, #7]
 8013e68:	b2db      	uxtb	r3, r3
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	370c      	adds	r7, #12
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr

08013e76 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013e76:	b580      	push	{r7, lr}
 8013e78:	b084      	sub	sp, #16
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013e7e:	f7ef fbef 	bl	8003660 <HAL_GetTick>
 8013e82:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013e84:	e006      	b.n	8013e94 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013e86:	f7ff ffb7 	bl	8013df8 <BSP_SD_GetCardState>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d101      	bne.n	8013e94 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013e90:	2300      	movs	r3, #0
 8013e92:	e009      	b.n	8013ea8 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013e94:	f7ef fbe4 	bl	8003660 <HAL_GetTick>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	1ad3      	subs	r3, r2, r3
 8013e9e:	687a      	ldr	r2, [r7, #4]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d8f0      	bhi.n	8013e86 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3710      	adds	r7, #16
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}

08013eb0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b082      	sub	sp, #8
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013eba:	4b0b      	ldr	r3, [pc, #44]	; (8013ee8 <SD_CheckStatus+0x38>)
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013ec0:	f7ff ff9a 	bl	8013df8 <BSP_SD_GetCardState>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d107      	bne.n	8013eda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013eca:	4b07      	ldr	r3, [pc, #28]	; (8013ee8 <SD_CheckStatus+0x38>)
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	b2db      	uxtb	r3, r3
 8013ed0:	f023 0301 	bic.w	r3, r3, #1
 8013ed4:	b2da      	uxtb	r2, r3
 8013ed6:	4b04      	ldr	r3, [pc, #16]	; (8013ee8 <SD_CheckStatus+0x38>)
 8013ed8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013eda:	4b03      	ldr	r3, [pc, #12]	; (8013ee8 <SD_CheckStatus+0x38>)
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	b2db      	uxtb	r3, r3
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3708      	adds	r7, #8
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	2400000d 	.word	0x2400000d

08013eec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013ef6:	f7ff ff25 	bl	8013d44 <BSP_SD_Init>
 8013efa:	4603      	mov	r3, r0
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d107      	bne.n	8013f10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013f00:	79fb      	ldrb	r3, [r7, #7]
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7ff ffd4 	bl	8013eb0 <SD_CheckStatus>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	4b04      	ldr	r3, [pc, #16]	; (8013f20 <SD_initialize+0x34>)
 8013f0e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013f10:	4b03      	ldr	r3, [pc, #12]	; (8013f20 <SD_initialize+0x34>)
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	b2db      	uxtb	r3, r3
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3708      	adds	r7, #8
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	2400000d 	.word	0x2400000d

08013f24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013f2e:	79fb      	ldrb	r3, [r7, #7]
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ff ffbd 	bl	8013eb0 <SD_CheckStatus>
 8013f36:	4603      	mov	r3, r0
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60b9      	str	r1, [r7, #8]
 8013f48:	607a      	str	r2, [r7, #4]
 8013f4a:	603b      	str	r3, [r7, #0]
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013f50:	2301      	movs	r3, #1
 8013f52:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013f54:	f247 5030 	movw	r0, #30000	; 0x7530
 8013f58:	f7ff ff8d 	bl	8013e76 <SD_CheckStatusWithTimeout>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	da01      	bge.n	8013f66 <SD_read+0x26>
  {
    return res;
 8013f62:	7dfb      	ldrb	r3, [r7, #23]
 8013f64:	e03b      	b.n	8013fde <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013f66:	683a      	ldr	r2, [r7, #0]
 8013f68:	6879      	ldr	r1, [r7, #4]
 8013f6a:	68b8      	ldr	r0, [r7, #8]
 8013f6c:	f7ff ff10 	bl	8013d90 <BSP_SD_ReadBlocks_DMA>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d132      	bne.n	8013fdc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013f76:	4b1c      	ldr	r3, [pc, #112]	; (8013fe8 <SD_read+0xa8>)
 8013f78:	2200      	movs	r2, #0
 8013f7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013f7c:	f7ef fb70 	bl	8003660 <HAL_GetTick>
 8013f80:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013f82:	bf00      	nop
 8013f84:	4b18      	ldr	r3, [pc, #96]	; (8013fe8 <SD_read+0xa8>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d108      	bne.n	8013f9e <SD_read+0x5e>
 8013f8c:	f7ef fb68 	bl	8003660 <HAL_GetTick>
 8013f90:	4602      	mov	r2, r0
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	1ad3      	subs	r3, r2, r3
 8013f96:	f247 522f 	movw	r2, #29999	; 0x752f
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d9f2      	bls.n	8013f84 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013f9e:	4b12      	ldr	r3, [pc, #72]	; (8013fe8 <SD_read+0xa8>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d102      	bne.n	8013fac <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	75fb      	strb	r3, [r7, #23]
 8013faa:	e017      	b.n	8013fdc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013fac:	4b0e      	ldr	r3, [pc, #56]	; (8013fe8 <SD_read+0xa8>)
 8013fae:	2200      	movs	r2, #0
 8013fb0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013fb2:	f7ef fb55 	bl	8003660 <HAL_GetTick>
 8013fb6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013fb8:	e007      	b.n	8013fca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013fba:	f7ff ff1d 	bl	8013df8 <BSP_SD_GetCardState>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d102      	bne.n	8013fca <SD_read+0x8a>
          {
            res = RES_OK;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013fc8:	e008      	b.n	8013fdc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013fca:	f7ef fb49 	bl	8003660 <HAL_GetTick>
 8013fce:	4602      	mov	r2, r0
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	1ad3      	subs	r3, r2, r3
 8013fd4:	f247 522f 	movw	r2, #29999	; 0x752f
 8013fd8:	4293      	cmp	r3, r2
 8013fda:	d9ee      	bls.n	8013fba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3718      	adds	r7, #24
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	240016a0 	.word	0x240016a0

08013fec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b086      	sub	sp, #24
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	60b9      	str	r1, [r7, #8]
 8013ff4:	607a      	str	r2, [r7, #4]
 8013ff6:	603b      	str	r3, [r7, #0]
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014000:	4b24      	ldr	r3, [pc, #144]	; (8014094 <SD_write+0xa8>)
 8014002:	2200      	movs	r2, #0
 8014004:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014006:	f247 5030 	movw	r0, #30000	; 0x7530
 801400a:	f7ff ff34 	bl	8013e76 <SD_CheckStatusWithTimeout>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	da01      	bge.n	8014018 <SD_write+0x2c>
  {
    return res;
 8014014:	7dfb      	ldrb	r3, [r7, #23]
 8014016:	e038      	b.n	801408a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014018:	683a      	ldr	r2, [r7, #0]
 801401a:	6879      	ldr	r1, [r7, #4]
 801401c:	68b8      	ldr	r0, [r7, #8]
 801401e:	f7ff fed1 	bl	8013dc4 <BSP_SD_WriteBlocks_DMA>
 8014022:	4603      	mov	r3, r0
 8014024:	2b00      	cmp	r3, #0
 8014026:	d12f      	bne.n	8014088 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014028:	f7ef fb1a 	bl	8003660 <HAL_GetTick>
 801402c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801402e:	bf00      	nop
 8014030:	4b18      	ldr	r3, [pc, #96]	; (8014094 <SD_write+0xa8>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d108      	bne.n	801404a <SD_write+0x5e>
 8014038:	f7ef fb12 	bl	8003660 <HAL_GetTick>
 801403c:	4602      	mov	r2, r0
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	1ad3      	subs	r3, r2, r3
 8014042:	f247 522f 	movw	r2, #29999	; 0x752f
 8014046:	4293      	cmp	r3, r2
 8014048:	d9f2      	bls.n	8014030 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801404a:	4b12      	ldr	r3, [pc, #72]	; (8014094 <SD_write+0xa8>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d102      	bne.n	8014058 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014052:	2301      	movs	r3, #1
 8014054:	75fb      	strb	r3, [r7, #23]
 8014056:	e017      	b.n	8014088 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014058:	4b0e      	ldr	r3, [pc, #56]	; (8014094 <SD_write+0xa8>)
 801405a:	2200      	movs	r2, #0
 801405c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801405e:	f7ef faff 	bl	8003660 <HAL_GetTick>
 8014062:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014064:	e007      	b.n	8014076 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014066:	f7ff fec7 	bl	8013df8 <BSP_SD_GetCardState>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d102      	bne.n	8014076 <SD_write+0x8a>
          {
            res = RES_OK;
 8014070:	2300      	movs	r3, #0
 8014072:	75fb      	strb	r3, [r7, #23]
            break;
 8014074:	e008      	b.n	8014088 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014076:	f7ef faf3 	bl	8003660 <HAL_GetTick>
 801407a:	4602      	mov	r2, r0
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	1ad3      	subs	r3, r2, r3
 8014080:	f247 522f 	movw	r2, #29999	; 0x752f
 8014084:	4293      	cmp	r3, r2
 8014086:	d9ee      	bls.n	8014066 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014088:	7dfb      	ldrb	r3, [r7, #23]
}
 801408a:	4618      	mov	r0, r3
 801408c:	3718      	adds	r7, #24
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}
 8014092:	bf00      	nop
 8014094:	2400169c 	.word	0x2400169c

08014098 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b08c      	sub	sp, #48	; 0x30
 801409c:	af00      	add	r7, sp, #0
 801409e:	4603      	mov	r3, r0
 80140a0:	603a      	str	r2, [r7, #0]
 80140a2:	71fb      	strb	r3, [r7, #7]
 80140a4:	460b      	mov	r3, r1
 80140a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80140a8:	2301      	movs	r3, #1
 80140aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80140ae:	4b25      	ldr	r3, [pc, #148]	; (8014144 <SD_ioctl+0xac>)
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	f003 0301 	and.w	r3, r3, #1
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d001      	beq.n	80140c0 <SD_ioctl+0x28>
 80140bc:	2303      	movs	r3, #3
 80140be:	e03c      	b.n	801413a <SD_ioctl+0xa2>

  switch (cmd)
 80140c0:	79bb      	ldrb	r3, [r7, #6]
 80140c2:	2b03      	cmp	r3, #3
 80140c4:	d834      	bhi.n	8014130 <SD_ioctl+0x98>
 80140c6:	a201      	add	r2, pc, #4	; (adr r2, 80140cc <SD_ioctl+0x34>)
 80140c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140cc:	080140dd 	.word	0x080140dd
 80140d0:	080140e5 	.word	0x080140e5
 80140d4:	080140fd 	.word	0x080140fd
 80140d8:	08014117 	.word	0x08014117
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80140dc:	2300      	movs	r3, #0
 80140de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80140e2:	e028      	b.n	8014136 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80140e4:	f107 0308 	add.w	r3, r7, #8
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7ff fe95 	bl	8013e18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80140ee:	6a3a      	ldr	r2, [r7, #32]
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80140f4:	2300      	movs	r3, #0
 80140f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80140fa:	e01c      	b.n	8014136 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80140fc:	f107 0308 	add.w	r3, r7, #8
 8014100:	4618      	mov	r0, r3
 8014102:	f7ff fe89 	bl	8013e18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014108:	b29a      	uxth	r2, r3
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801410e:	2300      	movs	r3, #0
 8014110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014114:	e00f      	b.n	8014136 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014116:	f107 0308 	add.w	r3, r7, #8
 801411a:	4618      	mov	r0, r3
 801411c:	f7ff fe7c 	bl	8013e18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	0a5a      	lsrs	r2, r3, #9
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014128:	2300      	movs	r3, #0
 801412a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801412e:	e002      	b.n	8014136 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014130:	2304      	movs	r3, #4
 8014132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801413a:	4618      	mov	r0, r3
 801413c:	3730      	adds	r7, #48	; 0x30
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	2400000d 	.word	0x2400000d

08014148 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014148:	b480      	push	{r7}
 801414a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801414c:	4b03      	ldr	r3, [pc, #12]	; (801415c <BSP_SD_WriteCpltCallback+0x14>)
 801414e:	2201      	movs	r2, #1
 8014150:	601a      	str	r2, [r3, #0]
}
 8014152:	bf00      	nop
 8014154:	46bd      	mov	sp, r7
 8014156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415a:	4770      	bx	lr
 801415c:	2400169c 	.word	0x2400169c

08014160 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014160:	b480      	push	{r7}
 8014162:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014164:	4b03      	ldr	r3, [pc, #12]	; (8014174 <BSP_SD_ReadCpltCallback+0x14>)
 8014166:	2201      	movs	r2, #1
 8014168:	601a      	str	r2, [r3, #0]
}
 801416a:	bf00      	nop
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr
 8014174:	240016a0 	.word	0x240016a0

08014178 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	460b      	mov	r3, r1
 8014182:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014184:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014188:	f005 f9a4 	bl	80194d4 <USBD_static_malloc>
 801418c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d109      	bne.n	80141a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	32b0      	adds	r2, #176	; 0xb0
 801419e:	2100      	movs	r1, #0
 80141a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80141a4:	2302      	movs	r3, #2
 80141a6:	e0d4      	b.n	8014352 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80141a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80141ac:	2100      	movs	r1, #0
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f006 f939 	bl	801a426 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	32b0      	adds	r2, #176	; 0xb0
 80141be:	68f9      	ldr	r1, [r7, #12]
 80141c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	32b0      	adds	r2, #176	; 0xb0
 80141ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	7c1b      	ldrb	r3, [r3, #16]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d138      	bne.n	8014252 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80141e0:	4b5e      	ldr	r3, [pc, #376]	; (801435c <USBD_CDC_Init+0x1e4>)
 80141e2:	7819      	ldrb	r1, [r3, #0]
 80141e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141e8:	2202      	movs	r2, #2
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f005 f84f 	bl	801928e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80141f0:	4b5a      	ldr	r3, [pc, #360]	; (801435c <USBD_CDC_Init+0x1e4>)
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	f003 020f 	and.w	r2, r3, #15
 80141f8:	6879      	ldr	r1, [r7, #4]
 80141fa:	4613      	mov	r3, r2
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	4413      	add	r3, r2
 8014200:	009b      	lsls	r3, r3, #2
 8014202:	440b      	add	r3, r1
 8014204:	3324      	adds	r3, #36	; 0x24
 8014206:	2201      	movs	r2, #1
 8014208:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801420a:	4b55      	ldr	r3, [pc, #340]	; (8014360 <USBD_CDC_Init+0x1e8>)
 801420c:	7819      	ldrb	r1, [r3, #0]
 801420e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014212:	2202      	movs	r2, #2
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f005 f83a 	bl	801928e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801421a:	4b51      	ldr	r3, [pc, #324]	; (8014360 <USBD_CDC_Init+0x1e8>)
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	f003 020f 	and.w	r2, r3, #15
 8014222:	6879      	ldr	r1, [r7, #4]
 8014224:	4613      	mov	r3, r2
 8014226:	009b      	lsls	r3, r3, #2
 8014228:	4413      	add	r3, r2
 801422a:	009b      	lsls	r3, r3, #2
 801422c:	440b      	add	r3, r1
 801422e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014232:	2201      	movs	r2, #1
 8014234:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014236:	4b4b      	ldr	r3, [pc, #300]	; (8014364 <USBD_CDC_Init+0x1ec>)
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	f003 020f 	and.w	r2, r3, #15
 801423e:	6879      	ldr	r1, [r7, #4]
 8014240:	4613      	mov	r3, r2
 8014242:	009b      	lsls	r3, r3, #2
 8014244:	4413      	add	r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	440b      	add	r3, r1
 801424a:	3326      	adds	r3, #38	; 0x26
 801424c:	2210      	movs	r2, #16
 801424e:	801a      	strh	r2, [r3, #0]
 8014250:	e035      	b.n	80142be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014252:	4b42      	ldr	r3, [pc, #264]	; (801435c <USBD_CDC_Init+0x1e4>)
 8014254:	7819      	ldrb	r1, [r3, #0]
 8014256:	2340      	movs	r3, #64	; 0x40
 8014258:	2202      	movs	r2, #2
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f005 f817 	bl	801928e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014260:	4b3e      	ldr	r3, [pc, #248]	; (801435c <USBD_CDC_Init+0x1e4>)
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	f003 020f 	and.w	r2, r3, #15
 8014268:	6879      	ldr	r1, [r7, #4]
 801426a:	4613      	mov	r3, r2
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	4413      	add	r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	440b      	add	r3, r1
 8014274:	3324      	adds	r3, #36	; 0x24
 8014276:	2201      	movs	r2, #1
 8014278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801427a:	4b39      	ldr	r3, [pc, #228]	; (8014360 <USBD_CDC_Init+0x1e8>)
 801427c:	7819      	ldrb	r1, [r3, #0]
 801427e:	2340      	movs	r3, #64	; 0x40
 8014280:	2202      	movs	r2, #2
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f005 f803 	bl	801928e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014288:	4b35      	ldr	r3, [pc, #212]	; (8014360 <USBD_CDC_Init+0x1e8>)
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	f003 020f 	and.w	r2, r3, #15
 8014290:	6879      	ldr	r1, [r7, #4]
 8014292:	4613      	mov	r3, r2
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	4413      	add	r3, r2
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	440b      	add	r3, r1
 801429c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80142a0:	2201      	movs	r2, #1
 80142a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80142a4:	4b2f      	ldr	r3, [pc, #188]	; (8014364 <USBD_CDC_Init+0x1ec>)
 80142a6:	781b      	ldrb	r3, [r3, #0]
 80142a8:	f003 020f 	and.w	r2, r3, #15
 80142ac:	6879      	ldr	r1, [r7, #4]
 80142ae:	4613      	mov	r3, r2
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	4413      	add	r3, r2
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	440b      	add	r3, r1
 80142b8:	3326      	adds	r3, #38	; 0x26
 80142ba:	2210      	movs	r2, #16
 80142bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80142be:	4b29      	ldr	r3, [pc, #164]	; (8014364 <USBD_CDC_Init+0x1ec>)
 80142c0:	7819      	ldrb	r1, [r3, #0]
 80142c2:	2308      	movs	r3, #8
 80142c4:	2203      	movs	r2, #3
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f004 ffe1 	bl	801928e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80142cc:	4b25      	ldr	r3, [pc, #148]	; (8014364 <USBD_CDC_Init+0x1ec>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	f003 020f 	and.w	r2, r3, #15
 80142d4:	6879      	ldr	r1, [r7, #4]
 80142d6:	4613      	mov	r3, r2
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	4413      	add	r3, r2
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	440b      	add	r3, r1
 80142e0:	3324      	adds	r3, #36	; 0x24
 80142e2:	2201      	movs	r2, #1
 80142e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2200      	movs	r2, #0
 80142ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	33b0      	adds	r3, #176	; 0xb0
 80142f8:	009b      	lsls	r3, r3, #2
 80142fa:	4413      	add	r3, r2
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2200      	movs	r2, #0
 8014306:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	2200      	movs	r2, #0
 801430e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014318:	2b00      	cmp	r3, #0
 801431a:	d101      	bne.n	8014320 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801431c:	2302      	movs	r3, #2
 801431e:	e018      	b.n	8014352 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	7c1b      	ldrb	r3, [r3, #16]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d10a      	bne.n	801433e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014328:	4b0d      	ldr	r3, [pc, #52]	; (8014360 <USBD_CDC_Init+0x1e8>)
 801432a:	7819      	ldrb	r1, [r3, #0]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f005 f898 	bl	801946c <USBD_LL_PrepareReceive>
 801433c:	e008      	b.n	8014350 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801433e:	4b08      	ldr	r3, [pc, #32]	; (8014360 <USBD_CDC_Init+0x1e8>)
 8014340:	7819      	ldrb	r1, [r3, #0]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014348:	2340      	movs	r3, #64	; 0x40
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f005 f88e 	bl	801946c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014350:	2300      	movs	r3, #0
}
 8014352:	4618      	mov	r0, r3
 8014354:	3710      	adds	r7, #16
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}
 801435a:	bf00      	nop
 801435c:	24000097 	.word	0x24000097
 8014360:	24000098 	.word	0x24000098
 8014364:	24000099 	.word	0x24000099

08014368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	460b      	mov	r3, r1
 8014372:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014374:	4b3a      	ldr	r3, [pc, #232]	; (8014460 <USBD_CDC_DeInit+0xf8>)
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	4619      	mov	r1, r3
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f004 ffad 	bl	80192da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014380:	4b37      	ldr	r3, [pc, #220]	; (8014460 <USBD_CDC_DeInit+0xf8>)
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	f003 020f 	and.w	r2, r3, #15
 8014388:	6879      	ldr	r1, [r7, #4]
 801438a:	4613      	mov	r3, r2
 801438c:	009b      	lsls	r3, r3, #2
 801438e:	4413      	add	r3, r2
 8014390:	009b      	lsls	r3, r3, #2
 8014392:	440b      	add	r3, r1
 8014394:	3324      	adds	r3, #36	; 0x24
 8014396:	2200      	movs	r2, #0
 8014398:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801439a:	4b32      	ldr	r3, [pc, #200]	; (8014464 <USBD_CDC_DeInit+0xfc>)
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	4619      	mov	r1, r3
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f004 ff9a 	bl	80192da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80143a6:	4b2f      	ldr	r3, [pc, #188]	; (8014464 <USBD_CDC_DeInit+0xfc>)
 80143a8:	781b      	ldrb	r3, [r3, #0]
 80143aa:	f003 020f 	and.w	r2, r3, #15
 80143ae:	6879      	ldr	r1, [r7, #4]
 80143b0:	4613      	mov	r3, r2
 80143b2:	009b      	lsls	r3, r3, #2
 80143b4:	4413      	add	r3, r2
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	440b      	add	r3, r1
 80143ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80143be:	2200      	movs	r2, #0
 80143c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80143c2:	4b29      	ldr	r3, [pc, #164]	; (8014468 <USBD_CDC_DeInit+0x100>)
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	4619      	mov	r1, r3
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f004 ff86 	bl	80192da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80143ce:	4b26      	ldr	r3, [pc, #152]	; (8014468 <USBD_CDC_DeInit+0x100>)
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	f003 020f 	and.w	r2, r3, #15
 80143d6:	6879      	ldr	r1, [r7, #4]
 80143d8:	4613      	mov	r3, r2
 80143da:	009b      	lsls	r3, r3, #2
 80143dc:	4413      	add	r3, r2
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	440b      	add	r3, r1
 80143e2:	3324      	adds	r3, #36	; 0x24
 80143e4:	2200      	movs	r2, #0
 80143e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80143e8:	4b1f      	ldr	r3, [pc, #124]	; (8014468 <USBD_CDC_DeInit+0x100>)
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	f003 020f 	and.w	r2, r3, #15
 80143f0:	6879      	ldr	r1, [r7, #4]
 80143f2:	4613      	mov	r3, r2
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	4413      	add	r3, r2
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	440b      	add	r3, r1
 80143fc:	3326      	adds	r3, #38	; 0x26
 80143fe:	2200      	movs	r2, #0
 8014400:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	32b0      	adds	r2, #176	; 0xb0
 801440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d01f      	beq.n	8014454 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	33b0      	adds	r3, #176	; 0xb0
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	4413      	add	r3, r2
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	32b0      	adds	r2, #176	; 0xb0
 8014432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014436:	4618      	mov	r0, r3
 8014438:	f005 f85a 	bl	80194f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	32b0      	adds	r2, #176	; 0xb0
 8014446:	2100      	movs	r1, #0
 8014448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2200      	movs	r2, #0
 8014450:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014454:	2300      	movs	r3, #0
}
 8014456:	4618      	mov	r0, r3
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	24000097 	.word	0x24000097
 8014464:	24000098 	.word	0x24000098
 8014468:	24000099 	.word	0x24000099

0801446c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	32b0      	adds	r2, #176	; 0xb0
 8014480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014484:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014486:	2300      	movs	r3, #0
 8014488:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801448a:	2300      	movs	r3, #0
 801448c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801448e:	2300      	movs	r3, #0
 8014490:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d101      	bne.n	801449c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014498:	2303      	movs	r3, #3
 801449a:	e0bf      	b.n	801461c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d050      	beq.n	801454a <USBD_CDC_Setup+0xde>
 80144a8:	2b20      	cmp	r3, #32
 80144aa:	f040 80af 	bne.w	801460c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	88db      	ldrh	r3, [r3, #6]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d03a      	beq.n	801452c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	b25b      	sxtb	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	da1b      	bge.n	80144f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	33b0      	adds	r3, #176	; 0xb0
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	4413      	add	r3, r2
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	689b      	ldr	r3, [r3, #8]
 80144d2:	683a      	ldr	r2, [r7, #0]
 80144d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80144d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80144d8:	683a      	ldr	r2, [r7, #0]
 80144da:	88d2      	ldrh	r2, [r2, #6]
 80144dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	88db      	ldrh	r3, [r3, #6]
 80144e2:	2b07      	cmp	r3, #7
 80144e4:	bf28      	it	cs
 80144e6:	2307      	movcs	r3, #7
 80144e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	89fa      	ldrh	r2, [r7, #14]
 80144ee:	4619      	mov	r1, r3
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f001 fd49 	bl	8015f88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80144f6:	e090      	b.n	801461a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	785a      	ldrb	r2, [r3, #1]
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	88db      	ldrh	r3, [r3, #6]
 8014506:	2b3f      	cmp	r3, #63	; 0x3f
 8014508:	d803      	bhi.n	8014512 <USBD_CDC_Setup+0xa6>
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	88db      	ldrh	r3, [r3, #6]
 801450e:	b2da      	uxtb	r2, r3
 8014510:	e000      	b.n	8014514 <USBD_CDC_Setup+0xa8>
 8014512:	2240      	movs	r2, #64	; 0x40
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801451a:	6939      	ldr	r1, [r7, #16]
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014522:	461a      	mov	r2, r3
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f001 fd5b 	bl	8015fe0 <USBD_CtlPrepareRx>
      break;
 801452a:	e076      	b.n	801461a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014532:	687a      	ldr	r2, [r7, #4]
 8014534:	33b0      	adds	r3, #176	; 0xb0
 8014536:	009b      	lsls	r3, r3, #2
 8014538:	4413      	add	r3, r2
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	689b      	ldr	r3, [r3, #8]
 801453e:	683a      	ldr	r2, [r7, #0]
 8014540:	7850      	ldrb	r0, [r2, #1]
 8014542:	2200      	movs	r2, #0
 8014544:	6839      	ldr	r1, [r7, #0]
 8014546:	4798      	blx	r3
      break;
 8014548:	e067      	b.n	801461a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	785b      	ldrb	r3, [r3, #1]
 801454e:	2b0b      	cmp	r3, #11
 8014550:	d851      	bhi.n	80145f6 <USBD_CDC_Setup+0x18a>
 8014552:	a201      	add	r2, pc, #4	; (adr r2, 8014558 <USBD_CDC_Setup+0xec>)
 8014554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014558:	08014589 	.word	0x08014589
 801455c:	08014605 	.word	0x08014605
 8014560:	080145f7 	.word	0x080145f7
 8014564:	080145f7 	.word	0x080145f7
 8014568:	080145f7 	.word	0x080145f7
 801456c:	080145f7 	.word	0x080145f7
 8014570:	080145f7 	.word	0x080145f7
 8014574:	080145f7 	.word	0x080145f7
 8014578:	080145f7 	.word	0x080145f7
 801457c:	080145f7 	.word	0x080145f7
 8014580:	080145b3 	.word	0x080145b3
 8014584:	080145dd 	.word	0x080145dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801458e:	b2db      	uxtb	r3, r3
 8014590:	2b03      	cmp	r3, #3
 8014592:	d107      	bne.n	80145a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014594:	f107 030a 	add.w	r3, r7, #10
 8014598:	2202      	movs	r2, #2
 801459a:	4619      	mov	r1, r3
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f001 fcf3 	bl	8015f88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145a2:	e032      	b.n	801460a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145a4:	6839      	ldr	r1, [r7, #0]
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f001 fc7d 	bl	8015ea6 <USBD_CtlError>
            ret = USBD_FAIL;
 80145ac:	2303      	movs	r3, #3
 80145ae:	75fb      	strb	r3, [r7, #23]
          break;
 80145b0:	e02b      	b.n	801460a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	2b03      	cmp	r3, #3
 80145bc:	d107      	bne.n	80145ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80145be:	f107 030d 	add.w	r3, r7, #13
 80145c2:	2201      	movs	r2, #1
 80145c4:	4619      	mov	r1, r3
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f001 fcde 	bl	8015f88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145cc:	e01d      	b.n	801460a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145ce:	6839      	ldr	r1, [r7, #0]
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f001 fc68 	bl	8015ea6 <USBD_CtlError>
            ret = USBD_FAIL;
 80145d6:	2303      	movs	r3, #3
 80145d8:	75fb      	strb	r3, [r7, #23]
          break;
 80145da:	e016      	b.n	801460a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	2b03      	cmp	r3, #3
 80145e6:	d00f      	beq.n	8014608 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80145e8:	6839      	ldr	r1, [r7, #0]
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f001 fc5b 	bl	8015ea6 <USBD_CtlError>
            ret = USBD_FAIL;
 80145f0:	2303      	movs	r3, #3
 80145f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80145f4:	e008      	b.n	8014608 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80145f6:	6839      	ldr	r1, [r7, #0]
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f001 fc54 	bl	8015ea6 <USBD_CtlError>
          ret = USBD_FAIL;
 80145fe:	2303      	movs	r3, #3
 8014600:	75fb      	strb	r3, [r7, #23]
          break;
 8014602:	e002      	b.n	801460a <USBD_CDC_Setup+0x19e>
          break;
 8014604:	bf00      	nop
 8014606:	e008      	b.n	801461a <USBD_CDC_Setup+0x1ae>
          break;
 8014608:	bf00      	nop
      }
      break;
 801460a:	e006      	b.n	801461a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801460c:	6839      	ldr	r1, [r7, #0]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f001 fc49 	bl	8015ea6 <USBD_CtlError>
      ret = USBD_FAIL;
 8014614:	2303      	movs	r3, #3
 8014616:	75fb      	strb	r3, [r7, #23]
      break;
 8014618:	bf00      	nop
  }

  return (uint8_t)ret;
 801461a:	7dfb      	ldrb	r3, [r7, #23]
}
 801461c:	4618      	mov	r0, r3
 801461e:	3718      	adds	r7, #24
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b084      	sub	sp, #16
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	460b      	mov	r3, r1
 801462e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	32b0      	adds	r2, #176	; 0xb0
 8014642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d101      	bne.n	801464e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801464a:	2303      	movs	r3, #3
 801464c:	e065      	b.n	801471a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	32b0      	adds	r2, #176	; 0xb0
 8014658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801465c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801465e:	78fb      	ldrb	r3, [r7, #3]
 8014660:	f003 020f 	and.w	r2, r3, #15
 8014664:	6879      	ldr	r1, [r7, #4]
 8014666:	4613      	mov	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	4413      	add	r3, r2
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	440b      	add	r3, r1
 8014670:	3318      	adds	r3, #24
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d02f      	beq.n	80146d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014678:	78fb      	ldrb	r3, [r7, #3]
 801467a:	f003 020f 	and.w	r2, r3, #15
 801467e:	6879      	ldr	r1, [r7, #4]
 8014680:	4613      	mov	r3, r2
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	4413      	add	r3, r2
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	440b      	add	r3, r1
 801468a:	3318      	adds	r3, #24
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	78fb      	ldrb	r3, [r7, #3]
 8014690:	f003 010f 	and.w	r1, r3, #15
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	460b      	mov	r3, r1
 8014698:	00db      	lsls	r3, r3, #3
 801469a:	440b      	add	r3, r1
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	4403      	add	r3, r0
 80146a0:	3344      	adds	r3, #68	; 0x44
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80146a8:	fb01 f303 	mul.w	r3, r1, r3
 80146ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d112      	bne.n	80146d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80146b2:	78fb      	ldrb	r3, [r7, #3]
 80146b4:	f003 020f 	and.w	r2, r3, #15
 80146b8:	6879      	ldr	r1, [r7, #4]
 80146ba:	4613      	mov	r3, r2
 80146bc:	009b      	lsls	r3, r3, #2
 80146be:	4413      	add	r3, r2
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	440b      	add	r3, r1
 80146c4:	3318      	adds	r3, #24
 80146c6:	2200      	movs	r2, #0
 80146c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80146ca:	78f9      	ldrb	r1, [r7, #3]
 80146cc:	2300      	movs	r3, #0
 80146ce:	2200      	movs	r2, #0
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f004 feaa 	bl	801942a <USBD_LL_Transmit>
 80146d6:	e01f      	b.n	8014718 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	2200      	movs	r2, #0
 80146dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146e6:	687a      	ldr	r2, [r7, #4]
 80146e8:	33b0      	adds	r3, #176	; 0xb0
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	4413      	add	r3, r2
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	691b      	ldr	r3, [r3, #16]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d010      	beq.n	8014718 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	33b0      	adds	r3, #176	; 0xb0
 8014700:	009b      	lsls	r3, r3, #2
 8014702:	4413      	add	r3, r2
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	691b      	ldr	r3, [r3, #16]
 8014708:	68ba      	ldr	r2, [r7, #8]
 801470a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801470e:	68ba      	ldr	r2, [r7, #8]
 8014710:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014714:	78fa      	ldrb	r2, [r7, #3]
 8014716:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014718:	2300      	movs	r3, #0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3710      	adds	r7, #16
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b084      	sub	sp, #16
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
 801472a:	460b      	mov	r3, r1
 801472c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	32b0      	adds	r2, #176	; 0xb0
 8014738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801473c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	32b0      	adds	r2, #176	; 0xb0
 8014748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d101      	bne.n	8014754 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014750:	2303      	movs	r3, #3
 8014752:	e01a      	b.n	801478a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014754:	78fb      	ldrb	r3, [r7, #3]
 8014756:	4619      	mov	r1, r3
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f004 fea8 	bl	80194ae <USBD_LL_GetRxDataSize>
 801475e:	4602      	mov	r2, r0
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	33b0      	adds	r3, #176	; 0xb0
 8014770:	009b      	lsls	r3, r3, #2
 8014772:	4413      	add	r3, r2
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	68db      	ldr	r3, [r3, #12]
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014784:	4611      	mov	r1, r2
 8014786:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014788:	2300      	movs	r3, #0
}
 801478a:	4618      	mov	r0, r3
 801478c:	3710      	adds	r7, #16
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}

08014792 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014792:	b580      	push	{r7, lr}
 8014794:	b084      	sub	sp, #16
 8014796:	af00      	add	r7, sp, #0
 8014798:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	32b0      	adds	r2, #176	; 0xb0
 80147a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d101      	bne.n	80147b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80147b0:	2303      	movs	r3, #3
 80147b2:	e025      	b.n	8014800 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147ba:	687a      	ldr	r2, [r7, #4]
 80147bc:	33b0      	adds	r3, #176	; 0xb0
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	4413      	add	r3, r2
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d01a      	beq.n	80147fe <USBD_CDC_EP0_RxReady+0x6c>
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80147ce:	2bff      	cmp	r3, #255	; 0xff
 80147d0:	d015      	beq.n	80147fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	33b0      	adds	r3, #176	; 0xb0
 80147dc:	009b      	lsls	r3, r3, #2
 80147de:	4413      	add	r3, r2
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	68fa      	ldr	r2, [r7, #12]
 80147e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80147ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80147f2:	b292      	uxth	r2, r2
 80147f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	22ff      	movs	r2, #255	; 0xff
 80147fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80147fe:	2300      	movs	r3, #0
}
 8014800:	4618      	mov	r0, r3
 8014802:	3710      	adds	r7, #16
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}

08014808 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b086      	sub	sp, #24
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014810:	2182      	movs	r1, #130	; 0x82
 8014812:	4818      	ldr	r0, [pc, #96]	; (8014874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014814:	f000 fd0f 	bl	8015236 <USBD_GetEpDesc>
 8014818:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801481a:	2101      	movs	r1, #1
 801481c:	4815      	ldr	r0, [pc, #84]	; (8014874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801481e:	f000 fd0a 	bl	8015236 <USBD_GetEpDesc>
 8014822:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014824:	2181      	movs	r1, #129	; 0x81
 8014826:	4813      	ldr	r0, [pc, #76]	; (8014874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014828:	f000 fd05 	bl	8015236 <USBD_GetEpDesc>
 801482c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d002      	beq.n	801483a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	2210      	movs	r2, #16
 8014838:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d006      	beq.n	801484e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	2200      	movs	r2, #0
 8014844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014848:	711a      	strb	r2, [r3, #4]
 801484a:	2200      	movs	r2, #0
 801484c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d006      	beq.n	8014862 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2200      	movs	r2, #0
 8014858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801485c:	711a      	strb	r2, [r3, #4]
 801485e:	2200      	movs	r2, #0
 8014860:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2243      	movs	r2, #67	; 0x43
 8014866:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014868:	4b02      	ldr	r3, [pc, #8]	; (8014874 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801486a:	4618      	mov	r0, r3
 801486c:	3718      	adds	r7, #24
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	24000054 	.word	0x24000054

08014878 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014880:	2182      	movs	r1, #130	; 0x82
 8014882:	4818      	ldr	r0, [pc, #96]	; (80148e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014884:	f000 fcd7 	bl	8015236 <USBD_GetEpDesc>
 8014888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801488a:	2101      	movs	r1, #1
 801488c:	4815      	ldr	r0, [pc, #84]	; (80148e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801488e:	f000 fcd2 	bl	8015236 <USBD_GetEpDesc>
 8014892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014894:	2181      	movs	r1, #129	; 0x81
 8014896:	4813      	ldr	r0, [pc, #76]	; (80148e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014898:	f000 fccd 	bl	8015236 <USBD_GetEpDesc>
 801489c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d002      	beq.n	80148aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	2210      	movs	r2, #16
 80148a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d006      	beq.n	80148be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	2200      	movs	r2, #0
 80148b4:	711a      	strb	r2, [r3, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f042 0202 	orr.w	r2, r2, #2
 80148bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d006      	beq.n	80148d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2200      	movs	r2, #0
 80148c8:	711a      	strb	r2, [r3, #4]
 80148ca:	2200      	movs	r2, #0
 80148cc:	f042 0202 	orr.w	r2, r2, #2
 80148d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2243      	movs	r2, #67	; 0x43
 80148d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80148d8:	4b02      	ldr	r3, [pc, #8]	; (80148e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3718      	adds	r7, #24
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	24000054 	.word	0x24000054

080148e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80148f0:	2182      	movs	r1, #130	; 0x82
 80148f2:	4818      	ldr	r0, [pc, #96]	; (8014954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80148f4:	f000 fc9f 	bl	8015236 <USBD_GetEpDesc>
 80148f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80148fa:	2101      	movs	r1, #1
 80148fc:	4815      	ldr	r0, [pc, #84]	; (8014954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80148fe:	f000 fc9a 	bl	8015236 <USBD_GetEpDesc>
 8014902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014904:	2181      	movs	r1, #129	; 0x81
 8014906:	4813      	ldr	r0, [pc, #76]	; (8014954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014908:	f000 fc95 	bl	8015236 <USBD_GetEpDesc>
 801490c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d002      	beq.n	801491a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	2210      	movs	r2, #16
 8014918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d006      	beq.n	801492e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	2200      	movs	r2, #0
 8014924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014928:	711a      	strb	r2, [r3, #4]
 801492a:	2200      	movs	r2, #0
 801492c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d006      	beq.n	8014942 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	2200      	movs	r2, #0
 8014938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801493c:	711a      	strb	r2, [r3, #4]
 801493e:	2200      	movs	r2, #0
 8014940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2243      	movs	r2, #67	; 0x43
 8014946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014948:	4b02      	ldr	r3, [pc, #8]	; (8014954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801494a:	4618      	mov	r0, r3
 801494c:	3718      	adds	r7, #24
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}
 8014952:	bf00      	nop
 8014954:	24000054 	.word	0x24000054

08014958 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014958:	b480      	push	{r7}
 801495a:	b083      	sub	sp, #12
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	220a      	movs	r2, #10
 8014964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014966:	4b03      	ldr	r3, [pc, #12]	; (8014974 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014968:	4618      	mov	r0, r3
 801496a:	370c      	adds	r7, #12
 801496c:	46bd      	mov	sp, r7
 801496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014972:	4770      	bx	lr
 8014974:	24000010 	.word	0x24000010

08014978 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014978:	b480      	push	{r7}
 801497a:	b083      	sub	sp, #12
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d101      	bne.n	801498c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014988:	2303      	movs	r3, #3
 801498a:	e009      	b.n	80149a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	33b0      	adds	r3, #176	; 0xb0
 8014996:	009b      	lsls	r3, r3, #2
 8014998:	4413      	add	r3, r2
 801499a:	683a      	ldr	r2, [r7, #0]
 801499c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801499e:	2300      	movs	r3, #0
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	370c      	adds	r7, #12
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr

080149ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b087      	sub	sp, #28
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	32b0      	adds	r2, #176	; 0xb0
 80149c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d101      	bne.n	80149d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80149ce:	2303      	movs	r3, #3
 80149d0:	e008      	b.n	80149e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	68ba      	ldr	r2, [r7, #8]
 80149d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80149e2:	2300      	movs	r3, #0
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	371c      	adds	r7, #28
 80149e8:	46bd      	mov	sp, r7
 80149ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ee:	4770      	bx	lr

080149f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	32b0      	adds	r2, #176	; 0xb0
 8014a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d101      	bne.n	8014a14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014a10:	2303      	movs	r3, #3
 8014a12:	e004      	b.n	8014a1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	683a      	ldr	r2, [r7, #0]
 8014a18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014a1c:	2300      	movs	r3, #0
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3714      	adds	r7, #20
 8014a22:	46bd      	mov	sp, r7
 8014a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a28:	4770      	bx	lr
	...

08014a2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	32b0      	adds	r2, #176	; 0xb0
 8014a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	32b0      	adds	r2, #176	; 0xb0
 8014a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d101      	bne.n	8014a5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014a56:	2303      	movs	r3, #3
 8014a58:	e018      	b.n	8014a8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	7c1b      	ldrb	r3, [r3, #16]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d10a      	bne.n	8014a78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a62:	4b0c      	ldr	r3, [pc, #48]	; (8014a94 <USBD_CDC_ReceivePacket+0x68>)
 8014a64:	7819      	ldrb	r1, [r3, #0]
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f004 fcfb 	bl	801946c <USBD_LL_PrepareReceive>
 8014a76:	e008      	b.n	8014a8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a78:	4b06      	ldr	r3, [pc, #24]	; (8014a94 <USBD_CDC_ReceivePacket+0x68>)
 8014a7a:	7819      	ldrb	r1, [r3, #0]
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a82:	2340      	movs	r3, #64	; 0x40
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f004 fcf1 	bl	801946c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014a8a:	2300      	movs	r3, #0
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3710      	adds	r7, #16
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	24000098 	.word	0x24000098

08014a98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b086      	sub	sp, #24
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	60f8      	str	r0, [r7, #12]
 8014aa0:	60b9      	str	r1, [r7, #8]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d101      	bne.n	8014ab0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014aac:	2303      	movs	r3, #3
 8014aae:	e01f      	b.n	8014af0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	2200      	movs	r2, #0
 8014abc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	68ba      	ldr	r2, [r7, #8]
 8014ad2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	2201      	movs	r2, #1
 8014ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	79fa      	ldrb	r2, [r7, #7]
 8014ae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	f004 fb65 	bl	80191b4 <USBD_LL_Init>
 8014aea:	4603      	mov	r3, r0
 8014aec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3718      	adds	r7, #24
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b02:	2300      	movs	r3, #0
 8014b04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d101      	bne.n	8014b10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014b0c:	2303      	movs	r3, #3
 8014b0e:	e025      	b.n	8014b5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	683a      	ldr	r2, [r7, #0]
 8014b14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	32ae      	adds	r2, #174	; 0xae
 8014b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d00f      	beq.n	8014b4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	32ae      	adds	r2, #174	; 0xae
 8014b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b3c:	f107 020e 	add.w	r2, r7, #14
 8014b40:	4610      	mov	r0, r2
 8014b42:	4798      	blx	r3
 8014b44:	4602      	mov	r2, r0
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014b52:	1c5a      	adds	r2, r3, #1
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014b5a:	2300      	movs	r3, #0
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3710      	adds	r7, #16
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014b6c:	6878      	ldr	r0, [r7, #4]
 8014b6e:	f004 fb73 	bl	8019258 <USBD_LL_Start>
 8014b72:	4603      	mov	r3, r0
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	3708      	adds	r7, #8
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}

08014b7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014b7c:	b480      	push	{r7}
 8014b7e:	b083      	sub	sp, #12
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014b84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	370c      	adds	r7, #12
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b90:	4770      	bx	lr

08014b92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b084      	sub	sp, #16
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	6078      	str	r0, [r7, #4]
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d009      	beq.n	8014bc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	78fa      	ldrb	r2, [r7, #3]
 8014bb6:	4611      	mov	r1, r2
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	4798      	blx	r3
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	3710      	adds	r7, #16
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b084      	sub	sp, #16
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014be0:	685b      	ldr	r3, [r3, #4]
 8014be2:	78fa      	ldrb	r2, [r7, #3]
 8014be4:	4611      	mov	r1, r2
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	4798      	blx	r3
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d001      	beq.n	8014bf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014bf0:	2303      	movs	r3, #3
 8014bf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3710      	adds	r7, #16
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}

08014bfe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014bfe:	b580      	push	{r7, lr}
 8014c00:	b084      	sub	sp, #16
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	6078      	str	r0, [r7, #4]
 8014c06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c0e:	6839      	ldr	r1, [r7, #0]
 8014c10:	4618      	mov	r0, r3
 8014c12:	f001 f90e 	bl	8015e32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2201      	movs	r2, #1
 8014c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014c24:	461a      	mov	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014c32:	f003 031f 	and.w	r3, r3, #31
 8014c36:	2b02      	cmp	r3, #2
 8014c38:	d01a      	beq.n	8014c70 <USBD_LL_SetupStage+0x72>
 8014c3a:	2b02      	cmp	r3, #2
 8014c3c:	d822      	bhi.n	8014c84 <USBD_LL_SetupStage+0x86>
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d002      	beq.n	8014c48 <USBD_LL_SetupStage+0x4a>
 8014c42:	2b01      	cmp	r3, #1
 8014c44:	d00a      	beq.n	8014c5c <USBD_LL_SetupStage+0x5e>
 8014c46:	e01d      	b.n	8014c84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c4e:	4619      	mov	r1, r3
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f000 fb65 	bl	8015320 <USBD_StdDevReq>
 8014c56:	4603      	mov	r3, r0
 8014c58:	73fb      	strb	r3, [r7, #15]
      break;
 8014c5a:	e020      	b.n	8014c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c62:	4619      	mov	r1, r3
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 fbcd 	bl	8015404 <USBD_StdItfReq>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8014c6e:	e016      	b.n	8014c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c76:	4619      	mov	r1, r3
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f000 fc2f 	bl	80154dc <USBD_StdEPReq>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	73fb      	strb	r3, [r7, #15]
      break;
 8014c82:	e00c      	b.n	8014c9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014c8e:	b2db      	uxtb	r3, r3
 8014c90:	4619      	mov	r1, r3
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f004 fb40 	bl	8019318 <USBD_LL_StallEP>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8014c9c:	bf00      	nop
  }

  return ret;
 8014c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3710      	adds	r7, #16
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b086      	sub	sp, #24
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	607a      	str	r2, [r7, #4]
 8014cb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014cba:	7afb      	ldrb	r3, [r7, #11]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d16e      	bne.n	8014d9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014cc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014cce:	2b03      	cmp	r3, #3
 8014cd0:	f040 8098 	bne.w	8014e04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	689a      	ldr	r2, [r3, #8]
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	68db      	ldr	r3, [r3, #12]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d913      	bls.n	8014d08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	689a      	ldr	r2, [r3, #8]
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	68db      	ldr	r3, [r3, #12]
 8014ce8:	1ad2      	subs	r2, r2, r3
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	68da      	ldr	r2, [r3, #12]
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	689b      	ldr	r3, [r3, #8]
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	bf28      	it	cs
 8014cfa:	4613      	movcs	r3, r2
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	6879      	ldr	r1, [r7, #4]
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f001 f98a 	bl	801601a <USBD_CtlContinueRx>
 8014d06:	e07d      	b.n	8014e04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014d0e:	f003 031f 	and.w	r3, r3, #31
 8014d12:	2b02      	cmp	r3, #2
 8014d14:	d014      	beq.n	8014d40 <USBD_LL_DataOutStage+0x98>
 8014d16:	2b02      	cmp	r3, #2
 8014d18:	d81d      	bhi.n	8014d56 <USBD_LL_DataOutStage+0xae>
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d002      	beq.n	8014d24 <USBD_LL_DataOutStage+0x7c>
 8014d1e:	2b01      	cmp	r3, #1
 8014d20:	d003      	beq.n	8014d2a <USBD_LL_DataOutStage+0x82>
 8014d22:	e018      	b.n	8014d56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014d24:	2300      	movs	r3, #0
 8014d26:	75bb      	strb	r3, [r7, #22]
            break;
 8014d28:	e018      	b.n	8014d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	4619      	mov	r1, r3
 8014d34:	68f8      	ldr	r0, [r7, #12]
 8014d36:	f000 fa64 	bl	8015202 <USBD_CoreFindIF>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	75bb      	strb	r3, [r7, #22]
            break;
 8014d3e:	e00d      	b.n	8014d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014d46:	b2db      	uxtb	r3, r3
 8014d48:	4619      	mov	r1, r3
 8014d4a:	68f8      	ldr	r0, [r7, #12]
 8014d4c:	f000 fa66 	bl	801521c <USBD_CoreFindEP>
 8014d50:	4603      	mov	r3, r0
 8014d52:	75bb      	strb	r3, [r7, #22]
            break;
 8014d54:	e002      	b.n	8014d5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014d56:	2300      	movs	r3, #0
 8014d58:	75bb      	strb	r3, [r7, #22]
            break;
 8014d5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014d5c:	7dbb      	ldrb	r3, [r7, #22]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d119      	bne.n	8014d96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	2b03      	cmp	r3, #3
 8014d6c:	d113      	bne.n	8014d96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014d6e:	7dba      	ldrb	r2, [r7, #22]
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	32ae      	adds	r2, #174	; 0xae
 8014d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d78:	691b      	ldr	r3, [r3, #16]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d00b      	beq.n	8014d96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014d7e:	7dba      	ldrb	r2, [r7, #22]
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014d86:	7dba      	ldrb	r2, [r7, #22]
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	32ae      	adds	r2, #174	; 0xae
 8014d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d90:	691b      	ldr	r3, [r3, #16]
 8014d92:	68f8      	ldr	r0, [r7, #12]
 8014d94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014d96:	68f8      	ldr	r0, [r7, #12]
 8014d98:	f001 f950 	bl	801603c <USBD_CtlSendStatus>
 8014d9c:	e032      	b.n	8014e04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014d9e:	7afb      	ldrb	r3, [r7, #11]
 8014da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	4619      	mov	r1, r3
 8014da8:	68f8      	ldr	r0, [r7, #12]
 8014daa:	f000 fa37 	bl	801521c <USBD_CoreFindEP>
 8014dae:	4603      	mov	r3, r0
 8014db0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014db2:	7dbb      	ldrb	r3, [r7, #22]
 8014db4:	2bff      	cmp	r3, #255	; 0xff
 8014db6:	d025      	beq.n	8014e04 <USBD_LL_DataOutStage+0x15c>
 8014db8:	7dbb      	ldrb	r3, [r7, #22]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d122      	bne.n	8014e04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dc4:	b2db      	uxtb	r3, r3
 8014dc6:	2b03      	cmp	r3, #3
 8014dc8:	d117      	bne.n	8014dfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014dca:	7dba      	ldrb	r2, [r7, #22]
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	32ae      	adds	r2, #174	; 0xae
 8014dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dd4:	699b      	ldr	r3, [r3, #24]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d00f      	beq.n	8014dfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014dda:	7dba      	ldrb	r2, [r7, #22]
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014de2:	7dba      	ldrb	r2, [r7, #22]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	32ae      	adds	r2, #174	; 0xae
 8014de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dec:	699b      	ldr	r3, [r3, #24]
 8014dee:	7afa      	ldrb	r2, [r7, #11]
 8014df0:	4611      	mov	r1, r2
 8014df2:	68f8      	ldr	r0, [r7, #12]
 8014df4:	4798      	blx	r3
 8014df6:	4603      	mov	r3, r0
 8014df8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014dfa:	7dfb      	ldrb	r3, [r7, #23]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d001      	beq.n	8014e04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014e00:	7dfb      	ldrb	r3, [r7, #23]
 8014e02:	e000      	b.n	8014e06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014e04:	2300      	movs	r3, #0
}
 8014e06:	4618      	mov	r0, r3
 8014e08:	3718      	adds	r7, #24
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}

08014e0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014e0e:	b580      	push	{r7, lr}
 8014e10:	b086      	sub	sp, #24
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	60f8      	str	r0, [r7, #12]
 8014e16:	460b      	mov	r3, r1
 8014e18:	607a      	str	r2, [r7, #4]
 8014e1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014e1c:	7afb      	ldrb	r3, [r7, #11]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d16f      	bne.n	8014f02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	3314      	adds	r3, #20
 8014e26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014e2e:	2b02      	cmp	r3, #2
 8014e30:	d15a      	bne.n	8014ee8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	689a      	ldr	r2, [r3, #8]
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d914      	bls.n	8014e68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	689a      	ldr	r2, [r3, #8]
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	1ad2      	subs	r2, r2, r3
 8014e48:	693b      	ldr	r3, [r7, #16]
 8014e4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	689b      	ldr	r3, [r3, #8]
 8014e50:	461a      	mov	r2, r3
 8014e52:	6879      	ldr	r1, [r7, #4]
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f001 f8b2 	bl	8015fbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	2100      	movs	r1, #0
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	f004 fb03 	bl	801946c <USBD_LL_PrepareReceive>
 8014e66:	e03f      	b.n	8014ee8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	68da      	ldr	r2, [r3, #12]
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	689b      	ldr	r3, [r3, #8]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d11c      	bne.n	8014eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	685a      	ldr	r2, [r3, #4]
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d316      	bcc.n	8014eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	685a      	ldr	r2, [r3, #4]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d20f      	bcs.n	8014eae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014e8e:	2200      	movs	r2, #0
 8014e90:	2100      	movs	r1, #0
 8014e92:	68f8      	ldr	r0, [r7, #12]
 8014e94:	f001 f893 	bl	8015fbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	2100      	movs	r1, #0
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	f004 fae0 	bl	801946c <USBD_LL_PrepareReceive>
 8014eac:	e01c      	b.n	8014ee8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	2b03      	cmp	r3, #3
 8014eb8:	d10f      	bne.n	8014eda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ec0:	68db      	ldr	r3, [r3, #12]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d009      	beq.n	8014eda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ed4:	68db      	ldr	r3, [r3, #12]
 8014ed6:	68f8      	ldr	r0, [r7, #12]
 8014ed8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014eda:	2180      	movs	r1, #128	; 0x80
 8014edc:	68f8      	ldr	r0, [r7, #12]
 8014ede:	f004 fa1b 	bl	8019318 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014ee2:	68f8      	ldr	r0, [r7, #12]
 8014ee4:	f001 f8bd 	bl	8016062 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d03a      	beq.n	8014f68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014ef2:	68f8      	ldr	r0, [r7, #12]
 8014ef4:	f7ff fe42 	bl	8014b7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2200      	movs	r2, #0
 8014efc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014f00:	e032      	b.n	8014f68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014f02:	7afb      	ldrb	r3, [r7, #11]
 8014f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f000 f985 	bl	801521c <USBD_CoreFindEP>
 8014f12:	4603      	mov	r3, r0
 8014f14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f16:	7dfb      	ldrb	r3, [r7, #23]
 8014f18:	2bff      	cmp	r3, #255	; 0xff
 8014f1a:	d025      	beq.n	8014f68 <USBD_LL_DataInStage+0x15a>
 8014f1c:	7dfb      	ldrb	r3, [r7, #23]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d122      	bne.n	8014f68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	2b03      	cmp	r3, #3
 8014f2c:	d11c      	bne.n	8014f68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014f2e:	7dfa      	ldrb	r2, [r7, #23]
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	32ae      	adds	r2, #174	; 0xae
 8014f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f38:	695b      	ldr	r3, [r3, #20]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d014      	beq.n	8014f68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014f3e:	7dfa      	ldrb	r2, [r7, #23]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014f46:	7dfa      	ldrb	r2, [r7, #23]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	32ae      	adds	r2, #174	; 0xae
 8014f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f50:	695b      	ldr	r3, [r3, #20]
 8014f52:	7afa      	ldrb	r2, [r7, #11]
 8014f54:	4611      	mov	r1, r2
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	4798      	blx	r3
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014f5e:	7dbb      	ldrb	r3, [r7, #22]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014f64:	7dbb      	ldrb	r3, [r7, #22]
 8014f66:	e000      	b.n	8014f6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014f68:	2300      	movs	r3, #0
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	3718      	adds	r7, #24
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}

08014f72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014f72:	b580      	push	{r7, lr}
 8014f74:	b084      	sub	sp, #16
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2201      	movs	r2, #1
 8014f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2200      	movs	r2, #0
 8014f92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2200      	movs	r2, #0
 8014f98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d014      	beq.n	8014fd8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d00e      	beq.n	8014fd8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fc0:	685b      	ldr	r3, [r3, #4]
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	6852      	ldr	r2, [r2, #4]
 8014fc6:	b2d2      	uxtb	r2, r2
 8014fc8:	4611      	mov	r1, r2
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	4798      	blx	r3
 8014fce:	4603      	mov	r3, r0
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d001      	beq.n	8014fd8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014fd4:	2303      	movs	r3, #3
 8014fd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014fd8:	2340      	movs	r3, #64	; 0x40
 8014fda:	2200      	movs	r2, #0
 8014fdc:	2100      	movs	r1, #0
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f004 f955 	bl	801928e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2240      	movs	r2, #64	; 0x40
 8014ff0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014ff4:	2340      	movs	r3, #64	; 0x40
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	2180      	movs	r1, #128	; 0x80
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f004 f947 	bl	801928e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2201      	movs	r2, #1
 8015004:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2240      	movs	r2, #64	; 0x40
 801500a:	621a      	str	r2, [r3, #32]

  return ret;
 801500c:	7bfb      	ldrb	r3, [r7, #15]
}
 801500e:	4618      	mov	r0, r3
 8015010:	3710      	adds	r7, #16
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015016:	b480      	push	{r7}
 8015018:	b083      	sub	sp, #12
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
 801501e:	460b      	mov	r3, r1
 8015020:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	78fa      	ldrb	r2, [r7, #3]
 8015026:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015028:	2300      	movs	r3, #0
}
 801502a:	4618      	mov	r0, r3
 801502c:	370c      	adds	r7, #12
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr

08015036 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015036:	b480      	push	{r7}
 8015038:	b083      	sub	sp, #12
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015044:	b2db      	uxtb	r3, r3
 8015046:	2b04      	cmp	r3, #4
 8015048:	d006      	beq.n	8015058 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015050:	b2da      	uxtb	r2, r3
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2204      	movs	r2, #4
 801505c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015060:	2300      	movs	r3, #0
}
 8015062:	4618      	mov	r0, r3
 8015064:	370c      	adds	r7, #12
 8015066:	46bd      	mov	sp, r7
 8015068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506c:	4770      	bx	lr

0801506e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801506e:	b480      	push	{r7}
 8015070:	b083      	sub	sp, #12
 8015072:	af00      	add	r7, sp, #0
 8015074:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801507c:	b2db      	uxtb	r3, r3
 801507e:	2b04      	cmp	r3, #4
 8015080:	d106      	bne.n	8015090 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015088:	b2da      	uxtb	r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015090:	2300      	movs	r3, #0
}
 8015092:	4618      	mov	r0, r3
 8015094:	370c      	adds	r7, #12
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr

0801509e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b082      	sub	sp, #8
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150ac:	b2db      	uxtb	r3, r3
 80150ae:	2b03      	cmp	r3, #3
 80150b0:	d110      	bne.n	80150d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d00b      	beq.n	80150d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150c2:	69db      	ldr	r3, [r3, #28]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d005      	beq.n	80150d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150ce:	69db      	ldr	r3, [r3, #28]
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80150d4:	2300      	movs	r3, #0
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3708      	adds	r7, #8
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b082      	sub	sp, #8
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	460b      	mov	r3, r1
 80150e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	32ae      	adds	r2, #174	; 0xae
 80150f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d101      	bne.n	8015100 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80150fc:	2303      	movs	r3, #3
 80150fe:	e01c      	b.n	801513a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015106:	b2db      	uxtb	r3, r3
 8015108:	2b03      	cmp	r3, #3
 801510a:	d115      	bne.n	8015138 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	32ae      	adds	r2, #174	; 0xae
 8015116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801511a:	6a1b      	ldr	r3, [r3, #32]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d00b      	beq.n	8015138 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	32ae      	adds	r2, #174	; 0xae
 801512a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801512e:	6a1b      	ldr	r3, [r3, #32]
 8015130:	78fa      	ldrb	r2, [r7, #3]
 8015132:	4611      	mov	r1, r2
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015138:	2300      	movs	r3, #0
}
 801513a:	4618      	mov	r0, r3
 801513c:	3708      	adds	r7, #8
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b082      	sub	sp, #8
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
 801514a:	460b      	mov	r3, r1
 801514c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	32ae      	adds	r2, #174	; 0xae
 8015158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d101      	bne.n	8015164 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015160:	2303      	movs	r3, #3
 8015162:	e01c      	b.n	801519e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801516a:	b2db      	uxtb	r3, r3
 801516c:	2b03      	cmp	r3, #3
 801516e:	d115      	bne.n	801519c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	32ae      	adds	r2, #174	; 0xae
 801517a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015180:	2b00      	cmp	r3, #0
 8015182:	d00b      	beq.n	801519c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	32ae      	adds	r2, #174	; 0xae
 801518e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015194:	78fa      	ldrb	r2, [r7, #3]
 8015196:	4611      	mov	r1, r2
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801519c:	2300      	movs	r3, #0
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3708      	adds	r7, #8
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}

080151a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80151a6:	b480      	push	{r7}
 80151a8:	b083      	sub	sp, #12
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80151ae:	2300      	movs	r3, #0
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	370c      	adds	r7, #12
 80151b4:	46bd      	mov	sp, r7
 80151b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ba:	4770      	bx	lr

080151bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80151c4:	2300      	movs	r3, #0
 80151c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2201      	movs	r2, #1
 80151cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00e      	beq.n	80151f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	6852      	ldr	r2, [r2, #4]
 80151e6:	b2d2      	uxtb	r2, r2
 80151e8:	4611      	mov	r1, r2
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	4798      	blx	r3
 80151ee:	4603      	mov	r3, r0
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d001      	beq.n	80151f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80151f4:	2303      	movs	r3, #3
 80151f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80151f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3710      	adds	r7, #16
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}

08015202 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015202:	b480      	push	{r7}
 8015204:	b083      	sub	sp, #12
 8015206:	af00      	add	r7, sp, #0
 8015208:	6078      	str	r0, [r7, #4]
 801520a:	460b      	mov	r3, r1
 801520c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801520e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015210:	4618      	mov	r0, r3
 8015212:	370c      	adds	r7, #12
 8015214:	46bd      	mov	sp, r7
 8015216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521a:	4770      	bx	lr

0801521c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801521c:	b480      	push	{r7}
 801521e:	b083      	sub	sp, #12
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
 8015224:	460b      	mov	r3, r1
 8015226:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015228:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801522a:	4618      	mov	r0, r3
 801522c:	370c      	adds	r7, #12
 801522e:	46bd      	mov	sp, r7
 8015230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015234:	4770      	bx	lr

08015236 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015236:	b580      	push	{r7, lr}
 8015238:	b086      	sub	sp, #24
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
 801523e:	460b      	mov	r3, r1
 8015240:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801524a:	2300      	movs	r3, #0
 801524c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	885b      	ldrh	r3, [r3, #2]
 8015252:	b29a      	uxth	r2, r3
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	b29b      	uxth	r3, r3
 801525a:	429a      	cmp	r2, r3
 801525c:	d920      	bls.n	80152a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	b29b      	uxth	r3, r3
 8015264:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015266:	e013      	b.n	8015290 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015268:	f107 030a 	add.w	r3, r7, #10
 801526c:	4619      	mov	r1, r3
 801526e:	6978      	ldr	r0, [r7, #20]
 8015270:	f000 f81b 	bl	80152aa <USBD_GetNextDesc>
 8015274:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015276:	697b      	ldr	r3, [r7, #20]
 8015278:	785b      	ldrb	r3, [r3, #1]
 801527a:	2b05      	cmp	r3, #5
 801527c:	d108      	bne.n	8015290 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015282:	693b      	ldr	r3, [r7, #16]
 8015284:	789b      	ldrb	r3, [r3, #2]
 8015286:	78fa      	ldrb	r2, [r7, #3]
 8015288:	429a      	cmp	r2, r3
 801528a:	d008      	beq.n	801529e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801528c:	2300      	movs	r3, #0
 801528e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	885b      	ldrh	r3, [r3, #2]
 8015294:	b29a      	uxth	r2, r3
 8015296:	897b      	ldrh	r3, [r7, #10]
 8015298:	429a      	cmp	r2, r3
 801529a:	d8e5      	bhi.n	8015268 <USBD_GetEpDesc+0x32>
 801529c:	e000      	b.n	80152a0 <USBD_GetEpDesc+0x6a>
          break;
 801529e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80152a0:	693b      	ldr	r3, [r7, #16]
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3718      	adds	r7, #24
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}

080152aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80152aa:	b480      	push	{r7}
 80152ac:	b085      	sub	sp, #20
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	881a      	ldrh	r2, [r3, #0]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	b29b      	uxth	r3, r3
 80152c2:	4413      	add	r3, r2
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	461a      	mov	r2, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4413      	add	r3, r2
 80152d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80152d6:	68fb      	ldr	r3, [r7, #12]
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3714      	adds	r7, #20
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b087      	sub	sp, #28
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	781b      	ldrb	r3, [r3, #0]
 80152f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	3301      	adds	r3, #1
 80152fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015302:	8a3b      	ldrh	r3, [r7, #16]
 8015304:	021b      	lsls	r3, r3, #8
 8015306:	b21a      	sxth	r2, r3
 8015308:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801530c:	4313      	orrs	r3, r2
 801530e:	b21b      	sxth	r3, r3
 8015310:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015312:	89fb      	ldrh	r3, [r7, #14]
}
 8015314:	4618      	mov	r0, r3
 8015316:	371c      	adds	r7, #28
 8015318:	46bd      	mov	sp, r7
 801531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531e:	4770      	bx	lr

08015320 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801532a:	2300      	movs	r3, #0
 801532c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015336:	2b40      	cmp	r3, #64	; 0x40
 8015338:	d005      	beq.n	8015346 <USBD_StdDevReq+0x26>
 801533a:	2b40      	cmp	r3, #64	; 0x40
 801533c:	d857      	bhi.n	80153ee <USBD_StdDevReq+0xce>
 801533e:	2b00      	cmp	r3, #0
 8015340:	d00f      	beq.n	8015362 <USBD_StdDevReq+0x42>
 8015342:	2b20      	cmp	r3, #32
 8015344:	d153      	bne.n	80153ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	32ae      	adds	r2, #174	; 0xae
 8015350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015354:	689b      	ldr	r3, [r3, #8]
 8015356:	6839      	ldr	r1, [r7, #0]
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	4798      	blx	r3
 801535c:	4603      	mov	r3, r0
 801535e:	73fb      	strb	r3, [r7, #15]
      break;
 8015360:	e04a      	b.n	80153f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	785b      	ldrb	r3, [r3, #1]
 8015366:	2b09      	cmp	r3, #9
 8015368:	d83b      	bhi.n	80153e2 <USBD_StdDevReq+0xc2>
 801536a:	a201      	add	r2, pc, #4	; (adr r2, 8015370 <USBD_StdDevReq+0x50>)
 801536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015370:	080153c5 	.word	0x080153c5
 8015374:	080153d9 	.word	0x080153d9
 8015378:	080153e3 	.word	0x080153e3
 801537c:	080153cf 	.word	0x080153cf
 8015380:	080153e3 	.word	0x080153e3
 8015384:	080153a3 	.word	0x080153a3
 8015388:	08015399 	.word	0x08015399
 801538c:	080153e3 	.word	0x080153e3
 8015390:	080153bb 	.word	0x080153bb
 8015394:	080153ad 	.word	0x080153ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015398:	6839      	ldr	r1, [r7, #0]
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 fa3c 	bl	8015818 <USBD_GetDescriptor>
          break;
 80153a0:	e024      	b.n	80153ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80153a2:	6839      	ldr	r1, [r7, #0]
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f000 fba1 	bl	8015aec <USBD_SetAddress>
          break;
 80153aa:	e01f      	b.n	80153ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80153ac:	6839      	ldr	r1, [r7, #0]
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f000 fbe0 	bl	8015b74 <USBD_SetConfig>
 80153b4:	4603      	mov	r3, r0
 80153b6:	73fb      	strb	r3, [r7, #15]
          break;
 80153b8:	e018      	b.n	80153ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80153ba:	6839      	ldr	r1, [r7, #0]
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f000 fc83 	bl	8015cc8 <USBD_GetConfig>
          break;
 80153c2:	e013      	b.n	80153ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80153c4:	6839      	ldr	r1, [r7, #0]
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 fcb4 	bl	8015d34 <USBD_GetStatus>
          break;
 80153cc:	e00e      	b.n	80153ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80153ce:	6839      	ldr	r1, [r7, #0]
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f000 fce3 	bl	8015d9c <USBD_SetFeature>
          break;
 80153d6:	e009      	b.n	80153ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80153d8:	6839      	ldr	r1, [r7, #0]
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 fd07 	bl	8015dee <USBD_ClrFeature>
          break;
 80153e0:	e004      	b.n	80153ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80153e2:	6839      	ldr	r1, [r7, #0]
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f000 fd5e 	bl	8015ea6 <USBD_CtlError>
          break;
 80153ea:	bf00      	nop
      }
      break;
 80153ec:	e004      	b.n	80153f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80153ee:	6839      	ldr	r1, [r7, #0]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f000 fd58 	bl	8015ea6 <USBD_CtlError>
      break;
 80153f6:	bf00      	nop
  }

  return ret;
 80153f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80153fa:	4618      	mov	r0, r3
 80153fc:	3710      	adds	r7, #16
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}
 8015402:	bf00      	nop

08015404 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b084      	sub	sp, #16
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801540e:	2300      	movs	r3, #0
 8015410:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801541a:	2b40      	cmp	r3, #64	; 0x40
 801541c:	d005      	beq.n	801542a <USBD_StdItfReq+0x26>
 801541e:	2b40      	cmp	r3, #64	; 0x40
 8015420:	d852      	bhi.n	80154c8 <USBD_StdItfReq+0xc4>
 8015422:	2b00      	cmp	r3, #0
 8015424:	d001      	beq.n	801542a <USBD_StdItfReq+0x26>
 8015426:	2b20      	cmp	r3, #32
 8015428:	d14e      	bne.n	80154c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015430:	b2db      	uxtb	r3, r3
 8015432:	3b01      	subs	r3, #1
 8015434:	2b02      	cmp	r3, #2
 8015436:	d840      	bhi.n	80154ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	889b      	ldrh	r3, [r3, #4]
 801543c:	b2db      	uxtb	r3, r3
 801543e:	2b01      	cmp	r3, #1
 8015440:	d836      	bhi.n	80154b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	889b      	ldrh	r3, [r3, #4]
 8015446:	b2db      	uxtb	r3, r3
 8015448:	4619      	mov	r1, r3
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f7ff fed9 	bl	8015202 <USBD_CoreFindIF>
 8015450:	4603      	mov	r3, r0
 8015452:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015454:	7bbb      	ldrb	r3, [r7, #14]
 8015456:	2bff      	cmp	r3, #255	; 0xff
 8015458:	d01d      	beq.n	8015496 <USBD_StdItfReq+0x92>
 801545a:	7bbb      	ldrb	r3, [r7, #14]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d11a      	bne.n	8015496 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015460:	7bba      	ldrb	r2, [r7, #14]
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	32ae      	adds	r2, #174	; 0xae
 8015466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801546a:	689b      	ldr	r3, [r3, #8]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d00f      	beq.n	8015490 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015470:	7bba      	ldrb	r2, [r7, #14]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015478:	7bba      	ldrb	r2, [r7, #14]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	32ae      	adds	r2, #174	; 0xae
 801547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015482:	689b      	ldr	r3, [r3, #8]
 8015484:	6839      	ldr	r1, [r7, #0]
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	4798      	blx	r3
 801548a:	4603      	mov	r3, r0
 801548c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801548e:	e004      	b.n	801549a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015490:	2303      	movs	r3, #3
 8015492:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015494:	e001      	b.n	801549a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015496:	2303      	movs	r3, #3
 8015498:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	88db      	ldrh	r3, [r3, #6]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d110      	bne.n	80154c4 <USBD_StdItfReq+0xc0>
 80154a2:	7bfb      	ldrb	r3, [r7, #15]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10d      	bne.n	80154c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f000 fdc7 	bl	801603c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80154ae:	e009      	b.n	80154c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80154b0:	6839      	ldr	r1, [r7, #0]
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f000 fcf7 	bl	8015ea6 <USBD_CtlError>
          break;
 80154b8:	e004      	b.n	80154c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80154ba:	6839      	ldr	r1, [r7, #0]
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f000 fcf2 	bl	8015ea6 <USBD_CtlError>
          break;
 80154c2:	e000      	b.n	80154c6 <USBD_StdItfReq+0xc2>
          break;
 80154c4:	bf00      	nop
      }
      break;
 80154c6:	e004      	b.n	80154d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80154c8:	6839      	ldr	r1, [r7, #0]
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 fceb 	bl	8015ea6 <USBD_CtlError>
      break;
 80154d0:	bf00      	nop
  }

  return ret;
 80154d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3710      	adds	r7, #16
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}

080154dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80154e6:	2300      	movs	r3, #0
 80154e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	889b      	ldrh	r3, [r3, #4]
 80154ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80154f8:	2b40      	cmp	r3, #64	; 0x40
 80154fa:	d007      	beq.n	801550c <USBD_StdEPReq+0x30>
 80154fc:	2b40      	cmp	r3, #64	; 0x40
 80154fe:	f200 817f 	bhi.w	8015800 <USBD_StdEPReq+0x324>
 8015502:	2b00      	cmp	r3, #0
 8015504:	d02a      	beq.n	801555c <USBD_StdEPReq+0x80>
 8015506:	2b20      	cmp	r3, #32
 8015508:	f040 817a 	bne.w	8015800 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801550c:	7bbb      	ldrb	r3, [r7, #14]
 801550e:	4619      	mov	r1, r3
 8015510:	6878      	ldr	r0, [r7, #4]
 8015512:	f7ff fe83 	bl	801521c <USBD_CoreFindEP>
 8015516:	4603      	mov	r3, r0
 8015518:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801551a:	7b7b      	ldrb	r3, [r7, #13]
 801551c:	2bff      	cmp	r3, #255	; 0xff
 801551e:	f000 8174 	beq.w	801580a <USBD_StdEPReq+0x32e>
 8015522:	7b7b      	ldrb	r3, [r7, #13]
 8015524:	2b00      	cmp	r3, #0
 8015526:	f040 8170 	bne.w	801580a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801552a:	7b7a      	ldrb	r2, [r7, #13]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015532:	7b7a      	ldrb	r2, [r7, #13]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	32ae      	adds	r2, #174	; 0xae
 8015538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801553c:	689b      	ldr	r3, [r3, #8]
 801553e:	2b00      	cmp	r3, #0
 8015540:	f000 8163 	beq.w	801580a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015544:	7b7a      	ldrb	r2, [r7, #13]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	32ae      	adds	r2, #174	; 0xae
 801554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801554e:	689b      	ldr	r3, [r3, #8]
 8015550:	6839      	ldr	r1, [r7, #0]
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	4798      	blx	r3
 8015556:	4603      	mov	r3, r0
 8015558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801555a:	e156      	b.n	801580a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	785b      	ldrb	r3, [r3, #1]
 8015560:	2b03      	cmp	r3, #3
 8015562:	d008      	beq.n	8015576 <USBD_StdEPReq+0x9a>
 8015564:	2b03      	cmp	r3, #3
 8015566:	f300 8145 	bgt.w	80157f4 <USBD_StdEPReq+0x318>
 801556a:	2b00      	cmp	r3, #0
 801556c:	f000 809b 	beq.w	80156a6 <USBD_StdEPReq+0x1ca>
 8015570:	2b01      	cmp	r3, #1
 8015572:	d03c      	beq.n	80155ee <USBD_StdEPReq+0x112>
 8015574:	e13e      	b.n	80157f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801557c:	b2db      	uxtb	r3, r3
 801557e:	2b02      	cmp	r3, #2
 8015580:	d002      	beq.n	8015588 <USBD_StdEPReq+0xac>
 8015582:	2b03      	cmp	r3, #3
 8015584:	d016      	beq.n	80155b4 <USBD_StdEPReq+0xd8>
 8015586:	e02c      	b.n	80155e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015588:	7bbb      	ldrb	r3, [r7, #14]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d00d      	beq.n	80155aa <USBD_StdEPReq+0xce>
 801558e:	7bbb      	ldrb	r3, [r7, #14]
 8015590:	2b80      	cmp	r3, #128	; 0x80
 8015592:	d00a      	beq.n	80155aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015594:	7bbb      	ldrb	r3, [r7, #14]
 8015596:	4619      	mov	r1, r3
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f003 febd 	bl	8019318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801559e:	2180      	movs	r1, #128	; 0x80
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f003 feb9 	bl	8019318 <USBD_LL_StallEP>
 80155a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80155a8:	e020      	b.n	80155ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80155aa:	6839      	ldr	r1, [r7, #0]
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f000 fc7a 	bl	8015ea6 <USBD_CtlError>
              break;
 80155b2:	e01b      	b.n	80155ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	885b      	ldrh	r3, [r3, #2]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d10e      	bne.n	80155da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80155bc:	7bbb      	ldrb	r3, [r7, #14]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d00b      	beq.n	80155da <USBD_StdEPReq+0xfe>
 80155c2:	7bbb      	ldrb	r3, [r7, #14]
 80155c4:	2b80      	cmp	r3, #128	; 0x80
 80155c6:	d008      	beq.n	80155da <USBD_StdEPReq+0xfe>
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	88db      	ldrh	r3, [r3, #6]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d104      	bne.n	80155da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80155d0:	7bbb      	ldrb	r3, [r7, #14]
 80155d2:	4619      	mov	r1, r3
 80155d4:	6878      	ldr	r0, [r7, #4]
 80155d6:	f003 fe9f 	bl	8019318 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f000 fd2e 	bl	801603c <USBD_CtlSendStatus>

              break;
 80155e0:	e004      	b.n	80155ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80155e2:	6839      	ldr	r1, [r7, #0]
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f000 fc5e 	bl	8015ea6 <USBD_CtlError>
              break;
 80155ea:	bf00      	nop
          }
          break;
 80155ec:	e107      	b.n	80157fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155f4:	b2db      	uxtb	r3, r3
 80155f6:	2b02      	cmp	r3, #2
 80155f8:	d002      	beq.n	8015600 <USBD_StdEPReq+0x124>
 80155fa:	2b03      	cmp	r3, #3
 80155fc:	d016      	beq.n	801562c <USBD_StdEPReq+0x150>
 80155fe:	e04b      	b.n	8015698 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015600:	7bbb      	ldrb	r3, [r7, #14]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d00d      	beq.n	8015622 <USBD_StdEPReq+0x146>
 8015606:	7bbb      	ldrb	r3, [r7, #14]
 8015608:	2b80      	cmp	r3, #128	; 0x80
 801560a:	d00a      	beq.n	8015622 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801560c:	7bbb      	ldrb	r3, [r7, #14]
 801560e:	4619      	mov	r1, r3
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f003 fe81 	bl	8019318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015616:	2180      	movs	r1, #128	; 0x80
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f003 fe7d 	bl	8019318 <USBD_LL_StallEP>
 801561e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015620:	e040      	b.n	80156a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015622:	6839      	ldr	r1, [r7, #0]
 8015624:	6878      	ldr	r0, [r7, #4]
 8015626:	f000 fc3e 	bl	8015ea6 <USBD_CtlError>
              break;
 801562a:	e03b      	b.n	80156a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	885b      	ldrh	r3, [r3, #2]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d136      	bne.n	80156a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015634:	7bbb      	ldrb	r3, [r7, #14]
 8015636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801563a:	2b00      	cmp	r3, #0
 801563c:	d004      	beq.n	8015648 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801563e:	7bbb      	ldrb	r3, [r7, #14]
 8015640:	4619      	mov	r1, r3
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f003 fe87 	bl	8019356 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f000 fcf7 	bl	801603c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801564e:	7bbb      	ldrb	r3, [r7, #14]
 8015650:	4619      	mov	r1, r3
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f7ff fde2 	bl	801521c <USBD_CoreFindEP>
 8015658:	4603      	mov	r3, r0
 801565a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801565c:	7b7b      	ldrb	r3, [r7, #13]
 801565e:	2bff      	cmp	r3, #255	; 0xff
 8015660:	d01f      	beq.n	80156a2 <USBD_StdEPReq+0x1c6>
 8015662:	7b7b      	ldrb	r3, [r7, #13]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d11c      	bne.n	80156a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015668:	7b7a      	ldrb	r2, [r7, #13]
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015670:	7b7a      	ldrb	r2, [r7, #13]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	32ae      	adds	r2, #174	; 0xae
 8015676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567a:	689b      	ldr	r3, [r3, #8]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d010      	beq.n	80156a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015680:	7b7a      	ldrb	r2, [r7, #13]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	32ae      	adds	r2, #174	; 0xae
 8015686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801568a:	689b      	ldr	r3, [r3, #8]
 801568c:	6839      	ldr	r1, [r7, #0]
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	4798      	blx	r3
 8015692:	4603      	mov	r3, r0
 8015694:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015696:	e004      	b.n	80156a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015698:	6839      	ldr	r1, [r7, #0]
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 fc03 	bl	8015ea6 <USBD_CtlError>
              break;
 80156a0:	e000      	b.n	80156a4 <USBD_StdEPReq+0x1c8>
              break;
 80156a2:	bf00      	nop
          }
          break;
 80156a4:	e0ab      	b.n	80157fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156ac:	b2db      	uxtb	r3, r3
 80156ae:	2b02      	cmp	r3, #2
 80156b0:	d002      	beq.n	80156b8 <USBD_StdEPReq+0x1dc>
 80156b2:	2b03      	cmp	r3, #3
 80156b4:	d032      	beq.n	801571c <USBD_StdEPReq+0x240>
 80156b6:	e097      	b.n	80157e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156b8:	7bbb      	ldrb	r3, [r7, #14]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d007      	beq.n	80156ce <USBD_StdEPReq+0x1f2>
 80156be:	7bbb      	ldrb	r3, [r7, #14]
 80156c0:	2b80      	cmp	r3, #128	; 0x80
 80156c2:	d004      	beq.n	80156ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80156c4:	6839      	ldr	r1, [r7, #0]
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f000 fbed 	bl	8015ea6 <USBD_CtlError>
                break;
 80156cc:	e091      	b.n	80157f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	da0b      	bge.n	80156ee <USBD_StdEPReq+0x212>
 80156d6:	7bbb      	ldrb	r3, [r7, #14]
 80156d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80156dc:	4613      	mov	r3, r2
 80156de:	009b      	lsls	r3, r3, #2
 80156e0:	4413      	add	r3, r2
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	3310      	adds	r3, #16
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	4413      	add	r3, r2
 80156ea:	3304      	adds	r3, #4
 80156ec:	e00b      	b.n	8015706 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80156ee:	7bbb      	ldrb	r3, [r7, #14]
 80156f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156f4:	4613      	mov	r3, r2
 80156f6:	009b      	lsls	r3, r3, #2
 80156f8:	4413      	add	r3, r2
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015700:	687a      	ldr	r2, [r7, #4]
 8015702:	4413      	add	r3, r2
 8015704:	3304      	adds	r3, #4
 8015706:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	2200      	movs	r2, #0
 801570c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	2202      	movs	r2, #2
 8015712:	4619      	mov	r1, r3
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f000 fc37 	bl	8015f88 <USBD_CtlSendData>
              break;
 801571a:	e06a      	b.n	80157f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801571c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015720:	2b00      	cmp	r3, #0
 8015722:	da11      	bge.n	8015748 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015724:	7bbb      	ldrb	r3, [r7, #14]
 8015726:	f003 020f 	and.w	r2, r3, #15
 801572a:	6879      	ldr	r1, [r7, #4]
 801572c:	4613      	mov	r3, r2
 801572e:	009b      	lsls	r3, r3, #2
 8015730:	4413      	add	r3, r2
 8015732:	009b      	lsls	r3, r3, #2
 8015734:	440b      	add	r3, r1
 8015736:	3324      	adds	r3, #36	; 0x24
 8015738:	881b      	ldrh	r3, [r3, #0]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d117      	bne.n	801576e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801573e:	6839      	ldr	r1, [r7, #0]
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fbb0 	bl	8015ea6 <USBD_CtlError>
                  break;
 8015746:	e054      	b.n	80157f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015748:	7bbb      	ldrb	r3, [r7, #14]
 801574a:	f003 020f 	and.w	r2, r3, #15
 801574e:	6879      	ldr	r1, [r7, #4]
 8015750:	4613      	mov	r3, r2
 8015752:	009b      	lsls	r3, r3, #2
 8015754:	4413      	add	r3, r2
 8015756:	009b      	lsls	r3, r3, #2
 8015758:	440b      	add	r3, r1
 801575a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801575e:	881b      	ldrh	r3, [r3, #0]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d104      	bne.n	801576e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015764:	6839      	ldr	r1, [r7, #0]
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f000 fb9d 	bl	8015ea6 <USBD_CtlError>
                  break;
 801576c:	e041      	b.n	80157f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801576e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015772:	2b00      	cmp	r3, #0
 8015774:	da0b      	bge.n	801578e <USBD_StdEPReq+0x2b2>
 8015776:	7bbb      	ldrb	r3, [r7, #14]
 8015778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801577c:	4613      	mov	r3, r2
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	4413      	add	r3, r2
 8015782:	009b      	lsls	r3, r3, #2
 8015784:	3310      	adds	r3, #16
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	4413      	add	r3, r2
 801578a:	3304      	adds	r3, #4
 801578c:	e00b      	b.n	80157a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801578e:	7bbb      	ldrb	r3, [r7, #14]
 8015790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015794:	4613      	mov	r3, r2
 8015796:	009b      	lsls	r3, r3, #2
 8015798:	4413      	add	r3, r2
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80157a0:	687a      	ldr	r2, [r7, #4]
 80157a2:	4413      	add	r3, r2
 80157a4:	3304      	adds	r3, #4
 80157a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80157a8:	7bbb      	ldrb	r3, [r7, #14]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d002      	beq.n	80157b4 <USBD_StdEPReq+0x2d8>
 80157ae:	7bbb      	ldrb	r3, [r7, #14]
 80157b0:	2b80      	cmp	r3, #128	; 0x80
 80157b2:	d103      	bne.n	80157bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	2200      	movs	r2, #0
 80157b8:	601a      	str	r2, [r3, #0]
 80157ba:	e00e      	b.n	80157da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80157bc:	7bbb      	ldrb	r3, [r7, #14]
 80157be:	4619      	mov	r1, r3
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f003 fde7 	bl	8019394 <USBD_LL_IsStallEP>
 80157c6:	4603      	mov	r3, r0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d003      	beq.n	80157d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	2201      	movs	r2, #1
 80157d0:	601a      	str	r2, [r3, #0]
 80157d2:	e002      	b.n	80157da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	2200      	movs	r2, #0
 80157d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	2202      	movs	r2, #2
 80157de:	4619      	mov	r1, r3
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f000 fbd1 	bl	8015f88 <USBD_CtlSendData>
              break;
 80157e6:	e004      	b.n	80157f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 fb5b 	bl	8015ea6 <USBD_CtlError>
              break;
 80157f0:	bf00      	nop
          }
          break;
 80157f2:	e004      	b.n	80157fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80157f4:	6839      	ldr	r1, [r7, #0]
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f000 fb55 	bl	8015ea6 <USBD_CtlError>
          break;
 80157fc:	bf00      	nop
      }
      break;
 80157fe:	e005      	b.n	801580c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015800:	6839      	ldr	r1, [r7, #0]
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 fb4f 	bl	8015ea6 <USBD_CtlError>
      break;
 8015808:	e000      	b.n	801580c <USBD_StdEPReq+0x330>
      break;
 801580a:	bf00      	nop
  }

  return ret;
 801580c:	7bfb      	ldrb	r3, [r7, #15]
}
 801580e:	4618      	mov	r0, r3
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
	...

08015818 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b084      	sub	sp, #16
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015822:	2300      	movs	r3, #0
 8015824:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015826:	2300      	movs	r3, #0
 8015828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801582a:	2300      	movs	r3, #0
 801582c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	885b      	ldrh	r3, [r3, #2]
 8015832:	0a1b      	lsrs	r3, r3, #8
 8015834:	b29b      	uxth	r3, r3
 8015836:	3b01      	subs	r3, #1
 8015838:	2b06      	cmp	r3, #6
 801583a:	f200 8128 	bhi.w	8015a8e <USBD_GetDescriptor+0x276>
 801583e:	a201      	add	r2, pc, #4	; (adr r2, 8015844 <USBD_GetDescriptor+0x2c>)
 8015840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015844:	08015861 	.word	0x08015861
 8015848:	08015879 	.word	0x08015879
 801584c:	080158b9 	.word	0x080158b9
 8015850:	08015a8f 	.word	0x08015a8f
 8015854:	08015a8f 	.word	0x08015a8f
 8015858:	08015a2f 	.word	0x08015a2f
 801585c:	08015a5b 	.word	0x08015a5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	7c12      	ldrb	r2, [r2, #16]
 801586c:	f107 0108 	add.w	r1, r7, #8
 8015870:	4610      	mov	r0, r2
 8015872:	4798      	blx	r3
 8015874:	60f8      	str	r0, [r7, #12]
      break;
 8015876:	e112      	b.n	8015a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	7c1b      	ldrb	r3, [r3, #16]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d10d      	bne.n	801589c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015888:	f107 0208 	add.w	r2, r7, #8
 801588c:	4610      	mov	r0, r2
 801588e:	4798      	blx	r3
 8015890:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	3301      	adds	r3, #1
 8015896:	2202      	movs	r2, #2
 8015898:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801589a:	e100      	b.n	8015a9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158a4:	f107 0208 	add.w	r2, r7, #8
 80158a8:	4610      	mov	r0, r2
 80158aa:	4798      	blx	r3
 80158ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	3301      	adds	r3, #1
 80158b2:	2202      	movs	r2, #2
 80158b4:	701a      	strb	r2, [r3, #0]
      break;
 80158b6:	e0f2      	b.n	8015a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	885b      	ldrh	r3, [r3, #2]
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	2b05      	cmp	r3, #5
 80158c0:	f200 80ac 	bhi.w	8015a1c <USBD_GetDescriptor+0x204>
 80158c4:	a201      	add	r2, pc, #4	; (adr r2, 80158cc <USBD_GetDescriptor+0xb4>)
 80158c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158ca:	bf00      	nop
 80158cc:	080158e5 	.word	0x080158e5
 80158d0:	08015919 	.word	0x08015919
 80158d4:	0801594d 	.word	0x0801594d
 80158d8:	08015981 	.word	0x08015981
 80158dc:	080159b5 	.word	0x080159b5
 80158e0:	080159e9 	.word	0x080159e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158ea:	685b      	ldr	r3, [r3, #4]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d00b      	beq.n	8015908 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158f6:	685b      	ldr	r3, [r3, #4]
 80158f8:	687a      	ldr	r2, [r7, #4]
 80158fa:	7c12      	ldrb	r2, [r2, #16]
 80158fc:	f107 0108 	add.w	r1, r7, #8
 8015900:	4610      	mov	r0, r2
 8015902:	4798      	blx	r3
 8015904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015906:	e091      	b.n	8015a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015908:	6839      	ldr	r1, [r7, #0]
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f000 facb 	bl	8015ea6 <USBD_CtlError>
            err++;
 8015910:	7afb      	ldrb	r3, [r7, #11]
 8015912:	3301      	adds	r3, #1
 8015914:	72fb      	strb	r3, [r7, #11]
          break;
 8015916:	e089      	b.n	8015a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801591e:	689b      	ldr	r3, [r3, #8]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d00b      	beq.n	801593c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801592a:	689b      	ldr	r3, [r3, #8]
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	7c12      	ldrb	r2, [r2, #16]
 8015930:	f107 0108 	add.w	r1, r7, #8
 8015934:	4610      	mov	r0, r2
 8015936:	4798      	blx	r3
 8015938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801593a:	e077      	b.n	8015a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801593c:	6839      	ldr	r1, [r7, #0]
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f000 fab1 	bl	8015ea6 <USBD_CtlError>
            err++;
 8015944:	7afb      	ldrb	r3, [r7, #11]
 8015946:	3301      	adds	r3, #1
 8015948:	72fb      	strb	r3, [r7, #11]
          break;
 801594a:	e06f      	b.n	8015a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015952:	68db      	ldr	r3, [r3, #12]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d00b      	beq.n	8015970 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801595e:	68db      	ldr	r3, [r3, #12]
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	7c12      	ldrb	r2, [r2, #16]
 8015964:	f107 0108 	add.w	r1, r7, #8
 8015968:	4610      	mov	r0, r2
 801596a:	4798      	blx	r3
 801596c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801596e:	e05d      	b.n	8015a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015970:	6839      	ldr	r1, [r7, #0]
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f000 fa97 	bl	8015ea6 <USBD_CtlError>
            err++;
 8015978:	7afb      	ldrb	r3, [r7, #11]
 801597a:	3301      	adds	r3, #1
 801597c:	72fb      	strb	r3, [r7, #11]
          break;
 801597e:	e055      	b.n	8015a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015986:	691b      	ldr	r3, [r3, #16]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d00b      	beq.n	80159a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015992:	691b      	ldr	r3, [r3, #16]
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	7c12      	ldrb	r2, [r2, #16]
 8015998:	f107 0108 	add.w	r1, r7, #8
 801599c:	4610      	mov	r0, r2
 801599e:	4798      	blx	r3
 80159a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159a2:	e043      	b.n	8015a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80159a4:	6839      	ldr	r1, [r7, #0]
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f000 fa7d 	bl	8015ea6 <USBD_CtlError>
            err++;
 80159ac:	7afb      	ldrb	r3, [r7, #11]
 80159ae:	3301      	adds	r3, #1
 80159b0:	72fb      	strb	r3, [r7, #11]
          break;
 80159b2:	e03b      	b.n	8015a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ba:	695b      	ldr	r3, [r3, #20]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d00b      	beq.n	80159d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159c6:	695b      	ldr	r3, [r3, #20]
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	7c12      	ldrb	r2, [r2, #16]
 80159cc:	f107 0108 	add.w	r1, r7, #8
 80159d0:	4610      	mov	r0, r2
 80159d2:	4798      	blx	r3
 80159d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159d6:	e029      	b.n	8015a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80159d8:	6839      	ldr	r1, [r7, #0]
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f000 fa63 	bl	8015ea6 <USBD_CtlError>
            err++;
 80159e0:	7afb      	ldrb	r3, [r7, #11]
 80159e2:	3301      	adds	r3, #1
 80159e4:	72fb      	strb	r3, [r7, #11]
          break;
 80159e6:	e021      	b.n	8015a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ee:	699b      	ldr	r3, [r3, #24]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d00b      	beq.n	8015a0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159fa:	699b      	ldr	r3, [r3, #24]
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	7c12      	ldrb	r2, [r2, #16]
 8015a00:	f107 0108 	add.w	r1, r7, #8
 8015a04:	4610      	mov	r0, r2
 8015a06:	4798      	blx	r3
 8015a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a0a:	e00f      	b.n	8015a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a0c:	6839      	ldr	r1, [r7, #0]
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f000 fa49 	bl	8015ea6 <USBD_CtlError>
            err++;
 8015a14:	7afb      	ldrb	r3, [r7, #11]
 8015a16:	3301      	adds	r3, #1
 8015a18:	72fb      	strb	r3, [r7, #11]
          break;
 8015a1a:	e007      	b.n	8015a2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015a1c:	6839      	ldr	r1, [r7, #0]
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f000 fa41 	bl	8015ea6 <USBD_CtlError>
          err++;
 8015a24:	7afb      	ldrb	r3, [r7, #11]
 8015a26:	3301      	adds	r3, #1
 8015a28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015a2a:	bf00      	nop
      }
      break;
 8015a2c:	e037      	b.n	8015a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	7c1b      	ldrb	r3, [r3, #16]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d109      	bne.n	8015a4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a3e:	f107 0208 	add.w	r2, r7, #8
 8015a42:	4610      	mov	r0, r2
 8015a44:	4798      	blx	r3
 8015a46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a48:	e029      	b.n	8015a9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015a4a:	6839      	ldr	r1, [r7, #0]
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f000 fa2a 	bl	8015ea6 <USBD_CtlError>
        err++;
 8015a52:	7afb      	ldrb	r3, [r7, #11]
 8015a54:	3301      	adds	r3, #1
 8015a56:	72fb      	strb	r3, [r7, #11]
      break;
 8015a58:	e021      	b.n	8015a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	7c1b      	ldrb	r3, [r3, #16]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d10d      	bne.n	8015a7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a6a:	f107 0208 	add.w	r2, r7, #8
 8015a6e:	4610      	mov	r0, r2
 8015a70:	4798      	blx	r3
 8015a72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	3301      	adds	r3, #1
 8015a78:	2207      	movs	r2, #7
 8015a7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a7c:	e00f      	b.n	8015a9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015a7e:	6839      	ldr	r1, [r7, #0]
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 fa10 	bl	8015ea6 <USBD_CtlError>
        err++;
 8015a86:	7afb      	ldrb	r3, [r7, #11]
 8015a88:	3301      	adds	r3, #1
 8015a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8015a8c:	e007      	b.n	8015a9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015a8e:	6839      	ldr	r1, [r7, #0]
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 fa08 	bl	8015ea6 <USBD_CtlError>
      err++;
 8015a96:	7afb      	ldrb	r3, [r7, #11]
 8015a98:	3301      	adds	r3, #1
 8015a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8015a9c:	bf00      	nop
  }

  if (err != 0U)
 8015a9e:	7afb      	ldrb	r3, [r7, #11]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d11e      	bne.n	8015ae2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	88db      	ldrh	r3, [r3, #6]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d016      	beq.n	8015ada <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015aac:	893b      	ldrh	r3, [r7, #8]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d00e      	beq.n	8015ad0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	88da      	ldrh	r2, [r3, #6]
 8015ab6:	893b      	ldrh	r3, [r7, #8]
 8015ab8:	4293      	cmp	r3, r2
 8015aba:	bf28      	it	cs
 8015abc:	4613      	movcs	r3, r2
 8015abe:	b29b      	uxth	r3, r3
 8015ac0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ac2:	893b      	ldrh	r3, [r7, #8]
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	68f9      	ldr	r1, [r7, #12]
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f000 fa5d 	bl	8015f88 <USBD_CtlSendData>
 8015ace:	e009      	b.n	8015ae4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015ad0:	6839      	ldr	r1, [r7, #0]
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	f000 f9e7 	bl	8015ea6 <USBD_CtlError>
 8015ad8:	e004      	b.n	8015ae4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	f000 faae 	bl	801603c <USBD_CtlSendStatus>
 8015ae0:	e000      	b.n	8015ae4 <USBD_GetDescriptor+0x2cc>
    return;
 8015ae2:	bf00      	nop
  }
}
 8015ae4:	3710      	adds	r7, #16
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	bf00      	nop

08015aec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	889b      	ldrh	r3, [r3, #4]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d131      	bne.n	8015b62 <USBD_SetAddress+0x76>
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	88db      	ldrh	r3, [r3, #6]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d12d      	bne.n	8015b62 <USBD_SetAddress+0x76>
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	885b      	ldrh	r3, [r3, #2]
 8015b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8015b0c:	d829      	bhi.n	8015b62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	885b      	ldrh	r3, [r3, #2]
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b20:	b2db      	uxtb	r3, r3
 8015b22:	2b03      	cmp	r3, #3
 8015b24:	d104      	bne.n	8015b30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015b26:	6839      	ldr	r1, [r7, #0]
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	f000 f9bc 	bl	8015ea6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b2e:	e01d      	b.n	8015b6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	7bfa      	ldrb	r2, [r7, #15]
 8015b34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015b38:	7bfb      	ldrb	r3, [r7, #15]
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	f003 fc55 	bl	80193ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	f000 fa7a 	bl	801603c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015b48:	7bfb      	ldrb	r3, [r7, #15]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d004      	beq.n	8015b58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2202      	movs	r2, #2
 8015b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b56:	e009      	b.n	8015b6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b60:	e004      	b.n	8015b6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 f99e 	bl	8015ea6 <USBD_CtlError>
  }
}
 8015b6a:	bf00      	nop
 8015b6c:	bf00      	nop
 8015b6e:	3710      	adds	r7, #16
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd80      	pop	{r7, pc}

08015b74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b084      	sub	sp, #16
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	885b      	ldrh	r3, [r3, #2]
 8015b86:	b2da      	uxtb	r2, r3
 8015b88:	4b4e      	ldr	r3, [pc, #312]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015b8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015b8c:	4b4d      	ldr	r3, [pc, #308]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d905      	bls.n	8015ba0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015b94:	6839      	ldr	r1, [r7, #0]
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f000 f985 	bl	8015ea6 <USBD_CtlError>
    return USBD_FAIL;
 8015b9c:	2303      	movs	r3, #3
 8015b9e:	e08c      	b.n	8015cba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	2b02      	cmp	r3, #2
 8015baa:	d002      	beq.n	8015bb2 <USBD_SetConfig+0x3e>
 8015bac:	2b03      	cmp	r3, #3
 8015bae:	d029      	beq.n	8015c04 <USBD_SetConfig+0x90>
 8015bb0:	e075      	b.n	8015c9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015bb2:	4b44      	ldr	r3, [pc, #272]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d020      	beq.n	8015bfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015bba:	4b42      	ldr	r3, [pc, #264]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	461a      	mov	r2, r3
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015bc4:	4b3f      	ldr	r3, [pc, #252]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015bc6:	781b      	ldrb	r3, [r3, #0]
 8015bc8:	4619      	mov	r1, r3
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f7fe ffe1 	bl	8014b92 <USBD_SetClassConfig>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015bd4:	7bfb      	ldrb	r3, [r7, #15]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d008      	beq.n	8015bec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015bda:	6839      	ldr	r1, [r7, #0]
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f000 f962 	bl	8015ea6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2202      	movs	r2, #2
 8015be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015bea:	e065      	b.n	8015cb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f000 fa25 	bl	801603c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2203      	movs	r2, #3
 8015bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015bfa:	e05d      	b.n	8015cb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f000 fa1d 	bl	801603c <USBD_CtlSendStatus>
      break;
 8015c02:	e059      	b.n	8015cb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015c04:	4b2f      	ldr	r3, [pc, #188]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d112      	bne.n	8015c32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2202      	movs	r2, #2
 8015c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015c14:	4b2b      	ldr	r3, [pc, #172]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015c16:	781b      	ldrb	r3, [r3, #0]
 8015c18:	461a      	mov	r2, r3
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015c1e:	4b29      	ldr	r3, [pc, #164]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	4619      	mov	r1, r3
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f7fe ffd0 	bl	8014bca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 fa06 	bl	801603c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c30:	e042      	b.n	8015cb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015c32:	4b24      	ldr	r3, [pc, #144]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	461a      	mov	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d02a      	beq.n	8015c96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	b2db      	uxtb	r3, r3
 8015c46:	4619      	mov	r1, r3
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f7fe ffbe 	bl	8014bca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015c4e:	4b1d      	ldr	r3, [pc, #116]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	461a      	mov	r2, r3
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015c58:	4b1a      	ldr	r3, [pc, #104]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	4619      	mov	r1, r3
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f7fe ff97 	bl	8014b92 <USBD_SetClassConfig>
 8015c64:	4603      	mov	r3, r0
 8015c66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015c68:	7bfb      	ldrb	r3, [r7, #15]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d00f      	beq.n	8015c8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015c6e:	6839      	ldr	r1, [r7, #0]
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f000 f918 	bl	8015ea6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	b2db      	uxtb	r3, r3
 8015c7c:	4619      	mov	r1, r3
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f7fe ffa3 	bl	8014bca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2202      	movs	r2, #2
 8015c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015c8c:	e014      	b.n	8015cb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f000 f9d4 	bl	801603c <USBD_CtlSendStatus>
      break;
 8015c94:	e010      	b.n	8015cb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f000 f9d0 	bl	801603c <USBD_CtlSendStatus>
      break;
 8015c9c:	e00c      	b.n	8015cb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015c9e:	6839      	ldr	r1, [r7, #0]
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f000 f900 	bl	8015ea6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015ca6:	4b07      	ldr	r3, [pc, #28]	; (8015cc4 <USBD_SetConfig+0x150>)
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	4619      	mov	r1, r3
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7fe ff8c 	bl	8014bca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015cb2:	2303      	movs	r3, #3
 8015cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8015cb6:	bf00      	nop
  }

  return ret;
 8015cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	240016a4 	.word	0x240016a4

08015cc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	88db      	ldrh	r3, [r3, #6]
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	d004      	beq.n	8015ce4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015cda:	6839      	ldr	r1, [r7, #0]
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f000 f8e2 	bl	8015ea6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015ce2:	e023      	b.n	8015d2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	2b02      	cmp	r3, #2
 8015cee:	dc02      	bgt.n	8015cf6 <USBD_GetConfig+0x2e>
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	dc03      	bgt.n	8015cfc <USBD_GetConfig+0x34>
 8015cf4:	e015      	b.n	8015d22 <USBD_GetConfig+0x5a>
 8015cf6:	2b03      	cmp	r3, #3
 8015cf8:	d00b      	beq.n	8015d12 <USBD_GetConfig+0x4a>
 8015cfa:	e012      	b.n	8015d22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	3308      	adds	r3, #8
 8015d06:	2201      	movs	r2, #1
 8015d08:	4619      	mov	r1, r3
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 f93c 	bl	8015f88 <USBD_CtlSendData>
        break;
 8015d10:	e00c      	b.n	8015d2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	3304      	adds	r3, #4
 8015d16:	2201      	movs	r2, #1
 8015d18:	4619      	mov	r1, r3
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	f000 f934 	bl	8015f88 <USBD_CtlSendData>
        break;
 8015d20:	e004      	b.n	8015d2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015d22:	6839      	ldr	r1, [r7, #0]
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f000 f8be 	bl	8015ea6 <USBD_CtlError>
        break;
 8015d2a:	bf00      	nop
}
 8015d2c:	bf00      	nop
 8015d2e:	3708      	adds	r7, #8
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}

08015d34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b082      	sub	sp, #8
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	3b01      	subs	r3, #1
 8015d48:	2b02      	cmp	r3, #2
 8015d4a:	d81e      	bhi.n	8015d8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	88db      	ldrh	r3, [r3, #6]
 8015d50:	2b02      	cmp	r3, #2
 8015d52:	d004      	beq.n	8015d5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015d54:	6839      	ldr	r1, [r7, #0]
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f000 f8a5 	bl	8015ea6 <USBD_CtlError>
        break;
 8015d5c:	e01a      	b.n	8015d94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2201      	movs	r2, #1
 8015d62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d005      	beq.n	8015d7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	68db      	ldr	r3, [r3, #12]
 8015d72:	f043 0202 	orr.w	r2, r3, #2
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	330c      	adds	r3, #12
 8015d7e:	2202      	movs	r2, #2
 8015d80:	4619      	mov	r1, r3
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f000 f900 	bl	8015f88 <USBD_CtlSendData>
      break;
 8015d88:	e004      	b.n	8015d94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015d8a:	6839      	ldr	r1, [r7, #0]
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f000 f88a 	bl	8015ea6 <USBD_CtlError>
      break;
 8015d92:	bf00      	nop
  }
}
 8015d94:	bf00      	nop
 8015d96:	3708      	adds	r7, #8
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}

08015d9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b082      	sub	sp, #8
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	885b      	ldrh	r3, [r3, #2]
 8015daa:	2b01      	cmp	r3, #1
 8015dac:	d107      	bne.n	8015dbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2201      	movs	r2, #1
 8015db2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 f940 	bl	801603c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015dbc:	e013      	b.n	8015de6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	885b      	ldrh	r3, [r3, #2]
 8015dc2:	2b02      	cmp	r3, #2
 8015dc4:	d10b      	bne.n	8015dde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	889b      	ldrh	r3, [r3, #4]
 8015dca:	0a1b      	lsrs	r3, r3, #8
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	b2da      	uxtb	r2, r3
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f000 f930 	bl	801603c <USBD_CtlSendStatus>
}
 8015ddc:	e003      	b.n	8015de6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015dde:	6839      	ldr	r1, [r7, #0]
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f000 f860 	bl	8015ea6 <USBD_CtlError>
}
 8015de6:	bf00      	nop
 8015de8:	3708      	adds	r7, #8
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}

08015dee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dee:	b580      	push	{r7, lr}
 8015df0:	b082      	sub	sp, #8
 8015df2:	af00      	add	r7, sp, #0
 8015df4:	6078      	str	r0, [r7, #4]
 8015df6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dfe:	b2db      	uxtb	r3, r3
 8015e00:	3b01      	subs	r3, #1
 8015e02:	2b02      	cmp	r3, #2
 8015e04:	d80b      	bhi.n	8015e1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	885b      	ldrh	r3, [r3, #2]
 8015e0a:	2b01      	cmp	r3, #1
 8015e0c:	d10c      	bne.n	8015e28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2200      	movs	r2, #0
 8015e12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f000 f910 	bl	801603c <USBD_CtlSendStatus>
      }
      break;
 8015e1c:	e004      	b.n	8015e28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015e1e:	6839      	ldr	r1, [r7, #0]
 8015e20:	6878      	ldr	r0, [r7, #4]
 8015e22:	f000 f840 	bl	8015ea6 <USBD_CtlError>
      break;
 8015e26:	e000      	b.n	8015e2a <USBD_ClrFeature+0x3c>
      break;
 8015e28:	bf00      	nop
  }
}
 8015e2a:	bf00      	nop
 8015e2c:	3708      	adds	r7, #8
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}

08015e32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b084      	sub	sp, #16
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	6078      	str	r0, [r7, #4]
 8015e3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	781a      	ldrb	r2, [r3, #0]
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	781a      	ldrb	r2, [r3, #0]
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015e5c:	68f8      	ldr	r0, [r7, #12]
 8015e5e:	f7ff fa41 	bl	80152e4 <SWAPBYTE>
 8015e62:	4603      	mov	r3, r0
 8015e64:	461a      	mov	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	3301      	adds	r3, #1
 8015e74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015e76:	68f8      	ldr	r0, [r7, #12]
 8015e78:	f7ff fa34 	bl	80152e4 <SWAPBYTE>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	461a      	mov	r2, r3
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	3301      	adds	r3, #1
 8015e88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015e90:	68f8      	ldr	r0, [r7, #12]
 8015e92:	f7ff fa27 	bl	80152e4 <SWAPBYTE>
 8015e96:	4603      	mov	r3, r0
 8015e98:	461a      	mov	r2, r3
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	80da      	strh	r2, [r3, #6]
}
 8015e9e:	bf00      	nop
 8015ea0:	3710      	adds	r7, #16
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}

08015ea6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ea6:	b580      	push	{r7, lr}
 8015ea8:	b082      	sub	sp, #8
 8015eaa:	af00      	add	r7, sp, #0
 8015eac:	6078      	str	r0, [r7, #4]
 8015eae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015eb0:	2180      	movs	r1, #128	; 0x80
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f003 fa30 	bl	8019318 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015eb8:	2100      	movs	r1, #0
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f003 fa2c 	bl	8019318 <USBD_LL_StallEP>
}
 8015ec0:	bf00      	nop
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b086      	sub	sp, #24
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	60f8      	str	r0, [r7, #12]
 8015ed0:	60b9      	str	r1, [r7, #8]
 8015ed2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d036      	beq.n	8015f4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015ee2:	6938      	ldr	r0, [r7, #16]
 8015ee4:	f000 f836 	bl	8015f54 <USBD_GetLen>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	3301      	adds	r3, #1
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	005b      	lsls	r3, r3, #1
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015ef6:	7dfb      	ldrb	r3, [r7, #23]
 8015ef8:	68ba      	ldr	r2, [r7, #8]
 8015efa:	4413      	add	r3, r2
 8015efc:	687a      	ldr	r2, [r7, #4]
 8015efe:	7812      	ldrb	r2, [r2, #0]
 8015f00:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f02:	7dfb      	ldrb	r3, [r7, #23]
 8015f04:	3301      	adds	r3, #1
 8015f06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015f08:	7dfb      	ldrb	r3, [r7, #23]
 8015f0a:	68ba      	ldr	r2, [r7, #8]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	2203      	movs	r2, #3
 8015f10:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f12:	7dfb      	ldrb	r3, [r7, #23]
 8015f14:	3301      	adds	r3, #1
 8015f16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015f18:	e013      	b.n	8015f42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015f1a:	7dfb      	ldrb	r3, [r7, #23]
 8015f1c:	68ba      	ldr	r2, [r7, #8]
 8015f1e:	4413      	add	r3, r2
 8015f20:	693a      	ldr	r2, [r7, #16]
 8015f22:	7812      	ldrb	r2, [r2, #0]
 8015f24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	3301      	adds	r3, #1
 8015f2a:	613b      	str	r3, [r7, #16]
    idx++;
 8015f2c:	7dfb      	ldrb	r3, [r7, #23]
 8015f2e:	3301      	adds	r3, #1
 8015f30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015f32:	7dfb      	ldrb	r3, [r7, #23]
 8015f34:	68ba      	ldr	r2, [r7, #8]
 8015f36:	4413      	add	r3, r2
 8015f38:	2200      	movs	r2, #0
 8015f3a:	701a      	strb	r2, [r3, #0]
    idx++;
 8015f3c:	7dfb      	ldrb	r3, [r7, #23]
 8015f3e:	3301      	adds	r3, #1
 8015f40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	781b      	ldrb	r3, [r3, #0]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1e7      	bne.n	8015f1a <USBD_GetString+0x52>
 8015f4a:	e000      	b.n	8015f4e <USBD_GetString+0x86>
    return;
 8015f4c:	bf00      	nop
  }
}
 8015f4e:	3718      	adds	r7, #24
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b085      	sub	sp, #20
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015f64:	e005      	b.n	8015f72 <USBD_GetLen+0x1e>
  {
    len++;
 8015f66:	7bfb      	ldrb	r3, [r7, #15]
 8015f68:	3301      	adds	r3, #1
 8015f6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d1f5      	bne.n	8015f66 <USBD_GetLen+0x12>
  }

  return len;
 8015f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	3714      	adds	r7, #20
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr

08015f88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	60f8      	str	r0, [r7, #12]
 8015f90:	60b9      	str	r1, [r7, #8]
 8015f92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2202      	movs	r2, #2
 8015f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	68ba      	ldr	r2, [r7, #8]
 8015fac:	2100      	movs	r1, #0
 8015fae:	68f8      	ldr	r0, [r7, #12]
 8015fb0:	f003 fa3b 	bl	801942a <USBD_LL_Transmit>

  return USBD_OK;
 8015fb4:	2300      	movs	r3, #0
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	3710      	adds	r7, #16
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}

08015fbe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	b084      	sub	sp, #16
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	60f8      	str	r0, [r7, #12]
 8015fc6:	60b9      	str	r1, [r7, #8]
 8015fc8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	68ba      	ldr	r2, [r7, #8]
 8015fce:	2100      	movs	r1, #0
 8015fd0:	68f8      	ldr	r0, [r7, #12]
 8015fd2:	f003 fa2a 	bl	801942a <USBD_LL_Transmit>

  return USBD_OK;
 8015fd6:	2300      	movs	r3, #0
}
 8015fd8:	4618      	mov	r0, r3
 8015fda:	3710      	adds	r7, #16
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}

08015fe0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2203      	movs	r2, #3
 8015ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	687a      	ldr	r2, [r7, #4]
 8015ff8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	68ba      	ldr	r2, [r7, #8]
 8016008:	2100      	movs	r1, #0
 801600a:	68f8      	ldr	r0, [r7, #12]
 801600c:	f003 fa2e 	bl	801946c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016010:	2300      	movs	r3, #0
}
 8016012:	4618      	mov	r0, r3
 8016014:	3710      	adds	r7, #16
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b084      	sub	sp, #16
 801601e:	af00      	add	r7, sp, #0
 8016020:	60f8      	str	r0, [r7, #12]
 8016022:	60b9      	str	r1, [r7, #8]
 8016024:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	68ba      	ldr	r2, [r7, #8]
 801602a:	2100      	movs	r1, #0
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	f003 fa1d 	bl	801946c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016032:	2300      	movs	r3, #0
}
 8016034:	4618      	mov	r0, r3
 8016036:	3710      	adds	r7, #16
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}

0801603c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b082      	sub	sp, #8
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2204      	movs	r2, #4
 8016048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801604c:	2300      	movs	r3, #0
 801604e:	2200      	movs	r2, #0
 8016050:	2100      	movs	r1, #0
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f003 f9e9 	bl	801942a <USBD_LL_Transmit>

  return USBD_OK;
 8016058:	2300      	movs	r3, #0
}
 801605a:	4618      	mov	r0, r3
 801605c:	3708      	adds	r7, #8
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}

08016062 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016062:	b580      	push	{r7, lr}
 8016064:	b082      	sub	sp, #8
 8016066:	af00      	add	r7, sp, #0
 8016068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2205      	movs	r2, #5
 801606e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016072:	2300      	movs	r3, #0
 8016074:	2200      	movs	r2, #0
 8016076:	2100      	movs	r1, #0
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f003 f9f7 	bl	801946c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801607e:	2300      	movs	r3, #0
}
 8016080:	4618      	mov	r0, r3
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}

08016088 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
 801608e:	4603      	mov	r3, r0
 8016090:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016092:	79fb      	ldrb	r3, [r7, #7]
 8016094:	4a08      	ldr	r2, [pc, #32]	; (80160b8 <disk_status+0x30>)
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	4413      	add	r3, r2
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	79fa      	ldrb	r2, [r7, #7]
 80160a0:	4905      	ldr	r1, [pc, #20]	; (80160b8 <disk_status+0x30>)
 80160a2:	440a      	add	r2, r1
 80160a4:	7a12      	ldrb	r2, [r2, #8]
 80160a6:	4610      	mov	r0, r2
 80160a8:	4798      	blx	r3
 80160aa:	4603      	mov	r3, r0
 80160ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80160ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3710      	adds	r7, #16
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}
 80160b8:	240018d0 	.word	0x240018d0

080160bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b084      	sub	sp, #16
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4603      	mov	r3, r0
 80160c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80160c6:	2300      	movs	r3, #0
 80160c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80160ca:	79fb      	ldrb	r3, [r7, #7]
 80160cc:	4a0d      	ldr	r2, [pc, #52]	; (8016104 <disk_initialize+0x48>)
 80160ce:	5cd3      	ldrb	r3, [r2, r3]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d111      	bne.n	80160f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80160d4:	79fb      	ldrb	r3, [r7, #7]
 80160d6:	4a0b      	ldr	r2, [pc, #44]	; (8016104 <disk_initialize+0x48>)
 80160d8:	2101      	movs	r1, #1
 80160da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80160dc:	79fb      	ldrb	r3, [r7, #7]
 80160de:	4a09      	ldr	r2, [pc, #36]	; (8016104 <disk_initialize+0x48>)
 80160e0:	009b      	lsls	r3, r3, #2
 80160e2:	4413      	add	r3, r2
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	79fa      	ldrb	r2, [r7, #7]
 80160ea:	4906      	ldr	r1, [pc, #24]	; (8016104 <disk_initialize+0x48>)
 80160ec:	440a      	add	r2, r1
 80160ee:	7a12      	ldrb	r2, [r2, #8]
 80160f0:	4610      	mov	r0, r2
 80160f2:	4798      	blx	r3
 80160f4:	4603      	mov	r3, r0
 80160f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80160f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3710      	adds	r7, #16
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	240018d0 	.word	0x240018d0

08016108 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016108:	b590      	push	{r4, r7, lr}
 801610a:	b087      	sub	sp, #28
 801610c:	af00      	add	r7, sp, #0
 801610e:	60b9      	str	r1, [r7, #8]
 8016110:	607a      	str	r2, [r7, #4]
 8016112:	603b      	str	r3, [r7, #0]
 8016114:	4603      	mov	r3, r0
 8016116:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016118:	7bfb      	ldrb	r3, [r7, #15]
 801611a:	4a0a      	ldr	r2, [pc, #40]	; (8016144 <disk_read+0x3c>)
 801611c:	009b      	lsls	r3, r3, #2
 801611e:	4413      	add	r3, r2
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	689c      	ldr	r4, [r3, #8]
 8016124:	7bfb      	ldrb	r3, [r7, #15]
 8016126:	4a07      	ldr	r2, [pc, #28]	; (8016144 <disk_read+0x3c>)
 8016128:	4413      	add	r3, r2
 801612a:	7a18      	ldrb	r0, [r3, #8]
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	68b9      	ldr	r1, [r7, #8]
 8016132:	47a0      	blx	r4
 8016134:	4603      	mov	r3, r0
 8016136:	75fb      	strb	r3, [r7, #23]
  return res;
 8016138:	7dfb      	ldrb	r3, [r7, #23]
}
 801613a:	4618      	mov	r0, r3
 801613c:	371c      	adds	r7, #28
 801613e:	46bd      	mov	sp, r7
 8016140:	bd90      	pop	{r4, r7, pc}
 8016142:	bf00      	nop
 8016144:	240018d0 	.word	0x240018d0

08016148 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016148:	b590      	push	{r4, r7, lr}
 801614a:	b087      	sub	sp, #28
 801614c:	af00      	add	r7, sp, #0
 801614e:	60b9      	str	r1, [r7, #8]
 8016150:	607a      	str	r2, [r7, #4]
 8016152:	603b      	str	r3, [r7, #0]
 8016154:	4603      	mov	r3, r0
 8016156:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016158:	7bfb      	ldrb	r3, [r7, #15]
 801615a:	4a0a      	ldr	r2, [pc, #40]	; (8016184 <disk_write+0x3c>)
 801615c:	009b      	lsls	r3, r3, #2
 801615e:	4413      	add	r3, r2
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	68dc      	ldr	r4, [r3, #12]
 8016164:	7bfb      	ldrb	r3, [r7, #15]
 8016166:	4a07      	ldr	r2, [pc, #28]	; (8016184 <disk_write+0x3c>)
 8016168:	4413      	add	r3, r2
 801616a:	7a18      	ldrb	r0, [r3, #8]
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	68b9      	ldr	r1, [r7, #8]
 8016172:	47a0      	blx	r4
 8016174:	4603      	mov	r3, r0
 8016176:	75fb      	strb	r3, [r7, #23]
  return res;
 8016178:	7dfb      	ldrb	r3, [r7, #23]
}
 801617a:	4618      	mov	r0, r3
 801617c:	371c      	adds	r7, #28
 801617e:	46bd      	mov	sp, r7
 8016180:	bd90      	pop	{r4, r7, pc}
 8016182:	bf00      	nop
 8016184:	240018d0 	.word	0x240018d0

08016188 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	4603      	mov	r3, r0
 8016190:	603a      	str	r2, [r7, #0]
 8016192:	71fb      	strb	r3, [r7, #7]
 8016194:	460b      	mov	r3, r1
 8016196:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016198:	79fb      	ldrb	r3, [r7, #7]
 801619a:	4a09      	ldr	r2, [pc, #36]	; (80161c0 <disk_ioctl+0x38>)
 801619c:	009b      	lsls	r3, r3, #2
 801619e:	4413      	add	r3, r2
 80161a0:	685b      	ldr	r3, [r3, #4]
 80161a2:	691b      	ldr	r3, [r3, #16]
 80161a4:	79fa      	ldrb	r2, [r7, #7]
 80161a6:	4906      	ldr	r1, [pc, #24]	; (80161c0 <disk_ioctl+0x38>)
 80161a8:	440a      	add	r2, r1
 80161aa:	7a10      	ldrb	r0, [r2, #8]
 80161ac:	79b9      	ldrb	r1, [r7, #6]
 80161ae:	683a      	ldr	r2, [r7, #0]
 80161b0:	4798      	blx	r3
 80161b2:	4603      	mov	r3, r0
 80161b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80161b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3710      	adds	r7, #16
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}
 80161c0:	240018d0 	.word	0x240018d0

080161c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80161c4:	b480      	push	{r7}
 80161c6:	b085      	sub	sp, #20
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	3301      	adds	r3, #1
 80161d0:	781b      	ldrb	r3, [r3, #0]
 80161d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80161d4:	89fb      	ldrh	r3, [r7, #14]
 80161d6:	021b      	lsls	r3, r3, #8
 80161d8:	b21a      	sxth	r2, r3
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	781b      	ldrb	r3, [r3, #0]
 80161de:	b21b      	sxth	r3, r3
 80161e0:	4313      	orrs	r3, r2
 80161e2:	b21b      	sxth	r3, r3
 80161e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80161e6:	89fb      	ldrh	r3, [r7, #14]
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	3714      	adds	r7, #20
 80161ec:	46bd      	mov	sp, r7
 80161ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f2:	4770      	bx	lr

080161f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80161f4:	b480      	push	{r7}
 80161f6:	b085      	sub	sp, #20
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	3303      	adds	r3, #3
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	021b      	lsls	r3, r3, #8
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	3202      	adds	r2, #2
 801620c:	7812      	ldrb	r2, [r2, #0]
 801620e:	4313      	orrs	r3, r2
 8016210:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	021b      	lsls	r3, r3, #8
 8016216:	687a      	ldr	r2, [r7, #4]
 8016218:	3201      	adds	r2, #1
 801621a:	7812      	ldrb	r2, [r2, #0]
 801621c:	4313      	orrs	r3, r2
 801621e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	021b      	lsls	r3, r3, #8
 8016224:	687a      	ldr	r2, [r7, #4]
 8016226:	7812      	ldrb	r2, [r2, #0]
 8016228:	4313      	orrs	r3, r2
 801622a:	60fb      	str	r3, [r7, #12]
	return rv;
 801622c:	68fb      	ldr	r3, [r7, #12]
}
 801622e:	4618      	mov	r0, r3
 8016230:	3714      	adds	r7, #20
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr

0801623a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801623a:	b480      	push	{r7}
 801623c:	b083      	sub	sp, #12
 801623e:	af00      	add	r7, sp, #0
 8016240:	6078      	str	r0, [r7, #4]
 8016242:	460b      	mov	r3, r1
 8016244:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	1c5a      	adds	r2, r3, #1
 801624a:	607a      	str	r2, [r7, #4]
 801624c:	887a      	ldrh	r2, [r7, #2]
 801624e:	b2d2      	uxtb	r2, r2
 8016250:	701a      	strb	r2, [r3, #0]
 8016252:	887b      	ldrh	r3, [r7, #2]
 8016254:	0a1b      	lsrs	r3, r3, #8
 8016256:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	1c5a      	adds	r2, r3, #1
 801625c:	607a      	str	r2, [r7, #4]
 801625e:	887a      	ldrh	r2, [r7, #2]
 8016260:	b2d2      	uxtb	r2, r2
 8016262:	701a      	strb	r2, [r3, #0]
}
 8016264:	bf00      	nop
 8016266:	370c      	adds	r7, #12
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	1c5a      	adds	r2, r3, #1
 801627e:	607a      	str	r2, [r7, #4]
 8016280:	683a      	ldr	r2, [r7, #0]
 8016282:	b2d2      	uxtb	r2, r2
 8016284:	701a      	strb	r2, [r3, #0]
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	0a1b      	lsrs	r3, r3, #8
 801628a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	1c5a      	adds	r2, r3, #1
 8016290:	607a      	str	r2, [r7, #4]
 8016292:	683a      	ldr	r2, [r7, #0]
 8016294:	b2d2      	uxtb	r2, r2
 8016296:	701a      	strb	r2, [r3, #0]
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	0a1b      	lsrs	r3, r3, #8
 801629c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	1c5a      	adds	r2, r3, #1
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	683a      	ldr	r2, [r7, #0]
 80162a6:	b2d2      	uxtb	r2, r2
 80162a8:	701a      	strb	r2, [r3, #0]
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	0a1b      	lsrs	r3, r3, #8
 80162ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	1c5a      	adds	r2, r3, #1
 80162b4:	607a      	str	r2, [r7, #4]
 80162b6:	683a      	ldr	r2, [r7, #0]
 80162b8:	b2d2      	uxtb	r2, r2
 80162ba:	701a      	strb	r2, [r3, #0]
}
 80162bc:	bf00      	nop
 80162be:	370c      	adds	r7, #12
 80162c0:	46bd      	mov	sp, r7
 80162c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c6:	4770      	bx	lr

080162c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80162c8:	b480      	push	{r7}
 80162ca:	b087      	sub	sp, #28
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00d      	beq.n	80162fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80162e2:	693a      	ldr	r2, [r7, #16]
 80162e4:	1c53      	adds	r3, r2, #1
 80162e6:	613b      	str	r3, [r7, #16]
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	1c59      	adds	r1, r3, #1
 80162ec:	6179      	str	r1, [r7, #20]
 80162ee:	7812      	ldrb	r2, [r2, #0]
 80162f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	3b01      	subs	r3, #1
 80162f6:	607b      	str	r3, [r7, #4]
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d1f1      	bne.n	80162e2 <mem_cpy+0x1a>
	}
}
 80162fe:	bf00      	nop
 8016300:	371c      	adds	r7, #28
 8016302:	46bd      	mov	sp, r7
 8016304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016308:	4770      	bx	lr

0801630a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801630a:	b480      	push	{r7}
 801630c:	b087      	sub	sp, #28
 801630e:	af00      	add	r7, sp, #0
 8016310:	60f8      	str	r0, [r7, #12]
 8016312:	60b9      	str	r1, [r7, #8]
 8016314:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	1c5a      	adds	r2, r3, #1
 801631e:	617a      	str	r2, [r7, #20]
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	b2d2      	uxtb	r2, r2
 8016324:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	3b01      	subs	r3, #1
 801632a:	607b      	str	r3, [r7, #4]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d1f3      	bne.n	801631a <mem_set+0x10>
}
 8016332:	bf00      	nop
 8016334:	bf00      	nop
 8016336:	371c      	adds	r7, #28
 8016338:	46bd      	mov	sp, r7
 801633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633e:	4770      	bx	lr

08016340 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016340:	b480      	push	{r7}
 8016342:	b089      	sub	sp, #36	; 0x24
 8016344:	af00      	add	r7, sp, #0
 8016346:	60f8      	str	r0, [r7, #12]
 8016348:	60b9      	str	r1, [r7, #8]
 801634a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	61fb      	str	r3, [r7, #28]
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016354:	2300      	movs	r3, #0
 8016356:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016358:	69fb      	ldr	r3, [r7, #28]
 801635a:	1c5a      	adds	r2, r3, #1
 801635c:	61fa      	str	r2, [r7, #28]
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	4619      	mov	r1, r3
 8016362:	69bb      	ldr	r3, [r7, #24]
 8016364:	1c5a      	adds	r2, r3, #1
 8016366:	61ba      	str	r2, [r7, #24]
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	1acb      	subs	r3, r1, r3
 801636c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	3b01      	subs	r3, #1
 8016372:	607b      	str	r3, [r7, #4]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d002      	beq.n	8016380 <mem_cmp+0x40>
 801637a:	697b      	ldr	r3, [r7, #20]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d0eb      	beq.n	8016358 <mem_cmp+0x18>

	return r;
 8016380:	697b      	ldr	r3, [r7, #20]
}
 8016382:	4618      	mov	r0, r3
 8016384:	3724      	adds	r7, #36	; 0x24
 8016386:	46bd      	mov	sp, r7
 8016388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638c:	4770      	bx	lr

0801638e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801638e:	b480      	push	{r7}
 8016390:	b083      	sub	sp, #12
 8016392:	af00      	add	r7, sp, #0
 8016394:	6078      	str	r0, [r7, #4]
 8016396:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016398:	e002      	b.n	80163a0 <chk_chr+0x12>
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	3301      	adds	r3, #1
 801639e:	607b      	str	r3, [r7, #4]
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d005      	beq.n	80163b4 <chk_chr+0x26>
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	461a      	mov	r2, r3
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	4293      	cmp	r3, r2
 80163b2:	d1f2      	bne.n	801639a <chk_chr+0xc>
	return *str;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	781b      	ldrb	r3, [r3, #0]
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	370c      	adds	r7, #12
 80163bc:	46bd      	mov	sp, r7
 80163be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c2:	4770      	bx	lr

080163c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b085      	sub	sp, #20
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80163ce:	2300      	movs	r3, #0
 80163d0:	60bb      	str	r3, [r7, #8]
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	60fb      	str	r3, [r7, #12]
 80163d6:	e029      	b.n	801642c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80163d8:	4a27      	ldr	r2, [pc, #156]	; (8016478 <chk_lock+0xb4>)
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	011b      	lsls	r3, r3, #4
 80163de:	4413      	add	r3, r2
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d01d      	beq.n	8016422 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80163e6:	4a24      	ldr	r2, [pc, #144]	; (8016478 <chk_lock+0xb4>)
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	011b      	lsls	r3, r3, #4
 80163ec:	4413      	add	r3, r2
 80163ee:	681a      	ldr	r2, [r3, #0]
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d116      	bne.n	8016426 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80163f8:	4a1f      	ldr	r2, [pc, #124]	; (8016478 <chk_lock+0xb4>)
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	011b      	lsls	r3, r3, #4
 80163fe:	4413      	add	r3, r2
 8016400:	3304      	adds	r3, #4
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016408:	429a      	cmp	r2, r3
 801640a:	d10c      	bne.n	8016426 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801640c:	4a1a      	ldr	r2, [pc, #104]	; (8016478 <chk_lock+0xb4>)
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	011b      	lsls	r3, r3, #4
 8016412:	4413      	add	r3, r2
 8016414:	3308      	adds	r3, #8
 8016416:	681a      	ldr	r2, [r3, #0]
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801641c:	429a      	cmp	r2, r3
 801641e:	d102      	bne.n	8016426 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016420:	e007      	b.n	8016432 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016422:	2301      	movs	r3, #1
 8016424:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	3301      	adds	r3, #1
 801642a:	60fb      	str	r3, [r7, #12]
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	2b01      	cmp	r3, #1
 8016430:	d9d2      	bls.n	80163d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2b02      	cmp	r3, #2
 8016436:	d109      	bne.n	801644c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d102      	bne.n	8016444 <chk_lock+0x80>
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	2b02      	cmp	r3, #2
 8016442:	d101      	bne.n	8016448 <chk_lock+0x84>
 8016444:	2300      	movs	r3, #0
 8016446:	e010      	b.n	801646a <chk_lock+0xa6>
 8016448:	2312      	movs	r3, #18
 801644a:	e00e      	b.n	801646a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801644c:	683b      	ldr	r3, [r7, #0]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d108      	bne.n	8016464 <chk_lock+0xa0>
 8016452:	4a09      	ldr	r2, [pc, #36]	; (8016478 <chk_lock+0xb4>)
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	011b      	lsls	r3, r3, #4
 8016458:	4413      	add	r3, r2
 801645a:	330c      	adds	r3, #12
 801645c:	881b      	ldrh	r3, [r3, #0]
 801645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016462:	d101      	bne.n	8016468 <chk_lock+0xa4>
 8016464:	2310      	movs	r3, #16
 8016466:	e000      	b.n	801646a <chk_lock+0xa6>
 8016468:	2300      	movs	r3, #0
}
 801646a:	4618      	mov	r0, r3
 801646c:	3714      	adds	r7, #20
 801646e:	46bd      	mov	sp, r7
 8016470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016474:	4770      	bx	lr
 8016476:	bf00      	nop
 8016478:	240016b0 	.word	0x240016b0

0801647c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801647c:	b480      	push	{r7}
 801647e:	b083      	sub	sp, #12
 8016480:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016482:	2300      	movs	r3, #0
 8016484:	607b      	str	r3, [r7, #4]
 8016486:	e002      	b.n	801648e <enq_lock+0x12>
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	3301      	adds	r3, #1
 801648c:	607b      	str	r3, [r7, #4]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	2b01      	cmp	r3, #1
 8016492:	d806      	bhi.n	80164a2 <enq_lock+0x26>
 8016494:	4a09      	ldr	r2, [pc, #36]	; (80164bc <enq_lock+0x40>)
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	011b      	lsls	r3, r3, #4
 801649a:	4413      	add	r3, r2
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d1f2      	bne.n	8016488 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	2b02      	cmp	r3, #2
 80164a6:	bf14      	ite	ne
 80164a8:	2301      	movne	r3, #1
 80164aa:	2300      	moveq	r3, #0
 80164ac:	b2db      	uxtb	r3, r3
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	370c      	adds	r7, #12
 80164b2:	46bd      	mov	sp, r7
 80164b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b8:	4770      	bx	lr
 80164ba:	bf00      	nop
 80164bc:	240016b0 	.word	0x240016b0

080164c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b085      	sub	sp, #20
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80164ca:	2300      	movs	r3, #0
 80164cc:	60fb      	str	r3, [r7, #12]
 80164ce:	e01f      	b.n	8016510 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80164d0:	4a41      	ldr	r2, [pc, #260]	; (80165d8 <inc_lock+0x118>)
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	011b      	lsls	r3, r3, #4
 80164d6:	4413      	add	r3, r2
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	429a      	cmp	r2, r3
 80164e0:	d113      	bne.n	801650a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80164e2:	4a3d      	ldr	r2, [pc, #244]	; (80165d8 <inc_lock+0x118>)
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	011b      	lsls	r3, r3, #4
 80164e8:	4413      	add	r3, r2
 80164ea:	3304      	adds	r3, #4
 80164ec:	681a      	ldr	r2, [r3, #0]
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d109      	bne.n	801650a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80164f6:	4a38      	ldr	r2, [pc, #224]	; (80165d8 <inc_lock+0x118>)
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	011b      	lsls	r3, r3, #4
 80164fc:	4413      	add	r3, r2
 80164fe:	3308      	adds	r3, #8
 8016500:	681a      	ldr	r2, [r3, #0]
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016506:	429a      	cmp	r2, r3
 8016508:	d006      	beq.n	8016518 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	3301      	adds	r3, #1
 801650e:	60fb      	str	r3, [r7, #12]
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	2b01      	cmp	r3, #1
 8016514:	d9dc      	bls.n	80164d0 <inc_lock+0x10>
 8016516:	e000      	b.n	801651a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016518:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2b02      	cmp	r3, #2
 801651e:	d132      	bne.n	8016586 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016520:	2300      	movs	r3, #0
 8016522:	60fb      	str	r3, [r7, #12]
 8016524:	e002      	b.n	801652c <inc_lock+0x6c>
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	3301      	adds	r3, #1
 801652a:	60fb      	str	r3, [r7, #12]
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2b01      	cmp	r3, #1
 8016530:	d806      	bhi.n	8016540 <inc_lock+0x80>
 8016532:	4a29      	ldr	r2, [pc, #164]	; (80165d8 <inc_lock+0x118>)
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	011b      	lsls	r3, r3, #4
 8016538:	4413      	add	r3, r2
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d1f2      	bne.n	8016526 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	2b02      	cmp	r3, #2
 8016544:	d101      	bne.n	801654a <inc_lock+0x8a>
 8016546:	2300      	movs	r3, #0
 8016548:	e040      	b.n	80165cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681a      	ldr	r2, [r3, #0]
 801654e:	4922      	ldr	r1, [pc, #136]	; (80165d8 <inc_lock+0x118>)
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	011b      	lsls	r3, r3, #4
 8016554:	440b      	add	r3, r1
 8016556:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	689a      	ldr	r2, [r3, #8]
 801655c:	491e      	ldr	r1, [pc, #120]	; (80165d8 <inc_lock+0x118>)
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	011b      	lsls	r3, r3, #4
 8016562:	440b      	add	r3, r1
 8016564:	3304      	adds	r3, #4
 8016566:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	695a      	ldr	r2, [r3, #20]
 801656c:	491a      	ldr	r1, [pc, #104]	; (80165d8 <inc_lock+0x118>)
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	011b      	lsls	r3, r3, #4
 8016572:	440b      	add	r3, r1
 8016574:	3308      	adds	r3, #8
 8016576:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016578:	4a17      	ldr	r2, [pc, #92]	; (80165d8 <inc_lock+0x118>)
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	011b      	lsls	r3, r3, #4
 801657e:	4413      	add	r3, r2
 8016580:	330c      	adds	r3, #12
 8016582:	2200      	movs	r2, #0
 8016584:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d009      	beq.n	80165a0 <inc_lock+0xe0>
 801658c:	4a12      	ldr	r2, [pc, #72]	; (80165d8 <inc_lock+0x118>)
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	011b      	lsls	r3, r3, #4
 8016592:	4413      	add	r3, r2
 8016594:	330c      	adds	r3, #12
 8016596:	881b      	ldrh	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <inc_lock+0xe0>
 801659c:	2300      	movs	r3, #0
 801659e:	e015      	b.n	80165cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d108      	bne.n	80165b8 <inc_lock+0xf8>
 80165a6:	4a0c      	ldr	r2, [pc, #48]	; (80165d8 <inc_lock+0x118>)
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	011b      	lsls	r3, r3, #4
 80165ac:	4413      	add	r3, r2
 80165ae:	330c      	adds	r3, #12
 80165b0:	881b      	ldrh	r3, [r3, #0]
 80165b2:	3301      	adds	r3, #1
 80165b4:	b29a      	uxth	r2, r3
 80165b6:	e001      	b.n	80165bc <inc_lock+0xfc>
 80165b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80165bc:	4906      	ldr	r1, [pc, #24]	; (80165d8 <inc_lock+0x118>)
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	011b      	lsls	r3, r3, #4
 80165c2:	440b      	add	r3, r1
 80165c4:	330c      	adds	r3, #12
 80165c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	3301      	adds	r3, #1
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3714      	adds	r7, #20
 80165d0:	46bd      	mov	sp, r7
 80165d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d6:	4770      	bx	lr
 80165d8:	240016b0 	.word	0x240016b0

080165dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80165dc:	b480      	push	{r7}
 80165de:	b085      	sub	sp, #20
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	3b01      	subs	r3, #1
 80165e8:	607b      	str	r3, [r7, #4]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	2b01      	cmp	r3, #1
 80165ee:	d825      	bhi.n	801663c <dec_lock+0x60>
		n = Files[i].ctr;
 80165f0:	4a17      	ldr	r2, [pc, #92]	; (8016650 <dec_lock+0x74>)
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	011b      	lsls	r3, r3, #4
 80165f6:	4413      	add	r3, r2
 80165f8:	330c      	adds	r3, #12
 80165fa:	881b      	ldrh	r3, [r3, #0]
 80165fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80165fe:	89fb      	ldrh	r3, [r7, #14]
 8016600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016604:	d101      	bne.n	801660a <dec_lock+0x2e>
 8016606:	2300      	movs	r3, #0
 8016608:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801660a:	89fb      	ldrh	r3, [r7, #14]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d002      	beq.n	8016616 <dec_lock+0x3a>
 8016610:	89fb      	ldrh	r3, [r7, #14]
 8016612:	3b01      	subs	r3, #1
 8016614:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016616:	4a0e      	ldr	r2, [pc, #56]	; (8016650 <dec_lock+0x74>)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	011b      	lsls	r3, r3, #4
 801661c:	4413      	add	r3, r2
 801661e:	330c      	adds	r3, #12
 8016620:	89fa      	ldrh	r2, [r7, #14]
 8016622:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016624:	89fb      	ldrh	r3, [r7, #14]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d105      	bne.n	8016636 <dec_lock+0x5a>
 801662a:	4a09      	ldr	r2, [pc, #36]	; (8016650 <dec_lock+0x74>)
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	011b      	lsls	r3, r3, #4
 8016630:	4413      	add	r3, r2
 8016632:	2200      	movs	r2, #0
 8016634:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016636:	2300      	movs	r3, #0
 8016638:	737b      	strb	r3, [r7, #13]
 801663a:	e001      	b.n	8016640 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801663c:	2302      	movs	r3, #2
 801663e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016640:	7b7b      	ldrb	r3, [r7, #13]
}
 8016642:	4618      	mov	r0, r3
 8016644:	3714      	adds	r7, #20
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr
 801664e:	bf00      	nop
 8016650:	240016b0 	.word	0x240016b0

08016654 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016654:	b480      	push	{r7}
 8016656:	b085      	sub	sp, #20
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801665c:	2300      	movs	r3, #0
 801665e:	60fb      	str	r3, [r7, #12]
 8016660:	e010      	b.n	8016684 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016662:	4a0d      	ldr	r2, [pc, #52]	; (8016698 <clear_lock+0x44>)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	011b      	lsls	r3, r3, #4
 8016668:	4413      	add	r3, r2
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	429a      	cmp	r2, r3
 8016670:	d105      	bne.n	801667e <clear_lock+0x2a>
 8016672:	4a09      	ldr	r2, [pc, #36]	; (8016698 <clear_lock+0x44>)
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	011b      	lsls	r3, r3, #4
 8016678:	4413      	add	r3, r2
 801667a:	2200      	movs	r2, #0
 801667c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	3301      	adds	r3, #1
 8016682:	60fb      	str	r3, [r7, #12]
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	2b01      	cmp	r3, #1
 8016688:	d9eb      	bls.n	8016662 <clear_lock+0xe>
	}
}
 801668a:	bf00      	nop
 801668c:	bf00      	nop
 801668e:	3714      	adds	r7, #20
 8016690:	46bd      	mov	sp, r7
 8016692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016696:	4770      	bx	lr
 8016698:	240016b0 	.word	0x240016b0

0801669c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b086      	sub	sp, #24
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80166a4:	2300      	movs	r3, #0
 80166a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	78db      	ldrb	r3, [r3, #3]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d034      	beq.n	801671a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	7858      	ldrb	r0, [r3, #1]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80166c0:	2301      	movs	r3, #1
 80166c2:	697a      	ldr	r2, [r7, #20]
 80166c4:	f7ff fd40 	bl	8016148 <disk_write>
 80166c8:	4603      	mov	r3, r0
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d002      	beq.n	80166d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80166ce:	2301      	movs	r3, #1
 80166d0:	73fb      	strb	r3, [r7, #15]
 80166d2:	e022      	b.n	801671a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2200      	movs	r2, #0
 80166d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166de:	697a      	ldr	r2, [r7, #20]
 80166e0:	1ad2      	subs	r2, r2, r3
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	6a1b      	ldr	r3, [r3, #32]
 80166e6:	429a      	cmp	r2, r3
 80166e8:	d217      	bcs.n	801671a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	789b      	ldrb	r3, [r3, #2]
 80166ee:	613b      	str	r3, [r7, #16]
 80166f0:	e010      	b.n	8016714 <sync_window+0x78>
					wsect += fs->fsize;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	6a1b      	ldr	r3, [r3, #32]
 80166f6:	697a      	ldr	r2, [r7, #20]
 80166f8:	4413      	add	r3, r2
 80166fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	7858      	ldrb	r0, [r3, #1]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016706:	2301      	movs	r3, #1
 8016708:	697a      	ldr	r2, [r7, #20]
 801670a:	f7ff fd1d 	bl	8016148 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	3b01      	subs	r3, #1
 8016712:	613b      	str	r3, [r7, #16]
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	2b01      	cmp	r3, #1
 8016718:	d8eb      	bhi.n	80166f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801671a:	7bfb      	ldrb	r3, [r7, #15]
}
 801671c:	4618      	mov	r0, r3
 801671e:	3718      	adds	r7, #24
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}

08016724 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b084      	sub	sp, #16
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801672e:	2300      	movs	r3, #0
 8016730:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016736:	683a      	ldr	r2, [r7, #0]
 8016738:	429a      	cmp	r2, r3
 801673a:	d01b      	beq.n	8016774 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801673c:	6878      	ldr	r0, [r7, #4]
 801673e:	f7ff ffad 	bl	801669c <sync_window>
 8016742:	4603      	mov	r3, r0
 8016744:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016746:	7bfb      	ldrb	r3, [r7, #15]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d113      	bne.n	8016774 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	7858      	ldrb	r0, [r3, #1]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016756:	2301      	movs	r3, #1
 8016758:	683a      	ldr	r2, [r7, #0]
 801675a:	f7ff fcd5 	bl	8016108 <disk_read>
 801675e:	4603      	mov	r3, r0
 8016760:	2b00      	cmp	r3, #0
 8016762:	d004      	beq.n	801676e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016764:	f04f 33ff 	mov.w	r3, #4294967295
 8016768:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801676a:	2301      	movs	r3, #1
 801676c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	683a      	ldr	r2, [r7, #0]
 8016772:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8016774:	7bfb      	ldrb	r3, [r7, #15]
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
	...

08016780 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f7ff ff87 	bl	801669c <sync_window>
 801678e:	4603      	mov	r3, r0
 8016790:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016792:	7bfb      	ldrb	r3, [r7, #15]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d159      	bne.n	801684c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	2b03      	cmp	r3, #3
 801679e:	d149      	bne.n	8016834 <sync_fs+0xb4>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	791b      	ldrb	r3, [r3, #4]
 80167a4:	2b01      	cmp	r3, #1
 80167a6:	d145      	bne.n	8016834 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	899b      	ldrh	r3, [r3, #12]
 80167b2:	461a      	mov	r2, r3
 80167b4:	2100      	movs	r1, #0
 80167b6:	f7ff fda8 	bl	801630a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	3338      	adds	r3, #56	; 0x38
 80167be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80167c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80167c6:	4618      	mov	r0, r3
 80167c8:	f7ff fd37 	bl	801623a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	3338      	adds	r3, #56	; 0x38
 80167d0:	4921      	ldr	r1, [pc, #132]	; (8016858 <sync_fs+0xd8>)
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7ff fd4c 	bl	8016270 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	3338      	adds	r3, #56	; 0x38
 80167dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80167e0:	491e      	ldr	r1, [pc, #120]	; (801685c <sync_fs+0xdc>)
 80167e2:	4618      	mov	r0, r3
 80167e4:	f7ff fd44 	bl	8016270 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	3338      	adds	r3, #56	; 0x38
 80167ec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	699b      	ldr	r3, [r3, #24]
 80167f4:	4619      	mov	r1, r3
 80167f6:	4610      	mov	r0, r2
 80167f8:	f7ff fd3a 	bl	8016270 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	3338      	adds	r3, #56	; 0x38
 8016800:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	695b      	ldr	r3, [r3, #20]
 8016808:	4619      	mov	r1, r3
 801680a:	4610      	mov	r0, r2
 801680c:	f7ff fd30 	bl	8016270 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016814:	1c5a      	adds	r2, r3, #1
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	7858      	ldrb	r0, [r3, #1]
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016828:	2301      	movs	r3, #1
 801682a:	f7ff fc8d 	bl	8016148 <disk_write>
			fs->fsi_flag = 0;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2200      	movs	r2, #0
 8016832:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	785b      	ldrb	r3, [r3, #1]
 8016838:	2200      	movs	r2, #0
 801683a:	2100      	movs	r1, #0
 801683c:	4618      	mov	r0, r3
 801683e:	f7ff fca3 	bl	8016188 <disk_ioctl>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d001      	beq.n	801684c <sync_fs+0xcc>
 8016848:	2301      	movs	r3, #1
 801684a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801684c:	7bfb      	ldrb	r3, [r7, #15]
}
 801684e:	4618      	mov	r0, r3
 8016850:	3710      	adds	r7, #16
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	41615252 	.word	0x41615252
 801685c:	61417272 	.word	0x61417272

08016860 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016860:	b480      	push	{r7}
 8016862:	b083      	sub	sp, #12
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	3b02      	subs	r3, #2
 801686e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	69db      	ldr	r3, [r3, #28]
 8016874:	3b02      	subs	r3, #2
 8016876:	683a      	ldr	r2, [r7, #0]
 8016878:	429a      	cmp	r2, r3
 801687a:	d301      	bcc.n	8016880 <clust2sect+0x20>
 801687c:	2300      	movs	r3, #0
 801687e:	e008      	b.n	8016892 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	895b      	ldrh	r3, [r3, #10]
 8016884:	461a      	mov	r2, r3
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	fb03 f202 	mul.w	r2, r3, r2
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016890:	4413      	add	r3, r2
}
 8016892:	4618      	mov	r0, r3
 8016894:	370c      	adds	r7, #12
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr

0801689e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801689e:	b580      	push	{r7, lr}
 80168a0:	b086      	sub	sp, #24
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	6078      	str	r0, [r7, #4]
 80168a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	2b01      	cmp	r3, #1
 80168b2:	d904      	bls.n	80168be <get_fat+0x20>
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	69db      	ldr	r3, [r3, #28]
 80168b8:	683a      	ldr	r2, [r7, #0]
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d302      	bcc.n	80168c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80168be:	2301      	movs	r3, #1
 80168c0:	617b      	str	r3, [r7, #20]
 80168c2:	e0bb      	b.n	8016a3c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80168c4:	f04f 33ff 	mov.w	r3, #4294967295
 80168c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	2b03      	cmp	r3, #3
 80168d0:	f000 8083 	beq.w	80169da <get_fat+0x13c>
 80168d4:	2b03      	cmp	r3, #3
 80168d6:	f300 80a7 	bgt.w	8016a28 <get_fat+0x18a>
 80168da:	2b01      	cmp	r3, #1
 80168dc:	d002      	beq.n	80168e4 <get_fat+0x46>
 80168de:	2b02      	cmp	r3, #2
 80168e0:	d056      	beq.n	8016990 <get_fat+0xf2>
 80168e2:	e0a1      	b.n	8016a28 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	60fb      	str	r3, [r7, #12]
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	085b      	lsrs	r3, r3, #1
 80168ec:	68fa      	ldr	r2, [r7, #12]
 80168ee:	4413      	add	r3, r2
 80168f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80168f6:	693b      	ldr	r3, [r7, #16]
 80168f8:	899b      	ldrh	r3, [r3, #12]
 80168fa:	4619      	mov	r1, r3
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8016902:	4413      	add	r3, r2
 8016904:	4619      	mov	r1, r3
 8016906:	6938      	ldr	r0, [r7, #16]
 8016908:	f7ff ff0c 	bl	8016724 <move_window>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	f040 808d 	bne.w	8016a2e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	1c5a      	adds	r2, r3, #1
 8016918:	60fa      	str	r2, [r7, #12]
 801691a:	693a      	ldr	r2, [r7, #16]
 801691c:	8992      	ldrh	r2, [r2, #12]
 801691e:	fbb3 f1f2 	udiv	r1, r3, r2
 8016922:	fb01 f202 	mul.w	r2, r1, r2
 8016926:	1a9b      	subs	r3, r3, r2
 8016928:	693a      	ldr	r2, [r7, #16]
 801692a:	4413      	add	r3, r2
 801692c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016930:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016932:	693b      	ldr	r3, [r7, #16]
 8016934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	899b      	ldrh	r3, [r3, #12]
 801693a:	4619      	mov	r1, r3
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016942:	4413      	add	r3, r2
 8016944:	4619      	mov	r1, r3
 8016946:	6938      	ldr	r0, [r7, #16]
 8016948:	f7ff feec 	bl	8016724 <move_window>
 801694c:	4603      	mov	r3, r0
 801694e:	2b00      	cmp	r3, #0
 8016950:	d16f      	bne.n	8016a32 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	899b      	ldrh	r3, [r3, #12]
 8016956:	461a      	mov	r2, r3
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	fbb3 f1f2 	udiv	r1, r3, r2
 801695e:	fb01 f202 	mul.w	r2, r1, r2
 8016962:	1a9b      	subs	r3, r3, r2
 8016964:	693a      	ldr	r2, [r7, #16]
 8016966:	4413      	add	r3, r2
 8016968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801696c:	021b      	lsls	r3, r3, #8
 801696e:	461a      	mov	r2, r3
 8016970:	68bb      	ldr	r3, [r7, #8]
 8016972:	4313      	orrs	r3, r2
 8016974:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	f003 0301 	and.w	r3, r3, #1
 801697c:	2b00      	cmp	r3, #0
 801697e:	d002      	beq.n	8016986 <get_fat+0xe8>
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	091b      	lsrs	r3, r3, #4
 8016984:	e002      	b.n	801698c <get_fat+0xee>
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801698c:	617b      	str	r3, [r7, #20]
			break;
 801698e:	e055      	b.n	8016a3c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	899b      	ldrh	r3, [r3, #12]
 8016998:	085b      	lsrs	r3, r3, #1
 801699a:	b29b      	uxth	r3, r3
 801699c:	4619      	mov	r1, r3
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80169a4:	4413      	add	r3, r2
 80169a6:	4619      	mov	r1, r3
 80169a8:	6938      	ldr	r0, [r7, #16]
 80169aa:	f7ff febb 	bl	8016724 <move_window>
 80169ae:	4603      	mov	r3, r0
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d140      	bne.n	8016a36 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80169b4:	693b      	ldr	r3, [r7, #16]
 80169b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80169ba:	683b      	ldr	r3, [r7, #0]
 80169bc:	005b      	lsls	r3, r3, #1
 80169be:	693a      	ldr	r2, [r7, #16]
 80169c0:	8992      	ldrh	r2, [r2, #12]
 80169c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80169c6:	fb00 f202 	mul.w	r2, r0, r2
 80169ca:	1a9b      	subs	r3, r3, r2
 80169cc:	440b      	add	r3, r1
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7ff fbf8 	bl	80161c4 <ld_word>
 80169d4:	4603      	mov	r3, r0
 80169d6:	617b      	str	r3, [r7, #20]
			break;
 80169d8:	e030      	b.n	8016a3c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80169da:	693b      	ldr	r3, [r7, #16]
 80169dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	899b      	ldrh	r3, [r3, #12]
 80169e2:	089b      	lsrs	r3, r3, #2
 80169e4:	b29b      	uxth	r3, r3
 80169e6:	4619      	mov	r1, r3
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80169ee:	4413      	add	r3, r2
 80169f0:	4619      	mov	r1, r3
 80169f2:	6938      	ldr	r0, [r7, #16]
 80169f4:	f7ff fe96 	bl	8016724 <move_window>
 80169f8:	4603      	mov	r3, r0
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d11d      	bne.n	8016a3a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	009b      	lsls	r3, r3, #2
 8016a08:	693a      	ldr	r2, [r7, #16]
 8016a0a:	8992      	ldrh	r2, [r2, #12]
 8016a0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016a10:	fb00 f202 	mul.w	r2, r0, r2
 8016a14:	1a9b      	subs	r3, r3, r2
 8016a16:	440b      	add	r3, r1
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7ff fbeb 	bl	80161f4 <ld_dword>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016a24:	617b      	str	r3, [r7, #20]
			break;
 8016a26:	e009      	b.n	8016a3c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016a28:	2301      	movs	r3, #1
 8016a2a:	617b      	str	r3, [r7, #20]
 8016a2c:	e006      	b.n	8016a3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016a2e:	bf00      	nop
 8016a30:	e004      	b.n	8016a3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016a32:	bf00      	nop
 8016a34:	e002      	b.n	8016a3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016a36:	bf00      	nop
 8016a38:	e000      	b.n	8016a3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016a3a:	bf00      	nop
		}
	}

	return val;
 8016a3c:	697b      	ldr	r3, [r7, #20]
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	3718      	adds	r7, #24
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}

08016a46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016a46:	b590      	push	{r4, r7, lr}
 8016a48:	b089      	sub	sp, #36	; 0x24
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	60f8      	str	r0, [r7, #12]
 8016a4e:	60b9      	str	r1, [r7, #8]
 8016a50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016a52:	2302      	movs	r3, #2
 8016a54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016a56:	68bb      	ldr	r3, [r7, #8]
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	f240 8109 	bls.w	8016c70 <put_fat+0x22a>
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	69db      	ldr	r3, [r3, #28]
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	429a      	cmp	r2, r3
 8016a66:	f080 8103 	bcs.w	8016c70 <put_fat+0x22a>
		switch (fs->fs_type) {
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	2b03      	cmp	r3, #3
 8016a70:	f000 80b6 	beq.w	8016be0 <put_fat+0x19a>
 8016a74:	2b03      	cmp	r3, #3
 8016a76:	f300 80fb 	bgt.w	8016c70 <put_fat+0x22a>
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d003      	beq.n	8016a86 <put_fat+0x40>
 8016a7e:	2b02      	cmp	r3, #2
 8016a80:	f000 8083 	beq.w	8016b8a <put_fat+0x144>
 8016a84:	e0f4      	b.n	8016c70 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	61bb      	str	r3, [r7, #24]
 8016a8a:	69bb      	ldr	r3, [r7, #24]
 8016a8c:	085b      	lsrs	r3, r3, #1
 8016a8e:	69ba      	ldr	r2, [r7, #24]
 8016a90:	4413      	add	r3, r2
 8016a92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	899b      	ldrh	r3, [r3, #12]
 8016a9c:	4619      	mov	r1, r3
 8016a9e:	69bb      	ldr	r3, [r7, #24]
 8016aa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016aa4:	4413      	add	r3, r2
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	68f8      	ldr	r0, [r7, #12]
 8016aaa:	f7ff fe3b 	bl	8016724 <move_window>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ab2:	7ffb      	ldrb	r3, [r7, #31]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f040 80d4 	bne.w	8016c62 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016ac0:	69bb      	ldr	r3, [r7, #24]
 8016ac2:	1c5a      	adds	r2, r3, #1
 8016ac4:	61ba      	str	r2, [r7, #24]
 8016ac6:	68fa      	ldr	r2, [r7, #12]
 8016ac8:	8992      	ldrh	r2, [r2, #12]
 8016aca:	fbb3 f0f2 	udiv	r0, r3, r2
 8016ace:	fb00 f202 	mul.w	r2, r0, r2
 8016ad2:	1a9b      	subs	r3, r3, r2
 8016ad4:	440b      	add	r3, r1
 8016ad6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	f003 0301 	and.w	r3, r3, #1
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d00d      	beq.n	8016afe <put_fat+0xb8>
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	781b      	ldrb	r3, [r3, #0]
 8016ae6:	b25b      	sxtb	r3, r3
 8016ae8:	f003 030f 	and.w	r3, r3, #15
 8016aec:	b25a      	sxtb	r2, r3
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	b2db      	uxtb	r3, r3
 8016af2:	011b      	lsls	r3, r3, #4
 8016af4:	b25b      	sxtb	r3, r3
 8016af6:	4313      	orrs	r3, r2
 8016af8:	b25b      	sxtb	r3, r3
 8016afa:	b2db      	uxtb	r3, r3
 8016afc:	e001      	b.n	8016b02 <put_fat+0xbc>
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	697a      	ldr	r2, [r7, #20]
 8016b04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2201      	movs	r2, #1
 8016b0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	899b      	ldrh	r3, [r3, #12]
 8016b14:	4619      	mov	r1, r3
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	fbb3 f3f1 	udiv	r3, r3, r1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	4619      	mov	r1, r3
 8016b20:	68f8      	ldr	r0, [r7, #12]
 8016b22:	f7ff fdff 	bl	8016724 <move_window>
 8016b26:	4603      	mov	r3, r0
 8016b28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016b2a:	7ffb      	ldrb	r3, [r7, #31]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	f040 809a 	bne.w	8016c66 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	899b      	ldrh	r3, [r3, #12]
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	69bb      	ldr	r3, [r7, #24]
 8016b40:	fbb3 f0f2 	udiv	r0, r3, r2
 8016b44:	fb00 f202 	mul.w	r2, r0, r2
 8016b48:	1a9b      	subs	r3, r3, r2
 8016b4a:	440b      	add	r3, r1
 8016b4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	f003 0301 	and.w	r3, r3, #1
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d003      	beq.n	8016b60 <put_fat+0x11a>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	091b      	lsrs	r3, r3, #4
 8016b5c:	b2db      	uxtb	r3, r3
 8016b5e:	e00e      	b.n	8016b7e <put_fat+0x138>
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	b25b      	sxtb	r3, r3
 8016b66:	f023 030f 	bic.w	r3, r3, #15
 8016b6a:	b25a      	sxtb	r2, r3
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	0a1b      	lsrs	r3, r3, #8
 8016b70:	b25b      	sxtb	r3, r3
 8016b72:	f003 030f 	and.w	r3, r3, #15
 8016b76:	b25b      	sxtb	r3, r3
 8016b78:	4313      	orrs	r3, r2
 8016b7a:	b25b      	sxtb	r3, r3
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	697a      	ldr	r2, [r7, #20]
 8016b80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	2201      	movs	r2, #1
 8016b86:	70da      	strb	r2, [r3, #3]
			break;
 8016b88:	e072      	b.n	8016c70 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	899b      	ldrh	r3, [r3, #12]
 8016b92:	085b      	lsrs	r3, r3, #1
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	4619      	mov	r1, r3
 8016b98:	68bb      	ldr	r3, [r7, #8]
 8016b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8016b9e:	4413      	add	r3, r2
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	68f8      	ldr	r0, [r7, #12]
 8016ba4:	f7ff fdbe 	bl	8016724 <move_window>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016bac:	7ffb      	ldrb	r3, [r7, #31]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d15b      	bne.n	8016c6a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	005b      	lsls	r3, r3, #1
 8016bbc:	68fa      	ldr	r2, [r7, #12]
 8016bbe:	8992      	ldrh	r2, [r2, #12]
 8016bc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8016bc4:	fb00 f202 	mul.w	r2, r0, r2
 8016bc8:	1a9b      	subs	r3, r3, r2
 8016bca:	440b      	add	r3, r1
 8016bcc:	687a      	ldr	r2, [r7, #4]
 8016bce:	b292      	uxth	r2, r2
 8016bd0:	4611      	mov	r1, r2
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7ff fb31 	bl	801623a <st_word>
			fs->wflag = 1;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	2201      	movs	r2, #1
 8016bdc:	70da      	strb	r2, [r3, #3]
			break;
 8016bde:	e047      	b.n	8016c70 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	899b      	ldrh	r3, [r3, #12]
 8016be8:	089b      	lsrs	r3, r3, #2
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	4619      	mov	r1, r3
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016bf4:	4413      	add	r3, r2
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	68f8      	ldr	r0, [r7, #12]
 8016bfa:	f7ff fd93 	bl	8016724 <move_window>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016c02:	7ffb      	ldrb	r3, [r7, #31]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d132      	bne.n	8016c6e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	009b      	lsls	r3, r3, #2
 8016c18:	68fa      	ldr	r2, [r7, #12]
 8016c1a:	8992      	ldrh	r2, [r2, #12]
 8016c1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016c20:	fb00 f202 	mul.w	r2, r0, r2
 8016c24:	1a9b      	subs	r3, r3, r2
 8016c26:	440b      	add	r3, r1
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f7ff fae3 	bl	80161f4 <ld_dword>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016c34:	4323      	orrs	r3, r4
 8016c36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016c3e:	68bb      	ldr	r3, [r7, #8]
 8016c40:	009b      	lsls	r3, r3, #2
 8016c42:	68fa      	ldr	r2, [r7, #12]
 8016c44:	8992      	ldrh	r2, [r2, #12]
 8016c46:	fbb3 f0f2 	udiv	r0, r3, r2
 8016c4a:	fb00 f202 	mul.w	r2, r0, r2
 8016c4e:	1a9b      	subs	r3, r3, r2
 8016c50:	440b      	add	r3, r1
 8016c52:	6879      	ldr	r1, [r7, #4]
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7ff fb0b 	bl	8016270 <st_dword>
			fs->wflag = 1;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	2201      	movs	r2, #1
 8016c5e:	70da      	strb	r2, [r3, #3]
			break;
 8016c60:	e006      	b.n	8016c70 <put_fat+0x22a>
			if (res != FR_OK) break;
 8016c62:	bf00      	nop
 8016c64:	e004      	b.n	8016c70 <put_fat+0x22a>
			if (res != FR_OK) break;
 8016c66:	bf00      	nop
 8016c68:	e002      	b.n	8016c70 <put_fat+0x22a>
			if (res != FR_OK) break;
 8016c6a:	bf00      	nop
 8016c6c:	e000      	b.n	8016c70 <put_fat+0x22a>
			if (res != FR_OK) break;
 8016c6e:	bf00      	nop
		}
	}
	return res;
 8016c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3724      	adds	r7, #36	; 0x24
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd90      	pop	{r4, r7, pc}

08016c7a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b088      	sub	sp, #32
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	60f8      	str	r0, [r7, #12]
 8016c82:	60b9      	str	r1, [r7, #8]
 8016c84:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016c86:	2300      	movs	r3, #0
 8016c88:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	2b01      	cmp	r3, #1
 8016c94:	d904      	bls.n	8016ca0 <remove_chain+0x26>
 8016c96:	69bb      	ldr	r3, [r7, #24]
 8016c98:	69db      	ldr	r3, [r3, #28]
 8016c9a:	68ba      	ldr	r2, [r7, #8]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d301      	bcc.n	8016ca4 <remove_chain+0x2a>
 8016ca0:	2302      	movs	r3, #2
 8016ca2:	e04b      	b.n	8016d3c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d00c      	beq.n	8016cc4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016caa:	f04f 32ff 	mov.w	r2, #4294967295
 8016cae:	6879      	ldr	r1, [r7, #4]
 8016cb0:	69b8      	ldr	r0, [r7, #24]
 8016cb2:	f7ff fec8 	bl	8016a46 <put_fat>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016cba:	7ffb      	ldrb	r3, [r7, #31]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <remove_chain+0x4a>
 8016cc0:	7ffb      	ldrb	r3, [r7, #31]
 8016cc2:	e03b      	b.n	8016d3c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016cc4:	68b9      	ldr	r1, [r7, #8]
 8016cc6:	68f8      	ldr	r0, [r7, #12]
 8016cc8:	f7ff fde9 	bl	801689e <get_fat>
 8016ccc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d031      	beq.n	8016d38 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016cd4:	697b      	ldr	r3, [r7, #20]
 8016cd6:	2b01      	cmp	r3, #1
 8016cd8:	d101      	bne.n	8016cde <remove_chain+0x64>
 8016cda:	2302      	movs	r3, #2
 8016cdc:	e02e      	b.n	8016d3c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ce4:	d101      	bne.n	8016cea <remove_chain+0x70>
 8016ce6:	2301      	movs	r3, #1
 8016ce8:	e028      	b.n	8016d3c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016cea:	2200      	movs	r2, #0
 8016cec:	68b9      	ldr	r1, [r7, #8]
 8016cee:	69b8      	ldr	r0, [r7, #24]
 8016cf0:	f7ff fea9 	bl	8016a46 <put_fat>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016cf8:	7ffb      	ldrb	r3, [r7, #31]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d001      	beq.n	8016d02 <remove_chain+0x88>
 8016cfe:	7ffb      	ldrb	r3, [r7, #31]
 8016d00:	e01c      	b.n	8016d3c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016d02:	69bb      	ldr	r3, [r7, #24]
 8016d04:	699a      	ldr	r2, [r3, #24]
 8016d06:	69bb      	ldr	r3, [r7, #24]
 8016d08:	69db      	ldr	r3, [r3, #28]
 8016d0a:	3b02      	subs	r3, #2
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d20b      	bcs.n	8016d28 <remove_chain+0xae>
			fs->free_clst++;
 8016d10:	69bb      	ldr	r3, [r7, #24]
 8016d12:	699b      	ldr	r3, [r3, #24]
 8016d14:	1c5a      	adds	r2, r3, #1
 8016d16:	69bb      	ldr	r3, [r7, #24]
 8016d18:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	791b      	ldrb	r3, [r3, #4]
 8016d1e:	f043 0301 	orr.w	r3, r3, #1
 8016d22:	b2da      	uxtb	r2, r3
 8016d24:	69bb      	ldr	r3, [r7, #24]
 8016d26:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016d2c:	69bb      	ldr	r3, [r7, #24]
 8016d2e:	69db      	ldr	r3, [r3, #28]
 8016d30:	68ba      	ldr	r2, [r7, #8]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d3c6      	bcc.n	8016cc4 <remove_chain+0x4a>
 8016d36:	e000      	b.n	8016d3a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016d38:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016d3a:	2300      	movs	r3, #0
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3720      	adds	r7, #32
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}

08016d44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b088      	sub	sp, #32
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
 8016d4c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d10d      	bne.n	8016d76 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	695b      	ldr	r3, [r3, #20]
 8016d5e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016d60:	69bb      	ldr	r3, [r7, #24]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d004      	beq.n	8016d70 <create_chain+0x2c>
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	69db      	ldr	r3, [r3, #28]
 8016d6a:	69ba      	ldr	r2, [r7, #24]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d31b      	bcc.n	8016da8 <create_chain+0x64>
 8016d70:	2301      	movs	r3, #1
 8016d72:	61bb      	str	r3, [r7, #24]
 8016d74:	e018      	b.n	8016da8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016d76:	6839      	ldr	r1, [r7, #0]
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f7ff fd90 	bl	801689e <get_fat>
 8016d7e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d801      	bhi.n	8016d8a <create_chain+0x46>
 8016d86:	2301      	movs	r3, #1
 8016d88:	e070      	b.n	8016e6c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d90:	d101      	bne.n	8016d96 <create_chain+0x52>
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	e06a      	b.n	8016e6c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	69db      	ldr	r3, [r3, #28]
 8016d9a:	68fa      	ldr	r2, [r7, #12]
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d201      	bcs.n	8016da4 <create_chain+0x60>
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	e063      	b.n	8016e6c <create_chain+0x128>
		scl = clst;
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016da8:	69bb      	ldr	r3, [r7, #24]
 8016daa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	3301      	adds	r3, #1
 8016db0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016db2:	693b      	ldr	r3, [r7, #16]
 8016db4:	69db      	ldr	r3, [r3, #28]
 8016db6:	69fa      	ldr	r2, [r7, #28]
 8016db8:	429a      	cmp	r2, r3
 8016dba:	d307      	bcc.n	8016dcc <create_chain+0x88>
				ncl = 2;
 8016dbc:	2302      	movs	r3, #2
 8016dbe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016dc0:	69fa      	ldr	r2, [r7, #28]
 8016dc2:	69bb      	ldr	r3, [r7, #24]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d901      	bls.n	8016dcc <create_chain+0x88>
 8016dc8:	2300      	movs	r3, #0
 8016dca:	e04f      	b.n	8016e6c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8016dcc:	69f9      	ldr	r1, [r7, #28]
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f7ff fd65 	bl	801689e <get_fat>
 8016dd4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d00e      	beq.n	8016dfa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2b01      	cmp	r3, #1
 8016de0:	d003      	beq.n	8016dea <create_chain+0xa6>
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016de8:	d101      	bne.n	8016dee <create_chain+0xaa>
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	e03e      	b.n	8016e6c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8016dee:	69fa      	ldr	r2, [r7, #28]
 8016df0:	69bb      	ldr	r3, [r7, #24]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d1da      	bne.n	8016dac <create_chain+0x68>
 8016df6:	2300      	movs	r3, #0
 8016df8:	e038      	b.n	8016e6c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8016dfa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8016e00:	69f9      	ldr	r1, [r7, #28]
 8016e02:	6938      	ldr	r0, [r7, #16]
 8016e04:	f7ff fe1f 	bl	8016a46 <put_fat>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016e0c:	7dfb      	ldrb	r3, [r7, #23]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d109      	bne.n	8016e26 <create_chain+0xe2>
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d006      	beq.n	8016e26 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8016e18:	69fa      	ldr	r2, [r7, #28]
 8016e1a:	6839      	ldr	r1, [r7, #0]
 8016e1c:	6938      	ldr	r0, [r7, #16]
 8016e1e:	f7ff fe12 	bl	8016a46 <put_fat>
 8016e22:	4603      	mov	r3, r0
 8016e24:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016e26:	7dfb      	ldrb	r3, [r7, #23]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d116      	bne.n	8016e5a <create_chain+0x116>
		fs->last_clst = ncl;
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	69fa      	ldr	r2, [r7, #28]
 8016e30:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	699a      	ldr	r2, [r3, #24]
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	69db      	ldr	r3, [r3, #28]
 8016e3a:	3b02      	subs	r3, #2
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	d804      	bhi.n	8016e4a <create_chain+0x106>
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	699b      	ldr	r3, [r3, #24]
 8016e44:	1e5a      	subs	r2, r3, #1
 8016e46:	693b      	ldr	r3, [r7, #16]
 8016e48:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	791b      	ldrb	r3, [r3, #4]
 8016e4e:	f043 0301 	orr.w	r3, r3, #1
 8016e52:	b2da      	uxtb	r2, r3
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	711a      	strb	r2, [r3, #4]
 8016e58:	e007      	b.n	8016e6a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016e5a:	7dfb      	ldrb	r3, [r7, #23]
 8016e5c:	2b01      	cmp	r3, #1
 8016e5e:	d102      	bne.n	8016e66 <create_chain+0x122>
 8016e60:	f04f 33ff 	mov.w	r3, #4294967295
 8016e64:	e000      	b.n	8016e68 <create_chain+0x124>
 8016e66:	2301      	movs	r3, #1
 8016e68:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016e6a:	69fb      	ldr	r3, [r7, #28]
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3720      	adds	r7, #32
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b086      	sub	sp, #24
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016e8a:	d204      	bcs.n	8016e96 <dir_sdi+0x22>
 8016e8c:	683b      	ldr	r3, [r7, #0]
 8016e8e:	f003 031f 	and.w	r3, r3, #31
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d001      	beq.n	8016e9a <dir_sdi+0x26>
		return FR_INT_ERR;
 8016e96:	2302      	movs	r3, #2
 8016e98:	e071      	b.n	8016f7e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	683a      	ldr	r2, [r7, #0]
 8016e9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	689b      	ldr	r3, [r3, #8]
 8016ea4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016ea6:	697b      	ldr	r3, [r7, #20]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d106      	bne.n	8016eba <dir_sdi+0x46>
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	781b      	ldrb	r3, [r3, #0]
 8016eb0:	2b02      	cmp	r3, #2
 8016eb2:	d902      	bls.n	8016eba <dir_sdi+0x46>
		clst = fs->dirbase;
 8016eb4:	693b      	ldr	r3, [r7, #16]
 8016eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eb8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d10c      	bne.n	8016eda <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	095b      	lsrs	r3, r3, #5
 8016ec4:	693a      	ldr	r2, [r7, #16]
 8016ec6:	8912      	ldrh	r2, [r2, #8]
 8016ec8:	4293      	cmp	r3, r2
 8016eca:	d301      	bcc.n	8016ed0 <dir_sdi+0x5c>
 8016ecc:	2302      	movs	r3, #2
 8016ece:	e056      	b.n	8016f7e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	61da      	str	r2, [r3, #28]
 8016ed8:	e02d      	b.n	8016f36 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016eda:	693b      	ldr	r3, [r7, #16]
 8016edc:	895b      	ldrh	r3, [r3, #10]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	693b      	ldr	r3, [r7, #16]
 8016ee2:	899b      	ldrh	r3, [r3, #12]
 8016ee4:	fb02 f303 	mul.w	r3, r2, r3
 8016ee8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016eea:	e019      	b.n	8016f20 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6979      	ldr	r1, [r7, #20]
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7ff fcd4 	bl	801689e <get_fat>
 8016ef6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016efe:	d101      	bne.n	8016f04 <dir_sdi+0x90>
 8016f00:	2301      	movs	r3, #1
 8016f02:	e03c      	b.n	8016f7e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016f04:	697b      	ldr	r3, [r7, #20]
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d904      	bls.n	8016f14 <dir_sdi+0xa0>
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	69db      	ldr	r3, [r3, #28]
 8016f0e:	697a      	ldr	r2, [r7, #20]
 8016f10:	429a      	cmp	r2, r3
 8016f12:	d301      	bcc.n	8016f18 <dir_sdi+0xa4>
 8016f14:	2302      	movs	r3, #2
 8016f16:	e032      	b.n	8016f7e <dir_sdi+0x10a>
			ofs -= csz;
 8016f18:	683a      	ldr	r2, [r7, #0]
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	1ad3      	subs	r3, r2, r3
 8016f1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016f20:	683a      	ldr	r2, [r7, #0]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d2e1      	bcs.n	8016eec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8016f28:	6979      	ldr	r1, [r7, #20]
 8016f2a:	6938      	ldr	r0, [r7, #16]
 8016f2c:	f7ff fc98 	bl	8016860 <clust2sect>
 8016f30:	4602      	mov	r2, r0
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	697a      	ldr	r2, [r7, #20]
 8016f3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	69db      	ldr	r3, [r3, #28]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d101      	bne.n	8016f48 <dir_sdi+0xd4>
 8016f44:	2302      	movs	r3, #2
 8016f46:	e01a      	b.n	8016f7e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	69da      	ldr	r2, [r3, #28]
 8016f4c:	693b      	ldr	r3, [r7, #16]
 8016f4e:	899b      	ldrh	r3, [r3, #12]
 8016f50:	4619      	mov	r1, r3
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	fbb3 f3f1 	udiv	r3, r3, r1
 8016f58:	441a      	add	r2, r3
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016f64:	693b      	ldr	r3, [r7, #16]
 8016f66:	899b      	ldrh	r3, [r3, #12]
 8016f68:	461a      	mov	r2, r3
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016f70:	fb00 f202 	mul.w	r2, r0, r2
 8016f74:	1a9b      	subs	r3, r3, r2
 8016f76:	18ca      	adds	r2, r1, r3
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016f7c:	2300      	movs	r3, #0
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	3718      	adds	r7, #24
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}

08016f86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8016f86:	b580      	push	{r7, lr}
 8016f88:	b086      	sub	sp, #24
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	6078      	str	r0, [r7, #4]
 8016f8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	695b      	ldr	r3, [r3, #20]
 8016f9a:	3320      	adds	r3, #32
 8016f9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	69db      	ldr	r3, [r3, #28]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d003      	beq.n	8016fae <dir_next+0x28>
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016fac:	d301      	bcc.n	8016fb2 <dir_next+0x2c>
 8016fae:	2304      	movs	r3, #4
 8016fb0:	e0bb      	b.n	801712a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	899b      	ldrh	r3, [r3, #12]
 8016fb6:	461a      	mov	r2, r3
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8016fbe:	fb01 f202 	mul.w	r2, r1, r2
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	f040 809d 	bne.w	8017104 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	69db      	ldr	r3, [r3, #28]
 8016fce:	1c5a      	adds	r2, r3, #1
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	699b      	ldr	r3, [r3, #24]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d10b      	bne.n	8016ff4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016fdc:	68bb      	ldr	r3, [r7, #8]
 8016fde:	095b      	lsrs	r3, r3, #5
 8016fe0:	68fa      	ldr	r2, [r7, #12]
 8016fe2:	8912      	ldrh	r2, [r2, #8]
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	f0c0 808d 	bcc.w	8017104 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2200      	movs	r2, #0
 8016fee:	61da      	str	r2, [r3, #28]
 8016ff0:	2304      	movs	r3, #4
 8016ff2:	e09a      	b.n	801712a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	899b      	ldrh	r3, [r3, #12]
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8017000:	68fa      	ldr	r2, [r7, #12]
 8017002:	8952      	ldrh	r2, [r2, #10]
 8017004:	3a01      	subs	r2, #1
 8017006:	4013      	ands	r3, r2
 8017008:	2b00      	cmp	r3, #0
 801700a:	d17b      	bne.n	8017104 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	699b      	ldr	r3, [r3, #24]
 8017012:	4619      	mov	r1, r3
 8017014:	4610      	mov	r0, r2
 8017016:	f7ff fc42 	bl	801689e <get_fat>
 801701a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	2b01      	cmp	r3, #1
 8017020:	d801      	bhi.n	8017026 <dir_next+0xa0>
 8017022:	2302      	movs	r3, #2
 8017024:	e081      	b.n	801712a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017026:	697b      	ldr	r3, [r7, #20]
 8017028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801702c:	d101      	bne.n	8017032 <dir_next+0xac>
 801702e:	2301      	movs	r3, #1
 8017030:	e07b      	b.n	801712a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	69db      	ldr	r3, [r3, #28]
 8017036:	697a      	ldr	r2, [r7, #20]
 8017038:	429a      	cmp	r2, r3
 801703a:	d359      	bcc.n	80170f0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d104      	bne.n	801704c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	2200      	movs	r2, #0
 8017046:	61da      	str	r2, [r3, #28]
 8017048:	2304      	movs	r3, #4
 801704a:	e06e      	b.n	801712a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	699b      	ldr	r3, [r3, #24]
 8017052:	4619      	mov	r1, r3
 8017054:	4610      	mov	r0, r2
 8017056:	f7ff fe75 	bl	8016d44 <create_chain>
 801705a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d101      	bne.n	8017066 <dir_next+0xe0>
 8017062:	2307      	movs	r3, #7
 8017064:	e061      	b.n	801712a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	2b01      	cmp	r3, #1
 801706a:	d101      	bne.n	8017070 <dir_next+0xea>
 801706c:	2302      	movs	r3, #2
 801706e:	e05c      	b.n	801712a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017076:	d101      	bne.n	801707c <dir_next+0xf6>
 8017078:	2301      	movs	r3, #1
 801707a:	e056      	b.n	801712a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801707c:	68f8      	ldr	r0, [r7, #12]
 801707e:	f7ff fb0d 	bl	801669c <sync_window>
 8017082:	4603      	mov	r3, r0
 8017084:	2b00      	cmp	r3, #0
 8017086:	d001      	beq.n	801708c <dir_next+0x106>
 8017088:	2301      	movs	r3, #1
 801708a:	e04e      	b.n	801712a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	899b      	ldrh	r3, [r3, #12]
 8017096:	461a      	mov	r2, r3
 8017098:	2100      	movs	r1, #0
 801709a:	f7ff f936 	bl	801630a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801709e:	2300      	movs	r3, #0
 80170a0:	613b      	str	r3, [r7, #16]
 80170a2:	6979      	ldr	r1, [r7, #20]
 80170a4:	68f8      	ldr	r0, [r7, #12]
 80170a6:	f7ff fbdb 	bl	8016860 <clust2sect>
 80170aa:	4602      	mov	r2, r0
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	635a      	str	r2, [r3, #52]	; 0x34
 80170b0:	e012      	b.n	80170d8 <dir_next+0x152>
						fs->wflag = 1;
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	2201      	movs	r2, #1
 80170b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80170b8:	68f8      	ldr	r0, [r7, #12]
 80170ba:	f7ff faef 	bl	801669c <sync_window>
 80170be:	4603      	mov	r3, r0
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d001      	beq.n	80170c8 <dir_next+0x142>
 80170c4:	2301      	movs	r3, #1
 80170c6:	e030      	b.n	801712a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80170c8:	693b      	ldr	r3, [r7, #16]
 80170ca:	3301      	adds	r3, #1
 80170cc:	613b      	str	r3, [r7, #16]
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170d2:	1c5a      	adds	r2, r3, #1
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	635a      	str	r2, [r3, #52]	; 0x34
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	895b      	ldrh	r3, [r3, #10]
 80170dc:	461a      	mov	r2, r3
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	4293      	cmp	r3, r2
 80170e2:	d3e6      	bcc.n	80170b2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80170e8:	693b      	ldr	r3, [r7, #16]
 80170ea:	1ad2      	subs	r2, r2, r3
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	697a      	ldr	r2, [r7, #20]
 80170f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80170f6:	6979      	ldr	r1, [r7, #20]
 80170f8:	68f8      	ldr	r0, [r7, #12]
 80170fa:	f7ff fbb1 	bl	8016860 <clust2sect>
 80170fe:	4602      	mov	r2, r0
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	68ba      	ldr	r2, [r7, #8]
 8017108:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	899b      	ldrh	r3, [r3, #12]
 8017114:	461a      	mov	r2, r3
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	fbb3 f0f2 	udiv	r0, r3, r2
 801711c:	fb00 f202 	mul.w	r2, r0, r2
 8017120:	1a9b      	subs	r3, r3, r2
 8017122:	18ca      	adds	r2, r1, r3
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017128:	2300      	movs	r3, #0
}
 801712a:	4618      	mov	r0, r3
 801712c:	3718      	adds	r7, #24
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}

08017132 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017132:	b580      	push	{r7, lr}
 8017134:	b086      	sub	sp, #24
 8017136:	af00      	add	r7, sp, #0
 8017138:	6078      	str	r0, [r7, #4]
 801713a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017142:	2100      	movs	r1, #0
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f7ff fe95 	bl	8016e74 <dir_sdi>
 801714a:	4603      	mov	r3, r0
 801714c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801714e:	7dfb      	ldrb	r3, [r7, #23]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d12b      	bne.n	80171ac <dir_alloc+0x7a>
		n = 0;
 8017154:	2300      	movs	r3, #0
 8017156:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	69db      	ldr	r3, [r3, #28]
 801715c:	4619      	mov	r1, r3
 801715e:	68f8      	ldr	r0, [r7, #12]
 8017160:	f7ff fae0 	bl	8016724 <move_window>
 8017164:	4603      	mov	r3, r0
 8017166:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017168:	7dfb      	ldrb	r3, [r7, #23]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d11d      	bne.n	80171aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	6a1b      	ldr	r3, [r3, #32]
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	2be5      	cmp	r3, #229	; 0xe5
 8017176:	d004      	beq.n	8017182 <dir_alloc+0x50>
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6a1b      	ldr	r3, [r3, #32]
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d107      	bne.n	8017192 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	3301      	adds	r3, #1
 8017186:	613b      	str	r3, [r7, #16]
 8017188:	693a      	ldr	r2, [r7, #16]
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	429a      	cmp	r2, r3
 801718e:	d102      	bne.n	8017196 <dir_alloc+0x64>
 8017190:	e00c      	b.n	80171ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017192:	2300      	movs	r3, #0
 8017194:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017196:	2101      	movs	r1, #1
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f7ff fef4 	bl	8016f86 <dir_next>
 801719e:	4603      	mov	r3, r0
 80171a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80171a2:	7dfb      	ldrb	r3, [r7, #23]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d0d7      	beq.n	8017158 <dir_alloc+0x26>
 80171a8:	e000      	b.n	80171ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80171aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80171ac:	7dfb      	ldrb	r3, [r7, #23]
 80171ae:	2b04      	cmp	r3, #4
 80171b0:	d101      	bne.n	80171b6 <dir_alloc+0x84>
 80171b2:	2307      	movs	r3, #7
 80171b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80171b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80171b8:	4618      	mov	r0, r3
 80171ba:	3718      	adds	r7, #24
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd80      	pop	{r7, pc}

080171c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	331a      	adds	r3, #26
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7fe fff8 	bl	80161c4 <ld_word>
 80171d4:	4603      	mov	r3, r0
 80171d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	781b      	ldrb	r3, [r3, #0]
 80171dc:	2b03      	cmp	r3, #3
 80171de:	d109      	bne.n	80171f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	3314      	adds	r3, #20
 80171e4:	4618      	mov	r0, r3
 80171e6:	f7fe ffed 	bl	80161c4 <ld_word>
 80171ea:	4603      	mov	r3, r0
 80171ec:	041b      	lsls	r3, r3, #16
 80171ee:	68fa      	ldr	r2, [r7, #12]
 80171f0:	4313      	orrs	r3, r2
 80171f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80171f4:	68fb      	ldr	r3, [r7, #12]
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}

080171fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80171fe:	b580      	push	{r7, lr}
 8017200:	b084      	sub	sp, #16
 8017202:	af00      	add	r7, sp, #0
 8017204:	60f8      	str	r0, [r7, #12]
 8017206:	60b9      	str	r1, [r7, #8]
 8017208:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	331a      	adds	r3, #26
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	b292      	uxth	r2, r2
 8017212:	4611      	mov	r1, r2
 8017214:	4618      	mov	r0, r3
 8017216:	f7ff f810 	bl	801623a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	2b03      	cmp	r3, #3
 8017220:	d109      	bne.n	8017236 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	f103 0214 	add.w	r2, r3, #20
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	0c1b      	lsrs	r3, r3, #16
 801722c:	b29b      	uxth	r3, r3
 801722e:	4619      	mov	r1, r3
 8017230:	4610      	mov	r0, r2
 8017232:	f7ff f802 	bl	801623a <st_word>
	}
}
 8017236:	bf00      	nop
 8017238:	3710      	adds	r7, #16
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
	...

08017240 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8017240:	b590      	push	{r4, r7, lr}
 8017242:	b087      	sub	sp, #28
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	331a      	adds	r3, #26
 801724e:	4618      	mov	r0, r3
 8017250:	f7fe ffb8 	bl	80161c4 <ld_word>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d001      	beq.n	801725e <cmp_lfn+0x1e>
 801725a:	2300      	movs	r3, #0
 801725c:	e059      	b.n	8017312 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017266:	1e5a      	subs	r2, r3, #1
 8017268:	4613      	mov	r3, r2
 801726a:	005b      	lsls	r3, r3, #1
 801726c:	4413      	add	r3, r2
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	4413      	add	r3, r2
 8017272:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017274:	2301      	movs	r3, #1
 8017276:	81fb      	strh	r3, [r7, #14]
 8017278:	2300      	movs	r3, #0
 801727a:	613b      	str	r3, [r7, #16]
 801727c:	e033      	b.n	80172e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801727e:	4a27      	ldr	r2, [pc, #156]	; (801731c <cmp_lfn+0xdc>)
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	4413      	add	r3, r2
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	461a      	mov	r2, r3
 8017288:	683b      	ldr	r3, [r7, #0]
 801728a:	4413      	add	r3, r2
 801728c:	4618      	mov	r0, r3
 801728e:	f7fe ff99 	bl	80161c4 <ld_word>
 8017292:	4603      	mov	r3, r0
 8017294:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8017296:	89fb      	ldrh	r3, [r7, #14]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d01a      	beq.n	80172d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	2bfe      	cmp	r3, #254	; 0xfe
 80172a0:	d812      	bhi.n	80172c8 <cmp_lfn+0x88>
 80172a2:	89bb      	ldrh	r3, [r7, #12]
 80172a4:	4618      	mov	r0, r3
 80172a6:	f001 fbe1 	bl	8018a6c <ff_wtoupper>
 80172aa:	4603      	mov	r3, r0
 80172ac:	461c      	mov	r4, r3
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	1c5a      	adds	r2, r3, #1
 80172b2:	617a      	str	r2, [r7, #20]
 80172b4:	005b      	lsls	r3, r3, #1
 80172b6:	687a      	ldr	r2, [r7, #4]
 80172b8:	4413      	add	r3, r2
 80172ba:	881b      	ldrh	r3, [r3, #0]
 80172bc:	4618      	mov	r0, r3
 80172be:	f001 fbd5 	bl	8018a6c <ff_wtoupper>
 80172c2:	4603      	mov	r3, r0
 80172c4:	429c      	cmp	r4, r3
 80172c6:	d001      	beq.n	80172cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80172c8:	2300      	movs	r3, #0
 80172ca:	e022      	b.n	8017312 <cmp_lfn+0xd2>
			}
			wc = uc;
 80172cc:	89bb      	ldrh	r3, [r7, #12]
 80172ce:	81fb      	strh	r3, [r7, #14]
 80172d0:	e006      	b.n	80172e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80172d2:	89bb      	ldrh	r3, [r7, #12]
 80172d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80172d8:	4293      	cmp	r3, r2
 80172da:	d001      	beq.n	80172e0 <cmp_lfn+0xa0>
 80172dc:	2300      	movs	r3, #0
 80172de:	e018      	b.n	8017312 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80172e0:	693b      	ldr	r3, [r7, #16]
 80172e2:	3301      	adds	r3, #1
 80172e4:	613b      	str	r3, [r7, #16]
 80172e6:	693b      	ldr	r3, [r7, #16]
 80172e8:	2b0c      	cmp	r3, #12
 80172ea:	d9c8      	bls.n	801727e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d00b      	beq.n	8017310 <cmp_lfn+0xd0>
 80172f8:	89fb      	ldrh	r3, [r7, #14]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d008      	beq.n	8017310 <cmp_lfn+0xd0>
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	005b      	lsls	r3, r3, #1
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	4413      	add	r3, r2
 8017306:	881b      	ldrh	r3, [r3, #0]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d001      	beq.n	8017310 <cmp_lfn+0xd0>
 801730c:	2300      	movs	r3, #0
 801730e:	e000      	b.n	8017312 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8017310:	2301      	movs	r3, #1
}
 8017312:	4618      	mov	r0, r3
 8017314:	371c      	adds	r7, #28
 8017316:	46bd      	mov	sp, r7
 8017318:	bd90      	pop	{r4, r7, pc}
 801731a:	bf00      	nop
 801731c:	0801dd78 	.word	0x0801dd78

08017320 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b088      	sub	sp, #32
 8017324:	af00      	add	r7, sp, #0
 8017326:	60f8      	str	r0, [r7, #12]
 8017328:	60b9      	str	r1, [r7, #8]
 801732a:	4611      	mov	r1, r2
 801732c:	461a      	mov	r2, r3
 801732e:	460b      	mov	r3, r1
 8017330:	71fb      	strb	r3, [r7, #7]
 8017332:	4613      	mov	r3, r2
 8017334:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	330d      	adds	r3, #13
 801733a:	79ba      	ldrb	r2, [r7, #6]
 801733c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801733e:	68bb      	ldr	r3, [r7, #8]
 8017340:	330b      	adds	r3, #11
 8017342:	220f      	movs	r2, #15
 8017344:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	330c      	adds	r3, #12
 801734a:	2200      	movs	r2, #0
 801734c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	331a      	adds	r3, #26
 8017352:	2100      	movs	r1, #0
 8017354:	4618      	mov	r0, r3
 8017356:	f7fe ff70 	bl	801623a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801735a:	79fb      	ldrb	r3, [r7, #7]
 801735c:	1e5a      	subs	r2, r3, #1
 801735e:	4613      	mov	r3, r2
 8017360:	005b      	lsls	r3, r3, #1
 8017362:	4413      	add	r3, r2
 8017364:	009b      	lsls	r3, r3, #2
 8017366:	4413      	add	r3, r2
 8017368:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801736a:	2300      	movs	r3, #0
 801736c:	82fb      	strh	r3, [r7, #22]
 801736e:	2300      	movs	r3, #0
 8017370:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017372:	8afb      	ldrh	r3, [r7, #22]
 8017374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017378:	4293      	cmp	r3, r2
 801737a:	d007      	beq.n	801738c <put_lfn+0x6c>
 801737c:	69fb      	ldr	r3, [r7, #28]
 801737e:	1c5a      	adds	r2, r3, #1
 8017380:	61fa      	str	r2, [r7, #28]
 8017382:	005b      	lsls	r3, r3, #1
 8017384:	68fa      	ldr	r2, [r7, #12]
 8017386:	4413      	add	r3, r2
 8017388:	881b      	ldrh	r3, [r3, #0]
 801738a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801738c:	4a17      	ldr	r2, [pc, #92]	; (80173ec <put_lfn+0xcc>)
 801738e:	69bb      	ldr	r3, [r7, #24]
 8017390:	4413      	add	r3, r2
 8017392:	781b      	ldrb	r3, [r3, #0]
 8017394:	461a      	mov	r2, r3
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	4413      	add	r3, r2
 801739a:	8afa      	ldrh	r2, [r7, #22]
 801739c:	4611      	mov	r1, r2
 801739e:	4618      	mov	r0, r3
 80173a0:	f7fe ff4b 	bl	801623a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80173a4:	8afb      	ldrh	r3, [r7, #22]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d102      	bne.n	80173b0 <put_lfn+0x90>
 80173aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80173b0:	69bb      	ldr	r3, [r7, #24]
 80173b2:	3301      	adds	r3, #1
 80173b4:	61bb      	str	r3, [r7, #24]
 80173b6:	69bb      	ldr	r3, [r7, #24]
 80173b8:	2b0c      	cmp	r3, #12
 80173ba:	d9da      	bls.n	8017372 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80173bc:	8afb      	ldrh	r3, [r7, #22]
 80173be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173c2:	4293      	cmp	r3, r2
 80173c4:	d006      	beq.n	80173d4 <put_lfn+0xb4>
 80173c6:	69fb      	ldr	r3, [r7, #28]
 80173c8:	005b      	lsls	r3, r3, #1
 80173ca:	68fa      	ldr	r2, [r7, #12]
 80173cc:	4413      	add	r3, r2
 80173ce:	881b      	ldrh	r3, [r3, #0]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d103      	bne.n	80173dc <put_lfn+0xbc>
 80173d4:	79fb      	ldrb	r3, [r7, #7]
 80173d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	79fa      	ldrb	r2, [r7, #7]
 80173e0:	701a      	strb	r2, [r3, #0]
}
 80173e2:	bf00      	nop
 80173e4:	3720      	adds	r7, #32
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}
 80173ea:	bf00      	nop
 80173ec:	0801dd78 	.word	0x0801dd78

080173f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b08c      	sub	sp, #48	; 0x30
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	60f8      	str	r0, [r7, #12]
 80173f8:	60b9      	str	r1, [r7, #8]
 80173fa:	607a      	str	r2, [r7, #4]
 80173fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80173fe:	220b      	movs	r2, #11
 8017400:	68b9      	ldr	r1, [r7, #8]
 8017402:	68f8      	ldr	r0, [r7, #12]
 8017404:	f7fe ff60 	bl	80162c8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	2b05      	cmp	r3, #5
 801740c:	d929      	bls.n	8017462 <gen_numname+0x72>
		sr = seq;
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8017412:	e020      	b.n	8017456 <gen_numname+0x66>
			wc = *lfn++;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	1c9a      	adds	r2, r3, #2
 8017418:	607a      	str	r2, [r7, #4]
 801741a:	881b      	ldrh	r3, [r3, #0]
 801741c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801741e:	2300      	movs	r3, #0
 8017420:	62bb      	str	r3, [r7, #40]	; 0x28
 8017422:	e015      	b.n	8017450 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8017424:	69fb      	ldr	r3, [r7, #28]
 8017426:	005a      	lsls	r2, r3, #1
 8017428:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801742a:	f003 0301 	and.w	r3, r3, #1
 801742e:	4413      	add	r3, r2
 8017430:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8017432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017434:	085b      	lsrs	r3, r3, #1
 8017436:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8017438:	69fb      	ldr	r3, [r7, #28]
 801743a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801743e:	2b00      	cmp	r3, #0
 8017440:	d003      	beq.n	801744a <gen_numname+0x5a>
 8017442:	69fa      	ldr	r2, [r7, #28]
 8017444:	4b30      	ldr	r3, [pc, #192]	; (8017508 <gen_numname+0x118>)
 8017446:	4053      	eors	r3, r2
 8017448:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801744c:	3301      	adds	r3, #1
 801744e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017452:	2b0f      	cmp	r3, #15
 8017454:	d9e6      	bls.n	8017424 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d1da      	bne.n	8017414 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801745e:	69fb      	ldr	r3, [r7, #28]
 8017460:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8017462:	2307      	movs	r3, #7
 8017464:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	b2db      	uxtb	r3, r3
 801746a:	f003 030f 	and.w	r3, r3, #15
 801746e:	b2db      	uxtb	r3, r3
 8017470:	3330      	adds	r3, #48	; 0x30
 8017472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8017476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801747a:	2b39      	cmp	r3, #57	; 0x39
 801747c:	d904      	bls.n	8017488 <gen_numname+0x98>
 801747e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017482:	3307      	adds	r3, #7
 8017484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8017488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801748a:	1e5a      	subs	r2, r3, #1
 801748c:	62ba      	str	r2, [r7, #40]	; 0x28
 801748e:	3330      	adds	r3, #48	; 0x30
 8017490:	443b      	add	r3, r7
 8017492:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017496:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	091b      	lsrs	r3, r3, #4
 801749e:	603b      	str	r3, [r7, #0]
	} while (seq);
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d1df      	bne.n	8017466 <gen_numname+0x76>
	ns[i] = '~';
 80174a6:	f107 0214 	add.w	r2, r7, #20
 80174aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ac:	4413      	add	r3, r2
 80174ae:	227e      	movs	r2, #126	; 0x7e
 80174b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80174b2:	2300      	movs	r3, #0
 80174b4:	627b      	str	r3, [r7, #36]	; 0x24
 80174b6:	e002      	b.n	80174be <gen_numname+0xce>
 80174b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ba:	3301      	adds	r3, #1
 80174bc:	627b      	str	r3, [r7, #36]	; 0x24
 80174be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d205      	bcs.n	80174d2 <gen_numname+0xe2>
 80174c6:	68fa      	ldr	r2, [r7, #12]
 80174c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ca:	4413      	add	r3, r2
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	2b20      	cmp	r3, #32
 80174d0:	d1f2      	bne.n	80174b8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80174d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d4:	2b07      	cmp	r3, #7
 80174d6:	d807      	bhi.n	80174e8 <gen_numname+0xf8>
 80174d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174da:	1c5a      	adds	r2, r3, #1
 80174dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80174de:	3330      	adds	r3, #48	; 0x30
 80174e0:	443b      	add	r3, r7
 80174e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80174e6:	e000      	b.n	80174ea <gen_numname+0xfa>
 80174e8:	2120      	movs	r1, #32
 80174ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ec:	1c5a      	adds	r2, r3, #1
 80174ee:	627a      	str	r2, [r7, #36]	; 0x24
 80174f0:	68fa      	ldr	r2, [r7, #12]
 80174f2:	4413      	add	r3, r2
 80174f4:	460a      	mov	r2, r1
 80174f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80174f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174fa:	2b07      	cmp	r3, #7
 80174fc:	d9e9      	bls.n	80174d2 <gen_numname+0xe2>
}
 80174fe:	bf00      	nop
 8017500:	bf00      	nop
 8017502:	3730      	adds	r7, #48	; 0x30
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}
 8017508:	00011021 	.word	0x00011021

0801750c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801750c:	b480      	push	{r7}
 801750e:	b085      	sub	sp, #20
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8017514:	2300      	movs	r3, #0
 8017516:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8017518:	230b      	movs	r3, #11
 801751a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801751c:	7bfb      	ldrb	r3, [r7, #15]
 801751e:	b2da      	uxtb	r2, r3
 8017520:	0852      	lsrs	r2, r2, #1
 8017522:	01db      	lsls	r3, r3, #7
 8017524:	4313      	orrs	r3, r2
 8017526:	b2da      	uxtb	r2, r3
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	1c59      	adds	r1, r3, #1
 801752c:	6079      	str	r1, [r7, #4]
 801752e:	781b      	ldrb	r3, [r3, #0]
 8017530:	4413      	add	r3, r2
 8017532:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	3b01      	subs	r3, #1
 8017538:	60bb      	str	r3, [r7, #8]
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d1ed      	bne.n	801751c <sum_sfn+0x10>
	return sum;
 8017540:	7bfb      	ldrb	r3, [r7, #15]
}
 8017542:	4618      	mov	r0, r3
 8017544:	3714      	adds	r7, #20
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr

0801754e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801754e:	b580      	push	{r7, lr}
 8017550:	b086      	sub	sp, #24
 8017552:	af00      	add	r7, sp, #0
 8017554:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801755c:	2100      	movs	r1, #0
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f7ff fc88 	bl	8016e74 <dir_sdi>
 8017564:	4603      	mov	r3, r0
 8017566:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017568:	7dfb      	ldrb	r3, [r7, #23]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d001      	beq.n	8017572 <dir_find+0x24>
 801756e:	7dfb      	ldrb	r3, [r7, #23]
 8017570:	e0a9      	b.n	80176c6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017572:	23ff      	movs	r3, #255	; 0xff
 8017574:	753b      	strb	r3, [r7, #20]
 8017576:	7d3b      	ldrb	r3, [r7, #20]
 8017578:	757b      	strb	r3, [r7, #21]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f04f 32ff 	mov.w	r2, #4294967295
 8017580:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	69db      	ldr	r3, [r3, #28]
 8017586:	4619      	mov	r1, r3
 8017588:	6938      	ldr	r0, [r7, #16]
 801758a:	f7ff f8cb 	bl	8016724 <move_window>
 801758e:	4603      	mov	r3, r0
 8017590:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017592:	7dfb      	ldrb	r3, [r7, #23]
 8017594:	2b00      	cmp	r3, #0
 8017596:	f040 8090 	bne.w	80176ba <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	6a1b      	ldr	r3, [r3, #32]
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80175a2:	7dbb      	ldrb	r3, [r7, #22]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d102      	bne.n	80175ae <dir_find+0x60>
 80175a8:	2304      	movs	r3, #4
 80175aa:	75fb      	strb	r3, [r7, #23]
 80175ac:	e08a      	b.n	80176c4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6a1b      	ldr	r3, [r3, #32]
 80175b2:	330b      	adds	r3, #11
 80175b4:	781b      	ldrb	r3, [r3, #0]
 80175b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80175ba:	73fb      	strb	r3, [r7, #15]
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	7bfa      	ldrb	r2, [r7, #15]
 80175c0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80175c2:	7dbb      	ldrb	r3, [r7, #22]
 80175c4:	2be5      	cmp	r3, #229	; 0xe5
 80175c6:	d007      	beq.n	80175d8 <dir_find+0x8a>
 80175c8:	7bfb      	ldrb	r3, [r7, #15]
 80175ca:	f003 0308 	and.w	r3, r3, #8
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d009      	beq.n	80175e6 <dir_find+0x98>
 80175d2:	7bfb      	ldrb	r3, [r7, #15]
 80175d4:	2b0f      	cmp	r3, #15
 80175d6:	d006      	beq.n	80175e6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80175d8:	23ff      	movs	r3, #255	; 0xff
 80175da:	757b      	strb	r3, [r7, #21]
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f04f 32ff 	mov.w	r2, #4294967295
 80175e2:	631a      	str	r2, [r3, #48]	; 0x30
 80175e4:	e05e      	b.n	80176a4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80175e6:	7bfb      	ldrb	r3, [r7, #15]
 80175e8:	2b0f      	cmp	r3, #15
 80175ea:	d136      	bne.n	801765a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80175f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d154      	bne.n	80176a4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80175fa:	7dbb      	ldrb	r3, [r7, #22]
 80175fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017600:	2b00      	cmp	r3, #0
 8017602:	d00d      	beq.n	8017620 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6a1b      	ldr	r3, [r3, #32]
 8017608:	7b5b      	ldrb	r3, [r3, #13]
 801760a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801760c:	7dbb      	ldrb	r3, [r7, #22]
 801760e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017612:	75bb      	strb	r3, [r7, #22]
 8017614:	7dbb      	ldrb	r3, [r7, #22]
 8017616:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	695a      	ldr	r2, [r3, #20]
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017620:	7dba      	ldrb	r2, [r7, #22]
 8017622:	7d7b      	ldrb	r3, [r7, #21]
 8017624:	429a      	cmp	r2, r3
 8017626:	d115      	bne.n	8017654 <dir_find+0x106>
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	6a1b      	ldr	r3, [r3, #32]
 801762c:	330d      	adds	r3, #13
 801762e:	781b      	ldrb	r3, [r3, #0]
 8017630:	7d3a      	ldrb	r2, [r7, #20]
 8017632:	429a      	cmp	r2, r3
 8017634:	d10e      	bne.n	8017654 <dir_find+0x106>
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	691a      	ldr	r2, [r3, #16]
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	6a1b      	ldr	r3, [r3, #32]
 801763e:	4619      	mov	r1, r3
 8017640:	4610      	mov	r0, r2
 8017642:	f7ff fdfd 	bl	8017240 <cmp_lfn>
 8017646:	4603      	mov	r3, r0
 8017648:	2b00      	cmp	r3, #0
 801764a:	d003      	beq.n	8017654 <dir_find+0x106>
 801764c:	7d7b      	ldrb	r3, [r7, #21]
 801764e:	3b01      	subs	r3, #1
 8017650:	b2db      	uxtb	r3, r3
 8017652:	e000      	b.n	8017656 <dir_find+0x108>
 8017654:	23ff      	movs	r3, #255	; 0xff
 8017656:	757b      	strb	r3, [r7, #21]
 8017658:	e024      	b.n	80176a4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801765a:	7d7b      	ldrb	r3, [r7, #21]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d109      	bne.n	8017674 <dir_find+0x126>
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	6a1b      	ldr	r3, [r3, #32]
 8017664:	4618      	mov	r0, r3
 8017666:	f7ff ff51 	bl	801750c <sum_sfn>
 801766a:	4603      	mov	r3, r0
 801766c:	461a      	mov	r2, r3
 801766e:	7d3b      	ldrb	r3, [r7, #20]
 8017670:	4293      	cmp	r3, r2
 8017672:	d024      	beq.n	80176be <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801767a:	f003 0301 	and.w	r3, r3, #1
 801767e:	2b00      	cmp	r3, #0
 8017680:	d10a      	bne.n	8017698 <dir_find+0x14a>
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6a18      	ldr	r0, [r3, #32]
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	3324      	adds	r3, #36	; 0x24
 801768a:	220b      	movs	r2, #11
 801768c:	4619      	mov	r1, r3
 801768e:	f7fe fe57 	bl	8016340 <mem_cmp>
 8017692:	4603      	mov	r3, r0
 8017694:	2b00      	cmp	r3, #0
 8017696:	d014      	beq.n	80176c2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017698:	23ff      	movs	r3, #255	; 0xff
 801769a:	757b      	strb	r3, [r7, #21]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f04f 32ff 	mov.w	r2, #4294967295
 80176a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80176a4:	2100      	movs	r1, #0
 80176a6:	6878      	ldr	r0, [r7, #4]
 80176a8:	f7ff fc6d 	bl	8016f86 <dir_next>
 80176ac:	4603      	mov	r3, r0
 80176ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80176b0:	7dfb      	ldrb	r3, [r7, #23]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	f43f af65 	beq.w	8017582 <dir_find+0x34>
 80176b8:	e004      	b.n	80176c4 <dir_find+0x176>
		if (res != FR_OK) break;
 80176ba:	bf00      	nop
 80176bc:	e002      	b.n	80176c4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80176be:	bf00      	nop
 80176c0:	e000      	b.n	80176c4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80176c2:	bf00      	nop

	return res;
 80176c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3718      	adds	r7, #24
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
	...

080176d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b08c      	sub	sp, #48	; 0x30
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80176e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d001      	beq.n	80176f0 <dir_register+0x20>
 80176ec:	2306      	movs	r3, #6
 80176ee:	e0e0      	b.n	80178b2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80176f0:	2300      	movs	r3, #0
 80176f2:	627b      	str	r3, [r7, #36]	; 0x24
 80176f4:	e002      	b.n	80176fc <dir_register+0x2c>
 80176f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f8:	3301      	adds	r3, #1
 80176fa:	627b      	str	r3, [r7, #36]	; 0x24
 80176fc:	69fb      	ldr	r3, [r7, #28]
 80176fe:	691a      	ldr	r2, [r3, #16]
 8017700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017702:	005b      	lsls	r3, r3, #1
 8017704:	4413      	add	r3, r2
 8017706:	881b      	ldrh	r3, [r3, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d1f4      	bne.n	80176f6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8017712:	f107 030c 	add.w	r3, r7, #12
 8017716:	220c      	movs	r2, #12
 8017718:	4618      	mov	r0, r3
 801771a:	f7fe fdd5 	bl	80162c8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801771e:	7dfb      	ldrb	r3, [r7, #23]
 8017720:	f003 0301 	and.w	r3, r3, #1
 8017724:	2b00      	cmp	r3, #0
 8017726:	d032      	beq.n	801778e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	2240      	movs	r2, #64	; 0x40
 801772c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8017730:	2301      	movs	r3, #1
 8017732:	62bb      	str	r3, [r7, #40]	; 0x28
 8017734:	e016      	b.n	8017764 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801773c:	69fb      	ldr	r3, [r7, #28]
 801773e:	691a      	ldr	r2, [r3, #16]
 8017740:	f107 010c 	add.w	r1, r7, #12
 8017744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017746:	f7ff fe53 	bl	80173f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801774a:	6878      	ldr	r0, [r7, #4]
 801774c:	f7ff feff 	bl	801754e <dir_find>
 8017750:	4603      	mov	r3, r0
 8017752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8017756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801775a:	2b00      	cmp	r3, #0
 801775c:	d106      	bne.n	801776c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017760:	3301      	adds	r3, #1
 8017762:	62bb      	str	r3, [r7, #40]	; 0x28
 8017764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017766:	2b63      	cmp	r3, #99	; 0x63
 8017768:	d9e5      	bls.n	8017736 <dir_register+0x66>
 801776a:	e000      	b.n	801776e <dir_register+0x9e>
			if (res != FR_OK) break;
 801776c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017770:	2b64      	cmp	r3, #100	; 0x64
 8017772:	d101      	bne.n	8017778 <dir_register+0xa8>
 8017774:	2307      	movs	r3, #7
 8017776:	e09c      	b.n	80178b2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801777c:	2b04      	cmp	r3, #4
 801777e:	d002      	beq.n	8017786 <dir_register+0xb6>
 8017780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017784:	e095      	b.n	80178b2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017786:	7dfa      	ldrb	r2, [r7, #23]
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801778e:	7dfb      	ldrb	r3, [r7, #23]
 8017790:	f003 0302 	and.w	r3, r3, #2
 8017794:	2b00      	cmp	r3, #0
 8017796:	d007      	beq.n	80177a8 <dir_register+0xd8>
 8017798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801779a:	330c      	adds	r3, #12
 801779c:	4a47      	ldr	r2, [pc, #284]	; (80178bc <dir_register+0x1ec>)
 801779e:	fba2 2303 	umull	r2, r3, r2, r3
 80177a2:	089b      	lsrs	r3, r3, #2
 80177a4:	3301      	adds	r3, #1
 80177a6:	e000      	b.n	80177aa <dir_register+0xda>
 80177a8:	2301      	movs	r3, #1
 80177aa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80177ac:	6a39      	ldr	r1, [r7, #32]
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f7ff fcbf 	bl	8017132 <dir_alloc>
 80177b4:	4603      	mov	r3, r0
 80177b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80177ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d148      	bne.n	8017854 <dir_register+0x184>
 80177c2:	6a3b      	ldr	r3, [r7, #32]
 80177c4:	3b01      	subs	r3, #1
 80177c6:	623b      	str	r3, [r7, #32]
 80177c8:	6a3b      	ldr	r3, [r7, #32]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d042      	beq.n	8017854 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	695a      	ldr	r2, [r3, #20]
 80177d2:	6a3b      	ldr	r3, [r7, #32]
 80177d4:	015b      	lsls	r3, r3, #5
 80177d6:	1ad3      	subs	r3, r2, r3
 80177d8:	4619      	mov	r1, r3
 80177da:	6878      	ldr	r0, [r7, #4]
 80177dc:	f7ff fb4a 	bl	8016e74 <dir_sdi>
 80177e0:	4603      	mov	r3, r0
 80177e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80177e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d132      	bne.n	8017854 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	3324      	adds	r3, #36	; 0x24
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7ff fe8a 	bl	801750c <sum_sfn>
 80177f8:	4603      	mov	r3, r0
 80177fa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	69db      	ldr	r3, [r3, #28]
 8017800:	4619      	mov	r1, r3
 8017802:	69f8      	ldr	r0, [r7, #28]
 8017804:	f7fe ff8e 	bl	8016724 <move_window>
 8017808:	4603      	mov	r3, r0
 801780a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801780e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017812:	2b00      	cmp	r3, #0
 8017814:	d11d      	bne.n	8017852 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8017816:	69fb      	ldr	r3, [r7, #28]
 8017818:	6918      	ldr	r0, [r3, #16]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6a19      	ldr	r1, [r3, #32]
 801781e:	6a3b      	ldr	r3, [r7, #32]
 8017820:	b2da      	uxtb	r2, r3
 8017822:	7efb      	ldrb	r3, [r7, #27]
 8017824:	f7ff fd7c 	bl	8017320 <put_lfn>
				fs->wflag = 1;
 8017828:	69fb      	ldr	r3, [r7, #28]
 801782a:	2201      	movs	r2, #1
 801782c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801782e:	2100      	movs	r1, #0
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7ff fba8 	bl	8016f86 <dir_next>
 8017836:	4603      	mov	r3, r0
 8017838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801783c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017840:	2b00      	cmp	r3, #0
 8017842:	d107      	bne.n	8017854 <dir_register+0x184>
 8017844:	6a3b      	ldr	r3, [r7, #32]
 8017846:	3b01      	subs	r3, #1
 8017848:	623b      	str	r3, [r7, #32]
 801784a:	6a3b      	ldr	r3, [r7, #32]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d1d5      	bne.n	80177fc <dir_register+0x12c>
 8017850:	e000      	b.n	8017854 <dir_register+0x184>
				if (res != FR_OK) break;
 8017852:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017858:	2b00      	cmp	r3, #0
 801785a:	d128      	bne.n	80178ae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	69db      	ldr	r3, [r3, #28]
 8017860:	4619      	mov	r1, r3
 8017862:	69f8      	ldr	r0, [r7, #28]
 8017864:	f7fe ff5e 	bl	8016724 <move_window>
 8017868:	4603      	mov	r3, r0
 801786a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801786e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017872:	2b00      	cmp	r3, #0
 8017874:	d11b      	bne.n	80178ae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6a1b      	ldr	r3, [r3, #32]
 801787a:	2220      	movs	r2, #32
 801787c:	2100      	movs	r1, #0
 801787e:	4618      	mov	r0, r3
 8017880:	f7fe fd43 	bl	801630a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	6a18      	ldr	r0, [r3, #32]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	3324      	adds	r3, #36	; 0x24
 801788c:	220b      	movs	r2, #11
 801788e:	4619      	mov	r1, r3
 8017890:	f7fe fd1a 	bl	80162c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6a1b      	ldr	r3, [r3, #32]
 801789e:	330c      	adds	r3, #12
 80178a0:	f002 0218 	and.w	r2, r2, #24
 80178a4:	b2d2      	uxtb	r2, r2
 80178a6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80178a8:	69fb      	ldr	r3, [r7, #28]
 80178aa:	2201      	movs	r2, #1
 80178ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80178ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3730      	adds	r7, #48	; 0x30
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	4ec4ec4f 	.word	0x4ec4ec4f

080178c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b08a      	sub	sp, #40	; 0x28
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	613b      	str	r3, [r7, #16]
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	691b      	ldr	r3, [r3, #16]
 80178d6:	60fb      	str	r3, [r7, #12]
 80178d8:	2300      	movs	r3, #0
 80178da:	617b      	str	r3, [r7, #20]
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80178e0:	69bb      	ldr	r3, [r7, #24]
 80178e2:	1c5a      	adds	r2, r3, #1
 80178e4:	61ba      	str	r2, [r7, #24]
 80178e6:	693a      	ldr	r2, [r7, #16]
 80178e8:	4413      	add	r3, r2
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80178ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178f0:	2b1f      	cmp	r3, #31
 80178f2:	d940      	bls.n	8017976 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80178f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178f6:	2b2f      	cmp	r3, #47	; 0x2f
 80178f8:	d006      	beq.n	8017908 <create_name+0x48>
 80178fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178fc:	2b5c      	cmp	r3, #92	; 0x5c
 80178fe:	d110      	bne.n	8017922 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017900:	e002      	b.n	8017908 <create_name+0x48>
 8017902:	69bb      	ldr	r3, [r7, #24]
 8017904:	3301      	adds	r3, #1
 8017906:	61bb      	str	r3, [r7, #24]
 8017908:	693a      	ldr	r2, [r7, #16]
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	4413      	add	r3, r2
 801790e:	781b      	ldrb	r3, [r3, #0]
 8017910:	2b2f      	cmp	r3, #47	; 0x2f
 8017912:	d0f6      	beq.n	8017902 <create_name+0x42>
 8017914:	693a      	ldr	r2, [r7, #16]
 8017916:	69bb      	ldr	r3, [r7, #24]
 8017918:	4413      	add	r3, r2
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	2b5c      	cmp	r3, #92	; 0x5c
 801791e:	d0f0      	beq.n	8017902 <create_name+0x42>
			break;
 8017920:	e02a      	b.n	8017978 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	2bfe      	cmp	r3, #254	; 0xfe
 8017926:	d901      	bls.n	801792c <create_name+0x6c>
 8017928:	2306      	movs	r3, #6
 801792a:	e17d      	b.n	8017c28 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801792c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801792e:	b2db      	uxtb	r3, r3
 8017930:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8017932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017934:	2101      	movs	r1, #1
 8017936:	4618      	mov	r0, r3
 8017938:	f001 f85c 	bl	80189f4 <ff_convert>
 801793c:	4603      	mov	r3, r0
 801793e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017942:	2b00      	cmp	r3, #0
 8017944:	d101      	bne.n	801794a <create_name+0x8a>
 8017946:	2306      	movs	r3, #6
 8017948:	e16e      	b.n	8017c28 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801794a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801794c:	2b7f      	cmp	r3, #127	; 0x7f
 801794e:	d809      	bhi.n	8017964 <create_name+0xa4>
 8017950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017952:	4619      	mov	r1, r3
 8017954:	488d      	ldr	r0, [pc, #564]	; (8017b8c <create_name+0x2cc>)
 8017956:	f7fe fd1a 	bl	801638e <chk_chr>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	d001      	beq.n	8017964 <create_name+0xa4>
 8017960:	2306      	movs	r3, #6
 8017962:	e161      	b.n	8017c28 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8017964:	697b      	ldr	r3, [r7, #20]
 8017966:	1c5a      	adds	r2, r3, #1
 8017968:	617a      	str	r2, [r7, #20]
 801796a:	005b      	lsls	r3, r3, #1
 801796c:	68fa      	ldr	r2, [r7, #12]
 801796e:	4413      	add	r3, r2
 8017970:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017972:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8017974:	e7b4      	b.n	80178e0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8017976:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8017978:	693a      	ldr	r2, [r7, #16]
 801797a:	69bb      	ldr	r3, [r7, #24]
 801797c:	441a      	add	r2, r3
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017984:	2b1f      	cmp	r3, #31
 8017986:	d801      	bhi.n	801798c <create_name+0xcc>
 8017988:	2304      	movs	r3, #4
 801798a:	e000      	b.n	801798e <create_name+0xce>
 801798c:	2300      	movs	r3, #0
 801798e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017992:	e011      	b.n	80179b8 <create_name+0xf8>
		w = lfn[di - 1];
 8017994:	697a      	ldr	r2, [r7, #20]
 8017996:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801799a:	4413      	add	r3, r2
 801799c:	005b      	lsls	r3, r3, #1
 801799e:	68fa      	ldr	r2, [r7, #12]
 80179a0:	4413      	add	r3, r2
 80179a2:	881b      	ldrh	r3, [r3, #0]
 80179a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80179a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179a8:	2b20      	cmp	r3, #32
 80179aa:	d002      	beq.n	80179b2 <create_name+0xf2>
 80179ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179ae:	2b2e      	cmp	r3, #46	; 0x2e
 80179b0:	d106      	bne.n	80179c0 <create_name+0x100>
		di--;
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	3b01      	subs	r3, #1
 80179b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d1ea      	bne.n	8017994 <create_name+0xd4>
 80179be:	e000      	b.n	80179c2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80179c0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	005b      	lsls	r3, r3, #1
 80179c6:	68fa      	ldr	r2, [r7, #12]
 80179c8:	4413      	add	r3, r2
 80179ca:	2200      	movs	r2, #0
 80179cc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d101      	bne.n	80179d8 <create_name+0x118>
 80179d4:	2306      	movs	r3, #6
 80179d6:	e127      	b.n	8017c28 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	3324      	adds	r3, #36	; 0x24
 80179dc:	220b      	movs	r2, #11
 80179de:	2120      	movs	r1, #32
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7fe fc92 	bl	801630a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80179e6:	2300      	movs	r3, #0
 80179e8:	61bb      	str	r3, [r7, #24]
 80179ea:	e002      	b.n	80179f2 <create_name+0x132>
 80179ec:	69bb      	ldr	r3, [r7, #24]
 80179ee:	3301      	adds	r3, #1
 80179f0:	61bb      	str	r3, [r7, #24]
 80179f2:	69bb      	ldr	r3, [r7, #24]
 80179f4:	005b      	lsls	r3, r3, #1
 80179f6:	68fa      	ldr	r2, [r7, #12]
 80179f8:	4413      	add	r3, r2
 80179fa:	881b      	ldrh	r3, [r3, #0]
 80179fc:	2b20      	cmp	r3, #32
 80179fe:	d0f5      	beq.n	80179ec <create_name+0x12c>
 8017a00:	69bb      	ldr	r3, [r7, #24]
 8017a02:	005b      	lsls	r3, r3, #1
 8017a04:	68fa      	ldr	r2, [r7, #12]
 8017a06:	4413      	add	r3, r2
 8017a08:	881b      	ldrh	r3, [r3, #0]
 8017a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8017a0c:	d0ee      	beq.n	80179ec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8017a0e:	69bb      	ldr	r3, [r7, #24]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d009      	beq.n	8017a28 <create_name+0x168>
 8017a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a18:	f043 0303 	orr.w	r3, r3, #3
 8017a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017a20:	e002      	b.n	8017a28 <create_name+0x168>
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	3b01      	subs	r3, #1
 8017a26:	617b      	str	r3, [r7, #20]
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d009      	beq.n	8017a42 <create_name+0x182>
 8017a2e:	697a      	ldr	r2, [r7, #20]
 8017a30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017a34:	4413      	add	r3, r2
 8017a36:	005b      	lsls	r3, r3, #1
 8017a38:	68fa      	ldr	r2, [r7, #12]
 8017a3a:	4413      	add	r3, r2
 8017a3c:	881b      	ldrh	r3, [r3, #0]
 8017a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8017a40:	d1ef      	bne.n	8017a22 <create_name+0x162>

	i = b = 0; ni = 8;
 8017a42:	2300      	movs	r3, #0
 8017a44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017a48:	2300      	movs	r3, #0
 8017a4a:	623b      	str	r3, [r7, #32]
 8017a4c:	2308      	movs	r3, #8
 8017a4e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8017a50:	69bb      	ldr	r3, [r7, #24]
 8017a52:	1c5a      	adds	r2, r3, #1
 8017a54:	61ba      	str	r2, [r7, #24]
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	68fa      	ldr	r2, [r7, #12]
 8017a5a:	4413      	add	r3, r2
 8017a5c:	881b      	ldrh	r3, [r3, #0]
 8017a5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8017a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	f000 8090 	beq.w	8017b88 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8017a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a6a:	2b20      	cmp	r3, #32
 8017a6c:	d006      	beq.n	8017a7c <create_name+0x1bc>
 8017a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a70:	2b2e      	cmp	r3, #46	; 0x2e
 8017a72:	d10a      	bne.n	8017a8a <create_name+0x1ca>
 8017a74:	69ba      	ldr	r2, [r7, #24]
 8017a76:	697b      	ldr	r3, [r7, #20]
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d006      	beq.n	8017a8a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8017a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a80:	f043 0303 	orr.w	r3, r3, #3
 8017a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a88:	e07d      	b.n	8017b86 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8017a8a:	6a3a      	ldr	r2, [r7, #32]
 8017a8c:	69fb      	ldr	r3, [r7, #28]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d203      	bcs.n	8017a9a <create_name+0x1da>
 8017a92:	69ba      	ldr	r2, [r7, #24]
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	429a      	cmp	r2, r3
 8017a98:	d123      	bne.n	8017ae2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8017a9a:	69fb      	ldr	r3, [r7, #28]
 8017a9c:	2b0b      	cmp	r3, #11
 8017a9e:	d106      	bne.n	8017aae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8017aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aa4:	f043 0303 	orr.w	r3, r3, #3
 8017aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017aac:	e075      	b.n	8017b9a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8017aae:	69ba      	ldr	r2, [r7, #24]
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	429a      	cmp	r2, r3
 8017ab4:	d005      	beq.n	8017ac2 <create_name+0x202>
 8017ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aba:	f043 0303 	orr.w	r3, r3, #3
 8017abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8017ac2:	69ba      	ldr	r2, [r7, #24]
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	d866      	bhi.n	8017b98 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8017aca:	697b      	ldr	r3, [r7, #20]
 8017acc:	61bb      	str	r3, [r7, #24]
 8017ace:	2308      	movs	r3, #8
 8017ad0:	623b      	str	r3, [r7, #32]
 8017ad2:	230b      	movs	r3, #11
 8017ad4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8017ad6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ada:	009b      	lsls	r3, r3, #2
 8017adc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017ae0:	e051      	b.n	8017b86 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8017ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8017ae6:	d914      	bls.n	8017b12 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017aea:	2100      	movs	r1, #0
 8017aec:	4618      	mov	r0, r3
 8017aee:	f000 ff81 	bl	80189f4 <ff_convert>
 8017af2:	4603      	mov	r3, r0
 8017af4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8017af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d004      	beq.n	8017b06 <create_name+0x246>
 8017afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017afe:	3b80      	subs	r3, #128	; 0x80
 8017b00:	4a23      	ldr	r2, [pc, #140]	; (8017b90 <create_name+0x2d0>)
 8017b02:	5cd3      	ldrb	r3, [r2, r3]
 8017b04:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8017b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b0a:	f043 0302 	orr.w	r3, r3, #2
 8017b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8017b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d007      	beq.n	8017b28 <create_name+0x268>
 8017b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	481d      	ldr	r0, [pc, #116]	; (8017b94 <create_name+0x2d4>)
 8017b1e:	f7fe fc36 	bl	801638e <chk_chr>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d008      	beq.n	8017b3a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017b28:	235f      	movs	r3, #95	; 0x5f
 8017b2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b30:	f043 0303 	orr.w	r3, r3, #3
 8017b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017b38:	e01b      	b.n	8017b72 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8017b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b3c:	2b40      	cmp	r3, #64	; 0x40
 8017b3e:	d909      	bls.n	8017b54 <create_name+0x294>
 8017b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b42:	2b5a      	cmp	r3, #90	; 0x5a
 8017b44:	d806      	bhi.n	8017b54 <create_name+0x294>
					b |= 2;
 8017b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017b4a:	f043 0302 	orr.w	r3, r3, #2
 8017b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017b52:	e00e      	b.n	8017b72 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8017b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b56:	2b60      	cmp	r3, #96	; 0x60
 8017b58:	d90b      	bls.n	8017b72 <create_name+0x2b2>
 8017b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b5c:	2b7a      	cmp	r3, #122	; 0x7a
 8017b5e:	d808      	bhi.n	8017b72 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8017b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017b64:	f043 0301 	orr.w	r3, r3, #1
 8017b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b6e:	3b20      	subs	r3, #32
 8017b70:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8017b72:	6a3b      	ldr	r3, [r7, #32]
 8017b74:	1c5a      	adds	r2, r3, #1
 8017b76:	623a      	str	r2, [r7, #32]
 8017b78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017b7a:	b2d1      	uxtb	r1, r2
 8017b7c:	687a      	ldr	r2, [r7, #4]
 8017b7e:	4413      	add	r3, r2
 8017b80:	460a      	mov	r2, r1
 8017b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8017b86:	e763      	b.n	8017a50 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8017b88:	bf00      	nop
 8017b8a:	e006      	b.n	8017b9a <create_name+0x2da>
 8017b8c:	0801dbb0 	.word	0x0801dbb0
 8017b90:	0801dcf8 	.word	0x0801dcf8
 8017b94:	0801dbbc 	.word	0x0801dbbc
			if (si > di) break;			/* No extension */
 8017b98:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017ba0:	2be5      	cmp	r3, #229	; 0xe5
 8017ba2:	d103      	bne.n	8017bac <create_name+0x2ec>
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2205      	movs	r2, #5
 8017ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8017bac:	69fb      	ldr	r3, [r7, #28]
 8017bae:	2b08      	cmp	r3, #8
 8017bb0:	d104      	bne.n	8017bbc <create_name+0x2fc>
 8017bb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017bb6:	009b      	lsls	r3, r3, #2
 8017bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017bc0:	f003 030c 	and.w	r3, r3, #12
 8017bc4:	2b0c      	cmp	r3, #12
 8017bc6:	d005      	beq.n	8017bd4 <create_name+0x314>
 8017bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017bcc:	f003 0303 	and.w	r3, r3, #3
 8017bd0:	2b03      	cmp	r3, #3
 8017bd2:	d105      	bne.n	8017be0 <create_name+0x320>
 8017bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bd8:	f043 0302 	orr.w	r3, r3, #2
 8017bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8017be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017be4:	f003 0302 	and.w	r3, r3, #2
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d117      	bne.n	8017c1c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8017bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017bf0:	f003 0303 	and.w	r3, r3, #3
 8017bf4:	2b01      	cmp	r3, #1
 8017bf6:	d105      	bne.n	8017c04 <create_name+0x344>
 8017bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bfc:	f043 0310 	orr.w	r3, r3, #16
 8017c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8017c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c08:	f003 030c 	and.w	r3, r3, #12
 8017c0c:	2b04      	cmp	r3, #4
 8017c0e:	d105      	bne.n	8017c1c <create_name+0x35c>
 8017c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c14:	f043 0308 	orr.w	r3, r3, #8
 8017c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017c22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8017c26:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	3728      	adds	r7, #40	; 0x28
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}

08017c30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b086      	sub	sp, #24
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017c44:	e002      	b.n	8017c4c <follow_path+0x1c>
 8017c46:	683b      	ldr	r3, [r7, #0]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	603b      	str	r3, [r7, #0]
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	781b      	ldrb	r3, [r3, #0]
 8017c50:	2b2f      	cmp	r3, #47	; 0x2f
 8017c52:	d0f8      	beq.n	8017c46 <follow_path+0x16>
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	781b      	ldrb	r3, [r3, #0]
 8017c58:	2b5c      	cmp	r3, #92	; 0x5c
 8017c5a:	d0f4      	beq.n	8017c46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017c5c:	693b      	ldr	r3, [r7, #16]
 8017c5e:	2200      	movs	r2, #0
 8017c60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017c62:	683b      	ldr	r3, [r7, #0]
 8017c64:	781b      	ldrb	r3, [r3, #0]
 8017c66:	2b1f      	cmp	r3, #31
 8017c68:	d80a      	bhi.n	8017c80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	2280      	movs	r2, #128	; 0x80
 8017c6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017c72:	2100      	movs	r1, #0
 8017c74:	6878      	ldr	r0, [r7, #4]
 8017c76:	f7ff f8fd 	bl	8016e74 <dir_sdi>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	75fb      	strb	r3, [r7, #23]
 8017c7e:	e048      	b.n	8017d12 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017c80:	463b      	mov	r3, r7
 8017c82:	4619      	mov	r1, r3
 8017c84:	6878      	ldr	r0, [r7, #4]
 8017c86:	f7ff fe1b 	bl	80178c0 <create_name>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017c8e:	7dfb      	ldrb	r3, [r7, #23]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d139      	bne.n	8017d08 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017c94:	6878      	ldr	r0, [r7, #4]
 8017c96:	f7ff fc5a 	bl	801754e <dir_find>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017ca4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017ca6:	7dfb      	ldrb	r3, [r7, #23]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d00a      	beq.n	8017cc2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017cac:	7dfb      	ldrb	r3, [r7, #23]
 8017cae:	2b04      	cmp	r3, #4
 8017cb0:	d12c      	bne.n	8017d0c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017cb2:	7afb      	ldrb	r3, [r7, #11]
 8017cb4:	f003 0304 	and.w	r3, r3, #4
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d127      	bne.n	8017d0c <follow_path+0xdc>
 8017cbc:	2305      	movs	r3, #5
 8017cbe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017cc0:	e024      	b.n	8017d0c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017cc2:	7afb      	ldrb	r3, [r7, #11]
 8017cc4:	f003 0304 	and.w	r3, r3, #4
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d121      	bne.n	8017d10 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017ccc:	693b      	ldr	r3, [r7, #16]
 8017cce:	799b      	ldrb	r3, [r3, #6]
 8017cd0:	f003 0310 	and.w	r3, r3, #16
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d102      	bne.n	8017cde <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017cd8:	2305      	movs	r3, #5
 8017cda:	75fb      	strb	r3, [r7, #23]
 8017cdc:	e019      	b.n	8017d12 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	695b      	ldr	r3, [r3, #20]
 8017ce8:	68fa      	ldr	r2, [r7, #12]
 8017cea:	8992      	ldrh	r2, [r2, #12]
 8017cec:	fbb3 f0f2 	udiv	r0, r3, r2
 8017cf0:	fb00 f202 	mul.w	r2, r0, r2
 8017cf4:	1a9b      	subs	r3, r3, r2
 8017cf6:	440b      	add	r3, r1
 8017cf8:	4619      	mov	r1, r3
 8017cfa:	68f8      	ldr	r0, [r7, #12]
 8017cfc:	f7ff fa60 	bl	80171c0 <ld_clust>
 8017d00:	4602      	mov	r2, r0
 8017d02:	693b      	ldr	r3, [r7, #16]
 8017d04:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017d06:	e7bb      	b.n	8017c80 <follow_path+0x50>
			if (res != FR_OK) break;
 8017d08:	bf00      	nop
 8017d0a:	e002      	b.n	8017d12 <follow_path+0xe2>
				break;
 8017d0c:	bf00      	nop
 8017d0e:	e000      	b.n	8017d12 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017d10:	bf00      	nop
			}
		}
	}

	return res;
 8017d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3718      	adds	r7, #24
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017d1c:	b480      	push	{r7}
 8017d1e:	b087      	sub	sp, #28
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8017d24:	f04f 33ff 	mov.w	r3, #4294967295
 8017d28:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d031      	beq.n	8017d96 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	617b      	str	r3, [r7, #20]
 8017d38:	e002      	b.n	8017d40 <get_ldnumber+0x24>
 8017d3a:	697b      	ldr	r3, [r7, #20]
 8017d3c:	3301      	adds	r3, #1
 8017d3e:	617b      	str	r3, [r7, #20]
 8017d40:	697b      	ldr	r3, [r7, #20]
 8017d42:	781b      	ldrb	r3, [r3, #0]
 8017d44:	2b1f      	cmp	r3, #31
 8017d46:	d903      	bls.n	8017d50 <get_ldnumber+0x34>
 8017d48:	697b      	ldr	r3, [r7, #20]
 8017d4a:	781b      	ldrb	r3, [r3, #0]
 8017d4c:	2b3a      	cmp	r3, #58	; 0x3a
 8017d4e:	d1f4      	bne.n	8017d3a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	781b      	ldrb	r3, [r3, #0]
 8017d54:	2b3a      	cmp	r3, #58	; 0x3a
 8017d56:	d11c      	bne.n	8017d92 <get_ldnumber+0x76>
			tp = *path;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	1c5a      	adds	r2, r3, #1
 8017d62:	60fa      	str	r2, [r7, #12]
 8017d64:	781b      	ldrb	r3, [r3, #0]
 8017d66:	3b30      	subs	r3, #48	; 0x30
 8017d68:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	2b09      	cmp	r3, #9
 8017d6e:	d80e      	bhi.n	8017d8e <get_ldnumber+0x72>
 8017d70:	68fa      	ldr	r2, [r7, #12]
 8017d72:	697b      	ldr	r3, [r7, #20]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d10a      	bne.n	8017d8e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d107      	bne.n	8017d8e <get_ldnumber+0x72>
					vol = (int)i;
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017d82:	697b      	ldr	r3, [r7, #20]
 8017d84:	3301      	adds	r3, #1
 8017d86:	617b      	str	r3, [r7, #20]
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	697a      	ldr	r2, [r7, #20]
 8017d8c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	e002      	b.n	8017d98 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017d92:	2300      	movs	r3, #0
 8017d94:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017d96:	693b      	ldr	r3, [r7, #16]
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	371c      	adds	r7, #28
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr

08017da4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2200      	movs	r2, #0
 8017db2:	70da      	strb	r2, [r3, #3]
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f04f 32ff 	mov.w	r2, #4294967295
 8017dba:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017dbc:	6839      	ldr	r1, [r7, #0]
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7fe fcb0 	bl	8016724 <move_window>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d001      	beq.n	8017dce <check_fs+0x2a>
 8017dca:	2304      	movs	r3, #4
 8017dcc:	e038      	b.n	8017e40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	3338      	adds	r3, #56	; 0x38
 8017dd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7fe f9f4 	bl	80161c4 <ld_word>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	461a      	mov	r2, r3
 8017de0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017de4:	429a      	cmp	r2, r3
 8017de6:	d001      	beq.n	8017dec <check_fs+0x48>
 8017de8:	2303      	movs	r3, #3
 8017dea:	e029      	b.n	8017e40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017df2:	2be9      	cmp	r3, #233	; 0xe9
 8017df4:	d009      	beq.n	8017e0a <check_fs+0x66>
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017dfc:	2beb      	cmp	r3, #235	; 0xeb
 8017dfe:	d11e      	bne.n	8017e3e <check_fs+0x9a>
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8017e06:	2b90      	cmp	r3, #144	; 0x90
 8017e08:	d119      	bne.n	8017e3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	3338      	adds	r3, #56	; 0x38
 8017e0e:	3336      	adds	r3, #54	; 0x36
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7fe f9ef 	bl	80161f4 <ld_dword>
 8017e16:	4603      	mov	r3, r0
 8017e18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017e1c:	4a0a      	ldr	r2, [pc, #40]	; (8017e48 <check_fs+0xa4>)
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d101      	bne.n	8017e26 <check_fs+0x82>
 8017e22:	2300      	movs	r3, #0
 8017e24:	e00c      	b.n	8017e40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	3338      	adds	r3, #56	; 0x38
 8017e2a:	3352      	adds	r3, #82	; 0x52
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f7fe f9e1 	bl	80161f4 <ld_dword>
 8017e32:	4603      	mov	r3, r0
 8017e34:	4a05      	ldr	r2, [pc, #20]	; (8017e4c <check_fs+0xa8>)
 8017e36:	4293      	cmp	r3, r2
 8017e38:	d101      	bne.n	8017e3e <check_fs+0x9a>
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	e000      	b.n	8017e40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017e3e:	2302      	movs	r3, #2
}
 8017e40:	4618      	mov	r0, r3
 8017e42:	3708      	adds	r7, #8
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}
 8017e48:	00544146 	.word	0x00544146
 8017e4c:	33544146 	.word	0x33544146

08017e50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b096      	sub	sp, #88	; 0x58
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	60f8      	str	r0, [r7, #12]
 8017e58:	60b9      	str	r1, [r7, #8]
 8017e5a:	4613      	mov	r3, r2
 8017e5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	2200      	movs	r2, #0
 8017e62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017e64:	68f8      	ldr	r0, [r7, #12]
 8017e66:	f7ff ff59 	bl	8017d1c <get_ldnumber>
 8017e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	da01      	bge.n	8017e76 <find_volume+0x26>
 8017e72:	230b      	movs	r3, #11
 8017e74:	e265      	b.n	8018342 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8017e76:	4a9f      	ldr	r2, [pc, #636]	; (80180f4 <find_volume+0x2a4>)
 8017e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d101      	bne.n	8017e8a <find_volume+0x3a>
 8017e86:	230c      	movs	r3, #12
 8017e88:	e25b      	b.n	8018342 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017e90:	79fb      	ldrb	r3, [r7, #7]
 8017e92:	f023 0301 	bic.w	r3, r3, #1
 8017e96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d01a      	beq.n	8017ed6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8017ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea2:	785b      	ldrb	r3, [r3, #1]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7fe f8ef 	bl	8016088 <disk_status>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017eb4:	f003 0301 	and.w	r3, r3, #1
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d10c      	bne.n	8017ed6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017ebc:	79fb      	ldrb	r3, [r7, #7]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d007      	beq.n	8017ed2 <find_volume+0x82>
 8017ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017ec6:	f003 0304 	and.w	r3, r3, #4
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d001      	beq.n	8017ed2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017ece:	230a      	movs	r3, #10
 8017ed0:	e237      	b.n	8018342 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	e235      	b.n	8018342 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ed8:	2200      	movs	r2, #0
 8017eda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ede:	b2da      	uxtb	r2, r3
 8017ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ee2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ee6:	785b      	ldrb	r3, [r3, #1]
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7fe f8e7 	bl	80160bc <disk_initialize>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017ef8:	f003 0301 	and.w	r3, r3, #1
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d001      	beq.n	8017f04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017f00:	2303      	movs	r3, #3
 8017f02:	e21e      	b.n	8018342 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017f04:	79fb      	ldrb	r3, [r7, #7]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d007      	beq.n	8017f1a <find_volume+0xca>
 8017f0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017f0e:	f003 0304 	and.w	r3, r3, #4
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d001      	beq.n	8017f1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017f16:	230a      	movs	r3, #10
 8017f18:	e213      	b.n	8018342 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8017f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f1c:	7858      	ldrb	r0, [r3, #1]
 8017f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f20:	330c      	adds	r3, #12
 8017f22:	461a      	mov	r2, r3
 8017f24:	2102      	movs	r1, #2
 8017f26:	f7fe f92f 	bl	8016188 <disk_ioctl>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d001      	beq.n	8017f34 <find_volume+0xe4>
 8017f30:	2301      	movs	r3, #1
 8017f32:	e206      	b.n	8018342 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8017f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f36:	899b      	ldrh	r3, [r3, #12]
 8017f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f3c:	d80d      	bhi.n	8017f5a <find_volume+0x10a>
 8017f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f40:	899b      	ldrh	r3, [r3, #12]
 8017f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f46:	d308      	bcc.n	8017f5a <find_volume+0x10a>
 8017f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f4a:	899b      	ldrh	r3, [r3, #12]
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f50:	899b      	ldrh	r3, [r3, #12]
 8017f52:	3b01      	subs	r3, #1
 8017f54:	4013      	ands	r3, r2
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d001      	beq.n	8017f5e <find_volume+0x10e>
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	e1f1      	b.n	8018342 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017f66:	f7ff ff1d 	bl	8017da4 <check_fs>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017f74:	2b02      	cmp	r3, #2
 8017f76:	d149      	bne.n	801800c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017f78:	2300      	movs	r3, #0
 8017f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8017f7c:	e01e      	b.n	8017fbc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f86:	011b      	lsls	r3, r3, #4
 8017f88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017f8c:	4413      	add	r3, r2
 8017f8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f92:	3304      	adds	r3, #4
 8017f94:	781b      	ldrb	r3, [r3, #0]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d006      	beq.n	8017fa8 <find_volume+0x158>
 8017f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f9c:	3308      	adds	r3, #8
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f7fe f928 	bl	80161f4 <ld_dword>
 8017fa4:	4602      	mov	r2, r0
 8017fa6:	e000      	b.n	8017faa <find_volume+0x15a>
 8017fa8:	2200      	movs	r2, #0
 8017faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fac:	009b      	lsls	r3, r3, #2
 8017fae:	3358      	adds	r3, #88	; 0x58
 8017fb0:	443b      	add	r3, r7
 8017fb2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fb8:	3301      	adds	r3, #1
 8017fba:	643b      	str	r3, [r7, #64]	; 0x40
 8017fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fbe:	2b03      	cmp	r3, #3
 8017fc0:	d9dd      	bls.n	8017f7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d002      	beq.n	8017fd2 <find_volume+0x182>
 8017fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fce:	3b01      	subs	r3, #1
 8017fd0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	3358      	adds	r3, #88	; 0x58
 8017fd8:	443b      	add	r3, r7
 8017fda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017fde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d005      	beq.n	8017ff2 <find_volume+0x1a2>
 8017fe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017fea:	f7ff fedb 	bl	8017da4 <check_fs>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	e000      	b.n	8017ff4 <find_volume+0x1a4>
 8017ff2:	2303      	movs	r3, #3
 8017ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ffc:	2b01      	cmp	r3, #1
 8017ffe:	d905      	bls.n	801800c <find_volume+0x1bc>
 8018000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018002:	3301      	adds	r3, #1
 8018004:	643b      	str	r3, [r7, #64]	; 0x40
 8018006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018008:	2b03      	cmp	r3, #3
 801800a:	d9e2      	bls.n	8017fd2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801800c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018010:	2b04      	cmp	r3, #4
 8018012:	d101      	bne.n	8018018 <find_volume+0x1c8>
 8018014:	2301      	movs	r3, #1
 8018016:	e194      	b.n	8018342 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801801c:	2b01      	cmp	r3, #1
 801801e:	d901      	bls.n	8018024 <find_volume+0x1d4>
 8018020:	230d      	movs	r3, #13
 8018022:	e18e      	b.n	8018342 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018026:	3338      	adds	r3, #56	; 0x38
 8018028:	330b      	adds	r3, #11
 801802a:	4618      	mov	r0, r3
 801802c:	f7fe f8ca 	bl	80161c4 <ld_word>
 8018030:	4603      	mov	r3, r0
 8018032:	461a      	mov	r2, r3
 8018034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018036:	899b      	ldrh	r3, [r3, #12]
 8018038:	429a      	cmp	r2, r3
 801803a:	d001      	beq.n	8018040 <find_volume+0x1f0>
 801803c:	230d      	movs	r3, #13
 801803e:	e180      	b.n	8018342 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018042:	3338      	adds	r3, #56	; 0x38
 8018044:	3316      	adds	r3, #22
 8018046:	4618      	mov	r0, r3
 8018048:	f7fe f8bc 	bl	80161c4 <ld_word>
 801804c:	4603      	mov	r3, r0
 801804e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018052:	2b00      	cmp	r3, #0
 8018054:	d106      	bne.n	8018064 <find_volume+0x214>
 8018056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018058:	3338      	adds	r3, #56	; 0x38
 801805a:	3324      	adds	r3, #36	; 0x24
 801805c:	4618      	mov	r0, r3
 801805e:	f7fe f8c9 	bl	80161f4 <ld_dword>
 8018062:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018068:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801806c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8018070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018072:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018076:	789b      	ldrb	r3, [r3, #2]
 8018078:	2b01      	cmp	r3, #1
 801807a:	d005      	beq.n	8018088 <find_volume+0x238>
 801807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801807e:	789b      	ldrb	r3, [r3, #2]
 8018080:	2b02      	cmp	r3, #2
 8018082:	d001      	beq.n	8018088 <find_volume+0x238>
 8018084:	230d      	movs	r3, #13
 8018086:	e15c      	b.n	8018342 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801808a:	789b      	ldrb	r3, [r3, #2]
 801808c:	461a      	mov	r2, r3
 801808e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018090:	fb02 f303 	mul.w	r3, r2, r3
 8018094:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801809c:	b29a      	uxth	r2, r3
 801809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80180a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180a4:	895b      	ldrh	r3, [r3, #10]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d008      	beq.n	80180bc <find_volume+0x26c>
 80180aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ac:	895b      	ldrh	r3, [r3, #10]
 80180ae:	461a      	mov	r2, r3
 80180b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b2:	895b      	ldrh	r3, [r3, #10]
 80180b4:	3b01      	subs	r3, #1
 80180b6:	4013      	ands	r3, r2
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d001      	beq.n	80180c0 <find_volume+0x270>
 80180bc:	230d      	movs	r3, #13
 80180be:	e140      	b.n	8018342 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80180c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180c2:	3338      	adds	r3, #56	; 0x38
 80180c4:	3311      	adds	r3, #17
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7fe f87c 	bl	80161c4 <ld_word>
 80180cc:	4603      	mov	r3, r0
 80180ce:	461a      	mov	r2, r3
 80180d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80180d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d6:	891b      	ldrh	r3, [r3, #8]
 80180d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80180da:	8992      	ldrh	r2, [r2, #12]
 80180dc:	0952      	lsrs	r2, r2, #5
 80180de:	b292      	uxth	r2, r2
 80180e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80180e4:	fb01 f202 	mul.w	r2, r1, r2
 80180e8:	1a9b      	subs	r3, r3, r2
 80180ea:	b29b      	uxth	r3, r3
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d003      	beq.n	80180f8 <find_volume+0x2a8>
 80180f0:	230d      	movs	r3, #13
 80180f2:	e126      	b.n	8018342 <find_volume+0x4f2>
 80180f4:	240016a8 	.word	0x240016a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80180f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180fa:	3338      	adds	r3, #56	; 0x38
 80180fc:	3313      	adds	r3, #19
 80180fe:	4618      	mov	r0, r3
 8018100:	f7fe f860 	bl	80161c4 <ld_word>
 8018104:	4603      	mov	r3, r0
 8018106:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801810a:	2b00      	cmp	r3, #0
 801810c:	d106      	bne.n	801811c <find_volume+0x2cc>
 801810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018110:	3338      	adds	r3, #56	; 0x38
 8018112:	3320      	adds	r3, #32
 8018114:	4618      	mov	r0, r3
 8018116:	f7fe f86d 	bl	80161f4 <ld_dword>
 801811a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801811c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801811e:	3338      	adds	r3, #56	; 0x38
 8018120:	330e      	adds	r3, #14
 8018122:	4618      	mov	r0, r3
 8018124:	f7fe f84e 	bl	80161c4 <ld_word>
 8018128:	4603      	mov	r3, r0
 801812a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801812c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801812e:	2b00      	cmp	r3, #0
 8018130:	d101      	bne.n	8018136 <find_volume+0x2e6>
 8018132:	230d      	movs	r3, #13
 8018134:	e105      	b.n	8018342 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018136:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801813a:	4413      	add	r3, r2
 801813c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801813e:	8911      	ldrh	r1, [r2, #8]
 8018140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018142:	8992      	ldrh	r2, [r2, #12]
 8018144:	0952      	lsrs	r2, r2, #5
 8018146:	b292      	uxth	r2, r2
 8018148:	fbb1 f2f2 	udiv	r2, r1, r2
 801814c:	b292      	uxth	r2, r2
 801814e:	4413      	add	r3, r2
 8018150:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018156:	429a      	cmp	r2, r3
 8018158:	d201      	bcs.n	801815e <find_volume+0x30e>
 801815a:	230d      	movs	r3, #13
 801815c:	e0f1      	b.n	8018342 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801815e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018162:	1ad3      	subs	r3, r2, r3
 8018164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018166:	8952      	ldrh	r2, [r2, #10]
 8018168:	fbb3 f3f2 	udiv	r3, r3, r2
 801816c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018170:	2b00      	cmp	r3, #0
 8018172:	d101      	bne.n	8018178 <find_volume+0x328>
 8018174:	230d      	movs	r3, #13
 8018176:	e0e4      	b.n	8018342 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8018178:	2303      	movs	r3, #3
 801817a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018180:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8018184:	4293      	cmp	r3, r2
 8018186:	d802      	bhi.n	801818e <find_volume+0x33e>
 8018188:	2302      	movs	r3, #2
 801818a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018190:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018194:	4293      	cmp	r3, r2
 8018196:	d802      	bhi.n	801819e <find_volume+0x34e>
 8018198:	2301      	movs	r3, #1
 801819a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a0:	1c9a      	adds	r2, r3, #2
 80181a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181a4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80181a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80181ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80181ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181b0:	441a      	add	r2, r3
 80181b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181b4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80181b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ba:	441a      	add	r2, r3
 80181bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181be:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80181c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80181c4:	2b03      	cmp	r3, #3
 80181c6:	d11e      	bne.n	8018206 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80181c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ca:	3338      	adds	r3, #56	; 0x38
 80181cc:	332a      	adds	r3, #42	; 0x2a
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fd fff8 	bl	80161c4 <ld_word>
 80181d4:	4603      	mov	r3, r0
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d001      	beq.n	80181de <find_volume+0x38e>
 80181da:	230d      	movs	r3, #13
 80181dc:	e0b1      	b.n	8018342 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80181de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181e0:	891b      	ldrh	r3, [r3, #8]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d001      	beq.n	80181ea <find_volume+0x39a>
 80181e6:	230d      	movs	r3, #13
 80181e8:	e0ab      	b.n	8018342 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80181ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ec:	3338      	adds	r3, #56	; 0x38
 80181ee:	332c      	adds	r3, #44	; 0x2c
 80181f0:	4618      	mov	r0, r3
 80181f2:	f7fd ffff 	bl	80161f4 <ld_dword>
 80181f6:	4602      	mov	r2, r0
 80181f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181fa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80181fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181fe:	69db      	ldr	r3, [r3, #28]
 8018200:	009b      	lsls	r3, r3, #2
 8018202:	647b      	str	r3, [r7, #68]	; 0x44
 8018204:	e01f      	b.n	8018246 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018208:	891b      	ldrh	r3, [r3, #8]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d101      	bne.n	8018212 <find_volume+0x3c2>
 801820e:	230d      	movs	r3, #13
 8018210:	e097      	b.n	8018342 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018218:	441a      	add	r2, r3
 801821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801821c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801821e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018222:	2b02      	cmp	r3, #2
 8018224:	d103      	bne.n	801822e <find_volume+0x3de>
 8018226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018228:	69db      	ldr	r3, [r3, #28]
 801822a:	005b      	lsls	r3, r3, #1
 801822c:	e00a      	b.n	8018244 <find_volume+0x3f4>
 801822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018230:	69da      	ldr	r2, [r3, #28]
 8018232:	4613      	mov	r3, r2
 8018234:	005b      	lsls	r3, r3, #1
 8018236:	4413      	add	r3, r2
 8018238:	085a      	lsrs	r2, r3, #1
 801823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801823c:	69db      	ldr	r3, [r3, #28]
 801823e:	f003 0301 	and.w	r3, r3, #1
 8018242:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018244:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018248:	6a1a      	ldr	r2, [r3, #32]
 801824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801824c:	899b      	ldrh	r3, [r3, #12]
 801824e:	4619      	mov	r1, r3
 8018250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018252:	440b      	add	r3, r1
 8018254:	3b01      	subs	r3, #1
 8018256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018258:	8989      	ldrh	r1, [r1, #12]
 801825a:	fbb3 f3f1 	udiv	r3, r3, r1
 801825e:	429a      	cmp	r2, r3
 8018260:	d201      	bcs.n	8018266 <find_volume+0x416>
 8018262:	230d      	movs	r3, #13
 8018264:	e06d      	b.n	8018342 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018268:	f04f 32ff 	mov.w	r2, #4294967295
 801826c:	619a      	str	r2, [r3, #24]
 801826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018270:	699a      	ldr	r2, [r3, #24]
 8018272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018274:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8018276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018278:	2280      	movs	r2, #128	; 0x80
 801827a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801827c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018280:	2b03      	cmp	r3, #3
 8018282:	d149      	bne.n	8018318 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018286:	3338      	adds	r3, #56	; 0x38
 8018288:	3330      	adds	r3, #48	; 0x30
 801828a:	4618      	mov	r0, r3
 801828c:	f7fd ff9a 	bl	80161c4 <ld_word>
 8018290:	4603      	mov	r3, r0
 8018292:	2b01      	cmp	r3, #1
 8018294:	d140      	bne.n	8018318 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018298:	3301      	adds	r3, #1
 801829a:	4619      	mov	r1, r3
 801829c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801829e:	f7fe fa41 	bl	8016724 <move_window>
 80182a2:	4603      	mov	r3, r0
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d137      	bne.n	8018318 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80182a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182aa:	2200      	movs	r2, #0
 80182ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80182ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b0:	3338      	adds	r3, #56	; 0x38
 80182b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80182b6:	4618      	mov	r0, r3
 80182b8:	f7fd ff84 	bl	80161c4 <ld_word>
 80182bc:	4603      	mov	r3, r0
 80182be:	461a      	mov	r2, r3
 80182c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d127      	bne.n	8018318 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80182c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ca:	3338      	adds	r3, #56	; 0x38
 80182cc:	4618      	mov	r0, r3
 80182ce:	f7fd ff91 	bl	80161f4 <ld_dword>
 80182d2:	4603      	mov	r3, r0
 80182d4:	4a1d      	ldr	r2, [pc, #116]	; (801834c <find_volume+0x4fc>)
 80182d6:	4293      	cmp	r3, r2
 80182d8:	d11e      	bne.n	8018318 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80182da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182dc:	3338      	adds	r3, #56	; 0x38
 80182de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80182e2:	4618      	mov	r0, r3
 80182e4:	f7fd ff86 	bl	80161f4 <ld_dword>
 80182e8:	4603      	mov	r3, r0
 80182ea:	4a19      	ldr	r2, [pc, #100]	; (8018350 <find_volume+0x500>)
 80182ec:	4293      	cmp	r3, r2
 80182ee:	d113      	bne.n	8018318 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80182f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182f2:	3338      	adds	r3, #56	; 0x38
 80182f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7fd ff7b 	bl	80161f4 <ld_dword>
 80182fe:	4602      	mov	r2, r0
 8018300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018302:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018306:	3338      	adds	r3, #56	; 0x38
 8018308:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801830c:	4618      	mov	r0, r3
 801830e:	f7fd ff71 	bl	80161f4 <ld_dword>
 8018312:	4602      	mov	r2, r0
 8018314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018316:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801831a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801831e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018320:	4b0c      	ldr	r3, [pc, #48]	; (8018354 <find_volume+0x504>)
 8018322:	881b      	ldrh	r3, [r3, #0]
 8018324:	3301      	adds	r3, #1
 8018326:	b29a      	uxth	r2, r3
 8018328:	4b0a      	ldr	r3, [pc, #40]	; (8018354 <find_volume+0x504>)
 801832a:	801a      	strh	r2, [r3, #0]
 801832c:	4b09      	ldr	r3, [pc, #36]	; (8018354 <find_volume+0x504>)
 801832e:	881a      	ldrh	r2, [r3, #0]
 8018330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018332:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018336:	4a08      	ldr	r2, [pc, #32]	; (8018358 <find_volume+0x508>)
 8018338:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801833a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801833c:	f7fe f98a 	bl	8016654 <clear_lock>
#endif
	return FR_OK;
 8018340:	2300      	movs	r3, #0
}
 8018342:	4618      	mov	r0, r3
 8018344:	3758      	adds	r7, #88	; 0x58
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}
 801834a:	bf00      	nop
 801834c:	41615252 	.word	0x41615252
 8018350:	61417272 	.word	0x61417272
 8018354:	240016ac 	.word	0x240016ac
 8018358:	240016d0 	.word	0x240016d0

0801835c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b084      	sub	sp, #16
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
 8018364:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018366:	2309      	movs	r3, #9
 8018368:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d01c      	beq.n	80183aa <validate+0x4e>
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d018      	beq.n	80183aa <validate+0x4e>
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d013      	beq.n	80183aa <validate+0x4e>
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	889a      	ldrh	r2, [r3, #4]
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	88db      	ldrh	r3, [r3, #6]
 801838c:	429a      	cmp	r2, r3
 801838e:	d10c      	bne.n	80183aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	785b      	ldrb	r3, [r3, #1]
 8018396:	4618      	mov	r0, r3
 8018398:	f7fd fe76 	bl	8016088 <disk_status>
 801839c:	4603      	mov	r3, r0
 801839e:	f003 0301 	and.w	r3, r3, #1
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d101      	bne.n	80183aa <validate+0x4e>
			res = FR_OK;
 80183a6:	2300      	movs	r3, #0
 80183a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80183aa:	7bfb      	ldrb	r3, [r7, #15]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d102      	bne.n	80183b6 <validate+0x5a>
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	e000      	b.n	80183b8 <validate+0x5c>
 80183b6:	2300      	movs	r3, #0
 80183b8:	683a      	ldr	r2, [r7, #0]
 80183ba:	6013      	str	r3, [r2, #0]
	return res;
 80183bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3710      	adds	r7, #16
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd80      	pop	{r7, pc}
	...

080183c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b088      	sub	sp, #32
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	60f8      	str	r0, [r7, #12]
 80183d0:	60b9      	str	r1, [r7, #8]
 80183d2:	4613      	mov	r3, r2
 80183d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80183da:	f107 0310 	add.w	r3, r7, #16
 80183de:	4618      	mov	r0, r3
 80183e0:	f7ff fc9c 	bl	8017d1c <get_ldnumber>
 80183e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80183e6:	69fb      	ldr	r3, [r7, #28]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	da01      	bge.n	80183f0 <f_mount+0x28>
 80183ec:	230b      	movs	r3, #11
 80183ee:	e02b      	b.n	8018448 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80183f0:	4a17      	ldr	r2, [pc, #92]	; (8018450 <f_mount+0x88>)
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80183f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80183fa:	69bb      	ldr	r3, [r7, #24]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d005      	beq.n	801840c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018400:	69b8      	ldr	r0, [r7, #24]
 8018402:	f7fe f927 	bl	8016654 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018406:	69bb      	ldr	r3, [r7, #24]
 8018408:	2200      	movs	r2, #0
 801840a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d002      	beq.n	8018418 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	2200      	movs	r2, #0
 8018416:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018418:	68fa      	ldr	r2, [r7, #12]
 801841a:	490d      	ldr	r1, [pc, #52]	; (8018450 <f_mount+0x88>)
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d002      	beq.n	801842e <f_mount+0x66>
 8018428:	79fb      	ldrb	r3, [r7, #7]
 801842a:	2b01      	cmp	r3, #1
 801842c:	d001      	beq.n	8018432 <f_mount+0x6a>
 801842e:	2300      	movs	r3, #0
 8018430:	e00a      	b.n	8018448 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018432:	f107 010c 	add.w	r1, r7, #12
 8018436:	f107 0308 	add.w	r3, r7, #8
 801843a:	2200      	movs	r2, #0
 801843c:	4618      	mov	r0, r3
 801843e:	f7ff fd07 	bl	8017e50 <find_volume>
 8018442:	4603      	mov	r3, r0
 8018444:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018446:	7dfb      	ldrb	r3, [r7, #23]
}
 8018448:	4618      	mov	r0, r3
 801844a:	3720      	adds	r7, #32
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}
 8018450:	240016a8 	.word	0x240016a8

08018454 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b09a      	sub	sp, #104	; 0x68
 8018458:	af00      	add	r7, sp, #0
 801845a:	60f8      	str	r0, [r7, #12]
 801845c:	60b9      	str	r1, [r7, #8]
 801845e:	4613      	mov	r3, r2
 8018460:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d101      	bne.n	801846c <f_open+0x18>
 8018468:	2309      	movs	r3, #9
 801846a:	e1bb      	b.n	80187e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801846c:	79fb      	ldrb	r3, [r7, #7]
 801846e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018472:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018474:	79fa      	ldrb	r2, [r7, #7]
 8018476:	f107 0114 	add.w	r1, r7, #20
 801847a:	f107 0308 	add.w	r3, r7, #8
 801847e:	4618      	mov	r0, r3
 8018480:	f7ff fce6 	bl	8017e50 <find_volume>
 8018484:	4603      	mov	r3, r0
 8018486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801848a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801848e:	2b00      	cmp	r3, #0
 8018490:	f040 819f 	bne.w	80187d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018498:	68ba      	ldr	r2, [r7, #8]
 801849a:	f107 0318 	add.w	r3, r7, #24
 801849e:	4611      	mov	r1, r2
 80184a0:	4618      	mov	r0, r3
 80184a2:	f7ff fbc5 	bl	8017c30 <follow_path>
 80184a6:	4603      	mov	r3, r0
 80184a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80184ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d11a      	bne.n	80184ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80184b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80184b8:	b25b      	sxtb	r3, r3
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	da03      	bge.n	80184c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80184be:	2306      	movs	r3, #6
 80184c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80184c4:	e011      	b.n	80184ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80184c6:	79fb      	ldrb	r3, [r7, #7]
 80184c8:	f023 0301 	bic.w	r3, r3, #1
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	bf14      	ite	ne
 80184d0:	2301      	movne	r3, #1
 80184d2:	2300      	moveq	r3, #0
 80184d4:	b2db      	uxtb	r3, r3
 80184d6:	461a      	mov	r2, r3
 80184d8:	f107 0318 	add.w	r3, r7, #24
 80184dc:	4611      	mov	r1, r2
 80184de:	4618      	mov	r0, r3
 80184e0:	f7fd ff70 	bl	80163c4 <chk_lock>
 80184e4:	4603      	mov	r3, r0
 80184e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80184ea:	79fb      	ldrb	r3, [r7, #7]
 80184ec:	f003 031c 	and.w	r3, r3, #28
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d07f      	beq.n	80185f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80184f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d017      	beq.n	801852c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80184fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018500:	2b04      	cmp	r3, #4
 8018502:	d10e      	bne.n	8018522 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018504:	f7fd ffba 	bl	801647c <enq_lock>
 8018508:	4603      	mov	r3, r0
 801850a:	2b00      	cmp	r3, #0
 801850c:	d006      	beq.n	801851c <f_open+0xc8>
 801850e:	f107 0318 	add.w	r3, r7, #24
 8018512:	4618      	mov	r0, r3
 8018514:	f7ff f8dc 	bl	80176d0 <dir_register>
 8018518:	4603      	mov	r3, r0
 801851a:	e000      	b.n	801851e <f_open+0xca>
 801851c:	2312      	movs	r3, #18
 801851e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018522:	79fb      	ldrb	r3, [r7, #7]
 8018524:	f043 0308 	orr.w	r3, r3, #8
 8018528:	71fb      	strb	r3, [r7, #7]
 801852a:	e010      	b.n	801854e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801852c:	7fbb      	ldrb	r3, [r7, #30]
 801852e:	f003 0311 	and.w	r3, r3, #17
 8018532:	2b00      	cmp	r3, #0
 8018534:	d003      	beq.n	801853e <f_open+0xea>
					res = FR_DENIED;
 8018536:	2307      	movs	r3, #7
 8018538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801853c:	e007      	b.n	801854e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801853e:	79fb      	ldrb	r3, [r7, #7]
 8018540:	f003 0304 	and.w	r3, r3, #4
 8018544:	2b00      	cmp	r3, #0
 8018546:	d002      	beq.n	801854e <f_open+0xfa>
 8018548:	2308      	movs	r3, #8
 801854a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801854e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018552:	2b00      	cmp	r3, #0
 8018554:	d168      	bne.n	8018628 <f_open+0x1d4>
 8018556:	79fb      	ldrb	r3, [r7, #7]
 8018558:	f003 0308 	and.w	r3, r3, #8
 801855c:	2b00      	cmp	r3, #0
 801855e:	d063      	beq.n	8018628 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018560:	f7fb fbe8 	bl	8013d34 <get_fattime>
 8018564:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018568:	330e      	adds	r3, #14
 801856a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801856c:	4618      	mov	r0, r3
 801856e:	f7fd fe7f 	bl	8016270 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018574:	3316      	adds	r3, #22
 8018576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018578:	4618      	mov	r0, r3
 801857a:	f7fd fe79 	bl	8016270 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018580:	330b      	adds	r3, #11
 8018582:	2220      	movs	r2, #32
 8018584:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801858a:	4611      	mov	r1, r2
 801858c:	4618      	mov	r0, r3
 801858e:	f7fe fe17 	bl	80171c0 <ld_clust>
 8018592:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018598:	2200      	movs	r2, #0
 801859a:	4618      	mov	r0, r3
 801859c:	f7fe fe2f 	bl	80171fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80185a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185a2:	331c      	adds	r3, #28
 80185a4:	2100      	movs	r1, #0
 80185a6:	4618      	mov	r0, r3
 80185a8:	f7fd fe62 	bl	8016270 <st_dword>
					fs->wflag = 1;
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	2201      	movs	r2, #1
 80185b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80185b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d037      	beq.n	8018628 <f_open+0x1d4>
						dw = fs->winsect;
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80185be:	f107 0318 	add.w	r3, r7, #24
 80185c2:	2200      	movs	r2, #0
 80185c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7fe fb57 	bl	8016c7a <remove_chain>
 80185cc:	4603      	mov	r3, r0
 80185ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80185d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d126      	bne.n	8018628 <f_open+0x1d4>
							res = move_window(fs, dw);
 80185da:	697b      	ldr	r3, [r7, #20]
 80185dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80185de:	4618      	mov	r0, r3
 80185e0:	f7fe f8a0 	bl	8016724 <move_window>
 80185e4:	4603      	mov	r3, r0
 80185e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80185ea:	697b      	ldr	r3, [r7, #20]
 80185ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80185ee:	3a01      	subs	r2, #1
 80185f0:	615a      	str	r2, [r3, #20]
 80185f2:	e019      	b.n	8018628 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80185f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d115      	bne.n	8018628 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80185fc:	7fbb      	ldrb	r3, [r7, #30]
 80185fe:	f003 0310 	and.w	r3, r3, #16
 8018602:	2b00      	cmp	r3, #0
 8018604:	d003      	beq.n	801860e <f_open+0x1ba>
					res = FR_NO_FILE;
 8018606:	2304      	movs	r3, #4
 8018608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801860c:	e00c      	b.n	8018628 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801860e:	79fb      	ldrb	r3, [r7, #7]
 8018610:	f003 0302 	and.w	r3, r3, #2
 8018614:	2b00      	cmp	r3, #0
 8018616:	d007      	beq.n	8018628 <f_open+0x1d4>
 8018618:	7fbb      	ldrb	r3, [r7, #30]
 801861a:	f003 0301 	and.w	r3, r3, #1
 801861e:	2b00      	cmp	r3, #0
 8018620:	d002      	beq.n	8018628 <f_open+0x1d4>
						res = FR_DENIED;
 8018622:	2307      	movs	r3, #7
 8018624:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801862c:	2b00      	cmp	r3, #0
 801862e:	d128      	bne.n	8018682 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018630:	79fb      	ldrb	r3, [r7, #7]
 8018632:	f003 0308 	and.w	r3, r3, #8
 8018636:	2b00      	cmp	r3, #0
 8018638:	d003      	beq.n	8018642 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801863a:	79fb      	ldrb	r3, [r7, #7]
 801863c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018640:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801864a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018650:	79fb      	ldrb	r3, [r7, #7]
 8018652:	f023 0301 	bic.w	r3, r3, #1
 8018656:	2b00      	cmp	r3, #0
 8018658:	bf14      	ite	ne
 801865a:	2301      	movne	r3, #1
 801865c:	2300      	moveq	r3, #0
 801865e:	b2db      	uxtb	r3, r3
 8018660:	461a      	mov	r2, r3
 8018662:	f107 0318 	add.w	r3, r7, #24
 8018666:	4611      	mov	r1, r2
 8018668:	4618      	mov	r0, r3
 801866a:	f7fd ff29 	bl	80164c0 <inc_lock>
 801866e:	4602      	mov	r2, r0
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	691b      	ldr	r3, [r3, #16]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d102      	bne.n	8018682 <f_open+0x22e>
 801867c:	2302      	movs	r3, #2
 801867e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018686:	2b00      	cmp	r3, #0
 8018688:	f040 80a3 	bne.w	80187d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018690:	4611      	mov	r1, r2
 8018692:	4618      	mov	r0, r3
 8018694:	f7fe fd94 	bl	80171c0 <ld_clust>
 8018698:	4602      	mov	r2, r0
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a0:	331c      	adds	r3, #28
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7fd fda6 	bl	80161f4 <ld_dword>
 80186a8:	4602      	mov	r2, r0
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	2200      	movs	r2, #0
 80186b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80186b4:	697a      	ldr	r2, [r7, #20]
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80186ba:	697b      	ldr	r3, [r7, #20]
 80186bc:	88da      	ldrh	r2, [r3, #6]
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	79fa      	ldrb	r2, [r7, #7]
 80186c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	2200      	movs	r2, #0
 80186cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	2200      	movs	r2, #0
 80186d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	2200      	movs	r2, #0
 80186d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	3330      	adds	r3, #48	; 0x30
 80186de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80186e2:	2100      	movs	r1, #0
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7fd fe10 	bl	801630a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80186ea:	79fb      	ldrb	r3, [r7, #7]
 80186ec:	f003 0320 	and.w	r3, r3, #32
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d06e      	beq.n	80187d2 <f_open+0x37e>
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	68db      	ldr	r3, [r3, #12]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d06a      	beq.n	80187d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	68da      	ldr	r2, [r3, #12]
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	895b      	ldrh	r3, [r3, #10]
 8018708:	461a      	mov	r2, r3
 801870a:	697b      	ldr	r3, [r7, #20]
 801870c:	899b      	ldrh	r3, [r3, #12]
 801870e:	fb02 f303 	mul.w	r3, r2, r3
 8018712:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	689b      	ldr	r3, [r3, #8]
 8018718:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	68db      	ldr	r3, [r3, #12]
 801871e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018720:	e016      	b.n	8018750 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018726:	4618      	mov	r0, r3
 8018728:	f7fe f8b9 	bl	801689e <get_fat>
 801872c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801872e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018730:	2b01      	cmp	r3, #1
 8018732:	d802      	bhi.n	801873a <f_open+0x2e6>
 8018734:	2302      	movs	r3, #2
 8018736:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801873a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801873c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018740:	d102      	bne.n	8018748 <f_open+0x2f4>
 8018742:	2301      	movs	r3, #1
 8018744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801874a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801874c:	1ad3      	subs	r3, r2, r3
 801874e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018750:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018754:	2b00      	cmp	r3, #0
 8018756:	d103      	bne.n	8018760 <f_open+0x30c>
 8018758:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801875a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801875c:	429a      	cmp	r2, r3
 801875e:	d8e0      	bhi.n	8018722 <f_open+0x2ce>
				}
				fp->clust = clst;
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018764:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018766:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801876a:	2b00      	cmp	r3, #0
 801876c:	d131      	bne.n	80187d2 <f_open+0x37e>
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	899b      	ldrh	r3, [r3, #12]
 8018772:	461a      	mov	r2, r3
 8018774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018776:	fbb3 f1f2 	udiv	r1, r3, r2
 801877a:	fb01 f202 	mul.w	r2, r1, r2
 801877e:	1a9b      	subs	r3, r3, r2
 8018780:	2b00      	cmp	r3, #0
 8018782:	d026      	beq.n	80187d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018788:	4618      	mov	r0, r3
 801878a:	f7fe f869 	bl	8016860 <clust2sect>
 801878e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018792:	2b00      	cmp	r3, #0
 8018794:	d103      	bne.n	801879e <f_open+0x34a>
						res = FR_INT_ERR;
 8018796:	2302      	movs	r3, #2
 8018798:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801879c:	e019      	b.n	80187d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	899b      	ldrh	r3, [r3, #12]
 80187a2:	461a      	mov	r2, r3
 80187a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80187a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80187aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80187ac:	441a      	add	r2, r3
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	7858      	ldrb	r0, [r3, #1]
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	6a1a      	ldr	r2, [r3, #32]
 80187c0:	2301      	movs	r3, #1
 80187c2:	f7fd fca1 	bl	8016108 <disk_read>
 80187c6:	4603      	mov	r3, r0
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d002      	beq.n	80187d2 <f_open+0x37e>
 80187cc:	2301      	movs	r3, #1
 80187ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80187d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d002      	beq.n	80187e0 <f_open+0x38c>
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	2200      	movs	r2, #0
 80187de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80187e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80187e4:	4618      	mov	r0, r3
 80187e6:	3768      	adds	r7, #104	; 0x68
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}

080187ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b086      	sub	sp, #24
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	f107 0208 	add.w	r2, r7, #8
 80187fa:	4611      	mov	r1, r2
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7ff fdad 	bl	801835c <validate>
 8018802:	4603      	mov	r3, r0
 8018804:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018806:	7dfb      	ldrb	r3, [r7, #23]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d168      	bne.n	80188de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	7d1b      	ldrb	r3, [r3, #20]
 8018810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018814:	2b00      	cmp	r3, #0
 8018816:	d062      	beq.n	80188de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	7d1b      	ldrb	r3, [r3, #20]
 801881c:	b25b      	sxtb	r3, r3
 801881e:	2b00      	cmp	r3, #0
 8018820:	da15      	bge.n	801884e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	7858      	ldrb	r0, [r3, #1]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6a1a      	ldr	r2, [r3, #32]
 8018830:	2301      	movs	r3, #1
 8018832:	f7fd fc89 	bl	8016148 <disk_write>
 8018836:	4603      	mov	r3, r0
 8018838:	2b00      	cmp	r3, #0
 801883a:	d001      	beq.n	8018840 <f_sync+0x54>
 801883c:	2301      	movs	r3, #1
 801883e:	e04f      	b.n	80188e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	7d1b      	ldrb	r3, [r3, #20]
 8018844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018848:	b2da      	uxtb	r2, r3
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801884e:	f7fb fa71 	bl	8013d34 <get_fattime>
 8018852:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018854:	68ba      	ldr	r2, [r7, #8]
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801885a:	4619      	mov	r1, r3
 801885c:	4610      	mov	r0, r2
 801885e:	f7fd ff61 	bl	8016724 <move_window>
 8018862:	4603      	mov	r3, r0
 8018864:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018866:	7dfb      	ldrb	r3, [r7, #23]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d138      	bne.n	80188de <f_sync+0xf2>
					dir = fp->dir_ptr;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018870:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	330b      	adds	r3, #11
 8018876:	781a      	ldrb	r2, [r3, #0]
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	330b      	adds	r3, #11
 801887c:	f042 0220 	orr.w	r2, r2, #32
 8018880:	b2d2      	uxtb	r2, r2
 8018882:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6818      	ldr	r0, [r3, #0]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	689b      	ldr	r3, [r3, #8]
 801888c:	461a      	mov	r2, r3
 801888e:	68f9      	ldr	r1, [r7, #12]
 8018890:	f7fe fcb5 	bl	80171fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f103 021c 	add.w	r2, r3, #28
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	68db      	ldr	r3, [r3, #12]
 801889e:	4619      	mov	r1, r3
 80188a0:	4610      	mov	r0, r2
 80188a2:	f7fd fce5 	bl	8016270 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	3316      	adds	r3, #22
 80188aa:	6939      	ldr	r1, [r7, #16]
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7fd fcdf 	bl	8016270 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	3312      	adds	r3, #18
 80188b6:	2100      	movs	r1, #0
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7fd fcbe 	bl	801623a <st_word>
					fs->wflag = 1;
 80188be:	68bb      	ldr	r3, [r7, #8]
 80188c0:	2201      	movs	r2, #1
 80188c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7fd ff5a 	bl	8016780 <sync_fs>
 80188cc:	4603      	mov	r3, r0
 80188ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	7d1b      	ldrb	r3, [r3, #20]
 80188d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80188d8:	b2da      	uxtb	r2, r3
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80188de:	7dfb      	ldrb	r3, [r7, #23]
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3718      	adds	r7, #24
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}

080188e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b084      	sub	sp, #16
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	f7ff ff7b 	bl	80187ec <f_sync>
 80188f6:	4603      	mov	r3, r0
 80188f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80188fa:	7bfb      	ldrb	r3, [r7, #15]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d118      	bne.n	8018932 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f107 0208 	add.w	r2, r7, #8
 8018906:	4611      	mov	r1, r2
 8018908:	4618      	mov	r0, r3
 801890a:	f7ff fd27 	bl	801835c <validate>
 801890e:	4603      	mov	r3, r0
 8018910:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018912:	7bfb      	ldrb	r3, [r7, #15]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d10c      	bne.n	8018932 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	691b      	ldr	r3, [r3, #16]
 801891c:	4618      	mov	r0, r3
 801891e:	f7fd fe5d 	bl	80165dc <dec_lock>
 8018922:	4603      	mov	r3, r0
 8018924:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018926:	7bfb      	ldrb	r3, [r7, #15]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d102      	bne.n	8018932 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2200      	movs	r2, #0
 8018930:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8018932:	7bfb      	ldrb	r3, [r7, #15]
}
 8018934:	4618      	mov	r0, r3
 8018936:	3710      	adds	r7, #16
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}

0801893c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801893c:	b480      	push	{r7}
 801893e:	b087      	sub	sp, #28
 8018940:	af00      	add	r7, sp, #0
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	4613      	mov	r3, r2
 8018948:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801894a:	2301      	movs	r3, #1
 801894c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801894e:	2300      	movs	r3, #0
 8018950:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018952:	4b1f      	ldr	r3, [pc, #124]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018954:	7a5b      	ldrb	r3, [r3, #9]
 8018956:	b2db      	uxtb	r3, r3
 8018958:	2b00      	cmp	r3, #0
 801895a:	d131      	bne.n	80189c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801895c:	4b1c      	ldr	r3, [pc, #112]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801895e:	7a5b      	ldrb	r3, [r3, #9]
 8018960:	b2db      	uxtb	r3, r3
 8018962:	461a      	mov	r2, r3
 8018964:	4b1a      	ldr	r3, [pc, #104]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018966:	2100      	movs	r1, #0
 8018968:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801896a:	4b19      	ldr	r3, [pc, #100]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801896c:	7a5b      	ldrb	r3, [r3, #9]
 801896e:	b2db      	uxtb	r3, r3
 8018970:	4a17      	ldr	r2, [pc, #92]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018972:	009b      	lsls	r3, r3, #2
 8018974:	4413      	add	r3, r2
 8018976:	68fa      	ldr	r2, [r7, #12]
 8018978:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801897a:	4b15      	ldr	r3, [pc, #84]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801897c:	7a5b      	ldrb	r3, [r3, #9]
 801897e:	b2db      	uxtb	r3, r3
 8018980:	461a      	mov	r2, r3
 8018982:	4b13      	ldr	r3, [pc, #76]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018984:	4413      	add	r3, r2
 8018986:	79fa      	ldrb	r2, [r7, #7]
 8018988:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801898a:	4b11      	ldr	r3, [pc, #68]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801898c:	7a5b      	ldrb	r3, [r3, #9]
 801898e:	b2db      	uxtb	r3, r3
 8018990:	1c5a      	adds	r2, r3, #1
 8018992:	b2d1      	uxtb	r1, r2
 8018994:	4a0e      	ldr	r2, [pc, #56]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018996:	7251      	strb	r1, [r2, #9]
 8018998:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801899a:	7dbb      	ldrb	r3, [r7, #22]
 801899c:	3330      	adds	r3, #48	; 0x30
 801899e:	b2da      	uxtb	r2, r3
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	3301      	adds	r3, #1
 80189a8:	223a      	movs	r2, #58	; 0x3a
 80189aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	3302      	adds	r3, #2
 80189b0:	222f      	movs	r2, #47	; 0x2f
 80189b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80189b4:	68bb      	ldr	r3, [r7, #8]
 80189b6:	3303      	adds	r3, #3
 80189b8:	2200      	movs	r2, #0
 80189ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80189bc:	2300      	movs	r3, #0
 80189be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80189c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	371c      	adds	r7, #28
 80189c6:	46bd      	mov	sp, r7
 80189c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189cc:	4770      	bx	lr
 80189ce:	bf00      	nop
 80189d0:	240018d0 	.word	0x240018d0

080189d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80189de:	2200      	movs	r2, #0
 80189e0:	6839      	ldr	r1, [r7, #0]
 80189e2:	6878      	ldr	r0, [r7, #4]
 80189e4:	f7ff ffaa 	bl	801893c <FATFS_LinkDriverEx>
 80189e8:	4603      	mov	r3, r0
}
 80189ea:	4618      	mov	r0, r3
 80189ec:	3708      	adds	r7, #8
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
	...

080189f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80189f4:	b480      	push	{r7}
 80189f6:	b085      	sub	sp, #20
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	4603      	mov	r3, r0
 80189fc:	6039      	str	r1, [r7, #0]
 80189fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018a00:	88fb      	ldrh	r3, [r7, #6]
 8018a02:	2b7f      	cmp	r3, #127	; 0x7f
 8018a04:	d802      	bhi.n	8018a0c <ff_convert+0x18>
		c = chr;
 8018a06:	88fb      	ldrh	r3, [r7, #6]
 8018a08:	81fb      	strh	r3, [r7, #14]
 8018a0a:	e025      	b.n	8018a58 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d00b      	beq.n	8018a2a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8018a12:	88fb      	ldrh	r3, [r7, #6]
 8018a14:	2bff      	cmp	r3, #255	; 0xff
 8018a16:	d805      	bhi.n	8018a24 <ff_convert+0x30>
 8018a18:	88fb      	ldrh	r3, [r7, #6]
 8018a1a:	3b80      	subs	r3, #128	; 0x80
 8018a1c:	4a12      	ldr	r2, [pc, #72]	; (8018a68 <ff_convert+0x74>)
 8018a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a22:	e000      	b.n	8018a26 <ff_convert+0x32>
 8018a24:	2300      	movs	r3, #0
 8018a26:	81fb      	strh	r3, [r7, #14]
 8018a28:	e016      	b.n	8018a58 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	81fb      	strh	r3, [r7, #14]
 8018a2e:	e009      	b.n	8018a44 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018a30:	89fb      	ldrh	r3, [r7, #14]
 8018a32:	4a0d      	ldr	r2, [pc, #52]	; (8018a68 <ff_convert+0x74>)
 8018a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a38:	88fa      	ldrh	r2, [r7, #6]
 8018a3a:	429a      	cmp	r2, r3
 8018a3c:	d006      	beq.n	8018a4c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018a3e:	89fb      	ldrh	r3, [r7, #14]
 8018a40:	3301      	adds	r3, #1
 8018a42:	81fb      	strh	r3, [r7, #14]
 8018a44:	89fb      	ldrh	r3, [r7, #14]
 8018a46:	2b7f      	cmp	r3, #127	; 0x7f
 8018a48:	d9f2      	bls.n	8018a30 <ff_convert+0x3c>
 8018a4a:	e000      	b.n	8018a4e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018a4c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018a4e:	89fb      	ldrh	r3, [r7, #14]
 8018a50:	3380      	adds	r3, #128	; 0x80
 8018a52:	b29b      	uxth	r3, r3
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018a58:	89fb      	ldrh	r3, [r7, #14]
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3714      	adds	r7, #20
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a64:	4770      	bx	lr
 8018a66:	bf00      	nop
 8018a68:	0801dd88 	.word	0x0801dd88

08018a6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	b087      	sub	sp, #28
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	4603      	mov	r3, r0
 8018a74:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8018a76:	88fb      	ldrh	r3, [r7, #6]
 8018a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018a7c:	d201      	bcs.n	8018a82 <ff_wtoupper+0x16>
 8018a7e:	4b3e      	ldr	r3, [pc, #248]	; (8018b78 <ff_wtoupper+0x10c>)
 8018a80:	e000      	b.n	8018a84 <ff_wtoupper+0x18>
 8018a82:	4b3e      	ldr	r3, [pc, #248]	; (8018b7c <ff_wtoupper+0x110>)
 8018a84:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8018a86:	697b      	ldr	r3, [r7, #20]
 8018a88:	1c9a      	adds	r2, r3, #2
 8018a8a:	617a      	str	r2, [r7, #20]
 8018a8c:	881b      	ldrh	r3, [r3, #0]
 8018a8e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8018a90:	8a7b      	ldrh	r3, [r7, #18]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d068      	beq.n	8018b68 <ff_wtoupper+0xfc>
 8018a96:	88fa      	ldrh	r2, [r7, #6]
 8018a98:	8a7b      	ldrh	r3, [r7, #18]
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d364      	bcc.n	8018b68 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8018a9e:	697b      	ldr	r3, [r7, #20]
 8018aa0:	1c9a      	adds	r2, r3, #2
 8018aa2:	617a      	str	r2, [r7, #20]
 8018aa4:	881b      	ldrh	r3, [r3, #0]
 8018aa6:	823b      	strh	r3, [r7, #16]
 8018aa8:	8a3b      	ldrh	r3, [r7, #16]
 8018aaa:	0a1b      	lsrs	r3, r3, #8
 8018aac:	81fb      	strh	r3, [r7, #14]
 8018aae:	8a3b      	ldrh	r3, [r7, #16]
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8018ab4:	88fa      	ldrh	r2, [r7, #6]
 8018ab6:	8a79      	ldrh	r1, [r7, #18]
 8018ab8:	8a3b      	ldrh	r3, [r7, #16]
 8018aba:	440b      	add	r3, r1
 8018abc:	429a      	cmp	r2, r3
 8018abe:	da49      	bge.n	8018b54 <ff_wtoupper+0xe8>
			switch (cmd) {
 8018ac0:	89fb      	ldrh	r3, [r7, #14]
 8018ac2:	2b08      	cmp	r3, #8
 8018ac4:	d84f      	bhi.n	8018b66 <ff_wtoupper+0xfa>
 8018ac6:	a201      	add	r2, pc, #4	; (adr r2, 8018acc <ff_wtoupper+0x60>)
 8018ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018acc:	08018af1 	.word	0x08018af1
 8018ad0:	08018b03 	.word	0x08018b03
 8018ad4:	08018b19 	.word	0x08018b19
 8018ad8:	08018b21 	.word	0x08018b21
 8018adc:	08018b29 	.word	0x08018b29
 8018ae0:	08018b31 	.word	0x08018b31
 8018ae4:	08018b39 	.word	0x08018b39
 8018ae8:	08018b41 	.word	0x08018b41
 8018aec:	08018b49 	.word	0x08018b49
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018af0:	88fa      	ldrh	r2, [r7, #6]
 8018af2:	8a7b      	ldrh	r3, [r7, #18]
 8018af4:	1ad3      	subs	r3, r2, r3
 8018af6:	005b      	lsls	r3, r3, #1
 8018af8:	697a      	ldr	r2, [r7, #20]
 8018afa:	4413      	add	r3, r2
 8018afc:	881b      	ldrh	r3, [r3, #0]
 8018afe:	80fb      	strh	r3, [r7, #6]
 8018b00:	e027      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8018b02:	88fa      	ldrh	r2, [r7, #6]
 8018b04:	8a7b      	ldrh	r3, [r7, #18]
 8018b06:	1ad3      	subs	r3, r2, r3
 8018b08:	b29b      	uxth	r3, r3
 8018b0a:	f003 0301 	and.w	r3, r3, #1
 8018b0e:	b29b      	uxth	r3, r3
 8018b10:	88fa      	ldrh	r2, [r7, #6]
 8018b12:	1ad3      	subs	r3, r2, r3
 8018b14:	80fb      	strh	r3, [r7, #6]
 8018b16:	e01c      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018b18:	88fb      	ldrh	r3, [r7, #6]
 8018b1a:	3b10      	subs	r3, #16
 8018b1c:	80fb      	strh	r3, [r7, #6]
 8018b1e:	e018      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018b20:	88fb      	ldrh	r3, [r7, #6]
 8018b22:	3b20      	subs	r3, #32
 8018b24:	80fb      	strh	r3, [r7, #6]
 8018b26:	e014      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018b28:	88fb      	ldrh	r3, [r7, #6]
 8018b2a:	3b30      	subs	r3, #48	; 0x30
 8018b2c:	80fb      	strh	r3, [r7, #6]
 8018b2e:	e010      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018b30:	88fb      	ldrh	r3, [r7, #6]
 8018b32:	3b1a      	subs	r3, #26
 8018b34:	80fb      	strh	r3, [r7, #6]
 8018b36:	e00c      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018b38:	88fb      	ldrh	r3, [r7, #6]
 8018b3a:	3308      	adds	r3, #8
 8018b3c:	80fb      	strh	r3, [r7, #6]
 8018b3e:	e008      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018b40:	88fb      	ldrh	r3, [r7, #6]
 8018b42:	3b50      	subs	r3, #80	; 0x50
 8018b44:	80fb      	strh	r3, [r7, #6]
 8018b46:	e004      	b.n	8018b52 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018b48:	88fb      	ldrh	r3, [r7, #6]
 8018b4a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018b4e:	80fb      	strh	r3, [r7, #6]
 8018b50:	bf00      	nop
			}
			break;
 8018b52:	e008      	b.n	8018b66 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018b54:	89fb      	ldrh	r3, [r7, #14]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d195      	bne.n	8018a86 <ff_wtoupper+0x1a>
 8018b5a:	8a3b      	ldrh	r3, [r7, #16]
 8018b5c:	005b      	lsls	r3, r3, #1
 8018b5e:	697a      	ldr	r2, [r7, #20]
 8018b60:	4413      	add	r3, r2
 8018b62:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018b64:	e78f      	b.n	8018a86 <ff_wtoupper+0x1a>
			break;
 8018b66:	bf00      	nop
	}

	return chr;
 8018b68:	88fb      	ldrh	r3, [r7, #6]
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	371c      	adds	r7, #28
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b74:	4770      	bx	lr
 8018b76:	bf00      	nop
 8018b78:	0801de88 	.word	0x0801de88
 8018b7c:	0801e07c 	.word	0x0801e07c

08018b80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8018b84:	2201      	movs	r2, #1
 8018b86:	4913      	ldr	r1, [pc, #76]	; (8018bd4 <MX_USB_DEVICE_Init+0x54>)
 8018b88:	4813      	ldr	r0, [pc, #76]	; (8018bd8 <MX_USB_DEVICE_Init+0x58>)
 8018b8a:	f7fb ff85 	bl	8014a98 <USBD_Init>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d001      	beq.n	8018b98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018b94:	f7e9 fc2a 	bl	80023ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8018b98:	4910      	ldr	r1, [pc, #64]	; (8018bdc <MX_USB_DEVICE_Init+0x5c>)
 8018b9a:	480f      	ldr	r0, [pc, #60]	; (8018bd8 <MX_USB_DEVICE_Init+0x58>)
 8018b9c:	f7fb ffac 	bl	8014af8 <USBD_RegisterClass>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d001      	beq.n	8018baa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018ba6:	f7e9 fc21 	bl	80023ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8018baa:	490d      	ldr	r1, [pc, #52]	; (8018be0 <MX_USB_DEVICE_Init+0x60>)
 8018bac:	480a      	ldr	r0, [pc, #40]	; (8018bd8 <MX_USB_DEVICE_Init+0x58>)
 8018bae:	f7fb fee3 	bl	8014978 <USBD_CDC_RegisterInterface>
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d001      	beq.n	8018bbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018bb8:	f7e9 fc18 	bl	80023ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8018bbc:	4806      	ldr	r0, [pc, #24]	; (8018bd8 <MX_USB_DEVICE_Init+0x58>)
 8018bbe:	f7fb ffd1 	bl	8014b64 <USBD_Start>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d001      	beq.n	8018bcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018bc8:	f7e9 fc10 	bl	80023ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018bcc:	f7f0 fc3c 	bl	8009448 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018bd0:	bf00      	nop
 8018bd2:	bd80      	pop	{r7, pc}
 8018bd4:	240000b0 	.word	0x240000b0
 8018bd8:	240018dc 	.word	0x240018dc
 8018bdc:	2400001c 	.word	0x2400001c
 8018be0:	2400009c 	.word	0x2400009c

08018be4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8018be8:	2200      	movs	r2, #0
 8018bea:	4905      	ldr	r1, [pc, #20]	; (8018c00 <CDC_Init_HS+0x1c>)
 8018bec:	4805      	ldr	r0, [pc, #20]	; (8018c04 <CDC_Init_HS+0x20>)
 8018bee:	f7fb fedd 	bl	80149ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8018bf2:	4905      	ldr	r1, [pc, #20]	; (8018c08 <CDC_Init_HS+0x24>)
 8018bf4:	4803      	ldr	r0, [pc, #12]	; (8018c04 <CDC_Init_HS+0x20>)
 8018bf6:	f7fb fefb 	bl	80149f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018bfa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	bd80      	pop	{r7, pc}
 8018c00:	240023b8 	.word	0x240023b8
 8018c04:	240018dc 	.word	0x240018dc
 8018c08:	24001bb8 	.word	0x24001bb8

08018c0c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8018c0c:	b480      	push	{r7}
 8018c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8018c10:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8018c12:	4618      	mov	r0, r3
 8018c14:	46bd      	mov	sp, r7
 8018c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1a:	4770      	bx	lr

08018c1c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	4603      	mov	r3, r0
 8018c24:	6039      	str	r1, [r7, #0]
 8018c26:	71fb      	strb	r3, [r7, #7]
 8018c28:	4613      	mov	r3, r2
 8018c2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8018c2c:	79fb      	ldrb	r3, [r7, #7]
 8018c2e:	2b23      	cmp	r3, #35	; 0x23
 8018c30:	d84a      	bhi.n	8018cc8 <CDC_Control_HS+0xac>
 8018c32:	a201      	add	r2, pc, #4	; (adr r2, 8018c38 <CDC_Control_HS+0x1c>)
 8018c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c38:	08018cc9 	.word	0x08018cc9
 8018c3c:	08018cc9 	.word	0x08018cc9
 8018c40:	08018cc9 	.word	0x08018cc9
 8018c44:	08018cc9 	.word	0x08018cc9
 8018c48:	08018cc9 	.word	0x08018cc9
 8018c4c:	08018cc9 	.word	0x08018cc9
 8018c50:	08018cc9 	.word	0x08018cc9
 8018c54:	08018cc9 	.word	0x08018cc9
 8018c58:	08018cc9 	.word	0x08018cc9
 8018c5c:	08018cc9 	.word	0x08018cc9
 8018c60:	08018cc9 	.word	0x08018cc9
 8018c64:	08018cc9 	.word	0x08018cc9
 8018c68:	08018cc9 	.word	0x08018cc9
 8018c6c:	08018cc9 	.word	0x08018cc9
 8018c70:	08018cc9 	.word	0x08018cc9
 8018c74:	08018cc9 	.word	0x08018cc9
 8018c78:	08018cc9 	.word	0x08018cc9
 8018c7c:	08018cc9 	.word	0x08018cc9
 8018c80:	08018cc9 	.word	0x08018cc9
 8018c84:	08018cc9 	.word	0x08018cc9
 8018c88:	08018cc9 	.word	0x08018cc9
 8018c8c:	08018cc9 	.word	0x08018cc9
 8018c90:	08018cc9 	.word	0x08018cc9
 8018c94:	08018cc9 	.word	0x08018cc9
 8018c98:	08018cc9 	.word	0x08018cc9
 8018c9c:	08018cc9 	.word	0x08018cc9
 8018ca0:	08018cc9 	.word	0x08018cc9
 8018ca4:	08018cc9 	.word	0x08018cc9
 8018ca8:	08018cc9 	.word	0x08018cc9
 8018cac:	08018cc9 	.word	0x08018cc9
 8018cb0:	08018cc9 	.word	0x08018cc9
 8018cb4:	08018cc9 	.word	0x08018cc9
 8018cb8:	08018cc9 	.word	0x08018cc9
 8018cbc:	08018cc9 	.word	0x08018cc9
 8018cc0:	08018cc9 	.word	0x08018cc9
 8018cc4:	08018cc9 	.word	0x08018cc9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018cc8:	bf00      	nop
  }

  return (USBD_OK);
 8018cca:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8018ccc:	4618      	mov	r0, r3
 8018cce:	370c      	adds	r7, #12
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd6:	4770      	bx	lr

08018cd8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b082      	sub	sp, #8
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
 8018ce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8018ce2:	6879      	ldr	r1, [r7, #4]
 8018ce4:	4805      	ldr	r0, [pc, #20]	; (8018cfc <CDC_Receive_HS+0x24>)
 8018ce6:	f7fb fe83 	bl	80149f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8018cea:	4804      	ldr	r0, [pc, #16]	; (8018cfc <CDC_Receive_HS+0x24>)
 8018cec:	f7fb fe9e 	bl	8014a2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018cf0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	3708      	adds	r7, #8
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	240018dc 	.word	0x240018dc

08018d00 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018d00:	b480      	push	{r7}
 8018d02:	b087      	sub	sp, #28
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	60f8      	str	r0, [r7, #12]
 8018d08:	60b9      	str	r1, [r7, #8]
 8018d0a:	4613      	mov	r3, r2
 8018d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018d0e:	2300      	movs	r3, #0
 8018d10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8018d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	371c      	adds	r7, #28
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d20:	4770      	bx	lr
	...

08018d24 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d24:	b480      	push	{r7}
 8018d26:	b083      	sub	sp, #12
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	6039      	str	r1, [r7, #0]
 8018d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8018d30:	683b      	ldr	r3, [r7, #0]
 8018d32:	2212      	movs	r2, #18
 8018d34:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8018d36:	4b03      	ldr	r3, [pc, #12]	; (8018d44 <USBD_HS_DeviceDescriptor+0x20>)
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	370c      	adds	r7, #12
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d42:	4770      	bx	lr
 8018d44:	240000cc 	.word	0x240000cc

08018d48 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d48:	b480      	push	{r7}
 8018d4a:	b083      	sub	sp, #12
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	4603      	mov	r3, r0
 8018d50:	6039      	str	r1, [r7, #0]
 8018d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	2204      	movs	r2, #4
 8018d58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018d5a:	4b03      	ldr	r3, [pc, #12]	; (8018d68 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	370c      	adds	r7, #12
 8018d60:	46bd      	mov	sp, r7
 8018d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d66:	4770      	bx	lr
 8018d68:	240000e0 	.word	0x240000e0

08018d6c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b082      	sub	sp, #8
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	4603      	mov	r3, r0
 8018d74:	6039      	str	r1, [r7, #0]
 8018d76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018d78:	79fb      	ldrb	r3, [r7, #7]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d105      	bne.n	8018d8a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018d7e:	683a      	ldr	r2, [r7, #0]
 8018d80:	4907      	ldr	r1, [pc, #28]	; (8018da0 <USBD_HS_ProductStrDescriptor+0x34>)
 8018d82:	4808      	ldr	r0, [pc, #32]	; (8018da4 <USBD_HS_ProductStrDescriptor+0x38>)
 8018d84:	f7fd f8a0 	bl	8015ec8 <USBD_GetString>
 8018d88:	e004      	b.n	8018d94 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018d8a:	683a      	ldr	r2, [r7, #0]
 8018d8c:	4904      	ldr	r1, [pc, #16]	; (8018da0 <USBD_HS_ProductStrDescriptor+0x34>)
 8018d8e:	4805      	ldr	r0, [pc, #20]	; (8018da4 <USBD_HS_ProductStrDescriptor+0x38>)
 8018d90:	f7fd f89a 	bl	8015ec8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d94:	4b02      	ldr	r3, [pc, #8]	; (8018da0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8018d96:	4618      	mov	r0, r3
 8018d98:	3708      	adds	r7, #8
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}
 8018d9e:	bf00      	nop
 8018da0:	24002bb8 	.word	0x24002bb8
 8018da4:	0801dbf8 	.word	0x0801dbf8

08018da8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b082      	sub	sp, #8
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	4603      	mov	r3, r0
 8018db0:	6039      	str	r1, [r7, #0]
 8018db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018db4:	683a      	ldr	r2, [r7, #0]
 8018db6:	4904      	ldr	r1, [pc, #16]	; (8018dc8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8018db8:	4804      	ldr	r0, [pc, #16]	; (8018dcc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8018dba:	f7fd f885 	bl	8015ec8 <USBD_GetString>
  return USBD_StrDesc;
 8018dbe:	4b02      	ldr	r3, [pc, #8]	; (8018dc8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	3708      	adds	r7, #8
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd80      	pop	{r7, pc}
 8018dc8:	24002bb8 	.word	0x24002bb8
 8018dcc:	0801dc14 	.word	0x0801dc14

08018dd0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	6039      	str	r1, [r7, #0]
 8018dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	221a      	movs	r2, #26
 8018de0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018de2:	f000 f843 	bl	8018e6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018de6:	4b02      	ldr	r3, [pc, #8]	; (8018df0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8018de8:	4618      	mov	r0, r3
 8018dea:	3708      	adds	r7, #8
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	240000e4 	.word	0x240000e4

08018df4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b082      	sub	sp, #8
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	6039      	str	r1, [r7, #0]
 8018dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018e00:	79fb      	ldrb	r3, [r7, #7]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d105      	bne.n	8018e12 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018e06:	683a      	ldr	r2, [r7, #0]
 8018e08:	4907      	ldr	r1, [pc, #28]	; (8018e28 <USBD_HS_ConfigStrDescriptor+0x34>)
 8018e0a:	4808      	ldr	r0, [pc, #32]	; (8018e2c <USBD_HS_ConfigStrDescriptor+0x38>)
 8018e0c:	f7fd f85c 	bl	8015ec8 <USBD_GetString>
 8018e10:	e004      	b.n	8018e1c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018e12:	683a      	ldr	r2, [r7, #0]
 8018e14:	4904      	ldr	r1, [pc, #16]	; (8018e28 <USBD_HS_ConfigStrDescriptor+0x34>)
 8018e16:	4805      	ldr	r0, [pc, #20]	; (8018e2c <USBD_HS_ConfigStrDescriptor+0x38>)
 8018e18:	f7fd f856 	bl	8015ec8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018e1c:	4b02      	ldr	r3, [pc, #8]	; (8018e28 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	3708      	adds	r7, #8
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	24002bb8 	.word	0x24002bb8
 8018e2c:	0801dc18 	.word	0x0801dc18

08018e30 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b082      	sub	sp, #8
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	4603      	mov	r3, r0
 8018e38:	6039      	str	r1, [r7, #0]
 8018e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018e3c:	79fb      	ldrb	r3, [r7, #7]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d105      	bne.n	8018e4e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018e42:	683a      	ldr	r2, [r7, #0]
 8018e44:	4907      	ldr	r1, [pc, #28]	; (8018e64 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018e46:	4808      	ldr	r0, [pc, #32]	; (8018e68 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018e48:	f7fd f83e 	bl	8015ec8 <USBD_GetString>
 8018e4c:	e004      	b.n	8018e58 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018e4e:	683a      	ldr	r2, [r7, #0]
 8018e50:	4904      	ldr	r1, [pc, #16]	; (8018e64 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018e52:	4805      	ldr	r0, [pc, #20]	; (8018e68 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018e54:	f7fd f838 	bl	8015ec8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018e58:	4b02      	ldr	r3, [pc, #8]	; (8018e64 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	3708      	adds	r7, #8
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd80      	pop	{r7, pc}
 8018e62:	bf00      	nop
 8018e64:	24002bb8 	.word	0x24002bb8
 8018e68:	0801dc24 	.word	0x0801dc24

08018e6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b084      	sub	sp, #16
 8018e70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018e72:	4b0f      	ldr	r3, [pc, #60]	; (8018eb0 <Get_SerialNum+0x44>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018e78:	4b0e      	ldr	r3, [pc, #56]	; (8018eb4 <Get_SerialNum+0x48>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018e7e:	4b0e      	ldr	r3, [pc, #56]	; (8018eb8 <Get_SerialNum+0x4c>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018e84:	68fa      	ldr	r2, [r7, #12]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	4413      	add	r3, r2
 8018e8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d009      	beq.n	8018ea6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018e92:	2208      	movs	r2, #8
 8018e94:	4909      	ldr	r1, [pc, #36]	; (8018ebc <Get_SerialNum+0x50>)
 8018e96:	68f8      	ldr	r0, [r7, #12]
 8018e98:	f000 f814 	bl	8018ec4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018e9c:	2204      	movs	r2, #4
 8018e9e:	4908      	ldr	r1, [pc, #32]	; (8018ec0 <Get_SerialNum+0x54>)
 8018ea0:	68b8      	ldr	r0, [r7, #8]
 8018ea2:	f000 f80f 	bl	8018ec4 <IntToUnicode>
  }
}
 8018ea6:	bf00      	nop
 8018ea8:	3710      	adds	r7, #16
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}
 8018eae:	bf00      	nop
 8018eb0:	1ff1e800 	.word	0x1ff1e800
 8018eb4:	1ff1e804 	.word	0x1ff1e804
 8018eb8:	1ff1e808 	.word	0x1ff1e808
 8018ebc:	240000e6 	.word	0x240000e6
 8018ec0:	240000f6 	.word	0x240000f6

08018ec4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018ec4:	b480      	push	{r7}
 8018ec6:	b087      	sub	sp, #28
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	60f8      	str	r0, [r7, #12]
 8018ecc:	60b9      	str	r1, [r7, #8]
 8018ece:	4613      	mov	r3, r2
 8018ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	75fb      	strb	r3, [r7, #23]
 8018eda:	e027      	b.n	8018f2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	0f1b      	lsrs	r3, r3, #28
 8018ee0:	2b09      	cmp	r3, #9
 8018ee2:	d80b      	bhi.n	8018efc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	0f1b      	lsrs	r3, r3, #28
 8018ee8:	b2da      	uxtb	r2, r3
 8018eea:	7dfb      	ldrb	r3, [r7, #23]
 8018eec:	005b      	lsls	r3, r3, #1
 8018eee:	4619      	mov	r1, r3
 8018ef0:	68bb      	ldr	r3, [r7, #8]
 8018ef2:	440b      	add	r3, r1
 8018ef4:	3230      	adds	r2, #48	; 0x30
 8018ef6:	b2d2      	uxtb	r2, r2
 8018ef8:	701a      	strb	r2, [r3, #0]
 8018efa:	e00a      	b.n	8018f12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	0f1b      	lsrs	r3, r3, #28
 8018f00:	b2da      	uxtb	r2, r3
 8018f02:	7dfb      	ldrb	r3, [r7, #23]
 8018f04:	005b      	lsls	r3, r3, #1
 8018f06:	4619      	mov	r1, r3
 8018f08:	68bb      	ldr	r3, [r7, #8]
 8018f0a:	440b      	add	r3, r1
 8018f0c:	3237      	adds	r2, #55	; 0x37
 8018f0e:	b2d2      	uxtb	r2, r2
 8018f10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	011b      	lsls	r3, r3, #4
 8018f16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018f18:	7dfb      	ldrb	r3, [r7, #23]
 8018f1a:	005b      	lsls	r3, r3, #1
 8018f1c:	3301      	adds	r3, #1
 8018f1e:	68ba      	ldr	r2, [r7, #8]
 8018f20:	4413      	add	r3, r2
 8018f22:	2200      	movs	r2, #0
 8018f24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018f26:	7dfb      	ldrb	r3, [r7, #23]
 8018f28:	3301      	adds	r3, #1
 8018f2a:	75fb      	strb	r3, [r7, #23]
 8018f2c:	7dfa      	ldrb	r2, [r7, #23]
 8018f2e:	79fb      	ldrb	r3, [r7, #7]
 8018f30:	429a      	cmp	r2, r3
 8018f32:	d3d3      	bcc.n	8018edc <IntToUnicode+0x18>
  }
}
 8018f34:	bf00      	nop
 8018f36:	bf00      	nop
 8018f38:	371c      	adds	r7, #28
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f40:	4770      	bx	lr
	...

08018f44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b0b2      	sub	sp, #200	; 0xc8
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018f4c:	f107 0310 	add.w	r3, r7, #16
 8018f50:	22b8      	movs	r2, #184	; 0xb8
 8018f52:	2100      	movs	r1, #0
 8018f54:	4618      	mov	r0, r3
 8018f56:	f001 fa66 	bl	801a426 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	4a1a      	ldr	r2, [pc, #104]	; (8018fc8 <HAL_PCD_MspInit+0x84>)
 8018f60:	4293      	cmp	r3, r2
 8018f62:	d12c      	bne.n	8018fbe <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8018f68:	f04f 0300 	mov.w	r3, #0
 8018f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018f70:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8018f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018f78:	f107 0310 	add.w	r3, r7, #16
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7f1 fa43 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 8018f82:	4603      	mov	r3, r0
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d001      	beq.n	8018f8c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8018f88:	f7e9 fa30 	bl	80023ec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018f8c:	f7f0 fa5c 	bl	8009448 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8018f90:	4b0e      	ldr	r3, [pc, #56]	; (8018fcc <HAL_PCD_MspInit+0x88>)
 8018f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018f96:	4a0d      	ldr	r2, [pc, #52]	; (8018fcc <HAL_PCD_MspInit+0x88>)
 8018f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018f9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018fa0:	4b0a      	ldr	r3, [pc, #40]	; (8018fcc <HAL_PCD_MspInit+0x88>)
 8018fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018faa:	60fb      	str	r3, [r7, #12]
 8018fac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8018fae:	2200      	movs	r2, #0
 8018fb0:	2100      	movs	r1, #0
 8018fb2:	204d      	movs	r0, #77	; 0x4d
 8018fb4:	f7eb ffe5 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8018fb8:	204d      	movs	r0, #77	; 0x4d
 8018fba:	f7eb fffc 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8018fbe:	bf00      	nop
 8018fc0:	37c8      	adds	r7, #200	; 0xc8
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	bd80      	pop	{r7, pc}
 8018fc6:	bf00      	nop
 8018fc8:	40040000 	.word	0x40040000
 8018fcc:	58024400 	.word	0x58024400

08018fd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b082      	sub	sp, #8
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018fe4:	4619      	mov	r1, r3
 8018fe6:	4610      	mov	r0, r2
 8018fe8:	f7fb fe09 	bl	8014bfe <USBD_LL_SetupStage>
}
 8018fec:	bf00      	nop
 8018fee:	3708      	adds	r7, #8
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
 8018ffc:	460b      	mov	r3, r1
 8018ffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019006:	78fa      	ldrb	r2, [r7, #3]
 8019008:	6879      	ldr	r1, [r7, #4]
 801900a:	4613      	mov	r3, r2
 801900c:	00db      	lsls	r3, r3, #3
 801900e:	4413      	add	r3, r2
 8019010:	009b      	lsls	r3, r3, #2
 8019012:	440b      	add	r3, r1
 8019014:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019018:	681a      	ldr	r2, [r3, #0]
 801901a:	78fb      	ldrb	r3, [r7, #3]
 801901c:	4619      	mov	r1, r3
 801901e:	f7fb fe43 	bl	8014ca8 <USBD_LL_DataOutStage>
}
 8019022:	bf00      	nop
 8019024:	3708      	adds	r7, #8
 8019026:	46bd      	mov	sp, r7
 8019028:	bd80      	pop	{r7, pc}

0801902a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801902a:	b580      	push	{r7, lr}
 801902c:	b082      	sub	sp, #8
 801902e:	af00      	add	r7, sp, #0
 8019030:	6078      	str	r0, [r7, #4]
 8019032:	460b      	mov	r3, r1
 8019034:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801903c:	78fa      	ldrb	r2, [r7, #3]
 801903e:	6879      	ldr	r1, [r7, #4]
 8019040:	4613      	mov	r3, r2
 8019042:	00db      	lsls	r3, r3, #3
 8019044:	4413      	add	r3, r2
 8019046:	009b      	lsls	r3, r3, #2
 8019048:	440b      	add	r3, r1
 801904a:	3348      	adds	r3, #72	; 0x48
 801904c:	681a      	ldr	r2, [r3, #0]
 801904e:	78fb      	ldrb	r3, [r7, #3]
 8019050:	4619      	mov	r1, r3
 8019052:	f7fb fedc 	bl	8014e0e <USBD_LL_DataInStage>
}
 8019056:	bf00      	nop
 8019058:	3708      	adds	r7, #8
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}

0801905e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801905e:	b580      	push	{r7, lr}
 8019060:	b082      	sub	sp, #8
 8019062:	af00      	add	r7, sp, #0
 8019064:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801906c:	4618      	mov	r0, r3
 801906e:	f7fc f816 	bl	801509e <USBD_LL_SOF>
}
 8019072:	bf00      	nop
 8019074:	3708      	adds	r7, #8
 8019076:	46bd      	mov	sp, r7
 8019078:	bd80      	pop	{r7, pc}

0801907a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801907a:	b580      	push	{r7, lr}
 801907c:	b084      	sub	sp, #16
 801907e:	af00      	add	r7, sp, #0
 8019080:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019082:	2301      	movs	r3, #1
 8019084:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	691b      	ldr	r3, [r3, #16]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d102      	bne.n	8019094 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801908e:	2300      	movs	r3, #0
 8019090:	73fb      	strb	r3, [r7, #15]
 8019092:	e008      	b.n	80190a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	691b      	ldr	r3, [r3, #16]
 8019098:	2b02      	cmp	r3, #2
 801909a:	d102      	bne.n	80190a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801909c:	2301      	movs	r3, #1
 801909e:	73fb      	strb	r3, [r7, #15]
 80190a0:	e001      	b.n	80190a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80190a2:	f7e9 f9a3 	bl	80023ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80190ac:	7bfa      	ldrb	r2, [r7, #15]
 80190ae:	4611      	mov	r1, r2
 80190b0:	4618      	mov	r0, r3
 80190b2:	f7fb ffb0 	bl	8015016 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80190bc:	4618      	mov	r0, r3
 80190be:	f7fb ff58 	bl	8014f72 <USBD_LL_Reset>
}
 80190c2:	bf00      	nop
 80190c4:	3710      	adds	r7, #16
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}
	...

080190cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b082      	sub	sp, #8
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80190da:	4618      	mov	r0, r3
 80190dc:	f7fb ffab 	bl	8015036 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	687a      	ldr	r2, [r7, #4]
 80190ec:	6812      	ldr	r2, [r2, #0]
 80190ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80190f2:	f043 0301 	orr.w	r3, r3, #1
 80190f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6a1b      	ldr	r3, [r3, #32]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d005      	beq.n	801910c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019100:	4b04      	ldr	r3, [pc, #16]	; (8019114 <HAL_PCD_SuspendCallback+0x48>)
 8019102:	691b      	ldr	r3, [r3, #16]
 8019104:	4a03      	ldr	r2, [pc, #12]	; (8019114 <HAL_PCD_SuspendCallback+0x48>)
 8019106:	f043 0306 	orr.w	r3, r3, #6
 801910a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801910c:	bf00      	nop
 801910e:	3708      	adds	r7, #8
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}
 8019114:	e000ed00 	.word	0xe000ed00

08019118 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019126:	4618      	mov	r0, r3
 8019128:	f7fb ffa1 	bl	801506e <USBD_LL_Resume>
}
 801912c:	bf00      	nop
 801912e:	3708      	adds	r7, #8
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}

08019134 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b082      	sub	sp, #8
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
 801913c:	460b      	mov	r3, r1
 801913e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019146:	78fa      	ldrb	r2, [r7, #3]
 8019148:	4611      	mov	r1, r2
 801914a:	4618      	mov	r0, r3
 801914c:	f7fb fff9 	bl	8015142 <USBD_LL_IsoOUTIncomplete>
}
 8019150:	bf00      	nop
 8019152:	3708      	adds	r7, #8
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}

08019158 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b082      	sub	sp, #8
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
 8019160:	460b      	mov	r3, r1
 8019162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801916a:	78fa      	ldrb	r2, [r7, #3]
 801916c:	4611      	mov	r1, r2
 801916e:	4618      	mov	r0, r3
 8019170:	f7fb ffb5 	bl	80150de <USBD_LL_IsoINIncomplete>
}
 8019174:	bf00      	nop
 8019176:	3708      	adds	r7, #8
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}

0801917c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b082      	sub	sp, #8
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801918a:	4618      	mov	r0, r3
 801918c:	f7fc f80b 	bl	80151a6 <USBD_LL_DevConnected>
}
 8019190:	bf00      	nop
 8019192:	3708      	adds	r7, #8
 8019194:	46bd      	mov	sp, r7
 8019196:	bd80      	pop	{r7, pc}

08019198 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b082      	sub	sp, #8
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80191a6:	4618      	mov	r0, r3
 80191a8:	f7fc f808 	bl	80151bc <USBD_LL_DevDisconnected>
}
 80191ac:	bf00      	nop
 80191ae:	3708      	adds	r7, #8
 80191b0:	46bd      	mov	sp, r7
 80191b2:	bd80      	pop	{r7, pc}

080191b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b082      	sub	sp, #8
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	2b01      	cmp	r3, #1
 80191c2:	d140      	bne.n	8019246 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80191c4:	4a22      	ldr	r2, [pc, #136]	; (8019250 <USBD_LL_Init+0x9c>)
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	4a20      	ldr	r2, [pc, #128]	; (8019250 <USBD_LL_Init+0x9c>)
 80191d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80191d4:	4b1e      	ldr	r3, [pc, #120]	; (8019250 <USBD_LL_Init+0x9c>)
 80191d6:	4a1f      	ldr	r2, [pc, #124]	; (8019254 <USBD_LL_Init+0xa0>)
 80191d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80191da:	4b1d      	ldr	r3, [pc, #116]	; (8019250 <USBD_LL_Init+0x9c>)
 80191dc:	2209      	movs	r2, #9
 80191de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80191e0:	4b1b      	ldr	r3, [pc, #108]	; (8019250 <USBD_LL_Init+0x9c>)
 80191e2:	2202      	movs	r2, #2
 80191e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80191e6:	4b1a      	ldr	r3, [pc, #104]	; (8019250 <USBD_LL_Init+0x9c>)
 80191e8:	2200      	movs	r2, #0
 80191ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80191ec:	4b18      	ldr	r3, [pc, #96]	; (8019250 <USBD_LL_Init+0x9c>)
 80191ee:	2202      	movs	r2, #2
 80191f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80191f2:	4b17      	ldr	r3, [pc, #92]	; (8019250 <USBD_LL_Init+0x9c>)
 80191f4:	2200      	movs	r2, #0
 80191f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80191f8:	4b15      	ldr	r3, [pc, #84]	; (8019250 <USBD_LL_Init+0x9c>)
 80191fa:	2200      	movs	r2, #0
 80191fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80191fe:	4b14      	ldr	r3, [pc, #80]	; (8019250 <USBD_LL_Init+0x9c>)
 8019200:	2200      	movs	r2, #0
 8019202:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8019204:	4b12      	ldr	r3, [pc, #72]	; (8019250 <USBD_LL_Init+0x9c>)
 8019206:	2200      	movs	r2, #0
 8019208:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801920a:	4b11      	ldr	r3, [pc, #68]	; (8019250 <USBD_LL_Init+0x9c>)
 801920c:	2200      	movs	r2, #0
 801920e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8019210:	4b0f      	ldr	r3, [pc, #60]	; (8019250 <USBD_LL_Init+0x9c>)
 8019212:	2200      	movs	r2, #0
 8019214:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8019216:	480e      	ldr	r0, [pc, #56]	; (8019250 <USBD_LL_Init+0x9c>)
 8019218:	f7ee fe23 	bl	8007e62 <HAL_PCD_Init>
 801921c:	4603      	mov	r3, r0
 801921e:	2b00      	cmp	r3, #0
 8019220:	d001      	beq.n	8019226 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8019222:	f7e9 f8e3 	bl	80023ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8019226:	f44f 7100 	mov.w	r1, #512	; 0x200
 801922a:	4809      	ldr	r0, [pc, #36]	; (8019250 <USBD_LL_Init+0x9c>)
 801922c:	f7f0 f891 	bl	8009352 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8019230:	2280      	movs	r2, #128	; 0x80
 8019232:	2100      	movs	r1, #0
 8019234:	4806      	ldr	r0, [pc, #24]	; (8019250 <USBD_LL_Init+0x9c>)
 8019236:	f7f0 f845 	bl	80092c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801923a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801923e:	2101      	movs	r1, #1
 8019240:	4803      	ldr	r0, [pc, #12]	; (8019250 <USBD_LL_Init+0x9c>)
 8019242:	f7f0 f83f 	bl	80092c4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8019246:	2300      	movs	r3, #0
}
 8019248:	4618      	mov	r0, r3
 801924a:	3708      	adds	r7, #8
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}
 8019250:	24002db8 	.word	0x24002db8
 8019254:	40040000 	.word	0x40040000

08019258 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b084      	sub	sp, #16
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019260:	2300      	movs	r3, #0
 8019262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019264:	2300      	movs	r3, #0
 8019266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801926e:	4618      	mov	r0, r3
 8019270:	f7ee ff1b 	bl	80080aa <HAL_PCD_Start>
 8019274:	4603      	mov	r3, r0
 8019276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019278:	7bfb      	ldrb	r3, [r7, #15]
 801927a:	4618      	mov	r0, r3
 801927c:	f000 f942 	bl	8019504 <USBD_Get_USB_Status>
 8019280:	4603      	mov	r3, r0
 8019282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019284:	7bbb      	ldrb	r3, [r7, #14]
}
 8019286:	4618      	mov	r0, r3
 8019288:	3710      	adds	r7, #16
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}

0801928e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801928e:	b580      	push	{r7, lr}
 8019290:	b084      	sub	sp, #16
 8019292:	af00      	add	r7, sp, #0
 8019294:	6078      	str	r0, [r7, #4]
 8019296:	4608      	mov	r0, r1
 8019298:	4611      	mov	r1, r2
 801929a:	461a      	mov	r2, r3
 801929c:	4603      	mov	r3, r0
 801929e:	70fb      	strb	r3, [r7, #3]
 80192a0:	460b      	mov	r3, r1
 80192a2:	70bb      	strb	r3, [r7, #2]
 80192a4:	4613      	mov	r3, r2
 80192a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192a8:	2300      	movs	r3, #0
 80192aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ac:	2300      	movs	r3, #0
 80192ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80192b6:	78bb      	ldrb	r3, [r7, #2]
 80192b8:	883a      	ldrh	r2, [r7, #0]
 80192ba:	78f9      	ldrb	r1, [r7, #3]
 80192bc:	f7ef fc1b 	bl	8008af6 <HAL_PCD_EP_Open>
 80192c0:	4603      	mov	r3, r0
 80192c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192c4:	7bfb      	ldrb	r3, [r7, #15]
 80192c6:	4618      	mov	r0, r3
 80192c8:	f000 f91c 	bl	8019504 <USBD_Get_USB_Status>
 80192cc:	4603      	mov	r3, r0
 80192ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80192d2:	4618      	mov	r0, r3
 80192d4:	3710      	adds	r7, #16
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}

080192da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192da:	b580      	push	{r7, lr}
 80192dc:	b084      	sub	sp, #16
 80192de:	af00      	add	r7, sp, #0
 80192e0:	6078      	str	r0, [r7, #4]
 80192e2:	460b      	mov	r3, r1
 80192e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192e6:	2300      	movs	r3, #0
 80192e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ea:	2300      	movs	r3, #0
 80192ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80192f4:	78fa      	ldrb	r2, [r7, #3]
 80192f6:	4611      	mov	r1, r2
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7ef fc64 	bl	8008bc6 <HAL_PCD_EP_Close>
 80192fe:	4603      	mov	r3, r0
 8019300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019302:	7bfb      	ldrb	r3, [r7, #15]
 8019304:	4618      	mov	r0, r3
 8019306:	f000 f8fd 	bl	8019504 <USBD_Get_USB_Status>
 801930a:	4603      	mov	r3, r0
 801930c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801930e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019310:	4618      	mov	r0, r3
 8019312:	3710      	adds	r7, #16
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}

08019318 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b084      	sub	sp, #16
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	460b      	mov	r3, r1
 8019322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019324:	2300      	movs	r3, #0
 8019326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019328:	2300      	movs	r3, #0
 801932a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019332:	78fa      	ldrb	r2, [r7, #3]
 8019334:	4611      	mov	r1, r2
 8019336:	4618      	mov	r0, r3
 8019338:	f7ef fd1e 	bl	8008d78 <HAL_PCD_EP_SetStall>
 801933c:	4603      	mov	r3, r0
 801933e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019340:	7bfb      	ldrb	r3, [r7, #15]
 8019342:	4618      	mov	r0, r3
 8019344:	f000 f8de 	bl	8019504 <USBD_Get_USB_Status>
 8019348:	4603      	mov	r3, r0
 801934a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801934c:	7bbb      	ldrb	r3, [r7, #14]
}
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}

08019356 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019356:	b580      	push	{r7, lr}
 8019358:	b084      	sub	sp, #16
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
 801935e:	460b      	mov	r3, r1
 8019360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019362:	2300      	movs	r3, #0
 8019364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019366:	2300      	movs	r3, #0
 8019368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019370:	78fa      	ldrb	r2, [r7, #3]
 8019372:	4611      	mov	r1, r2
 8019374:	4618      	mov	r0, r3
 8019376:	f7ef fd63 	bl	8008e40 <HAL_PCD_EP_ClrStall>
 801937a:	4603      	mov	r3, r0
 801937c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801937e:	7bfb      	ldrb	r3, [r7, #15]
 8019380:	4618      	mov	r0, r3
 8019382:	f000 f8bf 	bl	8019504 <USBD_Get_USB_Status>
 8019386:	4603      	mov	r3, r0
 8019388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801938a:	7bbb      	ldrb	r3, [r7, #14]
}
 801938c:	4618      	mov	r0, r3
 801938e:	3710      	adds	r7, #16
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}

08019394 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019394:	b480      	push	{r7}
 8019396:	b085      	sub	sp, #20
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	460b      	mov	r3, r1
 801939e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80193a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	da0b      	bge.n	80193c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80193b0:	78fb      	ldrb	r3, [r7, #3]
 80193b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80193b6:	68f9      	ldr	r1, [r7, #12]
 80193b8:	4613      	mov	r3, r2
 80193ba:	00db      	lsls	r3, r3, #3
 80193bc:	4413      	add	r3, r2
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	440b      	add	r3, r1
 80193c2:	333e      	adds	r3, #62	; 0x3e
 80193c4:	781b      	ldrb	r3, [r3, #0]
 80193c6:	e00b      	b.n	80193e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80193c8:	78fb      	ldrb	r3, [r7, #3]
 80193ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80193ce:	68f9      	ldr	r1, [r7, #12]
 80193d0:	4613      	mov	r3, r2
 80193d2:	00db      	lsls	r3, r3, #3
 80193d4:	4413      	add	r3, r2
 80193d6:	009b      	lsls	r3, r3, #2
 80193d8:	440b      	add	r3, r1
 80193da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80193de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3714      	adds	r7, #20
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr

080193ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b084      	sub	sp, #16
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
 80193f4:	460b      	mov	r3, r1
 80193f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193f8:	2300      	movs	r3, #0
 80193fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193fc:	2300      	movs	r3, #0
 80193fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019406:	78fa      	ldrb	r2, [r7, #3]
 8019408:	4611      	mov	r1, r2
 801940a:	4618      	mov	r0, r3
 801940c:	f7ef fb4e 	bl	8008aac <HAL_PCD_SetAddress>
 8019410:	4603      	mov	r3, r0
 8019412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019414:	7bfb      	ldrb	r3, [r7, #15]
 8019416:	4618      	mov	r0, r3
 8019418:	f000 f874 	bl	8019504 <USBD_Get_USB_Status>
 801941c:	4603      	mov	r3, r0
 801941e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019420:	7bbb      	ldrb	r3, [r7, #14]
}
 8019422:	4618      	mov	r0, r3
 8019424:	3710      	adds	r7, #16
 8019426:	46bd      	mov	sp, r7
 8019428:	bd80      	pop	{r7, pc}

0801942a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801942a:	b580      	push	{r7, lr}
 801942c:	b086      	sub	sp, #24
 801942e:	af00      	add	r7, sp, #0
 8019430:	60f8      	str	r0, [r7, #12]
 8019432:	607a      	str	r2, [r7, #4]
 8019434:	603b      	str	r3, [r7, #0]
 8019436:	460b      	mov	r3, r1
 8019438:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801943a:	2300      	movs	r3, #0
 801943c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801943e:	2300      	movs	r3, #0
 8019440:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019448:	7af9      	ldrb	r1, [r7, #11]
 801944a:	683b      	ldr	r3, [r7, #0]
 801944c:	687a      	ldr	r2, [r7, #4]
 801944e:	f7ef fc58 	bl	8008d02 <HAL_PCD_EP_Transmit>
 8019452:	4603      	mov	r3, r0
 8019454:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019456:	7dfb      	ldrb	r3, [r7, #23]
 8019458:	4618      	mov	r0, r3
 801945a:	f000 f853 	bl	8019504 <USBD_Get_USB_Status>
 801945e:	4603      	mov	r3, r0
 8019460:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019462:	7dbb      	ldrb	r3, [r7, #22]
}
 8019464:	4618      	mov	r0, r3
 8019466:	3718      	adds	r7, #24
 8019468:	46bd      	mov	sp, r7
 801946a:	bd80      	pop	{r7, pc}

0801946c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b086      	sub	sp, #24
 8019470:	af00      	add	r7, sp, #0
 8019472:	60f8      	str	r0, [r7, #12]
 8019474:	607a      	str	r2, [r7, #4]
 8019476:	603b      	str	r3, [r7, #0]
 8019478:	460b      	mov	r3, r1
 801947a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801947c:	2300      	movs	r3, #0
 801947e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019480:	2300      	movs	r3, #0
 8019482:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801948a:	7af9      	ldrb	r1, [r7, #11]
 801948c:	683b      	ldr	r3, [r7, #0]
 801948e:	687a      	ldr	r2, [r7, #4]
 8019490:	f7ef fbe3 	bl	8008c5a <HAL_PCD_EP_Receive>
 8019494:	4603      	mov	r3, r0
 8019496:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019498:	7dfb      	ldrb	r3, [r7, #23]
 801949a:	4618      	mov	r0, r3
 801949c:	f000 f832 	bl	8019504 <USBD_Get_USB_Status>
 80194a0:	4603      	mov	r3, r0
 80194a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80194a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3718      	adds	r7, #24
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}

080194ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194ae:	b580      	push	{r7, lr}
 80194b0:	b082      	sub	sp, #8
 80194b2:	af00      	add	r7, sp, #0
 80194b4:	6078      	str	r0, [r7, #4]
 80194b6:	460b      	mov	r3, r1
 80194b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80194c0:	78fa      	ldrb	r2, [r7, #3]
 80194c2:	4611      	mov	r1, r2
 80194c4:	4618      	mov	r0, r3
 80194c6:	f7ef fc04 	bl	8008cd2 <HAL_PCD_EP_GetRxCount>
 80194ca:	4603      	mov	r3, r0
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	3708      	adds	r7, #8
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}

080194d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80194d4:	b480      	push	{r7}
 80194d6:	b083      	sub	sp, #12
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80194dc:	4b03      	ldr	r3, [pc, #12]	; (80194ec <USBD_static_malloc+0x18>)
}
 80194de:	4618      	mov	r0, r3
 80194e0:	370c      	adds	r7, #12
 80194e2:	46bd      	mov	sp, r7
 80194e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e8:	4770      	bx	lr
 80194ea:	bf00      	nop
 80194ec:	240032c4 	.word	0x240032c4

080194f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80194f0:	b480      	push	{r7}
 80194f2:	b083      	sub	sp, #12
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80194f8:	bf00      	nop
 80194fa:	370c      	adds	r7, #12
 80194fc:	46bd      	mov	sp, r7
 80194fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019502:	4770      	bx	lr

08019504 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019504:	b480      	push	{r7}
 8019506:	b085      	sub	sp, #20
 8019508:	af00      	add	r7, sp, #0
 801950a:	4603      	mov	r3, r0
 801950c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801950e:	2300      	movs	r3, #0
 8019510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019512:	79fb      	ldrb	r3, [r7, #7]
 8019514:	2b03      	cmp	r3, #3
 8019516:	d817      	bhi.n	8019548 <USBD_Get_USB_Status+0x44>
 8019518:	a201      	add	r2, pc, #4	; (adr r2, 8019520 <USBD_Get_USB_Status+0x1c>)
 801951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801951e:	bf00      	nop
 8019520:	08019531 	.word	0x08019531
 8019524:	08019537 	.word	0x08019537
 8019528:	0801953d 	.word	0x0801953d
 801952c:	08019543 	.word	0x08019543
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019530:	2300      	movs	r3, #0
 8019532:	73fb      	strb	r3, [r7, #15]
    break;
 8019534:	e00b      	b.n	801954e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019536:	2303      	movs	r3, #3
 8019538:	73fb      	strb	r3, [r7, #15]
    break;
 801953a:	e008      	b.n	801954e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801953c:	2301      	movs	r3, #1
 801953e:	73fb      	strb	r3, [r7, #15]
    break;
 8019540:	e005      	b.n	801954e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019542:	2303      	movs	r3, #3
 8019544:	73fb      	strb	r3, [r7, #15]
    break;
 8019546:	e002      	b.n	801954e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019548:	2303      	movs	r3, #3
 801954a:	73fb      	strb	r3, [r7, #15]
    break;
 801954c:	bf00      	nop
  }
  return usb_status;
 801954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019550:	4618      	mov	r0, r3
 8019552:	3714      	adds	r7, #20
 8019554:	46bd      	mov	sp, r7
 8019556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955a:	4770      	bx	lr

0801955c <__cvt>:
 801955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801955e:	ed2d 8b02 	vpush	{d8}
 8019562:	eeb0 8b40 	vmov.f64	d8, d0
 8019566:	b085      	sub	sp, #20
 8019568:	4617      	mov	r7, r2
 801956a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801956c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801956e:	ee18 2a90 	vmov	r2, s17
 8019572:	f025 0520 	bic.w	r5, r5, #32
 8019576:	2a00      	cmp	r2, #0
 8019578:	bfb6      	itet	lt
 801957a:	222d      	movlt	r2, #45	; 0x2d
 801957c:	2200      	movge	r2, #0
 801957e:	eeb1 8b40 	vneglt.f64	d8, d0
 8019582:	2d46      	cmp	r5, #70	; 0x46
 8019584:	460c      	mov	r4, r1
 8019586:	701a      	strb	r2, [r3, #0]
 8019588:	d004      	beq.n	8019594 <__cvt+0x38>
 801958a:	2d45      	cmp	r5, #69	; 0x45
 801958c:	d100      	bne.n	8019590 <__cvt+0x34>
 801958e:	3401      	adds	r4, #1
 8019590:	2102      	movs	r1, #2
 8019592:	e000      	b.n	8019596 <__cvt+0x3a>
 8019594:	2103      	movs	r1, #3
 8019596:	ab03      	add	r3, sp, #12
 8019598:	9301      	str	r3, [sp, #4]
 801959a:	ab02      	add	r3, sp, #8
 801959c:	9300      	str	r3, [sp, #0]
 801959e:	4622      	mov	r2, r4
 80195a0:	4633      	mov	r3, r6
 80195a2:	eeb0 0b48 	vmov.f64	d0, d8
 80195a6:	f001 f85b 	bl	801a660 <_dtoa_r>
 80195aa:	2d47      	cmp	r5, #71	; 0x47
 80195ac:	d101      	bne.n	80195b2 <__cvt+0x56>
 80195ae:	07fb      	lsls	r3, r7, #31
 80195b0:	d51a      	bpl.n	80195e8 <__cvt+0x8c>
 80195b2:	2d46      	cmp	r5, #70	; 0x46
 80195b4:	eb00 0204 	add.w	r2, r0, r4
 80195b8:	d10c      	bne.n	80195d4 <__cvt+0x78>
 80195ba:	7803      	ldrb	r3, [r0, #0]
 80195bc:	2b30      	cmp	r3, #48	; 0x30
 80195be:	d107      	bne.n	80195d0 <__cvt+0x74>
 80195c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80195c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c8:	bf1c      	itt	ne
 80195ca:	f1c4 0401 	rsbne	r4, r4, #1
 80195ce:	6034      	strne	r4, [r6, #0]
 80195d0:	6833      	ldr	r3, [r6, #0]
 80195d2:	441a      	add	r2, r3
 80195d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80195d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195dc:	bf08      	it	eq
 80195de:	9203      	streq	r2, [sp, #12]
 80195e0:	2130      	movs	r1, #48	; 0x30
 80195e2:	9b03      	ldr	r3, [sp, #12]
 80195e4:	4293      	cmp	r3, r2
 80195e6:	d307      	bcc.n	80195f8 <__cvt+0x9c>
 80195e8:	9b03      	ldr	r3, [sp, #12]
 80195ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80195ec:	1a1b      	subs	r3, r3, r0
 80195ee:	6013      	str	r3, [r2, #0]
 80195f0:	b005      	add	sp, #20
 80195f2:	ecbd 8b02 	vpop	{d8}
 80195f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195f8:	1c5c      	adds	r4, r3, #1
 80195fa:	9403      	str	r4, [sp, #12]
 80195fc:	7019      	strb	r1, [r3, #0]
 80195fe:	e7f0      	b.n	80195e2 <__cvt+0x86>

08019600 <__exponent>:
 8019600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019602:	4603      	mov	r3, r0
 8019604:	2900      	cmp	r1, #0
 8019606:	bfb8      	it	lt
 8019608:	4249      	neglt	r1, r1
 801960a:	f803 2b02 	strb.w	r2, [r3], #2
 801960e:	bfb4      	ite	lt
 8019610:	222d      	movlt	r2, #45	; 0x2d
 8019612:	222b      	movge	r2, #43	; 0x2b
 8019614:	2909      	cmp	r1, #9
 8019616:	7042      	strb	r2, [r0, #1]
 8019618:	dd2a      	ble.n	8019670 <__exponent+0x70>
 801961a:	f10d 0207 	add.w	r2, sp, #7
 801961e:	4617      	mov	r7, r2
 8019620:	260a      	movs	r6, #10
 8019622:	4694      	mov	ip, r2
 8019624:	fb91 f5f6 	sdiv	r5, r1, r6
 8019628:	fb06 1415 	mls	r4, r6, r5, r1
 801962c:	3430      	adds	r4, #48	; 0x30
 801962e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8019632:	460c      	mov	r4, r1
 8019634:	2c63      	cmp	r4, #99	; 0x63
 8019636:	f102 32ff 	add.w	r2, r2, #4294967295
 801963a:	4629      	mov	r1, r5
 801963c:	dcf1      	bgt.n	8019622 <__exponent+0x22>
 801963e:	3130      	adds	r1, #48	; 0x30
 8019640:	f1ac 0402 	sub.w	r4, ip, #2
 8019644:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019648:	1c41      	adds	r1, r0, #1
 801964a:	4622      	mov	r2, r4
 801964c:	42ba      	cmp	r2, r7
 801964e:	d30a      	bcc.n	8019666 <__exponent+0x66>
 8019650:	f10d 0209 	add.w	r2, sp, #9
 8019654:	eba2 020c 	sub.w	r2, r2, ip
 8019658:	42bc      	cmp	r4, r7
 801965a:	bf88      	it	hi
 801965c:	2200      	movhi	r2, #0
 801965e:	4413      	add	r3, r2
 8019660:	1a18      	subs	r0, r3, r0
 8019662:	b003      	add	sp, #12
 8019664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019666:	f812 5b01 	ldrb.w	r5, [r2], #1
 801966a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801966e:	e7ed      	b.n	801964c <__exponent+0x4c>
 8019670:	2330      	movs	r3, #48	; 0x30
 8019672:	3130      	adds	r1, #48	; 0x30
 8019674:	7083      	strb	r3, [r0, #2]
 8019676:	70c1      	strb	r1, [r0, #3]
 8019678:	1d03      	adds	r3, r0, #4
 801967a:	e7f1      	b.n	8019660 <__exponent+0x60>
 801967c:	0000      	movs	r0, r0
	...

08019680 <_printf_float>:
 8019680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019684:	b08b      	sub	sp, #44	; 0x2c
 8019686:	460c      	mov	r4, r1
 8019688:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801968c:	4616      	mov	r6, r2
 801968e:	461f      	mov	r7, r3
 8019690:	4605      	mov	r5, r0
 8019692:	f000 fed1 	bl	801a438 <_localeconv_r>
 8019696:	f8d0 b000 	ldr.w	fp, [r0]
 801969a:	4658      	mov	r0, fp
 801969c:	f7e6 fe88 	bl	80003b0 <strlen>
 80196a0:	2300      	movs	r3, #0
 80196a2:	9308      	str	r3, [sp, #32]
 80196a4:	f8d8 3000 	ldr.w	r3, [r8]
 80196a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80196ac:	6822      	ldr	r2, [r4, #0]
 80196ae:	3307      	adds	r3, #7
 80196b0:	f023 0307 	bic.w	r3, r3, #7
 80196b4:	f103 0108 	add.w	r1, r3, #8
 80196b8:	f8c8 1000 	str.w	r1, [r8]
 80196bc:	ed93 0b00 	vldr	d0, [r3]
 80196c0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019920 <_printf_float+0x2a0>
 80196c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80196c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80196cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196d0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80196d4:	4682      	mov	sl, r0
 80196d6:	dd24      	ble.n	8019722 <_printf_float+0xa2>
 80196d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80196dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e0:	d502      	bpl.n	80196e8 <_printf_float+0x68>
 80196e2:	232d      	movs	r3, #45	; 0x2d
 80196e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80196e8:	498f      	ldr	r1, [pc, #572]	; (8019928 <_printf_float+0x2a8>)
 80196ea:	4b90      	ldr	r3, [pc, #576]	; (801992c <_printf_float+0x2ac>)
 80196ec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80196f0:	bf94      	ite	ls
 80196f2:	4688      	movls	r8, r1
 80196f4:	4698      	movhi	r8, r3
 80196f6:	2303      	movs	r3, #3
 80196f8:	6123      	str	r3, [r4, #16]
 80196fa:	f022 0204 	bic.w	r2, r2, #4
 80196fe:	2300      	movs	r3, #0
 8019700:	6022      	str	r2, [r4, #0]
 8019702:	9304      	str	r3, [sp, #16]
 8019704:	9700      	str	r7, [sp, #0]
 8019706:	4633      	mov	r3, r6
 8019708:	aa09      	add	r2, sp, #36	; 0x24
 801970a:	4621      	mov	r1, r4
 801970c:	4628      	mov	r0, r5
 801970e:	f000 f9d1 	bl	8019ab4 <_printf_common>
 8019712:	3001      	adds	r0, #1
 8019714:	f040 808a 	bne.w	801982c <_printf_float+0x1ac>
 8019718:	f04f 30ff 	mov.w	r0, #4294967295
 801971c:	b00b      	add	sp, #44	; 0x2c
 801971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019722:	eeb4 0b40 	vcmp.f64	d0, d0
 8019726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801972a:	d709      	bvc.n	8019740 <_printf_float+0xc0>
 801972c:	ee10 3a90 	vmov	r3, s1
 8019730:	2b00      	cmp	r3, #0
 8019732:	bfbc      	itt	lt
 8019734:	232d      	movlt	r3, #45	; 0x2d
 8019736:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801973a:	497d      	ldr	r1, [pc, #500]	; (8019930 <_printf_float+0x2b0>)
 801973c:	4b7d      	ldr	r3, [pc, #500]	; (8019934 <_printf_float+0x2b4>)
 801973e:	e7d5      	b.n	80196ec <_printf_float+0x6c>
 8019740:	6863      	ldr	r3, [r4, #4]
 8019742:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8019746:	9104      	str	r1, [sp, #16]
 8019748:	1c59      	adds	r1, r3, #1
 801974a:	d13c      	bne.n	80197c6 <_printf_float+0x146>
 801974c:	2306      	movs	r3, #6
 801974e:	6063      	str	r3, [r4, #4]
 8019750:	2300      	movs	r3, #0
 8019752:	9303      	str	r3, [sp, #12]
 8019754:	ab08      	add	r3, sp, #32
 8019756:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801975a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801975e:	ab07      	add	r3, sp, #28
 8019760:	6861      	ldr	r1, [r4, #4]
 8019762:	9300      	str	r3, [sp, #0]
 8019764:	6022      	str	r2, [r4, #0]
 8019766:	f10d 031b 	add.w	r3, sp, #27
 801976a:	4628      	mov	r0, r5
 801976c:	f7ff fef6 	bl	801955c <__cvt>
 8019770:	9b04      	ldr	r3, [sp, #16]
 8019772:	9907      	ldr	r1, [sp, #28]
 8019774:	2b47      	cmp	r3, #71	; 0x47
 8019776:	4680      	mov	r8, r0
 8019778:	d108      	bne.n	801978c <_printf_float+0x10c>
 801977a:	1cc8      	adds	r0, r1, #3
 801977c:	db02      	blt.n	8019784 <_printf_float+0x104>
 801977e:	6863      	ldr	r3, [r4, #4]
 8019780:	4299      	cmp	r1, r3
 8019782:	dd41      	ble.n	8019808 <_printf_float+0x188>
 8019784:	f1a9 0902 	sub.w	r9, r9, #2
 8019788:	fa5f f989 	uxtb.w	r9, r9
 801978c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019790:	d820      	bhi.n	80197d4 <_printf_float+0x154>
 8019792:	3901      	subs	r1, #1
 8019794:	464a      	mov	r2, r9
 8019796:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801979a:	9107      	str	r1, [sp, #28]
 801979c:	f7ff ff30 	bl	8019600 <__exponent>
 80197a0:	9a08      	ldr	r2, [sp, #32]
 80197a2:	9004      	str	r0, [sp, #16]
 80197a4:	1813      	adds	r3, r2, r0
 80197a6:	2a01      	cmp	r2, #1
 80197a8:	6123      	str	r3, [r4, #16]
 80197aa:	dc02      	bgt.n	80197b2 <_printf_float+0x132>
 80197ac:	6822      	ldr	r2, [r4, #0]
 80197ae:	07d2      	lsls	r2, r2, #31
 80197b0:	d501      	bpl.n	80197b6 <_printf_float+0x136>
 80197b2:	3301      	adds	r3, #1
 80197b4:	6123      	str	r3, [r4, #16]
 80197b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d0a2      	beq.n	8019704 <_printf_float+0x84>
 80197be:	232d      	movs	r3, #45	; 0x2d
 80197c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80197c4:	e79e      	b.n	8019704 <_printf_float+0x84>
 80197c6:	9904      	ldr	r1, [sp, #16]
 80197c8:	2947      	cmp	r1, #71	; 0x47
 80197ca:	d1c1      	bne.n	8019750 <_printf_float+0xd0>
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d1bf      	bne.n	8019750 <_printf_float+0xd0>
 80197d0:	2301      	movs	r3, #1
 80197d2:	e7bc      	b.n	801974e <_printf_float+0xce>
 80197d4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80197d8:	d118      	bne.n	801980c <_printf_float+0x18c>
 80197da:	2900      	cmp	r1, #0
 80197dc:	6863      	ldr	r3, [r4, #4]
 80197de:	dd0b      	ble.n	80197f8 <_printf_float+0x178>
 80197e0:	6121      	str	r1, [r4, #16]
 80197e2:	b913      	cbnz	r3, 80197ea <_printf_float+0x16a>
 80197e4:	6822      	ldr	r2, [r4, #0]
 80197e6:	07d0      	lsls	r0, r2, #31
 80197e8:	d502      	bpl.n	80197f0 <_printf_float+0x170>
 80197ea:	3301      	adds	r3, #1
 80197ec:	440b      	add	r3, r1
 80197ee:	6123      	str	r3, [r4, #16]
 80197f0:	2300      	movs	r3, #0
 80197f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80197f4:	9304      	str	r3, [sp, #16]
 80197f6:	e7de      	b.n	80197b6 <_printf_float+0x136>
 80197f8:	b913      	cbnz	r3, 8019800 <_printf_float+0x180>
 80197fa:	6822      	ldr	r2, [r4, #0]
 80197fc:	07d2      	lsls	r2, r2, #31
 80197fe:	d501      	bpl.n	8019804 <_printf_float+0x184>
 8019800:	3302      	adds	r3, #2
 8019802:	e7f4      	b.n	80197ee <_printf_float+0x16e>
 8019804:	2301      	movs	r3, #1
 8019806:	e7f2      	b.n	80197ee <_printf_float+0x16e>
 8019808:	f04f 0967 	mov.w	r9, #103	; 0x67
 801980c:	9b08      	ldr	r3, [sp, #32]
 801980e:	4299      	cmp	r1, r3
 8019810:	db05      	blt.n	801981e <_printf_float+0x19e>
 8019812:	6823      	ldr	r3, [r4, #0]
 8019814:	6121      	str	r1, [r4, #16]
 8019816:	07d8      	lsls	r0, r3, #31
 8019818:	d5ea      	bpl.n	80197f0 <_printf_float+0x170>
 801981a:	1c4b      	adds	r3, r1, #1
 801981c:	e7e7      	b.n	80197ee <_printf_float+0x16e>
 801981e:	2900      	cmp	r1, #0
 8019820:	bfd4      	ite	le
 8019822:	f1c1 0202 	rsble	r2, r1, #2
 8019826:	2201      	movgt	r2, #1
 8019828:	4413      	add	r3, r2
 801982a:	e7e0      	b.n	80197ee <_printf_float+0x16e>
 801982c:	6823      	ldr	r3, [r4, #0]
 801982e:	055a      	lsls	r2, r3, #21
 8019830:	d407      	bmi.n	8019842 <_printf_float+0x1c2>
 8019832:	6923      	ldr	r3, [r4, #16]
 8019834:	4642      	mov	r2, r8
 8019836:	4631      	mov	r1, r6
 8019838:	4628      	mov	r0, r5
 801983a:	47b8      	blx	r7
 801983c:	3001      	adds	r0, #1
 801983e:	d12a      	bne.n	8019896 <_printf_float+0x216>
 8019840:	e76a      	b.n	8019718 <_printf_float+0x98>
 8019842:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019846:	f240 80e0 	bls.w	8019a0a <_printf_float+0x38a>
 801984a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801984e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019856:	d133      	bne.n	80198c0 <_printf_float+0x240>
 8019858:	4a37      	ldr	r2, [pc, #220]	; (8019938 <_printf_float+0x2b8>)
 801985a:	2301      	movs	r3, #1
 801985c:	4631      	mov	r1, r6
 801985e:	4628      	mov	r0, r5
 8019860:	47b8      	blx	r7
 8019862:	3001      	adds	r0, #1
 8019864:	f43f af58 	beq.w	8019718 <_printf_float+0x98>
 8019868:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801986c:	429a      	cmp	r2, r3
 801986e:	db02      	blt.n	8019876 <_printf_float+0x1f6>
 8019870:	6823      	ldr	r3, [r4, #0]
 8019872:	07d8      	lsls	r0, r3, #31
 8019874:	d50f      	bpl.n	8019896 <_printf_float+0x216>
 8019876:	4653      	mov	r3, sl
 8019878:	465a      	mov	r2, fp
 801987a:	4631      	mov	r1, r6
 801987c:	4628      	mov	r0, r5
 801987e:	47b8      	blx	r7
 8019880:	3001      	adds	r0, #1
 8019882:	f43f af49 	beq.w	8019718 <_printf_float+0x98>
 8019886:	f04f 0800 	mov.w	r8, #0
 801988a:	f104 091a 	add.w	r9, r4, #26
 801988e:	9b08      	ldr	r3, [sp, #32]
 8019890:	3b01      	subs	r3, #1
 8019892:	4543      	cmp	r3, r8
 8019894:	dc09      	bgt.n	80198aa <_printf_float+0x22a>
 8019896:	6823      	ldr	r3, [r4, #0]
 8019898:	079b      	lsls	r3, r3, #30
 801989a:	f100 8106 	bmi.w	8019aaa <_printf_float+0x42a>
 801989e:	68e0      	ldr	r0, [r4, #12]
 80198a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198a2:	4298      	cmp	r0, r3
 80198a4:	bfb8      	it	lt
 80198a6:	4618      	movlt	r0, r3
 80198a8:	e738      	b.n	801971c <_printf_float+0x9c>
 80198aa:	2301      	movs	r3, #1
 80198ac:	464a      	mov	r2, r9
 80198ae:	4631      	mov	r1, r6
 80198b0:	4628      	mov	r0, r5
 80198b2:	47b8      	blx	r7
 80198b4:	3001      	adds	r0, #1
 80198b6:	f43f af2f 	beq.w	8019718 <_printf_float+0x98>
 80198ba:	f108 0801 	add.w	r8, r8, #1
 80198be:	e7e6      	b.n	801988e <_printf_float+0x20e>
 80198c0:	9b07      	ldr	r3, [sp, #28]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	dc3a      	bgt.n	801993c <_printf_float+0x2bc>
 80198c6:	4a1c      	ldr	r2, [pc, #112]	; (8019938 <_printf_float+0x2b8>)
 80198c8:	2301      	movs	r3, #1
 80198ca:	4631      	mov	r1, r6
 80198cc:	4628      	mov	r0, r5
 80198ce:	47b8      	blx	r7
 80198d0:	3001      	adds	r0, #1
 80198d2:	f43f af21 	beq.w	8019718 <_printf_float+0x98>
 80198d6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80198da:	4313      	orrs	r3, r2
 80198dc:	d102      	bne.n	80198e4 <_printf_float+0x264>
 80198de:	6823      	ldr	r3, [r4, #0]
 80198e0:	07d9      	lsls	r1, r3, #31
 80198e2:	d5d8      	bpl.n	8019896 <_printf_float+0x216>
 80198e4:	4653      	mov	r3, sl
 80198e6:	465a      	mov	r2, fp
 80198e8:	4631      	mov	r1, r6
 80198ea:	4628      	mov	r0, r5
 80198ec:	47b8      	blx	r7
 80198ee:	3001      	adds	r0, #1
 80198f0:	f43f af12 	beq.w	8019718 <_printf_float+0x98>
 80198f4:	f04f 0900 	mov.w	r9, #0
 80198f8:	f104 0a1a 	add.w	sl, r4, #26
 80198fc:	9b07      	ldr	r3, [sp, #28]
 80198fe:	425b      	negs	r3, r3
 8019900:	454b      	cmp	r3, r9
 8019902:	dc01      	bgt.n	8019908 <_printf_float+0x288>
 8019904:	9b08      	ldr	r3, [sp, #32]
 8019906:	e795      	b.n	8019834 <_printf_float+0x1b4>
 8019908:	2301      	movs	r3, #1
 801990a:	4652      	mov	r2, sl
 801990c:	4631      	mov	r1, r6
 801990e:	4628      	mov	r0, r5
 8019910:	47b8      	blx	r7
 8019912:	3001      	adds	r0, #1
 8019914:	f43f af00 	beq.w	8019718 <_printf_float+0x98>
 8019918:	f109 0901 	add.w	r9, r9, #1
 801991c:	e7ee      	b.n	80198fc <_printf_float+0x27c>
 801991e:	bf00      	nop
 8019920:	ffffffff 	.word	0xffffffff
 8019924:	7fefffff 	.word	0x7fefffff
 8019928:	0801e138 	.word	0x0801e138
 801992c:	0801e13c 	.word	0x0801e13c
 8019930:	0801e140 	.word	0x0801e140
 8019934:	0801e144 	.word	0x0801e144
 8019938:	0801e148 	.word	0x0801e148
 801993c:	9a08      	ldr	r2, [sp, #32]
 801993e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019940:	429a      	cmp	r2, r3
 8019942:	bfa8      	it	ge
 8019944:	461a      	movge	r2, r3
 8019946:	2a00      	cmp	r2, #0
 8019948:	4691      	mov	r9, r2
 801994a:	dc38      	bgt.n	80199be <_printf_float+0x33e>
 801994c:	2300      	movs	r3, #0
 801994e:	9305      	str	r3, [sp, #20]
 8019950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019954:	f104 021a 	add.w	r2, r4, #26
 8019958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801995a:	9905      	ldr	r1, [sp, #20]
 801995c:	9304      	str	r3, [sp, #16]
 801995e:	eba3 0309 	sub.w	r3, r3, r9
 8019962:	428b      	cmp	r3, r1
 8019964:	dc33      	bgt.n	80199ce <_printf_float+0x34e>
 8019966:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801996a:	429a      	cmp	r2, r3
 801996c:	db3c      	blt.n	80199e8 <_printf_float+0x368>
 801996e:	6823      	ldr	r3, [r4, #0]
 8019970:	07da      	lsls	r2, r3, #31
 8019972:	d439      	bmi.n	80199e8 <_printf_float+0x368>
 8019974:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019978:	eba2 0903 	sub.w	r9, r2, r3
 801997c:	9b04      	ldr	r3, [sp, #16]
 801997e:	1ad2      	subs	r2, r2, r3
 8019980:	4591      	cmp	r9, r2
 8019982:	bfa8      	it	ge
 8019984:	4691      	movge	r9, r2
 8019986:	f1b9 0f00 	cmp.w	r9, #0
 801998a:	dc35      	bgt.n	80199f8 <_printf_float+0x378>
 801998c:	f04f 0800 	mov.w	r8, #0
 8019990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019994:	f104 0a1a 	add.w	sl, r4, #26
 8019998:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801999c:	1a9b      	subs	r3, r3, r2
 801999e:	eba3 0309 	sub.w	r3, r3, r9
 80199a2:	4543      	cmp	r3, r8
 80199a4:	f77f af77 	ble.w	8019896 <_printf_float+0x216>
 80199a8:	2301      	movs	r3, #1
 80199aa:	4652      	mov	r2, sl
 80199ac:	4631      	mov	r1, r6
 80199ae:	4628      	mov	r0, r5
 80199b0:	47b8      	blx	r7
 80199b2:	3001      	adds	r0, #1
 80199b4:	f43f aeb0 	beq.w	8019718 <_printf_float+0x98>
 80199b8:	f108 0801 	add.w	r8, r8, #1
 80199bc:	e7ec      	b.n	8019998 <_printf_float+0x318>
 80199be:	4613      	mov	r3, r2
 80199c0:	4631      	mov	r1, r6
 80199c2:	4642      	mov	r2, r8
 80199c4:	4628      	mov	r0, r5
 80199c6:	47b8      	blx	r7
 80199c8:	3001      	adds	r0, #1
 80199ca:	d1bf      	bne.n	801994c <_printf_float+0x2cc>
 80199cc:	e6a4      	b.n	8019718 <_printf_float+0x98>
 80199ce:	2301      	movs	r3, #1
 80199d0:	4631      	mov	r1, r6
 80199d2:	4628      	mov	r0, r5
 80199d4:	9204      	str	r2, [sp, #16]
 80199d6:	47b8      	blx	r7
 80199d8:	3001      	adds	r0, #1
 80199da:	f43f ae9d 	beq.w	8019718 <_printf_float+0x98>
 80199de:	9b05      	ldr	r3, [sp, #20]
 80199e0:	9a04      	ldr	r2, [sp, #16]
 80199e2:	3301      	adds	r3, #1
 80199e4:	9305      	str	r3, [sp, #20]
 80199e6:	e7b7      	b.n	8019958 <_printf_float+0x2d8>
 80199e8:	4653      	mov	r3, sl
 80199ea:	465a      	mov	r2, fp
 80199ec:	4631      	mov	r1, r6
 80199ee:	4628      	mov	r0, r5
 80199f0:	47b8      	blx	r7
 80199f2:	3001      	adds	r0, #1
 80199f4:	d1be      	bne.n	8019974 <_printf_float+0x2f4>
 80199f6:	e68f      	b.n	8019718 <_printf_float+0x98>
 80199f8:	9a04      	ldr	r2, [sp, #16]
 80199fa:	464b      	mov	r3, r9
 80199fc:	4442      	add	r2, r8
 80199fe:	4631      	mov	r1, r6
 8019a00:	4628      	mov	r0, r5
 8019a02:	47b8      	blx	r7
 8019a04:	3001      	adds	r0, #1
 8019a06:	d1c1      	bne.n	801998c <_printf_float+0x30c>
 8019a08:	e686      	b.n	8019718 <_printf_float+0x98>
 8019a0a:	9a08      	ldr	r2, [sp, #32]
 8019a0c:	2a01      	cmp	r2, #1
 8019a0e:	dc01      	bgt.n	8019a14 <_printf_float+0x394>
 8019a10:	07db      	lsls	r3, r3, #31
 8019a12:	d537      	bpl.n	8019a84 <_printf_float+0x404>
 8019a14:	2301      	movs	r3, #1
 8019a16:	4642      	mov	r2, r8
 8019a18:	4631      	mov	r1, r6
 8019a1a:	4628      	mov	r0, r5
 8019a1c:	47b8      	blx	r7
 8019a1e:	3001      	adds	r0, #1
 8019a20:	f43f ae7a 	beq.w	8019718 <_printf_float+0x98>
 8019a24:	4653      	mov	r3, sl
 8019a26:	465a      	mov	r2, fp
 8019a28:	4631      	mov	r1, r6
 8019a2a:	4628      	mov	r0, r5
 8019a2c:	47b8      	blx	r7
 8019a2e:	3001      	adds	r0, #1
 8019a30:	f43f ae72 	beq.w	8019718 <_printf_float+0x98>
 8019a34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019a38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a40:	9b08      	ldr	r3, [sp, #32]
 8019a42:	d01a      	beq.n	8019a7a <_printf_float+0x3fa>
 8019a44:	3b01      	subs	r3, #1
 8019a46:	f108 0201 	add.w	r2, r8, #1
 8019a4a:	4631      	mov	r1, r6
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	47b8      	blx	r7
 8019a50:	3001      	adds	r0, #1
 8019a52:	d10e      	bne.n	8019a72 <_printf_float+0x3f2>
 8019a54:	e660      	b.n	8019718 <_printf_float+0x98>
 8019a56:	2301      	movs	r3, #1
 8019a58:	464a      	mov	r2, r9
 8019a5a:	4631      	mov	r1, r6
 8019a5c:	4628      	mov	r0, r5
 8019a5e:	47b8      	blx	r7
 8019a60:	3001      	adds	r0, #1
 8019a62:	f43f ae59 	beq.w	8019718 <_printf_float+0x98>
 8019a66:	f108 0801 	add.w	r8, r8, #1
 8019a6a:	9b08      	ldr	r3, [sp, #32]
 8019a6c:	3b01      	subs	r3, #1
 8019a6e:	4543      	cmp	r3, r8
 8019a70:	dcf1      	bgt.n	8019a56 <_printf_float+0x3d6>
 8019a72:	9b04      	ldr	r3, [sp, #16]
 8019a74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019a78:	e6dd      	b.n	8019836 <_printf_float+0x1b6>
 8019a7a:	f04f 0800 	mov.w	r8, #0
 8019a7e:	f104 091a 	add.w	r9, r4, #26
 8019a82:	e7f2      	b.n	8019a6a <_printf_float+0x3ea>
 8019a84:	2301      	movs	r3, #1
 8019a86:	4642      	mov	r2, r8
 8019a88:	e7df      	b.n	8019a4a <_printf_float+0x3ca>
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	464a      	mov	r2, r9
 8019a8e:	4631      	mov	r1, r6
 8019a90:	4628      	mov	r0, r5
 8019a92:	47b8      	blx	r7
 8019a94:	3001      	adds	r0, #1
 8019a96:	f43f ae3f 	beq.w	8019718 <_printf_float+0x98>
 8019a9a:	f108 0801 	add.w	r8, r8, #1
 8019a9e:	68e3      	ldr	r3, [r4, #12]
 8019aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019aa2:	1a5b      	subs	r3, r3, r1
 8019aa4:	4543      	cmp	r3, r8
 8019aa6:	dcf0      	bgt.n	8019a8a <_printf_float+0x40a>
 8019aa8:	e6f9      	b.n	801989e <_printf_float+0x21e>
 8019aaa:	f04f 0800 	mov.w	r8, #0
 8019aae:	f104 0919 	add.w	r9, r4, #25
 8019ab2:	e7f4      	b.n	8019a9e <_printf_float+0x41e>

08019ab4 <_printf_common>:
 8019ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ab8:	4616      	mov	r6, r2
 8019aba:	4699      	mov	r9, r3
 8019abc:	688a      	ldr	r2, [r1, #8]
 8019abe:	690b      	ldr	r3, [r1, #16]
 8019ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ac4:	4293      	cmp	r3, r2
 8019ac6:	bfb8      	it	lt
 8019ac8:	4613      	movlt	r3, r2
 8019aca:	6033      	str	r3, [r6, #0]
 8019acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019ad0:	4607      	mov	r7, r0
 8019ad2:	460c      	mov	r4, r1
 8019ad4:	b10a      	cbz	r2, 8019ada <_printf_common+0x26>
 8019ad6:	3301      	adds	r3, #1
 8019ad8:	6033      	str	r3, [r6, #0]
 8019ada:	6823      	ldr	r3, [r4, #0]
 8019adc:	0699      	lsls	r1, r3, #26
 8019ade:	bf42      	ittt	mi
 8019ae0:	6833      	ldrmi	r3, [r6, #0]
 8019ae2:	3302      	addmi	r3, #2
 8019ae4:	6033      	strmi	r3, [r6, #0]
 8019ae6:	6825      	ldr	r5, [r4, #0]
 8019ae8:	f015 0506 	ands.w	r5, r5, #6
 8019aec:	d106      	bne.n	8019afc <_printf_common+0x48>
 8019aee:	f104 0a19 	add.w	sl, r4, #25
 8019af2:	68e3      	ldr	r3, [r4, #12]
 8019af4:	6832      	ldr	r2, [r6, #0]
 8019af6:	1a9b      	subs	r3, r3, r2
 8019af8:	42ab      	cmp	r3, r5
 8019afa:	dc26      	bgt.n	8019b4a <_printf_common+0x96>
 8019afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019b00:	1e13      	subs	r3, r2, #0
 8019b02:	6822      	ldr	r2, [r4, #0]
 8019b04:	bf18      	it	ne
 8019b06:	2301      	movne	r3, #1
 8019b08:	0692      	lsls	r2, r2, #26
 8019b0a:	d42b      	bmi.n	8019b64 <_printf_common+0xb0>
 8019b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019b10:	4649      	mov	r1, r9
 8019b12:	4638      	mov	r0, r7
 8019b14:	47c0      	blx	r8
 8019b16:	3001      	adds	r0, #1
 8019b18:	d01e      	beq.n	8019b58 <_printf_common+0xa4>
 8019b1a:	6823      	ldr	r3, [r4, #0]
 8019b1c:	6922      	ldr	r2, [r4, #16]
 8019b1e:	f003 0306 	and.w	r3, r3, #6
 8019b22:	2b04      	cmp	r3, #4
 8019b24:	bf02      	ittt	eq
 8019b26:	68e5      	ldreq	r5, [r4, #12]
 8019b28:	6833      	ldreq	r3, [r6, #0]
 8019b2a:	1aed      	subeq	r5, r5, r3
 8019b2c:	68a3      	ldr	r3, [r4, #8]
 8019b2e:	bf0c      	ite	eq
 8019b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019b34:	2500      	movne	r5, #0
 8019b36:	4293      	cmp	r3, r2
 8019b38:	bfc4      	itt	gt
 8019b3a:	1a9b      	subgt	r3, r3, r2
 8019b3c:	18ed      	addgt	r5, r5, r3
 8019b3e:	2600      	movs	r6, #0
 8019b40:	341a      	adds	r4, #26
 8019b42:	42b5      	cmp	r5, r6
 8019b44:	d11a      	bne.n	8019b7c <_printf_common+0xc8>
 8019b46:	2000      	movs	r0, #0
 8019b48:	e008      	b.n	8019b5c <_printf_common+0xa8>
 8019b4a:	2301      	movs	r3, #1
 8019b4c:	4652      	mov	r2, sl
 8019b4e:	4649      	mov	r1, r9
 8019b50:	4638      	mov	r0, r7
 8019b52:	47c0      	blx	r8
 8019b54:	3001      	adds	r0, #1
 8019b56:	d103      	bne.n	8019b60 <_printf_common+0xac>
 8019b58:	f04f 30ff 	mov.w	r0, #4294967295
 8019b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b60:	3501      	adds	r5, #1
 8019b62:	e7c6      	b.n	8019af2 <_printf_common+0x3e>
 8019b64:	18e1      	adds	r1, r4, r3
 8019b66:	1c5a      	adds	r2, r3, #1
 8019b68:	2030      	movs	r0, #48	; 0x30
 8019b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019b6e:	4422      	add	r2, r4
 8019b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019b78:	3302      	adds	r3, #2
 8019b7a:	e7c7      	b.n	8019b0c <_printf_common+0x58>
 8019b7c:	2301      	movs	r3, #1
 8019b7e:	4622      	mov	r2, r4
 8019b80:	4649      	mov	r1, r9
 8019b82:	4638      	mov	r0, r7
 8019b84:	47c0      	blx	r8
 8019b86:	3001      	adds	r0, #1
 8019b88:	d0e6      	beq.n	8019b58 <_printf_common+0xa4>
 8019b8a:	3601      	adds	r6, #1
 8019b8c:	e7d9      	b.n	8019b42 <_printf_common+0x8e>
	...

08019b90 <_printf_i>:
 8019b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b94:	7e0f      	ldrb	r7, [r1, #24]
 8019b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019b98:	2f78      	cmp	r7, #120	; 0x78
 8019b9a:	4691      	mov	r9, r2
 8019b9c:	4680      	mov	r8, r0
 8019b9e:	460c      	mov	r4, r1
 8019ba0:	469a      	mov	sl, r3
 8019ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019ba6:	d807      	bhi.n	8019bb8 <_printf_i+0x28>
 8019ba8:	2f62      	cmp	r7, #98	; 0x62
 8019baa:	d80a      	bhi.n	8019bc2 <_printf_i+0x32>
 8019bac:	2f00      	cmp	r7, #0
 8019bae:	f000 80d4 	beq.w	8019d5a <_printf_i+0x1ca>
 8019bb2:	2f58      	cmp	r7, #88	; 0x58
 8019bb4:	f000 80c0 	beq.w	8019d38 <_printf_i+0x1a8>
 8019bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019bc0:	e03a      	b.n	8019c38 <_printf_i+0xa8>
 8019bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019bc6:	2b15      	cmp	r3, #21
 8019bc8:	d8f6      	bhi.n	8019bb8 <_printf_i+0x28>
 8019bca:	a101      	add	r1, pc, #4	; (adr r1, 8019bd0 <_printf_i+0x40>)
 8019bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019bd0:	08019c29 	.word	0x08019c29
 8019bd4:	08019c3d 	.word	0x08019c3d
 8019bd8:	08019bb9 	.word	0x08019bb9
 8019bdc:	08019bb9 	.word	0x08019bb9
 8019be0:	08019bb9 	.word	0x08019bb9
 8019be4:	08019bb9 	.word	0x08019bb9
 8019be8:	08019c3d 	.word	0x08019c3d
 8019bec:	08019bb9 	.word	0x08019bb9
 8019bf0:	08019bb9 	.word	0x08019bb9
 8019bf4:	08019bb9 	.word	0x08019bb9
 8019bf8:	08019bb9 	.word	0x08019bb9
 8019bfc:	08019d41 	.word	0x08019d41
 8019c00:	08019c69 	.word	0x08019c69
 8019c04:	08019cfb 	.word	0x08019cfb
 8019c08:	08019bb9 	.word	0x08019bb9
 8019c0c:	08019bb9 	.word	0x08019bb9
 8019c10:	08019d63 	.word	0x08019d63
 8019c14:	08019bb9 	.word	0x08019bb9
 8019c18:	08019c69 	.word	0x08019c69
 8019c1c:	08019bb9 	.word	0x08019bb9
 8019c20:	08019bb9 	.word	0x08019bb9
 8019c24:	08019d03 	.word	0x08019d03
 8019c28:	682b      	ldr	r3, [r5, #0]
 8019c2a:	1d1a      	adds	r2, r3, #4
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	602a      	str	r2, [r5, #0]
 8019c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019c38:	2301      	movs	r3, #1
 8019c3a:	e09f      	b.n	8019d7c <_printf_i+0x1ec>
 8019c3c:	6820      	ldr	r0, [r4, #0]
 8019c3e:	682b      	ldr	r3, [r5, #0]
 8019c40:	0607      	lsls	r7, r0, #24
 8019c42:	f103 0104 	add.w	r1, r3, #4
 8019c46:	6029      	str	r1, [r5, #0]
 8019c48:	d501      	bpl.n	8019c4e <_printf_i+0xbe>
 8019c4a:	681e      	ldr	r6, [r3, #0]
 8019c4c:	e003      	b.n	8019c56 <_printf_i+0xc6>
 8019c4e:	0646      	lsls	r6, r0, #25
 8019c50:	d5fb      	bpl.n	8019c4a <_printf_i+0xba>
 8019c52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019c56:	2e00      	cmp	r6, #0
 8019c58:	da03      	bge.n	8019c62 <_printf_i+0xd2>
 8019c5a:	232d      	movs	r3, #45	; 0x2d
 8019c5c:	4276      	negs	r6, r6
 8019c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c62:	485a      	ldr	r0, [pc, #360]	; (8019dcc <_printf_i+0x23c>)
 8019c64:	230a      	movs	r3, #10
 8019c66:	e012      	b.n	8019c8e <_printf_i+0xfe>
 8019c68:	682b      	ldr	r3, [r5, #0]
 8019c6a:	6820      	ldr	r0, [r4, #0]
 8019c6c:	1d19      	adds	r1, r3, #4
 8019c6e:	6029      	str	r1, [r5, #0]
 8019c70:	0605      	lsls	r5, r0, #24
 8019c72:	d501      	bpl.n	8019c78 <_printf_i+0xe8>
 8019c74:	681e      	ldr	r6, [r3, #0]
 8019c76:	e002      	b.n	8019c7e <_printf_i+0xee>
 8019c78:	0641      	lsls	r1, r0, #25
 8019c7a:	d5fb      	bpl.n	8019c74 <_printf_i+0xe4>
 8019c7c:	881e      	ldrh	r6, [r3, #0]
 8019c7e:	4853      	ldr	r0, [pc, #332]	; (8019dcc <_printf_i+0x23c>)
 8019c80:	2f6f      	cmp	r7, #111	; 0x6f
 8019c82:	bf0c      	ite	eq
 8019c84:	2308      	moveq	r3, #8
 8019c86:	230a      	movne	r3, #10
 8019c88:	2100      	movs	r1, #0
 8019c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019c8e:	6865      	ldr	r5, [r4, #4]
 8019c90:	60a5      	str	r5, [r4, #8]
 8019c92:	2d00      	cmp	r5, #0
 8019c94:	bfa2      	ittt	ge
 8019c96:	6821      	ldrge	r1, [r4, #0]
 8019c98:	f021 0104 	bicge.w	r1, r1, #4
 8019c9c:	6021      	strge	r1, [r4, #0]
 8019c9e:	b90e      	cbnz	r6, 8019ca4 <_printf_i+0x114>
 8019ca0:	2d00      	cmp	r5, #0
 8019ca2:	d04b      	beq.n	8019d3c <_printf_i+0x1ac>
 8019ca4:	4615      	mov	r5, r2
 8019ca6:	fbb6 f1f3 	udiv	r1, r6, r3
 8019caa:	fb03 6711 	mls	r7, r3, r1, r6
 8019cae:	5dc7      	ldrb	r7, [r0, r7]
 8019cb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019cb4:	4637      	mov	r7, r6
 8019cb6:	42bb      	cmp	r3, r7
 8019cb8:	460e      	mov	r6, r1
 8019cba:	d9f4      	bls.n	8019ca6 <_printf_i+0x116>
 8019cbc:	2b08      	cmp	r3, #8
 8019cbe:	d10b      	bne.n	8019cd8 <_printf_i+0x148>
 8019cc0:	6823      	ldr	r3, [r4, #0]
 8019cc2:	07de      	lsls	r6, r3, #31
 8019cc4:	d508      	bpl.n	8019cd8 <_printf_i+0x148>
 8019cc6:	6923      	ldr	r3, [r4, #16]
 8019cc8:	6861      	ldr	r1, [r4, #4]
 8019cca:	4299      	cmp	r1, r3
 8019ccc:	bfde      	ittt	le
 8019cce:	2330      	movle	r3, #48	; 0x30
 8019cd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019cd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019cd8:	1b52      	subs	r2, r2, r5
 8019cda:	6122      	str	r2, [r4, #16]
 8019cdc:	f8cd a000 	str.w	sl, [sp]
 8019ce0:	464b      	mov	r3, r9
 8019ce2:	aa03      	add	r2, sp, #12
 8019ce4:	4621      	mov	r1, r4
 8019ce6:	4640      	mov	r0, r8
 8019ce8:	f7ff fee4 	bl	8019ab4 <_printf_common>
 8019cec:	3001      	adds	r0, #1
 8019cee:	d14a      	bne.n	8019d86 <_printf_i+0x1f6>
 8019cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf4:	b004      	add	sp, #16
 8019cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cfa:	6823      	ldr	r3, [r4, #0]
 8019cfc:	f043 0320 	orr.w	r3, r3, #32
 8019d00:	6023      	str	r3, [r4, #0]
 8019d02:	4833      	ldr	r0, [pc, #204]	; (8019dd0 <_printf_i+0x240>)
 8019d04:	2778      	movs	r7, #120	; 0x78
 8019d06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019d0a:	6823      	ldr	r3, [r4, #0]
 8019d0c:	6829      	ldr	r1, [r5, #0]
 8019d0e:	061f      	lsls	r7, r3, #24
 8019d10:	f851 6b04 	ldr.w	r6, [r1], #4
 8019d14:	d402      	bmi.n	8019d1c <_printf_i+0x18c>
 8019d16:	065f      	lsls	r7, r3, #25
 8019d18:	bf48      	it	mi
 8019d1a:	b2b6      	uxthmi	r6, r6
 8019d1c:	07df      	lsls	r7, r3, #31
 8019d1e:	bf48      	it	mi
 8019d20:	f043 0320 	orrmi.w	r3, r3, #32
 8019d24:	6029      	str	r1, [r5, #0]
 8019d26:	bf48      	it	mi
 8019d28:	6023      	strmi	r3, [r4, #0]
 8019d2a:	b91e      	cbnz	r6, 8019d34 <_printf_i+0x1a4>
 8019d2c:	6823      	ldr	r3, [r4, #0]
 8019d2e:	f023 0320 	bic.w	r3, r3, #32
 8019d32:	6023      	str	r3, [r4, #0]
 8019d34:	2310      	movs	r3, #16
 8019d36:	e7a7      	b.n	8019c88 <_printf_i+0xf8>
 8019d38:	4824      	ldr	r0, [pc, #144]	; (8019dcc <_printf_i+0x23c>)
 8019d3a:	e7e4      	b.n	8019d06 <_printf_i+0x176>
 8019d3c:	4615      	mov	r5, r2
 8019d3e:	e7bd      	b.n	8019cbc <_printf_i+0x12c>
 8019d40:	682b      	ldr	r3, [r5, #0]
 8019d42:	6826      	ldr	r6, [r4, #0]
 8019d44:	6961      	ldr	r1, [r4, #20]
 8019d46:	1d18      	adds	r0, r3, #4
 8019d48:	6028      	str	r0, [r5, #0]
 8019d4a:	0635      	lsls	r5, r6, #24
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	d501      	bpl.n	8019d54 <_printf_i+0x1c4>
 8019d50:	6019      	str	r1, [r3, #0]
 8019d52:	e002      	b.n	8019d5a <_printf_i+0x1ca>
 8019d54:	0670      	lsls	r0, r6, #25
 8019d56:	d5fb      	bpl.n	8019d50 <_printf_i+0x1c0>
 8019d58:	8019      	strh	r1, [r3, #0]
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	6123      	str	r3, [r4, #16]
 8019d5e:	4615      	mov	r5, r2
 8019d60:	e7bc      	b.n	8019cdc <_printf_i+0x14c>
 8019d62:	682b      	ldr	r3, [r5, #0]
 8019d64:	1d1a      	adds	r2, r3, #4
 8019d66:	602a      	str	r2, [r5, #0]
 8019d68:	681d      	ldr	r5, [r3, #0]
 8019d6a:	6862      	ldr	r2, [r4, #4]
 8019d6c:	2100      	movs	r1, #0
 8019d6e:	4628      	mov	r0, r5
 8019d70:	f7e6 face 	bl	8000310 <memchr>
 8019d74:	b108      	cbz	r0, 8019d7a <_printf_i+0x1ea>
 8019d76:	1b40      	subs	r0, r0, r5
 8019d78:	6060      	str	r0, [r4, #4]
 8019d7a:	6863      	ldr	r3, [r4, #4]
 8019d7c:	6123      	str	r3, [r4, #16]
 8019d7e:	2300      	movs	r3, #0
 8019d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d84:	e7aa      	b.n	8019cdc <_printf_i+0x14c>
 8019d86:	6923      	ldr	r3, [r4, #16]
 8019d88:	462a      	mov	r2, r5
 8019d8a:	4649      	mov	r1, r9
 8019d8c:	4640      	mov	r0, r8
 8019d8e:	47d0      	blx	sl
 8019d90:	3001      	adds	r0, #1
 8019d92:	d0ad      	beq.n	8019cf0 <_printf_i+0x160>
 8019d94:	6823      	ldr	r3, [r4, #0]
 8019d96:	079b      	lsls	r3, r3, #30
 8019d98:	d413      	bmi.n	8019dc2 <_printf_i+0x232>
 8019d9a:	68e0      	ldr	r0, [r4, #12]
 8019d9c:	9b03      	ldr	r3, [sp, #12]
 8019d9e:	4298      	cmp	r0, r3
 8019da0:	bfb8      	it	lt
 8019da2:	4618      	movlt	r0, r3
 8019da4:	e7a6      	b.n	8019cf4 <_printf_i+0x164>
 8019da6:	2301      	movs	r3, #1
 8019da8:	4632      	mov	r2, r6
 8019daa:	4649      	mov	r1, r9
 8019dac:	4640      	mov	r0, r8
 8019dae:	47d0      	blx	sl
 8019db0:	3001      	adds	r0, #1
 8019db2:	d09d      	beq.n	8019cf0 <_printf_i+0x160>
 8019db4:	3501      	adds	r5, #1
 8019db6:	68e3      	ldr	r3, [r4, #12]
 8019db8:	9903      	ldr	r1, [sp, #12]
 8019dba:	1a5b      	subs	r3, r3, r1
 8019dbc:	42ab      	cmp	r3, r5
 8019dbe:	dcf2      	bgt.n	8019da6 <_printf_i+0x216>
 8019dc0:	e7eb      	b.n	8019d9a <_printf_i+0x20a>
 8019dc2:	2500      	movs	r5, #0
 8019dc4:	f104 0619 	add.w	r6, r4, #25
 8019dc8:	e7f5      	b.n	8019db6 <_printf_i+0x226>
 8019dca:	bf00      	nop
 8019dcc:	0801e14a 	.word	0x0801e14a
 8019dd0:	0801e15b 	.word	0x0801e15b

08019dd4 <_scanf_float>:
 8019dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd8:	b087      	sub	sp, #28
 8019dda:	4617      	mov	r7, r2
 8019ddc:	9303      	str	r3, [sp, #12]
 8019dde:	688b      	ldr	r3, [r1, #8]
 8019de0:	1e5a      	subs	r2, r3, #1
 8019de2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019de6:	bf83      	ittte	hi
 8019de8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019dec:	195b      	addhi	r3, r3, r5
 8019dee:	9302      	strhi	r3, [sp, #8]
 8019df0:	2300      	movls	r3, #0
 8019df2:	bf86      	itte	hi
 8019df4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019df8:	608b      	strhi	r3, [r1, #8]
 8019dfa:	9302      	strls	r3, [sp, #8]
 8019dfc:	680b      	ldr	r3, [r1, #0]
 8019dfe:	468b      	mov	fp, r1
 8019e00:	2500      	movs	r5, #0
 8019e02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019e06:	f84b 3b1c 	str.w	r3, [fp], #28
 8019e0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019e0e:	4680      	mov	r8, r0
 8019e10:	460c      	mov	r4, r1
 8019e12:	465e      	mov	r6, fp
 8019e14:	46aa      	mov	sl, r5
 8019e16:	46a9      	mov	r9, r5
 8019e18:	9501      	str	r5, [sp, #4]
 8019e1a:	68a2      	ldr	r2, [r4, #8]
 8019e1c:	b152      	cbz	r2, 8019e34 <_scanf_float+0x60>
 8019e1e:	683b      	ldr	r3, [r7, #0]
 8019e20:	781b      	ldrb	r3, [r3, #0]
 8019e22:	2b4e      	cmp	r3, #78	; 0x4e
 8019e24:	d864      	bhi.n	8019ef0 <_scanf_float+0x11c>
 8019e26:	2b40      	cmp	r3, #64	; 0x40
 8019e28:	d83c      	bhi.n	8019ea4 <_scanf_float+0xd0>
 8019e2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019e2e:	b2c8      	uxtb	r0, r1
 8019e30:	280e      	cmp	r0, #14
 8019e32:	d93a      	bls.n	8019eaa <_scanf_float+0xd6>
 8019e34:	f1b9 0f00 	cmp.w	r9, #0
 8019e38:	d003      	beq.n	8019e42 <_scanf_float+0x6e>
 8019e3a:	6823      	ldr	r3, [r4, #0]
 8019e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019e40:	6023      	str	r3, [r4, #0]
 8019e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019e46:	f1ba 0f01 	cmp.w	sl, #1
 8019e4a:	f200 8113 	bhi.w	801a074 <_scanf_float+0x2a0>
 8019e4e:	455e      	cmp	r6, fp
 8019e50:	f200 8105 	bhi.w	801a05e <_scanf_float+0x28a>
 8019e54:	2501      	movs	r5, #1
 8019e56:	4628      	mov	r0, r5
 8019e58:	b007      	add	sp, #28
 8019e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019e62:	2a0d      	cmp	r2, #13
 8019e64:	d8e6      	bhi.n	8019e34 <_scanf_float+0x60>
 8019e66:	a101      	add	r1, pc, #4	; (adr r1, 8019e6c <_scanf_float+0x98>)
 8019e68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019e6c:	08019fab 	.word	0x08019fab
 8019e70:	08019e35 	.word	0x08019e35
 8019e74:	08019e35 	.word	0x08019e35
 8019e78:	08019e35 	.word	0x08019e35
 8019e7c:	0801a00b 	.word	0x0801a00b
 8019e80:	08019fe3 	.word	0x08019fe3
 8019e84:	08019e35 	.word	0x08019e35
 8019e88:	08019e35 	.word	0x08019e35
 8019e8c:	08019fb9 	.word	0x08019fb9
 8019e90:	08019e35 	.word	0x08019e35
 8019e94:	08019e35 	.word	0x08019e35
 8019e98:	08019e35 	.word	0x08019e35
 8019e9c:	08019e35 	.word	0x08019e35
 8019ea0:	08019f71 	.word	0x08019f71
 8019ea4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019ea8:	e7db      	b.n	8019e62 <_scanf_float+0x8e>
 8019eaa:	290e      	cmp	r1, #14
 8019eac:	d8c2      	bhi.n	8019e34 <_scanf_float+0x60>
 8019eae:	a001      	add	r0, pc, #4	; (adr r0, 8019eb4 <_scanf_float+0xe0>)
 8019eb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019eb4:	08019f63 	.word	0x08019f63
 8019eb8:	08019e35 	.word	0x08019e35
 8019ebc:	08019f63 	.word	0x08019f63
 8019ec0:	08019ff7 	.word	0x08019ff7
 8019ec4:	08019e35 	.word	0x08019e35
 8019ec8:	08019f11 	.word	0x08019f11
 8019ecc:	08019f4d 	.word	0x08019f4d
 8019ed0:	08019f4d 	.word	0x08019f4d
 8019ed4:	08019f4d 	.word	0x08019f4d
 8019ed8:	08019f4d 	.word	0x08019f4d
 8019edc:	08019f4d 	.word	0x08019f4d
 8019ee0:	08019f4d 	.word	0x08019f4d
 8019ee4:	08019f4d 	.word	0x08019f4d
 8019ee8:	08019f4d 	.word	0x08019f4d
 8019eec:	08019f4d 	.word	0x08019f4d
 8019ef0:	2b6e      	cmp	r3, #110	; 0x6e
 8019ef2:	d809      	bhi.n	8019f08 <_scanf_float+0x134>
 8019ef4:	2b60      	cmp	r3, #96	; 0x60
 8019ef6:	d8b2      	bhi.n	8019e5e <_scanf_float+0x8a>
 8019ef8:	2b54      	cmp	r3, #84	; 0x54
 8019efa:	d077      	beq.n	8019fec <_scanf_float+0x218>
 8019efc:	2b59      	cmp	r3, #89	; 0x59
 8019efe:	d199      	bne.n	8019e34 <_scanf_float+0x60>
 8019f00:	2d07      	cmp	r5, #7
 8019f02:	d197      	bne.n	8019e34 <_scanf_float+0x60>
 8019f04:	2508      	movs	r5, #8
 8019f06:	e029      	b.n	8019f5c <_scanf_float+0x188>
 8019f08:	2b74      	cmp	r3, #116	; 0x74
 8019f0a:	d06f      	beq.n	8019fec <_scanf_float+0x218>
 8019f0c:	2b79      	cmp	r3, #121	; 0x79
 8019f0e:	e7f6      	b.n	8019efe <_scanf_float+0x12a>
 8019f10:	6821      	ldr	r1, [r4, #0]
 8019f12:	05c8      	lsls	r0, r1, #23
 8019f14:	d51a      	bpl.n	8019f4c <_scanf_float+0x178>
 8019f16:	9b02      	ldr	r3, [sp, #8]
 8019f18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019f1c:	6021      	str	r1, [r4, #0]
 8019f1e:	f109 0901 	add.w	r9, r9, #1
 8019f22:	b11b      	cbz	r3, 8019f2c <_scanf_float+0x158>
 8019f24:	3b01      	subs	r3, #1
 8019f26:	3201      	adds	r2, #1
 8019f28:	9302      	str	r3, [sp, #8]
 8019f2a:	60a2      	str	r2, [r4, #8]
 8019f2c:	68a3      	ldr	r3, [r4, #8]
 8019f2e:	3b01      	subs	r3, #1
 8019f30:	60a3      	str	r3, [r4, #8]
 8019f32:	6923      	ldr	r3, [r4, #16]
 8019f34:	3301      	adds	r3, #1
 8019f36:	6123      	str	r3, [r4, #16]
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	3b01      	subs	r3, #1
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	607b      	str	r3, [r7, #4]
 8019f40:	f340 8084 	ble.w	801a04c <_scanf_float+0x278>
 8019f44:	683b      	ldr	r3, [r7, #0]
 8019f46:	3301      	adds	r3, #1
 8019f48:	603b      	str	r3, [r7, #0]
 8019f4a:	e766      	b.n	8019e1a <_scanf_float+0x46>
 8019f4c:	eb1a 0f05 	cmn.w	sl, r5
 8019f50:	f47f af70 	bne.w	8019e34 <_scanf_float+0x60>
 8019f54:	6822      	ldr	r2, [r4, #0]
 8019f56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019f5a:	6022      	str	r2, [r4, #0]
 8019f5c:	f806 3b01 	strb.w	r3, [r6], #1
 8019f60:	e7e4      	b.n	8019f2c <_scanf_float+0x158>
 8019f62:	6822      	ldr	r2, [r4, #0]
 8019f64:	0610      	lsls	r0, r2, #24
 8019f66:	f57f af65 	bpl.w	8019e34 <_scanf_float+0x60>
 8019f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019f6e:	e7f4      	b.n	8019f5a <_scanf_float+0x186>
 8019f70:	f1ba 0f00 	cmp.w	sl, #0
 8019f74:	d10e      	bne.n	8019f94 <_scanf_float+0x1c0>
 8019f76:	f1b9 0f00 	cmp.w	r9, #0
 8019f7a:	d10e      	bne.n	8019f9a <_scanf_float+0x1c6>
 8019f7c:	6822      	ldr	r2, [r4, #0]
 8019f7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019f82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019f86:	d108      	bne.n	8019f9a <_scanf_float+0x1c6>
 8019f88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019f8c:	6022      	str	r2, [r4, #0]
 8019f8e:	f04f 0a01 	mov.w	sl, #1
 8019f92:	e7e3      	b.n	8019f5c <_scanf_float+0x188>
 8019f94:	f1ba 0f02 	cmp.w	sl, #2
 8019f98:	d055      	beq.n	801a046 <_scanf_float+0x272>
 8019f9a:	2d01      	cmp	r5, #1
 8019f9c:	d002      	beq.n	8019fa4 <_scanf_float+0x1d0>
 8019f9e:	2d04      	cmp	r5, #4
 8019fa0:	f47f af48 	bne.w	8019e34 <_scanf_float+0x60>
 8019fa4:	3501      	adds	r5, #1
 8019fa6:	b2ed      	uxtb	r5, r5
 8019fa8:	e7d8      	b.n	8019f5c <_scanf_float+0x188>
 8019faa:	f1ba 0f01 	cmp.w	sl, #1
 8019fae:	f47f af41 	bne.w	8019e34 <_scanf_float+0x60>
 8019fb2:	f04f 0a02 	mov.w	sl, #2
 8019fb6:	e7d1      	b.n	8019f5c <_scanf_float+0x188>
 8019fb8:	b97d      	cbnz	r5, 8019fda <_scanf_float+0x206>
 8019fba:	f1b9 0f00 	cmp.w	r9, #0
 8019fbe:	f47f af3c 	bne.w	8019e3a <_scanf_float+0x66>
 8019fc2:	6822      	ldr	r2, [r4, #0]
 8019fc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019fc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019fcc:	f47f af39 	bne.w	8019e42 <_scanf_float+0x6e>
 8019fd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019fd4:	6022      	str	r2, [r4, #0]
 8019fd6:	2501      	movs	r5, #1
 8019fd8:	e7c0      	b.n	8019f5c <_scanf_float+0x188>
 8019fda:	2d03      	cmp	r5, #3
 8019fdc:	d0e2      	beq.n	8019fa4 <_scanf_float+0x1d0>
 8019fde:	2d05      	cmp	r5, #5
 8019fe0:	e7de      	b.n	8019fa0 <_scanf_float+0x1cc>
 8019fe2:	2d02      	cmp	r5, #2
 8019fe4:	f47f af26 	bne.w	8019e34 <_scanf_float+0x60>
 8019fe8:	2503      	movs	r5, #3
 8019fea:	e7b7      	b.n	8019f5c <_scanf_float+0x188>
 8019fec:	2d06      	cmp	r5, #6
 8019fee:	f47f af21 	bne.w	8019e34 <_scanf_float+0x60>
 8019ff2:	2507      	movs	r5, #7
 8019ff4:	e7b2      	b.n	8019f5c <_scanf_float+0x188>
 8019ff6:	6822      	ldr	r2, [r4, #0]
 8019ff8:	0591      	lsls	r1, r2, #22
 8019ffa:	f57f af1b 	bpl.w	8019e34 <_scanf_float+0x60>
 8019ffe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a002:	6022      	str	r2, [r4, #0]
 801a004:	f8cd 9004 	str.w	r9, [sp, #4]
 801a008:	e7a8      	b.n	8019f5c <_scanf_float+0x188>
 801a00a:	6822      	ldr	r2, [r4, #0]
 801a00c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a010:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a014:	d006      	beq.n	801a024 <_scanf_float+0x250>
 801a016:	0550      	lsls	r0, r2, #21
 801a018:	f57f af0c 	bpl.w	8019e34 <_scanf_float+0x60>
 801a01c:	f1b9 0f00 	cmp.w	r9, #0
 801a020:	f43f af0f 	beq.w	8019e42 <_scanf_float+0x6e>
 801a024:	0591      	lsls	r1, r2, #22
 801a026:	bf58      	it	pl
 801a028:	9901      	ldrpl	r1, [sp, #4]
 801a02a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a02e:	bf58      	it	pl
 801a030:	eba9 0101 	subpl.w	r1, r9, r1
 801a034:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a038:	bf58      	it	pl
 801a03a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a03e:	6022      	str	r2, [r4, #0]
 801a040:	f04f 0900 	mov.w	r9, #0
 801a044:	e78a      	b.n	8019f5c <_scanf_float+0x188>
 801a046:	f04f 0a03 	mov.w	sl, #3
 801a04a:	e787      	b.n	8019f5c <_scanf_float+0x188>
 801a04c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a050:	4639      	mov	r1, r7
 801a052:	4640      	mov	r0, r8
 801a054:	4798      	blx	r3
 801a056:	2800      	cmp	r0, #0
 801a058:	f43f aedf 	beq.w	8019e1a <_scanf_float+0x46>
 801a05c:	e6ea      	b.n	8019e34 <_scanf_float+0x60>
 801a05e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a066:	463a      	mov	r2, r7
 801a068:	4640      	mov	r0, r8
 801a06a:	4798      	blx	r3
 801a06c:	6923      	ldr	r3, [r4, #16]
 801a06e:	3b01      	subs	r3, #1
 801a070:	6123      	str	r3, [r4, #16]
 801a072:	e6ec      	b.n	8019e4e <_scanf_float+0x7a>
 801a074:	1e6b      	subs	r3, r5, #1
 801a076:	2b06      	cmp	r3, #6
 801a078:	d825      	bhi.n	801a0c6 <_scanf_float+0x2f2>
 801a07a:	2d02      	cmp	r5, #2
 801a07c:	d836      	bhi.n	801a0ec <_scanf_float+0x318>
 801a07e:	455e      	cmp	r6, fp
 801a080:	f67f aee8 	bls.w	8019e54 <_scanf_float+0x80>
 801a084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a088:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a08c:	463a      	mov	r2, r7
 801a08e:	4640      	mov	r0, r8
 801a090:	4798      	blx	r3
 801a092:	6923      	ldr	r3, [r4, #16]
 801a094:	3b01      	subs	r3, #1
 801a096:	6123      	str	r3, [r4, #16]
 801a098:	e7f1      	b.n	801a07e <_scanf_float+0x2aa>
 801a09a:	9802      	ldr	r0, [sp, #8]
 801a09c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a0a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a0a4:	9002      	str	r0, [sp, #8]
 801a0a6:	463a      	mov	r2, r7
 801a0a8:	4640      	mov	r0, r8
 801a0aa:	4798      	blx	r3
 801a0ac:	6923      	ldr	r3, [r4, #16]
 801a0ae:	3b01      	subs	r3, #1
 801a0b0:	6123      	str	r3, [r4, #16]
 801a0b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a0b6:	fa5f fa8a 	uxtb.w	sl, sl
 801a0ba:	f1ba 0f02 	cmp.w	sl, #2
 801a0be:	d1ec      	bne.n	801a09a <_scanf_float+0x2c6>
 801a0c0:	3d03      	subs	r5, #3
 801a0c2:	b2ed      	uxtb	r5, r5
 801a0c4:	1b76      	subs	r6, r6, r5
 801a0c6:	6823      	ldr	r3, [r4, #0]
 801a0c8:	05da      	lsls	r2, r3, #23
 801a0ca:	d52f      	bpl.n	801a12c <_scanf_float+0x358>
 801a0cc:	055b      	lsls	r3, r3, #21
 801a0ce:	d510      	bpl.n	801a0f2 <_scanf_float+0x31e>
 801a0d0:	455e      	cmp	r6, fp
 801a0d2:	f67f aebf 	bls.w	8019e54 <_scanf_float+0x80>
 801a0d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a0da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a0de:	463a      	mov	r2, r7
 801a0e0:	4640      	mov	r0, r8
 801a0e2:	4798      	blx	r3
 801a0e4:	6923      	ldr	r3, [r4, #16]
 801a0e6:	3b01      	subs	r3, #1
 801a0e8:	6123      	str	r3, [r4, #16]
 801a0ea:	e7f1      	b.n	801a0d0 <_scanf_float+0x2fc>
 801a0ec:	46aa      	mov	sl, r5
 801a0ee:	9602      	str	r6, [sp, #8]
 801a0f0:	e7df      	b.n	801a0b2 <_scanf_float+0x2de>
 801a0f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a0f6:	6923      	ldr	r3, [r4, #16]
 801a0f8:	2965      	cmp	r1, #101	; 0x65
 801a0fa:	f103 33ff 	add.w	r3, r3, #4294967295
 801a0fe:	f106 35ff 	add.w	r5, r6, #4294967295
 801a102:	6123      	str	r3, [r4, #16]
 801a104:	d00c      	beq.n	801a120 <_scanf_float+0x34c>
 801a106:	2945      	cmp	r1, #69	; 0x45
 801a108:	d00a      	beq.n	801a120 <_scanf_float+0x34c>
 801a10a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a10e:	463a      	mov	r2, r7
 801a110:	4640      	mov	r0, r8
 801a112:	4798      	blx	r3
 801a114:	6923      	ldr	r3, [r4, #16]
 801a116:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a11a:	3b01      	subs	r3, #1
 801a11c:	1eb5      	subs	r5, r6, #2
 801a11e:	6123      	str	r3, [r4, #16]
 801a120:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a124:	463a      	mov	r2, r7
 801a126:	4640      	mov	r0, r8
 801a128:	4798      	blx	r3
 801a12a:	462e      	mov	r6, r5
 801a12c:	6825      	ldr	r5, [r4, #0]
 801a12e:	f015 0510 	ands.w	r5, r5, #16
 801a132:	d14d      	bne.n	801a1d0 <_scanf_float+0x3fc>
 801a134:	7035      	strb	r5, [r6, #0]
 801a136:	6823      	ldr	r3, [r4, #0]
 801a138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a13c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a140:	d11a      	bne.n	801a178 <_scanf_float+0x3a4>
 801a142:	9b01      	ldr	r3, [sp, #4]
 801a144:	454b      	cmp	r3, r9
 801a146:	eba3 0209 	sub.w	r2, r3, r9
 801a14a:	d122      	bne.n	801a192 <_scanf_float+0x3be>
 801a14c:	2200      	movs	r2, #0
 801a14e:	4659      	mov	r1, fp
 801a150:	4640      	mov	r0, r8
 801a152:	f002 fb67 	bl	801c824 <_strtod_r>
 801a156:	9b03      	ldr	r3, [sp, #12]
 801a158:	6821      	ldr	r1, [r4, #0]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	f011 0f02 	tst.w	r1, #2
 801a160:	f103 0204 	add.w	r2, r3, #4
 801a164:	d020      	beq.n	801a1a8 <_scanf_float+0x3d4>
 801a166:	9903      	ldr	r1, [sp, #12]
 801a168:	600a      	str	r2, [r1, #0]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	ed83 0b00 	vstr	d0, [r3]
 801a170:	68e3      	ldr	r3, [r4, #12]
 801a172:	3301      	adds	r3, #1
 801a174:	60e3      	str	r3, [r4, #12]
 801a176:	e66e      	b.n	8019e56 <_scanf_float+0x82>
 801a178:	9b04      	ldr	r3, [sp, #16]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d0e6      	beq.n	801a14c <_scanf_float+0x378>
 801a17e:	9905      	ldr	r1, [sp, #20]
 801a180:	230a      	movs	r3, #10
 801a182:	462a      	mov	r2, r5
 801a184:	3101      	adds	r1, #1
 801a186:	4640      	mov	r0, r8
 801a188:	f002 fbd4 	bl	801c934 <_strtol_r>
 801a18c:	9b04      	ldr	r3, [sp, #16]
 801a18e:	9e05      	ldr	r6, [sp, #20]
 801a190:	1ac2      	subs	r2, r0, r3
 801a192:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a196:	429e      	cmp	r6, r3
 801a198:	bf28      	it	cs
 801a19a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a19e:	490d      	ldr	r1, [pc, #52]	; (801a1d4 <_scanf_float+0x400>)
 801a1a0:	4630      	mov	r0, r6
 801a1a2:	f000 f8dd 	bl	801a360 <siprintf>
 801a1a6:	e7d1      	b.n	801a14c <_scanf_float+0x378>
 801a1a8:	f011 0f04 	tst.w	r1, #4
 801a1ac:	9903      	ldr	r1, [sp, #12]
 801a1ae:	600a      	str	r2, [r1, #0]
 801a1b0:	d1db      	bne.n	801a16a <_scanf_float+0x396>
 801a1b2:	eeb4 0b40 	vcmp.f64	d0, d0
 801a1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1ba:	681e      	ldr	r6, [r3, #0]
 801a1bc:	d705      	bvc.n	801a1ca <_scanf_float+0x3f6>
 801a1be:	4806      	ldr	r0, [pc, #24]	; (801a1d8 <_scanf_float+0x404>)
 801a1c0:	f000 f9c0 	bl	801a544 <nanf>
 801a1c4:	ed86 0a00 	vstr	s0, [r6]
 801a1c8:	e7d2      	b.n	801a170 <_scanf_float+0x39c>
 801a1ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a1ce:	e7f9      	b.n	801a1c4 <_scanf_float+0x3f0>
 801a1d0:	2500      	movs	r5, #0
 801a1d2:	e640      	b.n	8019e56 <_scanf_float+0x82>
 801a1d4:	0801e16c 	.word	0x0801e16c
 801a1d8:	0801e4fd 	.word	0x0801e4fd

0801a1dc <std>:
 801a1dc:	2300      	movs	r3, #0
 801a1de:	b510      	push	{r4, lr}
 801a1e0:	4604      	mov	r4, r0
 801a1e2:	e9c0 3300 	strd	r3, r3, [r0]
 801a1e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a1ea:	6083      	str	r3, [r0, #8]
 801a1ec:	8181      	strh	r1, [r0, #12]
 801a1ee:	6643      	str	r3, [r0, #100]	; 0x64
 801a1f0:	81c2      	strh	r2, [r0, #14]
 801a1f2:	6183      	str	r3, [r0, #24]
 801a1f4:	4619      	mov	r1, r3
 801a1f6:	2208      	movs	r2, #8
 801a1f8:	305c      	adds	r0, #92	; 0x5c
 801a1fa:	f000 f914 	bl	801a426 <memset>
 801a1fe:	4b0d      	ldr	r3, [pc, #52]	; (801a234 <std+0x58>)
 801a200:	6263      	str	r3, [r4, #36]	; 0x24
 801a202:	4b0d      	ldr	r3, [pc, #52]	; (801a238 <std+0x5c>)
 801a204:	62a3      	str	r3, [r4, #40]	; 0x28
 801a206:	4b0d      	ldr	r3, [pc, #52]	; (801a23c <std+0x60>)
 801a208:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a20a:	4b0d      	ldr	r3, [pc, #52]	; (801a240 <std+0x64>)
 801a20c:	6323      	str	r3, [r4, #48]	; 0x30
 801a20e:	4b0d      	ldr	r3, [pc, #52]	; (801a244 <std+0x68>)
 801a210:	6224      	str	r4, [r4, #32]
 801a212:	429c      	cmp	r4, r3
 801a214:	d006      	beq.n	801a224 <std+0x48>
 801a216:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a21a:	4294      	cmp	r4, r2
 801a21c:	d002      	beq.n	801a224 <std+0x48>
 801a21e:	33d0      	adds	r3, #208	; 0xd0
 801a220:	429c      	cmp	r4, r3
 801a222:	d105      	bne.n	801a230 <std+0x54>
 801a224:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a22c:	f000 b978 	b.w	801a520 <__retarget_lock_init_recursive>
 801a230:	bd10      	pop	{r4, pc}
 801a232:	bf00      	nop
 801a234:	0801a3a1 	.word	0x0801a3a1
 801a238:	0801a3c3 	.word	0x0801a3c3
 801a23c:	0801a3fb 	.word	0x0801a3fb
 801a240:	0801a41f 	.word	0x0801a41f
 801a244:	240034e4 	.word	0x240034e4

0801a248 <stdio_exit_handler>:
 801a248:	4a02      	ldr	r2, [pc, #8]	; (801a254 <stdio_exit_handler+0xc>)
 801a24a:	4903      	ldr	r1, [pc, #12]	; (801a258 <stdio_exit_handler+0x10>)
 801a24c:	4803      	ldr	r0, [pc, #12]	; (801a25c <stdio_exit_handler+0x14>)
 801a24e:	f000 b869 	b.w	801a324 <_fwalk_sglue>
 801a252:	bf00      	nop
 801a254:	24000100 	.word	0x24000100
 801a258:	0801ccf5 	.word	0x0801ccf5
 801a25c:	2400010c 	.word	0x2400010c

0801a260 <cleanup_stdio>:
 801a260:	6841      	ldr	r1, [r0, #4]
 801a262:	4b0c      	ldr	r3, [pc, #48]	; (801a294 <cleanup_stdio+0x34>)
 801a264:	4299      	cmp	r1, r3
 801a266:	b510      	push	{r4, lr}
 801a268:	4604      	mov	r4, r0
 801a26a:	d001      	beq.n	801a270 <cleanup_stdio+0x10>
 801a26c:	f002 fd42 	bl	801ccf4 <_fflush_r>
 801a270:	68a1      	ldr	r1, [r4, #8]
 801a272:	4b09      	ldr	r3, [pc, #36]	; (801a298 <cleanup_stdio+0x38>)
 801a274:	4299      	cmp	r1, r3
 801a276:	d002      	beq.n	801a27e <cleanup_stdio+0x1e>
 801a278:	4620      	mov	r0, r4
 801a27a:	f002 fd3b 	bl	801ccf4 <_fflush_r>
 801a27e:	68e1      	ldr	r1, [r4, #12]
 801a280:	4b06      	ldr	r3, [pc, #24]	; (801a29c <cleanup_stdio+0x3c>)
 801a282:	4299      	cmp	r1, r3
 801a284:	d004      	beq.n	801a290 <cleanup_stdio+0x30>
 801a286:	4620      	mov	r0, r4
 801a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a28c:	f002 bd32 	b.w	801ccf4 <_fflush_r>
 801a290:	bd10      	pop	{r4, pc}
 801a292:	bf00      	nop
 801a294:	240034e4 	.word	0x240034e4
 801a298:	2400354c 	.word	0x2400354c
 801a29c:	240035b4 	.word	0x240035b4

0801a2a0 <global_stdio_init.part.0>:
 801a2a0:	b510      	push	{r4, lr}
 801a2a2:	4b0b      	ldr	r3, [pc, #44]	; (801a2d0 <global_stdio_init.part.0+0x30>)
 801a2a4:	4c0b      	ldr	r4, [pc, #44]	; (801a2d4 <global_stdio_init.part.0+0x34>)
 801a2a6:	4a0c      	ldr	r2, [pc, #48]	; (801a2d8 <global_stdio_init.part.0+0x38>)
 801a2a8:	601a      	str	r2, [r3, #0]
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	2104      	movs	r1, #4
 801a2b0:	f7ff ff94 	bl	801a1dc <std>
 801a2b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a2b8:	2201      	movs	r2, #1
 801a2ba:	2109      	movs	r1, #9
 801a2bc:	f7ff ff8e 	bl	801a1dc <std>
 801a2c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801a2c4:	2202      	movs	r2, #2
 801a2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2ca:	2112      	movs	r1, #18
 801a2cc:	f7ff bf86 	b.w	801a1dc <std>
 801a2d0:	2400361c 	.word	0x2400361c
 801a2d4:	240034e4 	.word	0x240034e4
 801a2d8:	0801a249 	.word	0x0801a249

0801a2dc <__sfp_lock_acquire>:
 801a2dc:	4801      	ldr	r0, [pc, #4]	; (801a2e4 <__sfp_lock_acquire+0x8>)
 801a2de:	f000 b920 	b.w	801a522 <__retarget_lock_acquire_recursive>
 801a2e2:	bf00      	nop
 801a2e4:	24003625 	.word	0x24003625

0801a2e8 <__sfp_lock_release>:
 801a2e8:	4801      	ldr	r0, [pc, #4]	; (801a2f0 <__sfp_lock_release+0x8>)
 801a2ea:	f000 b91b 	b.w	801a524 <__retarget_lock_release_recursive>
 801a2ee:	bf00      	nop
 801a2f0:	24003625 	.word	0x24003625

0801a2f4 <__sinit>:
 801a2f4:	b510      	push	{r4, lr}
 801a2f6:	4604      	mov	r4, r0
 801a2f8:	f7ff fff0 	bl	801a2dc <__sfp_lock_acquire>
 801a2fc:	6a23      	ldr	r3, [r4, #32]
 801a2fe:	b11b      	cbz	r3, 801a308 <__sinit+0x14>
 801a300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a304:	f7ff bff0 	b.w	801a2e8 <__sfp_lock_release>
 801a308:	4b04      	ldr	r3, [pc, #16]	; (801a31c <__sinit+0x28>)
 801a30a:	6223      	str	r3, [r4, #32]
 801a30c:	4b04      	ldr	r3, [pc, #16]	; (801a320 <__sinit+0x2c>)
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d1f5      	bne.n	801a300 <__sinit+0xc>
 801a314:	f7ff ffc4 	bl	801a2a0 <global_stdio_init.part.0>
 801a318:	e7f2      	b.n	801a300 <__sinit+0xc>
 801a31a:	bf00      	nop
 801a31c:	0801a261 	.word	0x0801a261
 801a320:	2400361c 	.word	0x2400361c

0801a324 <_fwalk_sglue>:
 801a324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a328:	4607      	mov	r7, r0
 801a32a:	4688      	mov	r8, r1
 801a32c:	4614      	mov	r4, r2
 801a32e:	2600      	movs	r6, #0
 801a330:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a334:	f1b9 0901 	subs.w	r9, r9, #1
 801a338:	d505      	bpl.n	801a346 <_fwalk_sglue+0x22>
 801a33a:	6824      	ldr	r4, [r4, #0]
 801a33c:	2c00      	cmp	r4, #0
 801a33e:	d1f7      	bne.n	801a330 <_fwalk_sglue+0xc>
 801a340:	4630      	mov	r0, r6
 801a342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a346:	89ab      	ldrh	r3, [r5, #12]
 801a348:	2b01      	cmp	r3, #1
 801a34a:	d907      	bls.n	801a35c <_fwalk_sglue+0x38>
 801a34c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a350:	3301      	adds	r3, #1
 801a352:	d003      	beq.n	801a35c <_fwalk_sglue+0x38>
 801a354:	4629      	mov	r1, r5
 801a356:	4638      	mov	r0, r7
 801a358:	47c0      	blx	r8
 801a35a:	4306      	orrs	r6, r0
 801a35c:	3568      	adds	r5, #104	; 0x68
 801a35e:	e7e9      	b.n	801a334 <_fwalk_sglue+0x10>

0801a360 <siprintf>:
 801a360:	b40e      	push	{r1, r2, r3}
 801a362:	b500      	push	{lr}
 801a364:	b09c      	sub	sp, #112	; 0x70
 801a366:	ab1d      	add	r3, sp, #116	; 0x74
 801a368:	9002      	str	r0, [sp, #8]
 801a36a:	9006      	str	r0, [sp, #24]
 801a36c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a370:	4809      	ldr	r0, [pc, #36]	; (801a398 <siprintf+0x38>)
 801a372:	9107      	str	r1, [sp, #28]
 801a374:	9104      	str	r1, [sp, #16]
 801a376:	4909      	ldr	r1, [pc, #36]	; (801a39c <siprintf+0x3c>)
 801a378:	f853 2b04 	ldr.w	r2, [r3], #4
 801a37c:	9105      	str	r1, [sp, #20]
 801a37e:	6800      	ldr	r0, [r0, #0]
 801a380:	9301      	str	r3, [sp, #4]
 801a382:	a902      	add	r1, sp, #8
 801a384:	f002 fb32 	bl	801c9ec <_svfiprintf_r>
 801a388:	9b02      	ldr	r3, [sp, #8]
 801a38a:	2200      	movs	r2, #0
 801a38c:	701a      	strb	r2, [r3, #0]
 801a38e:	b01c      	add	sp, #112	; 0x70
 801a390:	f85d eb04 	ldr.w	lr, [sp], #4
 801a394:	b003      	add	sp, #12
 801a396:	4770      	bx	lr
 801a398:	24000158 	.word	0x24000158
 801a39c:	ffff0208 	.word	0xffff0208

0801a3a0 <__sread>:
 801a3a0:	b510      	push	{r4, lr}
 801a3a2:	460c      	mov	r4, r1
 801a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3a8:	f000 f86c 	bl	801a484 <_read_r>
 801a3ac:	2800      	cmp	r0, #0
 801a3ae:	bfab      	itete	ge
 801a3b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a3b2:	89a3      	ldrhlt	r3, [r4, #12]
 801a3b4:	181b      	addge	r3, r3, r0
 801a3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a3ba:	bfac      	ite	ge
 801a3bc:	6563      	strge	r3, [r4, #84]	; 0x54
 801a3be:	81a3      	strhlt	r3, [r4, #12]
 801a3c0:	bd10      	pop	{r4, pc}

0801a3c2 <__swrite>:
 801a3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3c6:	461f      	mov	r7, r3
 801a3c8:	898b      	ldrh	r3, [r1, #12]
 801a3ca:	05db      	lsls	r3, r3, #23
 801a3cc:	4605      	mov	r5, r0
 801a3ce:	460c      	mov	r4, r1
 801a3d0:	4616      	mov	r6, r2
 801a3d2:	d505      	bpl.n	801a3e0 <__swrite+0x1e>
 801a3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3d8:	2302      	movs	r3, #2
 801a3da:	2200      	movs	r2, #0
 801a3dc:	f000 f840 	bl	801a460 <_lseek_r>
 801a3e0:	89a3      	ldrh	r3, [r4, #12]
 801a3e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a3ea:	81a3      	strh	r3, [r4, #12]
 801a3ec:	4632      	mov	r2, r6
 801a3ee:	463b      	mov	r3, r7
 801a3f0:	4628      	mov	r0, r5
 801a3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3f6:	f000 b857 	b.w	801a4a8 <_write_r>

0801a3fa <__sseek>:
 801a3fa:	b510      	push	{r4, lr}
 801a3fc:	460c      	mov	r4, r1
 801a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a402:	f000 f82d 	bl	801a460 <_lseek_r>
 801a406:	1c43      	adds	r3, r0, #1
 801a408:	89a3      	ldrh	r3, [r4, #12]
 801a40a:	bf15      	itete	ne
 801a40c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a40e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a416:	81a3      	strheq	r3, [r4, #12]
 801a418:	bf18      	it	ne
 801a41a:	81a3      	strhne	r3, [r4, #12]
 801a41c:	bd10      	pop	{r4, pc}

0801a41e <__sclose>:
 801a41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a422:	f000 b80d 	b.w	801a440 <_close_r>

0801a426 <memset>:
 801a426:	4402      	add	r2, r0
 801a428:	4603      	mov	r3, r0
 801a42a:	4293      	cmp	r3, r2
 801a42c:	d100      	bne.n	801a430 <memset+0xa>
 801a42e:	4770      	bx	lr
 801a430:	f803 1b01 	strb.w	r1, [r3], #1
 801a434:	e7f9      	b.n	801a42a <memset+0x4>
	...

0801a438 <_localeconv_r>:
 801a438:	4800      	ldr	r0, [pc, #0]	; (801a43c <_localeconv_r+0x4>)
 801a43a:	4770      	bx	lr
 801a43c:	2400024c 	.word	0x2400024c

0801a440 <_close_r>:
 801a440:	b538      	push	{r3, r4, r5, lr}
 801a442:	4d06      	ldr	r5, [pc, #24]	; (801a45c <_close_r+0x1c>)
 801a444:	2300      	movs	r3, #0
 801a446:	4604      	mov	r4, r0
 801a448:	4608      	mov	r0, r1
 801a44a:	602b      	str	r3, [r5, #0]
 801a44c:	f7e8 ff75 	bl	800333a <_close>
 801a450:	1c43      	adds	r3, r0, #1
 801a452:	d102      	bne.n	801a45a <_close_r+0x1a>
 801a454:	682b      	ldr	r3, [r5, #0]
 801a456:	b103      	cbz	r3, 801a45a <_close_r+0x1a>
 801a458:	6023      	str	r3, [r4, #0]
 801a45a:	bd38      	pop	{r3, r4, r5, pc}
 801a45c:	24003620 	.word	0x24003620

0801a460 <_lseek_r>:
 801a460:	b538      	push	{r3, r4, r5, lr}
 801a462:	4d07      	ldr	r5, [pc, #28]	; (801a480 <_lseek_r+0x20>)
 801a464:	4604      	mov	r4, r0
 801a466:	4608      	mov	r0, r1
 801a468:	4611      	mov	r1, r2
 801a46a:	2200      	movs	r2, #0
 801a46c:	602a      	str	r2, [r5, #0]
 801a46e:	461a      	mov	r2, r3
 801a470:	f7e8 ff8a 	bl	8003388 <_lseek>
 801a474:	1c43      	adds	r3, r0, #1
 801a476:	d102      	bne.n	801a47e <_lseek_r+0x1e>
 801a478:	682b      	ldr	r3, [r5, #0]
 801a47a:	b103      	cbz	r3, 801a47e <_lseek_r+0x1e>
 801a47c:	6023      	str	r3, [r4, #0]
 801a47e:	bd38      	pop	{r3, r4, r5, pc}
 801a480:	24003620 	.word	0x24003620

0801a484 <_read_r>:
 801a484:	b538      	push	{r3, r4, r5, lr}
 801a486:	4d07      	ldr	r5, [pc, #28]	; (801a4a4 <_read_r+0x20>)
 801a488:	4604      	mov	r4, r0
 801a48a:	4608      	mov	r0, r1
 801a48c:	4611      	mov	r1, r2
 801a48e:	2200      	movs	r2, #0
 801a490:	602a      	str	r2, [r5, #0]
 801a492:	461a      	mov	r2, r3
 801a494:	f7e8 ff18 	bl	80032c8 <_read>
 801a498:	1c43      	adds	r3, r0, #1
 801a49a:	d102      	bne.n	801a4a2 <_read_r+0x1e>
 801a49c:	682b      	ldr	r3, [r5, #0]
 801a49e:	b103      	cbz	r3, 801a4a2 <_read_r+0x1e>
 801a4a0:	6023      	str	r3, [r4, #0]
 801a4a2:	bd38      	pop	{r3, r4, r5, pc}
 801a4a4:	24003620 	.word	0x24003620

0801a4a8 <_write_r>:
 801a4a8:	b538      	push	{r3, r4, r5, lr}
 801a4aa:	4d07      	ldr	r5, [pc, #28]	; (801a4c8 <_write_r+0x20>)
 801a4ac:	4604      	mov	r4, r0
 801a4ae:	4608      	mov	r0, r1
 801a4b0:	4611      	mov	r1, r2
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	602a      	str	r2, [r5, #0]
 801a4b6:	461a      	mov	r2, r3
 801a4b8:	f7e8 ff23 	bl	8003302 <_write>
 801a4bc:	1c43      	adds	r3, r0, #1
 801a4be:	d102      	bne.n	801a4c6 <_write_r+0x1e>
 801a4c0:	682b      	ldr	r3, [r5, #0]
 801a4c2:	b103      	cbz	r3, 801a4c6 <_write_r+0x1e>
 801a4c4:	6023      	str	r3, [r4, #0]
 801a4c6:	bd38      	pop	{r3, r4, r5, pc}
 801a4c8:	24003620 	.word	0x24003620

0801a4cc <__errno>:
 801a4cc:	4b01      	ldr	r3, [pc, #4]	; (801a4d4 <__errno+0x8>)
 801a4ce:	6818      	ldr	r0, [r3, #0]
 801a4d0:	4770      	bx	lr
 801a4d2:	bf00      	nop
 801a4d4:	24000158 	.word	0x24000158

0801a4d8 <__libc_init_array>:
 801a4d8:	b570      	push	{r4, r5, r6, lr}
 801a4da:	4d0d      	ldr	r5, [pc, #52]	; (801a510 <__libc_init_array+0x38>)
 801a4dc:	4c0d      	ldr	r4, [pc, #52]	; (801a514 <__libc_init_array+0x3c>)
 801a4de:	1b64      	subs	r4, r4, r5
 801a4e0:	10a4      	asrs	r4, r4, #2
 801a4e2:	2600      	movs	r6, #0
 801a4e4:	42a6      	cmp	r6, r4
 801a4e6:	d109      	bne.n	801a4fc <__libc_init_array+0x24>
 801a4e8:	4d0b      	ldr	r5, [pc, #44]	; (801a518 <__libc_init_array+0x40>)
 801a4ea:	4c0c      	ldr	r4, [pc, #48]	; (801a51c <__libc_init_array+0x44>)
 801a4ec:	f003 fb0c 	bl	801db08 <_init>
 801a4f0:	1b64      	subs	r4, r4, r5
 801a4f2:	10a4      	asrs	r4, r4, #2
 801a4f4:	2600      	movs	r6, #0
 801a4f6:	42a6      	cmp	r6, r4
 801a4f8:	d105      	bne.n	801a506 <__libc_init_array+0x2e>
 801a4fa:	bd70      	pop	{r4, r5, r6, pc}
 801a4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a500:	4798      	blx	r3
 801a502:	3601      	adds	r6, #1
 801a504:	e7ee      	b.n	801a4e4 <__libc_init_array+0xc>
 801a506:	f855 3b04 	ldr.w	r3, [r5], #4
 801a50a:	4798      	blx	r3
 801a50c:	3601      	adds	r6, #1
 801a50e:	e7f2      	b.n	801a4f6 <__libc_init_array+0x1e>
 801a510:	0801e568 	.word	0x0801e568
 801a514:	0801e568 	.word	0x0801e568
 801a518:	0801e568 	.word	0x0801e568
 801a51c:	0801e56c 	.word	0x0801e56c

0801a520 <__retarget_lock_init_recursive>:
 801a520:	4770      	bx	lr

0801a522 <__retarget_lock_acquire_recursive>:
 801a522:	4770      	bx	lr

0801a524 <__retarget_lock_release_recursive>:
 801a524:	4770      	bx	lr

0801a526 <memcpy>:
 801a526:	440a      	add	r2, r1
 801a528:	4291      	cmp	r1, r2
 801a52a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a52e:	d100      	bne.n	801a532 <memcpy+0xc>
 801a530:	4770      	bx	lr
 801a532:	b510      	push	{r4, lr}
 801a534:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a538:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a53c:	4291      	cmp	r1, r2
 801a53e:	d1f9      	bne.n	801a534 <memcpy+0xe>
 801a540:	bd10      	pop	{r4, pc}
	...

0801a544 <nanf>:
 801a544:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a54c <nanf+0x8>
 801a548:	4770      	bx	lr
 801a54a:	bf00      	nop
 801a54c:	7fc00000 	.word	0x7fc00000

0801a550 <quorem>:
 801a550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a554:	6903      	ldr	r3, [r0, #16]
 801a556:	690c      	ldr	r4, [r1, #16]
 801a558:	42a3      	cmp	r3, r4
 801a55a:	4607      	mov	r7, r0
 801a55c:	db7e      	blt.n	801a65c <quorem+0x10c>
 801a55e:	3c01      	subs	r4, #1
 801a560:	f101 0814 	add.w	r8, r1, #20
 801a564:	f100 0514 	add.w	r5, r0, #20
 801a568:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a56c:	9301      	str	r3, [sp, #4]
 801a56e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a576:	3301      	adds	r3, #1
 801a578:	429a      	cmp	r2, r3
 801a57a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a57e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a582:	fbb2 f6f3 	udiv	r6, r2, r3
 801a586:	d331      	bcc.n	801a5ec <quorem+0x9c>
 801a588:	f04f 0e00 	mov.w	lr, #0
 801a58c:	4640      	mov	r0, r8
 801a58e:	46ac      	mov	ip, r5
 801a590:	46f2      	mov	sl, lr
 801a592:	f850 2b04 	ldr.w	r2, [r0], #4
 801a596:	b293      	uxth	r3, r2
 801a598:	fb06 e303 	mla	r3, r6, r3, lr
 801a59c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a5a0:	0c1a      	lsrs	r2, r3, #16
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	ebaa 0303 	sub.w	r3, sl, r3
 801a5a8:	f8dc a000 	ldr.w	sl, [ip]
 801a5ac:	fa13 f38a 	uxtah	r3, r3, sl
 801a5b0:	fb06 220e 	mla	r2, r6, lr, r2
 801a5b4:	9300      	str	r3, [sp, #0]
 801a5b6:	9b00      	ldr	r3, [sp, #0]
 801a5b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a5bc:	b292      	uxth	r2, r2
 801a5be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a5c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a5c6:	f8bd 3000 	ldrh.w	r3, [sp]
 801a5ca:	4581      	cmp	r9, r0
 801a5cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a5d0:	f84c 3b04 	str.w	r3, [ip], #4
 801a5d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a5d8:	d2db      	bcs.n	801a592 <quorem+0x42>
 801a5da:	f855 300b 	ldr.w	r3, [r5, fp]
 801a5de:	b92b      	cbnz	r3, 801a5ec <quorem+0x9c>
 801a5e0:	9b01      	ldr	r3, [sp, #4]
 801a5e2:	3b04      	subs	r3, #4
 801a5e4:	429d      	cmp	r5, r3
 801a5e6:	461a      	mov	r2, r3
 801a5e8:	d32c      	bcc.n	801a644 <quorem+0xf4>
 801a5ea:	613c      	str	r4, [r7, #16]
 801a5ec:	4638      	mov	r0, r7
 801a5ee:	f001 f969 	bl	801b8c4 <__mcmp>
 801a5f2:	2800      	cmp	r0, #0
 801a5f4:	db22      	blt.n	801a63c <quorem+0xec>
 801a5f6:	3601      	adds	r6, #1
 801a5f8:	4629      	mov	r1, r5
 801a5fa:	2000      	movs	r0, #0
 801a5fc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a600:	f8d1 c000 	ldr.w	ip, [r1]
 801a604:	b293      	uxth	r3, r2
 801a606:	1ac3      	subs	r3, r0, r3
 801a608:	0c12      	lsrs	r2, r2, #16
 801a60a:	fa13 f38c 	uxtah	r3, r3, ip
 801a60e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a616:	b29b      	uxth	r3, r3
 801a618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a61c:	45c1      	cmp	r9, r8
 801a61e:	f841 3b04 	str.w	r3, [r1], #4
 801a622:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a626:	d2e9      	bcs.n	801a5fc <quorem+0xac>
 801a628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a62c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a630:	b922      	cbnz	r2, 801a63c <quorem+0xec>
 801a632:	3b04      	subs	r3, #4
 801a634:	429d      	cmp	r5, r3
 801a636:	461a      	mov	r2, r3
 801a638:	d30a      	bcc.n	801a650 <quorem+0x100>
 801a63a:	613c      	str	r4, [r7, #16]
 801a63c:	4630      	mov	r0, r6
 801a63e:	b003      	add	sp, #12
 801a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a644:	6812      	ldr	r2, [r2, #0]
 801a646:	3b04      	subs	r3, #4
 801a648:	2a00      	cmp	r2, #0
 801a64a:	d1ce      	bne.n	801a5ea <quorem+0x9a>
 801a64c:	3c01      	subs	r4, #1
 801a64e:	e7c9      	b.n	801a5e4 <quorem+0x94>
 801a650:	6812      	ldr	r2, [r2, #0]
 801a652:	3b04      	subs	r3, #4
 801a654:	2a00      	cmp	r2, #0
 801a656:	d1f0      	bne.n	801a63a <quorem+0xea>
 801a658:	3c01      	subs	r4, #1
 801a65a:	e7eb      	b.n	801a634 <quorem+0xe4>
 801a65c:	2000      	movs	r0, #0
 801a65e:	e7ee      	b.n	801a63e <quorem+0xee>

0801a660 <_dtoa_r>:
 801a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a664:	ed2d 8b02 	vpush	{d8}
 801a668:	69c5      	ldr	r5, [r0, #28]
 801a66a:	b091      	sub	sp, #68	; 0x44
 801a66c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a670:	ec59 8b10 	vmov	r8, r9, d0
 801a674:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a676:	9106      	str	r1, [sp, #24]
 801a678:	4606      	mov	r6, r0
 801a67a:	9208      	str	r2, [sp, #32]
 801a67c:	930c      	str	r3, [sp, #48]	; 0x30
 801a67e:	b975      	cbnz	r5, 801a69e <_dtoa_r+0x3e>
 801a680:	2010      	movs	r0, #16
 801a682:	f000 fda5 	bl	801b1d0 <malloc>
 801a686:	4602      	mov	r2, r0
 801a688:	61f0      	str	r0, [r6, #28]
 801a68a:	b920      	cbnz	r0, 801a696 <_dtoa_r+0x36>
 801a68c:	4ba6      	ldr	r3, [pc, #664]	; (801a928 <_dtoa_r+0x2c8>)
 801a68e:	21ef      	movs	r1, #239	; 0xef
 801a690:	48a6      	ldr	r0, [pc, #664]	; (801a92c <_dtoa_r+0x2cc>)
 801a692:	f002 fb9d 	bl	801cdd0 <__assert_func>
 801a696:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a69a:	6005      	str	r5, [r0, #0]
 801a69c:	60c5      	str	r5, [r0, #12]
 801a69e:	69f3      	ldr	r3, [r6, #28]
 801a6a0:	6819      	ldr	r1, [r3, #0]
 801a6a2:	b151      	cbz	r1, 801a6ba <_dtoa_r+0x5a>
 801a6a4:	685a      	ldr	r2, [r3, #4]
 801a6a6:	604a      	str	r2, [r1, #4]
 801a6a8:	2301      	movs	r3, #1
 801a6aa:	4093      	lsls	r3, r2
 801a6ac:	608b      	str	r3, [r1, #8]
 801a6ae:	4630      	mov	r0, r6
 801a6b0:	f000 fe82 	bl	801b3b8 <_Bfree>
 801a6b4:	69f3      	ldr	r3, [r6, #28]
 801a6b6:	2200      	movs	r2, #0
 801a6b8:	601a      	str	r2, [r3, #0]
 801a6ba:	f1b9 0300 	subs.w	r3, r9, #0
 801a6be:	bfbb      	ittet	lt
 801a6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a6c4:	9303      	strlt	r3, [sp, #12]
 801a6c6:	2300      	movge	r3, #0
 801a6c8:	2201      	movlt	r2, #1
 801a6ca:	bfac      	ite	ge
 801a6cc:	6023      	strge	r3, [r4, #0]
 801a6ce:	6022      	strlt	r2, [r4, #0]
 801a6d0:	4b97      	ldr	r3, [pc, #604]	; (801a930 <_dtoa_r+0x2d0>)
 801a6d2:	9c03      	ldr	r4, [sp, #12]
 801a6d4:	43a3      	bics	r3, r4
 801a6d6:	d11c      	bne.n	801a712 <_dtoa_r+0xb2>
 801a6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a6da:	f242 730f 	movw	r3, #9999	; 0x270f
 801a6de:	6013      	str	r3, [r2, #0]
 801a6e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a6e4:	ea53 0308 	orrs.w	r3, r3, r8
 801a6e8:	f000 84fb 	beq.w	801b0e2 <_dtoa_r+0xa82>
 801a6ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a6ee:	b963      	cbnz	r3, 801a70a <_dtoa_r+0xaa>
 801a6f0:	4b90      	ldr	r3, [pc, #576]	; (801a934 <_dtoa_r+0x2d4>)
 801a6f2:	e020      	b.n	801a736 <_dtoa_r+0xd6>
 801a6f4:	4b90      	ldr	r3, [pc, #576]	; (801a938 <_dtoa_r+0x2d8>)
 801a6f6:	9301      	str	r3, [sp, #4]
 801a6f8:	3308      	adds	r3, #8
 801a6fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a6fc:	6013      	str	r3, [r2, #0]
 801a6fe:	9801      	ldr	r0, [sp, #4]
 801a700:	b011      	add	sp, #68	; 0x44
 801a702:	ecbd 8b02 	vpop	{d8}
 801a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a70a:	4b8a      	ldr	r3, [pc, #552]	; (801a934 <_dtoa_r+0x2d4>)
 801a70c:	9301      	str	r3, [sp, #4]
 801a70e:	3303      	adds	r3, #3
 801a710:	e7f3      	b.n	801a6fa <_dtoa_r+0x9a>
 801a712:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a716:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71e:	d10c      	bne.n	801a73a <_dtoa_r+0xda>
 801a720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a722:	2301      	movs	r3, #1
 801a724:	6013      	str	r3, [r2, #0]
 801a726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a728:	2b00      	cmp	r3, #0
 801a72a:	f000 84d7 	beq.w	801b0dc <_dtoa_r+0xa7c>
 801a72e:	4b83      	ldr	r3, [pc, #524]	; (801a93c <_dtoa_r+0x2dc>)
 801a730:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a732:	6013      	str	r3, [r2, #0]
 801a734:	3b01      	subs	r3, #1
 801a736:	9301      	str	r3, [sp, #4]
 801a738:	e7e1      	b.n	801a6fe <_dtoa_r+0x9e>
 801a73a:	aa0e      	add	r2, sp, #56	; 0x38
 801a73c:	a90f      	add	r1, sp, #60	; 0x3c
 801a73e:	4630      	mov	r0, r6
 801a740:	eeb0 0b48 	vmov.f64	d0, d8
 801a744:	f001 f9d4 	bl	801baf0 <__d2b>
 801a748:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a74c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a74e:	4605      	mov	r5, r0
 801a750:	2b00      	cmp	r3, #0
 801a752:	d046      	beq.n	801a7e2 <_dtoa_r+0x182>
 801a754:	eeb0 7b48 	vmov.f64	d7, d8
 801a758:	ee18 1a90 	vmov	r1, s17
 801a75c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a760:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a764:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a76c:	2000      	movs	r0, #0
 801a76e:	ee07 1a90 	vmov	s15, r1
 801a772:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a776:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a910 <_dtoa_r+0x2b0>
 801a77a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a77e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a918 <_dtoa_r+0x2b8>
 801a782:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a786:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a920 <_dtoa_r+0x2c0>
 801a78a:	ee07 3a90 	vmov	s15, r3
 801a78e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a792:	eeb0 7b46 	vmov.f64	d7, d6
 801a796:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a79a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a79e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7a6:	ee16 ba90 	vmov	fp, s13
 801a7aa:	9009      	str	r0, [sp, #36]	; 0x24
 801a7ac:	d508      	bpl.n	801a7c0 <_dtoa_r+0x160>
 801a7ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a7b2:	eeb4 6b47 	vcmp.f64	d6, d7
 801a7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7ba:	bf18      	it	ne
 801a7bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a7c0:	f1bb 0f16 	cmp.w	fp, #22
 801a7c4:	d82b      	bhi.n	801a81e <_dtoa_r+0x1be>
 801a7c6:	495e      	ldr	r1, [pc, #376]	; (801a940 <_dtoa_r+0x2e0>)
 801a7c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a7cc:	ed91 7b00 	vldr	d7, [r1]
 801a7d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7d8:	d501      	bpl.n	801a7de <_dtoa_r+0x17e>
 801a7da:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a7de:	2100      	movs	r1, #0
 801a7e0:	e01e      	b.n	801a820 <_dtoa_r+0x1c0>
 801a7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a7e4:	4413      	add	r3, r2
 801a7e6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a7ea:	2920      	cmp	r1, #32
 801a7ec:	bfc1      	itttt	gt
 801a7ee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a7f2:	408c      	lslgt	r4, r1
 801a7f4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a7f8:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a7fc:	bfd6      	itet	le
 801a7fe:	f1c1 0120 	rsble	r1, r1, #32
 801a802:	4321      	orrgt	r1, r4
 801a804:	fa08 f101 	lslle.w	r1, r8, r1
 801a808:	ee07 1a90 	vmov	s15, r1
 801a80c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a810:	3b01      	subs	r3, #1
 801a812:	ee17 1a90 	vmov	r1, s15
 801a816:	2001      	movs	r0, #1
 801a818:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a81c:	e7a7      	b.n	801a76e <_dtoa_r+0x10e>
 801a81e:	2101      	movs	r1, #1
 801a820:	1ad2      	subs	r2, r2, r3
 801a822:	1e53      	subs	r3, r2, #1
 801a824:	9305      	str	r3, [sp, #20]
 801a826:	bf45      	ittet	mi
 801a828:	f1c2 0301 	rsbmi	r3, r2, #1
 801a82c:	9304      	strmi	r3, [sp, #16]
 801a82e:	2300      	movpl	r3, #0
 801a830:	2300      	movmi	r3, #0
 801a832:	bf4c      	ite	mi
 801a834:	9305      	strmi	r3, [sp, #20]
 801a836:	9304      	strpl	r3, [sp, #16]
 801a838:	f1bb 0f00 	cmp.w	fp, #0
 801a83c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a83e:	db18      	blt.n	801a872 <_dtoa_r+0x212>
 801a840:	9b05      	ldr	r3, [sp, #20]
 801a842:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a846:	445b      	add	r3, fp
 801a848:	9305      	str	r3, [sp, #20]
 801a84a:	2300      	movs	r3, #0
 801a84c:	9a06      	ldr	r2, [sp, #24]
 801a84e:	2a09      	cmp	r2, #9
 801a850:	d848      	bhi.n	801a8e4 <_dtoa_r+0x284>
 801a852:	2a05      	cmp	r2, #5
 801a854:	bfc4      	itt	gt
 801a856:	3a04      	subgt	r2, #4
 801a858:	9206      	strgt	r2, [sp, #24]
 801a85a:	9a06      	ldr	r2, [sp, #24]
 801a85c:	f1a2 0202 	sub.w	r2, r2, #2
 801a860:	bfcc      	ite	gt
 801a862:	2400      	movgt	r4, #0
 801a864:	2401      	movle	r4, #1
 801a866:	2a03      	cmp	r2, #3
 801a868:	d847      	bhi.n	801a8fa <_dtoa_r+0x29a>
 801a86a:	e8df f002 	tbb	[pc, r2]
 801a86e:	2d0b      	.short	0x2d0b
 801a870:	392b      	.short	0x392b
 801a872:	9b04      	ldr	r3, [sp, #16]
 801a874:	2200      	movs	r2, #0
 801a876:	eba3 030b 	sub.w	r3, r3, fp
 801a87a:	9304      	str	r3, [sp, #16]
 801a87c:	920a      	str	r2, [sp, #40]	; 0x28
 801a87e:	f1cb 0300 	rsb	r3, fp, #0
 801a882:	e7e3      	b.n	801a84c <_dtoa_r+0x1ec>
 801a884:	2200      	movs	r2, #0
 801a886:	9207      	str	r2, [sp, #28]
 801a888:	9a08      	ldr	r2, [sp, #32]
 801a88a:	2a00      	cmp	r2, #0
 801a88c:	dc38      	bgt.n	801a900 <_dtoa_r+0x2a0>
 801a88e:	f04f 0a01 	mov.w	sl, #1
 801a892:	46d1      	mov	r9, sl
 801a894:	4652      	mov	r2, sl
 801a896:	f8cd a020 	str.w	sl, [sp, #32]
 801a89a:	69f7      	ldr	r7, [r6, #28]
 801a89c:	2100      	movs	r1, #0
 801a89e:	2004      	movs	r0, #4
 801a8a0:	f100 0c14 	add.w	ip, r0, #20
 801a8a4:	4594      	cmp	ip, r2
 801a8a6:	d930      	bls.n	801a90a <_dtoa_r+0x2aa>
 801a8a8:	6079      	str	r1, [r7, #4]
 801a8aa:	4630      	mov	r0, r6
 801a8ac:	930d      	str	r3, [sp, #52]	; 0x34
 801a8ae:	f000 fd43 	bl	801b338 <_Balloc>
 801a8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8b4:	9001      	str	r0, [sp, #4]
 801a8b6:	4602      	mov	r2, r0
 801a8b8:	2800      	cmp	r0, #0
 801a8ba:	d145      	bne.n	801a948 <_dtoa_r+0x2e8>
 801a8bc:	4b21      	ldr	r3, [pc, #132]	; (801a944 <_dtoa_r+0x2e4>)
 801a8be:	f240 11af 	movw	r1, #431	; 0x1af
 801a8c2:	e6e5      	b.n	801a690 <_dtoa_r+0x30>
 801a8c4:	2201      	movs	r2, #1
 801a8c6:	e7de      	b.n	801a886 <_dtoa_r+0x226>
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	9207      	str	r2, [sp, #28]
 801a8cc:	9a08      	ldr	r2, [sp, #32]
 801a8ce:	eb0b 0a02 	add.w	sl, fp, r2
 801a8d2:	f10a 0901 	add.w	r9, sl, #1
 801a8d6:	464a      	mov	r2, r9
 801a8d8:	2a01      	cmp	r2, #1
 801a8da:	bfb8      	it	lt
 801a8dc:	2201      	movlt	r2, #1
 801a8de:	e7dc      	b.n	801a89a <_dtoa_r+0x23a>
 801a8e0:	2201      	movs	r2, #1
 801a8e2:	e7f2      	b.n	801a8ca <_dtoa_r+0x26a>
 801a8e4:	2401      	movs	r4, #1
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a8ec:	f04f 3aff 	mov.w	sl, #4294967295
 801a8f0:	2100      	movs	r1, #0
 801a8f2:	46d1      	mov	r9, sl
 801a8f4:	2212      	movs	r2, #18
 801a8f6:	9108      	str	r1, [sp, #32]
 801a8f8:	e7cf      	b.n	801a89a <_dtoa_r+0x23a>
 801a8fa:	2201      	movs	r2, #1
 801a8fc:	9207      	str	r2, [sp, #28]
 801a8fe:	e7f5      	b.n	801a8ec <_dtoa_r+0x28c>
 801a900:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a904:	46d1      	mov	r9, sl
 801a906:	4652      	mov	r2, sl
 801a908:	e7c7      	b.n	801a89a <_dtoa_r+0x23a>
 801a90a:	3101      	adds	r1, #1
 801a90c:	0040      	lsls	r0, r0, #1
 801a90e:	e7c7      	b.n	801a8a0 <_dtoa_r+0x240>
 801a910:	636f4361 	.word	0x636f4361
 801a914:	3fd287a7 	.word	0x3fd287a7
 801a918:	8b60c8b3 	.word	0x8b60c8b3
 801a91c:	3fc68a28 	.word	0x3fc68a28
 801a920:	509f79fb 	.word	0x509f79fb
 801a924:	3fd34413 	.word	0x3fd34413
 801a928:	0801e17e 	.word	0x0801e17e
 801a92c:	0801e195 	.word	0x0801e195
 801a930:	7ff00000 	.word	0x7ff00000
 801a934:	0801e17a 	.word	0x0801e17a
 801a938:	0801e171 	.word	0x0801e171
 801a93c:	0801e149 	.word	0x0801e149
 801a940:	0801e280 	.word	0x0801e280
 801a944:	0801e1ed 	.word	0x0801e1ed
 801a948:	69f2      	ldr	r2, [r6, #28]
 801a94a:	9901      	ldr	r1, [sp, #4]
 801a94c:	6011      	str	r1, [r2, #0]
 801a94e:	f1b9 0f0e 	cmp.w	r9, #14
 801a952:	d86c      	bhi.n	801aa2e <_dtoa_r+0x3ce>
 801a954:	2c00      	cmp	r4, #0
 801a956:	d06a      	beq.n	801aa2e <_dtoa_r+0x3ce>
 801a958:	f1bb 0f00 	cmp.w	fp, #0
 801a95c:	f340 80a0 	ble.w	801aaa0 <_dtoa_r+0x440>
 801a960:	4ac1      	ldr	r2, [pc, #772]	; (801ac68 <_dtoa_r+0x608>)
 801a962:	f00b 010f 	and.w	r1, fp, #15
 801a966:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a96a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a96e:	ed92 7b00 	vldr	d7, [r2]
 801a972:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a976:	f000 8087 	beq.w	801aa88 <_dtoa_r+0x428>
 801a97a:	49bc      	ldr	r1, [pc, #752]	; (801ac6c <_dtoa_r+0x60c>)
 801a97c:	ed91 6b08 	vldr	d6, [r1, #32]
 801a980:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a984:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a988:	f002 020f 	and.w	r2, r2, #15
 801a98c:	2103      	movs	r1, #3
 801a98e:	48b7      	ldr	r0, [pc, #732]	; (801ac6c <_dtoa_r+0x60c>)
 801a990:	2a00      	cmp	r2, #0
 801a992:	d17b      	bne.n	801aa8c <_dtoa_r+0x42c>
 801a994:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a998:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a99c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a9a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9a6:	2a00      	cmp	r2, #0
 801a9a8:	f000 80a0 	beq.w	801aaec <_dtoa_r+0x48c>
 801a9ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a9b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9b8:	f140 8098 	bpl.w	801aaec <_dtoa_r+0x48c>
 801a9bc:	f1b9 0f00 	cmp.w	r9, #0
 801a9c0:	f000 8094 	beq.w	801aaec <_dtoa_r+0x48c>
 801a9c4:	f1ba 0f00 	cmp.w	sl, #0
 801a9c8:	dd2f      	ble.n	801aa2a <_dtoa_r+0x3ca>
 801a9ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a9ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a9d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9d6:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a9da:	3101      	adds	r1, #1
 801a9dc:	4654      	mov	r4, sl
 801a9de:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a9e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a9e6:	ee07 1a90 	vmov	s15, r1
 801a9ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a9ee:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a9f2:	ee15 7a90 	vmov	r7, s11
 801a9f6:	ec51 0b15 	vmov	r0, r1, d5
 801a9fa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a9fe:	2c00      	cmp	r4, #0
 801aa00:	d177      	bne.n	801aaf2 <_dtoa_r+0x492>
 801aa02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801aa06:	ee36 6b47 	vsub.f64	d6, d6, d7
 801aa0a:	ec41 0b17 	vmov	d7, r0, r1
 801aa0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa16:	f300 826a 	bgt.w	801aeee <_dtoa_r+0x88e>
 801aa1a:	eeb1 7b47 	vneg.f64	d7, d7
 801aa1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa26:	f100 8260 	bmi.w	801aeea <_dtoa_r+0x88a>
 801aa2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801aa2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa30:	2a00      	cmp	r2, #0
 801aa32:	f2c0 811d 	blt.w	801ac70 <_dtoa_r+0x610>
 801aa36:	f1bb 0f0e 	cmp.w	fp, #14
 801aa3a:	f300 8119 	bgt.w	801ac70 <_dtoa_r+0x610>
 801aa3e:	4b8a      	ldr	r3, [pc, #552]	; (801ac68 <_dtoa_r+0x608>)
 801aa40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801aa44:	ed93 6b00 	vldr	d6, [r3]
 801aa48:	9b08      	ldr	r3, [sp, #32]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	f280 80b7 	bge.w	801abbe <_dtoa_r+0x55e>
 801aa50:	f1b9 0f00 	cmp.w	r9, #0
 801aa54:	f300 80b3 	bgt.w	801abbe <_dtoa_r+0x55e>
 801aa58:	f040 8246 	bne.w	801aee8 <_dtoa_r+0x888>
 801aa5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801aa60:	ee26 6b07 	vmul.f64	d6, d6, d7
 801aa64:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aa68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa70:	464c      	mov	r4, r9
 801aa72:	464f      	mov	r7, r9
 801aa74:	f280 821c 	bge.w	801aeb0 <_dtoa_r+0x850>
 801aa78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aa7c:	2331      	movs	r3, #49	; 0x31
 801aa7e:	f808 3b01 	strb.w	r3, [r8], #1
 801aa82:	f10b 0b01 	add.w	fp, fp, #1
 801aa86:	e218      	b.n	801aeba <_dtoa_r+0x85a>
 801aa88:	2102      	movs	r1, #2
 801aa8a:	e780      	b.n	801a98e <_dtoa_r+0x32e>
 801aa8c:	07d4      	lsls	r4, r2, #31
 801aa8e:	d504      	bpl.n	801aa9a <_dtoa_r+0x43a>
 801aa90:	ed90 6b00 	vldr	d6, [r0]
 801aa94:	3101      	adds	r1, #1
 801aa96:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa9a:	1052      	asrs	r2, r2, #1
 801aa9c:	3008      	adds	r0, #8
 801aa9e:	e777      	b.n	801a990 <_dtoa_r+0x330>
 801aaa0:	d022      	beq.n	801aae8 <_dtoa_r+0x488>
 801aaa2:	f1cb 0200 	rsb	r2, fp, #0
 801aaa6:	4970      	ldr	r1, [pc, #448]	; (801ac68 <_dtoa_r+0x608>)
 801aaa8:	f002 000f 	and.w	r0, r2, #15
 801aaac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801aab0:	ed91 7b00 	vldr	d7, [r1]
 801aab4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801aab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aabc:	486b      	ldr	r0, [pc, #428]	; (801ac6c <_dtoa_r+0x60c>)
 801aabe:	1112      	asrs	r2, r2, #4
 801aac0:	2400      	movs	r4, #0
 801aac2:	2102      	movs	r1, #2
 801aac4:	b92a      	cbnz	r2, 801aad2 <_dtoa_r+0x472>
 801aac6:	2c00      	cmp	r4, #0
 801aac8:	f43f af6a 	beq.w	801a9a0 <_dtoa_r+0x340>
 801aacc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aad0:	e766      	b.n	801a9a0 <_dtoa_r+0x340>
 801aad2:	07d7      	lsls	r7, r2, #31
 801aad4:	d505      	bpl.n	801aae2 <_dtoa_r+0x482>
 801aad6:	ed90 6b00 	vldr	d6, [r0]
 801aada:	3101      	adds	r1, #1
 801aadc:	2401      	movs	r4, #1
 801aade:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aae2:	1052      	asrs	r2, r2, #1
 801aae4:	3008      	adds	r0, #8
 801aae6:	e7ed      	b.n	801aac4 <_dtoa_r+0x464>
 801aae8:	2102      	movs	r1, #2
 801aaea:	e759      	b.n	801a9a0 <_dtoa_r+0x340>
 801aaec:	465a      	mov	r2, fp
 801aaee:	464c      	mov	r4, r9
 801aaf0:	e775      	b.n	801a9de <_dtoa_r+0x37e>
 801aaf2:	ec41 0b17 	vmov	d7, r0, r1
 801aaf6:	495c      	ldr	r1, [pc, #368]	; (801ac68 <_dtoa_r+0x608>)
 801aaf8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801aafc:	ed11 4b02 	vldr	d4, [r1, #-8]
 801ab00:	9901      	ldr	r1, [sp, #4]
 801ab02:	440c      	add	r4, r1
 801ab04:	9907      	ldr	r1, [sp, #28]
 801ab06:	b351      	cbz	r1, 801ab5e <_dtoa_r+0x4fe>
 801ab08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ab0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ab10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ab14:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ab18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ab1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ab20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ab24:	ee14 1a90 	vmov	r1, s9
 801ab28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ab2c:	3130      	adds	r1, #48	; 0x30
 801ab2e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ab32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab3a:	f808 1b01 	strb.w	r1, [r8], #1
 801ab3e:	d439      	bmi.n	801abb4 <_dtoa_r+0x554>
 801ab40:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ab44:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ab48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab4c:	d472      	bmi.n	801ac34 <_dtoa_r+0x5d4>
 801ab4e:	45a0      	cmp	r8, r4
 801ab50:	f43f af6b 	beq.w	801aa2a <_dtoa_r+0x3ca>
 801ab54:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ab58:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ab5c:	e7e0      	b.n	801ab20 <_dtoa_r+0x4c0>
 801ab5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ab62:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ab66:	4620      	mov	r0, r4
 801ab68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ab6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ab70:	ee14 1a90 	vmov	r1, s9
 801ab74:	3130      	adds	r1, #48	; 0x30
 801ab76:	f808 1b01 	strb.w	r1, [r8], #1
 801ab7a:	45a0      	cmp	r8, r4
 801ab7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ab80:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ab84:	d118      	bne.n	801abb8 <_dtoa_r+0x558>
 801ab86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ab8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ab8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ab92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab96:	dc4d      	bgt.n	801ac34 <_dtoa_r+0x5d4>
 801ab98:	ee35 5b47 	vsub.f64	d5, d5, d7
 801ab9c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801aba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aba4:	f57f af41 	bpl.w	801aa2a <_dtoa_r+0x3ca>
 801aba8:	4680      	mov	r8, r0
 801abaa:	3801      	subs	r0, #1
 801abac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801abb0:	2b30      	cmp	r3, #48	; 0x30
 801abb2:	d0f9      	beq.n	801aba8 <_dtoa_r+0x548>
 801abb4:	4693      	mov	fp, r2
 801abb6:	e02a      	b.n	801ac0e <_dtoa_r+0x5ae>
 801abb8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801abbc:	e7d6      	b.n	801ab6c <_dtoa_r+0x50c>
 801abbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 801abc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801abc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801abca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801abce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801abd2:	ee15 3a10 	vmov	r3, s10
 801abd6:	3330      	adds	r3, #48	; 0x30
 801abd8:	f808 3b01 	strb.w	r3, [r8], #1
 801abdc:	9b01      	ldr	r3, [sp, #4]
 801abde:	eba8 0303 	sub.w	r3, r8, r3
 801abe2:	4599      	cmp	r9, r3
 801abe4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801abe8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801abec:	d133      	bne.n	801ac56 <_dtoa_r+0x5f6>
 801abee:	ee37 7b07 	vadd.f64	d7, d7, d7
 801abf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801abf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abfa:	dc1a      	bgt.n	801ac32 <_dtoa_r+0x5d2>
 801abfc:	eeb4 7b46 	vcmp.f64	d7, d6
 801ac00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac04:	d103      	bne.n	801ac0e <_dtoa_r+0x5ae>
 801ac06:	ee15 3a10 	vmov	r3, s10
 801ac0a:	07d9      	lsls	r1, r3, #31
 801ac0c:	d411      	bmi.n	801ac32 <_dtoa_r+0x5d2>
 801ac0e:	4629      	mov	r1, r5
 801ac10:	4630      	mov	r0, r6
 801ac12:	f000 fbd1 	bl	801b3b8 <_Bfree>
 801ac16:	2300      	movs	r3, #0
 801ac18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ac1a:	f888 3000 	strb.w	r3, [r8]
 801ac1e:	f10b 0301 	add.w	r3, fp, #1
 801ac22:	6013      	str	r3, [r2, #0]
 801ac24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	f43f ad69 	beq.w	801a6fe <_dtoa_r+0x9e>
 801ac2c:	f8c3 8000 	str.w	r8, [r3]
 801ac30:	e565      	b.n	801a6fe <_dtoa_r+0x9e>
 801ac32:	465a      	mov	r2, fp
 801ac34:	4643      	mov	r3, r8
 801ac36:	4698      	mov	r8, r3
 801ac38:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801ac3c:	2939      	cmp	r1, #57	; 0x39
 801ac3e:	d106      	bne.n	801ac4e <_dtoa_r+0x5ee>
 801ac40:	9901      	ldr	r1, [sp, #4]
 801ac42:	4299      	cmp	r1, r3
 801ac44:	d1f7      	bne.n	801ac36 <_dtoa_r+0x5d6>
 801ac46:	9801      	ldr	r0, [sp, #4]
 801ac48:	2130      	movs	r1, #48	; 0x30
 801ac4a:	3201      	adds	r2, #1
 801ac4c:	7001      	strb	r1, [r0, #0]
 801ac4e:	7819      	ldrb	r1, [r3, #0]
 801ac50:	3101      	adds	r1, #1
 801ac52:	7019      	strb	r1, [r3, #0]
 801ac54:	e7ae      	b.n	801abb4 <_dtoa_r+0x554>
 801ac56:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ac5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac62:	d1b2      	bne.n	801abca <_dtoa_r+0x56a>
 801ac64:	e7d3      	b.n	801ac0e <_dtoa_r+0x5ae>
 801ac66:	bf00      	nop
 801ac68:	0801e280 	.word	0x0801e280
 801ac6c:	0801e258 	.word	0x0801e258
 801ac70:	9907      	ldr	r1, [sp, #28]
 801ac72:	2900      	cmp	r1, #0
 801ac74:	f000 80d0 	beq.w	801ae18 <_dtoa_r+0x7b8>
 801ac78:	9906      	ldr	r1, [sp, #24]
 801ac7a:	2901      	cmp	r1, #1
 801ac7c:	f300 80b4 	bgt.w	801ade8 <_dtoa_r+0x788>
 801ac80:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac82:	2900      	cmp	r1, #0
 801ac84:	f000 80ac 	beq.w	801ade0 <_dtoa_r+0x780>
 801ac88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ac8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ac90:	461c      	mov	r4, r3
 801ac92:	9309      	str	r3, [sp, #36]	; 0x24
 801ac94:	9b04      	ldr	r3, [sp, #16]
 801ac96:	4413      	add	r3, r2
 801ac98:	9304      	str	r3, [sp, #16]
 801ac9a:	9b05      	ldr	r3, [sp, #20]
 801ac9c:	2101      	movs	r1, #1
 801ac9e:	4413      	add	r3, r2
 801aca0:	4630      	mov	r0, r6
 801aca2:	9305      	str	r3, [sp, #20]
 801aca4:	f000 fc88 	bl	801b5b8 <__i2b>
 801aca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acaa:	4607      	mov	r7, r0
 801acac:	f1b8 0f00 	cmp.w	r8, #0
 801acb0:	d00d      	beq.n	801acce <_dtoa_r+0x66e>
 801acb2:	9a05      	ldr	r2, [sp, #20]
 801acb4:	2a00      	cmp	r2, #0
 801acb6:	dd0a      	ble.n	801acce <_dtoa_r+0x66e>
 801acb8:	4542      	cmp	r2, r8
 801acba:	9904      	ldr	r1, [sp, #16]
 801acbc:	bfa8      	it	ge
 801acbe:	4642      	movge	r2, r8
 801acc0:	1a89      	subs	r1, r1, r2
 801acc2:	9104      	str	r1, [sp, #16]
 801acc4:	9905      	ldr	r1, [sp, #20]
 801acc6:	eba8 0802 	sub.w	r8, r8, r2
 801acca:	1a8a      	subs	r2, r1, r2
 801accc:	9205      	str	r2, [sp, #20]
 801acce:	b303      	cbz	r3, 801ad12 <_dtoa_r+0x6b2>
 801acd0:	9a07      	ldr	r2, [sp, #28]
 801acd2:	2a00      	cmp	r2, #0
 801acd4:	f000 80a5 	beq.w	801ae22 <_dtoa_r+0x7c2>
 801acd8:	2c00      	cmp	r4, #0
 801acda:	dd13      	ble.n	801ad04 <_dtoa_r+0x6a4>
 801acdc:	4639      	mov	r1, r7
 801acde:	4622      	mov	r2, r4
 801ace0:	4630      	mov	r0, r6
 801ace2:	930d      	str	r3, [sp, #52]	; 0x34
 801ace4:	f000 fd28 	bl	801b738 <__pow5mult>
 801ace8:	462a      	mov	r2, r5
 801acea:	4601      	mov	r1, r0
 801acec:	4607      	mov	r7, r0
 801acee:	4630      	mov	r0, r6
 801acf0:	f000 fc78 	bl	801b5e4 <__multiply>
 801acf4:	4629      	mov	r1, r5
 801acf6:	9009      	str	r0, [sp, #36]	; 0x24
 801acf8:	4630      	mov	r0, r6
 801acfa:	f000 fb5d 	bl	801b3b8 <_Bfree>
 801acfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad02:	4615      	mov	r5, r2
 801ad04:	1b1a      	subs	r2, r3, r4
 801ad06:	d004      	beq.n	801ad12 <_dtoa_r+0x6b2>
 801ad08:	4629      	mov	r1, r5
 801ad0a:	4630      	mov	r0, r6
 801ad0c:	f000 fd14 	bl	801b738 <__pow5mult>
 801ad10:	4605      	mov	r5, r0
 801ad12:	2101      	movs	r1, #1
 801ad14:	4630      	mov	r0, r6
 801ad16:	f000 fc4f 	bl	801b5b8 <__i2b>
 801ad1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	4604      	mov	r4, r0
 801ad20:	f340 8081 	ble.w	801ae26 <_dtoa_r+0x7c6>
 801ad24:	461a      	mov	r2, r3
 801ad26:	4601      	mov	r1, r0
 801ad28:	4630      	mov	r0, r6
 801ad2a:	f000 fd05 	bl	801b738 <__pow5mult>
 801ad2e:	9b06      	ldr	r3, [sp, #24]
 801ad30:	2b01      	cmp	r3, #1
 801ad32:	4604      	mov	r4, r0
 801ad34:	dd7a      	ble.n	801ae2c <_dtoa_r+0x7cc>
 801ad36:	2300      	movs	r3, #0
 801ad38:	9309      	str	r3, [sp, #36]	; 0x24
 801ad3a:	6922      	ldr	r2, [r4, #16]
 801ad3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ad40:	6910      	ldr	r0, [r2, #16]
 801ad42:	f000 fbeb 	bl	801b51c <__hi0bits>
 801ad46:	f1c0 0020 	rsb	r0, r0, #32
 801ad4a:	9b05      	ldr	r3, [sp, #20]
 801ad4c:	4418      	add	r0, r3
 801ad4e:	f010 001f 	ands.w	r0, r0, #31
 801ad52:	f000 8093 	beq.w	801ae7c <_dtoa_r+0x81c>
 801ad56:	f1c0 0220 	rsb	r2, r0, #32
 801ad5a:	2a04      	cmp	r2, #4
 801ad5c:	f340 8085 	ble.w	801ae6a <_dtoa_r+0x80a>
 801ad60:	9b04      	ldr	r3, [sp, #16]
 801ad62:	f1c0 001c 	rsb	r0, r0, #28
 801ad66:	4403      	add	r3, r0
 801ad68:	9304      	str	r3, [sp, #16]
 801ad6a:	9b05      	ldr	r3, [sp, #20]
 801ad6c:	4480      	add	r8, r0
 801ad6e:	4403      	add	r3, r0
 801ad70:	9305      	str	r3, [sp, #20]
 801ad72:	9b04      	ldr	r3, [sp, #16]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	dd05      	ble.n	801ad84 <_dtoa_r+0x724>
 801ad78:	4629      	mov	r1, r5
 801ad7a:	461a      	mov	r2, r3
 801ad7c:	4630      	mov	r0, r6
 801ad7e:	f000 fd35 	bl	801b7ec <__lshift>
 801ad82:	4605      	mov	r5, r0
 801ad84:	9b05      	ldr	r3, [sp, #20]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	dd05      	ble.n	801ad96 <_dtoa_r+0x736>
 801ad8a:	4621      	mov	r1, r4
 801ad8c:	461a      	mov	r2, r3
 801ad8e:	4630      	mov	r0, r6
 801ad90:	f000 fd2c 	bl	801b7ec <__lshift>
 801ad94:	4604      	mov	r4, r0
 801ad96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d071      	beq.n	801ae80 <_dtoa_r+0x820>
 801ad9c:	4621      	mov	r1, r4
 801ad9e:	4628      	mov	r0, r5
 801ada0:	f000 fd90 	bl	801b8c4 <__mcmp>
 801ada4:	2800      	cmp	r0, #0
 801ada6:	da6b      	bge.n	801ae80 <_dtoa_r+0x820>
 801ada8:	2300      	movs	r3, #0
 801adaa:	4629      	mov	r1, r5
 801adac:	220a      	movs	r2, #10
 801adae:	4630      	mov	r0, r6
 801adb0:	f000 fb24 	bl	801b3fc <__multadd>
 801adb4:	9b07      	ldr	r3, [sp, #28]
 801adb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801adba:	4605      	mov	r5, r0
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	f000 8197 	beq.w	801b0f0 <_dtoa_r+0xa90>
 801adc2:	4639      	mov	r1, r7
 801adc4:	2300      	movs	r3, #0
 801adc6:	220a      	movs	r2, #10
 801adc8:	4630      	mov	r0, r6
 801adca:	f000 fb17 	bl	801b3fc <__multadd>
 801adce:	f1ba 0f00 	cmp.w	sl, #0
 801add2:	4607      	mov	r7, r0
 801add4:	f300 8093 	bgt.w	801aefe <_dtoa_r+0x89e>
 801add8:	9b06      	ldr	r3, [sp, #24]
 801adda:	2b02      	cmp	r3, #2
 801addc:	dc57      	bgt.n	801ae8e <_dtoa_r+0x82e>
 801adde:	e08e      	b.n	801aefe <_dtoa_r+0x89e>
 801ade0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ade2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ade6:	e751      	b.n	801ac8c <_dtoa_r+0x62c>
 801ade8:	f109 34ff 	add.w	r4, r9, #4294967295
 801adec:	42a3      	cmp	r3, r4
 801adee:	bfbf      	itttt	lt
 801adf0:	1ae2      	sublt	r2, r4, r3
 801adf2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801adf4:	189b      	addlt	r3, r3, r2
 801adf6:	930a      	strlt	r3, [sp, #40]	; 0x28
 801adf8:	bfae      	itee	ge
 801adfa:	1b1c      	subge	r4, r3, r4
 801adfc:	4623      	movlt	r3, r4
 801adfe:	2400      	movlt	r4, #0
 801ae00:	f1b9 0f00 	cmp.w	r9, #0
 801ae04:	bfb5      	itete	lt
 801ae06:	9a04      	ldrlt	r2, [sp, #16]
 801ae08:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801ae0c:	eba2 0809 	sublt.w	r8, r2, r9
 801ae10:	464a      	movge	r2, r9
 801ae12:	bfb8      	it	lt
 801ae14:	2200      	movlt	r2, #0
 801ae16:	e73c      	b.n	801ac92 <_dtoa_r+0x632>
 801ae18:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ae1c:	9f07      	ldr	r7, [sp, #28]
 801ae1e:	461c      	mov	r4, r3
 801ae20:	e744      	b.n	801acac <_dtoa_r+0x64c>
 801ae22:	461a      	mov	r2, r3
 801ae24:	e770      	b.n	801ad08 <_dtoa_r+0x6a8>
 801ae26:	9b06      	ldr	r3, [sp, #24]
 801ae28:	2b01      	cmp	r3, #1
 801ae2a:	dc18      	bgt.n	801ae5e <_dtoa_r+0x7fe>
 801ae2c:	9b02      	ldr	r3, [sp, #8]
 801ae2e:	b9b3      	cbnz	r3, 801ae5e <_dtoa_r+0x7fe>
 801ae30:	9b03      	ldr	r3, [sp, #12]
 801ae32:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ae36:	b9a2      	cbnz	r2, 801ae62 <_dtoa_r+0x802>
 801ae38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ae3c:	0d12      	lsrs	r2, r2, #20
 801ae3e:	0512      	lsls	r2, r2, #20
 801ae40:	b18a      	cbz	r2, 801ae66 <_dtoa_r+0x806>
 801ae42:	9b04      	ldr	r3, [sp, #16]
 801ae44:	3301      	adds	r3, #1
 801ae46:	9304      	str	r3, [sp, #16]
 801ae48:	9b05      	ldr	r3, [sp, #20]
 801ae4a:	3301      	adds	r3, #1
 801ae4c:	9305      	str	r3, [sp, #20]
 801ae4e:	2301      	movs	r3, #1
 801ae50:	9309      	str	r3, [sp, #36]	; 0x24
 801ae52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	f47f af70 	bne.w	801ad3a <_dtoa_r+0x6da>
 801ae5a:	2001      	movs	r0, #1
 801ae5c:	e775      	b.n	801ad4a <_dtoa_r+0x6ea>
 801ae5e:	2300      	movs	r3, #0
 801ae60:	e7f6      	b.n	801ae50 <_dtoa_r+0x7f0>
 801ae62:	9b02      	ldr	r3, [sp, #8]
 801ae64:	e7f4      	b.n	801ae50 <_dtoa_r+0x7f0>
 801ae66:	9209      	str	r2, [sp, #36]	; 0x24
 801ae68:	e7f3      	b.n	801ae52 <_dtoa_r+0x7f2>
 801ae6a:	d082      	beq.n	801ad72 <_dtoa_r+0x712>
 801ae6c:	9b04      	ldr	r3, [sp, #16]
 801ae6e:	321c      	adds	r2, #28
 801ae70:	4413      	add	r3, r2
 801ae72:	9304      	str	r3, [sp, #16]
 801ae74:	9b05      	ldr	r3, [sp, #20]
 801ae76:	4490      	add	r8, r2
 801ae78:	4413      	add	r3, r2
 801ae7a:	e779      	b.n	801ad70 <_dtoa_r+0x710>
 801ae7c:	4602      	mov	r2, r0
 801ae7e:	e7f5      	b.n	801ae6c <_dtoa_r+0x80c>
 801ae80:	f1b9 0f00 	cmp.w	r9, #0
 801ae84:	dc36      	bgt.n	801aef4 <_dtoa_r+0x894>
 801ae86:	9b06      	ldr	r3, [sp, #24]
 801ae88:	2b02      	cmp	r3, #2
 801ae8a:	dd33      	ble.n	801aef4 <_dtoa_r+0x894>
 801ae8c:	46ca      	mov	sl, r9
 801ae8e:	f1ba 0f00 	cmp.w	sl, #0
 801ae92:	d10d      	bne.n	801aeb0 <_dtoa_r+0x850>
 801ae94:	4621      	mov	r1, r4
 801ae96:	4653      	mov	r3, sl
 801ae98:	2205      	movs	r2, #5
 801ae9a:	4630      	mov	r0, r6
 801ae9c:	f000 faae 	bl	801b3fc <__multadd>
 801aea0:	4601      	mov	r1, r0
 801aea2:	4604      	mov	r4, r0
 801aea4:	4628      	mov	r0, r5
 801aea6:	f000 fd0d 	bl	801b8c4 <__mcmp>
 801aeaa:	2800      	cmp	r0, #0
 801aeac:	f73f ade4 	bgt.w	801aa78 <_dtoa_r+0x418>
 801aeb0:	9b08      	ldr	r3, [sp, #32]
 801aeb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aeb6:	ea6f 0b03 	mvn.w	fp, r3
 801aeba:	f04f 0900 	mov.w	r9, #0
 801aebe:	4621      	mov	r1, r4
 801aec0:	4630      	mov	r0, r6
 801aec2:	f000 fa79 	bl	801b3b8 <_Bfree>
 801aec6:	2f00      	cmp	r7, #0
 801aec8:	f43f aea1 	beq.w	801ac0e <_dtoa_r+0x5ae>
 801aecc:	f1b9 0f00 	cmp.w	r9, #0
 801aed0:	d005      	beq.n	801aede <_dtoa_r+0x87e>
 801aed2:	45b9      	cmp	r9, r7
 801aed4:	d003      	beq.n	801aede <_dtoa_r+0x87e>
 801aed6:	4649      	mov	r1, r9
 801aed8:	4630      	mov	r0, r6
 801aeda:	f000 fa6d 	bl	801b3b8 <_Bfree>
 801aede:	4639      	mov	r1, r7
 801aee0:	4630      	mov	r0, r6
 801aee2:	f000 fa69 	bl	801b3b8 <_Bfree>
 801aee6:	e692      	b.n	801ac0e <_dtoa_r+0x5ae>
 801aee8:	2400      	movs	r4, #0
 801aeea:	4627      	mov	r7, r4
 801aeec:	e7e0      	b.n	801aeb0 <_dtoa_r+0x850>
 801aeee:	4693      	mov	fp, r2
 801aef0:	4627      	mov	r7, r4
 801aef2:	e5c1      	b.n	801aa78 <_dtoa_r+0x418>
 801aef4:	9b07      	ldr	r3, [sp, #28]
 801aef6:	46ca      	mov	sl, r9
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	f000 8100 	beq.w	801b0fe <_dtoa_r+0xa9e>
 801aefe:	f1b8 0f00 	cmp.w	r8, #0
 801af02:	dd05      	ble.n	801af10 <_dtoa_r+0x8b0>
 801af04:	4639      	mov	r1, r7
 801af06:	4642      	mov	r2, r8
 801af08:	4630      	mov	r0, r6
 801af0a:	f000 fc6f 	bl	801b7ec <__lshift>
 801af0e:	4607      	mov	r7, r0
 801af10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af12:	2b00      	cmp	r3, #0
 801af14:	d05d      	beq.n	801afd2 <_dtoa_r+0x972>
 801af16:	6879      	ldr	r1, [r7, #4]
 801af18:	4630      	mov	r0, r6
 801af1a:	f000 fa0d 	bl	801b338 <_Balloc>
 801af1e:	4680      	mov	r8, r0
 801af20:	b928      	cbnz	r0, 801af2e <_dtoa_r+0x8ce>
 801af22:	4b82      	ldr	r3, [pc, #520]	; (801b12c <_dtoa_r+0xacc>)
 801af24:	4602      	mov	r2, r0
 801af26:	f240 21ef 	movw	r1, #751	; 0x2ef
 801af2a:	f7ff bbb1 	b.w	801a690 <_dtoa_r+0x30>
 801af2e:	693a      	ldr	r2, [r7, #16]
 801af30:	3202      	adds	r2, #2
 801af32:	0092      	lsls	r2, r2, #2
 801af34:	f107 010c 	add.w	r1, r7, #12
 801af38:	300c      	adds	r0, #12
 801af3a:	f7ff faf4 	bl	801a526 <memcpy>
 801af3e:	2201      	movs	r2, #1
 801af40:	4641      	mov	r1, r8
 801af42:	4630      	mov	r0, r6
 801af44:	f000 fc52 	bl	801b7ec <__lshift>
 801af48:	9b01      	ldr	r3, [sp, #4]
 801af4a:	3301      	adds	r3, #1
 801af4c:	9304      	str	r3, [sp, #16]
 801af4e:	9b01      	ldr	r3, [sp, #4]
 801af50:	4453      	add	r3, sl
 801af52:	9308      	str	r3, [sp, #32]
 801af54:	9b02      	ldr	r3, [sp, #8]
 801af56:	f003 0301 	and.w	r3, r3, #1
 801af5a:	46b9      	mov	r9, r7
 801af5c:	9307      	str	r3, [sp, #28]
 801af5e:	4607      	mov	r7, r0
 801af60:	9b04      	ldr	r3, [sp, #16]
 801af62:	4621      	mov	r1, r4
 801af64:	3b01      	subs	r3, #1
 801af66:	4628      	mov	r0, r5
 801af68:	9302      	str	r3, [sp, #8]
 801af6a:	f7ff faf1 	bl	801a550 <quorem>
 801af6e:	4603      	mov	r3, r0
 801af70:	3330      	adds	r3, #48	; 0x30
 801af72:	9005      	str	r0, [sp, #20]
 801af74:	4649      	mov	r1, r9
 801af76:	4628      	mov	r0, r5
 801af78:	9309      	str	r3, [sp, #36]	; 0x24
 801af7a:	f000 fca3 	bl	801b8c4 <__mcmp>
 801af7e:	463a      	mov	r2, r7
 801af80:	4682      	mov	sl, r0
 801af82:	4621      	mov	r1, r4
 801af84:	4630      	mov	r0, r6
 801af86:	f000 fcb9 	bl	801b8fc <__mdiff>
 801af8a:	68c2      	ldr	r2, [r0, #12]
 801af8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af8e:	4680      	mov	r8, r0
 801af90:	bb0a      	cbnz	r2, 801afd6 <_dtoa_r+0x976>
 801af92:	4601      	mov	r1, r0
 801af94:	4628      	mov	r0, r5
 801af96:	f000 fc95 	bl	801b8c4 <__mcmp>
 801af9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af9c:	4602      	mov	r2, r0
 801af9e:	4641      	mov	r1, r8
 801afa0:	4630      	mov	r0, r6
 801afa2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801afa6:	f000 fa07 	bl	801b3b8 <_Bfree>
 801afaa:	9b06      	ldr	r3, [sp, #24]
 801afac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801afae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801afb2:	ea43 0102 	orr.w	r1, r3, r2
 801afb6:	9b07      	ldr	r3, [sp, #28]
 801afb8:	4319      	orrs	r1, r3
 801afba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afbc:	d10d      	bne.n	801afda <_dtoa_r+0x97a>
 801afbe:	2b39      	cmp	r3, #57	; 0x39
 801afc0:	d029      	beq.n	801b016 <_dtoa_r+0x9b6>
 801afc2:	f1ba 0f00 	cmp.w	sl, #0
 801afc6:	dd01      	ble.n	801afcc <_dtoa_r+0x96c>
 801afc8:	9b05      	ldr	r3, [sp, #20]
 801afca:	3331      	adds	r3, #49	; 0x31
 801afcc:	9a02      	ldr	r2, [sp, #8]
 801afce:	7013      	strb	r3, [r2, #0]
 801afd0:	e775      	b.n	801aebe <_dtoa_r+0x85e>
 801afd2:	4638      	mov	r0, r7
 801afd4:	e7b8      	b.n	801af48 <_dtoa_r+0x8e8>
 801afd6:	2201      	movs	r2, #1
 801afd8:	e7e1      	b.n	801af9e <_dtoa_r+0x93e>
 801afda:	f1ba 0f00 	cmp.w	sl, #0
 801afde:	db06      	blt.n	801afee <_dtoa_r+0x98e>
 801afe0:	9906      	ldr	r1, [sp, #24]
 801afe2:	ea41 0a0a 	orr.w	sl, r1, sl
 801afe6:	9907      	ldr	r1, [sp, #28]
 801afe8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801afec:	d120      	bne.n	801b030 <_dtoa_r+0x9d0>
 801afee:	2a00      	cmp	r2, #0
 801aff0:	ddec      	ble.n	801afcc <_dtoa_r+0x96c>
 801aff2:	4629      	mov	r1, r5
 801aff4:	2201      	movs	r2, #1
 801aff6:	4630      	mov	r0, r6
 801aff8:	9304      	str	r3, [sp, #16]
 801affa:	f000 fbf7 	bl	801b7ec <__lshift>
 801affe:	4621      	mov	r1, r4
 801b000:	4605      	mov	r5, r0
 801b002:	f000 fc5f 	bl	801b8c4 <__mcmp>
 801b006:	2800      	cmp	r0, #0
 801b008:	9b04      	ldr	r3, [sp, #16]
 801b00a:	dc02      	bgt.n	801b012 <_dtoa_r+0x9b2>
 801b00c:	d1de      	bne.n	801afcc <_dtoa_r+0x96c>
 801b00e:	07da      	lsls	r2, r3, #31
 801b010:	d5dc      	bpl.n	801afcc <_dtoa_r+0x96c>
 801b012:	2b39      	cmp	r3, #57	; 0x39
 801b014:	d1d8      	bne.n	801afc8 <_dtoa_r+0x968>
 801b016:	9a02      	ldr	r2, [sp, #8]
 801b018:	2339      	movs	r3, #57	; 0x39
 801b01a:	7013      	strb	r3, [r2, #0]
 801b01c:	4643      	mov	r3, r8
 801b01e:	4698      	mov	r8, r3
 801b020:	3b01      	subs	r3, #1
 801b022:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801b026:	2a39      	cmp	r2, #57	; 0x39
 801b028:	d051      	beq.n	801b0ce <_dtoa_r+0xa6e>
 801b02a:	3201      	adds	r2, #1
 801b02c:	701a      	strb	r2, [r3, #0]
 801b02e:	e746      	b.n	801aebe <_dtoa_r+0x85e>
 801b030:	2a00      	cmp	r2, #0
 801b032:	dd03      	ble.n	801b03c <_dtoa_r+0x9dc>
 801b034:	2b39      	cmp	r3, #57	; 0x39
 801b036:	d0ee      	beq.n	801b016 <_dtoa_r+0x9b6>
 801b038:	3301      	adds	r3, #1
 801b03a:	e7c7      	b.n	801afcc <_dtoa_r+0x96c>
 801b03c:	9a04      	ldr	r2, [sp, #16]
 801b03e:	9908      	ldr	r1, [sp, #32]
 801b040:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b044:	428a      	cmp	r2, r1
 801b046:	d02b      	beq.n	801b0a0 <_dtoa_r+0xa40>
 801b048:	4629      	mov	r1, r5
 801b04a:	2300      	movs	r3, #0
 801b04c:	220a      	movs	r2, #10
 801b04e:	4630      	mov	r0, r6
 801b050:	f000 f9d4 	bl	801b3fc <__multadd>
 801b054:	45b9      	cmp	r9, r7
 801b056:	4605      	mov	r5, r0
 801b058:	f04f 0300 	mov.w	r3, #0
 801b05c:	f04f 020a 	mov.w	r2, #10
 801b060:	4649      	mov	r1, r9
 801b062:	4630      	mov	r0, r6
 801b064:	d107      	bne.n	801b076 <_dtoa_r+0xa16>
 801b066:	f000 f9c9 	bl	801b3fc <__multadd>
 801b06a:	4681      	mov	r9, r0
 801b06c:	4607      	mov	r7, r0
 801b06e:	9b04      	ldr	r3, [sp, #16]
 801b070:	3301      	adds	r3, #1
 801b072:	9304      	str	r3, [sp, #16]
 801b074:	e774      	b.n	801af60 <_dtoa_r+0x900>
 801b076:	f000 f9c1 	bl	801b3fc <__multadd>
 801b07a:	4639      	mov	r1, r7
 801b07c:	4681      	mov	r9, r0
 801b07e:	2300      	movs	r3, #0
 801b080:	220a      	movs	r2, #10
 801b082:	4630      	mov	r0, r6
 801b084:	f000 f9ba 	bl	801b3fc <__multadd>
 801b088:	4607      	mov	r7, r0
 801b08a:	e7f0      	b.n	801b06e <_dtoa_r+0xa0e>
 801b08c:	f1ba 0f00 	cmp.w	sl, #0
 801b090:	9a01      	ldr	r2, [sp, #4]
 801b092:	bfcc      	ite	gt
 801b094:	46d0      	movgt	r8, sl
 801b096:	f04f 0801 	movle.w	r8, #1
 801b09a:	4490      	add	r8, r2
 801b09c:	f04f 0900 	mov.w	r9, #0
 801b0a0:	4629      	mov	r1, r5
 801b0a2:	2201      	movs	r2, #1
 801b0a4:	4630      	mov	r0, r6
 801b0a6:	9302      	str	r3, [sp, #8]
 801b0a8:	f000 fba0 	bl	801b7ec <__lshift>
 801b0ac:	4621      	mov	r1, r4
 801b0ae:	4605      	mov	r5, r0
 801b0b0:	f000 fc08 	bl	801b8c4 <__mcmp>
 801b0b4:	2800      	cmp	r0, #0
 801b0b6:	dcb1      	bgt.n	801b01c <_dtoa_r+0x9bc>
 801b0b8:	d102      	bne.n	801b0c0 <_dtoa_r+0xa60>
 801b0ba:	9b02      	ldr	r3, [sp, #8]
 801b0bc:	07db      	lsls	r3, r3, #31
 801b0be:	d4ad      	bmi.n	801b01c <_dtoa_r+0x9bc>
 801b0c0:	4643      	mov	r3, r8
 801b0c2:	4698      	mov	r8, r3
 801b0c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b0c8:	2a30      	cmp	r2, #48	; 0x30
 801b0ca:	d0fa      	beq.n	801b0c2 <_dtoa_r+0xa62>
 801b0cc:	e6f7      	b.n	801aebe <_dtoa_r+0x85e>
 801b0ce:	9a01      	ldr	r2, [sp, #4]
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	d1a4      	bne.n	801b01e <_dtoa_r+0x9be>
 801b0d4:	f10b 0b01 	add.w	fp, fp, #1
 801b0d8:	2331      	movs	r3, #49	; 0x31
 801b0da:	e778      	b.n	801afce <_dtoa_r+0x96e>
 801b0dc:	4b14      	ldr	r3, [pc, #80]	; (801b130 <_dtoa_r+0xad0>)
 801b0de:	f7ff bb2a 	b.w	801a736 <_dtoa_r+0xd6>
 801b0e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	f47f ab05 	bne.w	801a6f4 <_dtoa_r+0x94>
 801b0ea:	4b12      	ldr	r3, [pc, #72]	; (801b134 <_dtoa_r+0xad4>)
 801b0ec:	f7ff bb23 	b.w	801a736 <_dtoa_r+0xd6>
 801b0f0:	f1ba 0f00 	cmp.w	sl, #0
 801b0f4:	dc03      	bgt.n	801b0fe <_dtoa_r+0xa9e>
 801b0f6:	9b06      	ldr	r3, [sp, #24]
 801b0f8:	2b02      	cmp	r3, #2
 801b0fa:	f73f aec8 	bgt.w	801ae8e <_dtoa_r+0x82e>
 801b0fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b102:	4621      	mov	r1, r4
 801b104:	4628      	mov	r0, r5
 801b106:	f7ff fa23 	bl	801a550 <quorem>
 801b10a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801b10e:	f808 3b01 	strb.w	r3, [r8], #1
 801b112:	9a01      	ldr	r2, [sp, #4]
 801b114:	eba8 0202 	sub.w	r2, r8, r2
 801b118:	4592      	cmp	sl, r2
 801b11a:	ddb7      	ble.n	801b08c <_dtoa_r+0xa2c>
 801b11c:	4629      	mov	r1, r5
 801b11e:	2300      	movs	r3, #0
 801b120:	220a      	movs	r2, #10
 801b122:	4630      	mov	r0, r6
 801b124:	f000 f96a 	bl	801b3fc <__multadd>
 801b128:	4605      	mov	r5, r0
 801b12a:	e7ea      	b.n	801b102 <_dtoa_r+0xaa2>
 801b12c:	0801e1ed 	.word	0x0801e1ed
 801b130:	0801e148 	.word	0x0801e148
 801b134:	0801e171 	.word	0x0801e171

0801b138 <_free_r>:
 801b138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b13a:	2900      	cmp	r1, #0
 801b13c:	d044      	beq.n	801b1c8 <_free_r+0x90>
 801b13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b142:	9001      	str	r0, [sp, #4]
 801b144:	2b00      	cmp	r3, #0
 801b146:	f1a1 0404 	sub.w	r4, r1, #4
 801b14a:	bfb8      	it	lt
 801b14c:	18e4      	addlt	r4, r4, r3
 801b14e:	f000 f8e7 	bl	801b320 <__malloc_lock>
 801b152:	4a1e      	ldr	r2, [pc, #120]	; (801b1cc <_free_r+0x94>)
 801b154:	9801      	ldr	r0, [sp, #4]
 801b156:	6813      	ldr	r3, [r2, #0]
 801b158:	b933      	cbnz	r3, 801b168 <_free_r+0x30>
 801b15a:	6063      	str	r3, [r4, #4]
 801b15c:	6014      	str	r4, [r2, #0]
 801b15e:	b003      	add	sp, #12
 801b160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b164:	f000 b8e2 	b.w	801b32c <__malloc_unlock>
 801b168:	42a3      	cmp	r3, r4
 801b16a:	d908      	bls.n	801b17e <_free_r+0x46>
 801b16c:	6825      	ldr	r5, [r4, #0]
 801b16e:	1961      	adds	r1, r4, r5
 801b170:	428b      	cmp	r3, r1
 801b172:	bf01      	itttt	eq
 801b174:	6819      	ldreq	r1, [r3, #0]
 801b176:	685b      	ldreq	r3, [r3, #4]
 801b178:	1949      	addeq	r1, r1, r5
 801b17a:	6021      	streq	r1, [r4, #0]
 801b17c:	e7ed      	b.n	801b15a <_free_r+0x22>
 801b17e:	461a      	mov	r2, r3
 801b180:	685b      	ldr	r3, [r3, #4]
 801b182:	b10b      	cbz	r3, 801b188 <_free_r+0x50>
 801b184:	42a3      	cmp	r3, r4
 801b186:	d9fa      	bls.n	801b17e <_free_r+0x46>
 801b188:	6811      	ldr	r1, [r2, #0]
 801b18a:	1855      	adds	r5, r2, r1
 801b18c:	42a5      	cmp	r5, r4
 801b18e:	d10b      	bne.n	801b1a8 <_free_r+0x70>
 801b190:	6824      	ldr	r4, [r4, #0]
 801b192:	4421      	add	r1, r4
 801b194:	1854      	adds	r4, r2, r1
 801b196:	42a3      	cmp	r3, r4
 801b198:	6011      	str	r1, [r2, #0]
 801b19a:	d1e0      	bne.n	801b15e <_free_r+0x26>
 801b19c:	681c      	ldr	r4, [r3, #0]
 801b19e:	685b      	ldr	r3, [r3, #4]
 801b1a0:	6053      	str	r3, [r2, #4]
 801b1a2:	440c      	add	r4, r1
 801b1a4:	6014      	str	r4, [r2, #0]
 801b1a6:	e7da      	b.n	801b15e <_free_r+0x26>
 801b1a8:	d902      	bls.n	801b1b0 <_free_r+0x78>
 801b1aa:	230c      	movs	r3, #12
 801b1ac:	6003      	str	r3, [r0, #0]
 801b1ae:	e7d6      	b.n	801b15e <_free_r+0x26>
 801b1b0:	6825      	ldr	r5, [r4, #0]
 801b1b2:	1961      	adds	r1, r4, r5
 801b1b4:	428b      	cmp	r3, r1
 801b1b6:	bf04      	itt	eq
 801b1b8:	6819      	ldreq	r1, [r3, #0]
 801b1ba:	685b      	ldreq	r3, [r3, #4]
 801b1bc:	6063      	str	r3, [r4, #4]
 801b1be:	bf04      	itt	eq
 801b1c0:	1949      	addeq	r1, r1, r5
 801b1c2:	6021      	streq	r1, [r4, #0]
 801b1c4:	6054      	str	r4, [r2, #4]
 801b1c6:	e7ca      	b.n	801b15e <_free_r+0x26>
 801b1c8:	b003      	add	sp, #12
 801b1ca:	bd30      	pop	{r4, r5, pc}
 801b1cc:	24003628 	.word	0x24003628

0801b1d0 <malloc>:
 801b1d0:	4b02      	ldr	r3, [pc, #8]	; (801b1dc <malloc+0xc>)
 801b1d2:	4601      	mov	r1, r0
 801b1d4:	6818      	ldr	r0, [r3, #0]
 801b1d6:	f000 b823 	b.w	801b220 <_malloc_r>
 801b1da:	bf00      	nop
 801b1dc:	24000158 	.word	0x24000158

0801b1e0 <sbrk_aligned>:
 801b1e0:	b570      	push	{r4, r5, r6, lr}
 801b1e2:	4e0e      	ldr	r6, [pc, #56]	; (801b21c <sbrk_aligned+0x3c>)
 801b1e4:	460c      	mov	r4, r1
 801b1e6:	6831      	ldr	r1, [r6, #0]
 801b1e8:	4605      	mov	r5, r0
 801b1ea:	b911      	cbnz	r1, 801b1f2 <sbrk_aligned+0x12>
 801b1ec:	f001 fdd6 	bl	801cd9c <_sbrk_r>
 801b1f0:	6030      	str	r0, [r6, #0]
 801b1f2:	4621      	mov	r1, r4
 801b1f4:	4628      	mov	r0, r5
 801b1f6:	f001 fdd1 	bl	801cd9c <_sbrk_r>
 801b1fa:	1c43      	adds	r3, r0, #1
 801b1fc:	d00a      	beq.n	801b214 <sbrk_aligned+0x34>
 801b1fe:	1cc4      	adds	r4, r0, #3
 801b200:	f024 0403 	bic.w	r4, r4, #3
 801b204:	42a0      	cmp	r0, r4
 801b206:	d007      	beq.n	801b218 <sbrk_aligned+0x38>
 801b208:	1a21      	subs	r1, r4, r0
 801b20a:	4628      	mov	r0, r5
 801b20c:	f001 fdc6 	bl	801cd9c <_sbrk_r>
 801b210:	3001      	adds	r0, #1
 801b212:	d101      	bne.n	801b218 <sbrk_aligned+0x38>
 801b214:	f04f 34ff 	mov.w	r4, #4294967295
 801b218:	4620      	mov	r0, r4
 801b21a:	bd70      	pop	{r4, r5, r6, pc}
 801b21c:	2400362c 	.word	0x2400362c

0801b220 <_malloc_r>:
 801b220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b224:	1ccd      	adds	r5, r1, #3
 801b226:	f025 0503 	bic.w	r5, r5, #3
 801b22a:	3508      	adds	r5, #8
 801b22c:	2d0c      	cmp	r5, #12
 801b22e:	bf38      	it	cc
 801b230:	250c      	movcc	r5, #12
 801b232:	2d00      	cmp	r5, #0
 801b234:	4607      	mov	r7, r0
 801b236:	db01      	blt.n	801b23c <_malloc_r+0x1c>
 801b238:	42a9      	cmp	r1, r5
 801b23a:	d905      	bls.n	801b248 <_malloc_r+0x28>
 801b23c:	230c      	movs	r3, #12
 801b23e:	603b      	str	r3, [r7, #0]
 801b240:	2600      	movs	r6, #0
 801b242:	4630      	mov	r0, r6
 801b244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b31c <_malloc_r+0xfc>
 801b24c:	f000 f868 	bl	801b320 <__malloc_lock>
 801b250:	f8d8 3000 	ldr.w	r3, [r8]
 801b254:	461c      	mov	r4, r3
 801b256:	bb5c      	cbnz	r4, 801b2b0 <_malloc_r+0x90>
 801b258:	4629      	mov	r1, r5
 801b25a:	4638      	mov	r0, r7
 801b25c:	f7ff ffc0 	bl	801b1e0 <sbrk_aligned>
 801b260:	1c43      	adds	r3, r0, #1
 801b262:	4604      	mov	r4, r0
 801b264:	d155      	bne.n	801b312 <_malloc_r+0xf2>
 801b266:	f8d8 4000 	ldr.w	r4, [r8]
 801b26a:	4626      	mov	r6, r4
 801b26c:	2e00      	cmp	r6, #0
 801b26e:	d145      	bne.n	801b2fc <_malloc_r+0xdc>
 801b270:	2c00      	cmp	r4, #0
 801b272:	d048      	beq.n	801b306 <_malloc_r+0xe6>
 801b274:	6823      	ldr	r3, [r4, #0]
 801b276:	4631      	mov	r1, r6
 801b278:	4638      	mov	r0, r7
 801b27a:	eb04 0903 	add.w	r9, r4, r3
 801b27e:	f001 fd8d 	bl	801cd9c <_sbrk_r>
 801b282:	4581      	cmp	r9, r0
 801b284:	d13f      	bne.n	801b306 <_malloc_r+0xe6>
 801b286:	6821      	ldr	r1, [r4, #0]
 801b288:	1a6d      	subs	r5, r5, r1
 801b28a:	4629      	mov	r1, r5
 801b28c:	4638      	mov	r0, r7
 801b28e:	f7ff ffa7 	bl	801b1e0 <sbrk_aligned>
 801b292:	3001      	adds	r0, #1
 801b294:	d037      	beq.n	801b306 <_malloc_r+0xe6>
 801b296:	6823      	ldr	r3, [r4, #0]
 801b298:	442b      	add	r3, r5
 801b29a:	6023      	str	r3, [r4, #0]
 801b29c:	f8d8 3000 	ldr.w	r3, [r8]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d038      	beq.n	801b316 <_malloc_r+0xf6>
 801b2a4:	685a      	ldr	r2, [r3, #4]
 801b2a6:	42a2      	cmp	r2, r4
 801b2a8:	d12b      	bne.n	801b302 <_malloc_r+0xe2>
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	605a      	str	r2, [r3, #4]
 801b2ae:	e00f      	b.n	801b2d0 <_malloc_r+0xb0>
 801b2b0:	6822      	ldr	r2, [r4, #0]
 801b2b2:	1b52      	subs	r2, r2, r5
 801b2b4:	d41f      	bmi.n	801b2f6 <_malloc_r+0xd6>
 801b2b6:	2a0b      	cmp	r2, #11
 801b2b8:	d917      	bls.n	801b2ea <_malloc_r+0xca>
 801b2ba:	1961      	adds	r1, r4, r5
 801b2bc:	42a3      	cmp	r3, r4
 801b2be:	6025      	str	r5, [r4, #0]
 801b2c0:	bf18      	it	ne
 801b2c2:	6059      	strne	r1, [r3, #4]
 801b2c4:	6863      	ldr	r3, [r4, #4]
 801b2c6:	bf08      	it	eq
 801b2c8:	f8c8 1000 	streq.w	r1, [r8]
 801b2cc:	5162      	str	r2, [r4, r5]
 801b2ce:	604b      	str	r3, [r1, #4]
 801b2d0:	4638      	mov	r0, r7
 801b2d2:	f104 060b 	add.w	r6, r4, #11
 801b2d6:	f000 f829 	bl	801b32c <__malloc_unlock>
 801b2da:	f026 0607 	bic.w	r6, r6, #7
 801b2de:	1d23      	adds	r3, r4, #4
 801b2e0:	1af2      	subs	r2, r6, r3
 801b2e2:	d0ae      	beq.n	801b242 <_malloc_r+0x22>
 801b2e4:	1b9b      	subs	r3, r3, r6
 801b2e6:	50a3      	str	r3, [r4, r2]
 801b2e8:	e7ab      	b.n	801b242 <_malloc_r+0x22>
 801b2ea:	42a3      	cmp	r3, r4
 801b2ec:	6862      	ldr	r2, [r4, #4]
 801b2ee:	d1dd      	bne.n	801b2ac <_malloc_r+0x8c>
 801b2f0:	f8c8 2000 	str.w	r2, [r8]
 801b2f4:	e7ec      	b.n	801b2d0 <_malloc_r+0xb0>
 801b2f6:	4623      	mov	r3, r4
 801b2f8:	6864      	ldr	r4, [r4, #4]
 801b2fa:	e7ac      	b.n	801b256 <_malloc_r+0x36>
 801b2fc:	4634      	mov	r4, r6
 801b2fe:	6876      	ldr	r6, [r6, #4]
 801b300:	e7b4      	b.n	801b26c <_malloc_r+0x4c>
 801b302:	4613      	mov	r3, r2
 801b304:	e7cc      	b.n	801b2a0 <_malloc_r+0x80>
 801b306:	230c      	movs	r3, #12
 801b308:	603b      	str	r3, [r7, #0]
 801b30a:	4638      	mov	r0, r7
 801b30c:	f000 f80e 	bl	801b32c <__malloc_unlock>
 801b310:	e797      	b.n	801b242 <_malloc_r+0x22>
 801b312:	6025      	str	r5, [r4, #0]
 801b314:	e7dc      	b.n	801b2d0 <_malloc_r+0xb0>
 801b316:	605b      	str	r3, [r3, #4]
 801b318:	deff      	udf	#255	; 0xff
 801b31a:	bf00      	nop
 801b31c:	24003628 	.word	0x24003628

0801b320 <__malloc_lock>:
 801b320:	4801      	ldr	r0, [pc, #4]	; (801b328 <__malloc_lock+0x8>)
 801b322:	f7ff b8fe 	b.w	801a522 <__retarget_lock_acquire_recursive>
 801b326:	bf00      	nop
 801b328:	24003624 	.word	0x24003624

0801b32c <__malloc_unlock>:
 801b32c:	4801      	ldr	r0, [pc, #4]	; (801b334 <__malloc_unlock+0x8>)
 801b32e:	f7ff b8f9 	b.w	801a524 <__retarget_lock_release_recursive>
 801b332:	bf00      	nop
 801b334:	24003624 	.word	0x24003624

0801b338 <_Balloc>:
 801b338:	b570      	push	{r4, r5, r6, lr}
 801b33a:	69c6      	ldr	r6, [r0, #28]
 801b33c:	4604      	mov	r4, r0
 801b33e:	460d      	mov	r5, r1
 801b340:	b976      	cbnz	r6, 801b360 <_Balloc+0x28>
 801b342:	2010      	movs	r0, #16
 801b344:	f7ff ff44 	bl	801b1d0 <malloc>
 801b348:	4602      	mov	r2, r0
 801b34a:	61e0      	str	r0, [r4, #28]
 801b34c:	b920      	cbnz	r0, 801b358 <_Balloc+0x20>
 801b34e:	4b18      	ldr	r3, [pc, #96]	; (801b3b0 <_Balloc+0x78>)
 801b350:	4818      	ldr	r0, [pc, #96]	; (801b3b4 <_Balloc+0x7c>)
 801b352:	216b      	movs	r1, #107	; 0x6b
 801b354:	f001 fd3c 	bl	801cdd0 <__assert_func>
 801b358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b35c:	6006      	str	r6, [r0, #0]
 801b35e:	60c6      	str	r6, [r0, #12]
 801b360:	69e6      	ldr	r6, [r4, #28]
 801b362:	68f3      	ldr	r3, [r6, #12]
 801b364:	b183      	cbz	r3, 801b388 <_Balloc+0x50>
 801b366:	69e3      	ldr	r3, [r4, #28]
 801b368:	68db      	ldr	r3, [r3, #12]
 801b36a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b36e:	b9b8      	cbnz	r0, 801b3a0 <_Balloc+0x68>
 801b370:	2101      	movs	r1, #1
 801b372:	fa01 f605 	lsl.w	r6, r1, r5
 801b376:	1d72      	adds	r2, r6, #5
 801b378:	0092      	lsls	r2, r2, #2
 801b37a:	4620      	mov	r0, r4
 801b37c:	f001 fd46 	bl	801ce0c <_calloc_r>
 801b380:	b160      	cbz	r0, 801b39c <_Balloc+0x64>
 801b382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b386:	e00e      	b.n	801b3a6 <_Balloc+0x6e>
 801b388:	2221      	movs	r2, #33	; 0x21
 801b38a:	2104      	movs	r1, #4
 801b38c:	4620      	mov	r0, r4
 801b38e:	f001 fd3d 	bl	801ce0c <_calloc_r>
 801b392:	69e3      	ldr	r3, [r4, #28]
 801b394:	60f0      	str	r0, [r6, #12]
 801b396:	68db      	ldr	r3, [r3, #12]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d1e4      	bne.n	801b366 <_Balloc+0x2e>
 801b39c:	2000      	movs	r0, #0
 801b39e:	bd70      	pop	{r4, r5, r6, pc}
 801b3a0:	6802      	ldr	r2, [r0, #0]
 801b3a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b3ac:	e7f7      	b.n	801b39e <_Balloc+0x66>
 801b3ae:	bf00      	nop
 801b3b0:	0801e17e 	.word	0x0801e17e
 801b3b4:	0801e1fe 	.word	0x0801e1fe

0801b3b8 <_Bfree>:
 801b3b8:	b570      	push	{r4, r5, r6, lr}
 801b3ba:	69c6      	ldr	r6, [r0, #28]
 801b3bc:	4605      	mov	r5, r0
 801b3be:	460c      	mov	r4, r1
 801b3c0:	b976      	cbnz	r6, 801b3e0 <_Bfree+0x28>
 801b3c2:	2010      	movs	r0, #16
 801b3c4:	f7ff ff04 	bl	801b1d0 <malloc>
 801b3c8:	4602      	mov	r2, r0
 801b3ca:	61e8      	str	r0, [r5, #28]
 801b3cc:	b920      	cbnz	r0, 801b3d8 <_Bfree+0x20>
 801b3ce:	4b09      	ldr	r3, [pc, #36]	; (801b3f4 <_Bfree+0x3c>)
 801b3d0:	4809      	ldr	r0, [pc, #36]	; (801b3f8 <_Bfree+0x40>)
 801b3d2:	218f      	movs	r1, #143	; 0x8f
 801b3d4:	f001 fcfc 	bl	801cdd0 <__assert_func>
 801b3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b3dc:	6006      	str	r6, [r0, #0]
 801b3de:	60c6      	str	r6, [r0, #12]
 801b3e0:	b13c      	cbz	r4, 801b3f2 <_Bfree+0x3a>
 801b3e2:	69eb      	ldr	r3, [r5, #28]
 801b3e4:	6862      	ldr	r2, [r4, #4]
 801b3e6:	68db      	ldr	r3, [r3, #12]
 801b3e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b3ec:	6021      	str	r1, [r4, #0]
 801b3ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b3f2:	bd70      	pop	{r4, r5, r6, pc}
 801b3f4:	0801e17e 	.word	0x0801e17e
 801b3f8:	0801e1fe 	.word	0x0801e1fe

0801b3fc <__multadd>:
 801b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b400:	690d      	ldr	r5, [r1, #16]
 801b402:	4607      	mov	r7, r0
 801b404:	460c      	mov	r4, r1
 801b406:	461e      	mov	r6, r3
 801b408:	f101 0c14 	add.w	ip, r1, #20
 801b40c:	2000      	movs	r0, #0
 801b40e:	f8dc 3000 	ldr.w	r3, [ip]
 801b412:	b299      	uxth	r1, r3
 801b414:	fb02 6101 	mla	r1, r2, r1, r6
 801b418:	0c1e      	lsrs	r6, r3, #16
 801b41a:	0c0b      	lsrs	r3, r1, #16
 801b41c:	fb02 3306 	mla	r3, r2, r6, r3
 801b420:	b289      	uxth	r1, r1
 801b422:	3001      	adds	r0, #1
 801b424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b428:	4285      	cmp	r5, r0
 801b42a:	f84c 1b04 	str.w	r1, [ip], #4
 801b42e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b432:	dcec      	bgt.n	801b40e <__multadd+0x12>
 801b434:	b30e      	cbz	r6, 801b47a <__multadd+0x7e>
 801b436:	68a3      	ldr	r3, [r4, #8]
 801b438:	42ab      	cmp	r3, r5
 801b43a:	dc19      	bgt.n	801b470 <__multadd+0x74>
 801b43c:	6861      	ldr	r1, [r4, #4]
 801b43e:	4638      	mov	r0, r7
 801b440:	3101      	adds	r1, #1
 801b442:	f7ff ff79 	bl	801b338 <_Balloc>
 801b446:	4680      	mov	r8, r0
 801b448:	b928      	cbnz	r0, 801b456 <__multadd+0x5a>
 801b44a:	4602      	mov	r2, r0
 801b44c:	4b0c      	ldr	r3, [pc, #48]	; (801b480 <__multadd+0x84>)
 801b44e:	480d      	ldr	r0, [pc, #52]	; (801b484 <__multadd+0x88>)
 801b450:	21ba      	movs	r1, #186	; 0xba
 801b452:	f001 fcbd 	bl	801cdd0 <__assert_func>
 801b456:	6922      	ldr	r2, [r4, #16]
 801b458:	3202      	adds	r2, #2
 801b45a:	f104 010c 	add.w	r1, r4, #12
 801b45e:	0092      	lsls	r2, r2, #2
 801b460:	300c      	adds	r0, #12
 801b462:	f7ff f860 	bl	801a526 <memcpy>
 801b466:	4621      	mov	r1, r4
 801b468:	4638      	mov	r0, r7
 801b46a:	f7ff ffa5 	bl	801b3b8 <_Bfree>
 801b46e:	4644      	mov	r4, r8
 801b470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b474:	3501      	adds	r5, #1
 801b476:	615e      	str	r6, [r3, #20]
 801b478:	6125      	str	r5, [r4, #16]
 801b47a:	4620      	mov	r0, r4
 801b47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b480:	0801e1ed 	.word	0x0801e1ed
 801b484:	0801e1fe 	.word	0x0801e1fe

0801b488 <__s2b>:
 801b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b48c:	460c      	mov	r4, r1
 801b48e:	4615      	mov	r5, r2
 801b490:	461f      	mov	r7, r3
 801b492:	2209      	movs	r2, #9
 801b494:	3308      	adds	r3, #8
 801b496:	4606      	mov	r6, r0
 801b498:	fb93 f3f2 	sdiv	r3, r3, r2
 801b49c:	2100      	movs	r1, #0
 801b49e:	2201      	movs	r2, #1
 801b4a0:	429a      	cmp	r2, r3
 801b4a2:	db09      	blt.n	801b4b8 <__s2b+0x30>
 801b4a4:	4630      	mov	r0, r6
 801b4a6:	f7ff ff47 	bl	801b338 <_Balloc>
 801b4aa:	b940      	cbnz	r0, 801b4be <__s2b+0x36>
 801b4ac:	4602      	mov	r2, r0
 801b4ae:	4b19      	ldr	r3, [pc, #100]	; (801b514 <__s2b+0x8c>)
 801b4b0:	4819      	ldr	r0, [pc, #100]	; (801b518 <__s2b+0x90>)
 801b4b2:	21d3      	movs	r1, #211	; 0xd3
 801b4b4:	f001 fc8c 	bl	801cdd0 <__assert_func>
 801b4b8:	0052      	lsls	r2, r2, #1
 801b4ba:	3101      	adds	r1, #1
 801b4bc:	e7f0      	b.n	801b4a0 <__s2b+0x18>
 801b4be:	9b08      	ldr	r3, [sp, #32]
 801b4c0:	6143      	str	r3, [r0, #20]
 801b4c2:	2d09      	cmp	r5, #9
 801b4c4:	f04f 0301 	mov.w	r3, #1
 801b4c8:	6103      	str	r3, [r0, #16]
 801b4ca:	dd16      	ble.n	801b4fa <__s2b+0x72>
 801b4cc:	f104 0909 	add.w	r9, r4, #9
 801b4d0:	46c8      	mov	r8, r9
 801b4d2:	442c      	add	r4, r5
 801b4d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b4d8:	4601      	mov	r1, r0
 801b4da:	3b30      	subs	r3, #48	; 0x30
 801b4dc:	220a      	movs	r2, #10
 801b4de:	4630      	mov	r0, r6
 801b4e0:	f7ff ff8c 	bl	801b3fc <__multadd>
 801b4e4:	45a0      	cmp	r8, r4
 801b4e6:	d1f5      	bne.n	801b4d4 <__s2b+0x4c>
 801b4e8:	f1a5 0408 	sub.w	r4, r5, #8
 801b4ec:	444c      	add	r4, r9
 801b4ee:	1b2d      	subs	r5, r5, r4
 801b4f0:	1963      	adds	r3, r4, r5
 801b4f2:	42bb      	cmp	r3, r7
 801b4f4:	db04      	blt.n	801b500 <__s2b+0x78>
 801b4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4fa:	340a      	adds	r4, #10
 801b4fc:	2509      	movs	r5, #9
 801b4fe:	e7f6      	b.n	801b4ee <__s2b+0x66>
 801b500:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b504:	4601      	mov	r1, r0
 801b506:	3b30      	subs	r3, #48	; 0x30
 801b508:	220a      	movs	r2, #10
 801b50a:	4630      	mov	r0, r6
 801b50c:	f7ff ff76 	bl	801b3fc <__multadd>
 801b510:	e7ee      	b.n	801b4f0 <__s2b+0x68>
 801b512:	bf00      	nop
 801b514:	0801e1ed 	.word	0x0801e1ed
 801b518:	0801e1fe 	.word	0x0801e1fe

0801b51c <__hi0bits>:
 801b51c:	0c03      	lsrs	r3, r0, #16
 801b51e:	041b      	lsls	r3, r3, #16
 801b520:	b9d3      	cbnz	r3, 801b558 <__hi0bits+0x3c>
 801b522:	0400      	lsls	r0, r0, #16
 801b524:	2310      	movs	r3, #16
 801b526:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b52a:	bf04      	itt	eq
 801b52c:	0200      	lsleq	r0, r0, #8
 801b52e:	3308      	addeq	r3, #8
 801b530:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b534:	bf04      	itt	eq
 801b536:	0100      	lsleq	r0, r0, #4
 801b538:	3304      	addeq	r3, #4
 801b53a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b53e:	bf04      	itt	eq
 801b540:	0080      	lsleq	r0, r0, #2
 801b542:	3302      	addeq	r3, #2
 801b544:	2800      	cmp	r0, #0
 801b546:	db05      	blt.n	801b554 <__hi0bits+0x38>
 801b548:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b54c:	f103 0301 	add.w	r3, r3, #1
 801b550:	bf08      	it	eq
 801b552:	2320      	moveq	r3, #32
 801b554:	4618      	mov	r0, r3
 801b556:	4770      	bx	lr
 801b558:	2300      	movs	r3, #0
 801b55a:	e7e4      	b.n	801b526 <__hi0bits+0xa>

0801b55c <__lo0bits>:
 801b55c:	6803      	ldr	r3, [r0, #0]
 801b55e:	f013 0207 	ands.w	r2, r3, #7
 801b562:	d00c      	beq.n	801b57e <__lo0bits+0x22>
 801b564:	07d9      	lsls	r1, r3, #31
 801b566:	d422      	bmi.n	801b5ae <__lo0bits+0x52>
 801b568:	079a      	lsls	r2, r3, #30
 801b56a:	bf49      	itett	mi
 801b56c:	085b      	lsrmi	r3, r3, #1
 801b56e:	089b      	lsrpl	r3, r3, #2
 801b570:	6003      	strmi	r3, [r0, #0]
 801b572:	2201      	movmi	r2, #1
 801b574:	bf5c      	itt	pl
 801b576:	6003      	strpl	r3, [r0, #0]
 801b578:	2202      	movpl	r2, #2
 801b57a:	4610      	mov	r0, r2
 801b57c:	4770      	bx	lr
 801b57e:	b299      	uxth	r1, r3
 801b580:	b909      	cbnz	r1, 801b586 <__lo0bits+0x2a>
 801b582:	0c1b      	lsrs	r3, r3, #16
 801b584:	2210      	movs	r2, #16
 801b586:	b2d9      	uxtb	r1, r3
 801b588:	b909      	cbnz	r1, 801b58e <__lo0bits+0x32>
 801b58a:	3208      	adds	r2, #8
 801b58c:	0a1b      	lsrs	r3, r3, #8
 801b58e:	0719      	lsls	r1, r3, #28
 801b590:	bf04      	itt	eq
 801b592:	091b      	lsreq	r3, r3, #4
 801b594:	3204      	addeq	r2, #4
 801b596:	0799      	lsls	r1, r3, #30
 801b598:	bf04      	itt	eq
 801b59a:	089b      	lsreq	r3, r3, #2
 801b59c:	3202      	addeq	r2, #2
 801b59e:	07d9      	lsls	r1, r3, #31
 801b5a0:	d403      	bmi.n	801b5aa <__lo0bits+0x4e>
 801b5a2:	085b      	lsrs	r3, r3, #1
 801b5a4:	f102 0201 	add.w	r2, r2, #1
 801b5a8:	d003      	beq.n	801b5b2 <__lo0bits+0x56>
 801b5aa:	6003      	str	r3, [r0, #0]
 801b5ac:	e7e5      	b.n	801b57a <__lo0bits+0x1e>
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	e7e3      	b.n	801b57a <__lo0bits+0x1e>
 801b5b2:	2220      	movs	r2, #32
 801b5b4:	e7e1      	b.n	801b57a <__lo0bits+0x1e>
	...

0801b5b8 <__i2b>:
 801b5b8:	b510      	push	{r4, lr}
 801b5ba:	460c      	mov	r4, r1
 801b5bc:	2101      	movs	r1, #1
 801b5be:	f7ff febb 	bl	801b338 <_Balloc>
 801b5c2:	4602      	mov	r2, r0
 801b5c4:	b928      	cbnz	r0, 801b5d2 <__i2b+0x1a>
 801b5c6:	4b05      	ldr	r3, [pc, #20]	; (801b5dc <__i2b+0x24>)
 801b5c8:	4805      	ldr	r0, [pc, #20]	; (801b5e0 <__i2b+0x28>)
 801b5ca:	f240 1145 	movw	r1, #325	; 0x145
 801b5ce:	f001 fbff 	bl	801cdd0 <__assert_func>
 801b5d2:	2301      	movs	r3, #1
 801b5d4:	6144      	str	r4, [r0, #20]
 801b5d6:	6103      	str	r3, [r0, #16]
 801b5d8:	bd10      	pop	{r4, pc}
 801b5da:	bf00      	nop
 801b5dc:	0801e1ed 	.word	0x0801e1ed
 801b5e0:	0801e1fe 	.word	0x0801e1fe

0801b5e4 <__multiply>:
 801b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e8:	4691      	mov	r9, r2
 801b5ea:	690a      	ldr	r2, [r1, #16]
 801b5ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b5f0:	429a      	cmp	r2, r3
 801b5f2:	bfb8      	it	lt
 801b5f4:	460b      	movlt	r3, r1
 801b5f6:	460c      	mov	r4, r1
 801b5f8:	bfbc      	itt	lt
 801b5fa:	464c      	movlt	r4, r9
 801b5fc:	4699      	movlt	r9, r3
 801b5fe:	6927      	ldr	r7, [r4, #16]
 801b600:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b604:	68a3      	ldr	r3, [r4, #8]
 801b606:	6861      	ldr	r1, [r4, #4]
 801b608:	eb07 060a 	add.w	r6, r7, sl
 801b60c:	42b3      	cmp	r3, r6
 801b60e:	b085      	sub	sp, #20
 801b610:	bfb8      	it	lt
 801b612:	3101      	addlt	r1, #1
 801b614:	f7ff fe90 	bl	801b338 <_Balloc>
 801b618:	b930      	cbnz	r0, 801b628 <__multiply+0x44>
 801b61a:	4602      	mov	r2, r0
 801b61c:	4b44      	ldr	r3, [pc, #272]	; (801b730 <__multiply+0x14c>)
 801b61e:	4845      	ldr	r0, [pc, #276]	; (801b734 <__multiply+0x150>)
 801b620:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b624:	f001 fbd4 	bl	801cdd0 <__assert_func>
 801b628:	f100 0514 	add.w	r5, r0, #20
 801b62c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b630:	462b      	mov	r3, r5
 801b632:	2200      	movs	r2, #0
 801b634:	4543      	cmp	r3, r8
 801b636:	d321      	bcc.n	801b67c <__multiply+0x98>
 801b638:	f104 0314 	add.w	r3, r4, #20
 801b63c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b640:	f109 0314 	add.w	r3, r9, #20
 801b644:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b648:	9202      	str	r2, [sp, #8]
 801b64a:	1b3a      	subs	r2, r7, r4
 801b64c:	3a15      	subs	r2, #21
 801b64e:	f022 0203 	bic.w	r2, r2, #3
 801b652:	3204      	adds	r2, #4
 801b654:	f104 0115 	add.w	r1, r4, #21
 801b658:	428f      	cmp	r7, r1
 801b65a:	bf38      	it	cc
 801b65c:	2204      	movcc	r2, #4
 801b65e:	9201      	str	r2, [sp, #4]
 801b660:	9a02      	ldr	r2, [sp, #8]
 801b662:	9303      	str	r3, [sp, #12]
 801b664:	429a      	cmp	r2, r3
 801b666:	d80c      	bhi.n	801b682 <__multiply+0x9e>
 801b668:	2e00      	cmp	r6, #0
 801b66a:	dd03      	ble.n	801b674 <__multiply+0x90>
 801b66c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b670:	2b00      	cmp	r3, #0
 801b672:	d05b      	beq.n	801b72c <__multiply+0x148>
 801b674:	6106      	str	r6, [r0, #16]
 801b676:	b005      	add	sp, #20
 801b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b67c:	f843 2b04 	str.w	r2, [r3], #4
 801b680:	e7d8      	b.n	801b634 <__multiply+0x50>
 801b682:	f8b3 a000 	ldrh.w	sl, [r3]
 801b686:	f1ba 0f00 	cmp.w	sl, #0
 801b68a:	d024      	beq.n	801b6d6 <__multiply+0xf2>
 801b68c:	f104 0e14 	add.w	lr, r4, #20
 801b690:	46a9      	mov	r9, r5
 801b692:	f04f 0c00 	mov.w	ip, #0
 801b696:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b69a:	f8d9 1000 	ldr.w	r1, [r9]
 801b69e:	fa1f fb82 	uxth.w	fp, r2
 801b6a2:	b289      	uxth	r1, r1
 801b6a4:	fb0a 110b 	mla	r1, sl, fp, r1
 801b6a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b6ac:	f8d9 2000 	ldr.w	r2, [r9]
 801b6b0:	4461      	add	r1, ip
 801b6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b6b6:	fb0a c20b 	mla	r2, sl, fp, ip
 801b6ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b6be:	b289      	uxth	r1, r1
 801b6c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b6c4:	4577      	cmp	r7, lr
 801b6c6:	f849 1b04 	str.w	r1, [r9], #4
 801b6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b6ce:	d8e2      	bhi.n	801b696 <__multiply+0xb2>
 801b6d0:	9a01      	ldr	r2, [sp, #4]
 801b6d2:	f845 c002 	str.w	ip, [r5, r2]
 801b6d6:	9a03      	ldr	r2, [sp, #12]
 801b6d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b6dc:	3304      	adds	r3, #4
 801b6de:	f1b9 0f00 	cmp.w	r9, #0
 801b6e2:	d021      	beq.n	801b728 <__multiply+0x144>
 801b6e4:	6829      	ldr	r1, [r5, #0]
 801b6e6:	f104 0c14 	add.w	ip, r4, #20
 801b6ea:	46ae      	mov	lr, r5
 801b6ec:	f04f 0a00 	mov.w	sl, #0
 801b6f0:	f8bc b000 	ldrh.w	fp, [ip]
 801b6f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b6f8:	fb09 220b 	mla	r2, r9, fp, r2
 801b6fc:	4452      	add	r2, sl
 801b6fe:	b289      	uxth	r1, r1
 801b700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b704:	f84e 1b04 	str.w	r1, [lr], #4
 801b708:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b70c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b710:	f8be 1000 	ldrh.w	r1, [lr]
 801b714:	fb09 110a 	mla	r1, r9, sl, r1
 801b718:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b71c:	4567      	cmp	r7, ip
 801b71e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b722:	d8e5      	bhi.n	801b6f0 <__multiply+0x10c>
 801b724:	9a01      	ldr	r2, [sp, #4]
 801b726:	50a9      	str	r1, [r5, r2]
 801b728:	3504      	adds	r5, #4
 801b72a:	e799      	b.n	801b660 <__multiply+0x7c>
 801b72c:	3e01      	subs	r6, #1
 801b72e:	e79b      	b.n	801b668 <__multiply+0x84>
 801b730:	0801e1ed 	.word	0x0801e1ed
 801b734:	0801e1fe 	.word	0x0801e1fe

0801b738 <__pow5mult>:
 801b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b73c:	4615      	mov	r5, r2
 801b73e:	f012 0203 	ands.w	r2, r2, #3
 801b742:	4606      	mov	r6, r0
 801b744:	460f      	mov	r7, r1
 801b746:	d007      	beq.n	801b758 <__pow5mult+0x20>
 801b748:	4c25      	ldr	r4, [pc, #148]	; (801b7e0 <__pow5mult+0xa8>)
 801b74a:	3a01      	subs	r2, #1
 801b74c:	2300      	movs	r3, #0
 801b74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b752:	f7ff fe53 	bl	801b3fc <__multadd>
 801b756:	4607      	mov	r7, r0
 801b758:	10ad      	asrs	r5, r5, #2
 801b75a:	d03d      	beq.n	801b7d8 <__pow5mult+0xa0>
 801b75c:	69f4      	ldr	r4, [r6, #28]
 801b75e:	b97c      	cbnz	r4, 801b780 <__pow5mult+0x48>
 801b760:	2010      	movs	r0, #16
 801b762:	f7ff fd35 	bl	801b1d0 <malloc>
 801b766:	4602      	mov	r2, r0
 801b768:	61f0      	str	r0, [r6, #28]
 801b76a:	b928      	cbnz	r0, 801b778 <__pow5mult+0x40>
 801b76c:	4b1d      	ldr	r3, [pc, #116]	; (801b7e4 <__pow5mult+0xac>)
 801b76e:	481e      	ldr	r0, [pc, #120]	; (801b7e8 <__pow5mult+0xb0>)
 801b770:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b774:	f001 fb2c 	bl	801cdd0 <__assert_func>
 801b778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b77c:	6004      	str	r4, [r0, #0]
 801b77e:	60c4      	str	r4, [r0, #12]
 801b780:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b788:	b94c      	cbnz	r4, 801b79e <__pow5mult+0x66>
 801b78a:	f240 2171 	movw	r1, #625	; 0x271
 801b78e:	4630      	mov	r0, r6
 801b790:	f7ff ff12 	bl	801b5b8 <__i2b>
 801b794:	2300      	movs	r3, #0
 801b796:	f8c8 0008 	str.w	r0, [r8, #8]
 801b79a:	4604      	mov	r4, r0
 801b79c:	6003      	str	r3, [r0, #0]
 801b79e:	f04f 0900 	mov.w	r9, #0
 801b7a2:	07eb      	lsls	r3, r5, #31
 801b7a4:	d50a      	bpl.n	801b7bc <__pow5mult+0x84>
 801b7a6:	4639      	mov	r1, r7
 801b7a8:	4622      	mov	r2, r4
 801b7aa:	4630      	mov	r0, r6
 801b7ac:	f7ff ff1a 	bl	801b5e4 <__multiply>
 801b7b0:	4639      	mov	r1, r7
 801b7b2:	4680      	mov	r8, r0
 801b7b4:	4630      	mov	r0, r6
 801b7b6:	f7ff fdff 	bl	801b3b8 <_Bfree>
 801b7ba:	4647      	mov	r7, r8
 801b7bc:	106d      	asrs	r5, r5, #1
 801b7be:	d00b      	beq.n	801b7d8 <__pow5mult+0xa0>
 801b7c0:	6820      	ldr	r0, [r4, #0]
 801b7c2:	b938      	cbnz	r0, 801b7d4 <__pow5mult+0x9c>
 801b7c4:	4622      	mov	r2, r4
 801b7c6:	4621      	mov	r1, r4
 801b7c8:	4630      	mov	r0, r6
 801b7ca:	f7ff ff0b 	bl	801b5e4 <__multiply>
 801b7ce:	6020      	str	r0, [r4, #0]
 801b7d0:	f8c0 9000 	str.w	r9, [r0]
 801b7d4:	4604      	mov	r4, r0
 801b7d6:	e7e4      	b.n	801b7a2 <__pow5mult+0x6a>
 801b7d8:	4638      	mov	r0, r7
 801b7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7de:	bf00      	nop
 801b7e0:	0801e348 	.word	0x0801e348
 801b7e4:	0801e17e 	.word	0x0801e17e
 801b7e8:	0801e1fe 	.word	0x0801e1fe

0801b7ec <__lshift>:
 801b7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7f0:	460c      	mov	r4, r1
 801b7f2:	6849      	ldr	r1, [r1, #4]
 801b7f4:	6923      	ldr	r3, [r4, #16]
 801b7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b7fa:	68a3      	ldr	r3, [r4, #8]
 801b7fc:	4607      	mov	r7, r0
 801b7fe:	4691      	mov	r9, r2
 801b800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b804:	f108 0601 	add.w	r6, r8, #1
 801b808:	42b3      	cmp	r3, r6
 801b80a:	db0b      	blt.n	801b824 <__lshift+0x38>
 801b80c:	4638      	mov	r0, r7
 801b80e:	f7ff fd93 	bl	801b338 <_Balloc>
 801b812:	4605      	mov	r5, r0
 801b814:	b948      	cbnz	r0, 801b82a <__lshift+0x3e>
 801b816:	4602      	mov	r2, r0
 801b818:	4b28      	ldr	r3, [pc, #160]	; (801b8bc <__lshift+0xd0>)
 801b81a:	4829      	ldr	r0, [pc, #164]	; (801b8c0 <__lshift+0xd4>)
 801b81c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b820:	f001 fad6 	bl	801cdd0 <__assert_func>
 801b824:	3101      	adds	r1, #1
 801b826:	005b      	lsls	r3, r3, #1
 801b828:	e7ee      	b.n	801b808 <__lshift+0x1c>
 801b82a:	2300      	movs	r3, #0
 801b82c:	f100 0114 	add.w	r1, r0, #20
 801b830:	f100 0210 	add.w	r2, r0, #16
 801b834:	4618      	mov	r0, r3
 801b836:	4553      	cmp	r3, sl
 801b838:	db33      	blt.n	801b8a2 <__lshift+0xb6>
 801b83a:	6920      	ldr	r0, [r4, #16]
 801b83c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b840:	f104 0314 	add.w	r3, r4, #20
 801b844:	f019 091f 	ands.w	r9, r9, #31
 801b848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b84c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b850:	d02b      	beq.n	801b8aa <__lshift+0xbe>
 801b852:	f1c9 0e20 	rsb	lr, r9, #32
 801b856:	468a      	mov	sl, r1
 801b858:	2200      	movs	r2, #0
 801b85a:	6818      	ldr	r0, [r3, #0]
 801b85c:	fa00 f009 	lsl.w	r0, r0, r9
 801b860:	4310      	orrs	r0, r2
 801b862:	f84a 0b04 	str.w	r0, [sl], #4
 801b866:	f853 2b04 	ldr.w	r2, [r3], #4
 801b86a:	459c      	cmp	ip, r3
 801b86c:	fa22 f20e 	lsr.w	r2, r2, lr
 801b870:	d8f3      	bhi.n	801b85a <__lshift+0x6e>
 801b872:	ebac 0304 	sub.w	r3, ip, r4
 801b876:	3b15      	subs	r3, #21
 801b878:	f023 0303 	bic.w	r3, r3, #3
 801b87c:	3304      	adds	r3, #4
 801b87e:	f104 0015 	add.w	r0, r4, #21
 801b882:	4584      	cmp	ip, r0
 801b884:	bf38      	it	cc
 801b886:	2304      	movcc	r3, #4
 801b888:	50ca      	str	r2, [r1, r3]
 801b88a:	b10a      	cbz	r2, 801b890 <__lshift+0xa4>
 801b88c:	f108 0602 	add.w	r6, r8, #2
 801b890:	3e01      	subs	r6, #1
 801b892:	4638      	mov	r0, r7
 801b894:	612e      	str	r6, [r5, #16]
 801b896:	4621      	mov	r1, r4
 801b898:	f7ff fd8e 	bl	801b3b8 <_Bfree>
 801b89c:	4628      	mov	r0, r5
 801b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8a2:	f842 0f04 	str.w	r0, [r2, #4]!
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	e7c5      	b.n	801b836 <__lshift+0x4a>
 801b8aa:	3904      	subs	r1, #4
 801b8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8b0:	f841 2f04 	str.w	r2, [r1, #4]!
 801b8b4:	459c      	cmp	ip, r3
 801b8b6:	d8f9      	bhi.n	801b8ac <__lshift+0xc0>
 801b8b8:	e7ea      	b.n	801b890 <__lshift+0xa4>
 801b8ba:	bf00      	nop
 801b8bc:	0801e1ed 	.word	0x0801e1ed
 801b8c0:	0801e1fe 	.word	0x0801e1fe

0801b8c4 <__mcmp>:
 801b8c4:	b530      	push	{r4, r5, lr}
 801b8c6:	6902      	ldr	r2, [r0, #16]
 801b8c8:	690c      	ldr	r4, [r1, #16]
 801b8ca:	1b12      	subs	r2, r2, r4
 801b8cc:	d10e      	bne.n	801b8ec <__mcmp+0x28>
 801b8ce:	f100 0314 	add.w	r3, r0, #20
 801b8d2:	3114      	adds	r1, #20
 801b8d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b8d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b8dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b8e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b8e4:	42a5      	cmp	r5, r4
 801b8e6:	d003      	beq.n	801b8f0 <__mcmp+0x2c>
 801b8e8:	d305      	bcc.n	801b8f6 <__mcmp+0x32>
 801b8ea:	2201      	movs	r2, #1
 801b8ec:	4610      	mov	r0, r2
 801b8ee:	bd30      	pop	{r4, r5, pc}
 801b8f0:	4283      	cmp	r3, r0
 801b8f2:	d3f3      	bcc.n	801b8dc <__mcmp+0x18>
 801b8f4:	e7fa      	b.n	801b8ec <__mcmp+0x28>
 801b8f6:	f04f 32ff 	mov.w	r2, #4294967295
 801b8fa:	e7f7      	b.n	801b8ec <__mcmp+0x28>

0801b8fc <__mdiff>:
 801b8fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b900:	460c      	mov	r4, r1
 801b902:	4606      	mov	r6, r0
 801b904:	4611      	mov	r1, r2
 801b906:	4620      	mov	r0, r4
 801b908:	4690      	mov	r8, r2
 801b90a:	f7ff ffdb 	bl	801b8c4 <__mcmp>
 801b90e:	1e05      	subs	r5, r0, #0
 801b910:	d110      	bne.n	801b934 <__mdiff+0x38>
 801b912:	4629      	mov	r1, r5
 801b914:	4630      	mov	r0, r6
 801b916:	f7ff fd0f 	bl	801b338 <_Balloc>
 801b91a:	b930      	cbnz	r0, 801b92a <__mdiff+0x2e>
 801b91c:	4b3a      	ldr	r3, [pc, #232]	; (801ba08 <__mdiff+0x10c>)
 801b91e:	4602      	mov	r2, r0
 801b920:	f240 2137 	movw	r1, #567	; 0x237
 801b924:	4839      	ldr	r0, [pc, #228]	; (801ba0c <__mdiff+0x110>)
 801b926:	f001 fa53 	bl	801cdd0 <__assert_func>
 801b92a:	2301      	movs	r3, #1
 801b92c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b934:	bfa4      	itt	ge
 801b936:	4643      	movge	r3, r8
 801b938:	46a0      	movge	r8, r4
 801b93a:	4630      	mov	r0, r6
 801b93c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b940:	bfa6      	itte	ge
 801b942:	461c      	movge	r4, r3
 801b944:	2500      	movge	r5, #0
 801b946:	2501      	movlt	r5, #1
 801b948:	f7ff fcf6 	bl	801b338 <_Balloc>
 801b94c:	b920      	cbnz	r0, 801b958 <__mdiff+0x5c>
 801b94e:	4b2e      	ldr	r3, [pc, #184]	; (801ba08 <__mdiff+0x10c>)
 801b950:	4602      	mov	r2, r0
 801b952:	f240 2145 	movw	r1, #581	; 0x245
 801b956:	e7e5      	b.n	801b924 <__mdiff+0x28>
 801b958:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b95c:	6926      	ldr	r6, [r4, #16]
 801b95e:	60c5      	str	r5, [r0, #12]
 801b960:	f104 0914 	add.w	r9, r4, #20
 801b964:	f108 0514 	add.w	r5, r8, #20
 801b968:	f100 0e14 	add.w	lr, r0, #20
 801b96c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b970:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b974:	f108 0210 	add.w	r2, r8, #16
 801b978:	46f2      	mov	sl, lr
 801b97a:	2100      	movs	r1, #0
 801b97c:	f859 3b04 	ldr.w	r3, [r9], #4
 801b980:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b984:	fa11 f88b 	uxtah	r8, r1, fp
 801b988:	b299      	uxth	r1, r3
 801b98a:	0c1b      	lsrs	r3, r3, #16
 801b98c:	eba8 0801 	sub.w	r8, r8, r1
 801b990:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b994:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b998:	fa1f f888 	uxth.w	r8, r8
 801b99c:	1419      	asrs	r1, r3, #16
 801b99e:	454e      	cmp	r6, r9
 801b9a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b9a4:	f84a 3b04 	str.w	r3, [sl], #4
 801b9a8:	d8e8      	bhi.n	801b97c <__mdiff+0x80>
 801b9aa:	1b33      	subs	r3, r6, r4
 801b9ac:	3b15      	subs	r3, #21
 801b9ae:	f023 0303 	bic.w	r3, r3, #3
 801b9b2:	3304      	adds	r3, #4
 801b9b4:	3415      	adds	r4, #21
 801b9b6:	42a6      	cmp	r6, r4
 801b9b8:	bf38      	it	cc
 801b9ba:	2304      	movcc	r3, #4
 801b9bc:	441d      	add	r5, r3
 801b9be:	4473      	add	r3, lr
 801b9c0:	469e      	mov	lr, r3
 801b9c2:	462e      	mov	r6, r5
 801b9c4:	4566      	cmp	r6, ip
 801b9c6:	d30e      	bcc.n	801b9e6 <__mdiff+0xea>
 801b9c8:	f10c 0203 	add.w	r2, ip, #3
 801b9cc:	1b52      	subs	r2, r2, r5
 801b9ce:	f022 0203 	bic.w	r2, r2, #3
 801b9d2:	3d03      	subs	r5, #3
 801b9d4:	45ac      	cmp	ip, r5
 801b9d6:	bf38      	it	cc
 801b9d8:	2200      	movcc	r2, #0
 801b9da:	4413      	add	r3, r2
 801b9dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b9e0:	b17a      	cbz	r2, 801ba02 <__mdiff+0x106>
 801b9e2:	6107      	str	r7, [r0, #16]
 801b9e4:	e7a4      	b.n	801b930 <__mdiff+0x34>
 801b9e6:	f856 8b04 	ldr.w	r8, [r6], #4
 801b9ea:	fa11 f288 	uxtah	r2, r1, r8
 801b9ee:	1414      	asrs	r4, r2, #16
 801b9f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b9f4:	b292      	uxth	r2, r2
 801b9f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b9fa:	f84e 2b04 	str.w	r2, [lr], #4
 801b9fe:	1421      	asrs	r1, r4, #16
 801ba00:	e7e0      	b.n	801b9c4 <__mdiff+0xc8>
 801ba02:	3f01      	subs	r7, #1
 801ba04:	e7ea      	b.n	801b9dc <__mdiff+0xe0>
 801ba06:	bf00      	nop
 801ba08:	0801e1ed 	.word	0x0801e1ed
 801ba0c:	0801e1fe 	.word	0x0801e1fe

0801ba10 <__ulp>:
 801ba10:	b082      	sub	sp, #8
 801ba12:	ed8d 0b00 	vstr	d0, [sp]
 801ba16:	9a01      	ldr	r2, [sp, #4]
 801ba18:	4b0f      	ldr	r3, [pc, #60]	; (801ba58 <__ulp+0x48>)
 801ba1a:	4013      	ands	r3, r2
 801ba1c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	dc08      	bgt.n	801ba36 <__ulp+0x26>
 801ba24:	425b      	negs	r3, r3
 801ba26:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801ba2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ba2e:	da04      	bge.n	801ba3a <__ulp+0x2a>
 801ba30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801ba34:	4113      	asrs	r3, r2
 801ba36:	2200      	movs	r2, #0
 801ba38:	e008      	b.n	801ba4c <__ulp+0x3c>
 801ba3a:	f1a2 0314 	sub.w	r3, r2, #20
 801ba3e:	2b1e      	cmp	r3, #30
 801ba40:	bfda      	itte	le
 801ba42:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801ba46:	40da      	lsrle	r2, r3
 801ba48:	2201      	movgt	r2, #1
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	4619      	mov	r1, r3
 801ba4e:	4610      	mov	r0, r2
 801ba50:	ec41 0b10 	vmov	d0, r0, r1
 801ba54:	b002      	add	sp, #8
 801ba56:	4770      	bx	lr
 801ba58:	7ff00000 	.word	0x7ff00000

0801ba5c <__b2d>:
 801ba5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba60:	6906      	ldr	r6, [r0, #16]
 801ba62:	f100 0814 	add.w	r8, r0, #20
 801ba66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ba6a:	1f37      	subs	r7, r6, #4
 801ba6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ba70:	4610      	mov	r0, r2
 801ba72:	f7ff fd53 	bl	801b51c <__hi0bits>
 801ba76:	f1c0 0320 	rsb	r3, r0, #32
 801ba7a:	280a      	cmp	r0, #10
 801ba7c:	600b      	str	r3, [r1, #0]
 801ba7e:	491b      	ldr	r1, [pc, #108]	; (801baec <__b2d+0x90>)
 801ba80:	dc15      	bgt.n	801baae <__b2d+0x52>
 801ba82:	f1c0 0c0b 	rsb	ip, r0, #11
 801ba86:	fa22 f30c 	lsr.w	r3, r2, ip
 801ba8a:	45b8      	cmp	r8, r7
 801ba8c:	ea43 0501 	orr.w	r5, r3, r1
 801ba90:	bf34      	ite	cc
 801ba92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ba96:	2300      	movcs	r3, #0
 801ba98:	3015      	adds	r0, #21
 801ba9a:	fa02 f000 	lsl.w	r0, r2, r0
 801ba9e:	fa23 f30c 	lsr.w	r3, r3, ip
 801baa2:	4303      	orrs	r3, r0
 801baa4:	461c      	mov	r4, r3
 801baa6:	ec45 4b10 	vmov	d0, r4, r5
 801baaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baae:	45b8      	cmp	r8, r7
 801bab0:	bf3a      	itte	cc
 801bab2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bab6:	f1a6 0708 	subcc.w	r7, r6, #8
 801baba:	2300      	movcs	r3, #0
 801babc:	380b      	subs	r0, #11
 801babe:	d012      	beq.n	801bae6 <__b2d+0x8a>
 801bac0:	f1c0 0120 	rsb	r1, r0, #32
 801bac4:	fa23 f401 	lsr.w	r4, r3, r1
 801bac8:	4082      	lsls	r2, r0
 801baca:	4322      	orrs	r2, r4
 801bacc:	4547      	cmp	r7, r8
 801bace:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801bad2:	bf8c      	ite	hi
 801bad4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bad8:	2200      	movls	r2, #0
 801bada:	4083      	lsls	r3, r0
 801badc:	40ca      	lsrs	r2, r1
 801bade:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bae2:	4313      	orrs	r3, r2
 801bae4:	e7de      	b.n	801baa4 <__b2d+0x48>
 801bae6:	ea42 0501 	orr.w	r5, r2, r1
 801baea:	e7db      	b.n	801baa4 <__b2d+0x48>
 801baec:	3ff00000 	.word	0x3ff00000

0801baf0 <__d2b>:
 801baf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801baf4:	460f      	mov	r7, r1
 801baf6:	2101      	movs	r1, #1
 801baf8:	ec59 8b10 	vmov	r8, r9, d0
 801bafc:	4616      	mov	r6, r2
 801bafe:	f7ff fc1b 	bl	801b338 <_Balloc>
 801bb02:	4604      	mov	r4, r0
 801bb04:	b930      	cbnz	r0, 801bb14 <__d2b+0x24>
 801bb06:	4602      	mov	r2, r0
 801bb08:	4b24      	ldr	r3, [pc, #144]	; (801bb9c <__d2b+0xac>)
 801bb0a:	4825      	ldr	r0, [pc, #148]	; (801bba0 <__d2b+0xb0>)
 801bb0c:	f240 310f 	movw	r1, #783	; 0x30f
 801bb10:	f001 f95e 	bl	801cdd0 <__assert_func>
 801bb14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bb18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bb1c:	bb2d      	cbnz	r5, 801bb6a <__d2b+0x7a>
 801bb1e:	9301      	str	r3, [sp, #4]
 801bb20:	f1b8 0300 	subs.w	r3, r8, #0
 801bb24:	d026      	beq.n	801bb74 <__d2b+0x84>
 801bb26:	4668      	mov	r0, sp
 801bb28:	9300      	str	r3, [sp, #0]
 801bb2a:	f7ff fd17 	bl	801b55c <__lo0bits>
 801bb2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bb32:	b1e8      	cbz	r0, 801bb70 <__d2b+0x80>
 801bb34:	f1c0 0320 	rsb	r3, r0, #32
 801bb38:	fa02 f303 	lsl.w	r3, r2, r3
 801bb3c:	430b      	orrs	r3, r1
 801bb3e:	40c2      	lsrs	r2, r0
 801bb40:	6163      	str	r3, [r4, #20]
 801bb42:	9201      	str	r2, [sp, #4]
 801bb44:	9b01      	ldr	r3, [sp, #4]
 801bb46:	61a3      	str	r3, [r4, #24]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	bf14      	ite	ne
 801bb4c:	2202      	movne	r2, #2
 801bb4e:	2201      	moveq	r2, #1
 801bb50:	6122      	str	r2, [r4, #16]
 801bb52:	b1bd      	cbz	r5, 801bb84 <__d2b+0x94>
 801bb54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bb58:	4405      	add	r5, r0
 801bb5a:	603d      	str	r5, [r7, #0]
 801bb5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bb60:	6030      	str	r0, [r6, #0]
 801bb62:	4620      	mov	r0, r4
 801bb64:	b003      	add	sp, #12
 801bb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bb6e:	e7d6      	b.n	801bb1e <__d2b+0x2e>
 801bb70:	6161      	str	r1, [r4, #20]
 801bb72:	e7e7      	b.n	801bb44 <__d2b+0x54>
 801bb74:	a801      	add	r0, sp, #4
 801bb76:	f7ff fcf1 	bl	801b55c <__lo0bits>
 801bb7a:	9b01      	ldr	r3, [sp, #4]
 801bb7c:	6163      	str	r3, [r4, #20]
 801bb7e:	3020      	adds	r0, #32
 801bb80:	2201      	movs	r2, #1
 801bb82:	e7e5      	b.n	801bb50 <__d2b+0x60>
 801bb84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bb88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bb8c:	6038      	str	r0, [r7, #0]
 801bb8e:	6918      	ldr	r0, [r3, #16]
 801bb90:	f7ff fcc4 	bl	801b51c <__hi0bits>
 801bb94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bb98:	e7e2      	b.n	801bb60 <__d2b+0x70>
 801bb9a:	bf00      	nop
 801bb9c:	0801e1ed 	.word	0x0801e1ed
 801bba0:	0801e1fe 	.word	0x0801e1fe

0801bba4 <__ratio>:
 801bba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bba8:	4688      	mov	r8, r1
 801bbaa:	4669      	mov	r1, sp
 801bbac:	4681      	mov	r9, r0
 801bbae:	f7ff ff55 	bl	801ba5c <__b2d>
 801bbb2:	a901      	add	r1, sp, #4
 801bbb4:	4640      	mov	r0, r8
 801bbb6:	ec55 4b10 	vmov	r4, r5, d0
 801bbba:	ee10 aa10 	vmov	sl, s0
 801bbbe:	f7ff ff4d 	bl	801ba5c <__b2d>
 801bbc2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801bbc6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801bbca:	1ad2      	subs	r2, r2, r3
 801bbcc:	e9dd 3100 	ldrd	r3, r1, [sp]
 801bbd0:	1a5b      	subs	r3, r3, r1
 801bbd2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801bbd6:	ec57 6b10 	vmov	r6, r7, d0
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	bfd6      	itet	le
 801bbde:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bbe2:	462a      	movgt	r2, r5
 801bbe4:	463a      	movle	r2, r7
 801bbe6:	46ab      	mov	fp, r5
 801bbe8:	bfd6      	itet	le
 801bbea:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801bbee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801bbf2:	ee00 3a90 	vmovle	s1, r3
 801bbf6:	ec4b ab17 	vmov	d7, sl, fp
 801bbfa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801bbfe:	b003      	add	sp, #12
 801bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc04 <__copybits>:
 801bc04:	3901      	subs	r1, #1
 801bc06:	b570      	push	{r4, r5, r6, lr}
 801bc08:	1149      	asrs	r1, r1, #5
 801bc0a:	6914      	ldr	r4, [r2, #16]
 801bc0c:	3101      	adds	r1, #1
 801bc0e:	f102 0314 	add.w	r3, r2, #20
 801bc12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bc16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bc1a:	1f05      	subs	r5, r0, #4
 801bc1c:	42a3      	cmp	r3, r4
 801bc1e:	d30c      	bcc.n	801bc3a <__copybits+0x36>
 801bc20:	1aa3      	subs	r3, r4, r2
 801bc22:	3b11      	subs	r3, #17
 801bc24:	f023 0303 	bic.w	r3, r3, #3
 801bc28:	3211      	adds	r2, #17
 801bc2a:	42a2      	cmp	r2, r4
 801bc2c:	bf88      	it	hi
 801bc2e:	2300      	movhi	r3, #0
 801bc30:	4418      	add	r0, r3
 801bc32:	2300      	movs	r3, #0
 801bc34:	4288      	cmp	r0, r1
 801bc36:	d305      	bcc.n	801bc44 <__copybits+0x40>
 801bc38:	bd70      	pop	{r4, r5, r6, pc}
 801bc3a:	f853 6b04 	ldr.w	r6, [r3], #4
 801bc3e:	f845 6f04 	str.w	r6, [r5, #4]!
 801bc42:	e7eb      	b.n	801bc1c <__copybits+0x18>
 801bc44:	f840 3b04 	str.w	r3, [r0], #4
 801bc48:	e7f4      	b.n	801bc34 <__copybits+0x30>

0801bc4a <__any_on>:
 801bc4a:	f100 0214 	add.w	r2, r0, #20
 801bc4e:	6900      	ldr	r0, [r0, #16]
 801bc50:	114b      	asrs	r3, r1, #5
 801bc52:	4298      	cmp	r0, r3
 801bc54:	b510      	push	{r4, lr}
 801bc56:	db11      	blt.n	801bc7c <__any_on+0x32>
 801bc58:	dd0a      	ble.n	801bc70 <__any_on+0x26>
 801bc5a:	f011 011f 	ands.w	r1, r1, #31
 801bc5e:	d007      	beq.n	801bc70 <__any_on+0x26>
 801bc60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bc64:	fa24 f001 	lsr.w	r0, r4, r1
 801bc68:	fa00 f101 	lsl.w	r1, r0, r1
 801bc6c:	428c      	cmp	r4, r1
 801bc6e:	d10b      	bne.n	801bc88 <__any_on+0x3e>
 801bc70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d803      	bhi.n	801bc80 <__any_on+0x36>
 801bc78:	2000      	movs	r0, #0
 801bc7a:	bd10      	pop	{r4, pc}
 801bc7c:	4603      	mov	r3, r0
 801bc7e:	e7f7      	b.n	801bc70 <__any_on+0x26>
 801bc80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bc84:	2900      	cmp	r1, #0
 801bc86:	d0f5      	beq.n	801bc74 <__any_on+0x2a>
 801bc88:	2001      	movs	r0, #1
 801bc8a:	e7f6      	b.n	801bc7a <__any_on+0x30>

0801bc8c <sulp>:
 801bc8c:	b570      	push	{r4, r5, r6, lr}
 801bc8e:	4604      	mov	r4, r0
 801bc90:	460d      	mov	r5, r1
 801bc92:	4616      	mov	r6, r2
 801bc94:	ec45 4b10 	vmov	d0, r4, r5
 801bc98:	f7ff feba 	bl	801ba10 <__ulp>
 801bc9c:	b17e      	cbz	r6, 801bcbe <sulp+0x32>
 801bc9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bca2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	dd09      	ble.n	801bcbe <sulp+0x32>
 801bcaa:	051b      	lsls	r3, r3, #20
 801bcac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801bcb0:	2000      	movs	r0, #0
 801bcb2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801bcb6:	ec41 0b17 	vmov	d7, r0, r1
 801bcba:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bcbe:	bd70      	pop	{r4, r5, r6, pc}

0801bcc0 <_strtod_l>:
 801bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc4:	ed2d 8b0e 	vpush	{d8-d14}
 801bcc8:	b097      	sub	sp, #92	; 0x5c
 801bcca:	4604      	mov	r4, r0
 801bccc:	920d      	str	r2, [sp, #52]	; 0x34
 801bcce:	2200      	movs	r2, #0
 801bcd0:	9212      	str	r2, [sp, #72]	; 0x48
 801bcd2:	468a      	mov	sl, r1
 801bcd4:	f04f 0800 	mov.w	r8, #0
 801bcd8:	f04f 0900 	mov.w	r9, #0
 801bcdc:	460a      	mov	r2, r1
 801bcde:	9211      	str	r2, [sp, #68]	; 0x44
 801bce0:	7811      	ldrb	r1, [r2, #0]
 801bce2:	292b      	cmp	r1, #43	; 0x2b
 801bce4:	d04c      	beq.n	801bd80 <_strtod_l+0xc0>
 801bce6:	d839      	bhi.n	801bd5c <_strtod_l+0x9c>
 801bce8:	290d      	cmp	r1, #13
 801bcea:	d833      	bhi.n	801bd54 <_strtod_l+0x94>
 801bcec:	2908      	cmp	r1, #8
 801bcee:	d833      	bhi.n	801bd58 <_strtod_l+0x98>
 801bcf0:	2900      	cmp	r1, #0
 801bcf2:	d03c      	beq.n	801bd6e <_strtod_l+0xae>
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	9208      	str	r2, [sp, #32]
 801bcf8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bcfa:	7832      	ldrb	r2, [r6, #0]
 801bcfc:	2a30      	cmp	r2, #48	; 0x30
 801bcfe:	f040 80b8 	bne.w	801be72 <_strtod_l+0x1b2>
 801bd02:	7872      	ldrb	r2, [r6, #1]
 801bd04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801bd08:	2a58      	cmp	r2, #88	; 0x58
 801bd0a:	d170      	bne.n	801bdee <_strtod_l+0x12e>
 801bd0c:	9302      	str	r3, [sp, #8]
 801bd0e:	9b08      	ldr	r3, [sp, #32]
 801bd10:	9301      	str	r3, [sp, #4]
 801bd12:	ab12      	add	r3, sp, #72	; 0x48
 801bd14:	9300      	str	r3, [sp, #0]
 801bd16:	4a91      	ldr	r2, [pc, #580]	; (801bf5c <_strtod_l+0x29c>)
 801bd18:	ab13      	add	r3, sp, #76	; 0x4c
 801bd1a:	a911      	add	r1, sp, #68	; 0x44
 801bd1c:	4620      	mov	r0, r4
 801bd1e:	f001 f8f3 	bl	801cf08 <__gethex>
 801bd22:	f010 070f 	ands.w	r7, r0, #15
 801bd26:	4605      	mov	r5, r0
 801bd28:	d005      	beq.n	801bd36 <_strtod_l+0x76>
 801bd2a:	2f06      	cmp	r7, #6
 801bd2c:	d12a      	bne.n	801bd84 <_strtod_l+0xc4>
 801bd2e:	3601      	adds	r6, #1
 801bd30:	2300      	movs	r3, #0
 801bd32:	9611      	str	r6, [sp, #68]	; 0x44
 801bd34:	9308      	str	r3, [sp, #32]
 801bd36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	f040 8555 	bne.w	801c7e8 <_strtod_l+0xb28>
 801bd3e:	9b08      	ldr	r3, [sp, #32]
 801bd40:	ec49 8b10 	vmov	d0, r8, r9
 801bd44:	b1cb      	cbz	r3, 801bd7a <_strtod_l+0xba>
 801bd46:	eeb1 0b40 	vneg.f64	d0, d0
 801bd4a:	b017      	add	sp, #92	; 0x5c
 801bd4c:	ecbd 8b0e 	vpop	{d8-d14}
 801bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd54:	2920      	cmp	r1, #32
 801bd56:	d1cd      	bne.n	801bcf4 <_strtod_l+0x34>
 801bd58:	3201      	adds	r2, #1
 801bd5a:	e7c0      	b.n	801bcde <_strtod_l+0x1e>
 801bd5c:	292d      	cmp	r1, #45	; 0x2d
 801bd5e:	d1c9      	bne.n	801bcf4 <_strtod_l+0x34>
 801bd60:	2101      	movs	r1, #1
 801bd62:	9108      	str	r1, [sp, #32]
 801bd64:	1c51      	adds	r1, r2, #1
 801bd66:	9111      	str	r1, [sp, #68]	; 0x44
 801bd68:	7852      	ldrb	r2, [r2, #1]
 801bd6a:	2a00      	cmp	r2, #0
 801bd6c:	d1c4      	bne.n	801bcf8 <_strtod_l+0x38>
 801bd6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd70:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	f040 8535 	bne.w	801c7e4 <_strtod_l+0xb24>
 801bd7a:	ec49 8b10 	vmov	d0, r8, r9
 801bd7e:	e7e4      	b.n	801bd4a <_strtod_l+0x8a>
 801bd80:	2100      	movs	r1, #0
 801bd82:	e7ee      	b.n	801bd62 <_strtod_l+0xa2>
 801bd84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bd86:	b13a      	cbz	r2, 801bd98 <_strtod_l+0xd8>
 801bd88:	2135      	movs	r1, #53	; 0x35
 801bd8a:	a814      	add	r0, sp, #80	; 0x50
 801bd8c:	f7ff ff3a 	bl	801bc04 <__copybits>
 801bd90:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bd92:	4620      	mov	r0, r4
 801bd94:	f7ff fb10 	bl	801b3b8 <_Bfree>
 801bd98:	1e7b      	subs	r3, r7, #1
 801bd9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bd9c:	2b04      	cmp	r3, #4
 801bd9e:	d806      	bhi.n	801bdae <_strtod_l+0xee>
 801bda0:	e8df f003 	tbb	[pc, r3]
 801bda4:	201d0314 	.word	0x201d0314
 801bda8:	14          	.byte	0x14
 801bda9:	00          	.byte	0x00
 801bdaa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801bdae:	05eb      	lsls	r3, r5, #23
 801bdb0:	bf48      	it	mi
 801bdb2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801bdb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bdba:	0d1b      	lsrs	r3, r3, #20
 801bdbc:	051b      	lsls	r3, r3, #20
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d1b9      	bne.n	801bd36 <_strtod_l+0x76>
 801bdc2:	f7fe fb83 	bl	801a4cc <__errno>
 801bdc6:	2322      	movs	r3, #34	; 0x22
 801bdc8:	6003      	str	r3, [r0, #0]
 801bdca:	e7b4      	b.n	801bd36 <_strtod_l+0x76>
 801bdcc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801bdd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bdd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bdd8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801bddc:	e7e7      	b.n	801bdae <_strtod_l+0xee>
 801bdde:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801bf64 <_strtod_l+0x2a4>
 801bde2:	e7e4      	b.n	801bdae <_strtod_l+0xee>
 801bde4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801bde8:	f04f 38ff 	mov.w	r8, #4294967295
 801bdec:	e7df      	b.n	801bdae <_strtod_l+0xee>
 801bdee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bdf0:	1c5a      	adds	r2, r3, #1
 801bdf2:	9211      	str	r2, [sp, #68]	; 0x44
 801bdf4:	785b      	ldrb	r3, [r3, #1]
 801bdf6:	2b30      	cmp	r3, #48	; 0x30
 801bdf8:	d0f9      	beq.n	801bdee <_strtod_l+0x12e>
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d09b      	beq.n	801bd36 <_strtod_l+0x76>
 801bdfe:	2301      	movs	r3, #1
 801be00:	9306      	str	r3, [sp, #24]
 801be02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be04:	9309      	str	r3, [sp, #36]	; 0x24
 801be06:	2300      	movs	r3, #0
 801be08:	9305      	str	r3, [sp, #20]
 801be0a:	9307      	str	r3, [sp, #28]
 801be0c:	461e      	mov	r6, r3
 801be0e:	220a      	movs	r2, #10
 801be10:	9811      	ldr	r0, [sp, #68]	; 0x44
 801be12:	7805      	ldrb	r5, [r0, #0]
 801be14:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801be18:	b2d9      	uxtb	r1, r3
 801be1a:	2909      	cmp	r1, #9
 801be1c:	d92b      	bls.n	801be76 <_strtod_l+0x1b6>
 801be1e:	4950      	ldr	r1, [pc, #320]	; (801bf60 <_strtod_l+0x2a0>)
 801be20:	2201      	movs	r2, #1
 801be22:	f000 ffa9 	bl	801cd78 <strncmp>
 801be26:	2800      	cmp	r0, #0
 801be28:	d035      	beq.n	801be96 <_strtod_l+0x1d6>
 801be2a:	2000      	movs	r0, #0
 801be2c:	462a      	mov	r2, r5
 801be2e:	4633      	mov	r3, r6
 801be30:	4683      	mov	fp, r0
 801be32:	4601      	mov	r1, r0
 801be34:	2a65      	cmp	r2, #101	; 0x65
 801be36:	d001      	beq.n	801be3c <_strtod_l+0x17c>
 801be38:	2a45      	cmp	r2, #69	; 0x45
 801be3a:	d118      	bne.n	801be6e <_strtod_l+0x1ae>
 801be3c:	b91b      	cbnz	r3, 801be46 <_strtod_l+0x186>
 801be3e:	9b06      	ldr	r3, [sp, #24]
 801be40:	4303      	orrs	r3, r0
 801be42:	d094      	beq.n	801bd6e <_strtod_l+0xae>
 801be44:	2300      	movs	r3, #0
 801be46:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801be4a:	f10a 0201 	add.w	r2, sl, #1
 801be4e:	9211      	str	r2, [sp, #68]	; 0x44
 801be50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801be54:	2a2b      	cmp	r2, #43	; 0x2b
 801be56:	d075      	beq.n	801bf44 <_strtod_l+0x284>
 801be58:	2a2d      	cmp	r2, #45	; 0x2d
 801be5a:	d07b      	beq.n	801bf54 <_strtod_l+0x294>
 801be5c:	f04f 0e00 	mov.w	lr, #0
 801be60:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801be64:	2d09      	cmp	r5, #9
 801be66:	f240 8083 	bls.w	801bf70 <_strtod_l+0x2b0>
 801be6a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801be6e:	2500      	movs	r5, #0
 801be70:	e09e      	b.n	801bfb0 <_strtod_l+0x2f0>
 801be72:	2300      	movs	r3, #0
 801be74:	e7c4      	b.n	801be00 <_strtod_l+0x140>
 801be76:	2e08      	cmp	r6, #8
 801be78:	bfd5      	itete	le
 801be7a:	9907      	ldrle	r1, [sp, #28]
 801be7c:	9905      	ldrgt	r1, [sp, #20]
 801be7e:	fb02 3301 	mlale	r3, r2, r1, r3
 801be82:	fb02 3301 	mlagt	r3, r2, r1, r3
 801be86:	f100 0001 	add.w	r0, r0, #1
 801be8a:	bfd4      	ite	le
 801be8c:	9307      	strle	r3, [sp, #28]
 801be8e:	9305      	strgt	r3, [sp, #20]
 801be90:	3601      	adds	r6, #1
 801be92:	9011      	str	r0, [sp, #68]	; 0x44
 801be94:	e7bc      	b.n	801be10 <_strtod_l+0x150>
 801be96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be98:	1c5a      	adds	r2, r3, #1
 801be9a:	9211      	str	r2, [sp, #68]	; 0x44
 801be9c:	785a      	ldrb	r2, [r3, #1]
 801be9e:	b3ae      	cbz	r6, 801bf0c <_strtod_l+0x24c>
 801bea0:	4683      	mov	fp, r0
 801bea2:	4633      	mov	r3, r6
 801bea4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bea8:	2909      	cmp	r1, #9
 801beaa:	d912      	bls.n	801bed2 <_strtod_l+0x212>
 801beac:	2101      	movs	r1, #1
 801beae:	e7c1      	b.n	801be34 <_strtod_l+0x174>
 801beb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801beb2:	1c5a      	adds	r2, r3, #1
 801beb4:	9211      	str	r2, [sp, #68]	; 0x44
 801beb6:	785a      	ldrb	r2, [r3, #1]
 801beb8:	3001      	adds	r0, #1
 801beba:	2a30      	cmp	r2, #48	; 0x30
 801bebc:	d0f8      	beq.n	801beb0 <_strtod_l+0x1f0>
 801bebe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bec2:	2b08      	cmp	r3, #8
 801bec4:	f200 8495 	bhi.w	801c7f2 <_strtod_l+0xb32>
 801bec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801beca:	9309      	str	r3, [sp, #36]	; 0x24
 801becc:	4683      	mov	fp, r0
 801bece:	2000      	movs	r0, #0
 801bed0:	4603      	mov	r3, r0
 801bed2:	3a30      	subs	r2, #48	; 0x30
 801bed4:	f100 0101 	add.w	r1, r0, #1
 801bed8:	d012      	beq.n	801bf00 <_strtod_l+0x240>
 801beda:	448b      	add	fp, r1
 801bedc:	eb00 0c03 	add.w	ip, r0, r3
 801bee0:	4619      	mov	r1, r3
 801bee2:	250a      	movs	r5, #10
 801bee4:	4561      	cmp	r1, ip
 801bee6:	d113      	bne.n	801bf10 <_strtod_l+0x250>
 801bee8:	1819      	adds	r1, r3, r0
 801beea:	2908      	cmp	r1, #8
 801beec:	f103 0301 	add.w	r3, r3, #1
 801bef0:	4403      	add	r3, r0
 801bef2:	dc1b      	bgt.n	801bf2c <_strtod_l+0x26c>
 801bef4:	9807      	ldr	r0, [sp, #28]
 801bef6:	210a      	movs	r1, #10
 801bef8:	fb01 2200 	mla	r2, r1, r0, r2
 801befc:	9207      	str	r2, [sp, #28]
 801befe:	2100      	movs	r1, #0
 801bf00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf02:	1c50      	adds	r0, r2, #1
 801bf04:	9011      	str	r0, [sp, #68]	; 0x44
 801bf06:	7852      	ldrb	r2, [r2, #1]
 801bf08:	4608      	mov	r0, r1
 801bf0a:	e7cb      	b.n	801bea4 <_strtod_l+0x1e4>
 801bf0c:	4630      	mov	r0, r6
 801bf0e:	e7d4      	b.n	801beba <_strtod_l+0x1fa>
 801bf10:	2908      	cmp	r1, #8
 801bf12:	f101 0101 	add.w	r1, r1, #1
 801bf16:	dc03      	bgt.n	801bf20 <_strtod_l+0x260>
 801bf18:	9f07      	ldr	r7, [sp, #28]
 801bf1a:	436f      	muls	r7, r5
 801bf1c:	9707      	str	r7, [sp, #28]
 801bf1e:	e7e1      	b.n	801bee4 <_strtod_l+0x224>
 801bf20:	2910      	cmp	r1, #16
 801bf22:	bfde      	ittt	le
 801bf24:	9f05      	ldrle	r7, [sp, #20]
 801bf26:	436f      	mulle	r7, r5
 801bf28:	9705      	strle	r7, [sp, #20]
 801bf2a:	e7db      	b.n	801bee4 <_strtod_l+0x224>
 801bf2c:	2b10      	cmp	r3, #16
 801bf2e:	bfdf      	itttt	le
 801bf30:	9805      	ldrle	r0, [sp, #20]
 801bf32:	210a      	movle	r1, #10
 801bf34:	fb01 2200 	mlale	r2, r1, r0, r2
 801bf38:	9205      	strle	r2, [sp, #20]
 801bf3a:	e7e0      	b.n	801befe <_strtod_l+0x23e>
 801bf3c:	f04f 0b00 	mov.w	fp, #0
 801bf40:	2101      	movs	r1, #1
 801bf42:	e77c      	b.n	801be3e <_strtod_l+0x17e>
 801bf44:	f04f 0e00 	mov.w	lr, #0
 801bf48:	f10a 0202 	add.w	r2, sl, #2
 801bf4c:	9211      	str	r2, [sp, #68]	; 0x44
 801bf4e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801bf52:	e785      	b.n	801be60 <_strtod_l+0x1a0>
 801bf54:	f04f 0e01 	mov.w	lr, #1
 801bf58:	e7f6      	b.n	801bf48 <_strtod_l+0x288>
 801bf5a:	bf00      	nop
 801bf5c:	0801e358 	.word	0x0801e358
 801bf60:	0801e354 	.word	0x0801e354
 801bf64:	7ff00000 	.word	0x7ff00000
 801bf68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf6a:	1c55      	adds	r5, r2, #1
 801bf6c:	9511      	str	r5, [sp, #68]	; 0x44
 801bf6e:	7852      	ldrb	r2, [r2, #1]
 801bf70:	2a30      	cmp	r2, #48	; 0x30
 801bf72:	d0f9      	beq.n	801bf68 <_strtod_l+0x2a8>
 801bf74:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801bf78:	2d08      	cmp	r5, #8
 801bf7a:	f63f af78 	bhi.w	801be6e <_strtod_l+0x1ae>
 801bf7e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801bf82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf84:	920a      	str	r2, [sp, #40]	; 0x28
 801bf86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf88:	1c55      	adds	r5, r2, #1
 801bf8a:	9511      	str	r5, [sp, #68]	; 0x44
 801bf8c:	7852      	ldrb	r2, [r2, #1]
 801bf8e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801bf92:	2f09      	cmp	r7, #9
 801bf94:	d937      	bls.n	801c006 <_strtod_l+0x346>
 801bf96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bf98:	1bed      	subs	r5, r5, r7
 801bf9a:	2d08      	cmp	r5, #8
 801bf9c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801bfa0:	dc02      	bgt.n	801bfa8 <_strtod_l+0x2e8>
 801bfa2:	4565      	cmp	r5, ip
 801bfa4:	bfa8      	it	ge
 801bfa6:	4665      	movge	r5, ip
 801bfa8:	f1be 0f00 	cmp.w	lr, #0
 801bfac:	d000      	beq.n	801bfb0 <_strtod_l+0x2f0>
 801bfae:	426d      	negs	r5, r5
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d14d      	bne.n	801c050 <_strtod_l+0x390>
 801bfb4:	9b06      	ldr	r3, [sp, #24]
 801bfb6:	4303      	orrs	r3, r0
 801bfb8:	f47f aebd 	bne.w	801bd36 <_strtod_l+0x76>
 801bfbc:	2900      	cmp	r1, #0
 801bfbe:	f47f aed6 	bne.w	801bd6e <_strtod_l+0xae>
 801bfc2:	2a69      	cmp	r2, #105	; 0x69
 801bfc4:	d027      	beq.n	801c016 <_strtod_l+0x356>
 801bfc6:	dc24      	bgt.n	801c012 <_strtod_l+0x352>
 801bfc8:	2a49      	cmp	r2, #73	; 0x49
 801bfca:	d024      	beq.n	801c016 <_strtod_l+0x356>
 801bfcc:	2a4e      	cmp	r2, #78	; 0x4e
 801bfce:	f47f aece 	bne.w	801bd6e <_strtod_l+0xae>
 801bfd2:	4995      	ldr	r1, [pc, #596]	; (801c228 <_strtod_l+0x568>)
 801bfd4:	a811      	add	r0, sp, #68	; 0x44
 801bfd6:	f001 f9d7 	bl	801d388 <__match>
 801bfda:	2800      	cmp	r0, #0
 801bfdc:	f43f aec7 	beq.w	801bd6e <_strtod_l+0xae>
 801bfe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bfe2:	781b      	ldrb	r3, [r3, #0]
 801bfe4:	2b28      	cmp	r3, #40	; 0x28
 801bfe6:	d12d      	bne.n	801c044 <_strtod_l+0x384>
 801bfe8:	4990      	ldr	r1, [pc, #576]	; (801c22c <_strtod_l+0x56c>)
 801bfea:	aa14      	add	r2, sp, #80	; 0x50
 801bfec:	a811      	add	r0, sp, #68	; 0x44
 801bfee:	f001 f9df 	bl	801d3b0 <__hexnan>
 801bff2:	2805      	cmp	r0, #5
 801bff4:	d126      	bne.n	801c044 <_strtod_l+0x384>
 801bff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bff8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801bffc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801c000:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801c004:	e697      	b.n	801bd36 <_strtod_l+0x76>
 801c006:	250a      	movs	r5, #10
 801c008:	fb05 2c0c 	mla	ip, r5, ip, r2
 801c00c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801c010:	e7b9      	b.n	801bf86 <_strtod_l+0x2c6>
 801c012:	2a6e      	cmp	r2, #110	; 0x6e
 801c014:	e7db      	b.n	801bfce <_strtod_l+0x30e>
 801c016:	4986      	ldr	r1, [pc, #536]	; (801c230 <_strtod_l+0x570>)
 801c018:	a811      	add	r0, sp, #68	; 0x44
 801c01a:	f001 f9b5 	bl	801d388 <__match>
 801c01e:	2800      	cmp	r0, #0
 801c020:	f43f aea5 	beq.w	801bd6e <_strtod_l+0xae>
 801c024:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c026:	4983      	ldr	r1, [pc, #524]	; (801c234 <_strtod_l+0x574>)
 801c028:	3b01      	subs	r3, #1
 801c02a:	a811      	add	r0, sp, #68	; 0x44
 801c02c:	9311      	str	r3, [sp, #68]	; 0x44
 801c02e:	f001 f9ab 	bl	801d388 <__match>
 801c032:	b910      	cbnz	r0, 801c03a <_strtod_l+0x37a>
 801c034:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c036:	3301      	adds	r3, #1
 801c038:	9311      	str	r3, [sp, #68]	; 0x44
 801c03a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801c248 <_strtod_l+0x588>
 801c03e:	f04f 0800 	mov.w	r8, #0
 801c042:	e678      	b.n	801bd36 <_strtod_l+0x76>
 801c044:	487c      	ldr	r0, [pc, #496]	; (801c238 <_strtod_l+0x578>)
 801c046:	f000 febb 	bl	801cdc0 <nan>
 801c04a:	ec59 8b10 	vmov	r8, r9, d0
 801c04e:	e672      	b.n	801bd36 <_strtod_l+0x76>
 801c050:	eddd 7a07 	vldr	s15, [sp, #28]
 801c054:	eba5 020b 	sub.w	r2, r5, fp
 801c058:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c05c:	2e00      	cmp	r6, #0
 801c05e:	bf08      	it	eq
 801c060:	461e      	moveq	r6, r3
 801c062:	2b10      	cmp	r3, #16
 801c064:	9206      	str	r2, [sp, #24]
 801c066:	461a      	mov	r2, r3
 801c068:	bfa8      	it	ge
 801c06a:	2210      	movge	r2, #16
 801c06c:	2b09      	cmp	r3, #9
 801c06e:	ec59 8b17 	vmov	r8, r9, d7
 801c072:	dd0c      	ble.n	801c08e <_strtod_l+0x3ce>
 801c074:	4971      	ldr	r1, [pc, #452]	; (801c23c <_strtod_l+0x57c>)
 801c076:	eddd 6a05 	vldr	s13, [sp, #20]
 801c07a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c07e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801c082:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801c086:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c08a:	ec59 8b16 	vmov	r8, r9, d6
 801c08e:	2b0f      	cmp	r3, #15
 801c090:	dc37      	bgt.n	801c102 <_strtod_l+0x442>
 801c092:	9906      	ldr	r1, [sp, #24]
 801c094:	2900      	cmp	r1, #0
 801c096:	f43f ae4e 	beq.w	801bd36 <_strtod_l+0x76>
 801c09a:	dd23      	ble.n	801c0e4 <_strtod_l+0x424>
 801c09c:	2916      	cmp	r1, #22
 801c09e:	dc0b      	bgt.n	801c0b8 <_strtod_l+0x3f8>
 801c0a0:	4b66      	ldr	r3, [pc, #408]	; (801c23c <_strtod_l+0x57c>)
 801c0a2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801c0a6:	ed93 7b00 	vldr	d7, [r3]
 801c0aa:	ec49 8b16 	vmov	d6, r8, r9
 801c0ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c0b2:	ec59 8b17 	vmov	r8, r9, d7
 801c0b6:	e63e      	b.n	801bd36 <_strtod_l+0x76>
 801c0b8:	9806      	ldr	r0, [sp, #24]
 801c0ba:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801c0be:	4281      	cmp	r1, r0
 801c0c0:	db1f      	blt.n	801c102 <_strtod_l+0x442>
 801c0c2:	4a5e      	ldr	r2, [pc, #376]	; (801c23c <_strtod_l+0x57c>)
 801c0c4:	f1c3 030f 	rsb	r3, r3, #15
 801c0c8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801c0cc:	ed91 7b00 	vldr	d7, [r1]
 801c0d0:	ec49 8b16 	vmov	d6, r8, r9
 801c0d4:	1ac3      	subs	r3, r0, r3
 801c0d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c0da:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c0de:	ed92 6b00 	vldr	d6, [r2]
 801c0e2:	e7e4      	b.n	801c0ae <_strtod_l+0x3ee>
 801c0e4:	9906      	ldr	r1, [sp, #24]
 801c0e6:	3116      	adds	r1, #22
 801c0e8:	db0b      	blt.n	801c102 <_strtod_l+0x442>
 801c0ea:	4b54      	ldr	r3, [pc, #336]	; (801c23c <_strtod_l+0x57c>)
 801c0ec:	ebab 0505 	sub.w	r5, fp, r5
 801c0f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801c0f4:	ed95 7b00 	vldr	d7, [r5]
 801c0f8:	ec49 8b16 	vmov	d6, r8, r9
 801c0fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c100:	e7d7      	b.n	801c0b2 <_strtod_l+0x3f2>
 801c102:	9906      	ldr	r1, [sp, #24]
 801c104:	1a9a      	subs	r2, r3, r2
 801c106:	440a      	add	r2, r1
 801c108:	2a00      	cmp	r2, #0
 801c10a:	dd6e      	ble.n	801c1ea <_strtod_l+0x52a>
 801c10c:	f012 000f 	ands.w	r0, r2, #15
 801c110:	d00a      	beq.n	801c128 <_strtod_l+0x468>
 801c112:	494a      	ldr	r1, [pc, #296]	; (801c23c <_strtod_l+0x57c>)
 801c114:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c118:	ed91 7b00 	vldr	d7, [r1]
 801c11c:	ec49 8b16 	vmov	d6, r8, r9
 801c120:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c124:	ec59 8b17 	vmov	r8, r9, d7
 801c128:	f032 020f 	bics.w	r2, r2, #15
 801c12c:	d04e      	beq.n	801c1cc <_strtod_l+0x50c>
 801c12e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801c132:	dd22      	ble.n	801c17a <_strtod_l+0x4ba>
 801c134:	2500      	movs	r5, #0
 801c136:	462e      	mov	r6, r5
 801c138:	9507      	str	r5, [sp, #28]
 801c13a:	462f      	mov	r7, r5
 801c13c:	2322      	movs	r3, #34	; 0x22
 801c13e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801c248 <_strtod_l+0x588>
 801c142:	6023      	str	r3, [r4, #0]
 801c144:	f04f 0800 	mov.w	r8, #0
 801c148:	9b07      	ldr	r3, [sp, #28]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	f43f adf3 	beq.w	801bd36 <_strtod_l+0x76>
 801c150:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c152:	4620      	mov	r0, r4
 801c154:	f7ff f930 	bl	801b3b8 <_Bfree>
 801c158:	4639      	mov	r1, r7
 801c15a:	4620      	mov	r0, r4
 801c15c:	f7ff f92c 	bl	801b3b8 <_Bfree>
 801c160:	4631      	mov	r1, r6
 801c162:	4620      	mov	r0, r4
 801c164:	f7ff f928 	bl	801b3b8 <_Bfree>
 801c168:	9907      	ldr	r1, [sp, #28]
 801c16a:	4620      	mov	r0, r4
 801c16c:	f7ff f924 	bl	801b3b8 <_Bfree>
 801c170:	4629      	mov	r1, r5
 801c172:	4620      	mov	r0, r4
 801c174:	f7ff f920 	bl	801b3b8 <_Bfree>
 801c178:	e5dd      	b.n	801bd36 <_strtod_l+0x76>
 801c17a:	2000      	movs	r0, #0
 801c17c:	ec49 8b17 	vmov	d7, r8, r9
 801c180:	4f2f      	ldr	r7, [pc, #188]	; (801c240 <_strtod_l+0x580>)
 801c182:	1112      	asrs	r2, r2, #4
 801c184:	4601      	mov	r1, r0
 801c186:	2a01      	cmp	r2, #1
 801c188:	dc23      	bgt.n	801c1d2 <_strtod_l+0x512>
 801c18a:	b108      	cbz	r0, 801c190 <_strtod_l+0x4d0>
 801c18c:	ec59 8b17 	vmov	r8, r9, d7
 801c190:	4a2b      	ldr	r2, [pc, #172]	; (801c240 <_strtod_l+0x580>)
 801c192:	482c      	ldr	r0, [pc, #176]	; (801c244 <_strtod_l+0x584>)
 801c194:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c198:	ed92 7b00 	vldr	d7, [r2]
 801c19c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c1a0:	ec49 8b16 	vmov	d6, r8, r9
 801c1a4:	4a28      	ldr	r2, [pc, #160]	; (801c248 <_strtod_l+0x588>)
 801c1a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c1aa:	ee17 1a90 	vmov	r1, s15
 801c1ae:	400a      	ands	r2, r1
 801c1b0:	4282      	cmp	r2, r0
 801c1b2:	ec59 8b17 	vmov	r8, r9, d7
 801c1b6:	d8bd      	bhi.n	801c134 <_strtod_l+0x474>
 801c1b8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801c1bc:	4282      	cmp	r2, r0
 801c1be:	bf86      	itte	hi
 801c1c0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801c24c <_strtod_l+0x58c>
 801c1c4:	f04f 38ff 	movhi.w	r8, #4294967295
 801c1c8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	9205      	str	r2, [sp, #20]
 801c1d0:	e076      	b.n	801c2c0 <_strtod_l+0x600>
 801c1d2:	f012 0f01 	tst.w	r2, #1
 801c1d6:	d004      	beq.n	801c1e2 <_strtod_l+0x522>
 801c1d8:	ed97 6b00 	vldr	d6, [r7]
 801c1dc:	2001      	movs	r0, #1
 801c1de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c1e2:	3101      	adds	r1, #1
 801c1e4:	1052      	asrs	r2, r2, #1
 801c1e6:	3708      	adds	r7, #8
 801c1e8:	e7cd      	b.n	801c186 <_strtod_l+0x4c6>
 801c1ea:	d0ef      	beq.n	801c1cc <_strtod_l+0x50c>
 801c1ec:	4252      	negs	r2, r2
 801c1ee:	f012 000f 	ands.w	r0, r2, #15
 801c1f2:	d00a      	beq.n	801c20a <_strtod_l+0x54a>
 801c1f4:	4911      	ldr	r1, [pc, #68]	; (801c23c <_strtod_l+0x57c>)
 801c1f6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c1fa:	ed91 7b00 	vldr	d7, [r1]
 801c1fe:	ec49 8b16 	vmov	d6, r8, r9
 801c202:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c206:	ec59 8b17 	vmov	r8, r9, d7
 801c20a:	1112      	asrs	r2, r2, #4
 801c20c:	d0de      	beq.n	801c1cc <_strtod_l+0x50c>
 801c20e:	2a1f      	cmp	r2, #31
 801c210:	dd1e      	ble.n	801c250 <_strtod_l+0x590>
 801c212:	2500      	movs	r5, #0
 801c214:	462e      	mov	r6, r5
 801c216:	9507      	str	r5, [sp, #28]
 801c218:	462f      	mov	r7, r5
 801c21a:	2322      	movs	r3, #34	; 0x22
 801c21c:	f04f 0800 	mov.w	r8, #0
 801c220:	f04f 0900 	mov.w	r9, #0
 801c224:	6023      	str	r3, [r4, #0]
 801c226:	e78f      	b.n	801c148 <_strtod_l+0x488>
 801c228:	0801e145 	.word	0x0801e145
 801c22c:	0801e36c 	.word	0x0801e36c
 801c230:	0801e13d 	.word	0x0801e13d
 801c234:	0801e174 	.word	0x0801e174
 801c238:	0801e4fd 	.word	0x0801e4fd
 801c23c:	0801e280 	.word	0x0801e280
 801c240:	0801e258 	.word	0x0801e258
 801c244:	7ca00000 	.word	0x7ca00000
 801c248:	7ff00000 	.word	0x7ff00000
 801c24c:	7fefffff 	.word	0x7fefffff
 801c250:	f012 0110 	ands.w	r1, r2, #16
 801c254:	bf18      	it	ne
 801c256:	216a      	movne	r1, #106	; 0x6a
 801c258:	9105      	str	r1, [sp, #20]
 801c25a:	ec49 8b17 	vmov	d7, r8, r9
 801c25e:	49be      	ldr	r1, [pc, #760]	; (801c558 <_strtod_l+0x898>)
 801c260:	2000      	movs	r0, #0
 801c262:	07d7      	lsls	r7, r2, #31
 801c264:	d504      	bpl.n	801c270 <_strtod_l+0x5b0>
 801c266:	ed91 6b00 	vldr	d6, [r1]
 801c26a:	2001      	movs	r0, #1
 801c26c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c270:	1052      	asrs	r2, r2, #1
 801c272:	f101 0108 	add.w	r1, r1, #8
 801c276:	d1f4      	bne.n	801c262 <_strtod_l+0x5a2>
 801c278:	b108      	cbz	r0, 801c27e <_strtod_l+0x5be>
 801c27a:	ec59 8b17 	vmov	r8, r9, d7
 801c27e:	9a05      	ldr	r2, [sp, #20]
 801c280:	b1ba      	cbz	r2, 801c2b2 <_strtod_l+0x5f2>
 801c282:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801c286:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801c28a:	2a00      	cmp	r2, #0
 801c28c:	4648      	mov	r0, r9
 801c28e:	dd10      	ble.n	801c2b2 <_strtod_l+0x5f2>
 801c290:	2a1f      	cmp	r2, #31
 801c292:	f340 812c 	ble.w	801c4ee <_strtod_l+0x82e>
 801c296:	2a34      	cmp	r2, #52	; 0x34
 801c298:	bfde      	ittt	le
 801c29a:	f04f 32ff 	movle.w	r2, #4294967295
 801c29e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801c2a2:	408a      	lslle	r2, r1
 801c2a4:	f04f 0800 	mov.w	r8, #0
 801c2a8:	bfcc      	ite	gt
 801c2aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c2ae:	ea02 0900 	andle.w	r9, r2, r0
 801c2b2:	ec49 8b17 	vmov	d7, r8, r9
 801c2b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2be:	d0a8      	beq.n	801c212 <_strtod_l+0x552>
 801c2c0:	9a07      	ldr	r2, [sp, #28]
 801c2c2:	9200      	str	r2, [sp, #0]
 801c2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c2c6:	4632      	mov	r2, r6
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	f7ff f8dd 	bl	801b488 <__s2b>
 801c2ce:	9007      	str	r0, [sp, #28]
 801c2d0:	2800      	cmp	r0, #0
 801c2d2:	f43f af2f 	beq.w	801c134 <_strtod_l+0x474>
 801c2d6:	9a06      	ldr	r2, [sp, #24]
 801c2d8:	2a00      	cmp	r2, #0
 801c2da:	ebab 0305 	sub.w	r3, fp, r5
 801c2de:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801c538 <_strtod_l+0x878>
 801c2e2:	bfa8      	it	ge
 801c2e4:	2300      	movge	r3, #0
 801c2e6:	ed9f ab96 	vldr	d10, [pc, #600]	; 801c540 <_strtod_l+0x880>
 801c2ea:	ed9f bb97 	vldr	d11, [pc, #604]	; 801c548 <_strtod_l+0x888>
 801c2ee:	9309      	str	r3, [sp, #36]	; 0x24
 801c2f0:	2500      	movs	r5, #0
 801c2f2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c2f6:	930c      	str	r3, [sp, #48]	; 0x30
 801c2f8:	462e      	mov	r6, r5
 801c2fa:	9b07      	ldr	r3, [sp, #28]
 801c2fc:	4620      	mov	r0, r4
 801c2fe:	6859      	ldr	r1, [r3, #4]
 801c300:	f7ff f81a 	bl	801b338 <_Balloc>
 801c304:	4607      	mov	r7, r0
 801c306:	2800      	cmp	r0, #0
 801c308:	f43f af18 	beq.w	801c13c <_strtod_l+0x47c>
 801c30c:	9b07      	ldr	r3, [sp, #28]
 801c30e:	691a      	ldr	r2, [r3, #16]
 801c310:	3202      	adds	r2, #2
 801c312:	f103 010c 	add.w	r1, r3, #12
 801c316:	0092      	lsls	r2, r2, #2
 801c318:	300c      	adds	r0, #12
 801c31a:	f7fe f904 	bl	801a526 <memcpy>
 801c31e:	ec49 8b10 	vmov	d0, r8, r9
 801c322:	aa14      	add	r2, sp, #80	; 0x50
 801c324:	a913      	add	r1, sp, #76	; 0x4c
 801c326:	4620      	mov	r0, r4
 801c328:	f7ff fbe2 	bl	801baf0 <__d2b>
 801c32c:	ec49 8b18 	vmov	d8, r8, r9
 801c330:	9012      	str	r0, [sp, #72]	; 0x48
 801c332:	2800      	cmp	r0, #0
 801c334:	f43f af02 	beq.w	801c13c <_strtod_l+0x47c>
 801c338:	2101      	movs	r1, #1
 801c33a:	4620      	mov	r0, r4
 801c33c:	f7ff f93c 	bl	801b5b8 <__i2b>
 801c340:	4606      	mov	r6, r0
 801c342:	2800      	cmp	r0, #0
 801c344:	f43f aefa 	beq.w	801c13c <_strtod_l+0x47c>
 801c348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c34a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	bfab      	itete	ge
 801c350:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801c352:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801c354:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801c358:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801c35c:	bfac      	ite	ge
 801c35e:	eb03 0b02 	addge.w	fp, r3, r2
 801c362:	eba2 0a03 	sublt.w	sl, r2, r3
 801c366:	9a05      	ldr	r2, [sp, #20]
 801c368:	1a9b      	subs	r3, r3, r2
 801c36a:	440b      	add	r3, r1
 801c36c:	4a7b      	ldr	r2, [pc, #492]	; (801c55c <_strtod_l+0x89c>)
 801c36e:	3b01      	subs	r3, #1
 801c370:	4293      	cmp	r3, r2
 801c372:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c376:	f280 80cd 	bge.w	801c514 <_strtod_l+0x854>
 801c37a:	1ad2      	subs	r2, r2, r3
 801c37c:	2a1f      	cmp	r2, #31
 801c37e:	eba1 0102 	sub.w	r1, r1, r2
 801c382:	f04f 0001 	mov.w	r0, #1
 801c386:	f300 80b9 	bgt.w	801c4fc <_strtod_l+0x83c>
 801c38a:	fa00 f302 	lsl.w	r3, r0, r2
 801c38e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c390:	2300      	movs	r3, #0
 801c392:	930a      	str	r3, [sp, #40]	; 0x28
 801c394:	eb0b 0301 	add.w	r3, fp, r1
 801c398:	9a05      	ldr	r2, [sp, #20]
 801c39a:	459b      	cmp	fp, r3
 801c39c:	448a      	add	sl, r1
 801c39e:	4492      	add	sl, r2
 801c3a0:	465a      	mov	r2, fp
 801c3a2:	bfa8      	it	ge
 801c3a4:	461a      	movge	r2, r3
 801c3a6:	4552      	cmp	r2, sl
 801c3a8:	bfa8      	it	ge
 801c3aa:	4652      	movge	r2, sl
 801c3ac:	2a00      	cmp	r2, #0
 801c3ae:	bfc2      	ittt	gt
 801c3b0:	1a9b      	subgt	r3, r3, r2
 801c3b2:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c3b6:	ebab 0b02 	subgt.w	fp, fp, r2
 801c3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3bc:	2a00      	cmp	r2, #0
 801c3be:	dd18      	ble.n	801c3f2 <_strtod_l+0x732>
 801c3c0:	4631      	mov	r1, r6
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c3c6:	f7ff f9b7 	bl	801b738 <__pow5mult>
 801c3ca:	4606      	mov	r6, r0
 801c3cc:	2800      	cmp	r0, #0
 801c3ce:	f43f aeb5 	beq.w	801c13c <_strtod_l+0x47c>
 801c3d2:	4601      	mov	r1, r0
 801c3d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	f7ff f904 	bl	801b5e4 <__multiply>
 801c3dc:	900e      	str	r0, [sp, #56]	; 0x38
 801c3de:	2800      	cmp	r0, #0
 801c3e0:	f43f aeac 	beq.w	801c13c <_strtod_l+0x47c>
 801c3e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	f7fe ffe6 	bl	801b3b8 <_Bfree>
 801c3ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c3ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3f0:	9212      	str	r2, [sp, #72]	; 0x48
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	f300 8093 	bgt.w	801c51e <_strtod_l+0x85e>
 801c3f8:	9b06      	ldr	r3, [sp, #24]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	dd08      	ble.n	801c410 <_strtod_l+0x750>
 801c3fe:	4639      	mov	r1, r7
 801c400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c402:	4620      	mov	r0, r4
 801c404:	f7ff f998 	bl	801b738 <__pow5mult>
 801c408:	4607      	mov	r7, r0
 801c40a:	2800      	cmp	r0, #0
 801c40c:	f43f ae96 	beq.w	801c13c <_strtod_l+0x47c>
 801c410:	f1ba 0f00 	cmp.w	sl, #0
 801c414:	dd08      	ble.n	801c428 <_strtod_l+0x768>
 801c416:	4639      	mov	r1, r7
 801c418:	4652      	mov	r2, sl
 801c41a:	4620      	mov	r0, r4
 801c41c:	f7ff f9e6 	bl	801b7ec <__lshift>
 801c420:	4607      	mov	r7, r0
 801c422:	2800      	cmp	r0, #0
 801c424:	f43f ae8a 	beq.w	801c13c <_strtod_l+0x47c>
 801c428:	f1bb 0f00 	cmp.w	fp, #0
 801c42c:	dd08      	ble.n	801c440 <_strtod_l+0x780>
 801c42e:	4631      	mov	r1, r6
 801c430:	465a      	mov	r2, fp
 801c432:	4620      	mov	r0, r4
 801c434:	f7ff f9da 	bl	801b7ec <__lshift>
 801c438:	4606      	mov	r6, r0
 801c43a:	2800      	cmp	r0, #0
 801c43c:	f43f ae7e 	beq.w	801c13c <_strtod_l+0x47c>
 801c440:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c442:	463a      	mov	r2, r7
 801c444:	4620      	mov	r0, r4
 801c446:	f7ff fa59 	bl	801b8fc <__mdiff>
 801c44a:	4605      	mov	r5, r0
 801c44c:	2800      	cmp	r0, #0
 801c44e:	f43f ae75 	beq.w	801c13c <_strtod_l+0x47c>
 801c452:	2300      	movs	r3, #0
 801c454:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c458:	60c3      	str	r3, [r0, #12]
 801c45a:	4631      	mov	r1, r6
 801c45c:	f7ff fa32 	bl	801b8c4 <__mcmp>
 801c460:	2800      	cmp	r0, #0
 801c462:	da7f      	bge.n	801c564 <_strtod_l+0x8a4>
 801c464:	ea5a 0a08 	orrs.w	sl, sl, r8
 801c468:	f040 80a5 	bne.w	801c5b6 <_strtod_l+0x8f6>
 801c46c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c470:	2b00      	cmp	r3, #0
 801c472:	f040 80a0 	bne.w	801c5b6 <_strtod_l+0x8f6>
 801c476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c47a:	0d1b      	lsrs	r3, r3, #20
 801c47c:	051b      	lsls	r3, r3, #20
 801c47e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c482:	f240 8098 	bls.w	801c5b6 <_strtod_l+0x8f6>
 801c486:	696b      	ldr	r3, [r5, #20]
 801c488:	b91b      	cbnz	r3, 801c492 <_strtod_l+0x7d2>
 801c48a:	692b      	ldr	r3, [r5, #16]
 801c48c:	2b01      	cmp	r3, #1
 801c48e:	f340 8092 	ble.w	801c5b6 <_strtod_l+0x8f6>
 801c492:	4629      	mov	r1, r5
 801c494:	2201      	movs	r2, #1
 801c496:	4620      	mov	r0, r4
 801c498:	f7ff f9a8 	bl	801b7ec <__lshift>
 801c49c:	4631      	mov	r1, r6
 801c49e:	4605      	mov	r5, r0
 801c4a0:	f7ff fa10 	bl	801b8c4 <__mcmp>
 801c4a4:	2800      	cmp	r0, #0
 801c4a6:	f340 8086 	ble.w	801c5b6 <_strtod_l+0x8f6>
 801c4aa:	9905      	ldr	r1, [sp, #20]
 801c4ac:	4a2c      	ldr	r2, [pc, #176]	; (801c560 <_strtod_l+0x8a0>)
 801c4ae:	464b      	mov	r3, r9
 801c4b0:	2900      	cmp	r1, #0
 801c4b2:	f000 809f 	beq.w	801c5f4 <_strtod_l+0x934>
 801c4b6:	ea02 0109 	and.w	r1, r2, r9
 801c4ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c4be:	f300 8099 	bgt.w	801c5f4 <_strtod_l+0x934>
 801c4c2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c4c6:	f77f aea8 	ble.w	801c21a <_strtod_l+0x55a>
 801c4ca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801c550 <_strtod_l+0x890>
 801c4ce:	ec49 8b16 	vmov	d6, r8, r9
 801c4d2:	4b23      	ldr	r3, [pc, #140]	; (801c560 <_strtod_l+0x8a0>)
 801c4d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c4d8:	ee17 2a90 	vmov	r2, s15
 801c4dc:	4013      	ands	r3, r2
 801c4de:	ec59 8b17 	vmov	r8, r9, d7
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	f47f ae34 	bne.w	801c150 <_strtod_l+0x490>
 801c4e8:	2322      	movs	r3, #34	; 0x22
 801c4ea:	6023      	str	r3, [r4, #0]
 801c4ec:	e630      	b.n	801c150 <_strtod_l+0x490>
 801c4ee:	f04f 31ff 	mov.w	r1, #4294967295
 801c4f2:	fa01 f202 	lsl.w	r2, r1, r2
 801c4f6:	ea02 0808 	and.w	r8, r2, r8
 801c4fa:	e6da      	b.n	801c2b2 <_strtod_l+0x5f2>
 801c4fc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801c500:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801c504:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801c508:	33e2      	adds	r3, #226	; 0xe2
 801c50a:	fa00 f303 	lsl.w	r3, r0, r3
 801c50e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801c512:	e73f      	b.n	801c394 <_strtod_l+0x6d4>
 801c514:	2200      	movs	r2, #0
 801c516:	2301      	movs	r3, #1
 801c518:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c51c:	e73a      	b.n	801c394 <_strtod_l+0x6d4>
 801c51e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c520:	461a      	mov	r2, r3
 801c522:	4620      	mov	r0, r4
 801c524:	f7ff f962 	bl	801b7ec <__lshift>
 801c528:	9012      	str	r0, [sp, #72]	; 0x48
 801c52a:	2800      	cmp	r0, #0
 801c52c:	f47f af64 	bne.w	801c3f8 <_strtod_l+0x738>
 801c530:	e604      	b.n	801c13c <_strtod_l+0x47c>
 801c532:	bf00      	nop
 801c534:	f3af 8000 	nop.w
 801c538:	94a03595 	.word	0x94a03595
 801c53c:	3fcfffff 	.word	0x3fcfffff
 801c540:	94a03595 	.word	0x94a03595
 801c544:	3fdfffff 	.word	0x3fdfffff
 801c548:	35afe535 	.word	0x35afe535
 801c54c:	3fe00000 	.word	0x3fe00000
 801c550:	00000000 	.word	0x00000000
 801c554:	39500000 	.word	0x39500000
 801c558:	0801e380 	.word	0x0801e380
 801c55c:	fffffc02 	.word	0xfffffc02
 801c560:	7ff00000 	.word	0x7ff00000
 801c564:	46cb      	mov	fp, r9
 801c566:	d15f      	bne.n	801c628 <_strtod_l+0x968>
 801c568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c56c:	f1ba 0f00 	cmp.w	sl, #0
 801c570:	d02a      	beq.n	801c5c8 <_strtod_l+0x908>
 801c572:	4aa7      	ldr	r2, [pc, #668]	; (801c810 <_strtod_l+0xb50>)
 801c574:	4293      	cmp	r3, r2
 801c576:	d12b      	bne.n	801c5d0 <_strtod_l+0x910>
 801c578:	9b05      	ldr	r3, [sp, #20]
 801c57a:	4642      	mov	r2, r8
 801c57c:	b1fb      	cbz	r3, 801c5be <_strtod_l+0x8fe>
 801c57e:	4ba5      	ldr	r3, [pc, #660]	; (801c814 <_strtod_l+0xb54>)
 801c580:	ea09 0303 	and.w	r3, r9, r3
 801c584:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c588:	f04f 31ff 	mov.w	r1, #4294967295
 801c58c:	d81a      	bhi.n	801c5c4 <_strtod_l+0x904>
 801c58e:	0d1b      	lsrs	r3, r3, #20
 801c590:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c594:	fa01 f303 	lsl.w	r3, r1, r3
 801c598:	429a      	cmp	r2, r3
 801c59a:	d119      	bne.n	801c5d0 <_strtod_l+0x910>
 801c59c:	4b9e      	ldr	r3, [pc, #632]	; (801c818 <_strtod_l+0xb58>)
 801c59e:	459b      	cmp	fp, r3
 801c5a0:	d102      	bne.n	801c5a8 <_strtod_l+0x8e8>
 801c5a2:	3201      	adds	r2, #1
 801c5a4:	f43f adca 	beq.w	801c13c <_strtod_l+0x47c>
 801c5a8:	4b9a      	ldr	r3, [pc, #616]	; (801c814 <_strtod_l+0xb54>)
 801c5aa:	ea0b 0303 	and.w	r3, fp, r3
 801c5ae:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801c5b2:	f04f 0800 	mov.w	r8, #0
 801c5b6:	9b05      	ldr	r3, [sp, #20]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d186      	bne.n	801c4ca <_strtod_l+0x80a>
 801c5bc:	e5c8      	b.n	801c150 <_strtod_l+0x490>
 801c5be:	f04f 33ff 	mov.w	r3, #4294967295
 801c5c2:	e7e9      	b.n	801c598 <_strtod_l+0x8d8>
 801c5c4:	460b      	mov	r3, r1
 801c5c6:	e7e7      	b.n	801c598 <_strtod_l+0x8d8>
 801c5c8:	ea53 0308 	orrs.w	r3, r3, r8
 801c5cc:	f43f af6d 	beq.w	801c4aa <_strtod_l+0x7ea>
 801c5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5d2:	b1cb      	cbz	r3, 801c608 <_strtod_l+0x948>
 801c5d4:	ea13 0f0b 	tst.w	r3, fp
 801c5d8:	d0ed      	beq.n	801c5b6 <_strtod_l+0x8f6>
 801c5da:	9a05      	ldr	r2, [sp, #20]
 801c5dc:	4640      	mov	r0, r8
 801c5de:	4649      	mov	r1, r9
 801c5e0:	f1ba 0f00 	cmp.w	sl, #0
 801c5e4:	d014      	beq.n	801c610 <_strtod_l+0x950>
 801c5e6:	f7ff fb51 	bl	801bc8c <sulp>
 801c5ea:	ee38 7b00 	vadd.f64	d7, d8, d0
 801c5ee:	ec59 8b17 	vmov	r8, r9, d7
 801c5f2:	e7e0      	b.n	801c5b6 <_strtod_l+0x8f6>
 801c5f4:	4013      	ands	r3, r2
 801c5f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c5fa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801c5fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801c602:	f04f 38ff 	mov.w	r8, #4294967295
 801c606:	e7d6      	b.n	801c5b6 <_strtod_l+0x8f6>
 801c608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c60a:	ea13 0f08 	tst.w	r3, r8
 801c60e:	e7e3      	b.n	801c5d8 <_strtod_l+0x918>
 801c610:	f7ff fb3c 	bl	801bc8c <sulp>
 801c614:	ee38 0b40 	vsub.f64	d0, d8, d0
 801c618:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801c61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c620:	ec59 8b10 	vmov	r8, r9, d0
 801c624:	d1c7      	bne.n	801c5b6 <_strtod_l+0x8f6>
 801c626:	e5f8      	b.n	801c21a <_strtod_l+0x55a>
 801c628:	4631      	mov	r1, r6
 801c62a:	4628      	mov	r0, r5
 801c62c:	f7ff faba 	bl	801bba4 <__ratio>
 801c630:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801c634:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c63c:	d85f      	bhi.n	801c6fe <_strtod_l+0xa3e>
 801c63e:	f1ba 0f00 	cmp.w	sl, #0
 801c642:	d166      	bne.n	801c712 <_strtod_l+0xa52>
 801c644:	f1b8 0f00 	cmp.w	r8, #0
 801c648:	d14d      	bne.n	801c6e6 <_strtod_l+0xa26>
 801c64a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c64e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801c652:	2b00      	cmp	r3, #0
 801c654:	d162      	bne.n	801c71c <_strtod_l+0xa5c>
 801c656:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801c65a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c662:	d401      	bmi.n	801c668 <_strtod_l+0x9a8>
 801c664:	ee20 db0d 	vmul.f64	d13, d0, d13
 801c668:	eeb1 cb4d 	vneg.f64	d12, d13
 801c66c:	4869      	ldr	r0, [pc, #420]	; (801c814 <_strtod_l+0xb54>)
 801c66e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801c820 <_strtod_l+0xb60>
 801c672:	ea0b 0100 	and.w	r1, fp, r0
 801c676:	4561      	cmp	r1, ip
 801c678:	ec53 2b1c 	vmov	r2, r3, d12
 801c67c:	d17a      	bne.n	801c774 <_strtod_l+0xab4>
 801c67e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801c682:	ec49 8b10 	vmov	d0, r8, r9
 801c686:	910a      	str	r1, [sp, #40]	; 0x28
 801c688:	f7ff f9c2 	bl	801ba10 <__ulp>
 801c68c:	ec49 8b1e 	vmov	d14, r8, r9
 801c690:	4860      	ldr	r0, [pc, #384]	; (801c814 <_strtod_l+0xb54>)
 801c692:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801c696:	ee1e 3a90 	vmov	r3, s29
 801c69a:	4a60      	ldr	r2, [pc, #384]	; (801c81c <_strtod_l+0xb5c>)
 801c69c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c69e:	4018      	ands	r0, r3
 801c6a0:	4290      	cmp	r0, r2
 801c6a2:	ec59 8b1e 	vmov	r8, r9, d14
 801c6a6:	d93c      	bls.n	801c722 <_strtod_l+0xa62>
 801c6a8:	ee18 2a90 	vmov	r2, s17
 801c6ac:	4b5a      	ldr	r3, [pc, #360]	; (801c818 <_strtod_l+0xb58>)
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d104      	bne.n	801c6bc <_strtod_l+0x9fc>
 801c6b2:	ee18 3a10 	vmov	r3, s16
 801c6b6:	3301      	adds	r3, #1
 801c6b8:	f43f ad40 	beq.w	801c13c <_strtod_l+0x47c>
 801c6bc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801c818 <_strtod_l+0xb58>
 801c6c0:	f04f 38ff 	mov.w	r8, #4294967295
 801c6c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	f7fe fe76 	bl	801b3b8 <_Bfree>
 801c6cc:	4639      	mov	r1, r7
 801c6ce:	4620      	mov	r0, r4
 801c6d0:	f7fe fe72 	bl	801b3b8 <_Bfree>
 801c6d4:	4631      	mov	r1, r6
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	f7fe fe6e 	bl	801b3b8 <_Bfree>
 801c6dc:	4629      	mov	r1, r5
 801c6de:	4620      	mov	r0, r4
 801c6e0:	f7fe fe6a 	bl	801b3b8 <_Bfree>
 801c6e4:	e609      	b.n	801c2fa <_strtod_l+0x63a>
 801c6e6:	f1b8 0f01 	cmp.w	r8, #1
 801c6ea:	d103      	bne.n	801c6f4 <_strtod_l+0xa34>
 801c6ec:	f1b9 0f00 	cmp.w	r9, #0
 801c6f0:	f43f ad93 	beq.w	801c21a <_strtod_l+0x55a>
 801c6f4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801c6f8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801c6fc:	e7b6      	b.n	801c66c <_strtod_l+0x9ac>
 801c6fe:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c702:	ee20 db0d 	vmul.f64	d13, d0, d13
 801c706:	f1ba 0f00 	cmp.w	sl, #0
 801c70a:	d0ad      	beq.n	801c668 <_strtod_l+0x9a8>
 801c70c:	eeb0 cb4d 	vmov.f64	d12, d13
 801c710:	e7ac      	b.n	801c66c <_strtod_l+0x9ac>
 801c712:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801c716:	eeb0 db4c 	vmov.f64	d13, d12
 801c71a:	e7a7      	b.n	801c66c <_strtod_l+0x9ac>
 801c71c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801c720:	e7a4      	b.n	801c66c <_strtod_l+0x9ac>
 801c722:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801c726:	9b05      	ldr	r3, [sp, #20]
 801c728:	46cb      	mov	fp, r9
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d1ca      	bne.n	801c6c4 <_strtod_l+0xa04>
 801c72e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c732:	0d1b      	lsrs	r3, r3, #20
 801c734:	051b      	lsls	r3, r3, #20
 801c736:	4299      	cmp	r1, r3
 801c738:	d1c4      	bne.n	801c6c4 <_strtod_l+0xa04>
 801c73a:	ec51 0b1d 	vmov	r0, r1, d13
 801c73e:	f7e4 f813 	bl	8000768 <__aeabi_d2lz>
 801c742:	f7e3 ffcb 	bl	80006dc <__aeabi_l2d>
 801c746:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801c74a:	ec41 0b17 	vmov	d7, r0, r1
 801c74e:	ea4b 0b08 	orr.w	fp, fp, r8
 801c752:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801c756:	ee3d db47 	vsub.f64	d13, d13, d7
 801c75a:	d03c      	beq.n	801c7d6 <_strtod_l+0xb16>
 801c75c:	eeb4 dbca 	vcmpe.f64	d13, d10
 801c760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c764:	f53f acf4 	bmi.w	801c150 <_strtod_l+0x490>
 801c768:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c770:	dda8      	ble.n	801c6c4 <_strtod_l+0xa04>
 801c772:	e4ed      	b.n	801c150 <_strtod_l+0x490>
 801c774:	9805      	ldr	r0, [sp, #20]
 801c776:	b1f0      	cbz	r0, 801c7b6 <_strtod_l+0xaf6>
 801c778:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801c77c:	d81b      	bhi.n	801c7b6 <_strtod_l+0xaf6>
 801c77e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801c808 <_strtod_l+0xb48>
 801c782:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801c786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c78a:	d811      	bhi.n	801c7b0 <_strtod_l+0xaf0>
 801c78c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801c790:	ee1d 3a10 	vmov	r3, s26
 801c794:	2b01      	cmp	r3, #1
 801c796:	bf38      	it	cc
 801c798:	2301      	movcc	r3, #1
 801c79a:	ee0d 3a10 	vmov	s26, r3
 801c79e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801c7a2:	f1ba 0f00 	cmp.w	sl, #0
 801c7a6:	d113      	bne.n	801c7d0 <_strtod_l+0xb10>
 801c7a8:	eeb1 7b4d 	vneg.f64	d7, d13
 801c7ac:	ec53 2b17 	vmov	r2, r3, d7
 801c7b0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801c7b4:	1a43      	subs	r3, r0, r1
 801c7b6:	eeb0 0b48 	vmov.f64	d0, d8
 801c7ba:	ec43 2b1c 	vmov	d12, r2, r3
 801c7be:	910a      	str	r1, [sp, #40]	; 0x28
 801c7c0:	f7ff f926 	bl	801ba10 <__ulp>
 801c7c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c7c6:	eeac 8b00 	vfma.f64	d8, d12, d0
 801c7ca:	ec59 8b18 	vmov	r8, r9, d8
 801c7ce:	e7aa      	b.n	801c726 <_strtod_l+0xa66>
 801c7d0:	eeb0 7b4d 	vmov.f64	d7, d13
 801c7d4:	e7ea      	b.n	801c7ac <_strtod_l+0xaec>
 801c7d6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7de:	f57f af71 	bpl.w	801c6c4 <_strtod_l+0xa04>
 801c7e2:	e4b5      	b.n	801c150 <_strtod_l+0x490>
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	9308      	str	r3, [sp, #32]
 801c7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c7ec:	6013      	str	r3, [r2, #0]
 801c7ee:	f7ff baa6 	b.w	801bd3e <_strtod_l+0x7e>
 801c7f2:	2a65      	cmp	r2, #101	; 0x65
 801c7f4:	f43f aba2 	beq.w	801bf3c <_strtod_l+0x27c>
 801c7f8:	2a45      	cmp	r2, #69	; 0x45
 801c7fa:	f43f ab9f 	beq.w	801bf3c <_strtod_l+0x27c>
 801c7fe:	2101      	movs	r1, #1
 801c800:	f7ff bbd8 	b.w	801bfb4 <_strtod_l+0x2f4>
 801c804:	f3af 8000 	nop.w
 801c808:	ffc00000 	.word	0xffc00000
 801c80c:	41dfffff 	.word	0x41dfffff
 801c810:	000fffff 	.word	0x000fffff
 801c814:	7ff00000 	.word	0x7ff00000
 801c818:	7fefffff 	.word	0x7fefffff
 801c81c:	7c9fffff 	.word	0x7c9fffff
 801c820:	7fe00000 	.word	0x7fe00000

0801c824 <_strtod_r>:
 801c824:	4b01      	ldr	r3, [pc, #4]	; (801c82c <_strtod_r+0x8>)
 801c826:	f7ff ba4b 	b.w	801bcc0 <_strtod_l>
 801c82a:	bf00      	nop
 801c82c:	2400015c 	.word	0x2400015c

0801c830 <_strtol_l.constprop.0>:
 801c830:	2b01      	cmp	r3, #1
 801c832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c836:	d001      	beq.n	801c83c <_strtol_l.constprop.0+0xc>
 801c838:	2b24      	cmp	r3, #36	; 0x24
 801c83a:	d906      	bls.n	801c84a <_strtol_l.constprop.0+0x1a>
 801c83c:	f7fd fe46 	bl	801a4cc <__errno>
 801c840:	2316      	movs	r3, #22
 801c842:	6003      	str	r3, [r0, #0]
 801c844:	2000      	movs	r0, #0
 801c846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c84a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801c930 <_strtol_l.constprop.0+0x100>
 801c84e:	460d      	mov	r5, r1
 801c850:	462e      	mov	r6, r5
 801c852:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c856:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801c85a:	f017 0708 	ands.w	r7, r7, #8
 801c85e:	d1f7      	bne.n	801c850 <_strtol_l.constprop.0+0x20>
 801c860:	2c2d      	cmp	r4, #45	; 0x2d
 801c862:	d132      	bne.n	801c8ca <_strtol_l.constprop.0+0x9a>
 801c864:	782c      	ldrb	r4, [r5, #0]
 801c866:	2701      	movs	r7, #1
 801c868:	1cb5      	adds	r5, r6, #2
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d05b      	beq.n	801c926 <_strtol_l.constprop.0+0xf6>
 801c86e:	2b10      	cmp	r3, #16
 801c870:	d109      	bne.n	801c886 <_strtol_l.constprop.0+0x56>
 801c872:	2c30      	cmp	r4, #48	; 0x30
 801c874:	d107      	bne.n	801c886 <_strtol_l.constprop.0+0x56>
 801c876:	782c      	ldrb	r4, [r5, #0]
 801c878:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c87c:	2c58      	cmp	r4, #88	; 0x58
 801c87e:	d14d      	bne.n	801c91c <_strtol_l.constprop.0+0xec>
 801c880:	786c      	ldrb	r4, [r5, #1]
 801c882:	2310      	movs	r3, #16
 801c884:	3502      	adds	r5, #2
 801c886:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c88a:	f108 38ff 	add.w	r8, r8, #4294967295
 801c88e:	f04f 0e00 	mov.w	lr, #0
 801c892:	fbb8 f9f3 	udiv	r9, r8, r3
 801c896:	4676      	mov	r6, lr
 801c898:	fb03 8a19 	mls	sl, r3, r9, r8
 801c89c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c8a0:	f1bc 0f09 	cmp.w	ip, #9
 801c8a4:	d816      	bhi.n	801c8d4 <_strtol_l.constprop.0+0xa4>
 801c8a6:	4664      	mov	r4, ip
 801c8a8:	42a3      	cmp	r3, r4
 801c8aa:	dd24      	ble.n	801c8f6 <_strtol_l.constprop.0+0xc6>
 801c8ac:	f1be 3fff 	cmp.w	lr, #4294967295
 801c8b0:	d008      	beq.n	801c8c4 <_strtol_l.constprop.0+0x94>
 801c8b2:	45b1      	cmp	r9, r6
 801c8b4:	d31c      	bcc.n	801c8f0 <_strtol_l.constprop.0+0xc0>
 801c8b6:	d101      	bne.n	801c8bc <_strtol_l.constprop.0+0x8c>
 801c8b8:	45a2      	cmp	sl, r4
 801c8ba:	db19      	blt.n	801c8f0 <_strtol_l.constprop.0+0xc0>
 801c8bc:	fb06 4603 	mla	r6, r6, r3, r4
 801c8c0:	f04f 0e01 	mov.w	lr, #1
 801c8c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c8c8:	e7e8      	b.n	801c89c <_strtol_l.constprop.0+0x6c>
 801c8ca:	2c2b      	cmp	r4, #43	; 0x2b
 801c8cc:	bf04      	itt	eq
 801c8ce:	782c      	ldrbeq	r4, [r5, #0]
 801c8d0:	1cb5      	addeq	r5, r6, #2
 801c8d2:	e7ca      	b.n	801c86a <_strtol_l.constprop.0+0x3a>
 801c8d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c8d8:	f1bc 0f19 	cmp.w	ip, #25
 801c8dc:	d801      	bhi.n	801c8e2 <_strtol_l.constprop.0+0xb2>
 801c8de:	3c37      	subs	r4, #55	; 0x37
 801c8e0:	e7e2      	b.n	801c8a8 <_strtol_l.constprop.0+0x78>
 801c8e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c8e6:	f1bc 0f19 	cmp.w	ip, #25
 801c8ea:	d804      	bhi.n	801c8f6 <_strtol_l.constprop.0+0xc6>
 801c8ec:	3c57      	subs	r4, #87	; 0x57
 801c8ee:	e7db      	b.n	801c8a8 <_strtol_l.constprop.0+0x78>
 801c8f0:	f04f 3eff 	mov.w	lr, #4294967295
 801c8f4:	e7e6      	b.n	801c8c4 <_strtol_l.constprop.0+0x94>
 801c8f6:	f1be 3fff 	cmp.w	lr, #4294967295
 801c8fa:	d105      	bne.n	801c908 <_strtol_l.constprop.0+0xd8>
 801c8fc:	2322      	movs	r3, #34	; 0x22
 801c8fe:	6003      	str	r3, [r0, #0]
 801c900:	4646      	mov	r6, r8
 801c902:	b942      	cbnz	r2, 801c916 <_strtol_l.constprop.0+0xe6>
 801c904:	4630      	mov	r0, r6
 801c906:	e79e      	b.n	801c846 <_strtol_l.constprop.0+0x16>
 801c908:	b107      	cbz	r7, 801c90c <_strtol_l.constprop.0+0xdc>
 801c90a:	4276      	negs	r6, r6
 801c90c:	2a00      	cmp	r2, #0
 801c90e:	d0f9      	beq.n	801c904 <_strtol_l.constprop.0+0xd4>
 801c910:	f1be 0f00 	cmp.w	lr, #0
 801c914:	d000      	beq.n	801c918 <_strtol_l.constprop.0+0xe8>
 801c916:	1e69      	subs	r1, r5, #1
 801c918:	6011      	str	r1, [r2, #0]
 801c91a:	e7f3      	b.n	801c904 <_strtol_l.constprop.0+0xd4>
 801c91c:	2430      	movs	r4, #48	; 0x30
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d1b1      	bne.n	801c886 <_strtol_l.constprop.0+0x56>
 801c922:	2308      	movs	r3, #8
 801c924:	e7af      	b.n	801c886 <_strtol_l.constprop.0+0x56>
 801c926:	2c30      	cmp	r4, #48	; 0x30
 801c928:	d0a5      	beq.n	801c876 <_strtol_l.constprop.0+0x46>
 801c92a:	230a      	movs	r3, #10
 801c92c:	e7ab      	b.n	801c886 <_strtol_l.constprop.0+0x56>
 801c92e:	bf00      	nop
 801c930:	0801e3a9 	.word	0x0801e3a9

0801c934 <_strtol_r>:
 801c934:	f7ff bf7c 	b.w	801c830 <_strtol_l.constprop.0>

0801c938 <__ssputs_r>:
 801c938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c93c:	688e      	ldr	r6, [r1, #8]
 801c93e:	461f      	mov	r7, r3
 801c940:	42be      	cmp	r6, r7
 801c942:	680b      	ldr	r3, [r1, #0]
 801c944:	4682      	mov	sl, r0
 801c946:	460c      	mov	r4, r1
 801c948:	4690      	mov	r8, r2
 801c94a:	d82c      	bhi.n	801c9a6 <__ssputs_r+0x6e>
 801c94c:	898a      	ldrh	r2, [r1, #12]
 801c94e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c952:	d026      	beq.n	801c9a2 <__ssputs_r+0x6a>
 801c954:	6965      	ldr	r5, [r4, #20]
 801c956:	6909      	ldr	r1, [r1, #16]
 801c958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c95c:	eba3 0901 	sub.w	r9, r3, r1
 801c960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c964:	1c7b      	adds	r3, r7, #1
 801c966:	444b      	add	r3, r9
 801c968:	106d      	asrs	r5, r5, #1
 801c96a:	429d      	cmp	r5, r3
 801c96c:	bf38      	it	cc
 801c96e:	461d      	movcc	r5, r3
 801c970:	0553      	lsls	r3, r2, #21
 801c972:	d527      	bpl.n	801c9c4 <__ssputs_r+0x8c>
 801c974:	4629      	mov	r1, r5
 801c976:	f7fe fc53 	bl	801b220 <_malloc_r>
 801c97a:	4606      	mov	r6, r0
 801c97c:	b360      	cbz	r0, 801c9d8 <__ssputs_r+0xa0>
 801c97e:	6921      	ldr	r1, [r4, #16]
 801c980:	464a      	mov	r2, r9
 801c982:	f7fd fdd0 	bl	801a526 <memcpy>
 801c986:	89a3      	ldrh	r3, [r4, #12]
 801c988:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c990:	81a3      	strh	r3, [r4, #12]
 801c992:	6126      	str	r6, [r4, #16]
 801c994:	6165      	str	r5, [r4, #20]
 801c996:	444e      	add	r6, r9
 801c998:	eba5 0509 	sub.w	r5, r5, r9
 801c99c:	6026      	str	r6, [r4, #0]
 801c99e:	60a5      	str	r5, [r4, #8]
 801c9a0:	463e      	mov	r6, r7
 801c9a2:	42be      	cmp	r6, r7
 801c9a4:	d900      	bls.n	801c9a8 <__ssputs_r+0x70>
 801c9a6:	463e      	mov	r6, r7
 801c9a8:	6820      	ldr	r0, [r4, #0]
 801c9aa:	4632      	mov	r2, r6
 801c9ac:	4641      	mov	r1, r8
 801c9ae:	f000 f9c9 	bl	801cd44 <memmove>
 801c9b2:	68a3      	ldr	r3, [r4, #8]
 801c9b4:	1b9b      	subs	r3, r3, r6
 801c9b6:	60a3      	str	r3, [r4, #8]
 801c9b8:	6823      	ldr	r3, [r4, #0]
 801c9ba:	4433      	add	r3, r6
 801c9bc:	6023      	str	r3, [r4, #0]
 801c9be:	2000      	movs	r0, #0
 801c9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c9c4:	462a      	mov	r2, r5
 801c9c6:	f000 fda0 	bl	801d50a <_realloc_r>
 801c9ca:	4606      	mov	r6, r0
 801c9cc:	2800      	cmp	r0, #0
 801c9ce:	d1e0      	bne.n	801c992 <__ssputs_r+0x5a>
 801c9d0:	6921      	ldr	r1, [r4, #16]
 801c9d2:	4650      	mov	r0, sl
 801c9d4:	f7fe fbb0 	bl	801b138 <_free_r>
 801c9d8:	230c      	movs	r3, #12
 801c9da:	f8ca 3000 	str.w	r3, [sl]
 801c9de:	89a3      	ldrh	r3, [r4, #12]
 801c9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c9e4:	81a3      	strh	r3, [r4, #12]
 801c9e6:	f04f 30ff 	mov.w	r0, #4294967295
 801c9ea:	e7e9      	b.n	801c9c0 <__ssputs_r+0x88>

0801c9ec <_svfiprintf_r>:
 801c9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9f0:	4698      	mov	r8, r3
 801c9f2:	898b      	ldrh	r3, [r1, #12]
 801c9f4:	061b      	lsls	r3, r3, #24
 801c9f6:	b09d      	sub	sp, #116	; 0x74
 801c9f8:	4607      	mov	r7, r0
 801c9fa:	460d      	mov	r5, r1
 801c9fc:	4614      	mov	r4, r2
 801c9fe:	d50e      	bpl.n	801ca1e <_svfiprintf_r+0x32>
 801ca00:	690b      	ldr	r3, [r1, #16]
 801ca02:	b963      	cbnz	r3, 801ca1e <_svfiprintf_r+0x32>
 801ca04:	2140      	movs	r1, #64	; 0x40
 801ca06:	f7fe fc0b 	bl	801b220 <_malloc_r>
 801ca0a:	6028      	str	r0, [r5, #0]
 801ca0c:	6128      	str	r0, [r5, #16]
 801ca0e:	b920      	cbnz	r0, 801ca1a <_svfiprintf_r+0x2e>
 801ca10:	230c      	movs	r3, #12
 801ca12:	603b      	str	r3, [r7, #0]
 801ca14:	f04f 30ff 	mov.w	r0, #4294967295
 801ca18:	e0d0      	b.n	801cbbc <_svfiprintf_r+0x1d0>
 801ca1a:	2340      	movs	r3, #64	; 0x40
 801ca1c:	616b      	str	r3, [r5, #20]
 801ca1e:	2300      	movs	r3, #0
 801ca20:	9309      	str	r3, [sp, #36]	; 0x24
 801ca22:	2320      	movs	r3, #32
 801ca24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ca28:	f8cd 800c 	str.w	r8, [sp, #12]
 801ca2c:	2330      	movs	r3, #48	; 0x30
 801ca2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801cbd4 <_svfiprintf_r+0x1e8>
 801ca32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ca36:	f04f 0901 	mov.w	r9, #1
 801ca3a:	4623      	mov	r3, r4
 801ca3c:	469a      	mov	sl, r3
 801ca3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca42:	b10a      	cbz	r2, 801ca48 <_svfiprintf_r+0x5c>
 801ca44:	2a25      	cmp	r2, #37	; 0x25
 801ca46:	d1f9      	bne.n	801ca3c <_svfiprintf_r+0x50>
 801ca48:	ebba 0b04 	subs.w	fp, sl, r4
 801ca4c:	d00b      	beq.n	801ca66 <_svfiprintf_r+0x7a>
 801ca4e:	465b      	mov	r3, fp
 801ca50:	4622      	mov	r2, r4
 801ca52:	4629      	mov	r1, r5
 801ca54:	4638      	mov	r0, r7
 801ca56:	f7ff ff6f 	bl	801c938 <__ssputs_r>
 801ca5a:	3001      	adds	r0, #1
 801ca5c:	f000 80a9 	beq.w	801cbb2 <_svfiprintf_r+0x1c6>
 801ca60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ca62:	445a      	add	r2, fp
 801ca64:	9209      	str	r2, [sp, #36]	; 0x24
 801ca66:	f89a 3000 	ldrb.w	r3, [sl]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	f000 80a1 	beq.w	801cbb2 <_svfiprintf_r+0x1c6>
 801ca70:	2300      	movs	r3, #0
 801ca72:	f04f 32ff 	mov.w	r2, #4294967295
 801ca76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca7a:	f10a 0a01 	add.w	sl, sl, #1
 801ca7e:	9304      	str	r3, [sp, #16]
 801ca80:	9307      	str	r3, [sp, #28]
 801ca82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ca86:	931a      	str	r3, [sp, #104]	; 0x68
 801ca88:	4654      	mov	r4, sl
 801ca8a:	2205      	movs	r2, #5
 801ca8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca90:	4850      	ldr	r0, [pc, #320]	; (801cbd4 <_svfiprintf_r+0x1e8>)
 801ca92:	f7e3 fc3d 	bl	8000310 <memchr>
 801ca96:	9a04      	ldr	r2, [sp, #16]
 801ca98:	b9d8      	cbnz	r0, 801cad2 <_svfiprintf_r+0xe6>
 801ca9a:	06d0      	lsls	r0, r2, #27
 801ca9c:	bf44      	itt	mi
 801ca9e:	2320      	movmi	r3, #32
 801caa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801caa4:	0711      	lsls	r1, r2, #28
 801caa6:	bf44      	itt	mi
 801caa8:	232b      	movmi	r3, #43	; 0x2b
 801caaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801caae:	f89a 3000 	ldrb.w	r3, [sl]
 801cab2:	2b2a      	cmp	r3, #42	; 0x2a
 801cab4:	d015      	beq.n	801cae2 <_svfiprintf_r+0xf6>
 801cab6:	9a07      	ldr	r2, [sp, #28]
 801cab8:	4654      	mov	r4, sl
 801caba:	2000      	movs	r0, #0
 801cabc:	f04f 0c0a 	mov.w	ip, #10
 801cac0:	4621      	mov	r1, r4
 801cac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cac6:	3b30      	subs	r3, #48	; 0x30
 801cac8:	2b09      	cmp	r3, #9
 801caca:	d94d      	bls.n	801cb68 <_svfiprintf_r+0x17c>
 801cacc:	b1b0      	cbz	r0, 801cafc <_svfiprintf_r+0x110>
 801cace:	9207      	str	r2, [sp, #28]
 801cad0:	e014      	b.n	801cafc <_svfiprintf_r+0x110>
 801cad2:	eba0 0308 	sub.w	r3, r0, r8
 801cad6:	fa09 f303 	lsl.w	r3, r9, r3
 801cada:	4313      	orrs	r3, r2
 801cadc:	9304      	str	r3, [sp, #16]
 801cade:	46a2      	mov	sl, r4
 801cae0:	e7d2      	b.n	801ca88 <_svfiprintf_r+0x9c>
 801cae2:	9b03      	ldr	r3, [sp, #12]
 801cae4:	1d19      	adds	r1, r3, #4
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	9103      	str	r1, [sp, #12]
 801caea:	2b00      	cmp	r3, #0
 801caec:	bfbb      	ittet	lt
 801caee:	425b      	neglt	r3, r3
 801caf0:	f042 0202 	orrlt.w	r2, r2, #2
 801caf4:	9307      	strge	r3, [sp, #28]
 801caf6:	9307      	strlt	r3, [sp, #28]
 801caf8:	bfb8      	it	lt
 801cafa:	9204      	strlt	r2, [sp, #16]
 801cafc:	7823      	ldrb	r3, [r4, #0]
 801cafe:	2b2e      	cmp	r3, #46	; 0x2e
 801cb00:	d10c      	bne.n	801cb1c <_svfiprintf_r+0x130>
 801cb02:	7863      	ldrb	r3, [r4, #1]
 801cb04:	2b2a      	cmp	r3, #42	; 0x2a
 801cb06:	d134      	bne.n	801cb72 <_svfiprintf_r+0x186>
 801cb08:	9b03      	ldr	r3, [sp, #12]
 801cb0a:	1d1a      	adds	r2, r3, #4
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	9203      	str	r2, [sp, #12]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	bfb8      	it	lt
 801cb14:	f04f 33ff 	movlt.w	r3, #4294967295
 801cb18:	3402      	adds	r4, #2
 801cb1a:	9305      	str	r3, [sp, #20]
 801cb1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801cbe4 <_svfiprintf_r+0x1f8>
 801cb20:	7821      	ldrb	r1, [r4, #0]
 801cb22:	2203      	movs	r2, #3
 801cb24:	4650      	mov	r0, sl
 801cb26:	f7e3 fbf3 	bl	8000310 <memchr>
 801cb2a:	b138      	cbz	r0, 801cb3c <_svfiprintf_r+0x150>
 801cb2c:	9b04      	ldr	r3, [sp, #16]
 801cb2e:	eba0 000a 	sub.w	r0, r0, sl
 801cb32:	2240      	movs	r2, #64	; 0x40
 801cb34:	4082      	lsls	r2, r0
 801cb36:	4313      	orrs	r3, r2
 801cb38:	3401      	adds	r4, #1
 801cb3a:	9304      	str	r3, [sp, #16]
 801cb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb40:	4825      	ldr	r0, [pc, #148]	; (801cbd8 <_svfiprintf_r+0x1ec>)
 801cb42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cb46:	2206      	movs	r2, #6
 801cb48:	f7e3 fbe2 	bl	8000310 <memchr>
 801cb4c:	2800      	cmp	r0, #0
 801cb4e:	d038      	beq.n	801cbc2 <_svfiprintf_r+0x1d6>
 801cb50:	4b22      	ldr	r3, [pc, #136]	; (801cbdc <_svfiprintf_r+0x1f0>)
 801cb52:	bb1b      	cbnz	r3, 801cb9c <_svfiprintf_r+0x1b0>
 801cb54:	9b03      	ldr	r3, [sp, #12]
 801cb56:	3307      	adds	r3, #7
 801cb58:	f023 0307 	bic.w	r3, r3, #7
 801cb5c:	3308      	adds	r3, #8
 801cb5e:	9303      	str	r3, [sp, #12]
 801cb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb62:	4433      	add	r3, r6
 801cb64:	9309      	str	r3, [sp, #36]	; 0x24
 801cb66:	e768      	b.n	801ca3a <_svfiprintf_r+0x4e>
 801cb68:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb6c:	460c      	mov	r4, r1
 801cb6e:	2001      	movs	r0, #1
 801cb70:	e7a6      	b.n	801cac0 <_svfiprintf_r+0xd4>
 801cb72:	2300      	movs	r3, #0
 801cb74:	3401      	adds	r4, #1
 801cb76:	9305      	str	r3, [sp, #20]
 801cb78:	4619      	mov	r1, r3
 801cb7a:	f04f 0c0a 	mov.w	ip, #10
 801cb7e:	4620      	mov	r0, r4
 801cb80:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb84:	3a30      	subs	r2, #48	; 0x30
 801cb86:	2a09      	cmp	r2, #9
 801cb88:	d903      	bls.n	801cb92 <_svfiprintf_r+0x1a6>
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d0c6      	beq.n	801cb1c <_svfiprintf_r+0x130>
 801cb8e:	9105      	str	r1, [sp, #20]
 801cb90:	e7c4      	b.n	801cb1c <_svfiprintf_r+0x130>
 801cb92:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb96:	4604      	mov	r4, r0
 801cb98:	2301      	movs	r3, #1
 801cb9a:	e7f0      	b.n	801cb7e <_svfiprintf_r+0x192>
 801cb9c:	ab03      	add	r3, sp, #12
 801cb9e:	9300      	str	r3, [sp, #0]
 801cba0:	462a      	mov	r2, r5
 801cba2:	4b0f      	ldr	r3, [pc, #60]	; (801cbe0 <_svfiprintf_r+0x1f4>)
 801cba4:	a904      	add	r1, sp, #16
 801cba6:	4638      	mov	r0, r7
 801cba8:	f7fc fd6a 	bl	8019680 <_printf_float>
 801cbac:	1c42      	adds	r2, r0, #1
 801cbae:	4606      	mov	r6, r0
 801cbb0:	d1d6      	bne.n	801cb60 <_svfiprintf_r+0x174>
 801cbb2:	89ab      	ldrh	r3, [r5, #12]
 801cbb4:	065b      	lsls	r3, r3, #25
 801cbb6:	f53f af2d 	bmi.w	801ca14 <_svfiprintf_r+0x28>
 801cbba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cbbc:	b01d      	add	sp, #116	; 0x74
 801cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbc2:	ab03      	add	r3, sp, #12
 801cbc4:	9300      	str	r3, [sp, #0]
 801cbc6:	462a      	mov	r2, r5
 801cbc8:	4b05      	ldr	r3, [pc, #20]	; (801cbe0 <_svfiprintf_r+0x1f4>)
 801cbca:	a904      	add	r1, sp, #16
 801cbcc:	4638      	mov	r0, r7
 801cbce:	f7fc ffdf 	bl	8019b90 <_printf_i>
 801cbd2:	e7eb      	b.n	801cbac <_svfiprintf_r+0x1c0>
 801cbd4:	0801e4a9 	.word	0x0801e4a9
 801cbd8:	0801e4b3 	.word	0x0801e4b3
 801cbdc:	08019681 	.word	0x08019681
 801cbe0:	0801c939 	.word	0x0801c939
 801cbe4:	0801e4af 	.word	0x0801e4af

0801cbe8 <__sflush_r>:
 801cbe8:	898a      	ldrh	r2, [r1, #12]
 801cbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbee:	4605      	mov	r5, r0
 801cbf0:	0710      	lsls	r0, r2, #28
 801cbf2:	460c      	mov	r4, r1
 801cbf4:	d458      	bmi.n	801cca8 <__sflush_r+0xc0>
 801cbf6:	684b      	ldr	r3, [r1, #4]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	dc05      	bgt.n	801cc08 <__sflush_r+0x20>
 801cbfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	dc02      	bgt.n	801cc08 <__sflush_r+0x20>
 801cc02:	2000      	movs	r0, #0
 801cc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc0a:	2e00      	cmp	r6, #0
 801cc0c:	d0f9      	beq.n	801cc02 <__sflush_r+0x1a>
 801cc0e:	2300      	movs	r3, #0
 801cc10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cc14:	682f      	ldr	r7, [r5, #0]
 801cc16:	6a21      	ldr	r1, [r4, #32]
 801cc18:	602b      	str	r3, [r5, #0]
 801cc1a:	d032      	beq.n	801cc82 <__sflush_r+0x9a>
 801cc1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cc1e:	89a3      	ldrh	r3, [r4, #12]
 801cc20:	075a      	lsls	r2, r3, #29
 801cc22:	d505      	bpl.n	801cc30 <__sflush_r+0x48>
 801cc24:	6863      	ldr	r3, [r4, #4]
 801cc26:	1ac0      	subs	r0, r0, r3
 801cc28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cc2a:	b10b      	cbz	r3, 801cc30 <__sflush_r+0x48>
 801cc2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cc2e:	1ac0      	subs	r0, r0, r3
 801cc30:	2300      	movs	r3, #0
 801cc32:	4602      	mov	r2, r0
 801cc34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc36:	6a21      	ldr	r1, [r4, #32]
 801cc38:	4628      	mov	r0, r5
 801cc3a:	47b0      	blx	r6
 801cc3c:	1c43      	adds	r3, r0, #1
 801cc3e:	89a3      	ldrh	r3, [r4, #12]
 801cc40:	d106      	bne.n	801cc50 <__sflush_r+0x68>
 801cc42:	6829      	ldr	r1, [r5, #0]
 801cc44:	291d      	cmp	r1, #29
 801cc46:	d82b      	bhi.n	801cca0 <__sflush_r+0xb8>
 801cc48:	4a29      	ldr	r2, [pc, #164]	; (801ccf0 <__sflush_r+0x108>)
 801cc4a:	410a      	asrs	r2, r1
 801cc4c:	07d6      	lsls	r6, r2, #31
 801cc4e:	d427      	bmi.n	801cca0 <__sflush_r+0xb8>
 801cc50:	2200      	movs	r2, #0
 801cc52:	6062      	str	r2, [r4, #4]
 801cc54:	04d9      	lsls	r1, r3, #19
 801cc56:	6922      	ldr	r2, [r4, #16]
 801cc58:	6022      	str	r2, [r4, #0]
 801cc5a:	d504      	bpl.n	801cc66 <__sflush_r+0x7e>
 801cc5c:	1c42      	adds	r2, r0, #1
 801cc5e:	d101      	bne.n	801cc64 <__sflush_r+0x7c>
 801cc60:	682b      	ldr	r3, [r5, #0]
 801cc62:	b903      	cbnz	r3, 801cc66 <__sflush_r+0x7e>
 801cc64:	6560      	str	r0, [r4, #84]	; 0x54
 801cc66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cc68:	602f      	str	r7, [r5, #0]
 801cc6a:	2900      	cmp	r1, #0
 801cc6c:	d0c9      	beq.n	801cc02 <__sflush_r+0x1a>
 801cc6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cc72:	4299      	cmp	r1, r3
 801cc74:	d002      	beq.n	801cc7c <__sflush_r+0x94>
 801cc76:	4628      	mov	r0, r5
 801cc78:	f7fe fa5e 	bl	801b138 <_free_r>
 801cc7c:	2000      	movs	r0, #0
 801cc7e:	6360      	str	r0, [r4, #52]	; 0x34
 801cc80:	e7c0      	b.n	801cc04 <__sflush_r+0x1c>
 801cc82:	2301      	movs	r3, #1
 801cc84:	4628      	mov	r0, r5
 801cc86:	47b0      	blx	r6
 801cc88:	1c41      	adds	r1, r0, #1
 801cc8a:	d1c8      	bne.n	801cc1e <__sflush_r+0x36>
 801cc8c:	682b      	ldr	r3, [r5, #0]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d0c5      	beq.n	801cc1e <__sflush_r+0x36>
 801cc92:	2b1d      	cmp	r3, #29
 801cc94:	d001      	beq.n	801cc9a <__sflush_r+0xb2>
 801cc96:	2b16      	cmp	r3, #22
 801cc98:	d101      	bne.n	801cc9e <__sflush_r+0xb6>
 801cc9a:	602f      	str	r7, [r5, #0]
 801cc9c:	e7b1      	b.n	801cc02 <__sflush_r+0x1a>
 801cc9e:	89a3      	ldrh	r3, [r4, #12]
 801cca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cca4:	81a3      	strh	r3, [r4, #12]
 801cca6:	e7ad      	b.n	801cc04 <__sflush_r+0x1c>
 801cca8:	690f      	ldr	r7, [r1, #16]
 801ccaa:	2f00      	cmp	r7, #0
 801ccac:	d0a9      	beq.n	801cc02 <__sflush_r+0x1a>
 801ccae:	0793      	lsls	r3, r2, #30
 801ccb0:	680e      	ldr	r6, [r1, #0]
 801ccb2:	bf08      	it	eq
 801ccb4:	694b      	ldreq	r3, [r1, #20]
 801ccb6:	600f      	str	r7, [r1, #0]
 801ccb8:	bf18      	it	ne
 801ccba:	2300      	movne	r3, #0
 801ccbc:	eba6 0807 	sub.w	r8, r6, r7
 801ccc0:	608b      	str	r3, [r1, #8]
 801ccc2:	f1b8 0f00 	cmp.w	r8, #0
 801ccc6:	dd9c      	ble.n	801cc02 <__sflush_r+0x1a>
 801ccc8:	6a21      	ldr	r1, [r4, #32]
 801ccca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cccc:	4643      	mov	r3, r8
 801ccce:	463a      	mov	r2, r7
 801ccd0:	4628      	mov	r0, r5
 801ccd2:	47b0      	blx	r6
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	dc06      	bgt.n	801cce6 <__sflush_r+0xfe>
 801ccd8:	89a3      	ldrh	r3, [r4, #12]
 801ccda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccde:	81a3      	strh	r3, [r4, #12]
 801cce0:	f04f 30ff 	mov.w	r0, #4294967295
 801cce4:	e78e      	b.n	801cc04 <__sflush_r+0x1c>
 801cce6:	4407      	add	r7, r0
 801cce8:	eba8 0800 	sub.w	r8, r8, r0
 801ccec:	e7e9      	b.n	801ccc2 <__sflush_r+0xda>
 801ccee:	bf00      	nop
 801ccf0:	dfbffffe 	.word	0xdfbffffe

0801ccf4 <_fflush_r>:
 801ccf4:	b538      	push	{r3, r4, r5, lr}
 801ccf6:	690b      	ldr	r3, [r1, #16]
 801ccf8:	4605      	mov	r5, r0
 801ccfa:	460c      	mov	r4, r1
 801ccfc:	b913      	cbnz	r3, 801cd04 <_fflush_r+0x10>
 801ccfe:	2500      	movs	r5, #0
 801cd00:	4628      	mov	r0, r5
 801cd02:	bd38      	pop	{r3, r4, r5, pc}
 801cd04:	b118      	cbz	r0, 801cd0e <_fflush_r+0x1a>
 801cd06:	6a03      	ldr	r3, [r0, #32]
 801cd08:	b90b      	cbnz	r3, 801cd0e <_fflush_r+0x1a>
 801cd0a:	f7fd faf3 	bl	801a2f4 <__sinit>
 801cd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d0f3      	beq.n	801ccfe <_fflush_r+0xa>
 801cd16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cd18:	07d0      	lsls	r0, r2, #31
 801cd1a:	d404      	bmi.n	801cd26 <_fflush_r+0x32>
 801cd1c:	0599      	lsls	r1, r3, #22
 801cd1e:	d402      	bmi.n	801cd26 <_fflush_r+0x32>
 801cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd22:	f7fd fbfe 	bl	801a522 <__retarget_lock_acquire_recursive>
 801cd26:	4628      	mov	r0, r5
 801cd28:	4621      	mov	r1, r4
 801cd2a:	f7ff ff5d 	bl	801cbe8 <__sflush_r>
 801cd2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd30:	07da      	lsls	r2, r3, #31
 801cd32:	4605      	mov	r5, r0
 801cd34:	d4e4      	bmi.n	801cd00 <_fflush_r+0xc>
 801cd36:	89a3      	ldrh	r3, [r4, #12]
 801cd38:	059b      	lsls	r3, r3, #22
 801cd3a:	d4e1      	bmi.n	801cd00 <_fflush_r+0xc>
 801cd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd3e:	f7fd fbf1 	bl	801a524 <__retarget_lock_release_recursive>
 801cd42:	e7dd      	b.n	801cd00 <_fflush_r+0xc>

0801cd44 <memmove>:
 801cd44:	4288      	cmp	r0, r1
 801cd46:	b510      	push	{r4, lr}
 801cd48:	eb01 0402 	add.w	r4, r1, r2
 801cd4c:	d902      	bls.n	801cd54 <memmove+0x10>
 801cd4e:	4284      	cmp	r4, r0
 801cd50:	4623      	mov	r3, r4
 801cd52:	d807      	bhi.n	801cd64 <memmove+0x20>
 801cd54:	1e43      	subs	r3, r0, #1
 801cd56:	42a1      	cmp	r1, r4
 801cd58:	d008      	beq.n	801cd6c <memmove+0x28>
 801cd5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cd5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cd62:	e7f8      	b.n	801cd56 <memmove+0x12>
 801cd64:	4402      	add	r2, r0
 801cd66:	4601      	mov	r1, r0
 801cd68:	428a      	cmp	r2, r1
 801cd6a:	d100      	bne.n	801cd6e <memmove+0x2a>
 801cd6c:	bd10      	pop	{r4, pc}
 801cd6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cd72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cd76:	e7f7      	b.n	801cd68 <memmove+0x24>

0801cd78 <strncmp>:
 801cd78:	b510      	push	{r4, lr}
 801cd7a:	b16a      	cbz	r2, 801cd98 <strncmp+0x20>
 801cd7c:	3901      	subs	r1, #1
 801cd7e:	1884      	adds	r4, r0, r2
 801cd80:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cd84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801cd88:	429a      	cmp	r2, r3
 801cd8a:	d103      	bne.n	801cd94 <strncmp+0x1c>
 801cd8c:	42a0      	cmp	r0, r4
 801cd8e:	d001      	beq.n	801cd94 <strncmp+0x1c>
 801cd90:	2a00      	cmp	r2, #0
 801cd92:	d1f5      	bne.n	801cd80 <strncmp+0x8>
 801cd94:	1ad0      	subs	r0, r2, r3
 801cd96:	bd10      	pop	{r4, pc}
 801cd98:	4610      	mov	r0, r2
 801cd9a:	e7fc      	b.n	801cd96 <strncmp+0x1e>

0801cd9c <_sbrk_r>:
 801cd9c:	b538      	push	{r3, r4, r5, lr}
 801cd9e:	4d06      	ldr	r5, [pc, #24]	; (801cdb8 <_sbrk_r+0x1c>)
 801cda0:	2300      	movs	r3, #0
 801cda2:	4604      	mov	r4, r0
 801cda4:	4608      	mov	r0, r1
 801cda6:	602b      	str	r3, [r5, #0]
 801cda8:	f7e6 fafc 	bl	80033a4 <_sbrk>
 801cdac:	1c43      	adds	r3, r0, #1
 801cdae:	d102      	bne.n	801cdb6 <_sbrk_r+0x1a>
 801cdb0:	682b      	ldr	r3, [r5, #0]
 801cdb2:	b103      	cbz	r3, 801cdb6 <_sbrk_r+0x1a>
 801cdb4:	6023      	str	r3, [r4, #0]
 801cdb6:	bd38      	pop	{r3, r4, r5, pc}
 801cdb8:	24003620 	.word	0x24003620
 801cdbc:	00000000 	.word	0x00000000

0801cdc0 <nan>:
 801cdc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cdc8 <nan+0x8>
 801cdc4:	4770      	bx	lr
 801cdc6:	bf00      	nop
 801cdc8:	00000000 	.word	0x00000000
 801cdcc:	7ff80000 	.word	0x7ff80000

0801cdd0 <__assert_func>:
 801cdd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cdd2:	4614      	mov	r4, r2
 801cdd4:	461a      	mov	r2, r3
 801cdd6:	4b09      	ldr	r3, [pc, #36]	; (801cdfc <__assert_func+0x2c>)
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	4605      	mov	r5, r0
 801cddc:	68d8      	ldr	r0, [r3, #12]
 801cdde:	b14c      	cbz	r4, 801cdf4 <__assert_func+0x24>
 801cde0:	4b07      	ldr	r3, [pc, #28]	; (801ce00 <__assert_func+0x30>)
 801cde2:	9100      	str	r1, [sp, #0]
 801cde4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cde8:	4906      	ldr	r1, [pc, #24]	; (801ce04 <__assert_func+0x34>)
 801cdea:	462b      	mov	r3, r5
 801cdec:	f000 fbca 	bl	801d584 <fiprintf>
 801cdf0:	f000 fbda 	bl	801d5a8 <abort>
 801cdf4:	4b04      	ldr	r3, [pc, #16]	; (801ce08 <__assert_func+0x38>)
 801cdf6:	461c      	mov	r4, r3
 801cdf8:	e7f3      	b.n	801cde2 <__assert_func+0x12>
 801cdfa:	bf00      	nop
 801cdfc:	24000158 	.word	0x24000158
 801ce00:	0801e4c2 	.word	0x0801e4c2
 801ce04:	0801e4cf 	.word	0x0801e4cf
 801ce08:	0801e4fd 	.word	0x0801e4fd

0801ce0c <_calloc_r>:
 801ce0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce0e:	fba1 2402 	umull	r2, r4, r1, r2
 801ce12:	b94c      	cbnz	r4, 801ce28 <_calloc_r+0x1c>
 801ce14:	4611      	mov	r1, r2
 801ce16:	9201      	str	r2, [sp, #4]
 801ce18:	f7fe fa02 	bl	801b220 <_malloc_r>
 801ce1c:	9a01      	ldr	r2, [sp, #4]
 801ce1e:	4605      	mov	r5, r0
 801ce20:	b930      	cbnz	r0, 801ce30 <_calloc_r+0x24>
 801ce22:	4628      	mov	r0, r5
 801ce24:	b003      	add	sp, #12
 801ce26:	bd30      	pop	{r4, r5, pc}
 801ce28:	220c      	movs	r2, #12
 801ce2a:	6002      	str	r2, [r0, #0]
 801ce2c:	2500      	movs	r5, #0
 801ce2e:	e7f8      	b.n	801ce22 <_calloc_r+0x16>
 801ce30:	4621      	mov	r1, r4
 801ce32:	f7fd faf8 	bl	801a426 <memset>
 801ce36:	e7f4      	b.n	801ce22 <_calloc_r+0x16>

0801ce38 <rshift>:
 801ce38:	6903      	ldr	r3, [r0, #16]
 801ce3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ce3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce42:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ce46:	f100 0414 	add.w	r4, r0, #20
 801ce4a:	dd45      	ble.n	801ced8 <rshift+0xa0>
 801ce4c:	f011 011f 	ands.w	r1, r1, #31
 801ce50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ce54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ce58:	d10c      	bne.n	801ce74 <rshift+0x3c>
 801ce5a:	f100 0710 	add.w	r7, r0, #16
 801ce5e:	4629      	mov	r1, r5
 801ce60:	42b1      	cmp	r1, r6
 801ce62:	d334      	bcc.n	801cece <rshift+0x96>
 801ce64:	1a9b      	subs	r3, r3, r2
 801ce66:	009b      	lsls	r3, r3, #2
 801ce68:	1eea      	subs	r2, r5, #3
 801ce6a:	4296      	cmp	r6, r2
 801ce6c:	bf38      	it	cc
 801ce6e:	2300      	movcc	r3, #0
 801ce70:	4423      	add	r3, r4
 801ce72:	e015      	b.n	801cea0 <rshift+0x68>
 801ce74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ce78:	f1c1 0820 	rsb	r8, r1, #32
 801ce7c:	40cf      	lsrs	r7, r1
 801ce7e:	f105 0e04 	add.w	lr, r5, #4
 801ce82:	46a1      	mov	r9, r4
 801ce84:	4576      	cmp	r6, lr
 801ce86:	46f4      	mov	ip, lr
 801ce88:	d815      	bhi.n	801ceb6 <rshift+0x7e>
 801ce8a:	1a9a      	subs	r2, r3, r2
 801ce8c:	0092      	lsls	r2, r2, #2
 801ce8e:	3a04      	subs	r2, #4
 801ce90:	3501      	adds	r5, #1
 801ce92:	42ae      	cmp	r6, r5
 801ce94:	bf38      	it	cc
 801ce96:	2200      	movcc	r2, #0
 801ce98:	18a3      	adds	r3, r4, r2
 801ce9a:	50a7      	str	r7, [r4, r2]
 801ce9c:	b107      	cbz	r7, 801cea0 <rshift+0x68>
 801ce9e:	3304      	adds	r3, #4
 801cea0:	1b1a      	subs	r2, r3, r4
 801cea2:	42a3      	cmp	r3, r4
 801cea4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cea8:	bf08      	it	eq
 801ceaa:	2300      	moveq	r3, #0
 801ceac:	6102      	str	r2, [r0, #16]
 801ceae:	bf08      	it	eq
 801ceb0:	6143      	streq	r3, [r0, #20]
 801ceb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ceb6:	f8dc c000 	ldr.w	ip, [ip]
 801ceba:	fa0c fc08 	lsl.w	ip, ip, r8
 801cebe:	ea4c 0707 	orr.w	r7, ip, r7
 801cec2:	f849 7b04 	str.w	r7, [r9], #4
 801cec6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ceca:	40cf      	lsrs	r7, r1
 801cecc:	e7da      	b.n	801ce84 <rshift+0x4c>
 801cece:	f851 cb04 	ldr.w	ip, [r1], #4
 801ced2:	f847 cf04 	str.w	ip, [r7, #4]!
 801ced6:	e7c3      	b.n	801ce60 <rshift+0x28>
 801ced8:	4623      	mov	r3, r4
 801ceda:	e7e1      	b.n	801cea0 <rshift+0x68>

0801cedc <__hexdig_fun>:
 801cedc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cee0:	2b09      	cmp	r3, #9
 801cee2:	d802      	bhi.n	801ceea <__hexdig_fun+0xe>
 801cee4:	3820      	subs	r0, #32
 801cee6:	b2c0      	uxtb	r0, r0
 801cee8:	4770      	bx	lr
 801ceea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ceee:	2b05      	cmp	r3, #5
 801cef0:	d801      	bhi.n	801cef6 <__hexdig_fun+0x1a>
 801cef2:	3847      	subs	r0, #71	; 0x47
 801cef4:	e7f7      	b.n	801cee6 <__hexdig_fun+0xa>
 801cef6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801cefa:	2b05      	cmp	r3, #5
 801cefc:	d801      	bhi.n	801cf02 <__hexdig_fun+0x26>
 801cefe:	3827      	subs	r0, #39	; 0x27
 801cf00:	e7f1      	b.n	801cee6 <__hexdig_fun+0xa>
 801cf02:	2000      	movs	r0, #0
 801cf04:	4770      	bx	lr
	...

0801cf08 <__gethex>:
 801cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf0c:	4617      	mov	r7, r2
 801cf0e:	680a      	ldr	r2, [r1, #0]
 801cf10:	b085      	sub	sp, #20
 801cf12:	f102 0b02 	add.w	fp, r2, #2
 801cf16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801cf1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801cf1e:	4681      	mov	r9, r0
 801cf20:	468a      	mov	sl, r1
 801cf22:	9302      	str	r3, [sp, #8]
 801cf24:	32fe      	adds	r2, #254	; 0xfe
 801cf26:	eb02 030b 	add.w	r3, r2, fp
 801cf2a:	46d8      	mov	r8, fp
 801cf2c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801cf30:	9301      	str	r3, [sp, #4]
 801cf32:	2830      	cmp	r0, #48	; 0x30
 801cf34:	d0f7      	beq.n	801cf26 <__gethex+0x1e>
 801cf36:	f7ff ffd1 	bl	801cedc <__hexdig_fun>
 801cf3a:	4604      	mov	r4, r0
 801cf3c:	2800      	cmp	r0, #0
 801cf3e:	d138      	bne.n	801cfb2 <__gethex+0xaa>
 801cf40:	49a7      	ldr	r1, [pc, #668]	; (801d1e0 <__gethex+0x2d8>)
 801cf42:	2201      	movs	r2, #1
 801cf44:	4640      	mov	r0, r8
 801cf46:	f7ff ff17 	bl	801cd78 <strncmp>
 801cf4a:	4606      	mov	r6, r0
 801cf4c:	2800      	cmp	r0, #0
 801cf4e:	d169      	bne.n	801d024 <__gethex+0x11c>
 801cf50:	f898 0001 	ldrb.w	r0, [r8, #1]
 801cf54:	465d      	mov	r5, fp
 801cf56:	f7ff ffc1 	bl	801cedc <__hexdig_fun>
 801cf5a:	2800      	cmp	r0, #0
 801cf5c:	d064      	beq.n	801d028 <__gethex+0x120>
 801cf5e:	465a      	mov	r2, fp
 801cf60:	7810      	ldrb	r0, [r2, #0]
 801cf62:	2830      	cmp	r0, #48	; 0x30
 801cf64:	4690      	mov	r8, r2
 801cf66:	f102 0201 	add.w	r2, r2, #1
 801cf6a:	d0f9      	beq.n	801cf60 <__gethex+0x58>
 801cf6c:	f7ff ffb6 	bl	801cedc <__hexdig_fun>
 801cf70:	2301      	movs	r3, #1
 801cf72:	fab0 f480 	clz	r4, r0
 801cf76:	0964      	lsrs	r4, r4, #5
 801cf78:	465e      	mov	r6, fp
 801cf7a:	9301      	str	r3, [sp, #4]
 801cf7c:	4642      	mov	r2, r8
 801cf7e:	4615      	mov	r5, r2
 801cf80:	3201      	adds	r2, #1
 801cf82:	7828      	ldrb	r0, [r5, #0]
 801cf84:	f7ff ffaa 	bl	801cedc <__hexdig_fun>
 801cf88:	2800      	cmp	r0, #0
 801cf8a:	d1f8      	bne.n	801cf7e <__gethex+0x76>
 801cf8c:	4994      	ldr	r1, [pc, #592]	; (801d1e0 <__gethex+0x2d8>)
 801cf8e:	2201      	movs	r2, #1
 801cf90:	4628      	mov	r0, r5
 801cf92:	f7ff fef1 	bl	801cd78 <strncmp>
 801cf96:	b978      	cbnz	r0, 801cfb8 <__gethex+0xb0>
 801cf98:	b946      	cbnz	r6, 801cfac <__gethex+0xa4>
 801cf9a:	1c6e      	adds	r6, r5, #1
 801cf9c:	4632      	mov	r2, r6
 801cf9e:	4615      	mov	r5, r2
 801cfa0:	3201      	adds	r2, #1
 801cfa2:	7828      	ldrb	r0, [r5, #0]
 801cfa4:	f7ff ff9a 	bl	801cedc <__hexdig_fun>
 801cfa8:	2800      	cmp	r0, #0
 801cfaa:	d1f8      	bne.n	801cf9e <__gethex+0x96>
 801cfac:	1b73      	subs	r3, r6, r5
 801cfae:	009e      	lsls	r6, r3, #2
 801cfb0:	e004      	b.n	801cfbc <__gethex+0xb4>
 801cfb2:	2400      	movs	r4, #0
 801cfb4:	4626      	mov	r6, r4
 801cfb6:	e7e1      	b.n	801cf7c <__gethex+0x74>
 801cfb8:	2e00      	cmp	r6, #0
 801cfba:	d1f7      	bne.n	801cfac <__gethex+0xa4>
 801cfbc:	782b      	ldrb	r3, [r5, #0]
 801cfbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cfc2:	2b50      	cmp	r3, #80	; 0x50
 801cfc4:	d13d      	bne.n	801d042 <__gethex+0x13a>
 801cfc6:	786b      	ldrb	r3, [r5, #1]
 801cfc8:	2b2b      	cmp	r3, #43	; 0x2b
 801cfca:	d02f      	beq.n	801d02c <__gethex+0x124>
 801cfcc:	2b2d      	cmp	r3, #45	; 0x2d
 801cfce:	d031      	beq.n	801d034 <__gethex+0x12c>
 801cfd0:	1c69      	adds	r1, r5, #1
 801cfd2:	f04f 0b00 	mov.w	fp, #0
 801cfd6:	7808      	ldrb	r0, [r1, #0]
 801cfd8:	f7ff ff80 	bl	801cedc <__hexdig_fun>
 801cfdc:	1e42      	subs	r2, r0, #1
 801cfde:	b2d2      	uxtb	r2, r2
 801cfe0:	2a18      	cmp	r2, #24
 801cfe2:	d82e      	bhi.n	801d042 <__gethex+0x13a>
 801cfe4:	f1a0 0210 	sub.w	r2, r0, #16
 801cfe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801cfec:	f7ff ff76 	bl	801cedc <__hexdig_fun>
 801cff0:	f100 3cff 	add.w	ip, r0, #4294967295
 801cff4:	fa5f fc8c 	uxtb.w	ip, ip
 801cff8:	f1bc 0f18 	cmp.w	ip, #24
 801cffc:	d91d      	bls.n	801d03a <__gethex+0x132>
 801cffe:	f1bb 0f00 	cmp.w	fp, #0
 801d002:	d000      	beq.n	801d006 <__gethex+0xfe>
 801d004:	4252      	negs	r2, r2
 801d006:	4416      	add	r6, r2
 801d008:	f8ca 1000 	str.w	r1, [sl]
 801d00c:	b1dc      	cbz	r4, 801d046 <__gethex+0x13e>
 801d00e:	9b01      	ldr	r3, [sp, #4]
 801d010:	2b00      	cmp	r3, #0
 801d012:	bf14      	ite	ne
 801d014:	f04f 0800 	movne.w	r8, #0
 801d018:	f04f 0806 	moveq.w	r8, #6
 801d01c:	4640      	mov	r0, r8
 801d01e:	b005      	add	sp, #20
 801d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d024:	4645      	mov	r5, r8
 801d026:	4626      	mov	r6, r4
 801d028:	2401      	movs	r4, #1
 801d02a:	e7c7      	b.n	801cfbc <__gethex+0xb4>
 801d02c:	f04f 0b00 	mov.w	fp, #0
 801d030:	1ca9      	adds	r1, r5, #2
 801d032:	e7d0      	b.n	801cfd6 <__gethex+0xce>
 801d034:	f04f 0b01 	mov.w	fp, #1
 801d038:	e7fa      	b.n	801d030 <__gethex+0x128>
 801d03a:	230a      	movs	r3, #10
 801d03c:	fb03 0002 	mla	r0, r3, r2, r0
 801d040:	e7d0      	b.n	801cfe4 <__gethex+0xdc>
 801d042:	4629      	mov	r1, r5
 801d044:	e7e0      	b.n	801d008 <__gethex+0x100>
 801d046:	eba5 0308 	sub.w	r3, r5, r8
 801d04a:	3b01      	subs	r3, #1
 801d04c:	4621      	mov	r1, r4
 801d04e:	2b07      	cmp	r3, #7
 801d050:	dc0a      	bgt.n	801d068 <__gethex+0x160>
 801d052:	4648      	mov	r0, r9
 801d054:	f7fe f970 	bl	801b338 <_Balloc>
 801d058:	4604      	mov	r4, r0
 801d05a:	b940      	cbnz	r0, 801d06e <__gethex+0x166>
 801d05c:	4b61      	ldr	r3, [pc, #388]	; (801d1e4 <__gethex+0x2dc>)
 801d05e:	4602      	mov	r2, r0
 801d060:	21e4      	movs	r1, #228	; 0xe4
 801d062:	4861      	ldr	r0, [pc, #388]	; (801d1e8 <__gethex+0x2e0>)
 801d064:	f7ff feb4 	bl	801cdd0 <__assert_func>
 801d068:	3101      	adds	r1, #1
 801d06a:	105b      	asrs	r3, r3, #1
 801d06c:	e7ef      	b.n	801d04e <__gethex+0x146>
 801d06e:	f100 0a14 	add.w	sl, r0, #20
 801d072:	2300      	movs	r3, #0
 801d074:	495a      	ldr	r1, [pc, #360]	; (801d1e0 <__gethex+0x2d8>)
 801d076:	f8cd a004 	str.w	sl, [sp, #4]
 801d07a:	469b      	mov	fp, r3
 801d07c:	45a8      	cmp	r8, r5
 801d07e:	d342      	bcc.n	801d106 <__gethex+0x1fe>
 801d080:	9801      	ldr	r0, [sp, #4]
 801d082:	f840 bb04 	str.w	fp, [r0], #4
 801d086:	eba0 000a 	sub.w	r0, r0, sl
 801d08a:	1080      	asrs	r0, r0, #2
 801d08c:	6120      	str	r0, [r4, #16]
 801d08e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801d092:	4658      	mov	r0, fp
 801d094:	f7fe fa42 	bl	801b51c <__hi0bits>
 801d098:	683d      	ldr	r5, [r7, #0]
 801d09a:	eba8 0000 	sub.w	r0, r8, r0
 801d09e:	42a8      	cmp	r0, r5
 801d0a0:	dd59      	ble.n	801d156 <__gethex+0x24e>
 801d0a2:	eba0 0805 	sub.w	r8, r0, r5
 801d0a6:	4641      	mov	r1, r8
 801d0a8:	4620      	mov	r0, r4
 801d0aa:	f7fe fdce 	bl	801bc4a <__any_on>
 801d0ae:	4683      	mov	fp, r0
 801d0b0:	b1b8      	cbz	r0, 801d0e2 <__gethex+0x1da>
 801d0b2:	f108 33ff 	add.w	r3, r8, #4294967295
 801d0b6:	1159      	asrs	r1, r3, #5
 801d0b8:	f003 021f 	and.w	r2, r3, #31
 801d0bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d0c0:	f04f 0b01 	mov.w	fp, #1
 801d0c4:	fa0b f202 	lsl.w	r2, fp, r2
 801d0c8:	420a      	tst	r2, r1
 801d0ca:	d00a      	beq.n	801d0e2 <__gethex+0x1da>
 801d0cc:	455b      	cmp	r3, fp
 801d0ce:	dd06      	ble.n	801d0de <__gethex+0x1d6>
 801d0d0:	f1a8 0102 	sub.w	r1, r8, #2
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	f7fe fdb8 	bl	801bc4a <__any_on>
 801d0da:	2800      	cmp	r0, #0
 801d0dc:	d138      	bne.n	801d150 <__gethex+0x248>
 801d0de:	f04f 0b02 	mov.w	fp, #2
 801d0e2:	4641      	mov	r1, r8
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	f7ff fea7 	bl	801ce38 <rshift>
 801d0ea:	4446      	add	r6, r8
 801d0ec:	68bb      	ldr	r3, [r7, #8]
 801d0ee:	42b3      	cmp	r3, r6
 801d0f0:	da41      	bge.n	801d176 <__gethex+0x26e>
 801d0f2:	4621      	mov	r1, r4
 801d0f4:	4648      	mov	r0, r9
 801d0f6:	f7fe f95f 	bl	801b3b8 <_Bfree>
 801d0fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	6013      	str	r3, [r2, #0]
 801d100:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801d104:	e78a      	b.n	801d01c <__gethex+0x114>
 801d106:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801d10a:	2a2e      	cmp	r2, #46	; 0x2e
 801d10c:	d014      	beq.n	801d138 <__gethex+0x230>
 801d10e:	2b20      	cmp	r3, #32
 801d110:	d106      	bne.n	801d120 <__gethex+0x218>
 801d112:	9b01      	ldr	r3, [sp, #4]
 801d114:	f843 bb04 	str.w	fp, [r3], #4
 801d118:	f04f 0b00 	mov.w	fp, #0
 801d11c:	9301      	str	r3, [sp, #4]
 801d11e:	465b      	mov	r3, fp
 801d120:	7828      	ldrb	r0, [r5, #0]
 801d122:	9303      	str	r3, [sp, #12]
 801d124:	f7ff feda 	bl	801cedc <__hexdig_fun>
 801d128:	9b03      	ldr	r3, [sp, #12]
 801d12a:	f000 000f 	and.w	r0, r0, #15
 801d12e:	4098      	lsls	r0, r3
 801d130:	ea4b 0b00 	orr.w	fp, fp, r0
 801d134:	3304      	adds	r3, #4
 801d136:	e7a1      	b.n	801d07c <__gethex+0x174>
 801d138:	45a8      	cmp	r8, r5
 801d13a:	d8e8      	bhi.n	801d10e <__gethex+0x206>
 801d13c:	2201      	movs	r2, #1
 801d13e:	4628      	mov	r0, r5
 801d140:	9303      	str	r3, [sp, #12]
 801d142:	f7ff fe19 	bl	801cd78 <strncmp>
 801d146:	4926      	ldr	r1, [pc, #152]	; (801d1e0 <__gethex+0x2d8>)
 801d148:	9b03      	ldr	r3, [sp, #12]
 801d14a:	2800      	cmp	r0, #0
 801d14c:	d1df      	bne.n	801d10e <__gethex+0x206>
 801d14e:	e795      	b.n	801d07c <__gethex+0x174>
 801d150:	f04f 0b03 	mov.w	fp, #3
 801d154:	e7c5      	b.n	801d0e2 <__gethex+0x1da>
 801d156:	da0b      	bge.n	801d170 <__gethex+0x268>
 801d158:	eba5 0800 	sub.w	r8, r5, r0
 801d15c:	4621      	mov	r1, r4
 801d15e:	4642      	mov	r2, r8
 801d160:	4648      	mov	r0, r9
 801d162:	f7fe fb43 	bl	801b7ec <__lshift>
 801d166:	eba6 0608 	sub.w	r6, r6, r8
 801d16a:	4604      	mov	r4, r0
 801d16c:	f100 0a14 	add.w	sl, r0, #20
 801d170:	f04f 0b00 	mov.w	fp, #0
 801d174:	e7ba      	b.n	801d0ec <__gethex+0x1e4>
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	42b3      	cmp	r3, r6
 801d17a:	dd73      	ble.n	801d264 <__gethex+0x35c>
 801d17c:	1b9e      	subs	r6, r3, r6
 801d17e:	42b5      	cmp	r5, r6
 801d180:	dc34      	bgt.n	801d1ec <__gethex+0x2e4>
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	2b02      	cmp	r3, #2
 801d186:	d023      	beq.n	801d1d0 <__gethex+0x2c8>
 801d188:	2b03      	cmp	r3, #3
 801d18a:	d025      	beq.n	801d1d8 <__gethex+0x2d0>
 801d18c:	2b01      	cmp	r3, #1
 801d18e:	d115      	bne.n	801d1bc <__gethex+0x2b4>
 801d190:	42b5      	cmp	r5, r6
 801d192:	d113      	bne.n	801d1bc <__gethex+0x2b4>
 801d194:	2d01      	cmp	r5, #1
 801d196:	d10b      	bne.n	801d1b0 <__gethex+0x2a8>
 801d198:	9a02      	ldr	r2, [sp, #8]
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	6013      	str	r3, [r2, #0]
 801d19e:	2301      	movs	r3, #1
 801d1a0:	6123      	str	r3, [r4, #16]
 801d1a2:	f8ca 3000 	str.w	r3, [sl]
 801d1a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1a8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801d1ac:	601c      	str	r4, [r3, #0]
 801d1ae:	e735      	b.n	801d01c <__gethex+0x114>
 801d1b0:	1e69      	subs	r1, r5, #1
 801d1b2:	4620      	mov	r0, r4
 801d1b4:	f7fe fd49 	bl	801bc4a <__any_on>
 801d1b8:	2800      	cmp	r0, #0
 801d1ba:	d1ed      	bne.n	801d198 <__gethex+0x290>
 801d1bc:	4621      	mov	r1, r4
 801d1be:	4648      	mov	r0, r9
 801d1c0:	f7fe f8fa 	bl	801b3b8 <_Bfree>
 801d1c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	6013      	str	r3, [r2, #0]
 801d1ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 801d1ce:	e725      	b.n	801d01c <__gethex+0x114>
 801d1d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d1f2      	bne.n	801d1bc <__gethex+0x2b4>
 801d1d6:	e7df      	b.n	801d198 <__gethex+0x290>
 801d1d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d1dc      	bne.n	801d198 <__gethex+0x290>
 801d1de:	e7ed      	b.n	801d1bc <__gethex+0x2b4>
 801d1e0:	0801e354 	.word	0x0801e354
 801d1e4:	0801e1ed 	.word	0x0801e1ed
 801d1e8:	0801e4fe 	.word	0x0801e4fe
 801d1ec:	f106 38ff 	add.w	r8, r6, #4294967295
 801d1f0:	f1bb 0f00 	cmp.w	fp, #0
 801d1f4:	d133      	bne.n	801d25e <__gethex+0x356>
 801d1f6:	f1b8 0f00 	cmp.w	r8, #0
 801d1fa:	d004      	beq.n	801d206 <__gethex+0x2fe>
 801d1fc:	4641      	mov	r1, r8
 801d1fe:	4620      	mov	r0, r4
 801d200:	f7fe fd23 	bl	801bc4a <__any_on>
 801d204:	4683      	mov	fp, r0
 801d206:	ea4f 1268 	mov.w	r2, r8, asr #5
 801d20a:	2301      	movs	r3, #1
 801d20c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d210:	f008 081f 	and.w	r8, r8, #31
 801d214:	fa03 f308 	lsl.w	r3, r3, r8
 801d218:	4213      	tst	r3, r2
 801d21a:	4631      	mov	r1, r6
 801d21c:	4620      	mov	r0, r4
 801d21e:	bf18      	it	ne
 801d220:	f04b 0b02 	orrne.w	fp, fp, #2
 801d224:	1bad      	subs	r5, r5, r6
 801d226:	f7ff fe07 	bl	801ce38 <rshift>
 801d22a:	687e      	ldr	r6, [r7, #4]
 801d22c:	f04f 0802 	mov.w	r8, #2
 801d230:	f1bb 0f00 	cmp.w	fp, #0
 801d234:	d04a      	beq.n	801d2cc <__gethex+0x3c4>
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	2b02      	cmp	r3, #2
 801d23a:	d016      	beq.n	801d26a <__gethex+0x362>
 801d23c:	2b03      	cmp	r3, #3
 801d23e:	d018      	beq.n	801d272 <__gethex+0x36a>
 801d240:	2b01      	cmp	r3, #1
 801d242:	d109      	bne.n	801d258 <__gethex+0x350>
 801d244:	f01b 0f02 	tst.w	fp, #2
 801d248:	d006      	beq.n	801d258 <__gethex+0x350>
 801d24a:	f8da 3000 	ldr.w	r3, [sl]
 801d24e:	ea4b 0b03 	orr.w	fp, fp, r3
 801d252:	f01b 0f01 	tst.w	fp, #1
 801d256:	d10f      	bne.n	801d278 <__gethex+0x370>
 801d258:	f048 0810 	orr.w	r8, r8, #16
 801d25c:	e036      	b.n	801d2cc <__gethex+0x3c4>
 801d25e:	f04f 0b01 	mov.w	fp, #1
 801d262:	e7d0      	b.n	801d206 <__gethex+0x2fe>
 801d264:	f04f 0801 	mov.w	r8, #1
 801d268:	e7e2      	b.n	801d230 <__gethex+0x328>
 801d26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d26c:	f1c3 0301 	rsb	r3, r3, #1
 801d270:	930f      	str	r3, [sp, #60]	; 0x3c
 801d272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d274:	2b00      	cmp	r3, #0
 801d276:	d0ef      	beq.n	801d258 <__gethex+0x350>
 801d278:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d27c:	f104 0214 	add.w	r2, r4, #20
 801d280:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801d284:	9301      	str	r3, [sp, #4]
 801d286:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801d28a:	2300      	movs	r3, #0
 801d28c:	4694      	mov	ip, r2
 801d28e:	f852 1b04 	ldr.w	r1, [r2], #4
 801d292:	f1b1 3fff 	cmp.w	r1, #4294967295
 801d296:	d01e      	beq.n	801d2d6 <__gethex+0x3ce>
 801d298:	3101      	adds	r1, #1
 801d29a:	f8cc 1000 	str.w	r1, [ip]
 801d29e:	f1b8 0f02 	cmp.w	r8, #2
 801d2a2:	f104 0214 	add.w	r2, r4, #20
 801d2a6:	d13d      	bne.n	801d324 <__gethex+0x41c>
 801d2a8:	683b      	ldr	r3, [r7, #0]
 801d2aa:	3b01      	subs	r3, #1
 801d2ac:	42ab      	cmp	r3, r5
 801d2ae:	d10b      	bne.n	801d2c8 <__gethex+0x3c0>
 801d2b0:	1169      	asrs	r1, r5, #5
 801d2b2:	2301      	movs	r3, #1
 801d2b4:	f005 051f 	and.w	r5, r5, #31
 801d2b8:	fa03 f505 	lsl.w	r5, r3, r5
 801d2bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d2c0:	421d      	tst	r5, r3
 801d2c2:	bf18      	it	ne
 801d2c4:	f04f 0801 	movne.w	r8, #1
 801d2c8:	f048 0820 	orr.w	r8, r8, #32
 801d2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2ce:	601c      	str	r4, [r3, #0]
 801d2d0:	9b02      	ldr	r3, [sp, #8]
 801d2d2:	601e      	str	r6, [r3, #0]
 801d2d4:	e6a2      	b.n	801d01c <__gethex+0x114>
 801d2d6:	4290      	cmp	r0, r2
 801d2d8:	f842 3c04 	str.w	r3, [r2, #-4]
 801d2dc:	d8d6      	bhi.n	801d28c <__gethex+0x384>
 801d2de:	68a2      	ldr	r2, [r4, #8]
 801d2e0:	4593      	cmp	fp, r2
 801d2e2:	db17      	blt.n	801d314 <__gethex+0x40c>
 801d2e4:	6861      	ldr	r1, [r4, #4]
 801d2e6:	4648      	mov	r0, r9
 801d2e8:	3101      	adds	r1, #1
 801d2ea:	f7fe f825 	bl	801b338 <_Balloc>
 801d2ee:	4682      	mov	sl, r0
 801d2f0:	b918      	cbnz	r0, 801d2fa <__gethex+0x3f2>
 801d2f2:	4b1b      	ldr	r3, [pc, #108]	; (801d360 <__gethex+0x458>)
 801d2f4:	4602      	mov	r2, r0
 801d2f6:	2184      	movs	r1, #132	; 0x84
 801d2f8:	e6b3      	b.n	801d062 <__gethex+0x15a>
 801d2fa:	6922      	ldr	r2, [r4, #16]
 801d2fc:	3202      	adds	r2, #2
 801d2fe:	f104 010c 	add.w	r1, r4, #12
 801d302:	0092      	lsls	r2, r2, #2
 801d304:	300c      	adds	r0, #12
 801d306:	f7fd f90e 	bl	801a526 <memcpy>
 801d30a:	4621      	mov	r1, r4
 801d30c:	4648      	mov	r0, r9
 801d30e:	f7fe f853 	bl	801b3b8 <_Bfree>
 801d312:	4654      	mov	r4, sl
 801d314:	6922      	ldr	r2, [r4, #16]
 801d316:	1c51      	adds	r1, r2, #1
 801d318:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d31c:	6121      	str	r1, [r4, #16]
 801d31e:	2101      	movs	r1, #1
 801d320:	6151      	str	r1, [r2, #20]
 801d322:	e7bc      	b.n	801d29e <__gethex+0x396>
 801d324:	6921      	ldr	r1, [r4, #16]
 801d326:	4559      	cmp	r1, fp
 801d328:	dd0b      	ble.n	801d342 <__gethex+0x43a>
 801d32a:	2101      	movs	r1, #1
 801d32c:	4620      	mov	r0, r4
 801d32e:	f7ff fd83 	bl	801ce38 <rshift>
 801d332:	68bb      	ldr	r3, [r7, #8]
 801d334:	3601      	adds	r6, #1
 801d336:	42b3      	cmp	r3, r6
 801d338:	f6ff aedb 	blt.w	801d0f2 <__gethex+0x1ea>
 801d33c:	f04f 0801 	mov.w	r8, #1
 801d340:	e7c2      	b.n	801d2c8 <__gethex+0x3c0>
 801d342:	f015 051f 	ands.w	r5, r5, #31
 801d346:	d0f9      	beq.n	801d33c <__gethex+0x434>
 801d348:	9b01      	ldr	r3, [sp, #4]
 801d34a:	441a      	add	r2, r3
 801d34c:	f1c5 0520 	rsb	r5, r5, #32
 801d350:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801d354:	f7fe f8e2 	bl	801b51c <__hi0bits>
 801d358:	42a8      	cmp	r0, r5
 801d35a:	dbe6      	blt.n	801d32a <__gethex+0x422>
 801d35c:	e7ee      	b.n	801d33c <__gethex+0x434>
 801d35e:	bf00      	nop
 801d360:	0801e1ed 	.word	0x0801e1ed

0801d364 <L_shift>:
 801d364:	f1c2 0208 	rsb	r2, r2, #8
 801d368:	0092      	lsls	r2, r2, #2
 801d36a:	b570      	push	{r4, r5, r6, lr}
 801d36c:	f1c2 0620 	rsb	r6, r2, #32
 801d370:	6843      	ldr	r3, [r0, #4]
 801d372:	6804      	ldr	r4, [r0, #0]
 801d374:	fa03 f506 	lsl.w	r5, r3, r6
 801d378:	432c      	orrs	r4, r5
 801d37a:	40d3      	lsrs	r3, r2
 801d37c:	6004      	str	r4, [r0, #0]
 801d37e:	f840 3f04 	str.w	r3, [r0, #4]!
 801d382:	4288      	cmp	r0, r1
 801d384:	d3f4      	bcc.n	801d370 <L_shift+0xc>
 801d386:	bd70      	pop	{r4, r5, r6, pc}

0801d388 <__match>:
 801d388:	b530      	push	{r4, r5, lr}
 801d38a:	6803      	ldr	r3, [r0, #0]
 801d38c:	3301      	adds	r3, #1
 801d38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d392:	b914      	cbnz	r4, 801d39a <__match+0x12>
 801d394:	6003      	str	r3, [r0, #0]
 801d396:	2001      	movs	r0, #1
 801d398:	bd30      	pop	{r4, r5, pc}
 801d39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d39e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d3a2:	2d19      	cmp	r5, #25
 801d3a4:	bf98      	it	ls
 801d3a6:	3220      	addls	r2, #32
 801d3a8:	42a2      	cmp	r2, r4
 801d3aa:	d0f0      	beq.n	801d38e <__match+0x6>
 801d3ac:	2000      	movs	r0, #0
 801d3ae:	e7f3      	b.n	801d398 <__match+0x10>

0801d3b0 <__hexnan>:
 801d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b4:	680b      	ldr	r3, [r1, #0]
 801d3b6:	6801      	ldr	r1, [r0, #0]
 801d3b8:	115e      	asrs	r6, r3, #5
 801d3ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d3be:	f013 031f 	ands.w	r3, r3, #31
 801d3c2:	b087      	sub	sp, #28
 801d3c4:	bf18      	it	ne
 801d3c6:	3604      	addne	r6, #4
 801d3c8:	2500      	movs	r5, #0
 801d3ca:	1f37      	subs	r7, r6, #4
 801d3cc:	4682      	mov	sl, r0
 801d3ce:	4690      	mov	r8, r2
 801d3d0:	9301      	str	r3, [sp, #4]
 801d3d2:	f846 5c04 	str.w	r5, [r6, #-4]
 801d3d6:	46b9      	mov	r9, r7
 801d3d8:	463c      	mov	r4, r7
 801d3da:	9502      	str	r5, [sp, #8]
 801d3dc:	46ab      	mov	fp, r5
 801d3de:	784a      	ldrb	r2, [r1, #1]
 801d3e0:	1c4b      	adds	r3, r1, #1
 801d3e2:	9303      	str	r3, [sp, #12]
 801d3e4:	b342      	cbz	r2, 801d438 <__hexnan+0x88>
 801d3e6:	4610      	mov	r0, r2
 801d3e8:	9105      	str	r1, [sp, #20]
 801d3ea:	9204      	str	r2, [sp, #16]
 801d3ec:	f7ff fd76 	bl	801cedc <__hexdig_fun>
 801d3f0:	2800      	cmp	r0, #0
 801d3f2:	d14f      	bne.n	801d494 <__hexnan+0xe4>
 801d3f4:	9a04      	ldr	r2, [sp, #16]
 801d3f6:	9905      	ldr	r1, [sp, #20]
 801d3f8:	2a20      	cmp	r2, #32
 801d3fa:	d818      	bhi.n	801d42e <__hexnan+0x7e>
 801d3fc:	9b02      	ldr	r3, [sp, #8]
 801d3fe:	459b      	cmp	fp, r3
 801d400:	dd13      	ble.n	801d42a <__hexnan+0x7a>
 801d402:	454c      	cmp	r4, r9
 801d404:	d206      	bcs.n	801d414 <__hexnan+0x64>
 801d406:	2d07      	cmp	r5, #7
 801d408:	dc04      	bgt.n	801d414 <__hexnan+0x64>
 801d40a:	462a      	mov	r2, r5
 801d40c:	4649      	mov	r1, r9
 801d40e:	4620      	mov	r0, r4
 801d410:	f7ff ffa8 	bl	801d364 <L_shift>
 801d414:	4544      	cmp	r4, r8
 801d416:	d950      	bls.n	801d4ba <__hexnan+0x10a>
 801d418:	2300      	movs	r3, #0
 801d41a:	f1a4 0904 	sub.w	r9, r4, #4
 801d41e:	f844 3c04 	str.w	r3, [r4, #-4]
 801d422:	f8cd b008 	str.w	fp, [sp, #8]
 801d426:	464c      	mov	r4, r9
 801d428:	461d      	mov	r5, r3
 801d42a:	9903      	ldr	r1, [sp, #12]
 801d42c:	e7d7      	b.n	801d3de <__hexnan+0x2e>
 801d42e:	2a29      	cmp	r2, #41	; 0x29
 801d430:	d155      	bne.n	801d4de <__hexnan+0x12e>
 801d432:	3102      	adds	r1, #2
 801d434:	f8ca 1000 	str.w	r1, [sl]
 801d438:	f1bb 0f00 	cmp.w	fp, #0
 801d43c:	d04f      	beq.n	801d4de <__hexnan+0x12e>
 801d43e:	454c      	cmp	r4, r9
 801d440:	d206      	bcs.n	801d450 <__hexnan+0xa0>
 801d442:	2d07      	cmp	r5, #7
 801d444:	dc04      	bgt.n	801d450 <__hexnan+0xa0>
 801d446:	462a      	mov	r2, r5
 801d448:	4649      	mov	r1, r9
 801d44a:	4620      	mov	r0, r4
 801d44c:	f7ff ff8a 	bl	801d364 <L_shift>
 801d450:	4544      	cmp	r4, r8
 801d452:	d934      	bls.n	801d4be <__hexnan+0x10e>
 801d454:	f1a8 0204 	sub.w	r2, r8, #4
 801d458:	4623      	mov	r3, r4
 801d45a:	f853 1b04 	ldr.w	r1, [r3], #4
 801d45e:	f842 1f04 	str.w	r1, [r2, #4]!
 801d462:	429f      	cmp	r7, r3
 801d464:	d2f9      	bcs.n	801d45a <__hexnan+0xaa>
 801d466:	1b3b      	subs	r3, r7, r4
 801d468:	f023 0303 	bic.w	r3, r3, #3
 801d46c:	3304      	adds	r3, #4
 801d46e:	3e03      	subs	r6, #3
 801d470:	3401      	adds	r4, #1
 801d472:	42a6      	cmp	r6, r4
 801d474:	bf38      	it	cc
 801d476:	2304      	movcc	r3, #4
 801d478:	4443      	add	r3, r8
 801d47a:	2200      	movs	r2, #0
 801d47c:	f843 2b04 	str.w	r2, [r3], #4
 801d480:	429f      	cmp	r7, r3
 801d482:	d2fb      	bcs.n	801d47c <__hexnan+0xcc>
 801d484:	683b      	ldr	r3, [r7, #0]
 801d486:	b91b      	cbnz	r3, 801d490 <__hexnan+0xe0>
 801d488:	4547      	cmp	r7, r8
 801d48a:	d126      	bne.n	801d4da <__hexnan+0x12a>
 801d48c:	2301      	movs	r3, #1
 801d48e:	603b      	str	r3, [r7, #0]
 801d490:	2005      	movs	r0, #5
 801d492:	e025      	b.n	801d4e0 <__hexnan+0x130>
 801d494:	3501      	adds	r5, #1
 801d496:	2d08      	cmp	r5, #8
 801d498:	f10b 0b01 	add.w	fp, fp, #1
 801d49c:	dd06      	ble.n	801d4ac <__hexnan+0xfc>
 801d49e:	4544      	cmp	r4, r8
 801d4a0:	d9c3      	bls.n	801d42a <__hexnan+0x7a>
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	f844 3c04 	str.w	r3, [r4, #-4]
 801d4a8:	2501      	movs	r5, #1
 801d4aa:	3c04      	subs	r4, #4
 801d4ac:	6822      	ldr	r2, [r4, #0]
 801d4ae:	f000 000f 	and.w	r0, r0, #15
 801d4b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d4b6:	6020      	str	r0, [r4, #0]
 801d4b8:	e7b7      	b.n	801d42a <__hexnan+0x7a>
 801d4ba:	2508      	movs	r5, #8
 801d4bc:	e7b5      	b.n	801d42a <__hexnan+0x7a>
 801d4be:	9b01      	ldr	r3, [sp, #4]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d0df      	beq.n	801d484 <__hexnan+0xd4>
 801d4c4:	f1c3 0320 	rsb	r3, r3, #32
 801d4c8:	f04f 32ff 	mov.w	r2, #4294967295
 801d4cc:	40da      	lsrs	r2, r3
 801d4ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801d4d2:	4013      	ands	r3, r2
 801d4d4:	f846 3c04 	str.w	r3, [r6, #-4]
 801d4d8:	e7d4      	b.n	801d484 <__hexnan+0xd4>
 801d4da:	3f04      	subs	r7, #4
 801d4dc:	e7d2      	b.n	801d484 <__hexnan+0xd4>
 801d4de:	2004      	movs	r0, #4
 801d4e0:	b007      	add	sp, #28
 801d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d4e6 <__ascii_mbtowc>:
 801d4e6:	b082      	sub	sp, #8
 801d4e8:	b901      	cbnz	r1, 801d4ec <__ascii_mbtowc+0x6>
 801d4ea:	a901      	add	r1, sp, #4
 801d4ec:	b142      	cbz	r2, 801d500 <__ascii_mbtowc+0x1a>
 801d4ee:	b14b      	cbz	r3, 801d504 <__ascii_mbtowc+0x1e>
 801d4f0:	7813      	ldrb	r3, [r2, #0]
 801d4f2:	600b      	str	r3, [r1, #0]
 801d4f4:	7812      	ldrb	r2, [r2, #0]
 801d4f6:	1e10      	subs	r0, r2, #0
 801d4f8:	bf18      	it	ne
 801d4fa:	2001      	movne	r0, #1
 801d4fc:	b002      	add	sp, #8
 801d4fe:	4770      	bx	lr
 801d500:	4610      	mov	r0, r2
 801d502:	e7fb      	b.n	801d4fc <__ascii_mbtowc+0x16>
 801d504:	f06f 0001 	mvn.w	r0, #1
 801d508:	e7f8      	b.n	801d4fc <__ascii_mbtowc+0x16>

0801d50a <_realloc_r>:
 801d50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d50e:	4680      	mov	r8, r0
 801d510:	4614      	mov	r4, r2
 801d512:	460e      	mov	r6, r1
 801d514:	b921      	cbnz	r1, 801d520 <_realloc_r+0x16>
 801d516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d51a:	4611      	mov	r1, r2
 801d51c:	f7fd be80 	b.w	801b220 <_malloc_r>
 801d520:	b92a      	cbnz	r2, 801d52e <_realloc_r+0x24>
 801d522:	f7fd fe09 	bl	801b138 <_free_r>
 801d526:	4625      	mov	r5, r4
 801d528:	4628      	mov	r0, r5
 801d52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d52e:	f000 f842 	bl	801d5b6 <_malloc_usable_size_r>
 801d532:	4284      	cmp	r4, r0
 801d534:	4607      	mov	r7, r0
 801d536:	d802      	bhi.n	801d53e <_realloc_r+0x34>
 801d538:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d53c:	d812      	bhi.n	801d564 <_realloc_r+0x5a>
 801d53e:	4621      	mov	r1, r4
 801d540:	4640      	mov	r0, r8
 801d542:	f7fd fe6d 	bl	801b220 <_malloc_r>
 801d546:	4605      	mov	r5, r0
 801d548:	2800      	cmp	r0, #0
 801d54a:	d0ed      	beq.n	801d528 <_realloc_r+0x1e>
 801d54c:	42bc      	cmp	r4, r7
 801d54e:	4622      	mov	r2, r4
 801d550:	4631      	mov	r1, r6
 801d552:	bf28      	it	cs
 801d554:	463a      	movcs	r2, r7
 801d556:	f7fc ffe6 	bl	801a526 <memcpy>
 801d55a:	4631      	mov	r1, r6
 801d55c:	4640      	mov	r0, r8
 801d55e:	f7fd fdeb 	bl	801b138 <_free_r>
 801d562:	e7e1      	b.n	801d528 <_realloc_r+0x1e>
 801d564:	4635      	mov	r5, r6
 801d566:	e7df      	b.n	801d528 <_realloc_r+0x1e>

0801d568 <__ascii_wctomb>:
 801d568:	b149      	cbz	r1, 801d57e <__ascii_wctomb+0x16>
 801d56a:	2aff      	cmp	r2, #255	; 0xff
 801d56c:	bf85      	ittet	hi
 801d56e:	238a      	movhi	r3, #138	; 0x8a
 801d570:	6003      	strhi	r3, [r0, #0]
 801d572:	700a      	strbls	r2, [r1, #0]
 801d574:	f04f 30ff 	movhi.w	r0, #4294967295
 801d578:	bf98      	it	ls
 801d57a:	2001      	movls	r0, #1
 801d57c:	4770      	bx	lr
 801d57e:	4608      	mov	r0, r1
 801d580:	4770      	bx	lr
	...

0801d584 <fiprintf>:
 801d584:	b40e      	push	{r1, r2, r3}
 801d586:	b503      	push	{r0, r1, lr}
 801d588:	4601      	mov	r1, r0
 801d58a:	ab03      	add	r3, sp, #12
 801d58c:	4805      	ldr	r0, [pc, #20]	; (801d5a4 <fiprintf+0x20>)
 801d58e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d592:	6800      	ldr	r0, [r0, #0]
 801d594:	9301      	str	r3, [sp, #4]
 801d596:	f000 f83f 	bl	801d618 <_vfiprintf_r>
 801d59a:	b002      	add	sp, #8
 801d59c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d5a0:	b003      	add	sp, #12
 801d5a2:	4770      	bx	lr
 801d5a4:	24000158 	.word	0x24000158

0801d5a8 <abort>:
 801d5a8:	b508      	push	{r3, lr}
 801d5aa:	2006      	movs	r0, #6
 801d5ac:	f000 fa0c 	bl	801d9c8 <raise>
 801d5b0:	2001      	movs	r0, #1
 801d5b2:	f7e5 fe7f 	bl	80032b4 <_exit>

0801d5b6 <_malloc_usable_size_r>:
 801d5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d5ba:	1f18      	subs	r0, r3, #4
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	bfbc      	itt	lt
 801d5c0:	580b      	ldrlt	r3, [r1, r0]
 801d5c2:	18c0      	addlt	r0, r0, r3
 801d5c4:	4770      	bx	lr

0801d5c6 <__sfputc_r>:
 801d5c6:	6893      	ldr	r3, [r2, #8]
 801d5c8:	3b01      	subs	r3, #1
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	b410      	push	{r4}
 801d5ce:	6093      	str	r3, [r2, #8]
 801d5d0:	da08      	bge.n	801d5e4 <__sfputc_r+0x1e>
 801d5d2:	6994      	ldr	r4, [r2, #24]
 801d5d4:	42a3      	cmp	r3, r4
 801d5d6:	db01      	blt.n	801d5dc <__sfputc_r+0x16>
 801d5d8:	290a      	cmp	r1, #10
 801d5da:	d103      	bne.n	801d5e4 <__sfputc_r+0x1e>
 801d5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5e0:	f000 b934 	b.w	801d84c <__swbuf_r>
 801d5e4:	6813      	ldr	r3, [r2, #0]
 801d5e6:	1c58      	adds	r0, r3, #1
 801d5e8:	6010      	str	r0, [r2, #0]
 801d5ea:	7019      	strb	r1, [r3, #0]
 801d5ec:	4608      	mov	r0, r1
 801d5ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5f2:	4770      	bx	lr

0801d5f4 <__sfputs_r>:
 801d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5f6:	4606      	mov	r6, r0
 801d5f8:	460f      	mov	r7, r1
 801d5fa:	4614      	mov	r4, r2
 801d5fc:	18d5      	adds	r5, r2, r3
 801d5fe:	42ac      	cmp	r4, r5
 801d600:	d101      	bne.n	801d606 <__sfputs_r+0x12>
 801d602:	2000      	movs	r0, #0
 801d604:	e007      	b.n	801d616 <__sfputs_r+0x22>
 801d606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d60a:	463a      	mov	r2, r7
 801d60c:	4630      	mov	r0, r6
 801d60e:	f7ff ffda 	bl	801d5c6 <__sfputc_r>
 801d612:	1c43      	adds	r3, r0, #1
 801d614:	d1f3      	bne.n	801d5fe <__sfputs_r+0xa>
 801d616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d618 <_vfiprintf_r>:
 801d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d61c:	460d      	mov	r5, r1
 801d61e:	b09d      	sub	sp, #116	; 0x74
 801d620:	4614      	mov	r4, r2
 801d622:	4698      	mov	r8, r3
 801d624:	4606      	mov	r6, r0
 801d626:	b118      	cbz	r0, 801d630 <_vfiprintf_r+0x18>
 801d628:	6a03      	ldr	r3, [r0, #32]
 801d62a:	b90b      	cbnz	r3, 801d630 <_vfiprintf_r+0x18>
 801d62c:	f7fc fe62 	bl	801a2f4 <__sinit>
 801d630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d632:	07d9      	lsls	r1, r3, #31
 801d634:	d405      	bmi.n	801d642 <_vfiprintf_r+0x2a>
 801d636:	89ab      	ldrh	r3, [r5, #12]
 801d638:	059a      	lsls	r2, r3, #22
 801d63a:	d402      	bmi.n	801d642 <_vfiprintf_r+0x2a>
 801d63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d63e:	f7fc ff70 	bl	801a522 <__retarget_lock_acquire_recursive>
 801d642:	89ab      	ldrh	r3, [r5, #12]
 801d644:	071b      	lsls	r3, r3, #28
 801d646:	d501      	bpl.n	801d64c <_vfiprintf_r+0x34>
 801d648:	692b      	ldr	r3, [r5, #16]
 801d64a:	b99b      	cbnz	r3, 801d674 <_vfiprintf_r+0x5c>
 801d64c:	4629      	mov	r1, r5
 801d64e:	4630      	mov	r0, r6
 801d650:	f000 f93a 	bl	801d8c8 <__swsetup_r>
 801d654:	b170      	cbz	r0, 801d674 <_vfiprintf_r+0x5c>
 801d656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d658:	07dc      	lsls	r4, r3, #31
 801d65a:	d504      	bpl.n	801d666 <_vfiprintf_r+0x4e>
 801d65c:	f04f 30ff 	mov.w	r0, #4294967295
 801d660:	b01d      	add	sp, #116	; 0x74
 801d662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d666:	89ab      	ldrh	r3, [r5, #12]
 801d668:	0598      	lsls	r0, r3, #22
 801d66a:	d4f7      	bmi.n	801d65c <_vfiprintf_r+0x44>
 801d66c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d66e:	f7fc ff59 	bl	801a524 <__retarget_lock_release_recursive>
 801d672:	e7f3      	b.n	801d65c <_vfiprintf_r+0x44>
 801d674:	2300      	movs	r3, #0
 801d676:	9309      	str	r3, [sp, #36]	; 0x24
 801d678:	2320      	movs	r3, #32
 801d67a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d67e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d682:	2330      	movs	r3, #48	; 0x30
 801d684:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d838 <_vfiprintf_r+0x220>
 801d688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d68c:	f04f 0901 	mov.w	r9, #1
 801d690:	4623      	mov	r3, r4
 801d692:	469a      	mov	sl, r3
 801d694:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d698:	b10a      	cbz	r2, 801d69e <_vfiprintf_r+0x86>
 801d69a:	2a25      	cmp	r2, #37	; 0x25
 801d69c:	d1f9      	bne.n	801d692 <_vfiprintf_r+0x7a>
 801d69e:	ebba 0b04 	subs.w	fp, sl, r4
 801d6a2:	d00b      	beq.n	801d6bc <_vfiprintf_r+0xa4>
 801d6a4:	465b      	mov	r3, fp
 801d6a6:	4622      	mov	r2, r4
 801d6a8:	4629      	mov	r1, r5
 801d6aa:	4630      	mov	r0, r6
 801d6ac:	f7ff ffa2 	bl	801d5f4 <__sfputs_r>
 801d6b0:	3001      	adds	r0, #1
 801d6b2:	f000 80a9 	beq.w	801d808 <_vfiprintf_r+0x1f0>
 801d6b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d6b8:	445a      	add	r2, fp
 801d6ba:	9209      	str	r2, [sp, #36]	; 0x24
 801d6bc:	f89a 3000 	ldrb.w	r3, [sl]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	f000 80a1 	beq.w	801d808 <_vfiprintf_r+0x1f0>
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	f04f 32ff 	mov.w	r2, #4294967295
 801d6cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d6d0:	f10a 0a01 	add.w	sl, sl, #1
 801d6d4:	9304      	str	r3, [sp, #16]
 801d6d6:	9307      	str	r3, [sp, #28]
 801d6d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d6dc:	931a      	str	r3, [sp, #104]	; 0x68
 801d6de:	4654      	mov	r4, sl
 801d6e0:	2205      	movs	r2, #5
 801d6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6e6:	4854      	ldr	r0, [pc, #336]	; (801d838 <_vfiprintf_r+0x220>)
 801d6e8:	f7e2 fe12 	bl	8000310 <memchr>
 801d6ec:	9a04      	ldr	r2, [sp, #16]
 801d6ee:	b9d8      	cbnz	r0, 801d728 <_vfiprintf_r+0x110>
 801d6f0:	06d1      	lsls	r1, r2, #27
 801d6f2:	bf44      	itt	mi
 801d6f4:	2320      	movmi	r3, #32
 801d6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d6fa:	0713      	lsls	r3, r2, #28
 801d6fc:	bf44      	itt	mi
 801d6fe:	232b      	movmi	r3, #43	; 0x2b
 801d700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d704:	f89a 3000 	ldrb.w	r3, [sl]
 801d708:	2b2a      	cmp	r3, #42	; 0x2a
 801d70a:	d015      	beq.n	801d738 <_vfiprintf_r+0x120>
 801d70c:	9a07      	ldr	r2, [sp, #28]
 801d70e:	4654      	mov	r4, sl
 801d710:	2000      	movs	r0, #0
 801d712:	f04f 0c0a 	mov.w	ip, #10
 801d716:	4621      	mov	r1, r4
 801d718:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d71c:	3b30      	subs	r3, #48	; 0x30
 801d71e:	2b09      	cmp	r3, #9
 801d720:	d94d      	bls.n	801d7be <_vfiprintf_r+0x1a6>
 801d722:	b1b0      	cbz	r0, 801d752 <_vfiprintf_r+0x13a>
 801d724:	9207      	str	r2, [sp, #28]
 801d726:	e014      	b.n	801d752 <_vfiprintf_r+0x13a>
 801d728:	eba0 0308 	sub.w	r3, r0, r8
 801d72c:	fa09 f303 	lsl.w	r3, r9, r3
 801d730:	4313      	orrs	r3, r2
 801d732:	9304      	str	r3, [sp, #16]
 801d734:	46a2      	mov	sl, r4
 801d736:	e7d2      	b.n	801d6de <_vfiprintf_r+0xc6>
 801d738:	9b03      	ldr	r3, [sp, #12]
 801d73a:	1d19      	adds	r1, r3, #4
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	9103      	str	r1, [sp, #12]
 801d740:	2b00      	cmp	r3, #0
 801d742:	bfbb      	ittet	lt
 801d744:	425b      	neglt	r3, r3
 801d746:	f042 0202 	orrlt.w	r2, r2, #2
 801d74a:	9307      	strge	r3, [sp, #28]
 801d74c:	9307      	strlt	r3, [sp, #28]
 801d74e:	bfb8      	it	lt
 801d750:	9204      	strlt	r2, [sp, #16]
 801d752:	7823      	ldrb	r3, [r4, #0]
 801d754:	2b2e      	cmp	r3, #46	; 0x2e
 801d756:	d10c      	bne.n	801d772 <_vfiprintf_r+0x15a>
 801d758:	7863      	ldrb	r3, [r4, #1]
 801d75a:	2b2a      	cmp	r3, #42	; 0x2a
 801d75c:	d134      	bne.n	801d7c8 <_vfiprintf_r+0x1b0>
 801d75e:	9b03      	ldr	r3, [sp, #12]
 801d760:	1d1a      	adds	r2, r3, #4
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	9203      	str	r2, [sp, #12]
 801d766:	2b00      	cmp	r3, #0
 801d768:	bfb8      	it	lt
 801d76a:	f04f 33ff 	movlt.w	r3, #4294967295
 801d76e:	3402      	adds	r4, #2
 801d770:	9305      	str	r3, [sp, #20]
 801d772:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d848 <_vfiprintf_r+0x230>
 801d776:	7821      	ldrb	r1, [r4, #0]
 801d778:	2203      	movs	r2, #3
 801d77a:	4650      	mov	r0, sl
 801d77c:	f7e2 fdc8 	bl	8000310 <memchr>
 801d780:	b138      	cbz	r0, 801d792 <_vfiprintf_r+0x17a>
 801d782:	9b04      	ldr	r3, [sp, #16]
 801d784:	eba0 000a 	sub.w	r0, r0, sl
 801d788:	2240      	movs	r2, #64	; 0x40
 801d78a:	4082      	lsls	r2, r0
 801d78c:	4313      	orrs	r3, r2
 801d78e:	3401      	adds	r4, #1
 801d790:	9304      	str	r3, [sp, #16]
 801d792:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d796:	4829      	ldr	r0, [pc, #164]	; (801d83c <_vfiprintf_r+0x224>)
 801d798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d79c:	2206      	movs	r2, #6
 801d79e:	f7e2 fdb7 	bl	8000310 <memchr>
 801d7a2:	2800      	cmp	r0, #0
 801d7a4:	d03f      	beq.n	801d826 <_vfiprintf_r+0x20e>
 801d7a6:	4b26      	ldr	r3, [pc, #152]	; (801d840 <_vfiprintf_r+0x228>)
 801d7a8:	bb1b      	cbnz	r3, 801d7f2 <_vfiprintf_r+0x1da>
 801d7aa:	9b03      	ldr	r3, [sp, #12]
 801d7ac:	3307      	adds	r3, #7
 801d7ae:	f023 0307 	bic.w	r3, r3, #7
 801d7b2:	3308      	adds	r3, #8
 801d7b4:	9303      	str	r3, [sp, #12]
 801d7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7b8:	443b      	add	r3, r7
 801d7ba:	9309      	str	r3, [sp, #36]	; 0x24
 801d7bc:	e768      	b.n	801d690 <_vfiprintf_r+0x78>
 801d7be:	fb0c 3202 	mla	r2, ip, r2, r3
 801d7c2:	460c      	mov	r4, r1
 801d7c4:	2001      	movs	r0, #1
 801d7c6:	e7a6      	b.n	801d716 <_vfiprintf_r+0xfe>
 801d7c8:	2300      	movs	r3, #0
 801d7ca:	3401      	adds	r4, #1
 801d7cc:	9305      	str	r3, [sp, #20]
 801d7ce:	4619      	mov	r1, r3
 801d7d0:	f04f 0c0a 	mov.w	ip, #10
 801d7d4:	4620      	mov	r0, r4
 801d7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d7da:	3a30      	subs	r2, #48	; 0x30
 801d7dc:	2a09      	cmp	r2, #9
 801d7de:	d903      	bls.n	801d7e8 <_vfiprintf_r+0x1d0>
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d0c6      	beq.n	801d772 <_vfiprintf_r+0x15a>
 801d7e4:	9105      	str	r1, [sp, #20]
 801d7e6:	e7c4      	b.n	801d772 <_vfiprintf_r+0x15a>
 801d7e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801d7ec:	4604      	mov	r4, r0
 801d7ee:	2301      	movs	r3, #1
 801d7f0:	e7f0      	b.n	801d7d4 <_vfiprintf_r+0x1bc>
 801d7f2:	ab03      	add	r3, sp, #12
 801d7f4:	9300      	str	r3, [sp, #0]
 801d7f6:	462a      	mov	r2, r5
 801d7f8:	4b12      	ldr	r3, [pc, #72]	; (801d844 <_vfiprintf_r+0x22c>)
 801d7fa:	a904      	add	r1, sp, #16
 801d7fc:	4630      	mov	r0, r6
 801d7fe:	f7fb ff3f 	bl	8019680 <_printf_float>
 801d802:	4607      	mov	r7, r0
 801d804:	1c78      	adds	r0, r7, #1
 801d806:	d1d6      	bne.n	801d7b6 <_vfiprintf_r+0x19e>
 801d808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d80a:	07d9      	lsls	r1, r3, #31
 801d80c:	d405      	bmi.n	801d81a <_vfiprintf_r+0x202>
 801d80e:	89ab      	ldrh	r3, [r5, #12]
 801d810:	059a      	lsls	r2, r3, #22
 801d812:	d402      	bmi.n	801d81a <_vfiprintf_r+0x202>
 801d814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d816:	f7fc fe85 	bl	801a524 <__retarget_lock_release_recursive>
 801d81a:	89ab      	ldrh	r3, [r5, #12]
 801d81c:	065b      	lsls	r3, r3, #25
 801d81e:	f53f af1d 	bmi.w	801d65c <_vfiprintf_r+0x44>
 801d822:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d824:	e71c      	b.n	801d660 <_vfiprintf_r+0x48>
 801d826:	ab03      	add	r3, sp, #12
 801d828:	9300      	str	r3, [sp, #0]
 801d82a:	462a      	mov	r2, r5
 801d82c:	4b05      	ldr	r3, [pc, #20]	; (801d844 <_vfiprintf_r+0x22c>)
 801d82e:	a904      	add	r1, sp, #16
 801d830:	4630      	mov	r0, r6
 801d832:	f7fc f9ad 	bl	8019b90 <_printf_i>
 801d836:	e7e4      	b.n	801d802 <_vfiprintf_r+0x1ea>
 801d838:	0801e4a9 	.word	0x0801e4a9
 801d83c:	0801e4b3 	.word	0x0801e4b3
 801d840:	08019681 	.word	0x08019681
 801d844:	0801d5f5 	.word	0x0801d5f5
 801d848:	0801e4af 	.word	0x0801e4af

0801d84c <__swbuf_r>:
 801d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d84e:	460e      	mov	r6, r1
 801d850:	4614      	mov	r4, r2
 801d852:	4605      	mov	r5, r0
 801d854:	b118      	cbz	r0, 801d85e <__swbuf_r+0x12>
 801d856:	6a03      	ldr	r3, [r0, #32]
 801d858:	b90b      	cbnz	r3, 801d85e <__swbuf_r+0x12>
 801d85a:	f7fc fd4b 	bl	801a2f4 <__sinit>
 801d85e:	69a3      	ldr	r3, [r4, #24]
 801d860:	60a3      	str	r3, [r4, #8]
 801d862:	89a3      	ldrh	r3, [r4, #12]
 801d864:	071a      	lsls	r2, r3, #28
 801d866:	d525      	bpl.n	801d8b4 <__swbuf_r+0x68>
 801d868:	6923      	ldr	r3, [r4, #16]
 801d86a:	b31b      	cbz	r3, 801d8b4 <__swbuf_r+0x68>
 801d86c:	6823      	ldr	r3, [r4, #0]
 801d86e:	6922      	ldr	r2, [r4, #16]
 801d870:	1a98      	subs	r0, r3, r2
 801d872:	6963      	ldr	r3, [r4, #20]
 801d874:	b2f6      	uxtb	r6, r6
 801d876:	4283      	cmp	r3, r0
 801d878:	4637      	mov	r7, r6
 801d87a:	dc04      	bgt.n	801d886 <__swbuf_r+0x3a>
 801d87c:	4621      	mov	r1, r4
 801d87e:	4628      	mov	r0, r5
 801d880:	f7ff fa38 	bl	801ccf4 <_fflush_r>
 801d884:	b9e0      	cbnz	r0, 801d8c0 <__swbuf_r+0x74>
 801d886:	68a3      	ldr	r3, [r4, #8]
 801d888:	3b01      	subs	r3, #1
 801d88a:	60a3      	str	r3, [r4, #8]
 801d88c:	6823      	ldr	r3, [r4, #0]
 801d88e:	1c5a      	adds	r2, r3, #1
 801d890:	6022      	str	r2, [r4, #0]
 801d892:	701e      	strb	r6, [r3, #0]
 801d894:	6962      	ldr	r2, [r4, #20]
 801d896:	1c43      	adds	r3, r0, #1
 801d898:	429a      	cmp	r2, r3
 801d89a:	d004      	beq.n	801d8a6 <__swbuf_r+0x5a>
 801d89c:	89a3      	ldrh	r3, [r4, #12]
 801d89e:	07db      	lsls	r3, r3, #31
 801d8a0:	d506      	bpl.n	801d8b0 <__swbuf_r+0x64>
 801d8a2:	2e0a      	cmp	r6, #10
 801d8a4:	d104      	bne.n	801d8b0 <__swbuf_r+0x64>
 801d8a6:	4621      	mov	r1, r4
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	f7ff fa23 	bl	801ccf4 <_fflush_r>
 801d8ae:	b938      	cbnz	r0, 801d8c0 <__swbuf_r+0x74>
 801d8b0:	4638      	mov	r0, r7
 801d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8b4:	4621      	mov	r1, r4
 801d8b6:	4628      	mov	r0, r5
 801d8b8:	f000 f806 	bl	801d8c8 <__swsetup_r>
 801d8bc:	2800      	cmp	r0, #0
 801d8be:	d0d5      	beq.n	801d86c <__swbuf_r+0x20>
 801d8c0:	f04f 37ff 	mov.w	r7, #4294967295
 801d8c4:	e7f4      	b.n	801d8b0 <__swbuf_r+0x64>
	...

0801d8c8 <__swsetup_r>:
 801d8c8:	b538      	push	{r3, r4, r5, lr}
 801d8ca:	4b2a      	ldr	r3, [pc, #168]	; (801d974 <__swsetup_r+0xac>)
 801d8cc:	4605      	mov	r5, r0
 801d8ce:	6818      	ldr	r0, [r3, #0]
 801d8d0:	460c      	mov	r4, r1
 801d8d2:	b118      	cbz	r0, 801d8dc <__swsetup_r+0x14>
 801d8d4:	6a03      	ldr	r3, [r0, #32]
 801d8d6:	b90b      	cbnz	r3, 801d8dc <__swsetup_r+0x14>
 801d8d8:	f7fc fd0c 	bl	801a2f4 <__sinit>
 801d8dc:	89a3      	ldrh	r3, [r4, #12]
 801d8de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d8e2:	0718      	lsls	r0, r3, #28
 801d8e4:	d422      	bmi.n	801d92c <__swsetup_r+0x64>
 801d8e6:	06d9      	lsls	r1, r3, #27
 801d8e8:	d407      	bmi.n	801d8fa <__swsetup_r+0x32>
 801d8ea:	2309      	movs	r3, #9
 801d8ec:	602b      	str	r3, [r5, #0]
 801d8ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d8f2:	81a3      	strh	r3, [r4, #12]
 801d8f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d8f8:	e034      	b.n	801d964 <__swsetup_r+0x9c>
 801d8fa:	0758      	lsls	r0, r3, #29
 801d8fc:	d512      	bpl.n	801d924 <__swsetup_r+0x5c>
 801d8fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d900:	b141      	cbz	r1, 801d914 <__swsetup_r+0x4c>
 801d902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d906:	4299      	cmp	r1, r3
 801d908:	d002      	beq.n	801d910 <__swsetup_r+0x48>
 801d90a:	4628      	mov	r0, r5
 801d90c:	f7fd fc14 	bl	801b138 <_free_r>
 801d910:	2300      	movs	r3, #0
 801d912:	6363      	str	r3, [r4, #52]	; 0x34
 801d914:	89a3      	ldrh	r3, [r4, #12]
 801d916:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d91a:	81a3      	strh	r3, [r4, #12]
 801d91c:	2300      	movs	r3, #0
 801d91e:	6063      	str	r3, [r4, #4]
 801d920:	6923      	ldr	r3, [r4, #16]
 801d922:	6023      	str	r3, [r4, #0]
 801d924:	89a3      	ldrh	r3, [r4, #12]
 801d926:	f043 0308 	orr.w	r3, r3, #8
 801d92a:	81a3      	strh	r3, [r4, #12]
 801d92c:	6923      	ldr	r3, [r4, #16]
 801d92e:	b94b      	cbnz	r3, 801d944 <__swsetup_r+0x7c>
 801d930:	89a3      	ldrh	r3, [r4, #12]
 801d932:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d93a:	d003      	beq.n	801d944 <__swsetup_r+0x7c>
 801d93c:	4621      	mov	r1, r4
 801d93e:	4628      	mov	r0, r5
 801d940:	f000 f884 	bl	801da4c <__smakebuf_r>
 801d944:	89a0      	ldrh	r0, [r4, #12]
 801d946:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d94a:	f010 0301 	ands.w	r3, r0, #1
 801d94e:	d00a      	beq.n	801d966 <__swsetup_r+0x9e>
 801d950:	2300      	movs	r3, #0
 801d952:	60a3      	str	r3, [r4, #8]
 801d954:	6963      	ldr	r3, [r4, #20]
 801d956:	425b      	negs	r3, r3
 801d958:	61a3      	str	r3, [r4, #24]
 801d95a:	6923      	ldr	r3, [r4, #16]
 801d95c:	b943      	cbnz	r3, 801d970 <__swsetup_r+0xa8>
 801d95e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d962:	d1c4      	bne.n	801d8ee <__swsetup_r+0x26>
 801d964:	bd38      	pop	{r3, r4, r5, pc}
 801d966:	0781      	lsls	r1, r0, #30
 801d968:	bf58      	it	pl
 801d96a:	6963      	ldrpl	r3, [r4, #20]
 801d96c:	60a3      	str	r3, [r4, #8]
 801d96e:	e7f4      	b.n	801d95a <__swsetup_r+0x92>
 801d970:	2000      	movs	r0, #0
 801d972:	e7f7      	b.n	801d964 <__swsetup_r+0x9c>
 801d974:	24000158 	.word	0x24000158

0801d978 <_raise_r>:
 801d978:	291f      	cmp	r1, #31
 801d97a:	b538      	push	{r3, r4, r5, lr}
 801d97c:	4604      	mov	r4, r0
 801d97e:	460d      	mov	r5, r1
 801d980:	d904      	bls.n	801d98c <_raise_r+0x14>
 801d982:	2316      	movs	r3, #22
 801d984:	6003      	str	r3, [r0, #0]
 801d986:	f04f 30ff 	mov.w	r0, #4294967295
 801d98a:	bd38      	pop	{r3, r4, r5, pc}
 801d98c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d98e:	b112      	cbz	r2, 801d996 <_raise_r+0x1e>
 801d990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d994:	b94b      	cbnz	r3, 801d9aa <_raise_r+0x32>
 801d996:	4620      	mov	r0, r4
 801d998:	f000 f830 	bl	801d9fc <_getpid_r>
 801d99c:	462a      	mov	r2, r5
 801d99e:	4601      	mov	r1, r0
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d9a6:	f000 b817 	b.w	801d9d8 <_kill_r>
 801d9aa:	2b01      	cmp	r3, #1
 801d9ac:	d00a      	beq.n	801d9c4 <_raise_r+0x4c>
 801d9ae:	1c59      	adds	r1, r3, #1
 801d9b0:	d103      	bne.n	801d9ba <_raise_r+0x42>
 801d9b2:	2316      	movs	r3, #22
 801d9b4:	6003      	str	r3, [r0, #0]
 801d9b6:	2001      	movs	r0, #1
 801d9b8:	e7e7      	b.n	801d98a <_raise_r+0x12>
 801d9ba:	2400      	movs	r4, #0
 801d9bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d9c0:	4628      	mov	r0, r5
 801d9c2:	4798      	blx	r3
 801d9c4:	2000      	movs	r0, #0
 801d9c6:	e7e0      	b.n	801d98a <_raise_r+0x12>

0801d9c8 <raise>:
 801d9c8:	4b02      	ldr	r3, [pc, #8]	; (801d9d4 <raise+0xc>)
 801d9ca:	4601      	mov	r1, r0
 801d9cc:	6818      	ldr	r0, [r3, #0]
 801d9ce:	f7ff bfd3 	b.w	801d978 <_raise_r>
 801d9d2:	bf00      	nop
 801d9d4:	24000158 	.word	0x24000158

0801d9d8 <_kill_r>:
 801d9d8:	b538      	push	{r3, r4, r5, lr}
 801d9da:	4d07      	ldr	r5, [pc, #28]	; (801d9f8 <_kill_r+0x20>)
 801d9dc:	2300      	movs	r3, #0
 801d9de:	4604      	mov	r4, r0
 801d9e0:	4608      	mov	r0, r1
 801d9e2:	4611      	mov	r1, r2
 801d9e4:	602b      	str	r3, [r5, #0]
 801d9e6:	f7e5 fc55 	bl	8003294 <_kill>
 801d9ea:	1c43      	adds	r3, r0, #1
 801d9ec:	d102      	bne.n	801d9f4 <_kill_r+0x1c>
 801d9ee:	682b      	ldr	r3, [r5, #0]
 801d9f0:	b103      	cbz	r3, 801d9f4 <_kill_r+0x1c>
 801d9f2:	6023      	str	r3, [r4, #0]
 801d9f4:	bd38      	pop	{r3, r4, r5, pc}
 801d9f6:	bf00      	nop
 801d9f8:	24003620 	.word	0x24003620

0801d9fc <_getpid_r>:
 801d9fc:	f7e5 bc42 	b.w	8003284 <_getpid>

0801da00 <__swhatbuf_r>:
 801da00:	b570      	push	{r4, r5, r6, lr}
 801da02:	460c      	mov	r4, r1
 801da04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da08:	2900      	cmp	r1, #0
 801da0a:	b096      	sub	sp, #88	; 0x58
 801da0c:	4615      	mov	r5, r2
 801da0e:	461e      	mov	r6, r3
 801da10:	da0d      	bge.n	801da2e <__swhatbuf_r+0x2e>
 801da12:	89a3      	ldrh	r3, [r4, #12]
 801da14:	f013 0f80 	tst.w	r3, #128	; 0x80
 801da18:	f04f 0100 	mov.w	r1, #0
 801da1c:	bf0c      	ite	eq
 801da1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801da22:	2340      	movne	r3, #64	; 0x40
 801da24:	2000      	movs	r0, #0
 801da26:	6031      	str	r1, [r6, #0]
 801da28:	602b      	str	r3, [r5, #0]
 801da2a:	b016      	add	sp, #88	; 0x58
 801da2c:	bd70      	pop	{r4, r5, r6, pc}
 801da2e:	466a      	mov	r2, sp
 801da30:	f000 f848 	bl	801dac4 <_fstat_r>
 801da34:	2800      	cmp	r0, #0
 801da36:	dbec      	blt.n	801da12 <__swhatbuf_r+0x12>
 801da38:	9901      	ldr	r1, [sp, #4]
 801da3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801da3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801da42:	4259      	negs	r1, r3
 801da44:	4159      	adcs	r1, r3
 801da46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801da4a:	e7eb      	b.n	801da24 <__swhatbuf_r+0x24>

0801da4c <__smakebuf_r>:
 801da4c:	898b      	ldrh	r3, [r1, #12]
 801da4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801da50:	079d      	lsls	r5, r3, #30
 801da52:	4606      	mov	r6, r0
 801da54:	460c      	mov	r4, r1
 801da56:	d507      	bpl.n	801da68 <__smakebuf_r+0x1c>
 801da58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801da5c:	6023      	str	r3, [r4, #0]
 801da5e:	6123      	str	r3, [r4, #16]
 801da60:	2301      	movs	r3, #1
 801da62:	6163      	str	r3, [r4, #20]
 801da64:	b002      	add	sp, #8
 801da66:	bd70      	pop	{r4, r5, r6, pc}
 801da68:	ab01      	add	r3, sp, #4
 801da6a:	466a      	mov	r2, sp
 801da6c:	f7ff ffc8 	bl	801da00 <__swhatbuf_r>
 801da70:	9900      	ldr	r1, [sp, #0]
 801da72:	4605      	mov	r5, r0
 801da74:	4630      	mov	r0, r6
 801da76:	f7fd fbd3 	bl	801b220 <_malloc_r>
 801da7a:	b948      	cbnz	r0, 801da90 <__smakebuf_r+0x44>
 801da7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da80:	059a      	lsls	r2, r3, #22
 801da82:	d4ef      	bmi.n	801da64 <__smakebuf_r+0x18>
 801da84:	f023 0303 	bic.w	r3, r3, #3
 801da88:	f043 0302 	orr.w	r3, r3, #2
 801da8c:	81a3      	strh	r3, [r4, #12]
 801da8e:	e7e3      	b.n	801da58 <__smakebuf_r+0xc>
 801da90:	89a3      	ldrh	r3, [r4, #12]
 801da92:	6020      	str	r0, [r4, #0]
 801da94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da98:	81a3      	strh	r3, [r4, #12]
 801da9a:	9b00      	ldr	r3, [sp, #0]
 801da9c:	6163      	str	r3, [r4, #20]
 801da9e:	9b01      	ldr	r3, [sp, #4]
 801daa0:	6120      	str	r0, [r4, #16]
 801daa2:	b15b      	cbz	r3, 801dabc <__smakebuf_r+0x70>
 801daa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801daa8:	4630      	mov	r0, r6
 801daaa:	f000 f81d 	bl	801dae8 <_isatty_r>
 801daae:	b128      	cbz	r0, 801dabc <__smakebuf_r+0x70>
 801dab0:	89a3      	ldrh	r3, [r4, #12]
 801dab2:	f023 0303 	bic.w	r3, r3, #3
 801dab6:	f043 0301 	orr.w	r3, r3, #1
 801daba:	81a3      	strh	r3, [r4, #12]
 801dabc:	89a3      	ldrh	r3, [r4, #12]
 801dabe:	431d      	orrs	r5, r3
 801dac0:	81a5      	strh	r5, [r4, #12]
 801dac2:	e7cf      	b.n	801da64 <__smakebuf_r+0x18>

0801dac4 <_fstat_r>:
 801dac4:	b538      	push	{r3, r4, r5, lr}
 801dac6:	4d07      	ldr	r5, [pc, #28]	; (801dae4 <_fstat_r+0x20>)
 801dac8:	2300      	movs	r3, #0
 801daca:	4604      	mov	r4, r0
 801dacc:	4608      	mov	r0, r1
 801dace:	4611      	mov	r1, r2
 801dad0:	602b      	str	r3, [r5, #0]
 801dad2:	f7e5 fc3e 	bl	8003352 <_fstat>
 801dad6:	1c43      	adds	r3, r0, #1
 801dad8:	d102      	bne.n	801dae0 <_fstat_r+0x1c>
 801dada:	682b      	ldr	r3, [r5, #0]
 801dadc:	b103      	cbz	r3, 801dae0 <_fstat_r+0x1c>
 801dade:	6023      	str	r3, [r4, #0]
 801dae0:	bd38      	pop	{r3, r4, r5, pc}
 801dae2:	bf00      	nop
 801dae4:	24003620 	.word	0x24003620

0801dae8 <_isatty_r>:
 801dae8:	b538      	push	{r3, r4, r5, lr}
 801daea:	4d06      	ldr	r5, [pc, #24]	; (801db04 <_isatty_r+0x1c>)
 801daec:	2300      	movs	r3, #0
 801daee:	4604      	mov	r4, r0
 801daf0:	4608      	mov	r0, r1
 801daf2:	602b      	str	r3, [r5, #0]
 801daf4:	f7e5 fc3d 	bl	8003372 <_isatty>
 801daf8:	1c43      	adds	r3, r0, #1
 801dafa:	d102      	bne.n	801db02 <_isatty_r+0x1a>
 801dafc:	682b      	ldr	r3, [r5, #0]
 801dafe:	b103      	cbz	r3, 801db02 <_isatty_r+0x1a>
 801db00:	6023      	str	r3, [r4, #0]
 801db02:	bd38      	pop	{r3, r4, r5, pc}
 801db04:	24003620 	.word	0x24003620

0801db08 <_init>:
 801db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db0a:	bf00      	nop
 801db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db0e:	bc08      	pop	{r3}
 801db10:	469e      	mov	lr, r3
 801db12:	4770      	bx	lr

0801db14 <_fini>:
 801db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db16:	bf00      	nop
 801db18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db1a:	bc08      	pop	{r3}
 801db1c:	469e      	mov	lr, r3
 801db1e:	4770      	bx	lr
