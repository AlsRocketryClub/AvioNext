
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017518  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  080177e8  080177e8  000277e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017adc  08017adc  00027adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017ae4  08017ae4  00027ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017ae8  08017ae8  00027ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08017aec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f6c  24000164  08017c50  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240030d0  08017c50  000330d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003757b  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f78  00000000  00000000  0006770d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ab8  00000000  00000000  0006d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002850  00000000  00000000  00070140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5d3  00000000  00000000  00072990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039597  00000000  00000000  000b0f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d869  00000000  00000000  000ea4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00267d63  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bdac  00000000  00000000  00267db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080177d0 	.word	0x080177d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	080177d0 	.word	0x080177d0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HG2_Write_Register+0x48>)
 80006fc:	f007 fc00 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000700:	1df9      	adds	r1, r7, #7
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <HG2_Write_Register+0x4c>)
 8000708:	f00e f97c 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800070c:	1db9      	adds	r1, r7, #6
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <HG2_Write_Register+0x4c>)
 8000714:	f00e f976 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <HG2_Write_Register+0x48>)
 8000720:	f007 fbee 	bl	8007f00 <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020c00 	.word	0x58020c00
 8000730:	24000ed0 	.word	0x24000ed0

08000734 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <LG2_Read_Register+0x50>)
 8000750:	f007 fbd6 	bl	8007f00 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000754:	1df9      	adds	r1, r7, #7
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <LG2_Read_Register+0x54>)
 800075c:	f00e f952 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000760:	f107 010f 	add.w	r1, r7, #15
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <LG2_Read_Register+0x54>)
 800076a:	f00e fb47 	bl	800edfc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <LG2_Read_Register+0x50>)
 8000776:	f007 fbc3 	bl	8007f00 <HAL_GPIO_WritePin>

	return reg_value;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00
 8000788:	24000ed0 	.word	0x24000ed0

0800078c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LG2_Write_Register+0x48>)
 80007a4:	f007 fbac 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a8:	1df9      	adds	r1, r7, #7
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007b0:	f00e f928 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007b4:	1db9      	adds	r1, r7, #6
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007bc:	f00e f922 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LG2_Write_Register+0x48>)
 80007c8:	f007 fb9a 	bl	8007f00 <HAL_GPIO_WritePin>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00
 80007d8:	24000ed0 	.word	0x24000ed0

080007dc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007e2:	2022      	movs	r0, #34	; 0x22
 80007e4:	f7ff ffa6 	bl	8000734 <LG2_Read_Register>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007ec:	2023      	movs	r0, #35	; 0x23
 80007ee:	f7ff ffa1 	bl	8000734 <LG2_Read_Register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000804:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000810:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000834 <LG2_Get_Gyro_X+0x58>
 8000814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000818:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000838 <LG2_Get_Gyro_X+0x5c>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
}
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	46fffe00 	.word	0x46fffe00
 8000838:	437a0000 	.word	0x437a0000

0800083c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000842:	2024      	movs	r0, #36	; 0x24
 8000844:	f7ff ff76 	bl	8000734 <LG2_Read_Register>
 8000848:	4603      	mov	r3, r0
 800084a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f7ff ff71 	bl	8000734 <LG2_Read_Register>
 8000852:	4603      	mov	r3, r0
 8000854:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000894 <LG2_Get_Gyro_Y+0x58>
 8000874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000878:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000898 <LG2_Get_Gyro_Y+0x5c>
 800087c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000880:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	ee07 3a90 	vmov	s15, r3
}
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	46fffe00 	.word	0x46fffe00
 8000898:	437a0000 	.word	0x437a0000
 800089c:	00000000 	.word	0x00000000

080008a0 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 80008a6:	2026      	movs	r0, #38	; 0x26
 80008a8:	f7ff ff44 	bl	8000734 <LG2_Read_Register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f7ff ff3f 	bl	8000734 <LG2_Read_Register>
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x60>
 80008dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008e0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000908 <LG2_Get_Gyro_Z+0x68>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ec:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	ee07 3a90 	vmov	s15, r3
}
 80008f6:	eeb0 0a67 	vmov.f32	s0, s15
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	00000000 	.word	0x00000000
 8000904:	40dfffc0 	.word	0x40dfffc0
 8000908:	00000000 	.word	0x00000000
 800090c:	406f4000 	.word	0x406f4000

08000910 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 800091c:	ed97 7a00 	vldr	s14, [r7]
 8000920:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000990 <setServo+0x80>
 8000924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000928:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000994 <setServo+0x84>
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000930:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000998 <setServo+0x88>
 8000934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	d81a      	bhi.n	8000980 <setServo+0x70>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <setServo+0x40>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000961 	.word	0x08000961
 8000954:	08000969 	.word	0x08000969
 8000958:	08000971 	.word	0x08000971
 800095c:	08000979 	.word	0x08000979
		case 1:
			TIM4->CCR4 = timerVal;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000966:	e00c      	b.n	8000982 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800096e:	e008      	b.n	8000982 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000976:	e004      	b.n	8000982 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <setServo+0x8c>)
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800097e:	e000      	b.n	8000982 <setServo+0x72>

		default:
			break;
 8000980:	bf00      	nop
	}
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	43340000 	.word	0x43340000
 8000994:	457a0000 	.word	0x457a0000
 8000998:	453b8000 	.word	0x453b8000
 800099c:	40000800 	.word	0x40000800

080009a0 <setLEDs>:

void setLEDs(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
 80009aa:	e181      	b.n	8000cb0 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009ac:	4aa1      	ldr	r2, [pc, #644]	; (8000c34 <setLEDs+0x294>)
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	f200 8177 	bhi.w	8000ca8 <setLEDs+0x308>
 80009ba:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <setLEDs+0x20>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	08000a81 	.word	0x08000a81
 80009c8:	08000b31 	.word	0x08000b31
 80009cc:	08000be1 	.word	0x08000be1
		case 0:
			for (int j = 0; j < 3; j++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
 80009d4:	e042      	b.n	8000a5c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	e039      	b.n	8000a50 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009dc:	4996      	ldr	r1, [pc, #600]	; (8000c38 <setLEDs+0x298>)
 80009de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e8:	4413      	add	r3, r2
 80009ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009f2:	fa41 f202 	asr.w	r2, r1, r2
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d013      	beq.n	8000a24 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	00da      	lsls	r2, r3, #3
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	18d1      	adds	r1, r2, r3
 8000a04:	4a8b      	ldr	r2, [pc, #556]	; (8000c34 <setLEDs+0x294>)
 8000a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3308      	adds	r3, #8
 8000a1a:	4a88      	ldr	r2, [pc, #544]	; (8000c3c <setLEDs+0x29c>)
 8000a1c:	213c      	movs	r1, #60	; 0x3c
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a22:	e012      	b.n	8000a4a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	00da      	lsls	r2, r3, #3
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	18d1      	adds	r1, r2, r3
 8000a2c:	4a81      	ldr	r2, [pc, #516]	; (8000c34 <setLEDs+0x294>)
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	4413      	add	r3, r2
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	3308      	adds	r3, #8
 8000a42:	4a7e      	ldr	r2, [pc, #504]	; (8000c3c <setLEDs+0x29c>)
 8000a44:	211e      	movs	r1, #30
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	ddc2      	ble.n	80009dc <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	3301      	adds	r3, #1
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	ddb9      	ble.n	80009d6 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a66:	e007      	b.n	8000a78 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a68:	4a74      	ldr	r2, [pc, #464]	; (8000c3c <setLEDs+0x29c>)
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	3301      	adds	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	2bb1      	cmp	r3, #177	; 0xb1
 8000a7c:	ddf4      	ble.n	8000a68 <setLEDs+0xc8>
			}
			break;
 8000a7e:	e114      	b.n	8000caa <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	e042      	b.n	8000b0c <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	e039      	b.n	8000b00 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a8c:	496a      	ldr	r1, [pc, #424]	; (8000c38 <setLEDs+0x298>)
 8000a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a98:	4413      	add	r3, r2
 8000a9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	6a3a      	ldr	r2, [r7, #32]
 8000aa2:	fa41 f202 	asr.w	r2, r1, r2
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d013      	beq.n	8000ad4 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	00da      	lsls	r2, r3, #3
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	18d1      	adds	r1, r2, r3
 8000ab4:	4a5f      	ldr	r2, [pc, #380]	; (8000c34 <setLEDs+0x294>)
 8000ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	440b      	add	r3, r1
 8000ac8:	3308      	adds	r3, #8
 8000aca:	4a5d      	ldr	r2, [pc, #372]	; (8000c40 <setLEDs+0x2a0>)
 8000acc:	213c      	movs	r1, #60	; 0x3c
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ad2:	e012      	b.n	8000afa <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	00da      	lsls	r2, r3, #3
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	18d1      	adds	r1, r2, r3
 8000adc:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <setLEDs+0x294>)
 8000ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	440b      	add	r3, r1
 8000af0:	3308      	adds	r3, #8
 8000af2:	4a53      	ldr	r2, [pc, #332]	; (8000c40 <setLEDs+0x2a0>)
 8000af4:	211e      	movs	r1, #30
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	3301      	adds	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	ddc2      	ble.n	8000a8c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	3301      	adds	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	ddb9      	ble.n	8000a86 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	e007      	b.n	8000b28 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <setLEDs+0x2a0>)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3301      	adds	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	2bb1      	cmp	r3, #177	; 0xb1
 8000b2c:	ddf4      	ble.n	8000b18 <setLEDs+0x178>
			}
			break;
 8000b2e:	e0bc      	b.n	8000caa <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	e042      	b.n	8000bbc <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e039      	b.n	8000bb0 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b3c:	493e      	ldr	r1, [pc, #248]	; (8000c38 <setLEDs+0x298>)
 8000b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4413      	add	r3, r2
 8000b4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	fa41 f202 	asr.w	r2, r1, r2
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	00da      	lsls	r2, r3, #3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	18d1      	adds	r1, r2, r3
 8000b64:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <setLEDs+0x294>)
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3308      	adds	r3, #8
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <setLEDs+0x2a4>)
 8000b7c:	213c      	movs	r1, #60	; 0x3c
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b82:	e012      	b.n	8000baa <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	00da      	lsls	r2, r3, #3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	18d1      	adds	r1, r2, r3
 8000b8c:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <setLEDs+0x294>)
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3308      	adds	r3, #8
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <setLEDs+0x2a4>)
 8000ba4:	211e      	movs	r1, #30
 8000ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	ddc2      	ble.n	8000b3c <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	ddb9      	ble.n	8000b36 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bc2:	2338      	movs	r3, #56	; 0x38
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e007      	b.n	8000bd8 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <setLEDs+0x2a4>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	2b69      	cmp	r3, #105	; 0x69
 8000bdc:	ddf4      	ble.n	8000bc8 <setLEDs+0x228>
			}
			break;
 8000bde:	e064      	b.n	8000caa <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e04e      	b.n	8000c84 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	e045      	b.n	8000c78 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000bec:	4912      	ldr	r1, [pc, #72]	; (8000c38 <setLEDs+0x298>)
 8000bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	fa41 f202 	asr.w	r2, r1, r2
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d01f      	beq.n	8000c4c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	00da      	lsls	r2, r3, #3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	18d1      	adds	r1, r2, r3
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <setLEDs+0x294>)
 8000c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	440b      	add	r3, r1
 8000c28:	3308      	adds	r3, #8
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <setLEDs+0x2a8>)
 8000c2c:	213c      	movs	r1, #60	; 0x3c
 8000c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c32:	e01e      	b.n	8000c72 <setLEDs+0x2d2>
 8000c34:	080179e4 	.word	0x080179e4
 8000c38:	24000a60 	.word	0x24000a60
 8000c3c:	24000180 	.word	0x24000180
 8000c40:	24000448 	.word	0x24000448
 8000c44:	24000710 	.word	0x24000710
 8000c48:	240008b8 	.word	0x240008b8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	00da      	lsls	r2, r3, #3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	18d1      	adds	r1, r2, r3
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <setLEDs+0x350>)
 8000c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3308      	adds	r3, #8
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <setLEDs+0x354>)
 8000c6c:	211e      	movs	r1, #30
 8000c6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	ddb6      	ble.n	8000bec <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	ddad      	ble.n	8000be6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c8a:	2338      	movs	r3, #56	; 0x38
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e007      	b.n	8000ca0 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <setLEDs+0x354>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2100      	movs	r1, #0
 8000c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b69      	cmp	r3, #105	; 0x69
 8000ca4:	ddf4      	ble.n	8000c90 <setLEDs+0x2f0>
			}
			break;
 8000ca6:	e000      	b.n	8000caa <setLEDs+0x30a>
		default:
			break;
 8000ca8:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cac:	3301      	adds	r3, #1
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	2b0d      	cmp	r3, #13
 8000cb4:	f77f ae7a 	ble.w	80009ac <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb8:	23b2      	movs	r3, #178	; 0xb2
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <setLEDs+0x358>)
 8000cbc:	210c      	movs	r1, #12
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <setLEDs+0x35c>)
 8000cc0:	f00e fc88 	bl	800f5d4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cc4:	23b2      	movs	r3, #178	; 0xb2
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <setLEDs+0x360>)
 8000cc8:	2108      	movs	r1, #8
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <setLEDs+0x364>)
 8000ccc:	f00e fc82 	bl	800f5d4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cd0:	236a      	movs	r3, #106	; 0x6a
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <setLEDs+0x368>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <setLEDs+0x36c>)
 8000cd8:	f00e fc7c 	bl	800f5d4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cdc:	236a      	movs	r3, #106	; 0x6a
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <setLEDs+0x354>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <setLEDs+0x36c>)
 8000ce4:	f00e fc76 	bl	800f5d4 <HAL_TIM_PWM_Start_DMA>

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	080179e4 	.word	0x080179e4
 8000cf4:	240008b8 	.word	0x240008b8
 8000cf8:	24000180 	.word	0x24000180
 8000cfc:	240010c4 	.word	0x240010c4
 8000d00:	24000448 	.word	0x24000448
 8000d04:	24000fe0 	.word	0x24000fe0
 8000d08:	24000710 	.word	0x24000710
 8000d0c:	2400102c 	.word	0x2400102c

08000d10 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d22:	f007 f8ed 	bl	8007f00 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d26:	1df9      	adds	r1, r7, #7
 8000d28:	2364      	movs	r3, #100	; 0x64
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d2e:	f00d fe69 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d32:	f107 010f 	add.w	r1, r7, #15
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <LoRA_Read_Register+0x4c>)
 8000d3c:	f00e f85e 	bl	800edfc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <LoRA_Read_Register+0x48>)
 8000d48:	f007 f8da 	bl	8007f00 <HAL_GPIO_WritePin>

	return reg_value;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	58020000 	.word	0x58020000
 8000d5c:	24000f58 	.word	0x24000f58

08000d60 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000d82:	f007 f8bd 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d8e:	f00d fe39 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d92:	1db9      	adds	r1, r7, #6
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	2201      	movs	r2, #1
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <LoRA_Write_Register+0x58>)
 8000d9a:	f00d fe33 	bl	800ea04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <LoRA_Write_Register+0x54>)
 8000da6:	f007 f8ab 	bl	8007f00 <HAL_GPIO_WritePin>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58020000 	.word	0x58020000
 8000db8:	24000f58 	.word	0x24000f58

08000dbc <LoRA_sleep>:


void LoRA_sleep(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff ffcc 	bl	8000d60 <LoRA_Write_Register>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	17c8      	asrs	r0, r1, #31
 8000dd8:	460a      	mov	r2, r1
 8000dda:	4603      	mov	r3, r0
 8000ddc:	1355      	asrs	r5, r2, #13
 8000dde:	04d4      	lsls	r4, r2, #19
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <LoRA_set_frequency+0x78>)
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	4620      	mov	r0, r4
 8000de8:	4629      	mov	r1, r5
 8000dea:	f7ff faf9 	bl	80003e0 <__aeabi_uldivmod>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	0c02      	lsrs	r2, r0, #16
 8000e04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	b2d3      	uxtb	r3, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f7ff ffa6 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	0a02      	lsrs	r2, r0, #8
 8000e22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e26:	0a0b      	lsrs	r3, r1, #8
 8000e28:	b2d3      	uxtb	r3, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2007      	movs	r0, #7
 8000e2e:	f7ff ff97 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	4619      	mov	r1, r3
 8000e36:	2008      	movs	r0, #8
 8000e38:	f7ff ff92 	bl	8000d60 <LoRA_Write_Register>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}
 8000e44:	01e84800 	.word	0x01e84800

08000e48 <LoRA_idle>:

void LoRA_idle(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e4c:	2181      	movs	r1, #129	; 0x81
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff86 	bl	8000d60 <LoRA_Write_Register>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e62:	231b      	movs	r3, #27
 8000e64:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b78      	cmp	r3, #120	; 0x78
 8000e6a:	d809      	bhi.n	8000e80 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	3b2d      	subs	r3, #45	; 0x2d
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e72:	fb82 1203 	smull	r1, r2, r2, r3
 8000e76:	1052      	asrs	r2, r2, #1
 8000e78:	17db      	asrs	r3, r3, #31
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e00b      	b.n	8000e98 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2bf0      	cmp	r3, #240	; 0xf0
 8000e84:	d808      	bhi.n	8000e98 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	331e      	adds	r3, #30
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoRA_setOCP+0x60>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	1092      	asrs	r2, r2, #2
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f7ff ff59 	bl	8000d60 <LoRA_Write_Register>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	66666667 	.word	0x66666667

08000ebc <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	dd0f      	ble.n	8000eea <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b14      	cmp	r3, #20
 8000ece:	dd01      	ble.n	8000ed4 <LoRA_setTxPower+0x18>
        level = 20;
 8000ed0:	2314      	movs	r3, #20
 8000ed2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b03      	subs	r3, #3
 8000ed8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000eda:	2187      	movs	r1, #135	; 0x87
 8000edc:	204d      	movs	r0, #77	; 0x4d
 8000ede:	f7ff ff3f 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ee2:	208c      	movs	r0, #140	; 0x8c
 8000ee4:	f7ff ffb8 	bl	8000e58 <LoRA_setOCP>
 8000ee8:	e00b      	b.n	8000f02 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	dc01      	bgt.n	8000ef4 <LoRA_setTxPower+0x38>
        level = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ef4:	2184      	movs	r1, #132	; 0x84
 8000ef6:	204d      	movs	r0, #77	; 0x4d
 8000ef8:	f7ff ff32 	bl	8000d60 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f7ff ffab 	bl	8000e58 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3b02      	subs	r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	2009      	movs	r0, #9
 8000f18:	f7ff ff22 	bl	8000d60 <LoRA_Write_Register>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f7ff fef1 	bl	8000d10 <LoRA_Read_Register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	201d      	movs	r0, #29
 8000f3a:	f7ff ff11 	bl	8000d60 <LoRA_Write_Register>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	; 0x70
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <LoRA_begin+0x98>)
 8000f52:	f006 ffd5 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f5c:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <LoRA_begin+0x9c>)
 8000f5e:	f006 ffcf 	bl	8007f00 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f62:	2042      	movs	r0, #66	; 0x42
 8000f64:	f7ff fed4 	bl	8000d10 <LoRA_Read_Register>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f6e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	491b      	ldr	r1, [pc, #108]	; (8000fe4 <LoRA_begin+0xa0>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f015 ffc1 	bl	8016f00 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f9ce 	bl	8000324 <strlen>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f015 fb21 	bl	80165d8 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f96:	f7ff ff11 	bl	8000dbc <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f9a:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <LoRA_begin+0xa4>)
 8000f9c:	f7ff ff16 	bl	8000dcc <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fedc 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	200e      	movs	r0, #14
 8000fac:	f7ff fed8 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fb0:	200c      	movs	r0, #12
 8000fb2:	f7ff fead 	bl	8000d10 <LoRA_Read_Register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f043 0303 	orr.w	r3, r3, #3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	200c      	movs	r0, #12
 8000fc2:	f7ff fecd 	bl	8000d60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	2026      	movs	r0, #38	; 0x26
 8000fca:	f7ff fec9 	bl	8000d60 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fce:	2011      	movs	r0, #17
 8000fd0:	f7ff ff74 	bl	8000ebc <LoRA_setTxPower>

}
 8000fd4:	bf00      	nop
 8000fd6:	3770      	adds	r7, #112	; 0x70
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58020c00 	.word	0x58020c00
 8000fe0:	58020000 	.word	0x58020000
 8000fe4:	080177e8 	.word	0x080177e8
 8000fe8:	33bca100 	.word	0x33bca100

08000fec <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000ff0:	f7ff ff98 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	200d      	movs	r0, #13
 8000ff8:	f7ff feb2 	bl	8000d60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2022      	movs	r0, #34	; 0x22
 8001000:	f7ff feae 	bl	8000d60 <LoRA_Write_Register>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800100e:	2183      	movs	r1, #131	; 0x83
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fea5 	bl	8000d60 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8001016:	bf00      	nop
 8001018:	2012      	movs	r0, #18
 800101a:	f7ff fe79 	bl	8000d10 <LoRA_Read_Register>
 800101e:	4603      	mov	r3, r0
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f7      	beq.n	8001018 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001028:	2108      	movs	r1, #8
 800102a:	2012      	movs	r0, #18
 800102c:	f7ff fe98 	bl	8000d60 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001030:	2012      	movs	r0, #18
 8001032:	f7ff fe6d 	bl	8000d10 <LoRA_Read_Register>
 8001036:	4603      	mov	r3, r0
 8001038:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 800103a:	f7ff ff73 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4619      	mov	r1, r3
 8001044:	2012      	movs	r0, #18
 8001046:	f7ff fe8b 	bl	8000d60 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00f      	beq.n	8001074 <LoRA_endPacket+0x6c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10a      	bne.n	8001074 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 800105e:	2010      	movs	r0, #16
 8001060:	f7ff fe56 	bl	8000d10 <LoRA_Read_Register>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	200d      	movs	r0, #13
 800106a:	f7ff fe79 	bl	8000d60 <LoRA_Write_Register>
		LoRA_idle();
 800106e:	f7ff feeb 	bl	8000e48 <LoRA_idle>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8001072:	e00d      	b.n	8001090 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff fe4b 	bl	8000d10 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	2b86      	cmp	r3, #134	; 0x86
 800107e:	d007      	beq.n	8001090 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f7ff fe6c 	bl	8000d60 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001088:	2186      	movs	r1, #134	; 0x86
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff fe68 	bl	8000d60 <LoRA_Write_Register>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010a2:	2012      	movs	r0, #18
 80010a4:	f7ff fe34 	bl	8000d10 <LoRA_Read_Register>
 80010a8:	4603      	mov	r3, r0
 80010aa:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80010ac:	f7ff ff3a 	bl	8000f24 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4619      	mov	r1, r3
 80010b6:	2012      	movs	r0, #18
 80010b8:	f7ff fe52 	bl	8000d60 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d014      	beq.n	80010f0 <LoRA_parsePacket+0x58>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10f      	bne.n	80010f0 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80010d0:	2013      	movs	r0, #19
 80010d2:	f7ff fe1d 	bl	8000d10 <LoRA_Read_Register>
 80010d6:	4603      	mov	r3, r0
 80010d8:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80010da:	2010      	movs	r0, #16
 80010dc:	f7ff fe18 	bl	8000d10 <LoRA_Read_Register>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4619      	mov	r1, r3
 80010e4:	200d      	movs	r0, #13
 80010e6:	f7ff fe3b 	bl	8000d60 <LoRA_Write_Register>
		LoRA_idle();
 80010ea:	f7ff fead 	bl	8000e48 <LoRA_idle>
 80010ee:	e00d      	b.n	800110c <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fe0d 	bl	8000d10 <LoRA_Read_Register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b86      	cmp	r3, #134	; 0x86
 80010fa:	d007      	beq.n	800110c <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80010fc:	2100      	movs	r1, #0
 80010fe:	200d      	movs	r0, #13
 8001100:	f7ff fe2e 	bl	8000d60 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001104:	2186      	movs	r1, #134	; 0x86
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fe2a 	bl	8000d60 <LoRA_Write_Register>
	}
	return packetLenght;
 800110c:	687b      	ldr	r3, [r7, #4]

}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 800111e:	f7ff ff65 	bl	8000fec <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e00a      	b.n	800113e <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fe14 	bl	8000d60 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff f8f0 	bl	8000324 <strlen>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8ed      	bhi.n	8001128 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f8e9 	bl	8000324 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	2022      	movs	r0, #34	; 0x22
 800115a:	f7ff fe01 	bl	8000d60 <LoRA_Write_Register>
    LoRA_endPacket();
 800115e:	f7ff ff53 	bl	8001008 <LoRA_endPacket>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2102      	movs	r1, #2
 8001178:	4827      	ldr	r0, [pc, #156]	; (8001218 <disarm+0xac>)
 800117a:	f006 fec1 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2104      	movs	r1, #4
 8001182:	4825      	ldr	r0, [pc, #148]	; (8001218 <disarm+0xac>)
 8001184:	f006 febc 	bl	8007f00 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2102      	movs	r1, #2
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <disarm+0xb0>)
 800118e:	f006 feb7 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001198:	4821      	ldr	r0, [pc, #132]	; (8001220 <disarm+0xb4>)
 800119a:	f006 feb1 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <disarm+0xb4>)
 80011a6:	f006 feab 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b0:	481b      	ldr	r0, [pc, #108]	; (8001220 <disarm+0xb4>)
 80011b2:	f006 fea5 	bl	8007f00 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2102      	movs	r1, #2
 80011ba:	481a      	ldr	r0, [pc, #104]	; (8001224 <disarm+0xb8>)
 80011bc:	f006 fea0 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <disarm+0xbc>)
 80011c8:	f006 fe9a 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	4815      	ldr	r0, [pc, #84]	; (8001228 <disarm+0xbc>)
 80011d4:	f006 fe94 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <disarm+0xbc>)
 80011e0:	f006 fe8e 	bl	8007f00 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <disarm+0xc0>)
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <disarm+0xc0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <disarm+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011f6:	f7ff fbd3 	bl	80009a0 <setLEDs>

  strcpy(state,"DISARMED");
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <disarm+0xc4>)
 80011fe:	461a      	mov	r2, r3
 8001200:	460b      	mov	r3, r1
 8001202:	cb03      	ldmia	r3!, {r0, r1}
 8001204:	6010      	str	r0, [r2, #0]
 8001206:	6051      	str	r1, [r2, #4]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	7213      	strb	r3, [r2, #8]
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58020000 	.word	0x58020000
 800121c:	58020400 	.word	0x58020400
 8001220:	58021400 	.word	0x58021400
 8001224:	58021800 	.word	0x58021800
 8001228:	58021000 	.word	0x58021000
 800122c:	24000a60 	.word	0x24000a60
 8001230:	080177ec 	.word	0x080177ec

08001234 <arm>:

int arm(char* state)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2102      	movs	r1, #2
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <arm+0x48>)
 8001242:	f006 fe5d 	bl	8007f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	2104      	movs	r1, #4
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <arm+0x48>)
 800124c:	f006 fe58 	bl	8007f00 <HAL_GPIO_WritePin>


  strcpy(state,"ARMED");
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <arm+0x4c>)
 8001254:	6810      	ldr	r0, [r2, #0]
 8001256:	6018      	str	r0, [r3, #0]
 8001258:	8892      	ldrh	r2, [r2, #4]
 800125a:	809a      	strh	r2, [r3, #4]
  LED_Color_Data[7][0] = 0;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <arm+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 255;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <arm+0x50>)
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <arm+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 800126e:	f7ff fb97 	bl	80009a0 <setLEDs>
  return 0;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58020000 	.word	0x58020000
 8001280:	080177f8 	.word	0x080177f8
 8001284:	24000a60 	.word	0x24000a60

08001288 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8001292:	f7ff ff01 	bl	8001098 <LoRA_parsePacket>
 8001296:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	429a      	cmp	r2, r3
 800129e:	dc01      	bgt.n	80012a4 <recv_packet+0x1c>
  {
    return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e01c      	b.n	80012de <recv_packet+0x56>
  }
  if(packet_length){
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d018      	beq.n	80012dc <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e00a      	b.n	80012c6 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	18d4      	adds	r4, r2, r3
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fd2a 	bl	8000d10 <LoRA_Read_Register>
 80012bc:	4603      	mov	r3, r0
 80012be:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dbf0      	blt.n	80012b0 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    return packet_length;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	e000      	b.n	80012de <recv_packet+0x56>
  }
  else{
    return 0;
 80012dc:	2300      	movs	r3, #0
  }
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}

080012e6 <reliable_send_packet>:

void reliable_send_packet(char* LoRA_data)
{
 80012e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	466b      	mov	r3, sp
 80012f2:	461e      	mov	r6, r3
  uint16_t length = strlen(LoRA_data)+1; //+1 for the \0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff f815 	bl	8000324 <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	82fb      	strh	r3, [r7, #22]
  char acknowledge[length]; 
 8001302:	8af9      	ldrh	r1, [r7, #22]
 8001304:	460b      	mov	r3, r1
 8001306:	3b01      	subs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	b28b      	uxth	r3, r1
 800130c:	2200      	movs	r2, #0
 800130e:	4698      	mov	r8, r3
 8001310:	4691      	mov	r9, r2
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800131e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001326:	b28b      	uxth	r3, r1
 8001328:	2200      	movs	r2, #0
 800132a:	461c      	mov	r4, r3
 800132c:	4615      	mov	r5, r2
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	00eb      	lsls	r3, r5, #3
 8001338:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800133c:	00e2      	lsls	r2, r4, #3
 800133e:	460b      	mov	r3, r1
 8001340:	3307      	adds	r3, #7
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	ebad 0d03 	sub.w	sp, sp, r3
 800134a:	466b      	mov	r3, sp
 800134c:	3300      	adds	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  LoRA_sendPacket(LoRA_data);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fee0 	bl	8001116 <LoRA_sendPacket>
  while(1)
  {
    
    if(recv_packet(acknowledge, length))
 8001356:	8afb      	ldrh	r3, [r7, #22]
 8001358:	4619      	mov	r1, r3
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff ff94 	bl	8001288 <recv_packet>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f7      	beq.n	8001356 <reliable_send_packet+0x70>
    {
      //cehck crc
      if(strcmp(acknowledge, LoRA_data) != 0)
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7fe ffd1 	bl	8000310 <strcmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <reliable_send_packet+0x96>
      {
        LoRA_sendPacket(LoRA_data);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fece 	bl	8001116 <LoRA_sendPacket>
    if(recv_packet(acknowledge, length))
 800137a:	e7ec      	b.n	8001356 <reliable_send_packet+0x70>
      }
      else
      {
        break;
 800137c:	bf00      	nop
 800137e:	46b5      	mov	sp, r6
      }
    }

    //delay
  }
}
 8001380:	bf00      	nop
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800138a:	0000      	movs	r0, r0
 800138c:	0000      	movs	r0, r0
	...

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001398:	4bcf      	ldr	r3, [pc, #828]	; (80016d8 <main+0x348>)
 800139a:	f207 443c 	addw	r4, r7, #1084	; 0x43c
 800139e:	461d      	mov	r5, r3
 80013a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a8:	c403      	stmia	r4!, {r0, r1}
 80013aa:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ac:	f002 fa62 	bl	8003874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b0:	f000 fb32 	bl	8001a18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013b4:	f000 fbac 	bl	8001b10 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f001 f910 	bl	80025dc <MX_GPIO_Init>
  MX_DMA_Init();
 80013bc:	f001 f8ae 	bl	800251c <MX_DMA_Init>
  MX_SPI3_Init();
 80013c0:	f000 fe2c 	bl	800201c <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80013c4:	f000 fcbc 	bl	8001d40 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80013c8:	f001 f85c 	bl	8002484 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013cc:	f000 fbd2 	bl	8001b74 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013d0:	f000 ff36 	bl	8002240 <MX_TIM4_Init>
  MX_ADC3_Init();
 80013d4:	f000 fc46 	bl	8001c64 <MX_ADC3_Init>
  MX_SPI2_Init();
 80013d8:	f000 fdca 	bl	8001f70 <MX_SPI2_Init>
  MX_I2C2_Init();
 80013dc:	f000 fd14 	bl	8001e08 <MX_I2C2_Init>
  MX_TIM2_Init();
 80013e0:	f000 fe72 	bl	80020c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013e4:	f000 ffa8 	bl	8002338 <MX_TIM5_Init>
  MX_TIM3_Init();
 80013e8:	f000 fec6 	bl	8002178 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80013ec:	f015 f834 	bl	8016458 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013f0:	f000 fd68 	bl	8001ec4 <MX_SPI1_Init>
  MX_UART4_Init();
 80013f4:	f000 fffa 	bl	80023ec <MX_UART4_Init>
  MX_FATFS_Init();
 80013f8:	f012 fdc2 	bl	8013f80 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80013fc:	f000 fd44 	bl	8001e88 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001400:	2332      	movs	r3, #50	; 0x32
 8001402:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
	const double SPEED = 2.0/2000;
 8001406:	a3b2      	add	r3, pc, #712	; (adr r3, 80016d0 <main+0x340>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8001410:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8001420:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4bac      	ldr	r3, [pc, #688]	; (80016dc <main+0x34c>)
 800142a:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 800142e:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143a:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800143e:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001442:	213c      	movs	r1, #60	; 0x3c
 8001444:	2010      	movs	r0, #16
 8001446:	f7ff f9a1 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 800144a:	2130      	movs	r1, #48	; 0x30
 800144c:	2011      	movs	r0, #17
 800144e:	f7ff f99d 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001452:	2104      	movs	r1, #4
 8001454:	2013      	movs	r0, #19
 8001456:	f7ff f999 	bl	800078c <LG2_Write_Register>

	HAL_Delay(3000);
 800145a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800145e:	f002 fa9b 	bl	8003998 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001462:	21bf      	movs	r1, #191	; 0xbf
 8001464:	201c      	movs	r0, #28
 8001466:	f7ff f93d 	bl	80006e4 <HG2_Write_Register>
	HAL_Delay(2);
 800146a:	2002      	movs	r0, #2
 800146c:	f002 fa94 	bl	8003998 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001470:	2158      	movs	r1, #88	; 0x58
 8001472:	201b      	movs	r0, #27
 8001474:	f7ff f936 	bl	80006e4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001478:	21d8      	movs	r1, #216	; 0xd8
 800147a:	201b      	movs	r0, #27
 800147c:	f7ff f932 	bl	80006e4 <HG2_Write_Register>

	float rotZ = 0;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8001488:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac

	float calOmegaX = 0;
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8001498:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 80014a2:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80014ac:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 80014b4:	e02e      	b.n	8001514 <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 80014b6:	f7ff f991 	bl	80007dc <LG2_Get_Gyro_X>
 80014ba:	eeb0 7a40 	vmov.f32	s14, s0
 80014be:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ca:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80014ce:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80014d2:	f7ff f9b3 	bl	800083c <LG2_Get_Gyro_Y>
 80014d6:	eeb0 7a40 	vmov.f32	s14, s0
 80014da:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014e6:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80014ea:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80014ee:	f7ff f9d7 	bl	80008a0 <LG2_Get_Gyro_Z>
 80014f2:	eeb0 7a40 	vmov.f32	s14, s0
 80014f6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001502:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001506:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 800150a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800150e:	3301      	adds	r3, #1
 8001510:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8001514:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001518:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800151c:	dbcb      	blt.n	80014b6 <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 800151e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80016e0 <main+0x350>
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001532:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001536:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 800153a:	ed93 7a00 	vldr	s14, [r3]
 800153e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80016e0 <main+0x350>
 8001542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001546:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 800154a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800154e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	eddf 6a62 	vldr	s13, [pc, #392]	; 80016e0 <main+0x350>
 800155a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001562:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	2101      	movs	r1, #1
 800156a:	485e      	ldr	r0, [pc, #376]	; (80016e4 <main+0x354>)
 800156c:	f006 fcc8 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001570:	20c8      	movs	r0, #200	; 0xc8
 8001572:	f002 fa11 	bl	8003998 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2101      	movs	r1, #1
 800157a:	485a      	ldr	r0, [pc, #360]	; (80016e4 <main+0x354>)
 800157c:	f006 fcc0 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001580:	20c8      	movs	r0, #200	; 0xc8
 8001582:	f002 fa09 	bl	8003998 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	2101      	movs	r1, #1
 800158a:	4856      	ldr	r0, [pc, #344]	; (80016e4 <main+0x354>)
 800158c:	f006 fcb8 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001590:	20c8      	movs	r0, #200	; 0xc8
 8001592:	f002 fa01 	bl	8003998 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	2104      	movs	r1, #4
 800159a:	4853      	ldr	r0, [pc, #332]	; (80016e8 <main+0x358>)
 800159c:	f006 fcb0 	bl	8007f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2108      	movs	r1, #8
 80015a4:	4850      	ldr	r0, [pc, #320]	; (80016e8 <main+0x358>)
 80015a6:	f006 fcab 	bl	8007f00 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015aa:	2100      	movs	r1, #0
 80015ac:	484f      	ldr	r0, [pc, #316]	; (80016ec <main+0x35c>)
 80015ae:	f00d fef5 	bl	800f39c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015b2:	2104      	movs	r1, #4
 80015b4:	484d      	ldr	r0, [pc, #308]	; (80016ec <main+0x35c>)
 80015b6:	f00d fef1 	bl	800f39c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015ba:	2108      	movs	r1, #8
 80015bc:	484b      	ldr	r0, [pc, #300]	; (80016ec <main+0x35c>)
 80015be:	f00d feed 	bl	800f39c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015c2:	210c      	movs	r1, #12
 80015c4:	4849      	ldr	r0, [pc, #292]	; (80016ec <main+0x35c>)
 80015c6:	f00d fee9 	bl	800f39c <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80015ca:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80016f0 <main+0x360>
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff f99e 	bl	8000910 <setServo>
    setServo(2, 180);
 80015d4:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80016f4 <main+0x364>
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff f999 	bl	8000910 <setServo>
    setServo(3, 0);
 80015de:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80016f8 <main+0x368>
 80015e2:	2003      	movs	r0, #3
 80015e4:	f7ff f994 	bl	8000910 <setServo>
    setServo(4, 45);
 80015e8:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80016fc <main+0x36c>
 80015ec:	2004      	movs	r0, #4
 80015ee:	f7ff f98f 	bl	8000910 <setServo>

    LoRA_begin(868000000);
 80015f2:	4843      	ldr	r0, [pc, #268]	; (8001700 <main+0x370>)
 80015f4:	f7ff fca6 	bl	8000f44 <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
	long last_packet = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
	int ARMED = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 800160a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800160e:	f5a3 7443 	sub.w	r4, r3, #780	; 0x30c
 8001612:	4a3c      	ldr	r2, [pc, #240]	; (8001704 <main+0x374>)
 8001614:	4623      	mov	r3, r4
 8001616:	ca07      	ldmia	r2, {r0, r1, r2}
 8001618:	c303      	stmia	r3!, {r0, r1}
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	f104 0309 	add.w	r3, r4, #9
 8001620:	2229      	movs	r2, #41	; 0x29
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f015 fc63 	bl	8016ef0 <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
  int packetId;
  char communication_state[50] = "RECIEVING";
 8001630:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001634:	f2a3 4444 	subw	r4, r3, #1092	; 0x444
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <main+0x378>)
 800163a:	4623      	mov	r3, r4
 800163c:	ca07      	ldmia	r2, {r0, r1, r2}
 800163e:	c303      	stmia	r3!, {r0, r1}
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	f104 030a 	add.w	r3, r4, #10
 8001646:	2228      	movs	r2, #40	; 0x28
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f015 fc50 	bl	8016ef0 <memset>

	while (1) {


    if(strcmp(communication_state,"RECIEVING") == 0)
 8001650:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001654:	492d      	ldr	r1, [pc, #180]	; (800170c <main+0x37c>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe5a 	bl	8000310 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d15c      	bne.n	800171c <main+0x38c>
    {

      if(recv_packet(recieved_packet, 50))
 8001662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001666:	2132      	movs	r1, #50	; 0x32
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe0d 	bl	8001288 <recv_packet>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01c      	beq.n	80016ae <main+0x31e>
      {
    	  LoRA_sendPacket("hello");
 8001674:	4826      	ldr	r0, [pc, #152]	; (8001710 <main+0x380>)
 8001676:	f7ff fd4e 	bl	8001116 <LoRA_sendPacket>

        //if crc then:
        //send acknowledge
        //{
        strcpy(command, recieved_packet);
 800167a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800167e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f015 fc5b 	bl	8016f40 <strcpy>
        LoRA_sendPacket(recieved_packet);
 800168a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd41 	bl	8001116 <LoRA_sendPacket>
        strcpy(communication_state,"WAITING FOR PRIVILIGE");
 8001694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <main+0x384>)
 800169a:	461c      	mov	r4, r3
 800169c:	4615      	mov	r5, r2
 800169e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016a6:	6020      	str	r0, [r4, #0]
 80016a8:	3404      	adds	r4, #4
 80016aa:	8021      	strh	r1, [r4, #0]
 80016ac:	e172      	b.n	8001994 <main+0x604>
        //}
      }
      else
      {
        //give up MASTER
        LoRA_sendPacket("$");
 80016ae:	481a      	ldr	r0, [pc, #104]	; (8001718 <main+0x388>)
 80016b0:	f7ff fd31 	bl	8001116 <LoRA_sendPacket>
        HAL_Delay(1000);
 80016b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b8:	f002 f96e 	bl	8003998 <HAL_Delay>
        LoRA_parsePacket();
 80016bc:	f7ff fcec 	bl	8001098 <LoRA_parsePacket>
        //char gotten[50];
        //sprintf(gotten,"gotten: %d",LoRA_parsePacket());
        //LoRA_sendPacket(gotten);
		HAL_Delay(1000);
 80016c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c4:	f002 f968 	bl	8003998 <HAL_Delay>
 80016c8:	e164      	b.n	8001994 <main+0x604>
 80016ca:	bf00      	nop
 80016cc:	f3af 8000 	nop.w
 80016d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016d4:	3f50624d 	.word	0x3f50624d
 80016d8:	080178d4 	.word	0x080178d4
 80016dc:	3ff00000 	.word	0x3ff00000
 80016e0:	43fa0000 	.word	0x43fa0000
 80016e4:	58020c00 	.word	0x58020c00
 80016e8:	58021800 	.word	0x58021800
 80016ec:	24001078 	.word	0x24001078
 80016f0:	42b40000 	.word	0x42b40000
 80016f4:	43340000 	.word	0x43340000
 80016f8:	00000000 	.word	0x00000000
 80016fc:	42340000 	.word	0x42340000
 8001700:	33bca100 	.word	0x33bca100
 8001704:	080178f0 	.word	0x080178f0
 8001708:	08017924 	.word	0x08017924
 800170c:	08017800 	.word	0x08017800
 8001710:	0801780c 	.word	0x0801780c
 8001714:	08017814 	.word	0x08017814
 8001718:	0801782c 	.word	0x0801782c
      }
    }
    else if(strcmp(communication_state,"WAITING FOR PRIVILIGE") == 0)
 800171c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001720:	49a8      	ldr	r1, [pc, #672]	; (80019c4 <main+0x634>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fdf4 	bl	8000310 <strcmp>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d12c      	bne.n	8001788 <main+0x3f8>
    {
      if(recv_packet(recieved_packet, 50))
 800172e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001732:	2132      	movs	r1, #50	; 0x32
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fda7 	bl	8001288 <recv_packet>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8129 	beq.w	8001994 <main+0x604>
      {
        //if crc then:
        //{
          if(strcmp(recieved_packet, "$") == 0)
 8001742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001746:	49a0      	ldr	r1, [pc, #640]	; (80019c8 <main+0x638>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fde1 	bl	8000310 <strcmp>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10b      	bne.n	800176c <main+0x3dc>
          {
            strcpy(communication_state,"MASTER");
 8001754:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001758:	4a9c      	ldr	r2, [pc, #624]	; (80019cc <main+0x63c>)
 800175a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800175e:	6018      	str	r0, [r3, #0]
 8001760:	3304      	adds	r3, #4
 8001762:	8019      	strh	r1, [r3, #0]
 8001764:	3302      	adds	r3, #2
 8001766:	0c0a      	lsrs	r2, r1, #16
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e113      	b.n	8001994 <main+0x604>
          }
          else
          {
            //send acknowledge again
            strcpy(command, recieved_packet);
 800176c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001770:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f015 fbe2 	bl	8016f40 <strcpy>
            LoRA_sendPacket(recieved_packet);
 800177c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fcc8 	bl	8001116 <LoRA_sendPacket>
 8001786:	e105      	b.n	8001994 <main+0x604>
          }
        //}
      }     
    }
    else if(strcmp(communication_state,"MASTER") == 0)
 8001788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800178c:	498f      	ldr	r1, [pc, #572]	; (80019cc <main+0x63c>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fdbe 	bl	8000310 <strcmp>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 80fc 	bne.w	8001994 <main+0x604>
    {
        if(strcmp(state, "DISARMED") == 0)
 800179c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80017a0:	498b      	ldr	r1, [pc, #556]	; (80019d0 <main+0x640>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fdb4 	bl	8000310 <strcmp>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80ec 	bne.w	8001988 <main+0x5f8>
        {
          if(strcmp(command, "ARM") == 0)
 80017b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80017b4:	4987      	ldr	r1, [pc, #540]	; (80019d4 <main+0x644>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fdaa 	bl	8000310 <strcmp>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <main+0x452>
          {
            if(!arm(state))
 80017c2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fd34 	bl	8001234 <arm>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <main+0x44a>
            {
              reliable_send_packet("ARM SUCCESS");
 80017d2:	4881      	ldr	r0, [pc, #516]	; (80019d8 <main+0x648>)
 80017d4:	f7ff fd87 	bl	80012e6 <reliable_send_packet>
 80017d8:	e0d6      	b.n	8001988 <main+0x5f8>
            }
            else
            {
              reliable_send_packet("ARM UNSUCCESSFUL");
 80017da:	4880      	ldr	r0, [pc, #512]	; (80019dc <main+0x64c>)
 80017dc:	f7ff fd83 	bl	80012e6 <reliable_send_packet>
 80017e0:	e0d2      	b.n	8001988 <main+0x5f8>
            }
          }
          else if(strcmp(command, "DISARM") == 0)
 80017e2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80017e6:	497e      	ldr	r1, [pc, #504]	; (80019e0 <main+0x650>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fd91 	bl	8000310 <strcmp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <main+0x46c>
          {
            reliable_send_packet("ALREADY DISARMED");
 80017f4:	487b      	ldr	r0, [pc, #492]	; (80019e4 <main+0x654>)
 80017f6:	f7ff fd76 	bl	80012e6 <reliable_send_packet>
 80017fa:	e0c5      	b.n	8001988 <main+0x5f8>
          }
          else if(strcmp(command, "CONT") == 0)
 80017fc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001800:	4979      	ldr	r1, [pc, #484]	; (80019e8 <main+0x658>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fd84 	bl	8000310 <strcmp>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 808a 	bne.w	8001924 <main+0x594>
          {
            uint8_t CONTS[8];
            CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001810:	2104      	movs	r1, #4
 8001812:	4876      	ldr	r0, [pc, #472]	; (80019ec <main+0x65c>)
 8001814:	f006 fb5c 	bl	8007ed0 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001820:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001824:	701a      	strb	r2, [r3, #0]
            CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182a:	4871      	ldr	r0, [pc, #452]	; (80019f0 <main+0x660>)
 800182c:	f006 fb50 	bl	8007ed0 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001838:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800183c:	705a      	strb	r2, [r3, #1]
            CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 800183e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001842:	486b      	ldr	r0, [pc, #428]	; (80019f0 <main+0x660>)
 8001844:	f006 fb44 	bl	8007ed0 <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001850:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001854:	709a      	strb	r2, [r3, #2]
            CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001856:	2101      	movs	r1, #1
 8001858:	4866      	ldr	r0, [pc, #408]	; (80019f4 <main+0x664>)
 800185a:	f006 fb39 	bl	8007ed0 <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001866:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800186a:	70da      	strb	r2, [r3, #3]
            CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	4862      	ldr	r0, [pc, #392]	; (80019f8 <main+0x668>)
 8001870:	f006 fb2e 	bl	8007ed0 <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800187c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001880:	711a      	strb	r2, [r3, #4]
            CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	485c      	ldr	r0, [pc, #368]	; (80019f8 <main+0x668>)
 8001888:	f006 fb22 	bl	8007ed0 <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001894:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001898:	715a      	strb	r2, [r3, #5]
            CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 800189a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189e:	4856      	ldr	r0, [pc, #344]	; (80019f8 <main+0x668>)
 80018a0:	f006 fb16 	bl	8007ed0 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80018ac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80018b0:	719a      	strb	r2, [r3, #6]
            CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4850      	ldr	r0, [pc, #320]	; (80019f8 <main+0x668>)
 80018b8:	f006 fb0a 	bl	8007ed0 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80018c4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80018c8:	71da      	strb	r2, [r3, #7]

            char message[100];
            for(int i=0; i<8; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80018d0:	e023      	b.n	800191a <main+0x58a>
            {
              if(CONTS[i])
 80018d2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80018d6:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 80018da:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <main+0x568>
              {
                sprintf( message,  "PYRO %d DOESN'T HAVE CONTINUITY", i+1);
 80018e6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	463b      	mov	r3, r7
 80018ee:	4943      	ldr	r1, [pc, #268]	; (80019fc <main+0x66c>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f015 fb05 	bl	8016f00 <siprintf>
 80018f6:	e007      	b.n	8001908 <main+0x578>
              }
              else
              {
                sprintf( message,  "PYRO %d HAS CONTINUITY", i+1);
 80018f8:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	463b      	mov	r3, r7
 8001900:	493f      	ldr	r1, [pc, #252]	; (8001a00 <main+0x670>)
 8001902:	4618      	mov	r0, r3
 8001904:	f015 fafc 	bl	8016f00 <siprintf>
              }

              reliable_send_packet(message);
 8001908:	463b      	mov	r3, r7
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fceb 	bl	80012e6 <reliable_send_packet>
            for(int i=0; i<8; i++)
 8001910:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001914:	3301      	adds	r3, #1
 8001916:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800191a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800191e:	2b07      	cmp	r3, #7
 8001920:	ddd7      	ble.n	80018d2 <main+0x542>
 8001922:	e031      	b.n	8001988 <main+0x5f8>
          }
        }
        else if(strcmp(state, "ARMED") == 0)
 8001924:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001928:	4936      	ldr	r1, [pc, #216]	; (8001a04 <main+0x674>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fcf0 	bl	8000310 <strcmp>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10e      	bne.n	8001954 <main+0x5c4>
        {
          if(strcmp(command, "DISARM") == 0)
 8001936:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800193a:	4929      	ldr	r1, [pc, #164]	; (80019e0 <main+0x650>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fce7 	bl	8000310 <strcmp>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d11f      	bne.n	8001988 <main+0x5f8>
          {
            if(disarm(state))
 8001948:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fc0d 	bl	800116c <disarm>
 8001952:	e019      	b.n	8001988 <main+0x5f8>
              //success
            }

          }
        }
        else if(strcmp(state, "STATIC_FIRE_LOGGING") == 0)
 8001954:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001958:	492b      	ldr	r1, [pc, #172]	; (8001a08 <main+0x678>)
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fcd8 	bl	8000310 <strcmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d110      	bne.n	8001988 <main+0x5f8>
        {
          if(strcmp(command, "STOP") == 0)
 8001966:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800196a:	4928      	ldr	r1, [pc, #160]	; (8001a0c <main+0x67c>)
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fccf 	bl	8000310 <strcmp>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <main+0x5f8>
          {
            strcpy(state,"ARMED");
 8001978:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800197c:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <main+0x674>)
 800197e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001982:	6018      	str	r0, [r3, #0]
 8001984:	3304      	adds	r3, #4
 8001986:	8019      	strh	r1, [r3, #0]
        {

        }
      }

      strcpy(communication_state,"RECIEVING");
 8001988:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800198c:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <main+0x680>)
 800198e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001990:	c303      	stmia	r3!, {r0, r1}
 8001992:	801a      	strh	r2, [r3, #0]
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001994:	f001 fff4 	bl	8003980 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019a8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001a14 <main+0x684>
 80019ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80019b4:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 80019b8:	f001 ffe2 	bl	8003980 <HAL_GetTick>
 80019bc:	f8c7 04ac 	str.w	r0, [r7, #1196]	; 0x4ac
	while (1) {
 80019c0:	e646      	b.n	8001650 <main+0x2c0>
 80019c2:	bf00      	nop
 80019c4:	08017814 	.word	0x08017814
 80019c8:	0801782c 	.word	0x0801782c
 80019cc:	08017830 	.word	0x08017830
 80019d0:	080177ec 	.word	0x080177ec
 80019d4:	08017838 	.word	0x08017838
 80019d8:	0801783c 	.word	0x0801783c
 80019dc:	08017848 	.word	0x08017848
 80019e0:	0801785c 	.word	0x0801785c
 80019e4:	08017864 	.word	0x08017864
 80019e8:	08017878 	.word	0x08017878
 80019ec:	58020400 	.word	0x58020400
 80019f0:	58021400 	.word	0x58021400
 80019f4:	58021800 	.word	0x58021800
 80019f8:	58021000 	.word	0x58021000
 80019fc:	08017880 	.word	0x08017880
 8001a00:	080178a0 	.word	0x080178a0
 8001a04:	080177f8 	.word	0x080177f8
 8001a08:	080178b8 	.word	0x080178b8
 8001a0c:	080178cc 	.word	0x080178cc
 8001a10:	08017800 	.word	0x08017800
 8001a14:	447a0000 	.word	0x447a0000

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09c      	sub	sp, #112	; 0x70
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	224c      	movs	r2, #76	; 0x4c
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f015 fa62 	bl	8016ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2220      	movs	r2, #32
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f015 fa5c 	bl	8016ef0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f007 fe5b 	bl	80096f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <SystemClock_Config+0xf4>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <SystemClock_Config+0xf4>)
 8001a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <SystemClock_Config+0xf4>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a5e:	bf00      	nop
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <SystemClock_Config+0xf4>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6c:	d1f8      	bne.n	8001a60 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001a6e:	2323      	movs	r3, #35	; 0x23
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a80:	2301      	movs	r3, #1
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a90:	230c      	movs	r3, #12
 8001a92:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f007 fe69 	bl	8009788 <HAL_RCC_OscConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001abc:	f000 ff02 	bl	80028c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac0:	233f      	movs	r3, #63	; 0x3f
 8001ac2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001acc:	2308      	movs	r3, #8
 8001ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ad0:	2340      	movs	r3, #64	; 0x40
 8001ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ad4:	2340      	movs	r3, #64	; 0x40
 8001ad6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001adc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f008 fa28 	bl	8009f3c <HAL_RCC_ClockConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001af2:	f000 fee7 	bl	80028c4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001af6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001afa:	2100      	movs	r1, #0
 8001afc:	2000      	movs	r0, #0
 8001afe:	f008 fbd3 	bl	800a2a8 <HAL_RCC_MCOConfig>
}
 8001b02:	bf00      	nop
 8001b04:	3770      	adds	r7, #112	; 0x70
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	58024800 	.word	0x58024800

08001b10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0ae      	sub	sp, #184	; 0xb8
 8001b14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	22b8      	movs	r2, #184	; 0xb8
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f015 f9e7 	bl	8016ef0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b22:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b32:	230c      	movs	r3, #12
 8001b34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b36:	2304      	movs	r3, #4
 8001b38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b42:	23c0      	movs	r3, #192	; 0xc0
 8001b44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f008 fde3 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001b68:	f000 feac 	bl	80028c4 <Error_Handler>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	37b8      	adds	r7, #184	; 0xb8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	; 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b86:	463b      	mov	r3, r7
 8001b88:	2224      	movs	r2, #36	; 0x24
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f015 f9af 	bl	8016ef0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001b94:	4a31      	ldr	r2, [pc, #196]	; (8001c5c <MX_ADC1_Init+0xe8>)
 8001b96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001b9a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bae:	2204      	movs	r2, #4
 8001bb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bf2:	4819      	ldr	r0, [pc, #100]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001bf4:	f002 f950 	bl	8003e98 <HAL_ADC_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001bfe:	f000 fe61 	bl	80028c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4812      	ldr	r0, [pc, #72]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001c0e:	f003 f98b 	bl	8004f28 <HAL_ADCEx_MultiModeConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c18:	f000 fe54 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_ADC1_Init+0xec>)
 8001c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c20:	2306      	movs	r3, #6
 8001c22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c24:	2303      	movs	r3, #3
 8001c26:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_ADC1_Init+0xe4>)
 8001c42:	f002 fb31 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c4c:	f000 fe3a 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	24000b08 	.word	0x24000b08
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	2a000400 	.word	0x2a000400

08001c64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2224      	movs	r2, #36	; 0x24
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f015 f93d 	bl	8016ef0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001c78:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <MX_ADC3_Init+0xd4>)
 8001c7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001c7e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c82:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001c86:	2208      	movs	r2, #8
 8001c88:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001c98:	2204      	movs	r2, #4
 8001c9a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cea:	4812      	ldr	r0, [pc, #72]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001cec:	f002 f8d4 	bl	8003e98 <HAL_ADC_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001cf6:	f000 fde5 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_ADC3_Init+0xd8>)
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_ADC3_Init+0xd0>)
 8001d1e:	f002 fac3 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d28:	f000 fdcc 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	24000b78 	.word	0x24000b78
 8001d38:	58026000 	.word	0x58026000
 8001d3c:	04300002 	.word	0x04300002

08001d40 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d46:	4a2f      	ldr	r2, [pc, #188]	; (8001e04 <MX_FDCAN3_Init+0xc4>)
 8001d48:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d76:	2202      	movs	r2, #2
 8001d78:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001db2:	2204      	movs	r2, #4
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001dca:	2204      	movs	r2, #4
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001de8:	2204      	movs	r2, #4
 8001dea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_FDCAN3_Init+0xc0>)
 8001dee:	f005 fb63 	bl	80074b8 <HAL_FDCAN_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001df8:	f000 fd64 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	24000cd8 	.word	0x24000cd8
 8001e04:	4000d400 	.word	0x4000d400

08001e08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <MX_I2C2_Init+0x78>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <MX_I2C2_Init+0x7c>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e42:	480e      	ldr	r0, [pc, #56]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e44:	f006 f876 	bl	8007f34 <HAL_I2C_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e4e:	f000 fd39 	bl	80028c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4809      	ldr	r0, [pc, #36]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e56:	f006 f8fd 	bl	8008054 <HAL_I2CEx_ConfigAnalogFilter>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f000 fd30 	bl	80028c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_I2C2_Init+0x74>)
 8001e68:	f006 f93f 	bl	80080ea <HAL_I2CEx_ConfigDigitalFilter>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e72:	f000 fd27 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	24000d78 	.word	0x24000d78
 8001e80:	40005800 	.word	0x40005800
 8001e84:	20303e5d 	.word	0x20303e5d

08001e88 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_SDMMC2_SD_Init+0x34>)
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <MX_SDMMC2_SD_Init+0x38>)
 8001e90:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_SDMMC2_SD_Init+0x34>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_SDMMC2_SD_Init+0x34>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <MX_SDMMC2_SD_Init+0x34>)
 8001ea0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea4:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <MX_SDMMC2_SD_Init+0x34>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <MX_SDMMC2_SD_Init+0x34>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	24000dcc 	.word	0x24000dcc
 8001ec0:	48022400 	.word	0x48022400

08001ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001eca:	4a28      	ldr	r2, [pc, #160]	; (8001f6c <MX_SPI1_Init+0xa8>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001ed0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001ede:	2207      	movs	r2, #7
 8001ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee2:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001ef0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001ef8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001efc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_SPI1_Init+0xa4>)
 8001f56:	f00c fc31 	bl	800e7bc <HAL_SPI_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f60:	f000 fcb0 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	24000e48 	.word	0x24000e48
 8001f6c:	40013000 	.word	0x40013000

08001f70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <MX_SPI2_Init+0xa8>)
 8001f78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001f7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001f9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fa4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fa8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_SPI2_Init+0xa4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_SPI2_Init+0xa4>)
 8002002:	f00c fbdb 	bl	800e7bc <HAL_SPI_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800200c:	f000 fc5a 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	24000ed0 	.word	0x24000ed0
 8002018:	40003800 	.word	0x40003800

0800201c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002022:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <MX_SPI3_Init+0xa8>)
 8002024:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002028:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800202c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002036:	2207      	movs	r2, #7
 8002038:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <MX_SPI3_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002048:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800204c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002050:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002054:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_SPI3_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_SPI3_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_SPI3_Init+0xa4>)
 800207e:	2200      	movs	r2, #0
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <MX_SPI3_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <MX_SPI3_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_SPI3_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <MX_SPI3_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_SPI3_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_SPI3_Init+0xa4>)
 80020ae:	f00c fb85 	bl	800e7bc <HAL_SPI_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80020b8:	f000 fc04 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	24000f58 	.word	0x24000f58
 80020c4:	40003c00 	.word	0x40003c00

080020c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020da:	463b      	mov	r3, r7
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
 80020e8:	615a      	str	r2, [r3, #20]
 80020ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <MX_TIM2_Init+0xac>)
 80020ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MX_TIM2_Init+0xac>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <MX_TIM2_Init+0xac>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_TIM2_Init+0xac>)
 8002102:	225a      	movs	r2, #90	; 0x5a
 8002104:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <MX_TIM2_Init+0xac>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <MX_TIM2_Init+0xac>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002112:	4818      	ldr	r0, [pc, #96]	; (8002174 <MX_TIM2_Init+0xac>)
 8002114:	f00d f8eb 	bl	800f2ee <HAL_TIM_PWM_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800211e:	f000 fbd1 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	4810      	ldr	r0, [pc, #64]	; (8002174 <MX_TIM2_Init+0xac>)
 8002132:	f00e fb71 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800213c:	f000 fbc2 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002140:	2360      	movs	r3, #96	; 0x60
 8002142:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002150:	463b      	mov	r3, r7
 8002152:	2208      	movs	r2, #8
 8002154:	4619      	mov	r1, r3
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <MX_TIM2_Init+0xac>)
 8002158:	f00d fd90 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002162:	f000 fbaf 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <MX_TIM2_Init+0xac>)
 8002168:	f001 f8a0 	bl	80032ac <HAL_TIM_MspPostInit>

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	24000fe0 	.word	0x24000fe0

08002178 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800218a:	463b      	mov	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
 8002198:	615a      	str	r2, [r3, #20]
 800219a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <MX_TIM3_Init+0xc0>)
 800219e:	4a27      	ldr	r2, [pc, #156]	; (800223c <MX_TIM3_Init+0xc4>)
 80021a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <MX_TIM3_Init+0xc0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <MX_TIM3_Init+0xc0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <MX_TIM3_Init+0xc0>)
 80021b0:	225a      	movs	r2, #90	; 0x5a
 80021b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <MX_TIM3_Init+0xc0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ba:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <MX_TIM3_Init+0xc0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021c0:	481d      	ldr	r0, [pc, #116]	; (8002238 <MX_TIM3_Init+0xc0>)
 80021c2:	f00d f894 	bl	800f2ee <HAL_TIM_PWM_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021cc:	f000 fb7a 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	4816      	ldr	r0, [pc, #88]	; (8002238 <MX_TIM3_Init+0xc0>)
 80021e0:	f00e fb1a 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021ea:	f000 fb6b 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ee:	2360      	movs	r3, #96	; 0x60
 80021f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021fe:	463b      	mov	r3, r7
 8002200:	2200      	movs	r2, #0
 8002202:	4619      	mov	r1, r3
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <MX_TIM3_Init+0xc0>)
 8002206:	f00d fd39 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002210:	f000 fb58 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002214:	463b      	mov	r3, r7
 8002216:	2204      	movs	r2, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4807      	ldr	r0, [pc, #28]	; (8002238 <MX_TIM3_Init+0xc0>)
 800221c:	f00d fd2e 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002226:	f000 fb4d 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800222a:	4803      	ldr	r0, [pc, #12]	; (8002238 <MX_TIM3_Init+0xc0>)
 800222c:	f001 f83e 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2400102c 	.word	0x2400102c
 800223c:	40000400 	.word	0x40000400

08002240 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002252:	463b      	mov	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
 8002260:	615a      	str	r2, [r3, #20]
 8002262:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002264:	4b32      	ldr	r3, [pc, #200]	; (8002330 <MX_TIM4_Init+0xf0>)
 8002266:	4a33      	ldr	r2, [pc, #204]	; (8002334 <MX_TIM4_Init+0xf4>)
 8002268:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <MX_TIM4_Init+0xf0>)
 800226c:	221c      	movs	r2, #28
 800226e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <MX_TIM4_Init+0xf0>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002276:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <MX_TIM4_Init+0xf0>)
 8002278:	f242 720f 	movw	r2, #9999	; 0x270f
 800227c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <MX_TIM4_Init+0xf0>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <MX_TIM4_Init+0xf0>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800228a:	4829      	ldr	r0, [pc, #164]	; (8002330 <MX_TIM4_Init+0xf0>)
 800228c:	f00d f82f 	bl	800f2ee <HAL_TIM_PWM_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002296:	f000 fb15 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	4821      	ldr	r0, [pc, #132]	; (8002330 <MX_TIM4_Init+0xf0>)
 80022aa:	f00e fab5 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80022b4:	f000 fb06 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b8:	2360      	movs	r3, #96	; 0x60
 80022ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	4619      	mov	r1, r3
 80022ce:	4818      	ldr	r0, [pc, #96]	; (8002330 <MX_TIM4_Init+0xf0>)
 80022d0:	f00d fcd4 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80022da:	f000 faf3 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022de:	463b      	mov	r3, r7
 80022e0:	2204      	movs	r2, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4812      	ldr	r0, [pc, #72]	; (8002330 <MX_TIM4_Init+0xf0>)
 80022e6:	f00d fcc9 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80022f0:	f000 fae8 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022f4:	463b      	mov	r3, r7
 80022f6:	2208      	movs	r2, #8
 80022f8:	4619      	mov	r1, r3
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <MX_TIM4_Init+0xf0>)
 80022fc:	f00d fcbe 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002306:	f000 fadd 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	220c      	movs	r2, #12
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM4_Init+0xf0>)
 8002312:	f00d fcb3 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800231c:	f000 fad2 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM4_Init+0xf0>)
 8002322:	f000 ffc3 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	24001078 	.word	0x24001078
 8002334:	40000800 	.word	0x40000800

08002338 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800234a:	463b      	mov	r3, r7
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <MX_TIM5_Init+0xac>)
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <MX_TIM5_Init+0xb0>)
 8002360:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_TIM5_Init+0xac>)
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <MX_TIM5_Init+0xac>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM5_Init+0xac>)
 8002370:	225a      	movs	r2, #90	; 0x5a
 8002372:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_TIM5_Init+0xac>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM5_Init+0xac>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002380:	4818      	ldr	r0, [pc, #96]	; (80023e4 <MX_TIM5_Init+0xac>)
 8002382:	f00c ffb4 	bl	800f2ee <HAL_TIM_PWM_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800238c:	f000 fa9a 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4811      	ldr	r0, [pc, #68]	; (80023e4 <MX_TIM5_Init+0xac>)
 80023a0:	f00e fa3a 	bl	8010818 <HAL_TIMEx_MasterConfigSynchronization>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80023aa:	f000 fa8b 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ae:	2360      	movs	r3, #96	; 0x60
 80023b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023be:	463b      	mov	r3, r7
 80023c0:	220c      	movs	r2, #12
 80023c2:	4619      	mov	r1, r3
 80023c4:	4807      	ldr	r0, [pc, #28]	; (80023e4 <MX_TIM5_Init+0xac>)
 80023c6:	f00d fc59 	bl	800fc7c <HAL_TIM_PWM_ConfigChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80023d0:	f000 fa78 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80023d4:	4803      	ldr	r0, [pc, #12]	; (80023e4 <MX_TIM5_Init+0xac>)
 80023d6:	f000 ff69 	bl	80032ac <HAL_TIM_MspPostInit>

}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	240010c4 	.word	0x240010c4
 80023e8:	40000c00 	.word	0x40000c00

080023ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <MX_UART4_Init+0x90>)
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <MX_UART4_Init+0x94>)
 80023f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <MX_UART4_Init+0x90>)
 80023f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b1f      	ldr	r3, [pc, #124]	; (800247c <MX_UART4_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <MX_UART4_Init+0x90>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <MX_UART4_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <MX_UART4_Init+0x90>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <MX_UART4_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <MX_UART4_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <MX_UART4_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_UART4_Init+0x90>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <MX_UART4_Init+0x90>)
 8002430:	2200      	movs	r2, #0
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002434:	4811      	ldr	r0, [pc, #68]	; (800247c <MX_UART4_Init+0x90>)
 8002436:	f00e faa9 	bl	801098c <HAL_UART_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002440:	f000 fa40 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002444:	2100      	movs	r1, #0
 8002446:	480d      	ldr	r0, [pc, #52]	; (800247c <MX_UART4_Init+0x90>)
 8002448:	f00f fbaf 	bl	8011baa <HAL_UARTEx_SetTxFifoThreshold>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002452:	f000 fa37 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002456:	2100      	movs	r1, #0
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <MX_UART4_Init+0x90>)
 800245a:	f00f fbe4 	bl	8011c26 <HAL_UARTEx_SetRxFifoThreshold>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002464:	f000 fa2e 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_UART4_Init+0x90>)
 800246a:	f00f fb65 	bl	8011b38 <HAL_UARTEx_DisableFifoMode>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002474:	f000 fa26 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	24001368 	.word	0x24001368
 8002480:	40004c00 	.word	0x40004c00

08002484 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <MX_USART6_UART_Init+0x90>)
 800248a:	4a23      	ldr	r2, [pc, #140]	; (8002518 <MX_USART6_UART_Init+0x94>)
 800248c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <MX_USART6_UART_Init+0x90>)
 8002490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002494:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <MX_USART6_UART_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <MX_USART6_UART_Init+0x90>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024aa:	220c      	movs	r2, #12
 80024ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024cc:	4811      	ldr	r0, [pc, #68]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024ce:	f00e fa5d 	bl	801098c <HAL_UART_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80024d8:	f000 f9f4 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024dc:	2100      	movs	r1, #0
 80024de:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024e0:	f00f fb63 	bl	8011baa <HAL_UARTEx_SetTxFifoThreshold>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80024ea:	f000 f9eb 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ee:	2100      	movs	r1, #0
 80024f0:	4808      	ldr	r0, [pc, #32]	; (8002514 <MX_USART6_UART_Init+0x90>)
 80024f2:	f00f fb98 	bl	8011c26 <HAL_UARTEx_SetRxFifoThreshold>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80024fc:	f000 f9e2 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_USART6_UART_Init+0x90>)
 8002502:	f00f fb19 	bl	8011b38 <HAL_UARTEx_DisableFifoMode>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800250c:	f000 f9da 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	240013fc 	.word	0x240013fc
 8002518:	40011400 	.word	0x40011400

0800251c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <MX_DMA_Init+0xbc>)
 8002524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002528:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <MX_DMA_Init+0xbc>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <MX_DMA_Init+0xbc>)
 8002534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <MX_DMA_Init+0xbc>)
 8002542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002546:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <MX_DMA_Init+0xbc>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <MX_DMA_Init+0xbc>)
 8002552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	200b      	movs	r0, #11
 8002564:	f002 fe9d 	bl	80052a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002568:	200b      	movs	r0, #11
 800256a:	f002 feb4 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	200c      	movs	r0, #12
 8002574:	f002 fe95 	bl	80052a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002578:	200c      	movs	r0, #12
 800257a:	f002 feac 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	200d      	movs	r0, #13
 8002584:	f002 fe8d 	bl	80052a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002588:	200d      	movs	r0, #13
 800258a:	f002 fea4 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	200e      	movs	r0, #14
 8002594:	f002 fe85 	bl	80052a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002598:	200e      	movs	r0, #14
 800259a:	f002 fe9c 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	200f      	movs	r0, #15
 80025a4:	f002 fe7d 	bl	80052a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025a8:	200f      	movs	r0, #15
 80025aa:	f002 fe94 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2010      	movs	r0, #16
 80025b4:	f002 fe75 	bl	80052a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025b8:	2010      	movs	r0, #16
 80025ba:	f002 fe8c 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	2046      	movs	r0, #70	; 0x46
 80025c4:	f002 fe6d 	bl	80052a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025c8:	2046      	movs	r0, #70	; 0x46
 80025ca:	f002 fe84 	bl	80052d6 <HAL_NVIC_EnableIRQ>

}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	58024400 	.word	0x58024400

080025dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08e      	sub	sp, #56	; 0x38
 80025e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025f2:	4bac      	ldr	r3, [pc, #688]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80025f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f8:	4aaa      	ldr	r2, [pc, #680]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002602:	4ba8      	ldr	r3, [pc, #672]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002610:	4ba4      	ldr	r3, [pc, #656]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002616:	4aa3      	ldr	r2, [pc, #652]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002618:	f043 0320 	orr.w	r3, r3, #32
 800261c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002620:	4ba0      	ldr	r3, [pc, #640]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262e:	4b9d      	ldr	r3, [pc, #628]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002634:	4a9b      	ldr	r2, [pc, #620]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263e:	4b99      	ldr	r3, [pc, #612]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264c:	4b95      	ldr	r3, [pc, #596]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002652:	4a94      	ldr	r2, [pc, #592]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800265c:	4b91      	ldr	r3, [pc, #580]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 800265e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	4b8e      	ldr	r3, [pc, #568]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002670:	4a8c      	ldr	r2, [pc, #560]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267a:	4b8a      	ldr	r3, [pc, #552]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b86      	ldr	r3, [pc, #536]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268e:	4a85      	ldr	r2, [pc, #532]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002698:	4b82      	ldr	r3, [pc, #520]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a6:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ac:	4a7d      	ldr	r2, [pc, #500]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80026ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c4:	4b77      	ldr	r3, [pc, #476]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	4a76      	ldr	r2, [pc, #472]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <MX_GPIO_Init+0x2c8>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f241 5104 	movw	r1, #5380	; 0x1504
 80026e8:	486f      	ldr	r0, [pc, #444]	; (80028a8 <MX_GPIO_Init+0x2cc>)
 80026ea:	f005 fc09 	bl	8007f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	f248 0106 	movw	r1, #32774	; 0x8006
 80026f4:	486d      	ldr	r0, [pc, #436]	; (80028ac <MX_GPIO_Init+0x2d0>)
 80026f6:	f005 fc03 	bl	8007f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2130      	movs	r1, #48	; 0x30
 80026fe:	486c      	ldr	r0, [pc, #432]	; (80028b0 <MX_GPIO_Init+0x2d4>)
 8002700:	f005 fbfe 	bl	8007f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	2102      	movs	r1, #2
 8002708:	486a      	ldr	r0, [pc, #424]	; (80028b4 <MX_GPIO_Init+0x2d8>)
 800270a:	f005 fbf9 	bl	8007f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002714:	4868      	ldr	r0, [pc, #416]	; (80028b8 <MX_GPIO_Init+0x2dc>)
 8002716:	f005 fbf3 	bl	8007f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	210e      	movs	r1, #14
 800271e:	4867      	ldr	r0, [pc, #412]	; (80028bc <MX_GPIO_Init+0x2e0>)
 8002720:	f005 fbee 	bl	8007f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	f240 3101 	movw	r1, #769	; 0x301
 800272a:	4865      	ldr	r0, [pc, #404]	; (80028c0 <MX_GPIO_Init+0x2e4>)
 800272c:	f005 fbe8 	bl	8007f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002730:	f241 5304 	movw	r3, #5380	; 0x1504
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002736:	2301      	movs	r3, #1
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002746:	4619      	mov	r1, r3
 8002748:	4857      	ldr	r0, [pc, #348]	; (80028a8 <MX_GPIO_Init+0x2cc>)
 800274a:	f005 fa19 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800274e:	f248 0306 	movw	r3, #32774	; 0x8006
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002754:	2301      	movs	r3, #1
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002764:	4619      	mov	r1, r3
 8002766:	4851      	ldr	r0, [pc, #324]	; (80028ac <MX_GPIO_Init+0x2d0>)
 8002768:	f005 fa0a 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800276c:	2330      	movs	r3, #48	; 0x30
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002770:	2301      	movs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002780:	4619      	mov	r1, r3
 8002782:	484b      	ldr	r0, [pc, #300]	; (80028b0 <MX_GPIO_Init+0x2d4>)
 8002784:	f005 f9fc 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002788:	2302      	movs	r3, #2
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279c:	4619      	mov	r1, r3
 800279e:	4845      	ldr	r0, [pc, #276]	; (80028b4 <MX_GPIO_Init+0x2d8>)
 80027a0:	f005 f9ee 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80027a4:	2304      	movs	r3, #4
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b4:	4619      	mov	r1, r3
 80027b6:	483f      	ldr	r0, [pc, #252]	; (80028b4 <MX_GPIO_Init+0x2d8>)
 80027b8:	f005 f9e2 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80027bc:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d2:	4619      	mov	r1, r3
 80027d4:	4838      	ldr	r0, [pc, #224]	; (80028b8 <MX_GPIO_Init+0x2dc>)
 80027d6:	f005 f9d3 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80027da:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e4:	2301      	movs	r3, #1
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ec:	4619      	mov	r1, r3
 80027ee:	4832      	ldr	r0, [pc, #200]	; (80028b8 <MX_GPIO_Init+0x2dc>)
 80027f0:	f005 f9c6 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002804:	4619      	mov	r1, r3
 8002806:	482d      	ldr	r0, [pc, #180]	; (80028bc <MX_GPIO_Init+0x2e0>)
 8002808:	f005 f9ba 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 800280c:	230e      	movs	r3, #14
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002810:	2301      	movs	r3, #1
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	4826      	ldr	r0, [pc, #152]	; (80028bc <MX_GPIO_Init+0x2e0>)
 8002824:	f005 f9ac 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002828:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282e:	2300      	movs	r3, #0
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002832:	2301      	movs	r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	4619      	mov	r1, r3
 800283c:	481a      	ldr	r0, [pc, #104]	; (80028a8 <MX_GPIO_Init+0x2cc>)
 800283e:	f005 f99f 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002842:	f240 3301 	movw	r3, #769	; 0x301
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002848:	2301      	movs	r3, #1
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002858:	4619      	mov	r1, r3
 800285a:	4819      	ldr	r0, [pc, #100]	; (80028c0 <MX_GPIO_Init+0x2e4>)
 800285c:	f005 f990 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002860:	2310      	movs	r3, #16
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	4619      	mov	r1, r3
 8002872:	4812      	ldr	r0, [pc, #72]	; (80028bc <MX_GPIO_Init+0x2e0>)
 8002874:	f005 f984 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800288a:	2300      	movs	r3, #0
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_GPIO_Init+0x2d0>)
 8002896:	f005 f973 	bl	8007b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800289a:	bf00      	nop
 800289c:	3738      	adds	r7, #56	; 0x38
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58021000 	.word	0x58021000
 80028ac:	58020000 	.word	0x58020000
 80028b0:	58020800 	.word	0x58020800
 80028b4:	58020400 	.word	0x58020400
 80028b8:	58021400 	.word	0x58021400
 80028bc:	58021800 	.word	0x58021800
 80028c0:	58020c00 	.word	0x58020c00

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028cc:	e7fe      	b.n	80028cc <Error_Handler+0x8>
	...

080028d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_MspInit+0x30>)
 80028d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028dc:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_MspInit+0x30>)
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MspInit+0x30>)
 80028e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	58024400 	.word	0x58024400

08002904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_ADC_MspInit+0x194>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d159      	bne.n	80029da <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 8002928:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800292c:	4a5b      	ldr	r2, [pc, #364]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002936:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 8002938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002954:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002962:	2301      	movs	r3, #1
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002966:	2303      	movs	r3, #3
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	484a      	ldr	r0, [pc, #296]	; (8002aa0 <HAL_ADC_MspInit+0x19c>)
 8002976:	f005 f903 	bl	8007b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 800297c:	4a4a      	ldr	r2, [pc, #296]	; (8002aa8 <HAL_ADC_MspInit+0x1a4>)
 800297e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002980:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 8002982:	2209      	movs	r2, #9
 8002984:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800298c:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002992:	4b44      	ldr	r3, [pc, #272]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 8002994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002998:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 800299c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029a2:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 80029a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80029aa:	4b3e      	ldr	r3, [pc, #248]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029b0:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029bc:	4839      	ldr	r0, [pc, #228]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 80029be:	f002 fca5 	bl	800530c <HAL_DMA_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80029c8:	f7ff ff7c 	bl	80028c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a35      	ldr	r2, [pc, #212]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58
 80029d2:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <HAL_ADC_MspInit+0x1a0>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029d8:	e059      	b.n	8002a8e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a33      	ldr	r2, [pc, #204]	; (8002aac <HAL_ADC_MspInit+0x1a8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d154      	bne.n	8002a8e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 80029ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 80029f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a08:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_ADC_MspInit+0x198>)
 8002a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a24:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a28:	f000 ffda 	bl	80039e0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002a2c:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <HAL_ADC_MspInit+0x1b0>)
 8002a30:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a34:	2273      	movs	r2, #115	; 0x73
 8002a36:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a52:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a62:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a6a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a72:	480f      	ldr	r0, [pc, #60]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a74:	f002 fc4a 	bl	800530c <HAL_DMA_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002a7e:	f7ff ff21 	bl	80028c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a86:	659a      	str	r2, [r3, #88]	; 0x58
 8002a88:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_ADC_MspInit+0x1ac>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a8e:	bf00      	nop
 8002a90:	3730      	adds	r7, #48	; 0x30
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	58020800 	.word	0x58020800
 8002aa4:	24000be8 	.word	0x24000be8
 8002aa8:	40020088 	.word	0x40020088
 8002aac:	58026000 	.word	0x58026000
 8002ab0:	24000c60 	.word	0x24000c60
 8002ab4:	400204b8 	.word	0x400204b8

08002ab8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0b8      	sub	sp, #224	; 0xe0
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	22b8      	movs	r2, #184	; 0xb8
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f014 fa09 	bl	8016ef0 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <HAL_FDCAN_MspInit+0xc4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d144      	bne.n	8002b72 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ae8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	4618      	mov	r0, r3
 8002afe:	f007 fe13 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002b08:	f7ff fedc 	bl	80028c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_FDCAN_MspInit+0xc8>)
 8002b0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_FDCAN_MspInit+0xc8>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_FDCAN_MspInit+0xc8>)
 8002b1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_FDCAN_MspInit+0xc8>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_FDCAN_MspInit+0xc8>)
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_FDCAN_MspInit+0xc8>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b48:	23c0      	movs	r3, #192	; 0xc0
 8002b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002b60:	2302      	movs	r3, #2
 8002b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_FDCAN_MspInit+0xcc>)
 8002b6e:	f005 f807 	bl	8007b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002b72:	bf00      	nop
 8002b74:	37e0      	adds	r7, #224	; 0xe0
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	4000d400 	.word	0x4000d400
 8002b80:	58024400 	.word	0x58024400
 8002b84:	58021400 	.word	0x58021400

08002b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b0b8      	sub	sp, #224	; 0xe0
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	22b8      	movs	r2, #184	; 0xb8
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f014 f9a1 	bl	8016ef0 <memset>
  if(hi2c->Instance==I2C2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <HAL_I2C_MspInit+0xc4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d145      	bne.n	8002c44 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bb8:	f04f 0208 	mov.w	r2, #8
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bca:	f107 0310 	add.w	r3, r7, #16
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f007 fdaa 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002bda:	f7ff fe73 	bl	80028c4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_I2C_MspInit+0xc8>)
 8002be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be4:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_I2C_MspInit+0xc8>)
 8002be6:	f043 0320 	orr.w	r3, r3, #32
 8002bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_I2C_MspInit+0xc8>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c02:	2312      	movs	r3, #18
 8002c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c14:	2304      	movs	r3, #4
 8002c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c1e:	4619      	mov	r1, r3
 8002c20:	480c      	ldr	r0, [pc, #48]	; (8002c54 <HAL_I2C_MspInit+0xcc>)
 8002c22:	f004 ffad 	bl	8007b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_I2C_MspInit+0xc8>)
 8002c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c2c:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_I2C_MspInit+0xc8>)
 8002c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_I2C_MspInit+0xc8>)
 8002c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	37e0      	adds	r7, #224	; 0xe0
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40005800 	.word	0x40005800
 8002c50:	58024400 	.word	0x58024400
 8002c54:	58021400 	.word	0x58021400

08002c58 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b0ba      	sub	sp, #232	; 0xe8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c70:	f107 0318 	add.w	r3, r7, #24
 8002c74:	22b8      	movs	r2, #184	; 0xb8
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f014 f939 	bl	8016ef0 <memset>
  if(hsd->Instance==SDMMC2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5d      	ldr	r2, [pc, #372]	; (8002df8 <HAL_SD_MspInit+0x1a0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	f040 80b3 	bne.w	8002df0 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002c8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9a:	f107 0318 	add.w	r3, r7, #24
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f007 fd42 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002caa:	f7ff fe0b 	bl	80028c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002cae:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cb4:	4a51      	ldr	r2, [pc, #324]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cba:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002cbe:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd2:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cdc:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cea:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf0:	4a42      	ldr	r2, [pc, #264]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_SD_MspInit+0x1a4>)
 8002cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d08:	2340      	movs	r3, #64	; 0x40
 8002d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d20:	230b      	movs	r3, #11
 8002d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4834      	ldr	r0, [pc, #208]	; (8002e00 <HAL_SD_MspInit+0x1a8>)
 8002d2e:	f004 ff27 	bl	8007b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d4a:	230b      	movs	r3, #11
 8002d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d54:	4619      	mov	r1, r3
 8002d56:	482a      	ldr	r0, [pc, #168]	; (8002e00 <HAL_SD_MspInit+0x1a8>)
 8002d58:	f004 ff12 	bl	8007b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d76:	230b      	movs	r3, #11
 8002d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4820      	ldr	r0, [pc, #128]	; (8002e04 <HAL_SD_MspInit+0x1ac>)
 8002d84:	f004 fefc 	bl	8007b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002da2:	230b      	movs	r3, #11
 8002da4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002da8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4815      	ldr	r0, [pc, #84]	; (8002e04 <HAL_SD_MspInit+0x1ac>)
 8002db0:	f004 fee6 	bl	8007b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002db4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002dce:	230a      	movs	r3, #10
 8002dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480a      	ldr	r0, [pc, #40]	; (8002e04 <HAL_SD_MspInit+0x1ac>)
 8002ddc:	f004 fed0 	bl	8007b80 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	207c      	movs	r0, #124	; 0x7c
 8002de6:	f002 fa5c 	bl	80052a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002dea:	207c      	movs	r0, #124	; 0x7c
 8002dec:	f002 fa73 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002df0:	bf00      	nop
 8002df2:	37e8      	adds	r7, #232	; 0xe8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	48022400 	.word	0x48022400
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	58020c00 	.word	0x58020c00
 8002e04:	58021800 	.word	0x58021800

08002e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08e      	sub	sp, #56	; 0x38
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_SPI_MspInit+0x15c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d12e      	bne.n	8002e88 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e30:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e3a:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4e:	4a46      	ldr	r2, [pc, #280]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e66:	23e0      	movs	r3, #224	; 0xe0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e76:	2305      	movs	r3, #5
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7e:	4619      	mov	r1, r3
 8002e80:	483a      	ldr	r0, [pc, #232]	; (8002f6c <HAL_SPI_MspInit+0x164>)
 8002e82:	f004 fe7d 	bl	8007b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e86:	e068      	b.n	8002f5a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a38      	ldr	r2, [pc, #224]	; (8002f70 <HAL_SPI_MspInit+0x168>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12f      	bne.n	8002ef2 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e98:	4a33      	ldr	r2, [pc, #204]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb6:	4a2c      	ldr	r2, [pc, #176]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ece:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ee0:	2305      	movs	r3, #5
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4822      	ldr	r0, [pc, #136]	; (8002f74 <HAL_SPI_MspInit+0x16c>)
 8002eec:	f004 fe48 	bl	8007b80 <HAL_GPIO_Init>
}
 8002ef0:	e033      	b.n	8002f5a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_SPI_MspInit+0x170>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d12e      	bne.n	8002f5a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f20:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_SPI_MspInit+0x160>)
 8002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f52:	4619      	mov	r1, r3
 8002f54:	4809      	ldr	r0, [pc, #36]	; (8002f7c <HAL_SPI_MspInit+0x174>)
 8002f56:	f004 fe13 	bl	8007b80 <HAL_GPIO_Init>
}
 8002f5a:	bf00      	nop
 8002f5c:	3738      	adds	r7, #56	; 0x38
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40013000 	.word	0x40013000
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	58020000 	.word	0x58020000
 8002f70:	40003800 	.word	0x40003800
 8002f74:	58020400 	.word	0x58020400
 8002f78:	40003c00 	.word	0x40003c00
 8002f7c:	58020800 	.word	0x58020800

08002f80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 031c 	add.w	r3, r7, #28
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d15d      	bne.n	800305e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa2:	4b8e      	ldr	r3, [pc, #568]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8002fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa8:	4a8c      	ldr	r2, [pc, #560]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fb2:	4b8a      	ldr	r3, [pc, #552]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8002fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b86      	ldr	r3, [pc, #536]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc6:	4a85      	ldr	r2, [pc, #532]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd0:	4b82      	ldr	r3, [pc, #520]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8002fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4879      	ldr	r0, [pc, #484]	; (80031e0 <HAL_TIM_PWM_MspInit+0x260>)
 8002ffa:	f004 fdc1 	bl	8007b80 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002ffe:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003000:	4a79      	ldr	r2, [pc, #484]	; (80031e8 <HAL_TIM_PWM_MspInit+0x268>)
 8003002:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003004:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003006:	2214      	movs	r2, #20
 8003008:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003010:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003016:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800301c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800301e:	4b71      	ldr	r3, [pc, #452]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003024:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003026:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003028:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800302c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800302e:	4b6d      	ldr	r3, [pc, #436]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003030:	2200      	movs	r2, #0
 8003032:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003034:	4b6b      	ldr	r3, [pc, #428]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003036:	2200      	movs	r2, #0
 8003038:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 800303c:	2200      	movs	r2, #0
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003040:	4868      	ldr	r0, [pc, #416]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003042:	f002 f963 	bl	800530c <HAL_DMA_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 800304c:	f7ff fc3a 	bl	80028c4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a64      	ldr	r2, [pc, #400]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
 8003056:	4a63      	ldr	r2, [pc, #396]	; (80031e4 <HAL_TIM_PWM_MspInit+0x264>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800305c:	e119      	b.n	8003292 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a62      	ldr	r2, [pc, #392]	; (80031ec <HAL_TIM_PWM_MspInit+0x26c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d16d      	bne.n	8003144 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003068:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 800306a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800306e:	4a5b      	ldr	r2, [pc, #364]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003078:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 800307a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003086:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 8003088:	4a5a      	ldr	r2, [pc, #360]	; (80031f4 <HAL_TIM_PWM_MspInit+0x274>)
 800308a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800308c:	4b58      	ldr	r3, [pc, #352]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 800308e:	2218      	movs	r2, #24
 8003090:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003092:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003098:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	4b54      	ldr	r3, [pc, #336]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030a6:	4b52      	ldr	r3, [pc, #328]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ac:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030ae:	4b50      	ldr	r3, [pc, #320]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030b4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80030b6:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030be:	2200      	movs	r2, #0
 80030c0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030c2:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80030c8:	4849      	ldr	r0, [pc, #292]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030ca:	f002 f91f 	bl	800530c <HAL_DMA_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80030d4:	f7ff fbf6 	bl	80028c4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a45      	ldr	r2, [pc, #276]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
 80030de:	4a44      	ldr	r2, [pc, #272]	; (80031f0 <HAL_TIM_PWM_MspInit+0x270>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80030e4:	4b44      	ldr	r3, [pc, #272]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 80030e6:	4a45      	ldr	r2, [pc, #276]	; (80031fc <HAL_TIM_PWM_MspInit+0x27c>)
 80030e8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80030ea:	4b43      	ldr	r3, [pc, #268]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 80030ec:	2217      	movs	r2, #23
 80030ee:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 80030f2:	2240      	movs	r2, #64	; 0x40
 80030f4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030fc:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 80030fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003102:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003104:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 8003106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800310a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800310c:	4b3a      	ldr	r3, [pc, #232]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 800310e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003112:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003114:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 800311c:	2200      	movs	r2, #0
 800311e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003126:	4834      	ldr	r0, [pc, #208]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 8003128:	f002 f8f0 	bl	800530c <HAL_DMA_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003132:	f7ff fbc7 	bl	80028c4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
 800313c:	4a2e      	ldr	r2, [pc, #184]	; (80031f8 <HAL_TIM_PWM_MspInit+0x278>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003142:	e0a6      	b.n	8003292 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <HAL_TIM_PWM_MspInit+0x280>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d15e      	bne.n	800320c <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8003150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003154:	4a21      	ldr	r2, [pc, #132]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <HAL_TIM_PWM_MspInit+0x25c>)
 8003160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 800316e:	4a26      	ldr	r2, [pc, #152]	; (8003208 <HAL_TIM_PWM_MspInit+0x288>)
 8003170:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 8003174:	221f      	movs	r2, #31
 8003176:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 8003186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 800318e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003192:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 8003196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800319a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a8:	4b16      	ldr	r3, [pc, #88]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80031ae:	4815      	ldr	r0, [pc, #84]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 80031b0:	f002 f8ac 	bl	800530c <HAL_DMA_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80031ba:	f7ff fb83 	bl	80028c4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <HAL_TIM_PWM_MspInit+0x284>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	201e      	movs	r0, #30
 80031d0:	f002 f867 	bl	80052a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031d4:	201e      	movs	r0, #30
 80031d6:	f002 f87e 	bl	80052d6 <HAL_NVIC_EnableIRQ>
}
 80031da:	e05a      	b.n	8003292 <HAL_TIM_PWM_MspInit+0x312>
 80031dc:	58024400 	.word	0x58024400
 80031e0:	58020000 	.word	0x58020000
 80031e4:	24001110 	.word	0x24001110
 80031e8:	40020028 	.word	0x40020028
 80031ec:	40000400 	.word	0x40000400
 80031f0:	24001188 	.word	0x24001188
 80031f4:	40020058 	.word	0x40020058
 80031f8:	24001200 	.word	0x24001200
 80031fc:	40020070 	.word	0x40020070
 8003200:	40000800 	.word	0x40000800
 8003204:	24001278 	.word	0x24001278
 8003208:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_TIM_PWM_MspInit+0x31c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d13d      	bne.n	8003292 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_TIM_PWM_MspInit+0x320>)
 8003218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800321c:	4a20      	ldr	r2, [pc, #128]	; (80032a0 <HAL_TIM_PWM_MspInit+0x320>)
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_TIM_PWM_MspInit+0x320>)
 8003228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 8003236:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <HAL_TIM_PWM_MspInit+0x328>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800323a:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 800323c:	223a      	movs	r2, #58	; 0x3a
 800323e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 800324e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003252:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 8003256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800325a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 800325e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003262:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 8003272:	2200      	movs	r2, #0
 8003274:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003276:	480b      	ldr	r0, [pc, #44]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 8003278:	f002 f848 	bl	800530c <HAL_DMA_Init>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003282:	f7ff fb1f 	bl	80028c4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a06      	ldr	r2, [pc, #24]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
 800328c:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <HAL_TIM_PWM_MspInit+0x324>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003292:	bf00      	nop
 8003294:	3730      	adds	r7, #48	; 0x30
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	58024400 	.word	0x58024400
 80032a4:	240012f0 	.word	0x240012f0
 80032a8:	40020040 	.word	0x40020040

080032ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08c      	sub	sp, #48	; 0x30
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d120      	bne.n	8003310 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ce:	4b52      	ldr	r3, [pc, #328]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	4a50      	ldr	r2, [pc, #320]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032de:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 80032e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032f6:	2302      	movs	r3, #2
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2300      	movs	r3, #0
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032fe:	2301      	movs	r3, #1
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	4844      	ldr	r0, [pc, #272]	; (800341c <HAL_TIM_MspPostInit+0x170>)
 800330a:	f004 fc39 	bl	8007b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800330e:	e07f      	b.n	8003410 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a42      	ldr	r2, [pc, #264]	; (8003420 <HAL_TIM_MspPostInit+0x174>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d11f      	bne.n	800335a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	4a3d      	ldr	r2, [pc, #244]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003338:	2330      	movs	r3, #48	; 0x30
 800333a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003340:	2302      	movs	r3, #2
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	2300      	movs	r3, #0
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003348:	2302      	movs	r3, #2
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334c:	f107 031c 	add.w	r3, r7, #28
 8003350:	4619      	mov	r1, r3
 8003352:	4832      	ldr	r0, [pc, #200]	; (800341c <HAL_TIM_MspPostInit+0x170>)
 8003354:	f004 fc14 	bl	8007b80 <HAL_GPIO_Init>
}
 8003358:	e05a      	b.n	8003410 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a31      	ldr	r2, [pc, #196]	; (8003424 <HAL_TIM_MspPostInit+0x178>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d131      	bne.n	80033c8 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 8003366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336a:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 800336c:	f043 0308 	orr.w	r3, r3, #8
 8003370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 8003376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003382:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003390:	2300      	movs	r3, #0
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003394:	2302      	movs	r3, #2
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	4619      	mov	r1, r3
 800339e:	4822      	ldr	r0, [pc, #136]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033a0:	f004 fbee 	bl	8007b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033ae:	2302      	movs	r3, #2
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033b6:	2302      	movs	r3, #2
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	4619      	mov	r1, r3
 80033c0:	4819      	ldr	r0, [pc, #100]	; (8003428 <HAL_TIM_MspPostInit+0x17c>)
 80033c2:	f004 fbdd 	bl	8007b80 <HAL_GPIO_Init>
}
 80033c6:	e023      	b.n	8003410 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a17      	ldr	r2, [pc, #92]	; (800342c <HAL_TIM_MspPostInit+0x180>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d11e      	bne.n	8003410 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 80033d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d8:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_TIM_MspPostInit+0x16c>)
 80033e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033f0:	2308      	movs	r3, #8
 80033f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033f8:	2302      	movs	r3, #2
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003400:	2302      	movs	r3, #2
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	f107 031c 	add.w	r3, r7, #28
 8003408:	4619      	mov	r1, r3
 800340a:	4809      	ldr	r0, [pc, #36]	; (8003430 <HAL_TIM_MspPostInit+0x184>)
 800340c:	f004 fbb8 	bl	8007b80 <HAL_GPIO_Init>
}
 8003410:	bf00      	nop
 8003412:	3730      	adds	r7, #48	; 0x30
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58024400 	.word	0x58024400
 800341c:	58020400 	.word	0x58020400
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	58020c00 	.word	0x58020c00
 800342c:	40000c00 	.word	0x40000c00
 8003430:	58020000 	.word	0x58020000

08003434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b0ba      	sub	sp, #232	; 0xe8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800344c:	f107 0318 	add.w	r3, r7, #24
 8003450:	22b8      	movs	r2, #184	; 0xb8
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f013 fd4b 	bl	8016ef0 <memset>
  if(huart->Instance==UART4)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4d      	ldr	r2, [pc, #308]	; (8003594 <HAL_UART_MspInit+0x160>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d147      	bne.n	80034f4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003464:	f04f 0202 	mov.w	r2, #2
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003476:	f107 0318 	add.w	r3, r7, #24
 800347a:	4618      	mov	r0, r3
 800347c:	f007 f954 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003486:	f7ff fa1d 	bl	80028c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_UART_MspInit+0x164>)
 800348c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003490:	4a41      	ldr	r2, [pc, #260]	; (8003598 <HAL_UART_MspInit+0x164>)
 8003492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800349a:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <HAL_UART_MspInit+0x164>)
 800349c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_UART_MspInit+0x164>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	4a3a      	ldr	r2, [pc, #232]	; (8003598 <HAL_UART_MspInit+0x164>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b8:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_UART_MspInit+0x164>)
 80034ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034e0:	2308      	movs	r3, #8
 80034e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034ea:	4619      	mov	r1, r3
 80034ec:	482b      	ldr	r0, [pc, #172]	; (800359c <HAL_UART_MspInit+0x168>)
 80034ee:	f004 fb47 	bl	8007b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034f2:	e04a      	b.n	800358a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a29      	ldr	r2, [pc, #164]	; (80035a0 <HAL_UART_MspInit+0x16c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d145      	bne.n	800358a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80034fe:	f04f 0201 	mov.w	r2, #1
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003510:	f107 0318 	add.w	r3, r7, #24
 8003514:	4618      	mov	r0, r3
 8003516:	f007 f907 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003520:	f7ff f9d0 	bl	80028c4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003524:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_UART_MspInit+0x164>)
 8003526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_UART_MspInit+0x164>)
 800352c:	f043 0320 	orr.w	r3, r3, #32
 8003530:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_UART_MspInit+0x164>)
 8003536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_UART_MspInit+0x164>)
 8003544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003548:	4a13      	ldr	r2, [pc, #76]	; (8003598 <HAL_UART_MspInit+0x164>)
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_UART_MspInit+0x164>)
 8003554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003560:	23c0      	movs	r3, #192	; 0xc0
 8003562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003578:	2307      	movs	r3, #7
 800357a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003582:	4619      	mov	r1, r3
 8003584:	4807      	ldr	r0, [pc, #28]	; (80035a4 <HAL_UART_MspInit+0x170>)
 8003586:	f004 fafb 	bl	8007b80 <HAL_GPIO_Init>
}
 800358a:	bf00      	nop
 800358c:	37e8      	adds	r7, #232	; 0xe8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40004c00 	.word	0x40004c00
 8003598:	58024400 	.word	0x58024400
 800359c:	58020400 	.word	0x58020400
 80035a0:	40011400 	.word	0x40011400
 80035a4:	58020800 	.word	0x58020800

080035a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <NMI_Handler+0x4>

080035ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <HardFault_Handler+0x4>

080035b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <MemManage_Handler+0x4>

080035ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035be:	e7fe      	b.n	80035be <BusFault_Handler+0x4>

080035c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <UsageFault_Handler+0x4>

080035c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f4:	f000 f9b0 	bl	8003958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}

080035fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <DMA1_Stream0_IRQHandler+0x10>)
 8003602:	f002 fc47 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	24001278 	.word	0x24001278

08003610 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <DMA1_Stream1_IRQHandler+0x10>)
 8003616:	f002 fc3d 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	24001110 	.word	0x24001110

08003624 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <DMA1_Stream2_IRQHandler+0x10>)
 800362a:	f002 fc33 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	240012f0 	.word	0x240012f0

08003638 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <DMA1_Stream3_IRQHandler+0x10>)
 800363e:	f002 fc29 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	24001188 	.word	0x24001188

0800364c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <DMA1_Stream4_IRQHandler+0x10>)
 8003652:	f002 fc1f 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	24001200 	.word	0x24001200

08003660 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <DMA1_Stream5_IRQHandler+0x10>)
 8003666:	f002 fc15 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	24000be8 	.word	0x24000be8

08003674 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <TIM4_IRQHandler+0x10>)
 800367a:	f00c f9df 	bl	800fa3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	24001078 	.word	0x24001078

08003688 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <DMA2_Stream7_IRQHandler+0x10>)
 800368e:	f002 fc01 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	24000c60 	.word	0x24000c60

0800369c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <OTG_HS_IRQHandler+0x10>)
 80036a2:	f004 fec7 	bl	8008434 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	24002994 	.word	0x24002994

080036b0 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80036b4:	4802      	ldr	r0, [pc, #8]	; (80036c0 <SDMMC2_IRQHandler+0x10>)
 80036b6:	f009 fe8d 	bl	800d3d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	24000dcc 	.word	0x24000dcc

080036c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <_sbrk+0x5c>)
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <_sbrk+0x60>)
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <_sbrk+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <_sbrk+0x64>)
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <_sbrk+0x68>)
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <_sbrk+0x64>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d207      	bcs.n	8003704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036f4:	f013 fbc4 	bl	8016e80 <__errno>
 80036f8:	4603      	mov	r3, r0
 80036fa:	220c      	movs	r2, #12
 80036fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	e009      	b.n	8003718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <_sbrk+0x64>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <_sbrk+0x64>)
 8003714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003716:	68fb      	ldr	r3, [r7, #12]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	24050000 	.word	0x24050000
 8003724:	00000800 	.word	0x00000800
 8003728:	24001490 	.word	0x24001490
 800372c:	240030d0 	.word	0x240030d0

08003730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <SystemInit+0xd0>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	4a31      	ldr	r2, [pc, #196]	; (8003800 <SystemInit+0xd0>)
 800373c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <SystemInit+0xd4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	2b06      	cmp	r3, #6
 800374e:	d807      	bhi.n	8003760 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003750:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <SystemInit+0xd4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 030f 	bic.w	r3, r3, #15
 8003758:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <SystemInit+0xd4>)
 800375a:	f043 0307 	orr.w	r3, r3, #7
 800375e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <SystemInit+0xd8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <SystemInit+0xd8>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800376c:	4b26      	ldr	r3, [pc, #152]	; (8003808 <SystemInit+0xd8>)
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003772:	4b25      	ldr	r3, [pc, #148]	; (8003808 <SystemInit+0xd8>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4924      	ldr	r1, [pc, #144]	; (8003808 <SystemInit+0xd8>)
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <SystemInit+0xdc>)
 800377a:	4013      	ands	r3, r2
 800377c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800377e:	4b21      	ldr	r3, [pc, #132]	; (8003804 <SystemInit+0xd4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <SystemInit+0xd4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 030f 	bic.w	r3, r3, #15
 8003792:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <SystemInit+0xd4>)
 8003794:	f043 0307 	orr.w	r3, r3, #7
 8003798:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800379a:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <SystemInit+0xd8>)
 800379c:	2200      	movs	r2, #0
 800379e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <SystemInit+0xd8>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <SystemInit+0xd8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <SystemInit+0xd8>)
 80037ae:	4a18      	ldr	r2, [pc, #96]	; (8003810 <SystemInit+0xe0>)
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <SystemInit+0xd8>)
 80037b4:	4a17      	ldr	r2, [pc, #92]	; (8003814 <SystemInit+0xe4>)
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037b8:	4b13      	ldr	r3, [pc, #76]	; (8003808 <SystemInit+0xd8>)
 80037ba:	4a17      	ldr	r2, [pc, #92]	; (8003818 <SystemInit+0xe8>)
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <SystemInit+0xd8>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <SystemInit+0xd8>)
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <SystemInit+0xe8>)
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <SystemInit+0xd8>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <SystemInit+0xd8>)
 80037d2:	4a11      	ldr	r2, [pc, #68]	; (8003818 <SystemInit+0xe8>)
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <SystemInit+0xd8>)
 80037d8:	2200      	movs	r2, #0
 80037da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <SystemInit+0xd8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <SystemInit+0xd8>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <SystemInit+0xd8>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <SystemInit+0xec>)
 80037f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80037f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00
 8003804:	52002000 	.word	0x52002000
 8003808:	58024400 	.word	0x58024400
 800380c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003810:	02020200 	.word	0x02020200
 8003814:	01ff0000 	.word	0x01ff0000
 8003818:	01010280 	.word	0x01010280
 800381c:	52004000 	.word	0x52004000

08003820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003858 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003824:	f7ff ff84 	bl	8003730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003828:	480c      	ldr	r0, [pc, #48]	; (800385c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800382a:	490d      	ldr	r1, [pc, #52]	; (8003860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003830:	e002      	b.n	8003838 <LoopCopyDataInit>

08003832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003836:	3304      	adds	r3, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800383a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800383c:	d3f9      	bcc.n	8003832 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383e:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003844:	e001      	b.n	800384a <LoopFillZerobss>

08003846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003848:	3204      	adds	r2, #4

0800384a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800384a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800384c:	d3fb      	bcc.n	8003846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800384e:	f013 fb1d 	bl	8016e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003852:	f7fd fd9d 	bl	8001390 <main>
  bx  lr
 8003856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003858:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800385c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003860:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8003864:	08017aec 	.word	0x08017aec
  ldr r2, =_sbss
 8003868:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 800386c:	240030d0 	.word	0x240030d0

08003870 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003870:	e7fe      	b.n	8003870 <ADC3_IRQHandler>
	...

08003874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800387a:	2003      	movs	r0, #3
 800387c:	f001 fd06 	bl	800528c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003880:	f006 fd7c 	bl	800a37c <HAL_RCC_GetSysClockFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_Init+0x68>)
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	4913      	ldr	r1, [pc, #76]	; (80038e0 <HAL_Init+0x6c>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
 800389c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <HAL_Init+0x68>)
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <HAL_Init+0x6c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_Init+0x70>)
 80038b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <HAL_Init+0x74>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038be:	200f      	movs	r0, #15
 80038c0:	f000 f814 	bl	80038ec <HAL_InitTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e002      	b.n	80038d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038ce:	f7fe ffff 	bl	80028d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	58024400 	.word	0x58024400
 80038e0:	08017a54 	.word	0x08017a54
 80038e4:	24000004 	.word	0x24000004
 80038e8:	24000000 	.word	0x24000000

080038ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_InitTick+0x60>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e021      	b.n	8003944 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <HAL_InitTick+0x64>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_InitTick+0x60>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	4618      	mov	r0, r3
 8003918:	f001 fceb 	bl	80052f2 <HAL_SYSTICK_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00e      	b.n	8003944 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d80a      	bhi.n	8003942 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800392c:	2200      	movs	r2, #0
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f001 fcb5 	bl	80052a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <HAL_InitTick+0x68>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	2400000c 	.word	0x2400000c
 8003950:	24000000 	.word	0x24000000
 8003954:	24000008 	.word	0x24000008

08003958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_IncTick+0x20>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_IncTick+0x24>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4413      	add	r3, r2
 8003968:	4a04      	ldr	r2, [pc, #16]	; (800397c <HAL_IncTick+0x24>)
 800396a:	6013      	str	r3, [r2, #0]
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	2400000c 	.word	0x2400000c
 800397c:	24001494 	.word	0x24001494

08003980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return uwTick;
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <HAL_GetTick+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	24001494 	.word	0x24001494

08003998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039a0:	f7ff ffee 	bl	8003980 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d005      	beq.n	80039be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_Delay+0x44>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039be:	bf00      	nop
 80039c0:	f7ff ffde 	bl	8003980 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d8f7      	bhi.n	80039c0 <HAL_Delay+0x28>
  {
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2400000c 	.word	0x2400000c

080039e0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	4904      	ldr	r1, [pc, #16]	; (8003a08 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	58000400 	.word	0x58000400

08003a0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3360      	adds	r3, #96	; 0x60
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a10      	ldr	r2, [pc, #64]	; (8003ad4 <LL_ADC_SetOffset+0x60>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10b      	bne.n	8003ab0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003aae:	e00b      	b.n	8003ac8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	601a      	str	r2, [r3, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	58026000 	.word	0x58026000

08003ad8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3360      	adds	r3, #96	; 0x60
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	611a      	str	r2, [r3, #16]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3360      	adds	r3, #96	; 0x60
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	601a      	str	r2, [r3, #0]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58026000 	.word	0x58026000

08003b7c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <LL_ADC_SetOffsetSaturation+0x40>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10e      	bne.n	8003bae <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3360      	adds	r3, #96	; 0x60
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	58026000 	.word	0x58026000

08003bc0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <LL_ADC_SetOffsetSign+0x40>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d10e      	bne.n	8003bf2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3360      	adds	r3, #96	; 0x60
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	58026000 	.word	0x58026000

08003c04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3360      	adds	r3, #96	; 0x60
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <LL_ADC_SetOffsetState+0x50>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c36:	e007      	b.n	8003c48 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	58026000 	.word	0x58026000

08003c58 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3330      	adds	r3, #48	; 0x30
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	211f      	movs	r1, #31
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0e9b      	lsrs	r3, r3, #26
 8003c90:	f003 011f 	and.w	r1, r3, #31
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3314      	adds	r3, #20
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	0e5b      	lsrs	r3, r3, #25
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	0d1b      	lsrs	r3, r3, #20
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2107      	movs	r1, #7
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	0d1b      	lsrs	r3, r3, #20
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d115      	bne.n	8003d48 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f003 0318 	and.w	r3, r3, #24
 8003d32:	4914      	ldr	r1, [pc, #80]	; (8003d84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d34:	40d9      	lsrs	r1, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	400b      	ands	r3, r1
 8003d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d46:	e014      	b.n	8003d72 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d54:	43db      	mvns	r3, r3
 8003d56:	401a      	ands	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0318 	and.w	r3, r3, #24
 8003d5e:	4909      	ldr	r1, [pc, #36]	; (8003d84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d60:	40d9      	lsrs	r1, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	400b      	ands	r3, r1
 8003d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	58026000 	.word	0x58026000
 8003d84:	000fffff 	.word	0x000fffff

08003d88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6093      	str	r3, [r2, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	5fffffc0 	.word	0x5fffffc0

08003dac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	6fffffc0 	.word	0x6fffffc0

08003dfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e10:	d101      	bne.n	8003e16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <LL_ADC_IsEnabled+0x18>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <LL_ADC_IsEnabled+0x1a>
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d101      	bne.n	8003e62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d101      	bne.n	8003e88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e1ee      	b.n	8004290 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fe fd1f 	bl	8002904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff67 	bl	8003dac <LL_ADC_IsDeepPowerDownEnabled>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff4d 	bl	8003d88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ff82 	bl	8003dfc <LL_ADC_IsInternalRegulatorEnabled>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d114      	bne.n	8003f28 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ff66 	bl	8003dd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f08:	4b8e      	ldr	r3, [pc, #568]	; (8004144 <HAL_ADC_Init+0x2ac>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	4a8e      	ldr	r2, [pc, #568]	; (8004148 <HAL_ADC_Init+0x2b0>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	3301      	adds	r3, #1
 8003f18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f1a:	e002      	b.n	8003f22 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff65 	bl	8003dfc <LL_ADC_IsInternalRegulatorEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10d      	bne.n	8003f54 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	f043 0210 	orr.w	r2, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff76 	bl	8003e4a <LL_ADC_REG_IsConversionOngoing>
 8003f5e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f040 8188 	bne.w	800427e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f040 8184 	bne.w	800427e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff4a 	bl	8003e24 <LL_ADC_IsEnabled>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d136      	bne.n	8004004 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6c      	ldr	r2, [pc, #432]	; (800414c <HAL_ADC_Init+0x2b4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_ADC_Init+0x112>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6a      	ldr	r2, [pc, #424]	; (8004150 <HAL_ADC_Init+0x2b8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_ADC_Init+0x130>
 8003faa:	4868      	ldr	r0, [pc, #416]	; (800414c <HAL_ADC_Init+0x2b4>)
 8003fac:	f7ff ff3a 	bl	8003e24 <LL_ADC_IsEnabled>
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	4867      	ldr	r0, [pc, #412]	; (8004150 <HAL_ADC_Init+0x2b8>)
 8003fb4:	f7ff ff36 	bl	8003e24 <LL_ADC_IsEnabled>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	4323      	orrs	r3, r4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e008      	b.n	8003fda <HAL_ADC_Init+0x142>
 8003fc8:	4862      	ldr	r0, [pc, #392]	; (8004154 <HAL_ADC_Init+0x2bc>)
 8003fca:	f7ff ff2b 	bl	8003e24 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d012      	beq.n	8004004 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5a      	ldr	r2, [pc, #360]	; (800414c <HAL_ADC_Init+0x2b4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_ADC_Init+0x15a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_ADC_Init+0x2b8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Init+0x15e>
 8003ff2:	4a59      	ldr	r2, [pc, #356]	; (8004158 <HAL_ADC_Init+0x2c0>)
 8003ff4:	e000      	b.n	8003ff8 <HAL_ADC_Init+0x160>
 8003ff6:	4a59      	ldr	r2, [pc, #356]	; (800415c <HAL_ADC_Init+0x2c4>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f7ff fd04 	bl	8003a0c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a52      	ldr	r2, [pc, #328]	; (8004154 <HAL_ADC_Init+0x2bc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d129      	bne.n	8004062 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7e5b      	ldrb	r3, [r3, #25]
 8004012:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004018:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800401e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d013      	beq.n	8004050 <HAL_ADC_Init+0x1b8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d00d      	beq.n	800404c <HAL_ADC_Init+0x1b4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b1c      	cmp	r3, #28
 8004036:	d007      	beq.n	8004048 <HAL_ADC_Init+0x1b0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b18      	cmp	r3, #24
 800403e:	d101      	bne.n	8004044 <HAL_ADC_Init+0x1ac>
 8004040:	2318      	movs	r3, #24
 8004042:	e006      	b.n	8004052 <HAL_ADC_Init+0x1ba>
 8004044:	2300      	movs	r3, #0
 8004046:	e004      	b.n	8004052 <HAL_ADC_Init+0x1ba>
 8004048:	2310      	movs	r3, #16
 800404a:	e002      	b.n	8004052 <HAL_ADC_Init+0x1ba>
 800404c:	2308      	movs	r3, #8
 800404e:	e000      	b.n	8004052 <HAL_ADC_Init+0x1ba>
 8004050:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004052:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800405a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e00e      	b.n	8004080 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7e5b      	ldrb	r3, [r3, #25]
 8004066:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800406c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004072:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800407a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d106      	bne.n	8004098 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	3b01      	subs	r3, #1
 8004090:	045b      	lsls	r3, r3, #17
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a26      	ldr	r2, [pc, #152]	; (8004154 <HAL_ADC_Init+0x2bc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d115      	bne.n	80040ea <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_ADC_Init+0x2c8>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	69b9      	ldr	r1, [r7, #24]
 80040ce:	430b      	orrs	r3, r1
 80040d0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	611a      	str	r2, [r3, #16]
 80040e8:	e009      	b.n	80040fe <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <HAL_ADC_Init+0x2cc>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	430b      	orrs	r3, r1
 80040fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fea1 	bl	8003e4a <LL_ADC_REG_IsConversionOngoing>
 8004108:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff feae 	bl	8003e70 <LL_ADC_INJ_IsConversionOngoing>
 8004114:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 808e 	bne.w	800423a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 808a 	bne.w	800423a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <HAL_ADC_Init+0x2bc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d11b      	bne.n	8004168 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7e1b      	ldrb	r3, [r3, #24]
 8004134:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800413c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e018      	b.n	8004176 <HAL_ADC_Init+0x2de>
 8004144:	24000000 	.word	0x24000000
 8004148:	053e2d63 	.word	0x053e2d63
 800414c:	40022000 	.word	0x40022000
 8004150:	40022100 	.word	0x40022100
 8004154:	58026000 	.word	0x58026000
 8004158:	40022300 	.word	0x40022300
 800415c:	58026300 	.word	0x58026300
 8004160:	fff04007 	.word	0xfff04007
 8004164:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	7e1b      	ldrb	r3, [r3, #24]
 800416c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b46      	ldr	r3, [pc, #280]	; (8004298 <HAL_ADC_Init+0x400>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	430b      	orrs	r3, r1
 8004188:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004190:	2b01      	cmp	r3, #1
 8004192:	d137      	bne.n	8004204 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3f      	ldr	r2, [pc, #252]	; (800429c <HAL_ADC_Init+0x404>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d116      	bne.n	80041d2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	4b3d      	ldr	r3, [pc, #244]	; (80042a0 <HAL_ADC_Init+0x408>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041b6:	4311      	orrs	r1, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041bc:	4311      	orrs	r1, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041c2:	430a      	orrs	r2, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	611a      	str	r2, [r3, #16]
 80041d0:	e020      	b.n	8004214 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <HAL_ADC_Init+0x40c>)
 80041da:	4013      	ands	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0411      	lsls	r1, r2, #16
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041e8:	4311      	orrs	r1, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041ee:	4311      	orrs	r1, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041f4:	430a      	orrs	r2, r1
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	611a      	str	r2, [r3, #16]
 8004202:	e007      	b.n	8004214 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1b      	ldr	r2, [pc, #108]	; (800429c <HAL_ADC_Init+0x404>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d002      	beq.n	800423a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fd63 	bl	8004d00 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d10c      	bne.n	800425c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	f023 010f 	bic.w	r1, r3, #15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	1e5a      	subs	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
 800425a:	e007      	b.n	800426c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 020f 	bic.w	r2, r2, #15
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	f023 0303 	bic.w	r3, r3, #3
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
 800427c:	e007      	b.n	800428e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004282:	f043 0210 	orr.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800428e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3724      	adds	r7, #36	; 0x24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	ffffbffc 	.word	0xffffbffc
 800429c:	58026000 	.word	0x58026000
 80042a0:	fc00f81f 	.word	0xfc00f81f
 80042a4:	fc00f81e 	.word	0xfc00f81e

080042a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b0b9      	sub	sp, #228	; 0xe4
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042c2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4aa9      	ldr	r2, [pc, #676]	; (8004570 <HAL_ADC_ConfigChannel+0x2c8>)
 80042ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x34>
 80042d6:	2302      	movs	r3, #2
 80042d8:	f000 bcfa 	b.w	8004cd0 <HAL_ADC_ConfigChannel+0xa28>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fdae 	bl	8003e4a <LL_ADC_REG_IsConversionOngoing>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 84de 	bne.w	8004cb2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a9e      	ldr	r2, [pc, #632]	; (8004574 <HAL_ADC_ConfigChannel+0x2cc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d033      	beq.n	8004368 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004308:	2b00      	cmp	r3, #0
 800430a:	d108      	bne.n	800431e <HAL_ADC_ConfigChannel+0x76>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2201      	movs	r2, #1
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	e01d      	b.n	800435a <HAL_ADC_ConfigChannel+0xb2>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800433a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004342:	2320      	movs	r3, #32
 8004344:	e004      	b.n	8004350 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2201      	movs	r2, #1
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	69d1      	ldr	r1, [r2, #28]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	430b      	orrs	r3, r1
 8004366:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	f7ff fc6f 	bl	8003c58 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fd63 	bl	8003e4a <LL_ADC_REG_IsConversionOngoing>
 8004384:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fd6f 	bl	8003e70 <LL_ADC_INJ_IsConversionOngoing>
 8004392:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 8270 	bne.w	8004880 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f040 826b 	bne.w	8004880 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7ff fc7a 	bl	8003cb0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6c      	ldr	r2, [pc, #432]	; (8004574 <HAL_ADC_ConfigChannel+0x2cc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10d      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043e0:	e032      	b.n	8004448 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043e2:	4b65      	ldr	r3, [pc, #404]	; (8004578 <HAL_ADC_ConfigChannel+0x2d0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ee:	d10b      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x160>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	e01d      	b.n	8004444 <HAL_ADC_ConfigChannel+0x19c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <HAL_ADC_ConfigChannel+0x186>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	e00a      	b.n	8004444 <HAL_ADC_ConfigChannel+0x19c>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d048      	beq.n	80044e2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6919      	ldr	r1, [r3, #16]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004460:	f7ff fb08 	bl	8003a74 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a42      	ldr	r2, [pc, #264]	; (8004574 <HAL_ADC_ConfigChannel+0x2cc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d119      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6919      	ldr	r1, [r3, #16]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	461a      	mov	r2, r3
 800447c:	f7ff fba0 	bl	8003bc0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6919      	ldr	r1, [r3, #16]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x1f0>
 8004492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004496:	e000      	b.n	800449a <HAL_ADC_ConfigChannel+0x1f2>
 8004498:	2300      	movs	r3, #0
 800449a:	461a      	mov	r2, r3
 800449c:	f7ff fb6e 	bl	8003b7c <LL_ADC_SetOffsetSaturation>
 80044a0:	e1ee      	b.n	8004880 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6919      	ldr	r1, [r3, #16]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d102      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x212>
 80044b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044b8:	e000      	b.n	80044bc <HAL_ADC_ConfigChannel+0x214>
 80044ba:	2300      	movs	r3, #0
 80044bc:	461a      	mov	r2, r3
 80044be:	f7ff fb3b 	bl	8003b38 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	7e1b      	ldrb	r3, [r3, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x230>
 80044d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044d6:	e000      	b.n	80044da <HAL_ADC_ConfigChannel+0x232>
 80044d8:	2300      	movs	r3, #0
 80044da:	461a      	mov	r2, r3
 80044dc:	f7ff fb12 	bl	8003b04 <LL_ADC_SetDataRightShift>
 80044e0:	e1ce      	b.n	8004880 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a23      	ldr	r2, [pc, #140]	; (8004574 <HAL_ADC_ConfigChannel+0x2cc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	f040 8181 	bne.w	80047f0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff faef 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <HAL_ADC_ConfigChannel+0x272>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fae4 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 8004510:	4603      	mov	r3, r0
 8004512:	0e9b      	lsrs	r3, r3, #26
 8004514:	f003 021f 	and.w	r2, r3, #31
 8004518:	e01e      	b.n	8004558 <HAL_ADC_ConfigChannel+0x2b0>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fad9 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 8004526:	4603      	mov	r3, r0
 8004528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800453c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004548:	2320      	movs	r3, #32
 800454a:	e004      	b.n	8004556 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800454c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_ADC_ConfigChannel+0x2d4>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0e9b      	lsrs	r3, r3, #26
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	e01e      	b.n	80045ae <HAL_ADC_ConfigChannel+0x306>
 8004570:	47ff0000 	.word	0x47ff0000
 8004574:	58026000 	.word	0x58026000
 8004578:	5c001000 	.word	0x5c001000
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004598:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80045a0:	2320      	movs	r3, #32
 80045a2:	e004      	b.n	80045ae <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80045a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d106      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fb22 	bl	8003c04 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fa86 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x344>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2101      	movs	r1, #1
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fa7b 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 80045e2:	4603      	mov	r3, r0
 80045e4:	0e9b      	lsrs	r3, r3, #26
 80045e6:	f003 021f 	and.w	r2, r3, #31
 80045ea:	e01e      	b.n	800462a <HAL_ADC_ConfigChannel+0x382>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fa70 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800460a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800460e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800461a:	2320      	movs	r3, #32
 800461c:	e004      	b.n	8004628 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800461e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x39a>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0e9b      	lsrs	r3, r3, #26
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	e018      	b.n	8004674 <HAL_ADC_ConfigChannel+0x3cc>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800465a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800465e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004666:	2320      	movs	r3, #32
 8004668:	e004      	b.n	8004674 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800466a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	429a      	cmp	r2, r3
 8004676:	d106      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fabf 	bl	8003c04 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fa23 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 8004692:	4603      	mov	r3, r0
 8004694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x40a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fa18 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 80046a8:	4603      	mov	r3, r0
 80046aa:	0e9b      	lsrs	r3, r3, #26
 80046ac:	f003 021f 	and.w	r2, r3, #31
 80046b0:	e01e      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x448>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2102      	movs	r1, #2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fa0d 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 80046be:	4603      	mov	r3, r0
 80046c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80046d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80046d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80046e0:	2320      	movs	r3, #32
 80046e2:	e004      	b.n	80046ee <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80046e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x460>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	e014      	b.n	8004732 <HAL_ADC_ConfigChannel+0x48a>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800471c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004724:	2320      	movs	r3, #32
 8004726:	e004      	b.n	8004732 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004728:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	429a      	cmp	r2, r3
 8004734:	d106      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	2102      	movs	r1, #2
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fa60 	bl	8003c04 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2103      	movs	r1, #3
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff f9c4 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 8004750:	4603      	mov	r3, r0
 8004752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x4c8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2103      	movs	r1, #3
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f9b9 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 8004766:	4603      	mov	r3, r0
 8004768:	0e9b      	lsrs	r3, r3, #26
 800476a:	f003 021f 	and.w	r2, r3, #31
 800476e:	e017      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x4f8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2103      	movs	r1, #3
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff f9ae 	bl	8003ad8 <LL_ADC_GetOffsetChannel>
 800477c:	4603      	mov	r3, r0
 800477e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800478c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e003      	b.n	800479e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x510>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	0e9b      	lsrs	r3, r3, #26
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	e011      	b.n	80047dc <HAL_ADC_ConfigChannel+0x534>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80047c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80047ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80047d0:	2320      	movs	r3, #32
 80047d2:	e003      	b.n	80047dc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80047d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	429a      	cmp	r2, r3
 80047de:	d14f      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2103      	movs	r1, #3
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fa0b 	bl	8003c04 <LL_ADC_SetOffsetState>
 80047ee:	e047      	b.n	8004880 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	069b      	lsls	r3, r3, #26
 8004800:	429a      	cmp	r2, r3
 8004802:	d107      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004812:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	069b      	lsls	r3, r3, #26
 8004824:	429a      	cmp	r2, r3
 8004826:	d107      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004836:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800483e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800485a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800487e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff facd 	bl	8003e24 <LL_ADC_IsEnabled>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 8219 	bne.w	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	461a      	mov	r2, r3
 80048a0:	f7ff fa32 	bl	8003d08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4aa1      	ldr	r2, [pc, #644]	; (8004b30 <HAL_ADC_ConfigChannel+0x888>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	f040 812e 	bne.w	8004b0c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x630>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	0e9b      	lsrs	r3, r3, #26
 80048c6:	3301      	adds	r3, #1
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2b09      	cmp	r3, #9
 80048ce:	bf94      	ite	ls
 80048d0:	2301      	movls	r3, #1
 80048d2:	2300      	movhi	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e019      	b.n	800490c <HAL_ADC_ConfigChannel+0x664>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e0:	fa93 f3a3 	rbit	r3, r3
 80048e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80048e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80048ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80048f0:	2320      	movs	r3, #32
 80048f2:	e003      	b.n	80048fc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80048f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f6:	fab3 f383 	clz	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2b09      	cmp	r3, #9
 8004904:	bf94      	ite	ls
 8004906:	2301      	movls	r3, #1
 8004908:	2300      	movhi	r3, #0
 800490a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800490c:	2b00      	cmp	r3, #0
 800490e:	d079      	beq.n	8004a04 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_ADC_ConfigChannel+0x684>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0e9b      	lsrs	r3, r3, #26
 8004922:	3301      	adds	r3, #1
 8004924:	069b      	lsls	r3, r3, #26
 8004926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800492a:	e015      	b.n	8004958 <HAL_ADC_ConfigChannel+0x6b0>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004934:	fa93 f3a3 	rbit	r3, r3
 8004938:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	e003      	b.n	8004950 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	069b      	lsls	r3, r3, #26
 8004954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x6d0>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	0e9b      	lsrs	r3, r3, #26
 800496a:	3301      	adds	r3, #1
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	2101      	movs	r1, #1
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	e017      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x700>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800498a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004990:	2320      	movs	r3, #32
 8004992:	e003      	b.n	800499c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004996:	fab3 f383 	clz	r3, r3
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3301      	adds	r3, #1
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2101      	movs	r1, #1
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	ea42 0103 	orr.w	r1, r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x726>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0e9b      	lsrs	r3, r3, #26
 80049be:	3301      	adds	r3, #1
 80049c0:	f003 021f 	and.w	r2, r3, #31
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	051b      	lsls	r3, r3, #20
 80049cc:	e018      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x758>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80049e6:	2320      	movs	r3, #32
 80049e8:	e003      	b.n	80049f2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	3301      	adds	r3, #1
 80049f4:	f003 021f 	and.w	r2, r3, #31
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a00:	430b      	orrs	r3, r1
 8004a02:	e07e      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x778>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	0e9b      	lsrs	r3, r3, #26
 8004a16:	3301      	adds	r3, #1
 8004a18:	069b      	lsls	r3, r3, #26
 8004a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a1e:	e015      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x7a4>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	069b      	lsls	r3, r3, #26
 8004a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d109      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x7c4>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0e9b      	lsrs	r3, r3, #26
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	e017      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x7f4>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	61bb      	str	r3, [r7, #24]
  return result;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004a84:	2320      	movs	r3, #32
 8004a86:	e003      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	ea42 0103 	orr.w	r1, r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x820>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0e9b      	lsrs	r3, r3, #26
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f003 021f 	and.w	r2, r3, #31
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	3b1e      	subs	r3, #30
 8004ac0:	051b      	lsls	r3, r3, #20
 8004ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	e01b      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x858>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	fa93 f3a3 	rbit	r3, r3
 8004ad4:	60fb      	str	r3, [r7, #12]
  return result;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004ae0:	2320      	movs	r3, #32
 8004ae2:	e003      	b.n	8004aec <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fab3 f383 	clz	r3, r3
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	3301      	adds	r3, #1
 8004aee:	f003 021f 	and.w	r2, r3, #31
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	3b1e      	subs	r3, #30
 8004afa:	051b      	lsls	r3, r3, #20
 8004afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b00:	430b      	orrs	r3, r1
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	6892      	ldr	r2, [r2, #8]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f7ff f8d2 	bl	8003cb0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f280 80d7 	bge.w	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a06      	ldr	r2, [pc, #24]	; (8004b34 <HAL_ADC_ConfigChannel+0x88c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_ADC_ConfigChannel+0x882>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <HAL_ADC_ConfigChannel+0x890>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10a      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x898>
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <HAL_ADC_ConfigChannel+0x894>)
 8004b2c:	e009      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x89a>
 8004b2e:	bf00      	nop
 8004b30:	47ff0000 	.word	0x47ff0000
 8004b34:	40022000 	.word	0x40022000
 8004b38:	40022100 	.word	0x40022100
 8004b3c:	40022300 	.word	0x40022300
 8004b40:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <HAL_ADC_ConfigChannel+0xa30>)
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe ff88 	bl	8003a58 <LL_ADC_GetCommonPathInternalCh>
 8004b48:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a62      	ldr	r2, [pc, #392]	; (8004cdc <HAL_ADC_ConfigChannel+0xa34>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_ADC_ConfigChannel+0x8b8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a61      	ldr	r2, [pc, #388]	; (8004ce0 <HAL_ADC_ConfigChannel+0xa38>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10e      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x8d6>
 8004b60:	485e      	ldr	r0, [pc, #376]	; (8004cdc <HAL_ADC_ConfigChannel+0xa34>)
 8004b62:	f7ff f95f 	bl	8003e24 <LL_ADC_IsEnabled>
 8004b66:	4604      	mov	r4, r0
 8004b68:	485d      	ldr	r0, [pc, #372]	; (8004ce0 <HAL_ADC_ConfigChannel+0xa38>)
 8004b6a:	f7ff f95b 	bl	8003e24 <LL_ADC_IsEnabled>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4323      	orrs	r3, r4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e008      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x8e8>
 8004b7e:	4859      	ldr	r0, [pc, #356]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b80:	f7ff f950 	bl	8003e24 <LL_ADC_IsEnabled>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8084 	beq.w	8004c9e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a53      	ldr	r2, [pc, #332]	; (8004ce8 <HAL_ADC_ConfigChannel+0xa40>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d132      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x95e>
 8004ba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d12c      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a4c      	ldr	r2, [pc, #304]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	f040 8086 	bne.w	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a47      	ldr	r2, [pc, #284]	; (8004cdc <HAL_ADC_ConfigChannel+0xa34>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_ADC_ConfigChannel+0x924>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a46      	ldr	r2, [pc, #280]	; (8004ce0 <HAL_ADC_ConfigChannel+0xa38>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x928>
 8004bcc:	4a47      	ldr	r2, [pc, #284]	; (8004cec <HAL_ADC_ConfigChannel+0xa44>)
 8004bce:	e000      	b.n	8004bd2 <HAL_ADC_ConfigChannel+0x92a>
 8004bd0:	4a41      	ldr	r2, [pc, #260]	; (8004cd8 <HAL_ADC_ConfigChannel+0xa30>)
 8004bd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f7fe ff28 	bl	8003a32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004be2:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <HAL_ADC_ConfigChannel+0xa48>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	4a42      	ldr	r2, [pc, #264]	; (8004cf4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bf6:	e002      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f9      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c04:	e05e      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_ADC_ConfigChannel+0xa50>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d120      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x9aa>
 8004c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d11a      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a30      	ldr	r2, [pc, #192]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d14e      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <HAL_ADC_ConfigChannel+0xa34>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_ADC_ConfigChannel+0x992>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x996>
 8004c3a:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <HAL_ADC_ConfigChannel+0xa44>)
 8004c3c:	e000      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x998>
 8004c3e:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <HAL_ADC_ConfigChannel+0xa30>)
 8004c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fe fef1 	bl	8003a32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c50:	e038      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <HAL_ADC_ConfigChannel+0xa54>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d133      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
 8004c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d12d      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d128      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_ADC_ConfigChannel+0xa34>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_ADC_ConfigChannel+0x9de>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x9e2>
 8004c86:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_ADC_ConfigChannel+0xa44>)
 8004c88:	e000      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x9e4>
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <HAL_ADC_ConfigChannel+0xa30>)
 8004c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f7fe fecb 	bl	8003a32 <LL_ADC_SetCommonPathInternalCh>
 8004c9c:	e012      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004cb0:	e008      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ccc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	37e4      	adds	r7, #228	; 0xe4
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}
 8004cd8:	58026300 	.word	0x58026300
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40022100 	.word	0x40022100
 8004ce4:	58026000 	.word	0x58026000
 8004ce8:	c7520000 	.word	0xc7520000
 8004cec:	40022300 	.word	0x40022300
 8004cf0:	24000000 	.word	0x24000000
 8004cf4:	053e2d63 	.word	0x053e2d63
 8004cf8:	c3210000 	.word	0xc3210000
 8004cfc:	cb840000 	.word	0xcb840000

08004d00 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6c      	ldr	r2, [pc, #432]	; (8004ec0 <ADC_ConfigureBoostMode+0x1c0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <ADC_ConfigureBoostMode+0x1c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6b      	ldr	r2, [pc, #428]	; (8004ec4 <ADC_ConfigureBoostMode+0x1c4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d109      	bne.n	8004d30 <ADC_ConfigureBoostMode+0x30>
 8004d1c:	4b6a      	ldr	r3, [pc, #424]	; (8004ec8 <ADC_ConfigureBoostMode+0x1c8>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e008      	b.n	8004d42 <ADC_ConfigureBoostMode+0x42>
 8004d30:	4b66      	ldr	r3, [pc, #408]	; (8004ecc <ADC_ConfigureBoostMode+0x1cc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01c      	beq.n	8004d80 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d46:	f005 fc93 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 8004d4a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d54:	d010      	beq.n	8004d78 <ADC_ConfigureBoostMode+0x78>
 8004d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d5a:	d873      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x144>
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d002      	beq.n	8004d68 <ADC_ConfigureBoostMode+0x68>
 8004d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d66:	d16d      	bne.n	8004e44 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]
        break;
 8004d76:	e068      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	60fb      	str	r3, [r7, #12]
        break;
 8004d7e:	e064      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004d80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d84:	f04f 0100 	mov.w	r1, #0
 8004d88:	f006 fe6e 	bl	800ba68 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d8c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d96:	d051      	beq.n	8004e3c <ADC_ConfigureBoostMode+0x13c>
 8004d98:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d9c:	d854      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004d9e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004da2:	d047      	beq.n	8004e34 <ADC_ConfigureBoostMode+0x134>
 8004da4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004da8:	d84e      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004daa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dae:	d03d      	beq.n	8004e2c <ADC_ConfigureBoostMode+0x12c>
 8004db0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004db4:	d848      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dba:	d033      	beq.n	8004e24 <ADC_ConfigureBoostMode+0x124>
 8004dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc0:	d842      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004dc2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004dc6:	d029      	beq.n	8004e1c <ADC_ConfigureBoostMode+0x11c>
 8004dc8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004dcc:	d83c      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004dce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dd2:	d01a      	beq.n	8004e0a <ADC_ConfigureBoostMode+0x10a>
 8004dd4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dd8:	d836      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004dda:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004dde:	d014      	beq.n	8004e0a <ADC_ConfigureBoostMode+0x10a>
 8004de0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004de4:	d830      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dea:	d00e      	beq.n	8004e0a <ADC_ConfigureBoostMode+0x10a>
 8004dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df0:	d82a      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004df2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004df6:	d008      	beq.n	8004e0a <ADC_ConfigureBoostMode+0x10a>
 8004df8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dfc:	d824      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x148>
 8004dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e02:	d002      	beq.n	8004e0a <ADC_ConfigureBoostMode+0x10a>
 8004e04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e08:	d11e      	bne.n	8004e48 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	0c9b      	lsrs	r3, r3, #18
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	60fb      	str	r3, [r7, #12]
        break;
 8004e1a:	e016      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	60fb      	str	r3, [r7, #12]
        break;
 8004e22:	e012      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	60fb      	str	r3, [r7, #12]
        break;
 8004e2a:	e00e      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	60fb      	str	r3, [r7, #12]
        break;
 8004e32:	e00a      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	09db      	lsrs	r3, r3, #7
 8004e38:	60fb      	str	r3, [r7, #12]
        break;
 8004e3a:	e006      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	60fb      	str	r3, [r7, #12]
        break;
 8004e42:	e002      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e44:	bf00      	nop
 8004e46:	e000      	b.n	8004e4a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e48:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <ADC_ConfigureBoostMode+0x1d0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d808      	bhi.n	8004e6a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e66:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e68:	e025      	b.n	8004eb6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <ADC_ConfigureBoostMode+0x1d4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d80a      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e84:	609a      	str	r2, [r3, #8]
}
 8004e86:	e016      	b.n	8004eb6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <ADC_ConfigureBoostMode+0x1d8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d80a      	bhi.n	8004ea6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea2:	609a      	str	r2, [r3, #8]
}
 8004ea4:	e007      	b.n	8004eb6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004eb4:	609a      	str	r2, [r3, #8]
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40022000 	.word	0x40022000
 8004ec4:	40022100 	.word	0x40022100
 8004ec8:	40022300 	.word	0x40022300
 8004ecc:	58026300 	.word	0x58026300
 8004ed0:	005f5e10 	.word	0x005f5e10
 8004ed4:	00bebc20 	.word	0x00bebc20
 8004ed8:	017d7840 	.word	0x017d7840

08004edc <LL_ADC_IsEnabled>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <LL_ADC_IsEnabled+0x18>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <LL_ADC_IsEnabled+0x1a>
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d101      	bne.n	8004f1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b0a3      	sub	sp, #140	; 0x8c
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0c1      	b.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a5e      	ldr	r2, [pc, #376]	; (80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d102      	bne.n	8004f66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f60:	4b5d      	ldr	r3, [pc, #372]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e001      	b.n	8004f6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0a0      	b.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ffb9 	bl	8004f02 <LL_ADC_REG_IsConversionOngoing>
 8004f90:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ffb2 	bl	8004f02 <LL_ADC_REG_IsConversionOngoing>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 8081 	bne.w	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004fa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d17c      	bne.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a48      	ldr	r2, [pc, #288]	; (80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a46      	ldr	r2, [pc, #280]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004fc2:	4b46      	ldr	r3, [pc, #280]	; (80050dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fc4:	e000      	b.n	8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004fc6:	4b46      	ldr	r3, [pc, #280]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fc8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d039      	beq.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fe2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a3a      	ldr	r2, [pc, #232]	; (80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a39      	ldr	r2, [pc, #228]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10e      	bne.n	8005016 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ff8:	4836      	ldr	r0, [pc, #216]	; (80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ffa:	f7ff ff6f 	bl	8004edc <LL_ADC_IsEnabled>
 8004ffe:	4604      	mov	r4, r0
 8005000:	4835      	ldr	r0, [pc, #212]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005002:	f7ff ff6b 	bl	8004edc <LL_ADC_IsEnabled>
 8005006:	4603      	mov	r3, r0
 8005008:	4323      	orrs	r3, r4
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e008      	b.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005016:	4833      	ldr	r0, [pc, #204]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005018:	f7ff ff60 	bl	8004edc <LL_ADC_IsEnabled>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d047      	beq.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800502c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005032:	4013      	ands	r3, r2
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	6811      	ldr	r1, [r2, #0]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	6892      	ldr	r2, [r2, #8]
 800503c:	430a      	orrs	r2, r1
 800503e:	431a      	orrs	r2, r3
 8005040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005042:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005044:	e03a      	b.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005050:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10e      	bne.n	8005084 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005066:	481b      	ldr	r0, [pc, #108]	; (80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005068:	f7ff ff38 	bl	8004edc <LL_ADC_IsEnabled>
 800506c:	4604      	mov	r4, r0
 800506e:	481a      	ldr	r0, [pc, #104]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005070:	f7ff ff34 	bl	8004edc <LL_ADC_IsEnabled>
 8005074:	4603      	mov	r3, r0
 8005076:	4323      	orrs	r3, r4
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e008      	b.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005084:	4817      	ldr	r0, [pc, #92]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005086:	f7ff ff29 	bl	8004edc <LL_ADC_IsEnabled>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800509a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050a6:	e009      	b.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80050ba:	e000      	b.n	80050be <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80050c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	378c      	adds	r7, #140	; 0x8c
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd90      	pop	{r4, r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40022100 	.word	0x40022100
 80050dc:	40022300 	.word	0x40022300
 80050e0:	58026300 	.word	0x58026300
 80050e4:	58026000 	.word	0x58026000
 80050e8:	fffff0e0 	.word	0xfffff0e0

080050ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <__NVIC_SetPriorityGrouping+0x40>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005108:	4013      	ands	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <__NVIC_SetPriorityGrouping+0x44>)
 8005116:	4313      	orrs	r3, r2
 8005118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800511a:	4a04      	ldr	r2, [pc, #16]	; (800512c <__NVIC_SetPriorityGrouping+0x40>)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	60d3      	str	r3, [r2, #12]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000ed00 	.word	0xe000ed00
 8005130:	05fa0000 	.word	0x05fa0000

08005134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <__NVIC_GetPriorityGrouping+0x18>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	0a1b      	lsrs	r3, r3, #8
 800513e:	f003 0307 	and.w	r3, r3, #7
}
 8005142:	4618      	mov	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800515a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800515e:	2b00      	cmp	r3, #0
 8005160:	db0b      	blt.n	800517a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	4907      	ldr	r1, [pc, #28]	; (8005188 <__NVIC_EnableIRQ+0x38>)
 800516a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2001      	movs	r0, #1
 8005172:	fa00 f202 	lsl.w	r2, r0, r2
 8005176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	e000e100 	.word	0xe000e100

0800518c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	6039      	str	r1, [r7, #0]
 8005196:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db0a      	blt.n	80051b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	490c      	ldr	r1, [pc, #48]	; (80051d8 <__NVIC_SetPriority+0x4c>)
 80051a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051aa:	0112      	lsls	r2, r2, #4
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	440b      	add	r3, r1
 80051b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051b4:	e00a      	b.n	80051cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4908      	ldr	r1, [pc, #32]	; (80051dc <__NVIC_SetPriority+0x50>)
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	3b04      	subs	r3, #4
 80051c4:	0112      	lsls	r2, r2, #4
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	440b      	add	r3, r1
 80051ca:	761a      	strb	r2, [r3, #24]
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	e000e100 	.word	0xe000e100
 80051dc:	e000ed00 	.word	0xe000ed00

080051e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b089      	sub	sp, #36	; 0x24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f1c3 0307 	rsb	r3, r3, #7
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	bf28      	it	cs
 80051fe:	2304      	movcs	r3, #4
 8005200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3304      	adds	r3, #4
 8005206:	2b06      	cmp	r3, #6
 8005208:	d902      	bls.n	8005210 <NVIC_EncodePriority+0x30>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3b03      	subs	r3, #3
 800520e:	e000      	b.n	8005212 <NVIC_EncodePriority+0x32>
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005214:	f04f 32ff 	mov.w	r2, #4294967295
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43da      	mvns	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	401a      	ands	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005228:	f04f 31ff 	mov.w	r1, #4294967295
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	43d9      	mvns	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005238:	4313      	orrs	r3, r2
         );
}
 800523a:	4618      	mov	r0, r3
 800523c:	3724      	adds	r7, #36	; 0x24
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3b01      	subs	r3, #1
 8005254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005258:	d301      	bcc.n	800525e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800525a:	2301      	movs	r3, #1
 800525c:	e00f      	b.n	800527e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <SysTick_Config+0x40>)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3b01      	subs	r3, #1
 8005264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005266:	210f      	movs	r1, #15
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	f7ff ff8e 	bl	800518c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <SysTick_Config+0x40>)
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005276:	4b04      	ldr	r3, [pc, #16]	; (8005288 <SysTick_Config+0x40>)
 8005278:	2207      	movs	r2, #7
 800527a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	e000e010 	.word	0xe000e010

0800528c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ff29 	bl	80050ec <__NVIC_SetPriorityGrouping>
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	4603      	mov	r3, r0
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052b0:	f7ff ff40 	bl	8005134 <__NVIC_GetPriorityGrouping>
 80052b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	6978      	ldr	r0, [r7, #20]
 80052bc:	f7ff ff90 	bl	80051e0 <NVIC_EncodePriority>
 80052c0:	4602      	mov	r2, r0
 80052c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052c6:	4611      	mov	r1, r2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff5f 	bl	800518c <__NVIC_SetPriority>
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	4603      	mov	r3, r0
 80052de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff ff33 	bl	8005150 <__NVIC_EnableIRQ>
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff ffa4 	bl	8005248 <SysTick_Config>
 8005300:	4603      	mov	r3, r0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005314:	f7fe fb34 	bl	8003980 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e314      	b.n	800594e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a66      	ldr	r2, [pc, #408]	; (80054c4 <HAL_DMA_Init+0x1b8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d04a      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a65      	ldr	r2, [pc, #404]	; (80054c8 <HAL_DMA_Init+0x1bc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d045      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a63      	ldr	r2, [pc, #396]	; (80054cc <HAL_DMA_Init+0x1c0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d040      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a62      	ldr	r2, [pc, #392]	; (80054d0 <HAL_DMA_Init+0x1c4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d03b      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a60      	ldr	r2, [pc, #384]	; (80054d4 <HAL_DMA_Init+0x1c8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d036      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a5f      	ldr	r2, [pc, #380]	; (80054d8 <HAL_DMA_Init+0x1cc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d031      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a5d      	ldr	r2, [pc, #372]	; (80054dc <HAL_DMA_Init+0x1d0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d02c      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5c      	ldr	r2, [pc, #368]	; (80054e0 <HAL_DMA_Init+0x1d4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d027      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a5a      	ldr	r2, [pc, #360]	; (80054e4 <HAL_DMA_Init+0x1d8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a59      	ldr	r2, [pc, #356]	; (80054e8 <HAL_DMA_Init+0x1dc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d01d      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a57      	ldr	r2, [pc, #348]	; (80054ec <HAL_DMA_Init+0x1e0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a56      	ldr	r2, [pc, #344]	; (80054f0 <HAL_DMA_Init+0x1e4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a54      	ldr	r2, [pc, #336]	; (80054f4 <HAL_DMA_Init+0x1e8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a53      	ldr	r2, [pc, #332]	; (80054f8 <HAL_DMA_Init+0x1ec>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a51      	ldr	r2, [pc, #324]	; (80054fc <HAL_DMA_Init+0x1f0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_DMA_Init+0xb8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a50      	ldr	r2, [pc, #320]	; (8005500 <HAL_DMA_Init+0x1f4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_DMA_Init+0xbc>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_DMA_Init+0xbe>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 813c 	beq.w	8005648 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a37      	ldr	r2, [pc, #220]	; (80054c4 <HAL_DMA_Init+0x1b8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d04a      	beq.n	8005480 <HAL_DMA_Init+0x174>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a36      	ldr	r2, [pc, #216]	; (80054c8 <HAL_DMA_Init+0x1bc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d045      	beq.n	8005480 <HAL_DMA_Init+0x174>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a34      	ldr	r2, [pc, #208]	; (80054cc <HAL_DMA_Init+0x1c0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d040      	beq.n	8005480 <HAL_DMA_Init+0x174>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a33      	ldr	r2, [pc, #204]	; (80054d0 <HAL_DMA_Init+0x1c4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d03b      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a31      	ldr	r2, [pc, #196]	; (80054d4 <HAL_DMA_Init+0x1c8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d036      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a30      	ldr	r2, [pc, #192]	; (80054d8 <HAL_DMA_Init+0x1cc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d031      	beq.n	8005480 <HAL_DMA_Init+0x174>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2e      	ldr	r2, [pc, #184]	; (80054dc <HAL_DMA_Init+0x1d0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d02c      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2d      	ldr	r2, [pc, #180]	; (80054e0 <HAL_DMA_Init+0x1d4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d027      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <HAL_DMA_Init+0x1d8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d022      	beq.n	8005480 <HAL_DMA_Init+0x174>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <HAL_DMA_Init+0x1dc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d01d      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a28      	ldr	r2, [pc, #160]	; (80054ec <HAL_DMA_Init+0x1e0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d018      	beq.n	8005480 <HAL_DMA_Init+0x174>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a27      	ldr	r2, [pc, #156]	; (80054f0 <HAL_DMA_Init+0x1e4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <HAL_DMA_Init+0x1e8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00e      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <HAL_DMA_Init+0x1ec>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d009      	beq.n	8005480 <HAL_DMA_Init+0x174>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <HAL_DMA_Init+0x1f0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_DMA_Init+0x174>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a21      	ldr	r2, [pc, #132]	; (8005500 <HAL_DMA_Init+0x1f4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d108      	bne.n	8005492 <HAL_DMA_Init+0x186>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	e007      	b.n	80054a2 <HAL_DMA_Init+0x196>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054a2:	e02f      	b.n	8005504 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054a4:	f7fe fa6c 	bl	8003980 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d928      	bls.n	8005504 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2203      	movs	r2, #3
 80054bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e244      	b.n	800594e <HAL_DMA_Init+0x642>
 80054c4:	40020010 	.word	0x40020010
 80054c8:	40020028 	.word	0x40020028
 80054cc:	40020040 	.word	0x40020040
 80054d0:	40020058 	.word	0x40020058
 80054d4:	40020070 	.word	0x40020070
 80054d8:	40020088 	.word	0x40020088
 80054dc:	400200a0 	.word	0x400200a0
 80054e0:	400200b8 	.word	0x400200b8
 80054e4:	40020410 	.word	0x40020410
 80054e8:	40020428 	.word	0x40020428
 80054ec:	40020440 	.word	0x40020440
 80054f0:	40020458 	.word	0x40020458
 80054f4:	40020470 	.word	0x40020470
 80054f8:	40020488 	.word	0x40020488
 80054fc:	400204a0 	.word	0x400204a0
 8005500:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1c8      	bne.n	80054a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4b84      	ldr	r3, [pc, #528]	; (8005730 <HAL_DMA_Init+0x424>)
 800551e:	4013      	ands	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800552a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005536:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005542:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	2b04      	cmp	r3, #4
 8005556:	d107      	bne.n	8005568 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	4313      	orrs	r3, r2
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b28      	cmp	r3, #40	; 0x28
 800556e:	d903      	bls.n	8005578 <HAL_DMA_Init+0x26c>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b2e      	cmp	r3, #46	; 0x2e
 8005576:	d91f      	bls.n	80055b8 <HAL_DMA_Init+0x2ac>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b3e      	cmp	r3, #62	; 0x3e
 800557e:	d903      	bls.n	8005588 <HAL_DMA_Init+0x27c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b42      	cmp	r3, #66	; 0x42
 8005586:	d917      	bls.n	80055b8 <HAL_DMA_Init+0x2ac>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b46      	cmp	r3, #70	; 0x46
 800558e:	d903      	bls.n	8005598 <HAL_DMA_Init+0x28c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b48      	cmp	r3, #72	; 0x48
 8005596:	d90f      	bls.n	80055b8 <HAL_DMA_Init+0x2ac>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b4e      	cmp	r3, #78	; 0x4e
 800559e:	d903      	bls.n	80055a8 <HAL_DMA_Init+0x29c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b52      	cmp	r3, #82	; 0x52
 80055a6:	d907      	bls.n	80055b8 <HAL_DMA_Init+0x2ac>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b73      	cmp	r3, #115	; 0x73
 80055ae:	d905      	bls.n	80055bc <HAL_DMA_Init+0x2b0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b77      	cmp	r3, #119	; 0x77
 80055b6:	d801      	bhi.n	80055bc <HAL_DMA_Init+0x2b0>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_DMA_Init+0x2b2>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 0307 	bic.w	r3, r3, #7
 80055e0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d117      	bne.n	8005624 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00e      	beq.n	8005624 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fdcc 	bl	80071a4 <DMA_CheckFifoParam>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2240      	movs	r2, #64	; 0x40
 8005616:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e194      	b.n	800594e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 fd07 	bl	8007040 <DMA_CalcBaseAndBitshift>
 8005632:	4603      	mov	r3, r0
 8005634:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	223f      	movs	r2, #63	; 0x3f
 8005640:	409a      	lsls	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
 8005646:	e0ca      	b.n	80057de <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a39      	ldr	r2, [pc, #228]	; (8005734 <HAL_DMA_Init+0x428>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d022      	beq.n	8005698 <HAL_DMA_Init+0x38c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a38      	ldr	r2, [pc, #224]	; (8005738 <HAL_DMA_Init+0x42c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d01d      	beq.n	8005698 <HAL_DMA_Init+0x38c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a36      	ldr	r2, [pc, #216]	; (800573c <HAL_DMA_Init+0x430>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d018      	beq.n	8005698 <HAL_DMA_Init+0x38c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a35      	ldr	r2, [pc, #212]	; (8005740 <HAL_DMA_Init+0x434>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <HAL_DMA_Init+0x38c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a33      	ldr	r2, [pc, #204]	; (8005744 <HAL_DMA_Init+0x438>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_DMA_Init+0x38c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a32      	ldr	r2, [pc, #200]	; (8005748 <HAL_DMA_Init+0x43c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_DMA_Init+0x38c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a30      	ldr	r2, [pc, #192]	; (800574c <HAL_DMA_Init+0x440>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_DMA_Init+0x38c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a2f      	ldr	r2, [pc, #188]	; (8005750 <HAL_DMA_Init+0x444>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_DMA_Init+0x390>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_DMA_Init+0x392>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8094 	beq.w	80057cc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a22      	ldr	r2, [pc, #136]	; (8005734 <HAL_DMA_Init+0x428>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d021      	beq.n	80056f2 <HAL_DMA_Init+0x3e6>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a21      	ldr	r2, [pc, #132]	; (8005738 <HAL_DMA_Init+0x42c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d01c      	beq.n	80056f2 <HAL_DMA_Init+0x3e6>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1f      	ldr	r2, [pc, #124]	; (800573c <HAL_DMA_Init+0x430>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d017      	beq.n	80056f2 <HAL_DMA_Init+0x3e6>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_DMA_Init+0x434>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d012      	beq.n	80056f2 <HAL_DMA_Init+0x3e6>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_DMA_Init+0x438>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00d      	beq.n	80056f2 <HAL_DMA_Init+0x3e6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <HAL_DMA_Init+0x43c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d008      	beq.n	80056f2 <HAL_DMA_Init+0x3e6>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_DMA_Init+0x440>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <HAL_DMA_Init+0x3e6>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_DMA_Init+0x444>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <HAL_DMA_Init+0x448>)
 8005710:	4013      	ands	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d01d      	beq.n	8005758 <HAL_DMA_Init+0x44c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d102      	bne.n	800572a <HAL_DMA_Init+0x41e>
 8005724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005728:	e017      	b.n	800575a <HAL_DMA_Init+0x44e>
 800572a:	2300      	movs	r3, #0
 800572c:	e015      	b.n	800575a <HAL_DMA_Init+0x44e>
 800572e:	bf00      	nop
 8005730:	fe10803f 	.word	0xfe10803f
 8005734:	58025408 	.word	0x58025408
 8005738:	5802541c 	.word	0x5802541c
 800573c:	58025430 	.word	0x58025430
 8005740:	58025444 	.word	0x58025444
 8005744:	58025458 	.word	0x58025458
 8005748:	5802546c 	.word	0x5802546c
 800574c:	58025480 	.word	0x58025480
 8005750:	58025494 	.word	0x58025494
 8005754:	fffe000f 	.word	0xfffe000f
 8005758:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68d2      	ldr	r2, [r2, #12]
 800575e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005788:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	4b6e      	ldr	r3, [pc, #440]	; (8005958 <HAL_DMA_Init+0x64c>)
 80057a0:	4413      	add	r3, r2
 80057a2:	4a6e      	ldr	r2, [pc, #440]	; (800595c <HAL_DMA_Init+0x650>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	009a      	lsls	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fc45 	bl	8007040 <DMA_CalcBaseAndBitshift>
 80057b6:	4603      	mov	r3, r0
 80057b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2201      	movs	r2, #1
 80057c4:	409a      	lsls	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	e008      	b.n	80057de <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2203      	movs	r2, #3
 80057d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e0b7      	b.n	800594e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a5f      	ldr	r2, [pc, #380]	; (8005960 <HAL_DMA_Init+0x654>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d072      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a5d      	ldr	r2, [pc, #372]	; (8005964 <HAL_DMA_Init+0x658>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d06d      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a5c      	ldr	r2, [pc, #368]	; (8005968 <HAL_DMA_Init+0x65c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d068      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a5a      	ldr	r2, [pc, #360]	; (800596c <HAL_DMA_Init+0x660>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d063      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a59      	ldr	r2, [pc, #356]	; (8005970 <HAL_DMA_Init+0x664>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d05e      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a57      	ldr	r2, [pc, #348]	; (8005974 <HAL_DMA_Init+0x668>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d059      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a56      	ldr	r2, [pc, #344]	; (8005978 <HAL_DMA_Init+0x66c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d054      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a54      	ldr	r2, [pc, #336]	; (800597c <HAL_DMA_Init+0x670>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d04f      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a53      	ldr	r2, [pc, #332]	; (8005980 <HAL_DMA_Init+0x674>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d04a      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a51      	ldr	r2, [pc, #324]	; (8005984 <HAL_DMA_Init+0x678>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d045      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a50      	ldr	r2, [pc, #320]	; (8005988 <HAL_DMA_Init+0x67c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d040      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a4e      	ldr	r2, [pc, #312]	; (800598c <HAL_DMA_Init+0x680>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d03b      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a4d      	ldr	r2, [pc, #308]	; (8005990 <HAL_DMA_Init+0x684>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d036      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a4b      	ldr	r2, [pc, #300]	; (8005994 <HAL_DMA_Init+0x688>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d031      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a4a      	ldr	r2, [pc, #296]	; (8005998 <HAL_DMA_Init+0x68c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d02c      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a48      	ldr	r2, [pc, #288]	; (800599c <HAL_DMA_Init+0x690>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d027      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a47      	ldr	r2, [pc, #284]	; (80059a0 <HAL_DMA_Init+0x694>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a45      	ldr	r2, [pc, #276]	; (80059a4 <HAL_DMA_Init+0x698>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01d      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a44      	ldr	r2, [pc, #272]	; (80059a8 <HAL_DMA_Init+0x69c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a42      	ldr	r2, [pc, #264]	; (80059ac <HAL_DMA_Init+0x6a0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a41      	ldr	r2, [pc, #260]	; (80059b0 <HAL_DMA_Init+0x6a4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a3f      	ldr	r2, [pc, #252]	; (80059b4 <HAL_DMA_Init+0x6a8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a3e      	ldr	r2, [pc, #248]	; (80059b8 <HAL_DMA_Init+0x6ac>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_DMA_Init+0x5c2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a3c      	ldr	r2, [pc, #240]	; (80059bc <HAL_DMA_Init+0x6b0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <HAL_DMA_Init+0x5c6>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <HAL_DMA_Init+0x5c8>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d032      	beq.n	800593e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fcdf 	bl	800729c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d102      	bne.n	80058ec <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005900:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d010      	beq.n	800592c <HAL_DMA_Init+0x620>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b08      	cmp	r3, #8
 8005910:	d80c      	bhi.n	800592c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 fd5c 	bl	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	e008      	b.n	800593e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	a7fdabf8 	.word	0xa7fdabf8
 800595c:	cccccccd 	.word	0xcccccccd
 8005960:	40020010 	.word	0x40020010
 8005964:	40020028 	.word	0x40020028
 8005968:	40020040 	.word	0x40020040
 800596c:	40020058 	.word	0x40020058
 8005970:	40020070 	.word	0x40020070
 8005974:	40020088 	.word	0x40020088
 8005978:	400200a0 	.word	0x400200a0
 800597c:	400200b8 	.word	0x400200b8
 8005980:	40020410 	.word	0x40020410
 8005984:	40020428 	.word	0x40020428
 8005988:	40020440 	.word	0x40020440
 800598c:	40020458 	.word	0x40020458
 8005990:	40020470 	.word	0x40020470
 8005994:	40020488 	.word	0x40020488
 8005998:	400204a0 	.word	0x400204a0
 800599c:	400204b8 	.word	0x400204b8
 80059a0:	58025408 	.word	0x58025408
 80059a4:	5802541c 	.word	0x5802541c
 80059a8:	58025430 	.word	0x58025430
 80059ac:	58025444 	.word	0x58025444
 80059b0:	58025458 	.word	0x58025458
 80059b4:	5802546c 	.word	0x5802546c
 80059b8:	58025480 	.word	0x58025480
 80059bc:	58025494 	.word	0x58025494

080059c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e226      	b.n	8005e2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_DMA_Start_IT+0x2a>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e21f      	b.n	8005e2a <HAL_DMA_Start_IT+0x46a>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	f040 820a 	bne.w	8005e14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a68      	ldr	r2, [pc, #416]	; (8005bb4 <HAL_DMA_Start_IT+0x1f4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d04a      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a66      	ldr	r2, [pc, #408]	; (8005bb8 <HAL_DMA_Start_IT+0x1f8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d045      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a65      	ldr	r2, [pc, #404]	; (8005bbc <HAL_DMA_Start_IT+0x1fc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d040      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a63      	ldr	r2, [pc, #396]	; (8005bc0 <HAL_DMA_Start_IT+0x200>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d03b      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a62      	ldr	r2, [pc, #392]	; (8005bc4 <HAL_DMA_Start_IT+0x204>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d036      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a60      	ldr	r2, [pc, #384]	; (8005bc8 <HAL_DMA_Start_IT+0x208>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d031      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a5f      	ldr	r2, [pc, #380]	; (8005bcc <HAL_DMA_Start_IT+0x20c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d02c      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a5d      	ldr	r2, [pc, #372]	; (8005bd0 <HAL_DMA_Start_IT+0x210>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d027      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a5c      	ldr	r2, [pc, #368]	; (8005bd4 <HAL_DMA_Start_IT+0x214>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d022      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a5a      	ldr	r2, [pc, #360]	; (8005bd8 <HAL_DMA_Start_IT+0x218>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01d      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a59      	ldr	r2, [pc, #356]	; (8005bdc <HAL_DMA_Start_IT+0x21c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d018      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a57      	ldr	r2, [pc, #348]	; (8005be0 <HAL_DMA_Start_IT+0x220>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a56      	ldr	r2, [pc, #344]	; (8005be4 <HAL_DMA_Start_IT+0x224>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a54      	ldr	r2, [pc, #336]	; (8005be8 <HAL_DMA_Start_IT+0x228>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a53      	ldr	r2, [pc, #332]	; (8005bec <HAL_DMA_Start_IT+0x22c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_DMA_Start_IT+0xee>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a51      	ldr	r2, [pc, #324]	; (8005bf0 <HAL_DMA_Start_IT+0x230>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d108      	bne.n	8005ac0 <HAL_DMA_Start_IT+0x100>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e007      	b.n	8005ad0 <HAL_DMA_Start_IT+0x110>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 f906 	bl	8006ce8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <HAL_DMA_Start_IT+0x1f4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d04a      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a33      	ldr	r2, [pc, #204]	; (8005bb8 <HAL_DMA_Start_IT+0x1f8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d045      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <HAL_DMA_Start_IT+0x1fc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d040      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a30      	ldr	r2, [pc, #192]	; (8005bc0 <HAL_DMA_Start_IT+0x200>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d03b      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a2e      	ldr	r2, [pc, #184]	; (8005bc4 <HAL_DMA_Start_IT+0x204>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d036      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2d      	ldr	r2, [pc, #180]	; (8005bc8 <HAL_DMA_Start_IT+0x208>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d031      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <HAL_DMA_Start_IT+0x20c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d02c      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <HAL_DMA_Start_IT+0x210>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d027      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a28      	ldr	r2, [pc, #160]	; (8005bd4 <HAL_DMA_Start_IT+0x214>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d022      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a27      	ldr	r2, [pc, #156]	; (8005bd8 <HAL_DMA_Start_IT+0x218>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d01d      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <HAL_DMA_Start_IT+0x21c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a24      	ldr	r2, [pc, #144]	; (8005be0 <HAL_DMA_Start_IT+0x220>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <HAL_DMA_Start_IT+0x224>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <HAL_DMA_Start_IT+0x228>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <HAL_DMA_Start_IT+0x22c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_DMA_Start_IT+0x1bc>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <HAL_DMA_Start_IT+0x230>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d101      	bne.n	8005b80 <HAL_DMA_Start_IT+0x1c0>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_DMA_Start_IT+0x1c2>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d036      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f023 021e 	bic.w	r2, r3, #30
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0216 	orr.w	r2, r2, #22
 8005b98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d03e      	beq.n	8005c20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0208 	orr.w	r2, r2, #8
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e035      	b.n	8005c20 <HAL_DMA_Start_IT+0x260>
 8005bb4:	40020010 	.word	0x40020010
 8005bb8:	40020028 	.word	0x40020028
 8005bbc:	40020040 	.word	0x40020040
 8005bc0:	40020058 	.word	0x40020058
 8005bc4:	40020070 	.word	0x40020070
 8005bc8:	40020088 	.word	0x40020088
 8005bcc:	400200a0 	.word	0x400200a0
 8005bd0:	400200b8 	.word	0x400200b8
 8005bd4:	40020410 	.word	0x40020410
 8005bd8:	40020428 	.word	0x40020428
 8005bdc:	40020440 	.word	0x40020440
 8005be0:	40020458 	.word	0x40020458
 8005be4:	40020470 	.word	0x40020470
 8005be8:	40020488 	.word	0x40020488
 8005bec:	400204a0 	.word	0x400204a0
 8005bf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 020e 	bic.w	r2, r3, #14
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 020a 	orr.w	r2, r2, #10
 8005c06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0204 	orr.w	r2, r2, #4
 8005c1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a83      	ldr	r2, [pc, #524]	; (8005e34 <HAL_DMA_Start_IT+0x474>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d072      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a82      	ldr	r2, [pc, #520]	; (8005e38 <HAL_DMA_Start_IT+0x478>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d06d      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a80      	ldr	r2, [pc, #512]	; (8005e3c <HAL_DMA_Start_IT+0x47c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d068      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7f      	ldr	r2, [pc, #508]	; (8005e40 <HAL_DMA_Start_IT+0x480>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d063      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a7d      	ldr	r2, [pc, #500]	; (8005e44 <HAL_DMA_Start_IT+0x484>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d05e      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a7c      	ldr	r2, [pc, #496]	; (8005e48 <HAL_DMA_Start_IT+0x488>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d059      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a7a      	ldr	r2, [pc, #488]	; (8005e4c <HAL_DMA_Start_IT+0x48c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d054      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a79      	ldr	r2, [pc, #484]	; (8005e50 <HAL_DMA_Start_IT+0x490>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d04f      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a77      	ldr	r2, [pc, #476]	; (8005e54 <HAL_DMA_Start_IT+0x494>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d04a      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a76      	ldr	r2, [pc, #472]	; (8005e58 <HAL_DMA_Start_IT+0x498>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d045      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a74      	ldr	r2, [pc, #464]	; (8005e5c <HAL_DMA_Start_IT+0x49c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d040      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a73      	ldr	r2, [pc, #460]	; (8005e60 <HAL_DMA_Start_IT+0x4a0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d03b      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a71      	ldr	r2, [pc, #452]	; (8005e64 <HAL_DMA_Start_IT+0x4a4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d036      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a70      	ldr	r2, [pc, #448]	; (8005e68 <HAL_DMA_Start_IT+0x4a8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d031      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a6e      	ldr	r2, [pc, #440]	; (8005e6c <HAL_DMA_Start_IT+0x4ac>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d02c      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6d      	ldr	r2, [pc, #436]	; (8005e70 <HAL_DMA_Start_IT+0x4b0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d027      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6b      	ldr	r2, [pc, #428]	; (8005e74 <HAL_DMA_Start_IT+0x4b4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d022      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6a      	ldr	r2, [pc, #424]	; (8005e78 <HAL_DMA_Start_IT+0x4b8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d01d      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a68      	ldr	r2, [pc, #416]	; (8005e7c <HAL_DMA_Start_IT+0x4bc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d018      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a67      	ldr	r2, [pc, #412]	; (8005e80 <HAL_DMA_Start_IT+0x4c0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a65      	ldr	r2, [pc, #404]	; (8005e84 <HAL_DMA_Start_IT+0x4c4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00e      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a64      	ldr	r2, [pc, #400]	; (8005e88 <HAL_DMA_Start_IT+0x4c8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d009      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a62      	ldr	r2, [pc, #392]	; (8005e8c <HAL_DMA_Start_IT+0x4cc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <HAL_DMA_Start_IT+0x350>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a61      	ldr	r2, [pc, #388]	; (8005e90 <HAL_DMA_Start_IT+0x4d0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <HAL_DMA_Start_IT+0x354>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <HAL_DMA_Start_IT+0x356>
 8005d14:	2300      	movs	r3, #0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01a      	beq.n	8005d50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a37      	ldr	r2, [pc, #220]	; (8005e34 <HAL_DMA_Start_IT+0x474>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d04a      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a36      	ldr	r2, [pc, #216]	; (8005e38 <HAL_DMA_Start_IT+0x478>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d045      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a34      	ldr	r2, [pc, #208]	; (8005e3c <HAL_DMA_Start_IT+0x47c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d040      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a33      	ldr	r2, [pc, #204]	; (8005e40 <HAL_DMA_Start_IT+0x480>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d03b      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a31      	ldr	r2, [pc, #196]	; (8005e44 <HAL_DMA_Start_IT+0x484>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d036      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <HAL_DMA_Start_IT+0x488>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d031      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a2e      	ldr	r2, [pc, #184]	; (8005e4c <HAL_DMA_Start_IT+0x48c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d02c      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <HAL_DMA_Start_IT+0x490>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d027      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a2b      	ldr	r2, [pc, #172]	; (8005e54 <HAL_DMA_Start_IT+0x494>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d022      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <HAL_DMA_Start_IT+0x498>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d01d      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <HAL_DMA_Start_IT+0x49c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d018      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a27      	ldr	r2, [pc, #156]	; (8005e60 <HAL_DMA_Start_IT+0x4a0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d013      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <HAL_DMA_Start_IT+0x4a4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00e      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a24      	ldr	r2, [pc, #144]	; (8005e68 <HAL_DMA_Start_IT+0x4a8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d009      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <HAL_DMA_Start_IT+0x4ac>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_DMA_Start_IT+0x430>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a21      	ldr	r2, [pc, #132]	; (8005e70 <HAL_DMA_Start_IT+0x4b0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d108      	bne.n	8005e02 <HAL_DMA_Start_IT+0x442>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e012      	b.n	8005e28 <HAL_DMA_Start_IT+0x468>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e009      	b.n	8005e28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40020010 	.word	0x40020010
 8005e38:	40020028 	.word	0x40020028
 8005e3c:	40020040 	.word	0x40020040
 8005e40:	40020058 	.word	0x40020058
 8005e44:	40020070 	.word	0x40020070
 8005e48:	40020088 	.word	0x40020088
 8005e4c:	400200a0 	.word	0x400200a0
 8005e50:	400200b8 	.word	0x400200b8
 8005e54:	40020410 	.word	0x40020410
 8005e58:	40020428 	.word	0x40020428
 8005e5c:	40020440 	.word	0x40020440
 8005e60:	40020458 	.word	0x40020458
 8005e64:	40020470 	.word	0x40020470
 8005e68:	40020488 	.word	0x40020488
 8005e6c:	400204a0 	.word	0x400204a0
 8005e70:	400204b8 	.word	0x400204b8
 8005e74:	58025408 	.word	0x58025408
 8005e78:	5802541c 	.word	0x5802541c
 8005e7c:	58025430 	.word	0x58025430
 8005e80:	58025444 	.word	0x58025444
 8005e84:	58025458 	.word	0x58025458
 8005e88:	5802546c 	.word	0x5802546c
 8005e8c:	58025480 	.word	0x58025480
 8005e90:	58025494 	.word	0x58025494

08005e94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ea0:	4b67      	ldr	r3, [pc, #412]	; (8006040 <HAL_DMA_IRQHandler+0x1ac>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a67      	ldr	r2, [pc, #412]	; (8006044 <HAL_DMA_IRQHandler+0x1b0>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	0a9b      	lsrs	r3, r3, #10
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a5f      	ldr	r2, [pc, #380]	; (8006048 <HAL_DMA_IRQHandler+0x1b4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d04a      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a5d      	ldr	r2, [pc, #372]	; (800604c <HAL_DMA_IRQHandler+0x1b8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d045      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a5c      	ldr	r2, [pc, #368]	; (8006050 <HAL_DMA_IRQHandler+0x1bc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d040      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a5a      	ldr	r2, [pc, #360]	; (8006054 <HAL_DMA_IRQHandler+0x1c0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d03b      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a59      	ldr	r2, [pc, #356]	; (8006058 <HAL_DMA_IRQHandler+0x1c4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d036      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a57      	ldr	r2, [pc, #348]	; (800605c <HAL_DMA_IRQHandler+0x1c8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d031      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a56      	ldr	r2, [pc, #344]	; (8006060 <HAL_DMA_IRQHandler+0x1cc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d02c      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a54      	ldr	r2, [pc, #336]	; (8006064 <HAL_DMA_IRQHandler+0x1d0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d027      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a53      	ldr	r2, [pc, #332]	; (8006068 <HAL_DMA_IRQHandler+0x1d4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d022      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a51      	ldr	r2, [pc, #324]	; (800606c <HAL_DMA_IRQHandler+0x1d8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d01d      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a50      	ldr	r2, [pc, #320]	; (8006070 <HAL_DMA_IRQHandler+0x1dc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a4e      	ldr	r2, [pc, #312]	; (8006074 <HAL_DMA_IRQHandler+0x1e0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_DMA_IRQHandler+0x1e4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a4b      	ldr	r2, [pc, #300]	; (800607c <HAL_DMA_IRQHandler+0x1e8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a4a      	ldr	r2, [pc, #296]	; (8006080 <HAL_DMA_IRQHandler+0x1ec>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xd2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a48      	ldr	r2, [pc, #288]	; (8006084 <HAL_DMA_IRQHandler+0x1f0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d101      	bne.n	8005f6a <HAL_DMA_IRQHandler+0xd6>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <HAL_DMA_IRQHandler+0xd8>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 842b 	beq.w	80067c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 80a2 	beq.w	80060cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <HAL_DMA_IRQHandler+0x1b4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d04a      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2d      	ldr	r2, [pc, #180]	; (800604c <HAL_DMA_IRQHandler+0x1b8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d045      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2b      	ldr	r2, [pc, #172]	; (8006050 <HAL_DMA_IRQHandler+0x1bc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d040      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a2a      	ldr	r2, [pc, #168]	; (8006054 <HAL_DMA_IRQHandler+0x1c0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d03b      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a28      	ldr	r2, [pc, #160]	; (8006058 <HAL_DMA_IRQHandler+0x1c4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d036      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a27      	ldr	r2, [pc, #156]	; (800605c <HAL_DMA_IRQHandler+0x1c8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d031      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a25      	ldr	r2, [pc, #148]	; (8006060 <HAL_DMA_IRQHandler+0x1cc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d02c      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a24      	ldr	r2, [pc, #144]	; (8006064 <HAL_DMA_IRQHandler+0x1d0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d027      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_DMA_IRQHandler+0x1d4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	; (800606c <HAL_DMA_IRQHandler+0x1d8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d01d      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_DMA_IRQHandler+0x1dc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	; (8006074 <HAL_DMA_IRQHandler+0x1e0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <HAL_DMA_IRQHandler+0x1e4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1b      	ldr	r2, [pc, #108]	; (800607c <HAL_DMA_IRQHandler+0x1e8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <HAL_DMA_IRQHandler+0x1ec>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_DMA_IRQHandler+0x194>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_DMA_IRQHandler+0x1f0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d12f      	bne.n	8006088 <HAL_DMA_IRQHandler+0x1f4>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf14      	ite	ne
 8006036:	2301      	movne	r3, #1
 8006038:	2300      	moveq	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	e02e      	b.n	800609c <HAL_DMA_IRQHandler+0x208>
 800603e:	bf00      	nop
 8006040:	24000000 	.word	0x24000000
 8006044:	1b4e81b5 	.word	0x1b4e81b5
 8006048:	40020010 	.word	0x40020010
 800604c:	40020028 	.word	0x40020028
 8006050:	40020040 	.word	0x40020040
 8006054:	40020058 	.word	0x40020058
 8006058:	40020070 	.word	0x40020070
 800605c:	40020088 	.word	0x40020088
 8006060:	400200a0 	.word	0x400200a0
 8006064:	400200b8 	.word	0x400200b8
 8006068:	40020410 	.word	0x40020410
 800606c:	40020428 	.word	0x40020428
 8006070:	40020440 	.word	0x40020440
 8006074:	40020458 	.word	0x40020458
 8006078:	40020470 	.word	0x40020470
 800607c:	40020488 	.word	0x40020488
 8006080:	400204a0 	.word	0x400204a0
 8006084:	400204b8 	.word	0x400204b8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0204 	bic.w	r2, r2, #4
 80060ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2208      	movs	r2, #8
 80060ba:	409a      	lsls	r2, r3
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c4:	f043 0201 	orr.w	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d06e      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a69      	ldr	r2, [pc, #420]	; (800628c <HAL_DMA_IRQHandler+0x3f8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d04a      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a67      	ldr	r2, [pc, #412]	; (8006290 <HAL_DMA_IRQHandler+0x3fc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d045      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a66      	ldr	r2, [pc, #408]	; (8006294 <HAL_DMA_IRQHandler+0x400>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d040      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a64      	ldr	r2, [pc, #400]	; (8006298 <HAL_DMA_IRQHandler+0x404>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d03b      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a63      	ldr	r2, [pc, #396]	; (800629c <HAL_DMA_IRQHandler+0x408>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d036      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a61      	ldr	r2, [pc, #388]	; (80062a0 <HAL_DMA_IRQHandler+0x40c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d031      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a60      	ldr	r2, [pc, #384]	; (80062a4 <HAL_DMA_IRQHandler+0x410>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d02c      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5e      	ldr	r2, [pc, #376]	; (80062a8 <HAL_DMA_IRQHandler+0x414>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d027      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a5d      	ldr	r2, [pc, #372]	; (80062ac <HAL_DMA_IRQHandler+0x418>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d022      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a5b      	ldr	r2, [pc, #364]	; (80062b0 <HAL_DMA_IRQHandler+0x41c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d01d      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a5a      	ldr	r2, [pc, #360]	; (80062b4 <HAL_DMA_IRQHandler+0x420>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d018      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a58      	ldr	r2, [pc, #352]	; (80062b8 <HAL_DMA_IRQHandler+0x424>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a57      	ldr	r2, [pc, #348]	; (80062bc <HAL_DMA_IRQHandler+0x428>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00e      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a55      	ldr	r2, [pc, #340]	; (80062c0 <HAL_DMA_IRQHandler+0x42c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d009      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a54      	ldr	r2, [pc, #336]	; (80062c4 <HAL_DMA_IRQHandler+0x430>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d004      	beq.n	8006182 <HAL_DMA_IRQHandler+0x2ee>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a52      	ldr	r2, [pc, #328]	; (80062c8 <HAL_DMA_IRQHandler+0x434>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d10a      	bne.n	8006198 <HAL_DMA_IRQHandler+0x304>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e003      	b.n	80061a0 <HAL_DMA_IRQHandler+0x30c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b8:	f043 0202 	orr.w	r2, r3, #2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2204      	movs	r2, #4
 80061ca:	409a      	lsls	r2, r3
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 808f 	beq.w	80062f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2c      	ldr	r2, [pc, #176]	; (800628c <HAL_DMA_IRQHandler+0x3f8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d04a      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <HAL_DMA_IRQHandler+0x3fc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d045      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a29      	ldr	r2, [pc, #164]	; (8006294 <HAL_DMA_IRQHandler+0x400>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d040      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <HAL_DMA_IRQHandler+0x404>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d03b      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a26      	ldr	r2, [pc, #152]	; (800629c <HAL_DMA_IRQHandler+0x408>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d036      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a24      	ldr	r2, [pc, #144]	; (80062a0 <HAL_DMA_IRQHandler+0x40c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a23      	ldr	r2, [pc, #140]	; (80062a4 <HAL_DMA_IRQHandler+0x410>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d02c      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_DMA_IRQHandler+0x414>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d027      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a20      	ldr	r2, [pc, #128]	; (80062ac <HAL_DMA_IRQHandler+0x418>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_DMA_IRQHandler+0x41c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <HAL_DMA_IRQHandler+0x420>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <HAL_DMA_IRQHandler+0x424>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <HAL_DMA_IRQHandler+0x428>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <HAL_DMA_IRQHandler+0x42c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <HAL_DMA_IRQHandler+0x430>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_DMA_IRQHandler+0x3e2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <HAL_DMA_IRQHandler+0x434>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d12a      	bne.n	80062cc <HAL_DMA_IRQHandler+0x438>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e023      	b.n	80062d4 <HAL_DMA_IRQHandler+0x440>
 800628c:	40020010 	.word	0x40020010
 8006290:	40020028 	.word	0x40020028
 8006294:	40020040 	.word	0x40020040
 8006298:	40020058 	.word	0x40020058
 800629c:	40020070 	.word	0x40020070
 80062a0:	40020088 	.word	0x40020088
 80062a4:	400200a0 	.word	0x400200a0
 80062a8:	400200b8 	.word	0x400200b8
 80062ac:	40020410 	.word	0x40020410
 80062b0:	40020428 	.word	0x40020428
 80062b4:	40020440 	.word	0x40020440
 80062b8:	40020458 	.word	0x40020458
 80062bc:	40020470 	.word	0x40020470
 80062c0:	40020488 	.word	0x40020488
 80062c4:	400204a0 	.word	0x400204a0
 80062c8:	400204b8 	.word	0x400204b8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2204      	movs	r2, #4
 80062e2:	409a      	lsls	r2, r3
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ec:	f043 0204 	orr.w	r2, r3, #4
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2210      	movs	r2, #16
 80062fe:	409a      	lsls	r2, r3
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80a6 	beq.w	8006456 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a85      	ldr	r2, [pc, #532]	; (8006524 <HAL_DMA_IRQHandler+0x690>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d04a      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a83      	ldr	r2, [pc, #524]	; (8006528 <HAL_DMA_IRQHandler+0x694>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d045      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a82      	ldr	r2, [pc, #520]	; (800652c <HAL_DMA_IRQHandler+0x698>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d040      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a80      	ldr	r2, [pc, #512]	; (8006530 <HAL_DMA_IRQHandler+0x69c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d03b      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a7f      	ldr	r2, [pc, #508]	; (8006534 <HAL_DMA_IRQHandler+0x6a0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d036      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a7d      	ldr	r2, [pc, #500]	; (8006538 <HAL_DMA_IRQHandler+0x6a4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d031      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a7c      	ldr	r2, [pc, #496]	; (800653c <HAL_DMA_IRQHandler+0x6a8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d02c      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a7a      	ldr	r2, [pc, #488]	; (8006540 <HAL_DMA_IRQHandler+0x6ac>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d027      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a79      	ldr	r2, [pc, #484]	; (8006544 <HAL_DMA_IRQHandler+0x6b0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d022      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a77      	ldr	r2, [pc, #476]	; (8006548 <HAL_DMA_IRQHandler+0x6b4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01d      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a76      	ldr	r2, [pc, #472]	; (800654c <HAL_DMA_IRQHandler+0x6b8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a74      	ldr	r2, [pc, #464]	; (8006550 <HAL_DMA_IRQHandler+0x6bc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a73      	ldr	r2, [pc, #460]	; (8006554 <HAL_DMA_IRQHandler+0x6c0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a71      	ldr	r2, [pc, #452]	; (8006558 <HAL_DMA_IRQHandler+0x6c4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a70      	ldr	r2, [pc, #448]	; (800655c <HAL_DMA_IRQHandler+0x6c8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_DMA_IRQHandler+0x516>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a6e      	ldr	r2, [pc, #440]	; (8006560 <HAL_DMA_IRQHandler+0x6cc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10a      	bne.n	80063c0 <HAL_DMA_IRQHandler+0x52c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e009      	b.n	80063d4 <HAL_DMA_IRQHandler+0x540>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d03e      	beq.n	8006456 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2210      	movs	r2, #16
 80063e2:	409a      	lsls	r2, r3
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d108      	bne.n	8006416 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d024      	beq.n	8006456 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
 8006414:	e01f      	b.n	8006456 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01b      	beq.n	8006456 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
 8006426:	e016      	b.n	8006456 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d107      	bne.n	8006446 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0208 	bic.w	r2, r2, #8
 8006444:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2220      	movs	r2, #32
 8006460:	409a      	lsls	r2, r3
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	4013      	ands	r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8110 	beq.w	800668c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2c      	ldr	r2, [pc, #176]	; (8006524 <HAL_DMA_IRQHandler+0x690>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d04a      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2b      	ldr	r2, [pc, #172]	; (8006528 <HAL_DMA_IRQHandler+0x694>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d045      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a29      	ldr	r2, [pc, #164]	; (800652c <HAL_DMA_IRQHandler+0x698>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d040      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a28      	ldr	r2, [pc, #160]	; (8006530 <HAL_DMA_IRQHandler+0x69c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d03b      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a26      	ldr	r2, [pc, #152]	; (8006534 <HAL_DMA_IRQHandler+0x6a0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d036      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a25      	ldr	r2, [pc, #148]	; (8006538 <HAL_DMA_IRQHandler+0x6a4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d031      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a23      	ldr	r2, [pc, #140]	; (800653c <HAL_DMA_IRQHandler+0x6a8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d02c      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a22      	ldr	r2, [pc, #136]	; (8006540 <HAL_DMA_IRQHandler+0x6ac>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d027      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a20      	ldr	r2, [pc, #128]	; (8006544 <HAL_DMA_IRQHandler+0x6b0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d022      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <HAL_DMA_IRQHandler+0x6b4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d01d      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1d      	ldr	r2, [pc, #116]	; (800654c <HAL_DMA_IRQHandler+0x6b8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d018      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <HAL_DMA_IRQHandler+0x6bc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <HAL_DMA_IRQHandler+0x6c0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00e      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a19      	ldr	r2, [pc, #100]	; (8006558 <HAL_DMA_IRQHandler+0x6c4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d009      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a17      	ldr	r2, [pc, #92]	; (800655c <HAL_DMA_IRQHandler+0x6c8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <HAL_DMA_IRQHandler+0x678>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a16      	ldr	r2, [pc, #88]	; (8006560 <HAL_DMA_IRQHandler+0x6cc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d12b      	bne.n	8006564 <HAL_DMA_IRQHandler+0x6d0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	e02a      	b.n	8006578 <HAL_DMA_IRQHandler+0x6e4>
 8006522:	bf00      	nop
 8006524:	40020010 	.word	0x40020010
 8006528:	40020028 	.word	0x40020028
 800652c:	40020040 	.word	0x40020040
 8006530:	40020058 	.word	0x40020058
 8006534:	40020070 	.word	0x40020070
 8006538:	40020088 	.word	0x40020088
 800653c:	400200a0 	.word	0x400200a0
 8006540:	400200b8 	.word	0x400200b8
 8006544:	40020410 	.word	0x40020410
 8006548:	40020428 	.word	0x40020428
 800654c:	40020440 	.word	0x40020440
 8006550:	40020458 	.word	0x40020458
 8006554:	40020470 	.word	0x40020470
 8006558:	40020488 	.word	0x40020488
 800655c:	400204a0 	.word	0x400204a0
 8006560:	400204b8 	.word	0x400204b8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 8087 	beq.w	800668c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2220      	movs	r2, #32
 8006588:	409a      	lsls	r2, r3
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b04      	cmp	r3, #4
 8006598:	d139      	bne.n	800660e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0216 	bic.w	r2, r2, #22
 80065a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695a      	ldr	r2, [r3, #20]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d103      	bne.n	80065ca <HAL_DMA_IRQHandler+0x736>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0208 	bic.w	r2, r2, #8
 80065d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	223f      	movs	r2, #63	; 0x3f
 80065e4:	409a      	lsls	r2, r3
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 834a 	beq.w	8006c98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
          }
          return;
 800660c:	e344      	b.n	8006c98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d018      	beq.n	800664e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02c      	beq.n	800668c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
 800663a:	e027      	b.n	800668c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d023      	beq.n	800668c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
 800664c:	e01e      	b.n	800668c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10f      	bne.n	800667c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0210 	bic.w	r2, r2, #16
 800666a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 8306 	beq.w	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8088 	beq.w	80067b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2204      	movs	r2, #4
 80066a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7a      	ldr	r2, [pc, #488]	; (800689c <HAL_DMA_IRQHandler+0xa08>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d04a      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a79      	ldr	r2, [pc, #484]	; (80068a0 <HAL_DMA_IRQHandler+0xa0c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d045      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a77      	ldr	r2, [pc, #476]	; (80068a4 <HAL_DMA_IRQHandler+0xa10>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d040      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a76      	ldr	r2, [pc, #472]	; (80068a8 <HAL_DMA_IRQHandler+0xa14>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d03b      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a74      	ldr	r2, [pc, #464]	; (80068ac <HAL_DMA_IRQHandler+0xa18>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d036      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a73      	ldr	r2, [pc, #460]	; (80068b0 <HAL_DMA_IRQHandler+0xa1c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d031      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a71      	ldr	r2, [pc, #452]	; (80068b4 <HAL_DMA_IRQHandler+0xa20>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d02c      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a70      	ldr	r2, [pc, #448]	; (80068b8 <HAL_DMA_IRQHandler+0xa24>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d027      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a6e      	ldr	r2, [pc, #440]	; (80068bc <HAL_DMA_IRQHandler+0xa28>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d022      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a6d      	ldr	r2, [pc, #436]	; (80068c0 <HAL_DMA_IRQHandler+0xa2c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d01d      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a6b      	ldr	r2, [pc, #428]	; (80068c4 <HAL_DMA_IRQHandler+0xa30>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d018      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a6a      	ldr	r2, [pc, #424]	; (80068c8 <HAL_DMA_IRQHandler+0xa34>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a68      	ldr	r2, [pc, #416]	; (80068cc <HAL_DMA_IRQHandler+0xa38>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00e      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a67      	ldr	r2, [pc, #412]	; (80068d0 <HAL_DMA_IRQHandler+0xa3c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a65      	ldr	r2, [pc, #404]	; (80068d4 <HAL_DMA_IRQHandler+0xa40>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <HAL_DMA_IRQHandler+0x8b8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a64      	ldr	r2, [pc, #400]	; (80068d8 <HAL_DMA_IRQHandler+0xa44>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d108      	bne.n	800675e <HAL_DMA_IRQHandler+0x8ca>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	e007      	b.n	800676e <HAL_DMA_IRQHandler+0x8da>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0201 	bic.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3301      	adds	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006776:	429a      	cmp	r2, r3
 8006778:	d307      	bcc.n	800678a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f2      	bne.n	800676e <HAL_DMA_IRQHandler+0x8da>
 8006788:	e000      	b.n	800678c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800678a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2203      	movs	r2, #3
 800679e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067a2:	e003      	b.n	80067ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8272 	beq.w	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
 80067c6:	e26c      	b.n	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a43      	ldr	r2, [pc, #268]	; (80068dc <HAL_DMA_IRQHandler+0xa48>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d022      	beq.n	8006818 <HAL_DMA_IRQHandler+0x984>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a42      	ldr	r2, [pc, #264]	; (80068e0 <HAL_DMA_IRQHandler+0xa4c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d01d      	beq.n	8006818 <HAL_DMA_IRQHandler+0x984>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a40      	ldr	r2, [pc, #256]	; (80068e4 <HAL_DMA_IRQHandler+0xa50>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d018      	beq.n	8006818 <HAL_DMA_IRQHandler+0x984>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3f      	ldr	r2, [pc, #252]	; (80068e8 <HAL_DMA_IRQHandler+0xa54>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_DMA_IRQHandler+0x984>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3d      	ldr	r2, [pc, #244]	; (80068ec <HAL_DMA_IRQHandler+0xa58>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00e      	beq.n	8006818 <HAL_DMA_IRQHandler+0x984>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a3c      	ldr	r2, [pc, #240]	; (80068f0 <HAL_DMA_IRQHandler+0xa5c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_DMA_IRQHandler+0x984>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a3a      	ldr	r2, [pc, #232]	; (80068f4 <HAL_DMA_IRQHandler+0xa60>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_DMA_IRQHandler+0x984>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a39      	ldr	r2, [pc, #228]	; (80068f8 <HAL_DMA_IRQHandler+0xa64>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d101      	bne.n	800681c <HAL_DMA_IRQHandler+0x988>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <HAL_DMA_IRQHandler+0x98a>
 800681c:	2300      	movs	r3, #0
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 823f 	beq.w	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	2204      	movs	r2, #4
 8006836:	409a      	lsls	r2, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80cd 	beq.w	80069dc <HAL_DMA_IRQHandler+0xb48>
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80c7 	beq.w	80069dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	2204      	movs	r2, #4
 8006858:	409a      	lsls	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d049      	beq.n	80068fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8210 	beq.w	8006c9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006884:	e20a      	b.n	8006c9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8206 	beq.w	8006c9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006898:	e200      	b.n	8006c9c <HAL_DMA_IRQHandler+0xe08>
 800689a:	bf00      	nop
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
 80068dc:	58025408 	.word	0x58025408
 80068e0:	5802541c 	.word	0x5802541c
 80068e4:	58025430 	.word	0x58025430
 80068e8:	58025444 	.word	0x58025444
 80068ec:	58025458 	.word	0x58025458
 80068f0:	5802546c 	.word	0x5802546c
 80068f4:	58025480 	.word	0x58025480
 80068f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d160      	bne.n	80069c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7f      	ldr	r2, [pc, #508]	; (8006b08 <HAL_DMA_IRQHandler+0xc74>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d04a      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a7d      	ldr	r2, [pc, #500]	; (8006b0c <HAL_DMA_IRQHandler+0xc78>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d045      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a7c      	ldr	r2, [pc, #496]	; (8006b10 <HAL_DMA_IRQHandler+0xc7c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d040      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a7a      	ldr	r2, [pc, #488]	; (8006b14 <HAL_DMA_IRQHandler+0xc80>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d03b      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a79      	ldr	r2, [pc, #484]	; (8006b18 <HAL_DMA_IRQHandler+0xc84>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d036      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a77      	ldr	r2, [pc, #476]	; (8006b1c <HAL_DMA_IRQHandler+0xc88>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d031      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a76      	ldr	r2, [pc, #472]	; (8006b20 <HAL_DMA_IRQHandler+0xc8c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d02c      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a74      	ldr	r2, [pc, #464]	; (8006b24 <HAL_DMA_IRQHandler+0xc90>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d027      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a73      	ldr	r2, [pc, #460]	; (8006b28 <HAL_DMA_IRQHandler+0xc94>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d022      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a71      	ldr	r2, [pc, #452]	; (8006b2c <HAL_DMA_IRQHandler+0xc98>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d01d      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a70      	ldr	r2, [pc, #448]	; (8006b30 <HAL_DMA_IRQHandler+0xc9c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d018      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a6e      	ldr	r2, [pc, #440]	; (8006b34 <HAL_DMA_IRQHandler+0xca0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a6d      	ldr	r2, [pc, #436]	; (8006b38 <HAL_DMA_IRQHandler+0xca4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6b      	ldr	r2, [pc, #428]	; (8006b3c <HAL_DMA_IRQHandler+0xca8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d009      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a6a      	ldr	r2, [pc, #424]	; (8006b40 <HAL_DMA_IRQHandler+0xcac>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_DMA_IRQHandler+0xb12>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a68      	ldr	r2, [pc, #416]	; (8006b44 <HAL_DMA_IRQHandler+0xcb0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d108      	bne.n	80069b8 <HAL_DMA_IRQHandler+0xb24>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0208 	bic.w	r2, r2, #8
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e007      	b.n	80069c8 <HAL_DMA_IRQHandler+0xb34>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0204 	bic.w	r2, r2, #4
 80069c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8165 	beq.w	8006c9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069da:	e15f      	b.n	8006c9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2202      	movs	r2, #2
 80069e6:	409a      	lsls	r2, r3
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80c5 	beq.w	8006b7c <HAL_DMA_IRQHandler+0xce8>
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80bf 	beq.w	8006b7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	2202      	movs	r2, #2
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d018      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 813a 	beq.w	8006ca0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a34:	e134      	b.n	8006ca0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8130 	beq.w	8006ca0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a48:	e12a      	b.n	8006ca0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 8089 	bne.w	8006b68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2b      	ldr	r2, [pc, #172]	; (8006b08 <HAL_DMA_IRQHandler+0xc74>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d04a      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a29      	ldr	r2, [pc, #164]	; (8006b0c <HAL_DMA_IRQHandler+0xc78>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d045      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a28      	ldr	r2, [pc, #160]	; (8006b10 <HAL_DMA_IRQHandler+0xc7c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d040      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <HAL_DMA_IRQHandler+0xc80>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d03b      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a25      	ldr	r2, [pc, #148]	; (8006b18 <HAL_DMA_IRQHandler+0xc84>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d036      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a23      	ldr	r2, [pc, #140]	; (8006b1c <HAL_DMA_IRQHandler+0xc88>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d031      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a22      	ldr	r2, [pc, #136]	; (8006b20 <HAL_DMA_IRQHandler+0xc8c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d02c      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a20      	ldr	r2, [pc, #128]	; (8006b24 <HAL_DMA_IRQHandler+0xc90>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d027      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <HAL_DMA_IRQHandler+0xc94>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d022      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <HAL_DMA_IRQHandler+0xc98>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01d      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <HAL_DMA_IRQHandler+0xc9c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1a      	ldr	r2, [pc, #104]	; (8006b34 <HAL_DMA_IRQHandler+0xca0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a19      	ldr	r2, [pc, #100]	; (8006b38 <HAL_DMA_IRQHandler+0xca4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <HAL_DMA_IRQHandler+0xca8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <HAL_DMA_IRQHandler+0xcac>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xc62>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <HAL_DMA_IRQHandler+0xcb0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d128      	bne.n	8006b48 <HAL_DMA_IRQHandler+0xcb4>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0214 	bic.w	r2, r2, #20
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e027      	b.n	8006b58 <HAL_DMA_IRQHandler+0xcc4>
 8006b08:	40020010 	.word	0x40020010
 8006b0c:	40020028 	.word	0x40020028
 8006b10:	40020040 	.word	0x40020040
 8006b14:	40020058 	.word	0x40020058
 8006b18:	40020070 	.word	0x40020070
 8006b1c:	40020088 	.word	0x40020088
 8006b20:	400200a0 	.word	0x400200a0
 8006b24:	400200b8 	.word	0x400200b8
 8006b28:	40020410 	.word	0x40020410
 8006b2c:	40020428 	.word	0x40020428
 8006b30:	40020440 	.word	0x40020440
 8006b34:	40020458 	.word	0x40020458
 8006b38:	40020470 	.word	0x40020470
 8006b3c:	40020488 	.word	0x40020488
 8006b40:	400204a0 	.word	0x400204a0
 8006b44:	400204b8 	.word	0x400204b8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 020a 	bic.w	r2, r2, #10
 8006b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8097 	beq.w	8006ca0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b7a:	e091      	b.n	8006ca0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	2208      	movs	r2, #8
 8006b86:	409a      	lsls	r2, r3
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8088 	beq.w	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8082 	beq.w	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a41      	ldr	r2, [pc, #260]	; (8006ca8 <HAL_DMA_IRQHandler+0xe14>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d04a      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a3f      	ldr	r2, [pc, #252]	; (8006cac <HAL_DMA_IRQHandler+0xe18>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d045      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a3e      	ldr	r2, [pc, #248]	; (8006cb0 <HAL_DMA_IRQHandler+0xe1c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d040      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a3c      	ldr	r2, [pc, #240]	; (8006cb4 <HAL_DMA_IRQHandler+0xe20>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d03b      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a3b      	ldr	r2, [pc, #236]	; (8006cb8 <HAL_DMA_IRQHandler+0xe24>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d036      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a39      	ldr	r2, [pc, #228]	; (8006cbc <HAL_DMA_IRQHandler+0xe28>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d031      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a38      	ldr	r2, [pc, #224]	; (8006cc0 <HAL_DMA_IRQHandler+0xe2c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d02c      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a36      	ldr	r2, [pc, #216]	; (8006cc4 <HAL_DMA_IRQHandler+0xe30>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d027      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a35      	ldr	r2, [pc, #212]	; (8006cc8 <HAL_DMA_IRQHandler+0xe34>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d022      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a33      	ldr	r2, [pc, #204]	; (8006ccc <HAL_DMA_IRQHandler+0xe38>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d01d      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a32      	ldr	r2, [pc, #200]	; (8006cd0 <HAL_DMA_IRQHandler+0xe3c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d018      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a30      	ldr	r2, [pc, #192]	; (8006cd4 <HAL_DMA_IRQHandler+0xe40>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a2f      	ldr	r2, [pc, #188]	; (8006cd8 <HAL_DMA_IRQHandler+0xe44>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00e      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a2d      	ldr	r2, [pc, #180]	; (8006cdc <HAL_DMA_IRQHandler+0xe48>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d009      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2c      	ldr	r2, [pc, #176]	; (8006ce0 <HAL_DMA_IRQHandler+0xe4c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d004      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xdaa>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <HAL_DMA_IRQHandler+0xe50>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d108      	bne.n	8006c50 <HAL_DMA_IRQHandler+0xdbc>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 021c 	bic.w	r2, r2, #28
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e007      	b.n	8006c60 <HAL_DMA_IRQHandler+0xdcc>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 020e 	bic.w	r2, r2, #14
 8006c5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2201      	movs	r2, #1
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
 8006c96:	e004      	b.n	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006c98:	bf00      	nop
 8006c9a:	e002      	b.n	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c9c:	bf00      	nop
 8006c9e:	e000      	b.n	8006ca2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ca2:	3728      	adds	r7, #40	; 0x28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40020010 	.word	0x40020010
 8006cac:	40020028 	.word	0x40020028
 8006cb0:	40020040 	.word	0x40020040
 8006cb4:	40020058 	.word	0x40020058
 8006cb8:	40020070 	.word	0x40020070
 8006cbc:	40020088 	.word	0x40020088
 8006cc0:	400200a0 	.word	0x400200a0
 8006cc4:	400200b8 	.word	0x400200b8
 8006cc8:	40020410 	.word	0x40020410
 8006ccc:	40020428 	.word	0x40020428
 8006cd0:	40020440 	.word	0x40020440
 8006cd4:	40020458 	.word	0x40020458
 8006cd8:	40020470 	.word	0x40020470
 8006cdc:	40020488 	.word	0x40020488
 8006ce0:	400204a0 	.word	0x400204a0
 8006ce4:	400204b8 	.word	0x400204b8

08006ce8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a7f      	ldr	r2, [pc, #508]	; (8006f04 <DMA_SetConfig+0x21c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d072      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a7d      	ldr	r2, [pc, #500]	; (8006f08 <DMA_SetConfig+0x220>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d06d      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a7c      	ldr	r2, [pc, #496]	; (8006f0c <DMA_SetConfig+0x224>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d068      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a7a      	ldr	r2, [pc, #488]	; (8006f10 <DMA_SetConfig+0x228>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d063      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a79      	ldr	r2, [pc, #484]	; (8006f14 <DMA_SetConfig+0x22c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d05e      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a77      	ldr	r2, [pc, #476]	; (8006f18 <DMA_SetConfig+0x230>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d059      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a76      	ldr	r2, [pc, #472]	; (8006f1c <DMA_SetConfig+0x234>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d054      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a74      	ldr	r2, [pc, #464]	; (8006f20 <DMA_SetConfig+0x238>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d04f      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a73      	ldr	r2, [pc, #460]	; (8006f24 <DMA_SetConfig+0x23c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d04a      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a71      	ldr	r2, [pc, #452]	; (8006f28 <DMA_SetConfig+0x240>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d045      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a70      	ldr	r2, [pc, #448]	; (8006f2c <DMA_SetConfig+0x244>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d040      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a6e      	ldr	r2, [pc, #440]	; (8006f30 <DMA_SetConfig+0x248>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d03b      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a6d      	ldr	r2, [pc, #436]	; (8006f34 <DMA_SetConfig+0x24c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d036      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a6b      	ldr	r2, [pc, #428]	; (8006f38 <DMA_SetConfig+0x250>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d031      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a6a      	ldr	r2, [pc, #424]	; (8006f3c <DMA_SetConfig+0x254>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d02c      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a68      	ldr	r2, [pc, #416]	; (8006f40 <DMA_SetConfig+0x258>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d027      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a67      	ldr	r2, [pc, #412]	; (8006f44 <DMA_SetConfig+0x25c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d022      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a65      	ldr	r2, [pc, #404]	; (8006f48 <DMA_SetConfig+0x260>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01d      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a64      	ldr	r2, [pc, #400]	; (8006f4c <DMA_SetConfig+0x264>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a62      	ldr	r2, [pc, #392]	; (8006f50 <DMA_SetConfig+0x268>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a61      	ldr	r2, [pc, #388]	; (8006f54 <DMA_SetConfig+0x26c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5f      	ldr	r2, [pc, #380]	; (8006f58 <DMA_SetConfig+0x270>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a5e      	ldr	r2, [pc, #376]	; (8006f5c <DMA_SetConfig+0x274>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <DMA_SetConfig+0x10a>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a5c      	ldr	r2, [pc, #368]	; (8006f60 <DMA_SetConfig+0x278>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d101      	bne.n	8006df6 <DMA_SetConfig+0x10e>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <DMA_SetConfig+0x110>
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00d      	beq.n	8006e18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a39      	ldr	r2, [pc, #228]	; (8006f04 <DMA_SetConfig+0x21c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d04a      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a38      	ldr	r2, [pc, #224]	; (8006f08 <DMA_SetConfig+0x220>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d045      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a36      	ldr	r2, [pc, #216]	; (8006f0c <DMA_SetConfig+0x224>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d040      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a35      	ldr	r2, [pc, #212]	; (8006f10 <DMA_SetConfig+0x228>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d03b      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a33      	ldr	r2, [pc, #204]	; (8006f14 <DMA_SetConfig+0x22c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d036      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a32      	ldr	r2, [pc, #200]	; (8006f18 <DMA_SetConfig+0x230>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d031      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a30      	ldr	r2, [pc, #192]	; (8006f1c <DMA_SetConfig+0x234>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d02c      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2f      	ldr	r2, [pc, #188]	; (8006f20 <DMA_SetConfig+0x238>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d027      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2d      	ldr	r2, [pc, #180]	; (8006f24 <DMA_SetConfig+0x23c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d022      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <DMA_SetConfig+0x240>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d01d      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <DMA_SetConfig+0x244>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d018      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a29      	ldr	r2, [pc, #164]	; (8006f30 <DMA_SetConfig+0x248>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a27      	ldr	r2, [pc, #156]	; (8006f34 <DMA_SetConfig+0x24c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00e      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a26      	ldr	r2, [pc, #152]	; (8006f38 <DMA_SetConfig+0x250>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <DMA_SetConfig+0x254>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d004      	beq.n	8006eb8 <DMA_SetConfig+0x1d0>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <DMA_SetConfig+0x258>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <DMA_SetConfig+0x1d4>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <DMA_SetConfig+0x1d6>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d059      	beq.n	8006f76 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	223f      	movs	r2, #63	; 0x3f
 8006ecc:	409a      	lsls	r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ee0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d138      	bne.n	8006f64 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f02:	e086      	b.n	8007012 <DMA_SetConfig+0x32a>
 8006f04:	40020010 	.word	0x40020010
 8006f08:	40020028 	.word	0x40020028
 8006f0c:	40020040 	.word	0x40020040
 8006f10:	40020058 	.word	0x40020058
 8006f14:	40020070 	.word	0x40020070
 8006f18:	40020088 	.word	0x40020088
 8006f1c:	400200a0 	.word	0x400200a0
 8006f20:	400200b8 	.word	0x400200b8
 8006f24:	40020410 	.word	0x40020410
 8006f28:	40020428 	.word	0x40020428
 8006f2c:	40020440 	.word	0x40020440
 8006f30:	40020458 	.word	0x40020458
 8006f34:	40020470 	.word	0x40020470
 8006f38:	40020488 	.word	0x40020488
 8006f3c:	400204a0 	.word	0x400204a0
 8006f40:	400204b8 	.word	0x400204b8
 8006f44:	58025408 	.word	0x58025408
 8006f48:	5802541c 	.word	0x5802541c
 8006f4c:	58025430 	.word	0x58025430
 8006f50:	58025444 	.word	0x58025444
 8006f54:	58025458 	.word	0x58025458
 8006f58:	5802546c 	.word	0x5802546c
 8006f5c:	58025480 	.word	0x58025480
 8006f60:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]
}
 8006f74:	e04d      	b.n	8007012 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a29      	ldr	r2, [pc, #164]	; (8007020 <DMA_SetConfig+0x338>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <DMA_SetConfig+0x2de>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a27      	ldr	r2, [pc, #156]	; (8007024 <DMA_SetConfig+0x33c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <DMA_SetConfig+0x2de>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a26      	ldr	r2, [pc, #152]	; (8007028 <DMA_SetConfig+0x340>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <DMA_SetConfig+0x2de>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a24      	ldr	r2, [pc, #144]	; (800702c <DMA_SetConfig+0x344>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <DMA_SetConfig+0x2de>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a23      	ldr	r2, [pc, #140]	; (8007030 <DMA_SetConfig+0x348>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <DMA_SetConfig+0x2de>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a21      	ldr	r2, [pc, #132]	; (8007034 <DMA_SetConfig+0x34c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <DMA_SetConfig+0x2de>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a20      	ldr	r2, [pc, #128]	; (8007038 <DMA_SetConfig+0x350>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <DMA_SetConfig+0x2de>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1e      	ldr	r2, [pc, #120]	; (800703c <DMA_SetConfig+0x354>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d101      	bne.n	8006fca <DMA_SetConfig+0x2e2>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <DMA_SetConfig+0x2e4>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d020      	beq.n	8007012 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2201      	movs	r2, #1
 8006fda:	409a      	lsls	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	d108      	bne.n	8007002 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	60da      	str	r2, [r3, #12]
}
 8007000:	e007      	b.n	8007012 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	60da      	str	r2, [r3, #12]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	58025408 	.word	0x58025408
 8007024:	5802541c 	.word	0x5802541c
 8007028:	58025430 	.word	0x58025430
 800702c:	58025444 	.word	0x58025444
 8007030:	58025458 	.word	0x58025458
 8007034:	5802546c 	.word	0x5802546c
 8007038:	58025480 	.word	0x58025480
 800703c:	58025494 	.word	0x58025494

08007040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a42      	ldr	r2, [pc, #264]	; (8007158 <DMA_CalcBaseAndBitshift+0x118>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04a      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a41      	ldr	r2, [pc, #260]	; (800715c <DMA_CalcBaseAndBitshift+0x11c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d045      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a3f      	ldr	r2, [pc, #252]	; (8007160 <DMA_CalcBaseAndBitshift+0x120>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d040      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a3e      	ldr	r2, [pc, #248]	; (8007164 <DMA_CalcBaseAndBitshift+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d03b      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a3c      	ldr	r2, [pc, #240]	; (8007168 <DMA_CalcBaseAndBitshift+0x128>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d036      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a3b      	ldr	r2, [pc, #236]	; (800716c <DMA_CalcBaseAndBitshift+0x12c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d031      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a39      	ldr	r2, [pc, #228]	; (8007170 <DMA_CalcBaseAndBitshift+0x130>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d02c      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a38      	ldr	r2, [pc, #224]	; (8007174 <DMA_CalcBaseAndBitshift+0x134>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d027      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a36      	ldr	r2, [pc, #216]	; (8007178 <DMA_CalcBaseAndBitshift+0x138>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d022      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a35      	ldr	r2, [pc, #212]	; (800717c <DMA_CalcBaseAndBitshift+0x13c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d01d      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a33      	ldr	r2, [pc, #204]	; (8007180 <DMA_CalcBaseAndBitshift+0x140>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d018      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a32      	ldr	r2, [pc, #200]	; (8007184 <DMA_CalcBaseAndBitshift+0x144>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a30      	ldr	r2, [pc, #192]	; (8007188 <DMA_CalcBaseAndBitshift+0x148>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00e      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a2f      	ldr	r2, [pc, #188]	; (800718c <DMA_CalcBaseAndBitshift+0x14c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d009      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <DMA_CalcBaseAndBitshift+0x150>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <DMA_CalcBaseAndBitshift+0xa8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <DMA_CalcBaseAndBitshift+0x154>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d101      	bne.n	80070ec <DMA_CalcBaseAndBitshift+0xac>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e000      	b.n	80070ee <DMA_CalcBaseAndBitshift+0xae>
 80070ec:	2300      	movs	r3, #0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d024      	beq.n	800713c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	3b10      	subs	r3, #16
 80070fa:	4a27      	ldr	r2, [pc, #156]	; (8007198 <DMA_CalcBaseAndBitshift+0x158>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	4a24      	ldr	r2, [pc, #144]	; (800719c <DMA_CalcBaseAndBitshift+0x15c>)
 800710c:	5cd3      	ldrb	r3, [r2, r3]
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b03      	cmp	r3, #3
 8007118:	d908      	bls.n	800712c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007122:	4013      	ands	r3, r2
 8007124:	1d1a      	adds	r2, r3, #4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	659a      	str	r2, [r3, #88]	; 0x58
 800712a:	e00d      	b.n	8007148 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007134:	4013      	ands	r3, r2
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6593      	str	r3, [r2, #88]	; 0x58
 800713a:	e005      	b.n	8007148 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	40020010 	.word	0x40020010
 800715c:	40020028 	.word	0x40020028
 8007160:	40020040 	.word	0x40020040
 8007164:	40020058 	.word	0x40020058
 8007168:	40020070 	.word	0x40020070
 800716c:	40020088 	.word	0x40020088
 8007170:	400200a0 	.word	0x400200a0
 8007174:	400200b8 	.word	0x400200b8
 8007178:	40020410 	.word	0x40020410
 800717c:	40020428 	.word	0x40020428
 8007180:	40020440 	.word	0x40020440
 8007184:	40020458 	.word	0x40020458
 8007188:	40020470 	.word	0x40020470
 800718c:	40020488 	.word	0x40020488
 8007190:	400204a0 	.word	0x400204a0
 8007194:	400204b8 	.word	0x400204b8
 8007198:	aaaaaaab 	.word	0xaaaaaaab
 800719c:	08017a64 	.word	0x08017a64
 80071a0:	fffffc00 	.word	0xfffffc00

080071a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d120      	bne.n	80071fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d858      	bhi.n	8007272 <DMA_CheckFifoParam+0xce>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <DMA_CheckFifoParam+0x24>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071eb 	.word	0x080071eb
 80071d0:	080071d9 	.word	0x080071d9
 80071d4:	08007273 	.word	0x08007273
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d048      	beq.n	8007276 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071e8:	e045      	b.n	8007276 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071f2:	d142      	bne.n	800727a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071f8:	e03f      	b.n	800727a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007202:	d123      	bne.n	800724c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	2b03      	cmp	r3, #3
 800720a:	d838      	bhi.n	800727e <DMA_CheckFifoParam+0xda>
 800720c:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <DMA_CheckFifoParam+0x70>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	08007225 	.word	0x08007225
 8007218:	0800722b 	.word	0x0800722b
 800721c:	08007225 	.word	0x08007225
 8007220:	0800723d 	.word	0x0800723d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
        break;
 8007228:	e030      	b.n	800728c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d025      	beq.n	8007282 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800723a:	e022      	b.n	8007282 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007244:	d11f      	bne.n	8007286 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800724a:	e01c      	b.n	8007286 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	2b02      	cmp	r3, #2
 8007252:	d902      	bls.n	800725a <DMA_CheckFifoParam+0xb6>
 8007254:	2b03      	cmp	r3, #3
 8007256:	d003      	beq.n	8007260 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007258:	e018      	b.n	800728c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
        break;
 800725e:	e015      	b.n	800728c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
    break;
 8007270:	e00b      	b.n	800728a <DMA_CheckFifoParam+0xe6>
        break;
 8007272:	bf00      	nop
 8007274:	e00a      	b.n	800728c <DMA_CheckFifoParam+0xe8>
        break;
 8007276:	bf00      	nop
 8007278:	e008      	b.n	800728c <DMA_CheckFifoParam+0xe8>
        break;
 800727a:	bf00      	nop
 800727c:	e006      	b.n	800728c <DMA_CheckFifoParam+0xe8>
        break;
 800727e:	bf00      	nop
 8007280:	e004      	b.n	800728c <DMA_CheckFifoParam+0xe8>
        break;
 8007282:	bf00      	nop
 8007284:	e002      	b.n	800728c <DMA_CheckFifoParam+0xe8>
        break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <DMA_CheckFifoParam+0xe8>
    break;
 800728a:	bf00      	nop
    }
  }

  return status;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop

0800729c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a38      	ldr	r2, [pc, #224]	; (8007390 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d022      	beq.n	80072fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a36      	ldr	r2, [pc, #216]	; (8007394 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01d      	beq.n	80072fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a35      	ldr	r2, [pc, #212]	; (8007398 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a33      	ldr	r2, [pc, #204]	; (800739c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a32      	ldr	r2, [pc, #200]	; (80073a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00e      	beq.n	80072fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a30      	ldr	r2, [pc, #192]	; (80073a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a2f      	ldr	r2, [pc, #188]	; (80073a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2d      	ldr	r2, [pc, #180]	; (80073ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d101      	bne.n	80072fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01a      	beq.n	800733a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	3b08      	subs	r3, #8
 800730c:	4a28      	ldr	r2, [pc, #160]	; (80073b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	461a      	mov	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a24      	ldr	r2, [pc, #144]	; (80073b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007328:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2201      	movs	r2, #1
 8007332:	409a      	lsls	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007338:	e024      	b.n	8007384 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	3b10      	subs	r3, #16
 8007342:	4a1e      	ldr	r2, [pc, #120]	; (80073bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	091b      	lsrs	r3, r3, #4
 800734a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4a1c      	ldr	r2, [pc, #112]	; (80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d806      	bhi.n	8007362 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a1b      	ldr	r2, [pc, #108]	; (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d902      	bls.n	8007362 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3308      	adds	r3, #8
 8007360:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4b18      	ldr	r3, [pc, #96]	; (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	461a      	mov	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a16      	ldr	r2, [pc, #88]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007374:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	2201      	movs	r2, #1
 800737e:	409a      	lsls	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007384:	bf00      	nop
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	58025408 	.word	0x58025408
 8007394:	5802541c 	.word	0x5802541c
 8007398:	58025430 	.word	0x58025430
 800739c:	58025444 	.word	0x58025444
 80073a0:	58025458 	.word	0x58025458
 80073a4:	5802546c 	.word	0x5802546c
 80073a8:	58025480 	.word	0x58025480
 80073ac:	58025494 	.word	0x58025494
 80073b0:	cccccccd 	.word	0xcccccccd
 80073b4:	16009600 	.word	0x16009600
 80073b8:	58025880 	.word	0x58025880
 80073bc:	aaaaaaab 	.word	0xaaaaaaab
 80073c0:	400204b8 	.word	0x400204b8
 80073c4:	4002040f 	.word	0x4002040f
 80073c8:	10008200 	.word	0x10008200
 80073cc:	40020880 	.word	0x40020880

080073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d04a      	beq.n	800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d847      	bhi.n	800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a25      	ldr	r2, [pc, #148]	; (8007488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d022      	beq.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a24      	ldr	r2, [pc, #144]	; (800748c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d01d      	beq.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a22      	ldr	r2, [pc, #136]	; (8007490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d018      	beq.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a21      	ldr	r2, [pc, #132]	; (8007494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a1e      	ldr	r2, [pc, #120]	; (800749c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1c      	ldr	r2, [pc, #112]	; (80074a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1b      	ldr	r2, [pc, #108]	; (80074a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d101      	bne.n	8007440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007440:	2300      	movs	r3, #0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a15      	ldr	r2, [pc, #84]	; (80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007458:	671a      	str	r2, [r3, #112]	; 0x70
 800745a:	e009      	b.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	461a      	mov	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a11      	ldr	r2, [pc, #68]	; (80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800746e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3b01      	subs	r3, #1
 8007474:	2201      	movs	r2, #1
 8007476:	409a      	lsls	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800747c:	bf00      	nop
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	58025408 	.word	0x58025408
 800748c:	5802541c 	.word	0x5802541c
 8007490:	58025430 	.word	0x58025430
 8007494:	58025444 	.word	0x58025444
 8007498:	58025458 	.word	0x58025458
 800749c:	5802546c 	.word	0x5802546c
 80074a0:	58025480 	.word	0x58025480
 80074a4:	58025494 	.word	0x58025494
 80074a8:	1600963f 	.word	0x1600963f
 80074ac:	58025940 	.word	0x58025940
 80074b0:	1000823f 	.word	0x1000823f
 80074b4:	40020940 	.word	0x40020940

080074b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b098      	sub	sp, #96	; 0x60
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80074c0:	4a84      	ldr	r2, [pc, #528]	; (80076d4 <HAL_FDCAN_Init+0x21c>)
 80074c2:	f107 030c 	add.w	r3, r7, #12
 80074c6:	4611      	mov	r1, r2
 80074c8:	224c      	movs	r2, #76	; 0x4c
 80074ca:	4618      	mov	r0, r3
 80074cc:	f00f fd02 	bl	8016ed4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e1c6      	b.n	8007868 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a7e      	ldr	r2, [pc, #504]	; (80076d8 <HAL_FDCAN_Init+0x220>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d106      	bne.n	80074f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fb fad6 	bl	8002ab8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0210 	bic.w	r2, r2, #16
 800751a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800751c:	f7fc fa30 	bl	8003980 <HAL_GetTick>
 8007520:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007522:	e014      	b.n	800754e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007524:	f7fc fa2c 	bl	8003980 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b0a      	cmp	r3, #10
 8007530:	d90d      	bls.n	800754e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007538:	f043 0201 	orr.w	r2, r3, #1
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2203      	movs	r2, #3
 8007546:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e18c      	b.n	8007868 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b08      	cmp	r3, #8
 800755a:	d0e3      	beq.n	8007524 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800756c:	f7fc fa08 	bl	8003980 <HAL_GetTick>
 8007570:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007572:	e014      	b.n	800759e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007574:	f7fc fa04 	bl	8003980 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b0a      	cmp	r3, #10
 8007580:	d90d      	bls.n	800759e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007588:	f043 0201 	orr.w	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2203      	movs	r2, #3
 8007596:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e164      	b.n	8007868 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0e3      	beq.n	8007574 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0202 	orr.w	r2, r2, #2
 80075ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	7c1b      	ldrb	r3, [r3, #16]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d108      	bne.n	80075d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d2:	619a      	str	r2, [r3, #24]
 80075d4:	e007      	b.n	80075e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	7c5b      	ldrb	r3, [r3, #17]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d108      	bne.n	8007600 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	699a      	ldr	r2, [r3, #24]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075fc:	619a      	str	r2, [r3, #24]
 80075fe:	e007      	b.n	8007610 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800760e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7c9b      	ldrb	r3, [r3, #18]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d108      	bne.n	800762a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007626:	619a      	str	r2, [r3, #24]
 8007628:	e007      	b.n	800763a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007638:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800765e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0210 	bic.w	r2, r2, #16
 800766e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d108      	bne.n	800768a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0204 	orr.w	r2, r2, #4
 8007686:	619a      	str	r2, [r3, #24]
 8007688:	e030      	b.n	80076ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d02c      	beq.n	80076ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d020      	beq.n	80076dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0210 	orr.w	r2, r2, #16
 80076b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d114      	bne.n	80076ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0220 	orr.w	r2, r2, #32
 80076d0:	619a      	str	r2, [r3, #24]
 80076d2:	e00b      	b.n	80076ec <HAL_FDCAN_Init+0x234>
 80076d4:	0801795c 	.word	0x0801795c
 80076d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0220 	orr.w	r2, r2, #32
 80076ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007704:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	3b01      	subs	r3, #1
 800770e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007714:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007716:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007720:	d115      	bne.n	800774e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	3b01      	subs	r3, #1
 800772e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007730:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	3b01      	subs	r3, #1
 8007738:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800773a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	3b01      	subs	r3, #1
 8007744:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800774a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800774c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007774:	4413      	add	r3, r2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d011      	beq.n	800779e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007782:	f023 0107 	bic.w	r1, r3, #7
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	3360      	adds	r3, #96	; 0x60
 800778e:	443b      	add	r3, r7
 8007790:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d011      	beq.n	80077ca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077ae:	f023 0107 	bic.w	r1, r3, #7
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	3360      	adds	r3, #96	; 0x60
 80077ba:	443b      	add	r3, r7
 80077bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d012      	beq.n	80077f8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077da:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	3360      	adds	r3, #96	; 0x60
 80077e6:	443b      	add	r3, r7
 80077e8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077ec:	011a      	lsls	r2, r3, #4
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d012      	beq.n	8007826 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007808:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	3360      	adds	r3, #96	; 0x60
 8007814:	443b      	add	r3, r7
 8007816:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800781a:	021a      	lsls	r2, r3, #8
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a11      	ldr	r2, [pc, #68]	; (8007870 <HAL_FDCAN_Init+0x3b8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d107      	bne.n	8007840 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f022 0203 	bic.w	r2, r2, #3
 800783e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f80b 	bl	8007874 <FDCAN_CalcultateRamBlockAddresses>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007864:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007868:	4618      	mov	r0, r3
 800786a:	3760      	adds	r7, #96	; 0x60
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	4000a000 	.word	0x4000a000

08007874 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007880:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800788a:	4ba7      	ldr	r3, [pc, #668]	; (8007b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800788c:	4013      	ands	r3, r2
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	0091      	lsls	r1, r2, #2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	430b      	orrs	r3, r1
 8007898:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	041a      	lsls	r2, r3, #16
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	4413      	add	r3, r2
 80078c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078ca:	4b97      	ldr	r3, [pc, #604]	; (8007b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	0091      	lsls	r1, r2, #2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	430b      	orrs	r3, r1
 80078d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ec:	041a      	lsls	r2, r3, #16
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800790c:	4b86      	ldr	r3, [pc, #536]	; (8007b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800790e:	4013      	ands	r3, r2
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	0091      	lsls	r1, r2, #2
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	430b      	orrs	r3, r1
 800791a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007926:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	041a      	lsls	r2, r3, #16
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4413      	add	r3, r2
 800794a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007954:	4b74      	ldr	r3, [pc, #464]	; (8007b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007956:	4013      	ands	r3, r2
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	0091      	lsls	r1, r2, #2
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	430b      	orrs	r3, r1
 8007962:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800796e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007976:	041a      	lsls	r2, r3, #16
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800799c:	4b62      	ldr	r3, [pc, #392]	; (8007b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800799e:	4013      	ands	r3, r2
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	0091      	lsls	r1, r2, #2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	430b      	orrs	r3, r1
 80079aa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4413      	add	r3, r2
 80079be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80079c8:	4b57      	ldr	r3, [pc, #348]	; (8007b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079ca:	4013      	ands	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	0091      	lsls	r1, r2, #2
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6812      	ldr	r2, [r2, #0]
 80079d4:	430b      	orrs	r3, r1
 80079d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079e2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ea:	041a      	lsls	r2, r3, #16
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	4413      	add	r3, r2
 8007a00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a0a:	4b47      	ldr	r3, [pc, #284]	; (8007b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	0091      	lsls	r1, r2, #2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	430b      	orrs	r3, r1
 8007a18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a24:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2c:	041a      	lsls	r2, r3, #16
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a40:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a48:	061a      	lsls	r2, r3, #24
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a58:	4b34      	ldr	r3, [pc, #208]	; (8007b2c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009a      	lsls	r2, r3, #2
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	441a      	add	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	441a      	add	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	441a      	add	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007aa6:	fb01 f303 	mul.w	r3, r1, r3
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	441a      	add	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b0a:	fb01 f303 	mul.w	r3, r1, r3
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	441a      	add	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1e:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d915      	bls.n	8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b24:	e006      	b.n	8007b34 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b26:	bf00      	nop
 8007b28:	ffff0003 	.word	0xffff0003
 8007b2c:	10002b00 	.word	0x10002b00
 8007b30:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b3a:	f043 0220 	orr.w	r2, r3, #32
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2203      	movs	r2, #3
 8007b48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e010      	b.n	8007b72 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e005      	b.n	8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3304      	adds	r3, #4
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d3f3      	bcc.n	8007b58 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop

08007b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b089      	sub	sp, #36	; 0x24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b8e:	4b86      	ldr	r3, [pc, #536]	; (8007da8 <HAL_GPIO_Init+0x228>)
 8007b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b92:	e18c      	b.n	8007eae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	2101      	movs	r1, #1
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 817e 	beq.w	8007ea8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d005      	beq.n	8007bc4 <HAL_GPIO_Init+0x44>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f003 0303 	and.w	r3, r3, #3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d130      	bne.n	8007c26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	2203      	movs	r2, #3
 8007bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	091b      	lsrs	r3, r3, #4
 8007c10:	f003 0201 	and.w	r2, r3, #1
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d017      	beq.n	8007c62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c42:	43db      	mvns	r3, r3
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	4013      	ands	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d123      	bne.n	8007cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	08da      	lsrs	r2, r3, #3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3208      	adds	r2, #8
 8007c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	220f      	movs	r2, #15
 8007c86:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8a:	43db      	mvns	r3, r3
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	08da      	lsrs	r2, r3, #3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3208      	adds	r2, #8
 8007cb0:	69b9      	ldr	r1, [r7, #24]
 8007cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	43db      	mvns	r3, r3
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f003 0203 	and.w	r2, r3, #3
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 80d8 	beq.w	8007ea8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cf8:	4b2c      	ldr	r3, [pc, #176]	; (8007dac <HAL_GPIO_Init+0x22c>)
 8007cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cfe:	4a2b      	ldr	r2, [pc, #172]	; (8007dac <HAL_GPIO_Init+0x22c>)
 8007d00:	f043 0302 	orr.w	r3, r3, #2
 8007d04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d08:	4b28      	ldr	r3, [pc, #160]	; (8007dac <HAL_GPIO_Init+0x22c>)
 8007d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d16:	4a26      	ldr	r2, [pc, #152]	; (8007db0 <HAL_GPIO_Init+0x230>)
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	089b      	lsrs	r3, r3, #2
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	220f      	movs	r2, #15
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	43db      	mvns	r3, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	4013      	ands	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <HAL_GPIO_Init+0x234>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d04a      	beq.n	8007dd8 <HAL_GPIO_Init+0x258>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a1c      	ldr	r2, [pc, #112]	; (8007db8 <HAL_GPIO_Init+0x238>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d02b      	beq.n	8007da2 <HAL_GPIO_Init+0x222>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <HAL_GPIO_Init+0x23c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d025      	beq.n	8007d9e <HAL_GPIO_Init+0x21e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a1a      	ldr	r2, [pc, #104]	; (8007dc0 <HAL_GPIO_Init+0x240>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d01f      	beq.n	8007d9a <HAL_GPIO_Init+0x21a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a19      	ldr	r2, [pc, #100]	; (8007dc4 <HAL_GPIO_Init+0x244>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d019      	beq.n	8007d96 <HAL_GPIO_Init+0x216>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <HAL_GPIO_Init+0x248>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d013      	beq.n	8007d92 <HAL_GPIO_Init+0x212>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <HAL_GPIO_Init+0x24c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00d      	beq.n	8007d8e <HAL_GPIO_Init+0x20e>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a16      	ldr	r2, [pc, #88]	; (8007dd0 <HAL_GPIO_Init+0x250>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d007      	beq.n	8007d8a <HAL_GPIO_Init+0x20a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <HAL_GPIO_Init+0x254>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d101      	bne.n	8007d86 <HAL_GPIO_Init+0x206>
 8007d82:	2309      	movs	r3, #9
 8007d84:	e029      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007d86:	230a      	movs	r3, #10
 8007d88:	e027      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007d8a:	2307      	movs	r3, #7
 8007d8c:	e025      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007d8e:	2306      	movs	r3, #6
 8007d90:	e023      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007d92:	2305      	movs	r3, #5
 8007d94:	e021      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007d96:	2304      	movs	r3, #4
 8007d98:	e01f      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e01d      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e01b      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e019      	b.n	8007dda <HAL_GPIO_Init+0x25a>
 8007da6:	bf00      	nop
 8007da8:	58000080 	.word	0x58000080
 8007dac:	58024400 	.word	0x58024400
 8007db0:	58000400 	.word	0x58000400
 8007db4:	58020000 	.word	0x58020000
 8007db8:	58020400 	.word	0x58020400
 8007dbc:	58020800 	.word	0x58020800
 8007dc0:	58020c00 	.word	0x58020c00
 8007dc4:	58021000 	.word	0x58021000
 8007dc8:	58021400 	.word	0x58021400
 8007dcc:	58021800 	.word	0x58021800
 8007dd0:	58021c00 	.word	0x58021c00
 8007dd4:	58022400 	.word	0x58022400
 8007dd8:	2300      	movs	r3, #0
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	f002 0203 	and.w	r2, r2, #3
 8007de0:	0092      	lsls	r2, r2, #2
 8007de2:	4093      	lsls	r3, r2
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007dea:	4938      	ldr	r1, [pc, #224]	; (8007ecc <HAL_GPIO_Init+0x34c>)
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	089b      	lsrs	r3, r3, #2
 8007df0:	3302      	adds	r3, #2
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	43db      	mvns	r3, r3
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	4013      	ands	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	43db      	mvns	r3, r3
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	4013      	ands	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	4013      	ands	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	43db      	mvns	r3, r3
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f47f ae6b 	bne.w	8007b94 <HAL_GPIO_Init+0x14>
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	bf00      	nop
 8007ec2:	3724      	adds	r7, #36	; 0x24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	58000400 	.word	0x58000400

08007ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	887b      	ldrh	r3, [r7, #2]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
 8007eec:	e001      	b.n	8007ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	807b      	strh	r3, [r7, #2]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f10:	787b      	ldrb	r3, [r7, #1]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f16:	887a      	ldrh	r2, [r7, #2]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f1c:	e003      	b.n	8007f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f1e:	887b      	ldrh	r3, [r7, #2]
 8007f20:	041a      	lsls	r2, r3, #16
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	619a      	str	r2, [r3, #24]
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e07f      	b.n	8008046 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fa fe14 	bl	8002b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2224      	movs	r2, #36	; 0x24
 8007f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d107      	bne.n	8007fae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	e006      	b.n	8007fbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007fba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d104      	bne.n	8007fce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6859      	ldr	r1, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	; (8008050 <HAL_I2C_Init+0x11c>)
 8007fda:	430b      	orrs	r3, r1
 8007fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69d9      	ldr	r1, [r3, #28]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1a      	ldr	r2, [r3, #32]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	02008000 	.word	0x02008000

08008054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b20      	cmp	r3, #32
 8008068:	d138      	bne.n	80080dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008074:	2302      	movs	r3, #2
 8008076:	e032      	b.n	80080de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2224      	movs	r2, #36	; 0x24
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6819      	ldr	r1, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b20      	cmp	r3, #32
 80080fe:	d139      	bne.n	8008174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800810a:	2302      	movs	r3, #2
 800810c:	e033      	b.n	8008176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2224      	movs	r2, #36	; 0x24
 800811a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0201 	bic.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800813c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	021b      	lsls	r3, r3, #8
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e000      	b.n	8008176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008184:	b08f      	sub	sp, #60	; 0x3c
 8008186:	af0a      	add	r7, sp, #40	; 0x28
 8008188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e116      	b.n	80083c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f00e fb5a 	bl	8016868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2203      	movs	r2, #3
 80081b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f00a fc9f 	bl	8012b16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	687e      	ldr	r6, [r7, #4]
 80081e0:	466d      	mov	r5, sp
 80081e2:	f106 0410 	add.w	r4, r6, #16
 80081e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80081f6:	1d33      	adds	r3, r6, #4
 80081f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081fa:	6838      	ldr	r0, [r7, #0]
 80081fc:	f00a fb6a 	bl	80128d4 <USB_CoreInit>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e0d7      	b.n	80083c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f00a fc8d 	bl	8012b38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
 8008222:	e04a      	b.n	80082ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008224:	7bfa      	ldrb	r2, [r7, #15]
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	333d      	adds	r3, #61	; 0x3d
 8008234:	2201      	movs	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008238:	7bfa      	ldrb	r2, [r7, #15]
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	4613      	mov	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	333c      	adds	r3, #60	; 0x3c
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800824c:	7bfa      	ldrb	r2, [r7, #15]
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	b298      	uxth	r0, r3
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	4613      	mov	r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	3356      	adds	r3, #86	; 0x56
 8008260:	4602      	mov	r2, r0
 8008262:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008264:	7bfa      	ldrb	r2, [r7, #15]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4613      	mov	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	3340      	adds	r3, #64	; 0x40
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008278:	7bfa      	ldrb	r2, [r7, #15]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	3344      	adds	r3, #68	; 0x44
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800828c:	7bfa      	ldrb	r2, [r7, #15]
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	3348      	adds	r3, #72	; 0x48
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082a0:	7bfa      	ldrb	r2, [r7, #15]
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4613      	mov	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	334c      	adds	r3, #76	; 0x4c
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	3301      	adds	r3, #1
 80082b8:	73fb      	strb	r3, [r7, #15]
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d3af      	bcc.n	8008224 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
 80082c8:	e044      	b.n	8008354 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082ca:	7bfa      	ldrb	r2, [r7, #15]
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082e0:	7bfa      	ldrb	r2, [r7, #15]
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4613      	mov	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80082f2:	7bfa      	ldrb	r2, [r7, #15]
 80082f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082f6:	7bfa      	ldrb	r2, [r7, #15]
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800830c:	7bfa      	ldrb	r2, [r7, #15]
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	4613      	mov	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008322:	7bfa      	ldrb	r2, [r7, #15]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008338:	7bfa      	ldrb	r2, [r7, #15]
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	440b      	add	r3, r1
 8008346:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	3301      	adds	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
 8008354:	7bfa      	ldrb	r2, [r7, #15]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	429a      	cmp	r2, r3
 800835c:	d3b5      	bcc.n	80082ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	687e      	ldr	r6, [r7, #4]
 8008366:	466d      	mov	r5, sp
 8008368:	f106 0410 	add.w	r4, r6, #16
 800836c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800836e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008374:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008378:	e885 0003 	stmia.w	r5, {r0, r1}
 800837c:	1d33      	adds	r3, r6, #4
 800837e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008380:	6838      	ldr	r0, [r7, #0]
 8008382:	f00a fc25 	bl	8012bd0 <USB_DevInit>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e014      	b.n	80083c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d102      	bne.n	80083b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 f96f 	bl	8009694 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f00b fc67 	bl	8013c8e <USB_DevDisconnect>

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_PCD_Start+0x1c>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e022      	b.n	800842c <HAL_PCD_Start+0x62>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d105      	bne.n	800840e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f00a fb6e 	bl	8012af4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f00b fc15 	bl	8013c4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008434:	b590      	push	{r4, r7, lr}
 8008436:	b08d      	sub	sp, #52	; 0x34
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f00b fcd3 	bl	8013df6 <USB_GetMode>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	f040 84b7 	bne.w	8008dc6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	f00b fc37 	bl	8013cd0 <USB_ReadInterrupts>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 84ad 	beq.w	8008dc4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	0a1b      	lsrs	r3, r3, #8
 8008474:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f00b fc24 	bl	8013cd0 <USB_ReadInterrupts>
 8008488:	4603      	mov	r3, r0
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b02      	cmp	r3, #2
 8008490:	d107      	bne.n	80084a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	695a      	ldr	r2, [r3, #20]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f002 0202 	and.w	r2, r2, #2
 80084a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f00b fc12 	bl	8013cd0 <USB_ReadInterrupts>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b10      	cmp	r3, #16
 80084b4:	d161      	bne.n	800857a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0210 	bic.w	r2, r2, #16
 80084c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	f003 020f 	and.w	r2, r3, #15
 80084d2:	4613      	mov	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	3304      	adds	r3, #4
 80084e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	0c5b      	lsrs	r3, r3, #17
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d124      	bne.n	800853c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d035      	beq.n	800856a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008508:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800850c:	b29b      	uxth	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	6a38      	ldr	r0, [r7, #32]
 8008512:	f00b fa49 	bl	80139a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	091b      	lsrs	r3, r3, #4
 800851e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008522:	441a      	add	r2, r3
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	695a      	ldr	r2, [r3, #20]
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	091b      	lsrs	r3, r3, #4
 8008530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008534:	441a      	add	r2, r3
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	615a      	str	r2, [r3, #20]
 800853a:	e016      	b.n	800856a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	0c5b      	lsrs	r3, r3, #17
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	2b06      	cmp	r3, #6
 8008546:	d110      	bne.n	800856a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800854e:	2208      	movs	r2, #8
 8008550:	4619      	mov	r1, r3
 8008552:	6a38      	ldr	r0, [r7, #32]
 8008554:	f00b fa28 	bl	80139a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	695a      	ldr	r2, [r3, #20]
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	091b      	lsrs	r3, r3, #4
 8008560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008564:	441a      	add	r2, r3
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699a      	ldr	r2, [r3, #24]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0210 	orr.w	r2, r2, #16
 8008578:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f00b fba6 	bl	8013cd0 <USB_ReadInterrupts>
 8008584:	4603      	mov	r3, r0
 8008586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800858e:	f040 80a7 	bne.w	80086e0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f00b fbab 	bl	8013cf6 <USB_ReadDevAllOutEpInterrupt>
 80085a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80085a2:	e099      	b.n	80086d8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 808e 	beq.w	80086cc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f00b fbcf 	bl	8013d5e <USB_ReadDevOutEPInterrupt>
 80085c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00c      	beq.n	80085e6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d8:	461a      	mov	r2, r3
 80085da:	2301      	movs	r3, #1
 80085dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80085de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fed1 	bl	8009388 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fc:	461a      	mov	r2, r3
 80085fe:	2308      	movs	r3, #8
 8008600:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 ffa7 	bl	8009558 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	461a      	mov	r2, r3
 8008622:	2310      	movs	r3, #16
 8008624:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d030      	beq.n	8008692 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008638:	2b80      	cmp	r3, #128	; 0x80
 800863a:	d109      	bne.n	8008650 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800864a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800864e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008652:	4613      	mov	r3, r2
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4413      	add	r3, r2
 8008662:	3304      	adds	r3, #4
 8008664:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	78db      	ldrb	r3, [r3, #3]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d108      	bne.n	8008680 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2200      	movs	r2, #0
 8008672:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	b2db      	uxtb	r3, r3
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f00e f9ec 	bl	8016a58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868c:	461a      	mov	r2, r3
 800868e:	2302      	movs	r3, #2
 8008690:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d008      	beq.n	80086ae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	461a      	mov	r2, r3
 80086aa:	2320      	movs	r3, #32
 80086ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	461a      	mov	r2, r3
 80086c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	3301      	adds	r3, #1
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f47f af62 	bne.w	80085a4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f00b faf3 	bl	8013cd0 <USB_ReadInterrupts>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086f4:	f040 80db 	bne.w	80088ae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f00b fb14 	bl	8013d2a <USB_ReadDevAllInEpInterrupt>
 8008702:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008708:	e0cd      	b.n	80088a6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80c2 	beq.w	800889a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	4611      	mov	r1, r2
 8008720:	4618      	mov	r0, r3
 8008722:	f00b fb3a 	bl	8013d9a <USB_ReadDevInEPInterrupt>
 8008726:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d057      	beq.n	80087e2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	2201      	movs	r2, #1
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
 800873e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	43db      	mvns	r3, r3
 800874c:	69f9      	ldr	r1, [r7, #28]
 800874e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008752:	4013      	ands	r3, r2
 8008754:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008762:	461a      	mov	r2, r3
 8008764:	2301      	movs	r3, #1
 8008766:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d132      	bne.n	80087d6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008774:	4613      	mov	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	3348      	adds	r3, #72	; 0x48
 8008780:	6819      	ldr	r1, [r3, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	4613      	mov	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4403      	add	r3, r0
 8008790:	3344      	adds	r3, #68	; 0x44
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4419      	add	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4403      	add	r3, r0
 80087a4:	3348      	adds	r3, #72	; 0x48
 80087a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d113      	bne.n	80087d6 <HAL_PCD_IRQHandler+0x3a2>
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	4613      	mov	r3, r2
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	334c      	adds	r3, #76	; 0x4c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d108      	bne.n	80087d6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6818      	ldr	r0, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087ce:	461a      	mov	r2, r3
 80087d0:	2101      	movs	r1, #1
 80087d2:	f00b fb43 	bl	8013e5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f00e f8b6 	bl	801694e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d008      	beq.n	80087fe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f8:	461a      	mov	r2, r3
 80087fa:	2308      	movs	r3, #8
 80087fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	461a      	mov	r2, r3
 8008816:	2310      	movs	r3, #16
 8008818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b00      	cmp	r3, #0
 8008822:	d008      	beq.n	8008836 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	461a      	mov	r2, r3
 8008832:	2340      	movs	r3, #64	; 0x40
 8008834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d023      	beq.n	8008888 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008842:	6a38      	ldr	r0, [r7, #32]
 8008844:	f00a fb22 	bl	8012e8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884a:	4613      	mov	r3, r2
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	3338      	adds	r3, #56	; 0x38
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	4413      	add	r3, r2
 8008858:	3304      	adds	r3, #4
 800885a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	78db      	ldrb	r3, [r3, #3]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d108      	bne.n	8008876 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2200      	movs	r2, #0
 8008868:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	b2db      	uxtb	r3, r3
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f00e f903 	bl	8016a7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008882:	461a      	mov	r2, r3
 8008884:	2302      	movs	r3, #2
 8008886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fcea 	bl	800926e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	3301      	adds	r3, #1
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f47f af2e 	bne.w	800870a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f00b fa0c 	bl	8013cd0 <USB_ReadInterrupts>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c2:	d122      	bne.n	800890a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088d2:	f023 0301 	bic.w	r3, r3, #1
 80088d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d108      	bne.n	80088f4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80088ea:	2100      	movs	r1, #0
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fef5 	bl	80096dc <HAL_PCDEx_LPM_Callback>
 80088f2:	e002      	b.n	80088fa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f00e f8a1 	bl	8016a3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	695a      	ldr	r2, [r3, #20]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f00b f9de 	bl	8013cd0 <USB_ReadInterrupts>
 8008914:	4603      	mov	r3, r0
 8008916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800891a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800891e:	d112      	bne.n	8008946 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b01      	cmp	r3, #1
 800892e:	d102      	bne.n	8008936 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f00e f85d 	bl	80169f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	695a      	ldr	r2, [r3, #20]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008944:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f00b f9c0 	bl	8013cd0 <USB_ReadInterrupts>
 8008950:	4603      	mov	r3, r0
 8008952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800895a:	d121      	bne.n	80089a0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695a      	ldr	r2, [r3, #20]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800896a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d111      	bne.n	800899a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008984:	089b      	lsrs	r3, r3, #2
 8008986:	f003 020f 	and.w	r2, r3, #15
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008990:	2101      	movs	r1, #1
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fea2 	bl	80096dc <HAL_PCDEx_LPM_Callback>
 8008998:	e002      	b.n	80089a0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f00e f828 	bl	80169f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f00b f993 	bl	8013cd0 <USB_ReadInterrupts>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b4:	f040 80b7 	bne.w	8008b26 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2110      	movs	r1, #16
 80089d2:	4618      	mov	r0, r3
 80089d4:	f00a fa5a 	bl	8012e8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089dc:	e046      	b.n	8008a6c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	461a      	mov	r2, r3
 80089ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a36:	0151      	lsls	r1, r2, #5
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	440a      	add	r2, r1
 8008a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	015a      	lsls	r2, r3, #5
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a56:	0151      	lsls	r1, r2, #5
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	440a      	add	r2, r1
 8008a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	3301      	adds	r3, #1
 8008a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d3b3      	bcc.n	80089de <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	69fa      	ldr	r2, [r7, #28]
 8008a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008a88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d016      	beq.n	8008ac0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aa2:	f043 030b 	orr.w	r3, r3, #11
 8008aa6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab8:	f043 030b 	orr.w	r3, r3, #11
 8008abc:	6453      	str	r3, [r2, #68]	; 0x44
 8008abe:	e015      	b.n	8008aec <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ace:	4619      	mov	r1, r3
 8008ad0:	f242 032b 	movw	r3, #8235	; 0x202b
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ae6:	f043 030b 	orr.w	r3, r3, #11
 8008aea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008afe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b10:	461a      	mov	r2, r3
 8008b12:	f00b f9a3 	bl	8013e5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695a      	ldr	r2, [r3, #20]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f00b f8d0 	bl	8013cd0 <USB_ReadInterrupts>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b3a:	d124      	bne.n	8008b86 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f00b f967 	bl	8013e14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f00a fa1b 	bl	8012f86 <USB_GetDevSpeed>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681c      	ldr	r4, [r3, #0]
 8008b5c:	f001 fd88 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 8008b60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f009 ff20 	bl	80129b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f00d ff14 	bl	801699e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695a      	ldr	r2, [r3, #20]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f00b f8a0 	bl	8013cd0 <USB_ReadInterrupts>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	d10a      	bne.n	8008bb0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f00d fef1 	bl	8016982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	695a      	ldr	r2, [r3, #20]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f002 0208 	and.w	r2, r2, #8
 8008bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f00b f88b 	bl	8013cd0 <USB_ReadInterrupts>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc0:	2b80      	cmp	r3, #128	; 0x80
 8008bc2:	d122      	bne.n	8008c0a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd4:	e014      	b.n	8008c00 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	4613      	mov	r3, r2
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d105      	bne.n	8008bfa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fb09 	bl	800920c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d3e5      	bcc.n	8008bd6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f00b f85e 	bl	8013cd0 <USB_ReadInterrupts>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1e:	d13b      	bne.n	8008c98 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c20:	2301      	movs	r3, #1
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
 8008c24:	e02b      	b.n	8008c7e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	3340      	adds	r3, #64	; 0x40
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d115      	bne.n	8008c78 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008c4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	da12      	bge.n	8008c78 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c56:	4613      	mov	r3, r2
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	333f      	adds	r3, #63	; 0x3f
 8008c62:	2201      	movs	r2, #1
 8008c64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 faca 	bl	800920c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d3ce      	bcc.n	8008c26 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695a      	ldr	r2, [r3, #20]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f00b f817 	bl	8013cd0 <USB_ReadInterrupts>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cac:	d155      	bne.n	8008d5a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cae:	2301      	movs	r3, #1
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb2:	e045      	b.n	8008d40 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d12e      	bne.n	8008d3a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008cdc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da2b      	bge.n	8008d3a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008cee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d121      	bne.n	8008d3a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	440b      	add	r3, r1
 8008d04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d08:	2201      	movs	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d36:	6053      	str	r3, [r2, #4]
            break;
 8008d38:	e007      	b.n	8008d4a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d3b4      	bcc.n	8008cb4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	695a      	ldr	r2, [r3, #20]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f00a ffb6 	bl	8013cd0 <USB_ReadInterrupts>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6e:	d10a      	bne.n	8008d86 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f00d fe95 	bl	8016aa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695a      	ldr	r2, [r3, #20]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f00a ffa0 	bl	8013cd0 <USB_ReadInterrupts>
 8008d90:	4603      	mov	r3, r0
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d115      	bne.n	8008dc6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f00d fe85 	bl	8016abc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6859      	ldr	r1, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	e000      	b.n	8008dc6 <HAL_PCD_IRQHandler+0x992>
      return;
 8008dc4:	bf00      	nop
    }
  }
}
 8008dc6:	3734      	adds	r7, #52	; 0x34
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd90      	pop	{r4, r7, pc}

08008dcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_PCD_SetAddress+0x1a>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e013      	b.n	8008e0e <HAL_PCD_SetAddress+0x42>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	78fa      	ldrb	r2, [r7, #3]
 8008df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f00a fefe 	bl	8013c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	461a      	mov	r2, r3
 8008e24:	4603      	mov	r3, r0
 8008e26:	70fb      	strb	r3, [r7, #3]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	803b      	strh	r3, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da0f      	bge.n	8008e5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	f003 020f 	and.w	r2, r3, #15
 8008e42:	4613      	mov	r3, r2
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	3338      	adds	r3, #56	; 0x38
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4413      	add	r3, r2
 8008e50:	3304      	adds	r3, #4
 8008e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	705a      	strb	r2, [r3, #1]
 8008e5a:	e00f      	b.n	8008e7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	f003 020f 	and.w	r2, r3, #15
 8008e62:	4613      	mov	r3, r2
 8008e64:	00db      	lsls	r3, r3, #3
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	3304      	adds	r3, #4
 8008e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008e88:	883a      	ldrh	r2, [r7, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	78ba      	ldrb	r2, [r7, #2]
 8008e92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008ea6:	78bb      	ldrb	r3, [r7, #2]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d102      	bne.n	8008eb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <HAL_PCD_EP_Open+0xaa>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e00e      	b.n	8008ede <HAL_PCD_EP_Open+0xc8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68f9      	ldr	r1, [r7, #12]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f00a f87e 	bl	8012fd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008edc:	7afb      	ldrb	r3, [r7, #11]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da0f      	bge.n	8008f1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	f003 020f 	and.w	r2, r3, #15
 8008f00:	4613      	mov	r3, r2
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	4413      	add	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	3338      	adds	r3, #56	; 0x38
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3304      	adds	r3, #4
 8008f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	705a      	strb	r2, [r3, #1]
 8008f18:	e00f      	b.n	8008f3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	f003 020f 	and.w	r2, r3, #15
 8008f20:	4613      	mov	r3, r2
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	3304      	adds	r3, #4
 8008f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_PCD_EP_Close+0x6e>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e00e      	b.n	8008f72 <HAL_PCD_EP_Close+0x8c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68f9      	ldr	r1, [r7, #12]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f00a f8bc 	bl	80130e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b086      	sub	sp, #24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
 8008f86:	460b      	mov	r3, r1
 8008f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f8a:	7afb      	ldrb	r3, [r7, #11]
 8008f8c:	f003 020f 	and.w	r2, r3, #15
 8008f90:	4613      	mov	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	f003 030f 	and.w	r3, r3, #15
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d102      	bne.n	8008fd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6979      	ldr	r1, [r7, #20]
 8008fe4:	f00a f958 	bl	8013298 <USB_EPStartXfer>

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	f003 020f 	and.w	r2, r3, #15
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009014:	681b      	ldr	r3, [r3, #0]
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b086      	sub	sp, #24
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	460b      	mov	r3, r1
 8009030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	f003 020f 	and.w	r2, r3, #15
 8009038:	4613      	mov	r3, r2
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	3338      	adds	r3, #56	; 0x38
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4413      	add	r3, r2
 8009046:	3304      	adds	r3, #4
 8009048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2200      	movs	r2, #0
 800905a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	2201      	movs	r2, #1
 8009060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009062:	7afb      	ldrb	r3, [r7, #11]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	b2da      	uxtb	r2, r3
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d102      	bne.n	800907c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	461a      	mov	r2, r3
 8009088:	6979      	ldr	r1, [r7, #20]
 800908a:	f00a f905 	bl	8013298 <USB_EPStartXfer>

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	f003 020f 	and.w	r2, r3, #15
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d901      	bls.n	80090b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e050      	b.n	8009158 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80090b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da0f      	bge.n	80090de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	3338      	adds	r3, #56	; 0x38
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4413      	add	r3, r2
 80090d2:	3304      	adds	r3, #4
 80090d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	705a      	strb	r2, [r3, #1]
 80090dc:	e00d      	b.n	80090fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4613      	mov	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	4413      	add	r3, r2
 80090f0:	3304      	adds	r3, #4
 80090f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	f003 030f 	and.w	r3, r3, #15
 8009106:	b2da      	uxtb	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009112:	2b01      	cmp	r3, #1
 8009114:	d101      	bne.n	800911a <HAL_PCD_EP_SetStall+0x82>
 8009116:	2302      	movs	r3, #2
 8009118:	e01e      	b.n	8009158 <HAL_PCD_EP_SetStall+0xc0>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	4618      	mov	r0, r3
 800912a:	f00a fc95 	bl	8013a58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	b2d9      	uxtb	r1, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009148:	461a      	mov	r2, r3
 800914a:	f00a fe87 	bl	8013e5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	f003 020f 	and.w	r2, r3, #15
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d901      	bls.n	800917e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e042      	b.n	8009204 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800917e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da0f      	bge.n	80091a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	f003 020f 	and.w	r2, r3, #15
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	3338      	adds	r3, #56	; 0x38
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	3304      	adds	r3, #4
 800919c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	705a      	strb	r2, [r3, #1]
 80091a4:	e00f      	b.n	80091c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	f003 020f 	and.w	r2, r3, #15
 80091ac:	4613      	mov	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	4413      	add	r3, r2
 80091bc:	3304      	adds	r3, #4
 80091be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	f003 030f 	and.w	r3, r3, #15
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <HAL_PCD_EP_ClrStall+0x86>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e00e      	b.n	8009204 <HAL_PCD_EP_ClrStall+0xa4>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f00a fc9d 	bl	8013b34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800921c:	2b00      	cmp	r3, #0
 800921e:	da0c      	bge.n	800923a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	f003 020f 	and.w	r2, r3, #15
 8009226:	4613      	mov	r3, r2
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	3338      	adds	r3, #56	; 0x38
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
 8009234:	3304      	adds	r3, #4
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	e00c      	b.n	8009254 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	f003 020f 	and.w	r2, r3, #15
 8009240:	4613      	mov	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	4413      	add	r3, r2
 8009250:	3304      	adds	r3, #4
 8009252:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68f9      	ldr	r1, [r7, #12]
 800925a:	4618      	mov	r0, r3
 800925c:	f00a fabc 	bl	80137d8 <USB_EPStopXfer>
 8009260:	4603      	mov	r3, r0
 8009262:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009264:	7afb      	ldrb	r3, [r7, #11]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b08a      	sub	sp, #40	; 0x28
 8009272:	af02      	add	r7, sp, #8
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	3338      	adds	r3, #56	; 0x38
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	4413      	add	r3, r2
 8009292:	3304      	adds	r3, #4
 8009294:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	695a      	ldr	r2, [r3, #20]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d901      	bls.n	80092a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e06c      	b.n	8009380 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	691a      	ldr	r2, [r3, #16]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d902      	bls.n	80092c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	3303      	adds	r3, #3
 80092c6:	089b      	lsrs	r3, r3, #2
 80092c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092ca:	e02b      	b.n	8009324 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d902      	bls.n	80092e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	3303      	adds	r3, #3
 80092ec:	089b      	lsrs	r3, r3, #2
 80092ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68d9      	ldr	r1, [r3, #12]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009300:	b2db      	uxtb	r3, r3
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	4603      	mov	r3, r0
 8009306:	6978      	ldr	r0, [r7, #20]
 8009308:	f00a fb10 	bl	801392c <USB_WritePacket>

    ep->xfer_buff  += len;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	441a      	add	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	441a      	add	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	b29b      	uxth	r3, r3
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	429a      	cmp	r2, r3
 8009338:	d809      	bhi.n	800934e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009342:	429a      	cmp	r2, r3
 8009344:	d203      	bcs.n	800934e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1be      	bne.n	80092cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	691a      	ldr	r2, [r3, #16]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	429a      	cmp	r2, r3
 8009358:	d811      	bhi.n	800937e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	2201      	movs	r2, #1
 8009362:	fa02 f303 	lsl.w	r3, r2, r3
 8009366:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	43db      	mvns	r3, r3
 8009374:	6939      	ldr	r1, [r7, #16]
 8009376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800937a:	4013      	ands	r3, r2
 800937c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	333c      	adds	r3, #60	; 0x3c
 80093a0:	3304      	adds	r3, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d17b      	bne.n	80094b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d015      	beq.n	80093f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	4a61      	ldr	r2, [pc, #388]	; (8009550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	f240 80b9 	bls.w	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 80b3 	beq.w	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ea:	461a      	mov	r2, r3
 80093ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f0:	6093      	str	r3, [r2, #8]
 80093f2:	e0a7      	b.n	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d009      	beq.n	8009412 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940a:	461a      	mov	r2, r3
 800940c:	2320      	movs	r3, #32
 800940e:	6093      	str	r3, [r2, #8]
 8009410:	e098      	b.n	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009418:	2b00      	cmp	r3, #0
 800941a:	f040 8093 	bne.w	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	4a4b      	ldr	r2, [pc, #300]	; (8009550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d90f      	bls.n	8009446 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00a      	beq.n	8009446 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943c:	461a      	mov	r2, r3
 800943e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009442:	6093      	str	r3, [r2, #8]
 8009444:	e07e      	b.n	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	4613      	mov	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	4413      	add	r3, r2
 8009458:	3304      	adds	r3, #4
 800945a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6a1a      	ldr	r2, [r3, #32]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	0159      	lsls	r1, r3, #5
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	440b      	add	r3, r1
 8009468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009472:	1ad2      	subs	r2, r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d114      	bne.n	80094a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6818      	ldr	r0, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009490:	461a      	mov	r2, r3
 8009492:	2101      	movs	r1, #1
 8009494:	f00a fce2 	bl	8013e5c <USB_EP0_OutStart>
 8009498:	e006      	b.n	80094a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	441a      	add	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f00d fa32 	bl	8016918 <HAL_PCD_DataOutStageCallback>
 80094b4:	e046      	b.n	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	4a26      	ldr	r2, [pc, #152]	; (8009554 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d124      	bne.n	8009508 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00a      	beq.n	80094de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d4:	461a      	mov	r2, r3
 80094d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094da:	6093      	str	r3, [r2, #8]
 80094dc:	e032      	b.n	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f003 0320 	and.w	r3, r3, #32
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d008      	beq.n	80094fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	461a      	mov	r2, r3
 80094f6:	2320      	movs	r3, #32
 80094f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f00d fa09 	bl	8016918 <HAL_PCD_DataOutStageCallback>
 8009506:	e01d      	b.n	8009544 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d114      	bne.n	8009538 <PCD_EP_OutXfrComplete_int+0x1b0>
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	4613      	mov	r3, r2
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d108      	bne.n	8009538 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009530:	461a      	mov	r2, r3
 8009532:	2100      	movs	r1, #0
 8009534:	f00a fc92 	bl	8013e5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	b2db      	uxtb	r3, r3
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f00d f9ea 	bl	8016918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	4f54300a 	.word	0x4f54300a
 8009554:	4f54310a 	.word	0x4f54310a

08009558 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	333c      	adds	r3, #60	; 0x3c
 8009570:	3304      	adds	r3, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4a15      	ldr	r2, [pc, #84]	; (80095e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d90e      	bls.n	80095ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009594:	2b00      	cmp	r3, #0
 8009596:	d009      	beq.n	80095ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a4:	461a      	mov	r2, r3
 80095a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f00d f9a1 	bl	80168f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4a0a      	ldr	r2, [pc, #40]	; (80095e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d90c      	bls.n	80095d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d108      	bne.n	80095d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095cc:	461a      	mov	r2, r3
 80095ce:	2101      	movs	r1, #1
 80095d0:	f00a fc44 	bl	8013e5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	4f54300a 	.word	0x4f54300a

080095e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
 80095f0:	4613      	mov	r3, r2
 80095f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d107      	bne.n	8009612 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009602:	883b      	ldrh	r3, [r7, #0]
 8009604:	0419      	lsls	r1, r3, #16
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	430a      	orrs	r2, r1
 800960e:	629a      	str	r2, [r3, #40]	; 0x28
 8009610:	e028      	b.n	8009664 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	0c1b      	lsrs	r3, r3, #16
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	e00d      	b.n	8009642 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	3340      	adds	r3, #64	; 0x40
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	0c1b      	lsrs	r3, r3, #16
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	4413      	add	r3, r2
 800963a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	3301      	adds	r3, #1
 8009640:	73fb      	strb	r3, [r7, #15]
 8009642:	7bfa      	ldrb	r2, [r7, #15]
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	3b01      	subs	r3, #1
 8009648:	429a      	cmp	r2, r3
 800964a:	d3ec      	bcc.n	8009626 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800964c:	883b      	ldrh	r3, [r7, #0]
 800964e:	0418      	lsls	r0, r3, #16
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6819      	ldr	r1, [r3, #0]
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	3b01      	subs	r3, #1
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	4302      	orrs	r2, r0
 800965c:	3340      	adds	r3, #64	; 0x40
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	887a      	ldrh	r2, [r7, #2]
 8009684:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096c2:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	10000003 	.word	0x10000003

080096dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80096fc:	4b19      	ldr	r3, [pc, #100]	; (8009764 <HAL_PWREx_ConfigSupply+0x70>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b04      	cmp	r3, #4
 8009706:	d00a      	beq.n	800971e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009708:	4b16      	ldr	r3, [pc, #88]	; (8009764 <HAL_PWREx_ConfigSupply+0x70>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	f003 0307 	and.w	r3, r3, #7
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d001      	beq.n	800971a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e01f      	b.n	800975a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	e01d      	b.n	800975a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800971e:	4b11      	ldr	r3, [pc, #68]	; (8009764 <HAL_PWREx_ConfigSupply+0x70>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f023 0207 	bic.w	r2, r3, #7
 8009726:	490f      	ldr	r1, [pc, #60]	; (8009764 <HAL_PWREx_ConfigSupply+0x70>)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4313      	orrs	r3, r2
 800972c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800972e:	f7fa f927 	bl	8003980 <HAL_GetTick>
 8009732:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009734:	e009      	b.n	800974a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009736:	f7fa f923 	bl	8003980 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009744:	d901      	bls.n	800974a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e007      	b.n	800975a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800974a:	4b06      	ldr	r3, [pc, #24]	; (8009764 <HAL_PWREx_ConfigSupply+0x70>)
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009756:	d1ee      	bne.n	8009736 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	58024800 	.word	0x58024800

08009768 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	4a04      	ldr	r2, [pc, #16]	; (8009784 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009776:	60d3      	str	r3, [r2, #12]
}
 8009778:	bf00      	nop
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	58024800 	.word	0x58024800

08009788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08c      	sub	sp, #48	; 0x30
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e3c8      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8087 	beq.w	80098b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097a8:	4b88      	ldr	r3, [pc, #544]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097b2:	4b86      	ldr	r3, [pc, #536]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80097b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	2b10      	cmp	r3, #16
 80097bc:	d007      	beq.n	80097ce <HAL_RCC_OscConfig+0x46>
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	2b18      	cmp	r3, #24
 80097c2:	d110      	bne.n	80097e6 <HAL_RCC_OscConfig+0x5e>
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d10b      	bne.n	80097e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097ce:	4b7f      	ldr	r3, [pc, #508]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d06c      	beq.n	80098b4 <HAL_RCC_OscConfig+0x12c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d168      	bne.n	80098b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e3a2      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ee:	d106      	bne.n	80097fe <HAL_RCC_OscConfig+0x76>
 80097f0:	4b76      	ldr	r3, [pc, #472]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a75      	ldr	r2, [pc, #468]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80097f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	e02e      	b.n	800985c <HAL_RCC_OscConfig+0xd4>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10c      	bne.n	8009820 <HAL_RCC_OscConfig+0x98>
 8009806:	4b71      	ldr	r3, [pc, #452]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a70      	ldr	r2, [pc, #448]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 800980c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	4b6e      	ldr	r3, [pc, #440]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a6d      	ldr	r2, [pc, #436]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	e01d      	b.n	800985c <HAL_RCC_OscConfig+0xd4>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009828:	d10c      	bne.n	8009844 <HAL_RCC_OscConfig+0xbc>
 800982a:	4b68      	ldr	r3, [pc, #416]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a67      	ldr	r2, [pc, #412]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	4b65      	ldr	r3, [pc, #404]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a64      	ldr	r2, [pc, #400]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 800983c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	e00b      	b.n	800985c <HAL_RCC_OscConfig+0xd4>
 8009844:	4b61      	ldr	r3, [pc, #388]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a60      	ldr	r2, [pc, #384]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 800984a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	4b5e      	ldr	r3, [pc, #376]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a5d      	ldr	r2, [pc, #372]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800985a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d013      	beq.n	800988c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009864:	f7fa f88c 	bl	8003980 <HAL_GetTick>
 8009868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800986a:	e008      	b.n	800987e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800986c:	f7fa f888 	bl	8003980 <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b64      	cmp	r3, #100	; 0x64
 8009878:	d901      	bls.n	800987e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e356      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800987e:	4b53      	ldr	r3, [pc, #332]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0f0      	beq.n	800986c <HAL_RCC_OscConfig+0xe4>
 800988a:	e014      	b.n	80098b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988c:	f7fa f878 	bl	8003980 <HAL_GetTick>
 8009890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009892:	e008      	b.n	80098a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009894:	f7fa f874 	bl	8003980 <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b64      	cmp	r3, #100	; 0x64
 80098a0:	d901      	bls.n	80098a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e342      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098a6:	4b49      	ldr	r3, [pc, #292]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f0      	bne.n	8009894 <HAL_RCC_OscConfig+0x10c>
 80098b2:	e000      	b.n	80098b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 808c 	beq.w	80099dc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098c4:	4b41      	ldr	r3, [pc, #260]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098ce:	4b3f      	ldr	r3, [pc, #252]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80098d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d007      	beq.n	80098ea <HAL_RCC_OscConfig+0x162>
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	2b18      	cmp	r3, #24
 80098de:	d137      	bne.n	8009950 <HAL_RCC_OscConfig+0x1c8>
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d132      	bne.n	8009950 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098ea:	4b38      	ldr	r3, [pc, #224]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <HAL_RCC_OscConfig+0x17a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e314      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009902:	4b32      	ldr	r3, [pc, #200]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f023 0219 	bic.w	r2, r3, #25
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	492f      	ldr	r1, [pc, #188]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009910:	4313      	orrs	r3, r2
 8009912:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009914:	f7fa f834 	bl	8003980 <HAL_GetTick>
 8009918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800991a:	e008      	b.n	800992e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800991c:	f7fa f830 	bl	8003980 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	2b02      	cmp	r3, #2
 8009928:	d901      	bls.n	800992e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e2fe      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800992e:	4b27      	ldr	r3, [pc, #156]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0304 	and.w	r3, r3, #4
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0f0      	beq.n	800991c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800993a:	4b24      	ldr	r3, [pc, #144]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	061b      	lsls	r3, r3, #24
 8009948:	4920      	ldr	r1, [pc, #128]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 800994a:	4313      	orrs	r3, r2
 800994c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800994e:	e045      	b.n	80099dc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d026      	beq.n	80099a6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009958:	4b1c      	ldr	r3, [pc, #112]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f023 0219 	bic.w	r2, r3, #25
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	4919      	ldr	r1, [pc, #100]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009966:	4313      	orrs	r3, r2
 8009968:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800996a:	f7fa f809 	bl	8003980 <HAL_GetTick>
 800996e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009970:	e008      	b.n	8009984 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009972:	f7fa f805 	bl	8003980 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b02      	cmp	r3, #2
 800997e:	d901      	bls.n	8009984 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e2d3      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009984:	4b11      	ldr	r3, [pc, #68]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0304 	and.w	r3, r3, #4
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0f0      	beq.n	8009972 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	061b      	lsls	r3, r3, #24
 800999e:	490b      	ldr	r1, [pc, #44]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	604b      	str	r3, [r1, #4]
 80099a4:	e01a      	b.n	80099dc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099a6:	4b09      	ldr	r3, [pc, #36]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a08      	ldr	r2, [pc, #32]	; (80099cc <HAL_RCC_OscConfig+0x244>)
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b2:	f7f9 ffe5 	bl	8003980 <HAL_GetTick>
 80099b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099b8:	e00a      	b.n	80099d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ba:	f7f9 ffe1 	bl	8003980 <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d903      	bls.n	80099d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e2af      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
 80099cc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099d0:	4b96      	ldr	r3, [pc, #600]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1ee      	bne.n	80099ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d06a      	beq.n	8009abe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099e8:	4b90      	ldr	r3, [pc, #576]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099f2:	4b8e      	ldr	r3, [pc, #568]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 80099f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	d007      	beq.n	8009a0e <HAL_RCC_OscConfig+0x286>
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b18      	cmp	r3, #24
 8009a02:	d11b      	bne.n	8009a3c <HAL_RCC_OscConfig+0x2b4>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d116      	bne.n	8009a3c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a0e:	4b87      	ldr	r3, [pc, #540]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d005      	beq.n	8009a26 <HAL_RCC_OscConfig+0x29e>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	2b80      	cmp	r3, #128	; 0x80
 8009a20:	d001      	beq.n	8009a26 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e282      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a26:	4b81      	ldr	r3, [pc, #516]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	061b      	lsls	r3, r3, #24
 8009a34:	497d      	ldr	r1, [pc, #500]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a3a:	e040      	b.n	8009abe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d023      	beq.n	8009a8c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a44:	4b79      	ldr	r3, [pc, #484]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a78      	ldr	r2, [pc, #480]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a50:	f7f9 ff96 	bl	8003980 <HAL_GetTick>
 8009a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a56:	e008      	b.n	8009a6a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a58:	f7f9 ff92 	bl	8003980 <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e260      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a6a:	4b70      	ldr	r3, [pc, #448]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0f0      	beq.n	8009a58 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a76:	4b6d      	ldr	r3, [pc, #436]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	061b      	lsls	r3, r3, #24
 8009a84:	4969      	ldr	r1, [pc, #420]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	60cb      	str	r3, [r1, #12]
 8009a8a:	e018      	b.n	8009abe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a8c:	4b67      	ldr	r3, [pc, #412]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a66      	ldr	r2, [pc, #408]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a98:	f7f9 ff72 	bl	8003980 <HAL_GetTick>
 8009a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009aa0:	f7f9 ff6e 	bl	8003980 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e23c      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ab2:	4b5e      	ldr	r3, [pc, #376]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f0      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0308 	and.w	r3, r3, #8
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d036      	beq.n	8009b38 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d019      	beq.n	8009b06 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ad2:	4b56      	ldr	r3, [pc, #344]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad6:	4a55      	ldr	r2, [pc, #340]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009ad8:	f043 0301 	orr.w	r3, r3, #1
 8009adc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ade:	f7f9 ff4f 	bl	8003980 <HAL_GetTick>
 8009ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ae4:	e008      	b.n	8009af8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ae6:	f7f9 ff4b 	bl	8003980 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e219      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009af8:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009afc:	f003 0302 	and.w	r3, r3, #2
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f0      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x35e>
 8009b04:	e018      	b.n	8009b38 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b06:	4b49      	ldr	r3, [pc, #292]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b0a:	4a48      	ldr	r2, [pc, #288]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b0c:	f023 0301 	bic.w	r3, r3, #1
 8009b10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b12:	f7f9 ff35 	bl	8003980 <HAL_GetTick>
 8009b16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b18:	e008      	b.n	8009b2c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b1a:	f7f9 ff31 	bl	8003980 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d901      	bls.n	8009b2c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e1ff      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b2c:	4b3f      	ldr	r3, [pc, #252]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b30:	f003 0302 	and.w	r3, r3, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1f0      	bne.n	8009b1a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0320 	and.w	r3, r3, #32
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d036      	beq.n	8009bb2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d019      	beq.n	8009b80 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b4c:	4b37      	ldr	r3, [pc, #220]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a36      	ldr	r2, [pc, #216]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b58:	f7f9 ff12 	bl	8003980 <HAL_GetTick>
 8009b5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b60:	f7f9 ff0e 	bl	8003980 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e1dc      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b72:	4b2e      	ldr	r3, [pc, #184]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0f0      	beq.n	8009b60 <HAL_RCC_OscConfig+0x3d8>
 8009b7e:	e018      	b.n	8009bb2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b80:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a29      	ldr	r2, [pc, #164]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b8c:	f7f9 fef8 	bl	8003980 <HAL_GetTick>
 8009b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b94:	f7f9 fef4 	bl	8003980 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e1c2      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ba6:	4b21      	ldr	r3, [pc, #132]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1f0      	bne.n	8009b94 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0304 	and.w	r3, r3, #4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 8086 	beq.w	8009ccc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bc0:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <HAL_RCC_OscConfig+0x4a8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a1a      	ldr	r2, [pc, #104]	; (8009c30 <HAL_RCC_OscConfig+0x4a8>)
 8009bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bcc:	f7f9 fed8 	bl	8003980 <HAL_GetTick>
 8009bd0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bd4:	f7f9 fed4 	bl	8003980 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b64      	cmp	r3, #100	; 0x64
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e1a2      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009be6:	4b12      	ldr	r3, [pc, #72]	; (8009c30 <HAL_RCC_OscConfig+0x4a8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0f0      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d106      	bne.n	8009c08 <HAL_RCC_OscConfig+0x480>
 8009bfa:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfe:	4a0b      	ldr	r2, [pc, #44]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009c00:	f043 0301 	orr.w	r3, r3, #1
 8009c04:	6713      	str	r3, [r2, #112]	; 0x70
 8009c06:	e032      	b.n	8009c6e <HAL_RCC_OscConfig+0x4e6>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d111      	bne.n	8009c34 <HAL_RCC_OscConfig+0x4ac>
 8009c10:	4b06      	ldr	r3, [pc, #24]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c14:	4a05      	ldr	r2, [pc, #20]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009c16:	f023 0301 	bic.w	r3, r3, #1
 8009c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c1c:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c20:	4a02      	ldr	r2, [pc, #8]	; (8009c2c <HAL_RCC_OscConfig+0x4a4>)
 8009c22:	f023 0304 	bic.w	r3, r3, #4
 8009c26:	6713      	str	r3, [r2, #112]	; 0x70
 8009c28:	e021      	b.n	8009c6e <HAL_RCC_OscConfig+0x4e6>
 8009c2a:	bf00      	nop
 8009c2c:	58024400 	.word	0x58024400
 8009c30:	58024800 	.word	0x58024800
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	2b05      	cmp	r3, #5
 8009c3a:	d10c      	bne.n	8009c56 <HAL_RCC_OscConfig+0x4ce>
 8009c3c:	4b83      	ldr	r3, [pc, #524]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c40:	4a82      	ldr	r2, [pc, #520]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c42:	f043 0304 	orr.w	r3, r3, #4
 8009c46:	6713      	str	r3, [r2, #112]	; 0x70
 8009c48:	4b80      	ldr	r3, [pc, #512]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4c:	4a7f      	ldr	r2, [pc, #508]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c4e:	f043 0301 	orr.w	r3, r3, #1
 8009c52:	6713      	str	r3, [r2, #112]	; 0x70
 8009c54:	e00b      	b.n	8009c6e <HAL_RCC_OscConfig+0x4e6>
 8009c56:	4b7d      	ldr	r3, [pc, #500]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5a:	4a7c      	ldr	r2, [pc, #496]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c5c:	f023 0301 	bic.w	r3, r3, #1
 8009c60:	6713      	str	r3, [r2, #112]	; 0x70
 8009c62:	4b7a      	ldr	r3, [pc, #488]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c66:	4a79      	ldr	r2, [pc, #484]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c68:	f023 0304 	bic.w	r3, r3, #4
 8009c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d015      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c76:	f7f9 fe83 	bl	8003980 <HAL_GetTick>
 8009c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c7c:	e00a      	b.n	8009c94 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c7e:	f7f9 fe7f 	bl	8003980 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d901      	bls.n	8009c94 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e14b      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c94:	4b6d      	ldr	r3, [pc, #436]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0ee      	beq.n	8009c7e <HAL_RCC_OscConfig+0x4f6>
 8009ca0:	e014      	b.n	8009ccc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ca2:	f7f9 fe6d 	bl	8003980 <HAL_GetTick>
 8009ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ca8:	e00a      	b.n	8009cc0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009caa:	f7f9 fe69 	bl	8003980 <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d901      	bls.n	8009cc0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e135      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cc0:	4b62      	ldr	r3, [pc, #392]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1ee      	bne.n	8009caa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 812a 	beq.w	8009f2a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009cd6:	4b5d      	ldr	r3, [pc, #372]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cde:	2b18      	cmp	r3, #24
 8009ce0:	f000 80ba 	beq.w	8009e58 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	f040 8095 	bne.w	8009e18 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cee:	4b57      	ldr	r3, [pc, #348]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a56      	ldr	r2, [pc, #344]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cfa:	f7f9 fe41 	bl	8003980 <HAL_GetTick>
 8009cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d00:	e008      	b.n	8009d14 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d02:	f7f9 fe3d 	bl	8003980 <HAL_GetTick>
 8009d06:	4602      	mov	r2, r0
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d901      	bls.n	8009d14 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e10b      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d14:	4b4d      	ldr	r3, [pc, #308]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1f0      	bne.n	8009d02 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d20:	4b4a      	ldr	r3, [pc, #296]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d24:	4b4a      	ldr	r3, [pc, #296]	; (8009e50 <HAL_RCC_OscConfig+0x6c8>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d30:	0112      	lsls	r2, r2, #4
 8009d32:	430a      	orrs	r2, r1
 8009d34:	4945      	ldr	r1, [pc, #276]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	628b      	str	r3, [r1, #40]	; 0x28
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	025b      	lsls	r3, r3, #9
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d54:	3b01      	subs	r3, #1
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d62:	3b01      	subs	r3, #1
 8009d64:	061b      	lsls	r3, r3, #24
 8009d66:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d6a:	4938      	ldr	r1, [pc, #224]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d70:	4b36      	ldr	r3, [pc, #216]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	4a35      	ldr	r2, [pc, #212]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d76:	f023 0301 	bic.w	r3, r3, #1
 8009d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d7c:	4b33      	ldr	r3, [pc, #204]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d80:	4b34      	ldr	r3, [pc, #208]	; (8009e54 <HAL_RCC_OscConfig+0x6cc>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d88:	00d2      	lsls	r2, r2, #3
 8009d8a:	4930      	ldr	r1, [pc, #192]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d90:	4b2e      	ldr	r3, [pc, #184]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d94:	f023 020c 	bic.w	r2, r3, #12
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	492b      	ldr	r1, [pc, #172]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009da2:	4b2a      	ldr	r3, [pc, #168]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	f023 0202 	bic.w	r2, r3, #2
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dae:	4927      	ldr	r1, [pc, #156]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009db4:	4b25      	ldr	r3, [pc, #148]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	4a24      	ldr	r2, [pc, #144]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc0:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	4a21      	ldr	r2, [pc, #132]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009dcc:	4b1f      	ldr	r3, [pc, #124]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	4a1e      	ldr	r2, [pc, #120]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009dd8:	4b1c      	ldr	r3, [pc, #112]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	4a1b      	ldr	r2, [pc, #108]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dde:	f043 0301 	orr.w	r3, r3, #1
 8009de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009de4:	4b19      	ldr	r3, [pc, #100]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a18      	ldr	r2, [pc, #96]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df0:	f7f9 fdc6 	bl	8003980 <HAL_GetTick>
 8009df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009df6:	e008      	b.n	8009e0a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009df8:	f7f9 fdc2 	bl	8003980 <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d901      	bls.n	8009e0a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e090      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e0a:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0f0      	beq.n	8009df8 <HAL_RCC_OscConfig+0x670>
 8009e16:	e088      	b.n	8009f2a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e18:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a0b      	ldr	r2, [pc, #44]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e24:	f7f9 fdac 	bl	8003980 <HAL_GetTick>
 8009e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e2a:	e008      	b.n	8009e3e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e2c:	f7f9 fda8 	bl	8003980 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d901      	bls.n	8009e3e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e076      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e3e:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <HAL_RCC_OscConfig+0x6c4>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1f0      	bne.n	8009e2c <HAL_RCC_OscConfig+0x6a4>
 8009e4a:	e06e      	b.n	8009f2a <HAL_RCC_OscConfig+0x7a2>
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	fffffc0c 	.word	0xfffffc0c
 8009e54:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e58:	4b36      	ldr	r3, [pc, #216]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e5e:	4b35      	ldr	r3, [pc, #212]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d031      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f003 0203 	and.w	r2, r3, #3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d12a      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	091b      	lsrs	r3, r3, #4
 8009e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d122      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d11a      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	0a5b      	lsrs	r3, r3, #9
 8009e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d111      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	0c1b      	lsrs	r3, r3, #16
 8009eb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d108      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	0e1b      	lsrs	r3, r3, #24
 8009ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d001      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e02b      	b.n	8009f2c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009ed4:	4b17      	ldr	r3, [pc, #92]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed8:	08db      	lsrs	r3, r3, #3
 8009eda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ede:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d01f      	beq.n	8009f2a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009eea:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	4a11      	ldr	r2, [pc, #68]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009ef0:	f023 0301 	bic.w	r3, r3, #1
 8009ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ef6:	f7f9 fd43 	bl	8003980 <HAL_GetTick>
 8009efa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009efc:	bf00      	nop
 8009efe:	f7f9 fd3f 	bl	8003980 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d0f9      	beq.n	8009efe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f0a:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f0e:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <HAL_RCC_OscConfig+0x7b0>)
 8009f10:	4013      	ands	r3, r2
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f16:	00d2      	lsls	r2, r2, #3
 8009f18:	4906      	ldr	r1, [pc, #24]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f22:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <HAL_RCC_OscConfig+0x7ac>)
 8009f24:	f043 0301 	orr.w	r3, r3, #1
 8009f28:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3730      	adds	r7, #48	; 0x30
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	58024400 	.word	0x58024400
 8009f38:	ffff0007 	.word	0xffff0007

08009f3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e19c      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f50:	4b8a      	ldr	r3, [pc, #552]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d910      	bls.n	8009f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f5e:	4b87      	ldr	r3, [pc, #540]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f023 020f 	bic.w	r2, r3, #15
 8009f66:	4985      	ldr	r1, [pc, #532]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f6e:	4b83      	ldr	r3, [pc, #524]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 030f 	and.w	r3, r3, #15
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d001      	beq.n	8009f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e184      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d010      	beq.n	8009fae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	691a      	ldr	r2, [r3, #16]
 8009f90:	4b7b      	ldr	r3, [pc, #492]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d908      	bls.n	8009fae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f9c:	4b78      	ldr	r3, [pc, #480]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	4975      	ldr	r1, [pc, #468]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0308 	and.w	r3, r3, #8
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d010      	beq.n	8009fdc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	695a      	ldr	r2, [r3, #20]
 8009fbe:	4b70      	ldr	r3, [pc, #448]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d908      	bls.n	8009fdc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fca:	4b6d      	ldr	r3, [pc, #436]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	496a      	ldr	r1, [pc, #424]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0310 	and.w	r3, r3, #16
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d010      	beq.n	800a00a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	699a      	ldr	r2, [r3, #24]
 8009fec:	4b64      	ldr	r3, [pc, #400]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009fee:	69db      	ldr	r3, [r3, #28]
 8009ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d908      	bls.n	800a00a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ff8:	4b61      	ldr	r3, [pc, #388]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	495e      	ldr	r1, [pc, #376]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a006:	4313      	orrs	r3, r2
 800a008:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d010      	beq.n	800a038 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69da      	ldr	r2, [r3, #28]
 800a01a:	4b59      	ldr	r3, [pc, #356]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a022:	429a      	cmp	r2, r3
 800a024:	d908      	bls.n	800a038 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a026:	4b56      	ldr	r3, [pc, #344]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	4953      	ldr	r1, [pc, #332]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a034:	4313      	orrs	r3, r2
 800a036:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	4b4d      	ldr	r3, [pc, #308]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	f003 030f 	and.w	r3, r3, #15
 800a050:	429a      	cmp	r2, r3
 800a052:	d908      	bls.n	800a066 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a054:	4b4a      	ldr	r3, [pc, #296]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f023 020f 	bic.w	r2, r3, #15
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	4947      	ldr	r1, [pc, #284]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a062:	4313      	orrs	r3, r2
 800a064:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d055      	beq.n	800a11e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a072:	4b43      	ldr	r3, [pc, #268]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	4940      	ldr	r1, [pc, #256]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a080:	4313      	orrs	r3, r2
 800a082:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d107      	bne.n	800a09c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a08c:	4b3c      	ldr	r3, [pc, #240]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d121      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e0f6      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d107      	bne.n	800a0b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0a4:	4b36      	ldr	r3, [pc, #216]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d115      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0ea      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d107      	bne.n	800a0cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0bc:	4b30      	ldr	r3, [pc, #192]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d109      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e0de      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0cc:	4b2c      	ldr	r3, [pc, #176]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e0d6      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0dc:	4b28      	ldr	r3, [pc, #160]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f023 0207 	bic.w	r2, r3, #7
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	4925      	ldr	r1, [pc, #148]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ee:	f7f9 fc47 	bl	8003980 <HAL_GetTick>
 800a0f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0f4:	e00a      	b.n	800a10c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0f6:	f7f9 fc43 	bl	8003980 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	f241 3288 	movw	r2, #5000	; 0x1388
 800a104:	4293      	cmp	r3, r2
 800a106:	d901      	bls.n	800a10c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e0be      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a10c:	4b1c      	ldr	r3, [pc, #112]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	00db      	lsls	r3, r3, #3
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d1eb      	bne.n	800a0f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0302 	and.w	r3, r3, #2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d010      	beq.n	800a14c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	4b14      	ldr	r3, [pc, #80]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	f003 030f 	and.w	r3, r3, #15
 800a136:	429a      	cmp	r2, r3
 800a138:	d208      	bcs.n	800a14c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a13a:	4b11      	ldr	r3, [pc, #68]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	f023 020f 	bic.w	r2, r3, #15
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	490e      	ldr	r1, [pc, #56]	; (800a180 <HAL_RCC_ClockConfig+0x244>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a14c:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 030f 	and.w	r3, r3, #15
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d214      	bcs.n	800a184 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a15a:	4b08      	ldr	r3, [pc, #32]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f023 020f 	bic.w	r2, r3, #15
 800a162:	4906      	ldr	r1, [pc, #24]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	4313      	orrs	r3, r2
 800a168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a16a:	4b04      	ldr	r3, [pc, #16]	; (800a17c <HAL_RCC_ClockConfig+0x240>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d005      	beq.n	800a184 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e086      	b.n	800a28a <HAL_RCC_ClockConfig+0x34e>
 800a17c:	52002000 	.word	0x52002000
 800a180:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d010      	beq.n	800a1b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	4b3f      	ldr	r3, [pc, #252]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d208      	bcs.n	800a1b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1a0:	4b3c      	ldr	r3, [pc, #240]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	4939      	ldr	r1, [pc, #228]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d010      	beq.n	800a1e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695a      	ldr	r2, [r3, #20]
 800a1c2:	4b34      	ldr	r3, [pc, #208]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d208      	bcs.n	800a1e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1ce:	4b31      	ldr	r3, [pc, #196]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	492e      	ldr	r1, [pc, #184]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0310 	and.w	r3, r3, #16
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d010      	beq.n	800a20e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	4b28      	ldr	r3, [pc, #160]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d208      	bcs.n	800a20e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1fc:	4b25      	ldr	r3, [pc, #148]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	4922      	ldr	r1, [pc, #136]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d010      	beq.n	800a23c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	69da      	ldr	r2, [r3, #28]
 800a21e:	4b1d      	ldr	r3, [pc, #116]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a226:	429a      	cmp	r2, r3
 800a228:	d208      	bcs.n	800a23c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a22a:	4b1a      	ldr	r3, [pc, #104]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	4917      	ldr	r1, [pc, #92]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a23c:	f000 f89e 	bl	800a37c <HAL_RCC_GetSysClockFreq>
 800a240:	4602      	mov	r2, r0
 800a242:	4b14      	ldr	r3, [pc, #80]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	f003 030f 	and.w	r3, r3, #15
 800a24c:	4912      	ldr	r1, [pc, #72]	; (800a298 <HAL_RCC_ClockConfig+0x35c>)
 800a24e:	5ccb      	ldrb	r3, [r1, r3]
 800a250:	f003 031f 	and.w	r3, r3, #31
 800a254:	fa22 f303 	lsr.w	r3, r2, r3
 800a258:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a25a:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <HAL_RCC_ClockConfig+0x358>)
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	f003 030f 	and.w	r3, r3, #15
 800a262:	4a0d      	ldr	r2, [pc, #52]	; (800a298 <HAL_RCC_ClockConfig+0x35c>)
 800a264:	5cd3      	ldrb	r3, [r2, r3]
 800a266:	f003 031f 	and.w	r3, r3, #31
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	fa22 f303 	lsr.w	r3, r2, r3
 800a270:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <HAL_RCC_ClockConfig+0x360>)
 800a272:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a274:	4a0a      	ldr	r2, [pc, #40]	; (800a2a0 <HAL_RCC_ClockConfig+0x364>)
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a27a:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <HAL_RCC_ClockConfig+0x368>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f9 fb34 	bl	80038ec <HAL_InitTick>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	58024400 	.word	0x58024400
 800a298:	08017a54 	.word	0x08017a54
 800a29c:	24000004 	.word	0x24000004
 800a2a0:	24000000 	.word	0x24000000
 800a2a4:	24000008 	.word	0x24000008

0800a2a8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08c      	sub	sp, #48	; 0x30
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d12a      	bne.n	800a310 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a2ba:	4b2d      	ldr	r3, [pc, #180]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a2bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2c0:	4a2b      	ldr	r2, [pc, #172]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2ca:	4b29      	ldr	r3, [pc, #164]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a2cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a2d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a2ee:	f107 031c 	add.w	r3, r7, #28
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	481f      	ldr	r0, [pc, #124]	; (800a374 <HAL_RCC_MCOConfig+0xcc>)
 800a2f6:	f7fd fc43 	bl	8007b80 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a2fa:	4b1d      	ldr	r3, [pc, #116]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a302:	68b9      	ldr	r1, [r7, #8]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	430b      	orrs	r3, r1
 800a308:	4919      	ldr	r1, [pc, #100]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a30e:	e02a      	b.n	800a366 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a310:	4b17      	ldr	r3, [pc, #92]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a316:	4a16      	ldr	r2, [pc, #88]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a318:	f043 0304 	orr.w	r3, r3, #4
 800a31c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a320:	4b13      	ldr	r3, [pc, #76]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a32e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a334:	2302      	movs	r3, #2
 800a336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a338:	2303      	movs	r3, #3
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a340:	2300      	movs	r3, #0
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a344:	f107 031c 	add.w	r3, r7, #28
 800a348:	4619      	mov	r1, r3
 800a34a:	480b      	ldr	r0, [pc, #44]	; (800a378 <HAL_RCC_MCOConfig+0xd0>)
 800a34c:	f7fd fc18 	bl	8007b80 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	01d9      	lsls	r1, r3, #7
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	430b      	orrs	r3, r1
 800a360:	4903      	ldr	r1, [pc, #12]	; (800a370 <HAL_RCC_MCOConfig+0xc8>)
 800a362:	4313      	orrs	r3, r2
 800a364:	610b      	str	r3, [r1, #16]
}
 800a366:	bf00      	nop
 800a368:	3730      	adds	r7, #48	; 0x30
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	58024400 	.word	0x58024400
 800a374:	58020000 	.word	0x58020000
 800a378:	58020800 	.word	0x58020800

0800a37c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a382:	4bb3      	ldr	r3, [pc, #716]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a38a:	2b18      	cmp	r3, #24
 800a38c:	f200 8155 	bhi.w	800a63a <HAL_RCC_GetSysClockFreq+0x2be>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3fd 	.word	0x0800a3fd
 800a39c:	0800a63b 	.word	0x0800a63b
 800a3a0:	0800a63b 	.word	0x0800a63b
 800a3a4:	0800a63b 	.word	0x0800a63b
 800a3a8:	0800a63b 	.word	0x0800a63b
 800a3ac:	0800a63b 	.word	0x0800a63b
 800a3b0:	0800a63b 	.word	0x0800a63b
 800a3b4:	0800a63b 	.word	0x0800a63b
 800a3b8:	0800a423 	.word	0x0800a423
 800a3bc:	0800a63b 	.word	0x0800a63b
 800a3c0:	0800a63b 	.word	0x0800a63b
 800a3c4:	0800a63b 	.word	0x0800a63b
 800a3c8:	0800a63b 	.word	0x0800a63b
 800a3cc:	0800a63b 	.word	0x0800a63b
 800a3d0:	0800a63b 	.word	0x0800a63b
 800a3d4:	0800a63b 	.word	0x0800a63b
 800a3d8:	0800a429 	.word	0x0800a429
 800a3dc:	0800a63b 	.word	0x0800a63b
 800a3e0:	0800a63b 	.word	0x0800a63b
 800a3e4:	0800a63b 	.word	0x0800a63b
 800a3e8:	0800a63b 	.word	0x0800a63b
 800a3ec:	0800a63b 	.word	0x0800a63b
 800a3f0:	0800a63b 	.word	0x0800a63b
 800a3f4:	0800a63b 	.word	0x0800a63b
 800a3f8:	0800a42f 	.word	0x0800a42f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3fc:	4b94      	ldr	r3, [pc, #592]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0320 	and.w	r3, r3, #32
 800a404:	2b00      	cmp	r3, #0
 800a406:	d009      	beq.n	800a41c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a408:	4b91      	ldr	r3, [pc, #580]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	08db      	lsrs	r3, r3, #3
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	4a90      	ldr	r2, [pc, #576]	; (800a654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a414:	fa22 f303 	lsr.w	r3, r2, r3
 800a418:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a41a:	e111      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a41c:	4b8d      	ldr	r3, [pc, #564]	; (800a654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a41e:	61bb      	str	r3, [r7, #24]
      break;
 800a420:	e10e      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a422:	4b8d      	ldr	r3, [pc, #564]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a424:	61bb      	str	r3, [r7, #24]
      break;
 800a426:	e10b      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a428:	4b8c      	ldr	r3, [pc, #560]	; (800a65c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a42a:	61bb      	str	r3, [r7, #24]
      break;
 800a42c:	e108      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a42e:	4b88      	ldr	r3, [pc, #544]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a438:	4b85      	ldr	r3, [pc, #532]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43c:	091b      	lsrs	r3, r3, #4
 800a43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a442:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a444:	4b82      	ldr	r3, [pc, #520]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a44e:	4b80      	ldr	r3, [pc, #512]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a452:	08db      	lsrs	r3, r3, #3
 800a454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a466:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80e1 	beq.w	800a634 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b02      	cmp	r3, #2
 800a476:	f000 8083 	beq.w	800a580 <HAL_RCC_GetSysClockFreq+0x204>
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	f200 80a1 	bhi.w	800a5c4 <HAL_RCC_GetSysClockFreq+0x248>
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_RCC_GetSysClockFreq+0x114>
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d056      	beq.n	800a53c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a48e:	e099      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a490:	4b6f      	ldr	r3, [pc, #444]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0320 	and.w	r3, r3, #32
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d02d      	beq.n	800a4f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a49c:	4b6c      	ldr	r3, [pc, #432]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	08db      	lsrs	r3, r3, #3
 800a4a2:	f003 0303 	and.w	r3, r3, #3
 800a4a6:	4a6b      	ldr	r2, [pc, #428]	; (800a654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c6:	4b62      	ldr	r3, [pc, #392]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4da:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a4f6:	e087      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a664 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50a:	4b51      	ldr	r3, [pc, #324]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a51e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a53a:	e065      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a546:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a54e:	4b40      	ldr	r3, [pc, #256]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a55e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a562:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a57e:	e043      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a66c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a592:	4b2f      	ldr	r3, [pc, #188]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5c2:	e021      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d6:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a606:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a608:	4b11      	ldr	r3, [pc, #68]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60c:	0a5b      	lsrs	r3, r3, #9
 800a60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a612:	3301      	adds	r3, #1
 800a614:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	ee07 3a90 	vmov	s15, r3
 800a61c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a620:	edd7 6a07 	vldr	s13, [r7, #28]
 800a624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a62c:	ee17 3a90 	vmov	r3, s15
 800a630:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a632:	e005      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	61bb      	str	r3, [r7, #24]
      break;
 800a638:	e002      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a63a:	4b07      	ldr	r3, [pc, #28]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a63c:	61bb      	str	r3, [r7, #24]
      break;
 800a63e:	bf00      	nop
  }

  return sysclockfreq;
 800a640:	69bb      	ldr	r3, [r7, #24]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3724      	adds	r7, #36	; 0x24
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	58024400 	.word	0x58024400
 800a654:	03d09000 	.word	0x03d09000
 800a658:	003d0900 	.word	0x003d0900
 800a65c:	02faf080 	.word	0x02faf080
 800a660:	46000000 	.word	0x46000000
 800a664:	4c742400 	.word	0x4c742400
 800a668:	4a742400 	.word	0x4a742400
 800a66c:	4c3ebc20 	.word	0x4c3ebc20

0800a670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a676:	f7ff fe81 	bl	800a37c <HAL_RCC_GetSysClockFreq>
 800a67a:	4602      	mov	r2, r0
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	0a1b      	lsrs	r3, r3, #8
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	490f      	ldr	r1, [pc, #60]	; (800a6c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a688:	5ccb      	ldrb	r3, [r1, r3]
 800a68a:	f003 031f 	and.w	r3, r3, #31
 800a68e:	fa22 f303 	lsr.w	r3, r2, r3
 800a692:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a694:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	f003 030f 	and.w	r3, r3, #15
 800a69c:	4a09      	ldr	r2, [pc, #36]	; (800a6c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a69e:	5cd3      	ldrb	r3, [r2, r3]
 800a6a0:	f003 031f 	and.w	r3, r3, #31
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6aa:	4a07      	ldr	r2, [pc, #28]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6ae:	4a07      	ldr	r2, [pc, #28]	; (800a6cc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a6b4:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	58024400 	.word	0x58024400
 800a6c4:	08017a54 	.word	0x08017a54
 800a6c8:	24000004 	.word	0x24000004
 800a6cc:	24000000 	.word	0x24000000

0800a6d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a6d4:	f7ff ffcc 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	091b      	lsrs	r3, r3, #4
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	4904      	ldr	r1, [pc, #16]	; (800a6f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a6e6:	5ccb      	ldrb	r3, [r1, r3]
 800a6e8:	f003 031f 	and.w	r3, r3, #31
 800a6ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	58024400 	.word	0x58024400
 800a6f8:	08017a54 	.word	0x08017a54

0800a6fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a700:	f7ff ffb6 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a704:	4602      	mov	r2, r0
 800a706:	4b06      	ldr	r3, [pc, #24]	; (800a720 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	0a1b      	lsrs	r3, r3, #8
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	4904      	ldr	r1, [pc, #16]	; (800a724 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a712:	5ccb      	ldrb	r3, [r1, r3]
 800a714:	f003 031f 	and.w	r3, r3, #31
 800a718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	58024400 	.word	0x58024400
 800a724:	08017a54 	.word	0x08017a54

0800a728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a72c:	b0c6      	sub	sp, #280	; 0x118
 800a72e:	af00      	add	r7, sp, #0
 800a730:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a73a:	2300      	movs	r3, #0
 800a73c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a74c:	2500      	movs	r5, #0
 800a74e:	ea54 0305 	orrs.w	r3, r4, r5
 800a752:	d049      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a75a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a75e:	d02f      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a764:	d828      	bhi.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a76a:	d01a      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a76c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a770:	d822      	bhi.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a77a:	d007      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a77c:	e01c      	b.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a77e:	4bab      	ldr	r3, [pc, #684]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	4aaa      	ldr	r2, [pc, #680]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a78a:	e01a      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a790:	3308      	adds	r3, #8
 800a792:	2102      	movs	r1, #2
 800a794:	4618      	mov	r0, r3
 800a796:	f002 fa49 	bl	800cc2c <RCCEx_PLL2_Config>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7a0:	e00f      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a6:	3328      	adds	r3, #40	; 0x28
 800a7a8:	2102      	movs	r1, #2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f002 faf0 	bl	800cd90 <RCCEx_PLL3_Config>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7b6:	e004      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7be:	e000      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a7c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10a      	bne.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a7ca:	4b98      	ldr	r3, [pc, #608]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7d8:	4a94      	ldr	r2, [pc, #592]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	6513      	str	r3, [r2, #80]	; 0x50
 800a7de:	e003      	b.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a7f4:	f04f 0900 	mov.w	r9, #0
 800a7f8:	ea58 0309 	orrs.w	r3, r8, r9
 800a7fc:	d047      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a804:	2b04      	cmp	r3, #4
 800a806:	d82a      	bhi.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a808:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80e:	bf00      	nop
 800a810:	0800a825 	.word	0x0800a825
 800a814:	0800a833 	.word	0x0800a833
 800a818:	0800a849 	.word	0x0800a849
 800a81c:	0800a867 	.word	0x0800a867
 800a820:	0800a867 	.word	0x0800a867
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a824:	4b81      	ldr	r3, [pc, #516]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	4a80      	ldr	r2, [pc, #512]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a82a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a82e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a830:	e01a      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a836:	3308      	adds	r3, #8
 800a838:	2100      	movs	r1, #0
 800a83a:	4618      	mov	r0, r3
 800a83c:	f002 f9f6 	bl	800cc2c <RCCEx_PLL2_Config>
 800a840:	4603      	mov	r3, r0
 800a842:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a846:	e00f      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84c:	3328      	adds	r3, #40	; 0x28
 800a84e:	2100      	movs	r1, #0
 800a850:	4618      	mov	r0, r3
 800a852:	f002 fa9d 	bl	800cd90 <RCCEx_PLL3_Config>
 800a856:	4603      	mov	r3, r0
 800a858:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a85c:	e004      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a864:	e000      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a866:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a868:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a870:	4b6e      	ldr	r3, [pc, #440]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a874:	f023 0107 	bic.w	r1, r3, #7
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a87e:	4a6b      	ldr	r2, [pc, #428]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a880:	430b      	orrs	r3, r1
 800a882:	6513      	str	r3, [r2, #80]	; 0x50
 800a884:	e003      	b.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a88a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a89a:	f04f 0b00 	mov.w	fp, #0
 800a89e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a8a2:	d05b      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8b0:	d03b      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a8b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8b6:	d834      	bhi.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8bc:	d037      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a8be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8c2:	d82e      	bhi.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8c8:	d033      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a8ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8ce:	d828      	bhi.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8d4:	d01a      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a8d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8da:	d822      	bhi.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d003      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a8e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8e4:	d007      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a8e6:	e01c      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8e8:	4b50      	ldr	r3, [pc, #320]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	4a4f      	ldr	r2, [pc, #316]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8f4:	e01e      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fa:	3308      	adds	r3, #8
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f002 f994 	bl	800cc2c <RCCEx_PLL2_Config>
 800a904:	4603      	mov	r3, r0
 800a906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a90a:	e013      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a910:	3328      	adds	r3, #40	; 0x28
 800a912:	2100      	movs	r1, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f002 fa3b 	bl	800cd90 <RCCEx_PLL3_Config>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a920:	e008      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a928:	e004      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a92a:	bf00      	nop
 800a92c:	e002      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a92e:	bf00      	nop
 800a930:	e000      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a932:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a934:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10b      	bne.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a93c:	4b3b      	ldr	r3, [pc, #236]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a940:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a94c:	4a37      	ldr	r2, [pc, #220]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a94e:	430b      	orrs	r3, r1
 800a950:	6593      	str	r3, [r2, #88]	; 0x58
 800a952:	e003      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a958:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a96c:	2300      	movs	r3, #0
 800a96e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a972:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a976:	460b      	mov	r3, r1
 800a978:	4313      	orrs	r3, r2
 800a97a:	d05d      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a984:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a988:	d03b      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a98a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a98e:	d834      	bhi.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a994:	d037      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99a:	d82e      	bhi.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a99c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9a0:	d033      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a9a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9a6:	d828      	bhi.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ac:	d01a      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a9ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9b2:	d822      	bhi.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a9b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9bc:	d007      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a9be:	e01c      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c0:	4b1a      	ldr	r3, [pc, #104]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	4a19      	ldr	r2, [pc, #100]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9cc:	e01e      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d2:	3308      	adds	r3, #8
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f002 f928 	bl	800cc2c <RCCEx_PLL2_Config>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a9e2:	e013      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e8:	3328      	adds	r3, #40	; 0x28
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f002 f9cf 	bl	800cd90 <RCCEx_PLL3_Config>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9f8:	e008      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa00:	e004      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa02:	bf00      	nop
 800aa04:	e002      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa06:	bf00      	nop
 800aa08:	e000      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10d      	bne.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa14:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa24:	4a01      	ldr	r2, [pc, #4]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa26:	430b      	orrs	r3, r1
 800aa28:	6593      	str	r3, [r2, #88]	; 0x58
 800aa2a:	e005      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800aa2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aa44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa4e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4313      	orrs	r3, r2
 800aa56:	d03a      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5e:	2b30      	cmp	r3, #48	; 0x30
 800aa60:	d01f      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800aa62:	2b30      	cmp	r3, #48	; 0x30
 800aa64:	d819      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aa66:	2b20      	cmp	r3, #32
 800aa68:	d00c      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d815      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d019      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aa72:	2b10      	cmp	r3, #16
 800aa74:	d111      	bne.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa76:	4baa      	ldr	r3, [pc, #680]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7a:	4aa9      	ldr	r2, [pc, #676]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aa82:	e011      	b.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa88:	3308      	adds	r3, #8
 800aa8a:	2102      	movs	r1, #2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f002 f8cd 	bl	800cc2c <RCCEx_PLL2_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aa98:	e006      	b.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaa0:	e002      	b.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aaa2:	bf00      	nop
 800aaa4:	e000      	b.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aaa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aab0:	4b9b      	ldr	r3, [pc, #620]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aab4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aabe:	4a98      	ldr	r2, [pc, #608]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aac0:	430b      	orrs	r3, r1
 800aac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aac4:	e003      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aade:	2300      	movs	r3, #0
 800aae0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aae4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aae8:	460b      	mov	r3, r1
 800aaea:	4313      	orrs	r3, r2
 800aaec:	d051      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaf8:	d035      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800aafa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aafe:	d82e      	bhi.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab04:	d031      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ab06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab0a:	d828      	bhi.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab10:	d01a      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ab12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab16:	d822      	bhi.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ab1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab20:	d007      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ab22:	e01c      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab24:	4b7e      	ldr	r3, [pc, #504]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a7d      	ldr	r2, [pc, #500]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab30:	e01c      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab36:	3308      	adds	r3, #8
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f002 f876 	bl	800cc2c <RCCEx_PLL2_Config>
 800ab40:	4603      	mov	r3, r0
 800ab42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab46:	e011      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4c:	3328      	adds	r3, #40	; 0x28
 800ab4e:	2100      	movs	r1, #0
 800ab50:	4618      	mov	r0, r3
 800ab52:	f002 f91d 	bl	800cd90 <RCCEx_PLL3_Config>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab5c:	e006      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab64:	e002      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ab66:	bf00      	nop
 800ab68:	e000      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ab6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab74:	4b6a      	ldr	r3, [pc, #424]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ab7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab82:	4a67      	ldr	r2, [pc, #412]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab84:	430b      	orrs	r3, r1
 800ab86:	6513      	str	r3, [r2, #80]	; 0x50
 800ab88:	e003      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ab9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aba2:	2300      	movs	r3, #0
 800aba4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aba8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800abac:	460b      	mov	r3, r1
 800abae:	4313      	orrs	r3, r2
 800abb0:	d053      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800abb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abbc:	d033      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800abbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abc2:	d82c      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abc8:	d02f      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800abca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abce:	d826      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abd4:	d02b      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800abd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abda:	d820      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abe0:	d012      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800abe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abe6:	d81a      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d022      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800abec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf0:	d115      	bne.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf6:	3308      	adds	r3, #8
 800abf8:	2101      	movs	r1, #1
 800abfa:	4618      	mov	r0, r3
 800abfc:	f002 f816 	bl	800cc2c <RCCEx_PLL2_Config>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac06:	e015      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0c:	3328      	adds	r3, #40	; 0x28
 800ac0e:	2101      	movs	r1, #1
 800ac10:	4618      	mov	r0, r3
 800ac12:	f002 f8bd 	bl	800cd90 <RCCEx_PLL3_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac1c:	e00a      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac24:	e006      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac26:	bf00      	nop
 800ac28:	e004      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac2a:	bf00      	nop
 800ac2c:	e002      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e000      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac3c:	4b38      	ldr	r3, [pc, #224]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ac44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac4a:	4a35      	ldr	r2, [pc, #212]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	6513      	str	r3, [r2, #80]	; 0x50
 800ac50:	e003      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ac66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ac70:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac74:	460b      	mov	r3, r1
 800ac76:	4313      	orrs	r3, r2
 800ac78:	d058      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ac7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac86:	d033      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ac88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac8c:	d82c      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac92:	d02f      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ac94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac98:	d826      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac9e:	d02b      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800aca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aca4:	d820      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acaa:	d012      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800acac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb0:	d81a      	bhi.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d022      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800acb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acba:	d115      	bne.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc0:	3308      	adds	r3, #8
 800acc2:	2101      	movs	r1, #1
 800acc4:	4618      	mov	r0, r3
 800acc6:	f001 ffb1 	bl	800cc2c <RCCEx_PLL2_Config>
 800acca:	4603      	mov	r3, r0
 800accc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800acd0:	e015      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd6:	3328      	adds	r3, #40	; 0x28
 800acd8:	2101      	movs	r1, #1
 800acda:	4618      	mov	r0, r3
 800acdc:	f002 f858 	bl	800cd90 <RCCEx_PLL3_Config>
 800ace0:	4603      	mov	r3, r0
 800ace2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ace6:	e00a      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acee:	e006      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acf0:	bf00      	nop
 800acf2:	e004      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acf4:	bf00      	nop
 800acf6:	e002      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acf8:	bf00      	nop
 800acfa:	e000      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10e      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad06:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad16:	4a02      	ldr	r2, [pc, #8]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad18:	430b      	orrs	r3, r1
 800ad1a:	6593      	str	r3, [r2, #88]	; 0x58
 800ad1c:	e006      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ad1e:	bf00      	nop
 800ad20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	d037      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ad4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad56:	d00e      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ad58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5c:	d816      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d018      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ad62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad66:	d111      	bne.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad68:	4bc4      	ldr	r3, [pc, #784]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	4ac3      	ldr	r2, [pc, #780]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad74:	e00f      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 ff54 	bl	800cc2c <RCCEx_PLL2_Config>
 800ad84:	4603      	mov	r3, r0
 800ad86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad8a:	e004      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad92:	e000      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ad94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad9e:	4bb7      	ldr	r3, [pc, #732]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ada6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adac:	4ab3      	ldr	r2, [pc, #716]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adae:	430b      	orrs	r3, r1
 800adb0:	6513      	str	r3, [r2, #80]	; 0x50
 800adb2:	e003      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800adc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adcc:	2300      	movs	r3, #0
 800adce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800add2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800add6:	460b      	mov	r3, r1
 800add8:	4313      	orrs	r3, r2
 800adda:	d039      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d81c      	bhi.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ade6:	a201      	add	r2, pc, #4	; (adr r2, 800adec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae29 	.word	0x0800ae29
 800adf0:	0800adfd 	.word	0x0800adfd
 800adf4:	0800ae0b 	.word	0x0800ae0b
 800adf8:	0800ae29 	.word	0x0800ae29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adfc:	4b9f      	ldr	r3, [pc, #636]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	4a9e      	ldr	r2, [pc, #632]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae08:	e00f      	b.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0e:	3308      	adds	r3, #8
 800ae10:	2102      	movs	r1, #2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f001 ff0a 	bl	800cc2c <RCCEx_PLL2_Config>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae1e:	e004      	b.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae26:	e000      	b.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ae28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10a      	bne.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae32:	4b92      	ldr	r3, [pc, #584]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae36:	f023 0103 	bic.w	r1, r3, #3
 800ae3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae40:	4a8e      	ldr	r2, [pc, #568]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae42:	430b      	orrs	r3, r1
 800ae44:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae46:	e003      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ae5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae60:	2300      	movs	r3, #0
 800ae62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	f000 8099 	beq.w	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae72:	4b83      	ldr	r3, [pc, #524]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a82      	ldr	r2, [pc, #520]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ae78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae7e:	f7f8 fd7f 	bl	8003980 <HAL_GetTick>
 800ae82:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae86:	e00b      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae88:	f7f8 fd7a 	bl	8003980 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	2b64      	cmp	r3, #100	; 0x64
 800ae96:	d903      	bls.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae9e:	e005      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aea0:	4b77      	ldr	r3, [pc, #476]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0ed      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aeac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d173      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aeb4:	4b71      	ldr	r3, [pc, #452]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aeb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aec0:	4053      	eors	r3, r2
 800aec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d015      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aeca:	4b6c      	ldr	r3, [pc, #432]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aed2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aed6:	4b69      	ldr	r3, [pc, #420]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeda:	4a68      	ldr	r2, [pc, #416]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aedc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aee2:	4b66      	ldr	r3, [pc, #408]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee6:	4a65      	ldr	r2, [pc, #404]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aeee:	4a63      	ldr	r2, [pc, #396]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aef4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aefe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af02:	d118      	bne.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af04:	f7f8 fd3c 	bl	8003980 <HAL_GetTick>
 800af08:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af0c:	e00d      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af0e:	f7f8 fd37 	bl	8003980 <HAL_GetTick>
 800af12:	4602      	mov	r2, r0
 800af14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af18:	1ad2      	subs	r2, r2, r3
 800af1a:	f241 3388 	movw	r3, #5000	; 0x1388
 800af1e:	429a      	cmp	r2, r3
 800af20:	d903      	bls.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800af22:	2303      	movs	r3, #3
 800af24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800af28:	e005      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af2a:	4b54      	ldr	r3, [pc, #336]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0eb      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800af36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d129      	bne.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af4e:	d10e      	bne.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800af50:	4b4a      	ldr	r3, [pc, #296]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800af58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af60:	091a      	lsrs	r2, r3, #4
 800af62:	4b48      	ldr	r3, [pc, #288]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800af64:	4013      	ands	r3, r2
 800af66:	4a45      	ldr	r2, [pc, #276]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af68:	430b      	orrs	r3, r1
 800af6a:	6113      	str	r3, [r2, #16]
 800af6c:	e005      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800af6e:	4b43      	ldr	r3, [pc, #268]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	4a42      	ldr	r2, [pc, #264]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af78:	6113      	str	r3, [r2, #16]
 800af7a:	4b40      	ldr	r3, [pc, #256]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800af7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af8a:	4a3c      	ldr	r2, [pc, #240]	; (800b07c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af8c:	430b      	orrs	r3, r1
 800af8e:	6713      	str	r3, [r2, #112]	; 0x70
 800af90:	e008      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800af9a:	e003      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800afa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	f002 0301 	and.w	r3, r2, #1
 800afb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afb4:	2300      	movs	r3, #0
 800afb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800afba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800afbe:	460b      	mov	r3, r1
 800afc0:	4313      	orrs	r3, r2
 800afc2:	f000 808f 	beq.w	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800afc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afcc:	2b28      	cmp	r3, #40	; 0x28
 800afce:	d871      	bhi.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800afd0:	a201      	add	r2, pc, #4	; (adr r2, 800afd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800afd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd6:	bf00      	nop
 800afd8:	0800b0bd 	.word	0x0800b0bd
 800afdc:	0800b0b5 	.word	0x0800b0b5
 800afe0:	0800b0b5 	.word	0x0800b0b5
 800afe4:	0800b0b5 	.word	0x0800b0b5
 800afe8:	0800b0b5 	.word	0x0800b0b5
 800afec:	0800b0b5 	.word	0x0800b0b5
 800aff0:	0800b0b5 	.word	0x0800b0b5
 800aff4:	0800b0b5 	.word	0x0800b0b5
 800aff8:	0800b089 	.word	0x0800b089
 800affc:	0800b0b5 	.word	0x0800b0b5
 800b000:	0800b0b5 	.word	0x0800b0b5
 800b004:	0800b0b5 	.word	0x0800b0b5
 800b008:	0800b0b5 	.word	0x0800b0b5
 800b00c:	0800b0b5 	.word	0x0800b0b5
 800b010:	0800b0b5 	.word	0x0800b0b5
 800b014:	0800b0b5 	.word	0x0800b0b5
 800b018:	0800b09f 	.word	0x0800b09f
 800b01c:	0800b0b5 	.word	0x0800b0b5
 800b020:	0800b0b5 	.word	0x0800b0b5
 800b024:	0800b0b5 	.word	0x0800b0b5
 800b028:	0800b0b5 	.word	0x0800b0b5
 800b02c:	0800b0b5 	.word	0x0800b0b5
 800b030:	0800b0b5 	.word	0x0800b0b5
 800b034:	0800b0b5 	.word	0x0800b0b5
 800b038:	0800b0bd 	.word	0x0800b0bd
 800b03c:	0800b0b5 	.word	0x0800b0b5
 800b040:	0800b0b5 	.word	0x0800b0b5
 800b044:	0800b0b5 	.word	0x0800b0b5
 800b048:	0800b0b5 	.word	0x0800b0b5
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b0b5 	.word	0x0800b0b5
 800b054:	0800b0b5 	.word	0x0800b0b5
 800b058:	0800b0bd 	.word	0x0800b0bd
 800b05c:	0800b0b5 	.word	0x0800b0b5
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b0b5 	.word	0x0800b0b5
 800b068:	0800b0b5 	.word	0x0800b0b5
 800b06c:	0800b0b5 	.word	0x0800b0b5
 800b070:	0800b0b5 	.word	0x0800b0b5
 800b074:	0800b0b5 	.word	0x0800b0b5
 800b078:	0800b0bd 	.word	0x0800b0bd
 800b07c:	58024400 	.word	0x58024400
 800b080:	58024800 	.word	0x58024800
 800b084:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08c:	3308      	adds	r3, #8
 800b08e:	2101      	movs	r1, #1
 800b090:	4618      	mov	r0, r3
 800b092:	f001 fdcb 	bl	800cc2c <RCCEx_PLL2_Config>
 800b096:	4603      	mov	r3, r0
 800b098:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b09c:	e00f      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a2:	3328      	adds	r3, #40	; 0x28
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f001 fe72 	bl	800cd90 <RCCEx_PLL3_Config>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0b2:	e004      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0ba:	e000      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10a      	bne.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b0c6:	4bbf      	ldr	r3, [pc, #764]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0d4:	4abb      	ldr	r2, [pc, #748]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	6553      	str	r3, [r2, #84]	; 0x54
 800b0da:	e003      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f002 0302 	and.w	r3, r2, #2
 800b0f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4313      	orrs	r3, r2
 800b102:	d041      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	d824      	bhi.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b10e:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b161 	.word	0x0800b161
 800b118:	0800b12d 	.word	0x0800b12d
 800b11c:	0800b143 	.word	0x0800b143
 800b120:	0800b161 	.word	0x0800b161
 800b124:	0800b161 	.word	0x0800b161
 800b128:	0800b161 	.word	0x0800b161
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b130:	3308      	adds	r3, #8
 800b132:	2101      	movs	r1, #1
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fd79 	bl	800cc2c <RCCEx_PLL2_Config>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b140:	e00f      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b146:	3328      	adds	r3, #40	; 0x28
 800b148:	2101      	movs	r1, #1
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 fe20 	bl	800cd90 <RCCEx_PLL3_Config>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b156:	e004      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b15e:	e000      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10a      	bne.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b16a:	4b96      	ldr	r3, [pc, #600]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b16e:	f023 0107 	bic.w	r1, r3, #7
 800b172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b178:	4a92      	ldr	r2, [pc, #584]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b17a:	430b      	orrs	r3, r1
 800b17c:	6553      	str	r3, [r2, #84]	; 0x54
 800b17e:	e003      	b.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b184:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f002 0304 	and.w	r3, r2, #4
 800b194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b198:	2300      	movs	r3, #0
 800b19a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b19e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	d044      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b0:	2b05      	cmp	r3, #5
 800b1b2:	d825      	bhi.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b1b4:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ba:	bf00      	nop
 800b1bc:	0800b209 	.word	0x0800b209
 800b1c0:	0800b1d5 	.word	0x0800b1d5
 800b1c4:	0800b1eb 	.word	0x0800b1eb
 800b1c8:	0800b209 	.word	0x0800b209
 800b1cc:	0800b209 	.word	0x0800b209
 800b1d0:	0800b209 	.word	0x0800b209
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d8:	3308      	adds	r3, #8
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 fd25 	bl	800cc2c <RCCEx_PLL2_Config>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1e8:	e00f      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ee:	3328      	adds	r3, #40	; 0x28
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f001 fdcc 	bl	800cd90 <RCCEx_PLL3_Config>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1fe:	e004      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b206:	e000      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b20a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10b      	bne.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b212:	4b6c      	ldr	r3, [pc, #432]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b216:	f023 0107 	bic.w	r1, r3, #7
 800b21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b222:	4a68      	ldr	r2, [pc, #416]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b224:	430b      	orrs	r3, r1
 800b226:	6593      	str	r3, [r2, #88]	; 0x58
 800b228:	e003      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b22a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b22e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f002 0320 	and.w	r3, r2, #32
 800b23e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b242:	2300      	movs	r3, #0
 800b244:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b248:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4313      	orrs	r3, r2
 800b250:	d055      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b25a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b25e:	d033      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b264:	d82c      	bhi.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26a:	d02f      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b270:	d826      	bhi.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b276:	d02b      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b278:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b27c:	d820      	bhi.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b27e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b282:	d012      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b288:	d81a      	bhi.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d022      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b28e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b292:	d115      	bne.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b298:	3308      	adds	r3, #8
 800b29a:	2100      	movs	r1, #0
 800b29c:	4618      	mov	r0, r3
 800b29e:	f001 fcc5 	bl	800cc2c <RCCEx_PLL2_Config>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2a8:	e015      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ae:	3328      	adds	r3, #40	; 0x28
 800b2b0:	2102      	movs	r1, #2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f001 fd6c 	bl	800cd90 <RCCEx_PLL3_Config>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2be:	e00a      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2c6:	e006      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2c8:	bf00      	nop
 800b2ca:	e004      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2cc:	bf00      	nop
 800b2ce:	e002      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2d0:	bf00      	nop
 800b2d2:	e000      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10b      	bne.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2de:	4b39      	ldr	r3, [pc, #228]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ee:	4a35      	ldr	r2, [pc, #212]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2f0:	430b      	orrs	r3, r1
 800b2f2:	6553      	str	r3, [r2, #84]	; 0x54
 800b2f4:	e003      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b30a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b30e:	2300      	movs	r3, #0
 800b310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b314:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b318:	460b      	mov	r3, r1
 800b31a:	4313      	orrs	r3, r2
 800b31c:	d058      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b326:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b32a:	d033      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b32c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b330:	d82c      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b336:	d02f      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33c:	d826      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b33e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b342:	d02b      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b348:	d820      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b34e:	d012      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b354:	d81a      	bhi.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d022      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b35a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b35e:	d115      	bne.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b364:	3308      	adds	r3, #8
 800b366:	2100      	movs	r1, #0
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 fc5f 	bl	800cc2c <RCCEx_PLL2_Config>
 800b36e:	4603      	mov	r3, r0
 800b370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b374:	e015      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37a:	3328      	adds	r3, #40	; 0x28
 800b37c:	2102      	movs	r1, #2
 800b37e:	4618      	mov	r0, r3
 800b380:	f001 fd06 	bl	800cd90 <RCCEx_PLL3_Config>
 800b384:	4603      	mov	r3, r0
 800b386:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b38a:	e00a      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b392:	e006      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b394:	bf00      	nop
 800b396:	e004      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b398:	bf00      	nop
 800b39a:	e002      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b39c:	bf00      	nop
 800b39e:	e000      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10e      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b3aa:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3ba:	4a02      	ldr	r2, [pc, #8]	; (800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	6593      	str	r3, [r2, #88]	; 0x58
 800b3c0:	e006      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b3c2:	bf00      	nop
 800b3c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b3dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	d055      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3fc:	d033      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b3fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b402:	d82c      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b408:	d02f      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b40a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b40e:	d826      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b410:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b414:	d02b      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b416:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b41a:	d820      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b41c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b420:	d012      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b426:	d81a      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d022      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b430:	d115      	bne.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	3308      	adds	r3, #8
 800b438:	2100      	movs	r1, #0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 fbf6 	bl	800cc2c <RCCEx_PLL2_Config>
 800b440:	4603      	mov	r3, r0
 800b442:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b446:	e015      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44c:	3328      	adds	r3, #40	; 0x28
 800b44e:	2102      	movs	r1, #2
 800b450:	4618      	mov	r0, r3
 800b452:	f001 fc9d 	bl	800cd90 <RCCEx_PLL3_Config>
 800b456:	4603      	mov	r3, r0
 800b458:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b45c:	e00a      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b464:	e006      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b466:	bf00      	nop
 800b468:	e004      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b46a:	bf00      	nop
 800b46c:	e002      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b46e:	bf00      	nop
 800b470:	e000      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b472:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b474:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10b      	bne.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b47c:	4ba0      	ldr	r3, [pc, #640]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b480:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b48c:	4a9c      	ldr	r2, [pc, #624]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b48e:	430b      	orrs	r3, r1
 800b490:	6593      	str	r3, [r2, #88]	; 0x58
 800b492:	e003      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f002 0308 	and.w	r3, r2, #8
 800b4a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	d01e      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c8:	d10c      	bne.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ce:	3328      	adds	r3, #40	; 0x28
 800b4d0:	2102      	movs	r1, #2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 fc5c 	bl	800cd90 <RCCEx_PLL3_Config>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b4e4:	4b86      	ldr	r3, [pc, #536]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4f4:	4a82      	ldr	r2, [pc, #520]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4f6:	430b      	orrs	r3, r1
 800b4f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	f002 0310 	and.w	r3, r2, #16
 800b506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b50a:	2300      	movs	r3, #0
 800b50c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b510:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b514:	460b      	mov	r3, r1
 800b516:	4313      	orrs	r3, r2
 800b518:	d01e      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b526:	d10c      	bne.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	3328      	adds	r3, #40	; 0x28
 800b52e:	2102      	movs	r1, #2
 800b530:	4618      	mov	r0, r3
 800b532:	f001 fc2d 	bl	800cd90 <RCCEx_PLL3_Config>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b542:	4b6f      	ldr	r3, [pc, #444]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b552:	4a6b      	ldr	r2, [pc, #428]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b554:	430b      	orrs	r3, r1
 800b556:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b564:	67bb      	str	r3, [r7, #120]	; 0x78
 800b566:	2300      	movs	r3, #0
 800b568:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b56a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b56e:	460b      	mov	r3, r1
 800b570:	4313      	orrs	r3, r2
 800b572:	d03e      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b578:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b580:	d022      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b586:	d81b      	bhi.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b58c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b590:	d00b      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b592:	e015      	b.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b598:	3308      	adds	r3, #8
 800b59a:	2100      	movs	r1, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 fb45 	bl	800cc2c <RCCEx_PLL2_Config>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5a8:	e00f      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ae:	3328      	adds	r3, #40	; 0x28
 800b5b0:	2102      	movs	r1, #2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 fbec 	bl	800cd90 <RCCEx_PLL3_Config>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5be:	e004      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5c6:	e000      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b5c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b5d2:	4b4b      	ldr	r3, [pc, #300]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5e2:	4a47      	ldr	r2, [pc, #284]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b5e8:	e003      	b.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b5fe:	673b      	str	r3, [r7, #112]	; 0x70
 800b600:	2300      	movs	r3, #0
 800b602:	677b      	str	r3, [r7, #116]	; 0x74
 800b604:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b608:	460b      	mov	r3, r1
 800b60a:	4313      	orrs	r3, r2
 800b60c:	d03b      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b61a:	d01f      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b61c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b620:	d818      	bhi.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b626:	d003      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b62c:	d007      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b62e:	e011      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b630:	4b33      	ldr	r3, [pc, #204]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	4a32      	ldr	r2, [pc, #200]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b63a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b63c:	e00f      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b642:	3328      	adds	r3, #40	; 0x28
 800b644:	2101      	movs	r1, #1
 800b646:	4618      	mov	r0, r3
 800b648:	f001 fba2 	bl	800cd90 <RCCEx_PLL3_Config>
 800b64c:	4603      	mov	r3, r0
 800b64e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b652:	e004      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b65a:	e000      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b65c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b65e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10b      	bne.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b666:	4b26      	ldr	r3, [pc, #152]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b66a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b676:	4a22      	ldr	r2, [pc, #136]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b678:	430b      	orrs	r3, r1
 800b67a:	6553      	str	r3, [r2, #84]	; 0x54
 800b67c:	e003      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b682:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b692:	66bb      	str	r3, [r7, #104]	; 0x68
 800b694:	2300      	movs	r3, #0
 800b696:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b698:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b69c:	460b      	mov	r3, r1
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	d034      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b6ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b0:	d007      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b6b2:	e011      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b4:	4b12      	ldr	r3, [pc, #72]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b8:	4a11      	ldr	r2, [pc, #68]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6c0:	e00e      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	2102      	movs	r1, #2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f001 faae 	bl	800cc2c <RCCEx_PLL2_Config>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6d6:	e003      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10d      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6e8:	4b05      	ldr	r3, [pc, #20]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6f6:	4a02      	ldr	r2, [pc, #8]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6fc:	e006      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b6fe:	bf00      	nop
 800b700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b718:	663b      	str	r3, [r7, #96]	; 0x60
 800b71a:	2300      	movs	r3, #0
 800b71c:	667b      	str	r3, [r7, #100]	; 0x64
 800b71e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b722:	460b      	mov	r3, r1
 800b724:	4313      	orrs	r3, r2
 800b726:	d00c      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72c:	3328      	adds	r3, #40	; 0x28
 800b72e:	2102      	movs	r1, #2
 800b730:	4618      	mov	r0, r3
 800b732:	f001 fb2d 	bl	800cd90 <RCCEx_PLL3_Config>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b74e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b750:	2300      	movs	r3, #0
 800b752:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b754:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b758:	460b      	mov	r3, r1
 800b75a:	4313      	orrs	r3, r2
 800b75c:	d036      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b768:	d018      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b76a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b76e:	d811      	bhi.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b774:	d014      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b77a:	d80b      	bhi.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d011      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b784:	d106      	bne.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b786:	4bb7      	ldr	r3, [pc, #732]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78a:	4ab6      	ldr	r2, [pc, #728]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b78c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b792:	e008      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b79a:	e004      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b79c:	bf00      	nop
 800b79e:	e002      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7a0:	bf00      	nop
 800b7a2:	e000      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10a      	bne.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7ae:	4bad      	ldr	r3, [pc, #692]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7bc:	4aa9      	ldr	r2, [pc, #676]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7be:	430b      	orrs	r3, r1
 800b7c0:	6553      	str	r3, [r2, #84]	; 0x54
 800b7c2:	e003      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b7d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b7da:	2300      	movs	r3, #0
 800b7dc:	657b      	str	r3, [r7, #84]	; 0x54
 800b7de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	d009      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7e8:	4b9e      	ldr	r3, [pc, #632]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f6:	4a9b      	ldr	r2, [pc, #620]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b808:	64bb      	str	r3, [r7, #72]	; 0x48
 800b80a:	2300      	movs	r3, #0
 800b80c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b80e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b812:	460b      	mov	r3, r1
 800b814:	4313      	orrs	r3, r2
 800b816:	d009      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b818:	4b92      	ldr	r3, [pc, #584]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b826:	4a8f      	ldr	r2, [pc, #572]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b828:	430b      	orrs	r3, r1
 800b82a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b838:	643b      	str	r3, [r7, #64]	; 0x40
 800b83a:	2300      	movs	r3, #0
 800b83c:	647b      	str	r3, [r7, #68]	; 0x44
 800b83e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b842:	460b      	mov	r3, r1
 800b844:	4313      	orrs	r3, r2
 800b846:	d00e      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b848:	4b86      	ldr	r3, [pc, #536]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	4a85      	ldr	r2, [pc, #532]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b84e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b852:	6113      	str	r3, [r2, #16]
 800b854:	4b83      	ldr	r3, [pc, #524]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b856:	6919      	ldr	r1, [r3, #16]
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b860:	4a80      	ldr	r2, [pc, #512]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b862:	430b      	orrs	r3, r1
 800b864:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b872:	63bb      	str	r3, [r7, #56]	; 0x38
 800b874:	2300      	movs	r3, #0
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b878:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b87c:	460b      	mov	r3, r1
 800b87e:	4313      	orrs	r3, r2
 800b880:	d009      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b882:	4b78      	ldr	r3, [pc, #480]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b886:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b890:	4a74      	ldr	r2, [pc, #464]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b892:	430b      	orrs	r3, r1
 800b894:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b8a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	d00a      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8b2:	4b6c      	ldr	r3, [pc, #432]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8c2:	4a68      	ldr	r2, [pc, #416]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	62b9      	str	r1, [r7, #40]	; 0x28
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	d011      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 f99d 	bl	800cc2c <RCCEx_PLL2_Config>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b8f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d003      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b900:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b904:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	2100      	movs	r1, #0
 800b912:	6239      	str	r1, [r7, #32]
 800b914:	f003 0302 	and.w	r3, r3, #2
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
 800b91a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b91e:	460b      	mov	r3, r1
 800b920:	4313      	orrs	r3, r2
 800b922:	d011      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	3308      	adds	r3, #8
 800b92a:	2101      	movs	r1, #1
 800b92c:	4618      	mov	r0, r3
 800b92e:	f001 f97d 	bl	800cc2c <RCCEx_PLL2_Config>
 800b932:	4603      	mov	r3, r0
 800b934:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b938:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b940:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b944:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	2100      	movs	r1, #0
 800b952:	61b9      	str	r1, [r7, #24]
 800b954:	f003 0304 	and.w	r3, r3, #4
 800b958:	61fb      	str	r3, [r7, #28]
 800b95a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b95e:	460b      	mov	r3, r1
 800b960:	4313      	orrs	r3, r2
 800b962:	d011      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b968:	3308      	adds	r3, #8
 800b96a:	2102      	movs	r1, #2
 800b96c:	4618      	mov	r0, r3
 800b96e:	f001 f95d 	bl	800cc2c <RCCEx_PLL2_Config>
 800b972:	4603      	mov	r3, r0
 800b974:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b978:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b984:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	2100      	movs	r1, #0
 800b992:	6139      	str	r1, [r7, #16]
 800b994:	f003 0308 	and.w	r3, r3, #8
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	d011      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a8:	3328      	adds	r3, #40	; 0x28
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f001 f9ef 	bl	800cd90 <RCCEx_PLL3_Config>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b9b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	60b9      	str	r1, [r7, #8]
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	d011      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	3328      	adds	r3, #40	; 0x28
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 f9cf 	bl	800cd90 <RCCEx_PLL3_Config>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	2100      	movs	r1, #0
 800ba12:	6039      	str	r1, [r7, #0]
 800ba14:	f003 0320 	and.w	r3, r3, #32
 800ba18:	607b      	str	r3, [r7, #4]
 800ba1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4313      	orrs	r3, r2
 800ba22:	d011      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba28:	3328      	adds	r3, #40	; 0x28
 800ba2a:	2102      	movs	r1, #2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 f9af 	bl	800cd90 <RCCEx_PLL3_Config>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ba48:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	e000      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba62:	bf00      	nop
 800ba64:	58024400 	.word	0x58024400

0800ba68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b090      	sub	sp, #64	; 0x40
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ba72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba76:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ba7a:	430b      	orrs	r3, r1
 800ba7c:	f040 8094 	bne.w	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ba80:	4b9b      	ldr	r3, [pc, #620]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba84:	f003 0307 	and.w	r3, r3, #7
 800ba88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	f200 8087 	bhi.w	800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ba92:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ba94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba98:	0800baad 	.word	0x0800baad
 800ba9c:	0800bad5 	.word	0x0800bad5
 800baa0:	0800bafd 	.word	0x0800bafd
 800baa4:	0800bb99 	.word	0x0800bb99
 800baa8:	0800bb25 	.word	0x0800bb25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800baac:	4b90      	ldr	r3, [pc, #576]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bab8:	d108      	bne.n	800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 ff62 	bl	800c988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac8:	f000 bc93 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad0:	f000 bc8f 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bad4:	4b86      	ldr	r3, [pc, #536]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800badc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bae0:	d108      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bae2:	f107 0318 	add.w	r3, r7, #24
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 fca6 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baf0:	f000 bc7f 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baf8:	f000 bc7b 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bafc:	4b7c      	ldr	r3, [pc, #496]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb08:	d108      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb0a:	f107 030c 	add.w	r3, r7, #12
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fde6 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb18:	f000 bc6b 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb20:	f000 bc67 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb24:	4b72      	ldr	r3, [pc, #456]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb2e:	4b70      	ldr	r3, [pc, #448]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 0304 	and.w	r3, r3, #4
 800bb36:	2b04      	cmp	r3, #4
 800bb38:	d10c      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d109      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb40:	4b6b      	ldr	r3, [pc, #428]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	08db      	lsrs	r3, r3, #3
 800bb46:	f003 0303 	and.w	r3, r3, #3
 800bb4a:	4a6a      	ldr	r2, [pc, #424]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bb4c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb52:	e01f      	b.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb54:	4b66      	ldr	r3, [pc, #408]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb60:	d106      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb68:	d102      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb6a:	4b63      	ldr	r3, [pc, #396]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb6e:	e011      	b.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb70:	4b5f      	ldr	r3, [pc, #380]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb7c:	d106      	bne.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bb7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb84:	d102      	bne.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb86:	4b5d      	ldr	r3, [pc, #372]	; (800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb8a:	e003      	b.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb90:	f000 bc2f 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb94:	f000 bc2d 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb98:	4b59      	ldr	r3, [pc, #356]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb9c:	f000 bc29 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba4:	f000 bc25 	b.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bbb0:	430b      	orrs	r3, r1
 800bbb2:	f040 80a7 	bne.w	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bbb6:	4b4e      	ldr	r3, [pc, #312]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bbbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbc6:	d054      	beq.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbce:	f200 808b 	bhi.w	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bbd8:	f000 8083 	beq.w	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bbe2:	f200 8081 	bhi.w	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbec:	d02f      	beq.n	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbf4:	d878      	bhi.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d004      	beq.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc02:	d012      	beq.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bc04:	e070      	b.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc06:	4b3a      	ldr	r3, [pc, #232]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc12:	d107      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f000 feb5 	bl	800c988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc22:	e3e6      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc28:	e3e3      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc2a:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc36:	d107      	bne.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc38:	f107 0318 	add.w	r3, r7, #24
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 fbfb 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc46:	e3d4      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc4c:	e3d1      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc4e:	4b28      	ldr	r3, [pc, #160]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc5a:	d107      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc5c:	f107 030c 	add.w	r3, r7, #12
 800bc60:	4618      	mov	r0, r3
 800bc62:	f000 fd3d 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc6a:	e3c2      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc70:	e3bf      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc72:	4b1f      	ldr	r3, [pc, #124]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc7c:	4b1c      	ldr	r3, [pc, #112]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	d10c      	bne.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d109      	bne.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc8e:	4b18      	ldr	r3, [pc, #96]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	08db      	lsrs	r3, r3, #3
 800bc94:	f003 0303 	and.w	r3, r3, #3
 800bc98:	4a16      	ldr	r2, [pc, #88]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc9a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca0:	e01e      	b.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bca2:	4b13      	ldr	r3, [pc, #76]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcae:	d106      	bne.n	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcb6:	d102      	bne.n	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcb8:	4b0f      	ldr	r3, [pc, #60]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bcba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcbc:	e010      	b.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcbe:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcca:	d106      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd2:	d102      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcd4:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd8:	e002      	b.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bcde:	e388      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bce0:	e387      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bce2:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bce6:	e384      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcec:	e381      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcee:	bf00      	nop
 800bcf0:	58024400 	.word	0x58024400
 800bcf4:	03d09000 	.word	0x03d09000
 800bcf8:	003d0900 	.word	0x003d0900
 800bcfc:	02faf080 	.word	0x02faf080
 800bd00:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bd04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd08:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	f040 809c 	bne.w	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bd12:	4b9e      	ldr	r3, [pc, #632]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bd1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd22:	d054      	beq.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd2a:	f200 808b 	bhi.w	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd34:	f000 8083 	beq.w	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd3e:	f200 8081 	bhi.w	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd48:	d02f      	beq.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd50:	d878      	bhi.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d004      	beq.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd5e:	d012      	beq.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bd60:	e070      	b.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd62:	4b8a      	ldr	r3, [pc, #552]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd6e:	d107      	bne.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fe07 	bl	800c988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd7e:	e338      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd84:	e335      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd86:	4b81      	ldr	r3, [pc, #516]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd92:	d107      	bne.n	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd94:	f107 0318 	add.w	r3, r7, #24
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fb4d 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bda2:	e326      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bda8:	e323      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdaa:	4b78      	ldr	r3, [pc, #480]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb6:	d107      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdb8:	f107 030c 	add.w	r3, r7, #12
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 fc8f 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdc6:	e314      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdcc:	e311      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdce:	4b6f      	ldr	r3, [pc, #444]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdd8:	4b6c      	ldr	r3, [pc, #432]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 0304 	and.w	r3, r3, #4
 800bde0:	2b04      	cmp	r3, #4
 800bde2:	d10c      	bne.n	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d109      	bne.n	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdea:	4b68      	ldr	r3, [pc, #416]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	08db      	lsrs	r3, r3, #3
 800bdf0:	f003 0303 	and.w	r3, r3, #3
 800bdf4:	4a66      	ldr	r2, [pc, #408]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bdf6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdfc:	e01e      	b.n	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdfe:	4b63      	ldr	r3, [pc, #396]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be0a:	d106      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800be0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be12:	d102      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be14:	4b5f      	ldr	r3, [pc, #380]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800be16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be18:	e010      	b.n	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be1a:	4b5c      	ldr	r3, [pc, #368]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be26:	d106      	bne.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800be28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be2e:	d102      	bne.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be30:	4b59      	ldr	r3, [pc, #356]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be34:	e002      	b.n	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be3a:	e2da      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be3c:	e2d9      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be3e:	4b57      	ldr	r3, [pc, #348]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be42:	e2d6      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be48:	e2d3      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800be4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be4e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800be52:	430b      	orrs	r3, r1
 800be54:	f040 80a7 	bne.w	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800be58:	4b4c      	ldr	r3, [pc, #304]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800be60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be68:	d055      	beq.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be70:	f200 8096 	bhi.w	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be7a:	f000 8084 	beq.w	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800be7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be84:	f200 808c 	bhi.w	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be8e:	d030      	beq.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800be90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be96:	f200 8083 	bhi.w	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d004      	beq.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bea6:	d012      	beq.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bea8:	e07a      	b.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beaa:	4b38      	ldr	r3, [pc, #224]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800beb6:	d107      	bne.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800beb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 fd63 	bl	800c988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bec6:	e294      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800becc:	e291      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bece:	4b2f      	ldr	r3, [pc, #188]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beda:	d107      	bne.n	800beec <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bedc:	f107 0318 	add.w	r3, r7, #24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 faa9 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beea:	e282      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef0:	e27f      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bef2:	4b26      	ldr	r3, [pc, #152]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800befa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800befe:	d107      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf00:	f107 030c 	add.w	r3, r7, #12
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 fbeb 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf0e:	e270      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf14:	e26d      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf16:	4b1d      	ldr	r3, [pc, #116]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf20:	4b1a      	ldr	r3, [pc, #104]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	d10c      	bne.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d109      	bne.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf32:	4b16      	ldr	r3, [pc, #88]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	08db      	lsrs	r3, r3, #3
 800bf38:	f003 0303 	and.w	r3, r3, #3
 800bf3c:	4a14      	ldr	r2, [pc, #80]	; (800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf44:	e01e      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf46:	4b11      	ldr	r3, [pc, #68]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf52:	d106      	bne.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf5a:	d102      	bne.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf5c:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf60:	e010      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf62:	4b0a      	ldr	r3, [pc, #40]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf6e:	d106      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf76:	d102      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf78:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf7c:	e002      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf82:	e236      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf84:	e235      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf8a:	e232      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf8c:	58024400 	.word	0x58024400
 800bf90:	03d09000 	.word	0x03d09000
 800bf94:	003d0900 	.word	0x003d0900
 800bf98:	02faf080 	.word	0x02faf080
 800bf9c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa4:	e225      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bfa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfaa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bfae:	430b      	orrs	r3, r1
 800bfb0:	f040 8085 	bne.w	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bfb4:	4b9c      	ldr	r3, [pc, #624]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bfbc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfc4:	d06b      	beq.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfcc:	d874      	bhi.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfd4:	d056      	beq.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfdc:	d86c      	bhi.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfe4:	d03b      	beq.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfec:	d864      	bhi.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bff4:	d021      	beq.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bffc:	d85c      	bhi.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	2b00      	cmp	r3, #0
 800c002:	d004      	beq.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c00a:	d004      	beq.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c00c:	e054      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c00e:	f7fe fb5f 	bl	800a6d0 <HAL_RCC_GetPCLK1Freq>
 800c012:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c014:	e1ed      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c016:	4b84      	ldr	r3, [pc, #528]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c01e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c022:	d107      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c024:	f107 0318 	add.w	r3, r7, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fa05 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c032:	e1de      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c038:	e1db      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c03a:	4b7b      	ldr	r3, [pc, #492]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c046:	d107      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c048:	f107 030c 	add.w	r3, r7, #12
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 fb47 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c056:	e1cc      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c05c:	e1c9      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c05e:	4b72      	ldr	r3, [pc, #456]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 0304 	and.w	r3, r3, #4
 800c066:	2b04      	cmp	r3, #4
 800c068:	d109      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c06a:	4b6f      	ldr	r3, [pc, #444]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	08db      	lsrs	r3, r3, #3
 800c070:	f003 0303 	and.w	r3, r3, #3
 800c074:	4a6d      	ldr	r2, [pc, #436]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c076:	fa22 f303 	lsr.w	r3, r2, r3
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c07c:	e1b9      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c082:	e1b6      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c084:	4b68      	ldr	r3, [pc, #416]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c08c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c090:	d102      	bne.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c092:	4b67      	ldr	r3, [pc, #412]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c096:	e1ac      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c09c:	e1a9      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c09e:	4b62      	ldr	r3, [pc, #392]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0aa:	d102      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c0ac:	4b61      	ldr	r3, [pc, #388]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b0:	e19f      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b6:	e19c      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0bc:	e199      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c0be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0c2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c0c6:	430b      	orrs	r3, r1
 800c0c8:	d173      	bne.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c0ca:	4b57      	ldr	r3, [pc, #348]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0da:	d02f      	beq.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e2:	d863      	bhi.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f0:	d012      	beq.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c0f2:	e05b      	b.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f4:	4b4c      	ldr	r3, [pc, #304]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c100:	d107      	bne.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c102:	f107 0318 	add.w	r3, r7, #24
 800c106:	4618      	mov	r0, r3
 800c108:	f000 f996 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c110:	e16f      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c116:	e16c      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c118:	4b43      	ldr	r3, [pc, #268]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c124:	d107      	bne.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c126:	f107 030c 	add.w	r3, r7, #12
 800c12a:	4618      	mov	r0, r3
 800c12c:	f000 fad8 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c134:	e15d      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c13a:	e15a      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c13c:	4b3a      	ldr	r3, [pc, #232]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c144:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c146:	4b38      	ldr	r3, [pc, #224]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b04      	cmp	r3, #4
 800c150:	d10c      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	2b00      	cmp	r3, #0
 800c156:	d109      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c158:	4b33      	ldr	r3, [pc, #204]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	08db      	lsrs	r3, r3, #3
 800c15e:	f003 0303 	and.w	r3, r3, #3
 800c162:	4a32      	ldr	r2, [pc, #200]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c164:	fa22 f303 	lsr.w	r3, r2, r3
 800c168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16a:	e01e      	b.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c16c:	4b2e      	ldr	r3, [pc, #184]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c178:	d106      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c180:	d102      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c182:	4b2b      	ldr	r3, [pc, #172]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c186:	e010      	b.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c188:	4b27      	ldr	r3, [pc, #156]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c194:	d106      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c19c:	d102      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c19e:	4b25      	ldr	r3, [pc, #148]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a2:	e002      	b.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1a8:	e123      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1aa:	e122      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b0:	e11f      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c1b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1b6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c1ba:	430b      	orrs	r3, r1
 800c1bc:	d13c      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c1be:	4b1a      	ldr	r3, [pc, #104]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d004      	beq.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d4:	d012      	beq.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c1d6:	e023      	b.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1d8:	4b13      	ldr	r3, [pc, #76]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1e4:	d107      	bne.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fbcc 	bl	800c988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1f4:	e0fd      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1fa:	e0fa      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1fc:	4b0a      	ldr	r3, [pc, #40]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c208:	d107      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c20a:	f107 0318 	add.w	r3, r7, #24
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 f912 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c218:	e0eb      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c21e:	e0e8      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c220:	2300      	movs	r3, #0
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c224:	e0e5      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c226:	bf00      	nop
 800c228:	58024400 	.word	0x58024400
 800c22c:	03d09000 	.word	0x03d09000
 800c230:	003d0900 	.word	0x003d0900
 800c234:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c23c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c240:	430b      	orrs	r3, r1
 800c242:	f040 8085 	bne.w	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c246:	4b6d      	ldr	r3, [pc, #436]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c24a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c24e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c256:	d06b      	beq.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c25e:	d874      	bhi.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c266:	d056      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c26e:	d86c      	bhi.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c276:	d03b      	beq.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c27e:	d864      	bhi.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c286:	d021      	beq.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c28e:	d85c      	bhi.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	2b00      	cmp	r3, #0
 800c294:	d004      	beq.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c29c:	d004      	beq.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c29e:	e054      	b.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c2a0:	f000 f8b4 	bl	800c40c <HAL_RCCEx_GetD3PCLK1Freq>
 800c2a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2a6:	e0a4      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2a8:	4b54      	ldr	r3, [pc, #336]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2b4:	d107      	bne.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2b6:	f107 0318 	add.w	r3, r7, #24
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f8bc 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2c4:	e095      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ca:	e092      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2cc:	4b4b      	ldr	r3, [pc, #300]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2d8:	d107      	bne.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2da:	f107 030c 	add.w	r3, r7, #12
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f9fe 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e8:	e083      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ee:	e080      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2f0:	4b42      	ldr	r3, [pc, #264]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d109      	bne.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2fc:	4b3f      	ldr	r3, [pc, #252]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	08db      	lsrs	r3, r3, #3
 800c302:	f003 0303 	and.w	r3, r3, #3
 800c306:	4a3e      	ldr	r2, [pc, #248]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c308:	fa22 f303 	lsr.w	r3, r2, r3
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30e:	e070      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c314:	e06d      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c316:	4b39      	ldr	r3, [pc, #228]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c322:	d102      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c324:	4b37      	ldr	r3, [pc, #220]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c328:	e063      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c32e:	e060      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c330:	4b32      	ldr	r3, [pc, #200]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c33c:	d102      	bne.n	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c33e:	4b32      	ldr	r3, [pc, #200]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c340:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c342:	e056      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c344:	2300      	movs	r3, #0
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c348:	e053      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34e:	e050      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c354:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c358:	430b      	orrs	r3, r1
 800c35a:	d148      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c35c:	4b27      	ldr	r3, [pc, #156]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c364:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36c:	d02a      	beq.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c374:	d838      	bhi.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c382:	d00d      	beq.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c384:	e030      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c386:	4b1d      	ldr	r3, [pc, #116]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c392:	d102      	bne.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c394:	4b1c      	ldr	r3, [pc, #112]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c398:	e02b      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c39e:	e028      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3a0:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3ac:	d107      	bne.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 fae8 	bl	800c988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3bc:	e019      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c2:	e016      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3c4:	4b0d      	ldr	r3, [pc, #52]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3d0:	d107      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d2:	f107 0318 	add.w	r3, r7, #24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 f82e 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e0:	e007      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e6:	e004      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ec:	e001      	b.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3740      	adds	r7, #64	; 0x40
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	58024400 	.word	0x58024400
 800c400:	03d09000 	.word	0x03d09000
 800c404:	003d0900 	.word	0x003d0900
 800c408:	02faf080 	.word	0x02faf080

0800c40c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c410:	f7fe f92e 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800c414:	4602      	mov	r2, r0
 800c416:	4b06      	ldr	r3, [pc, #24]	; (800c430 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	091b      	lsrs	r3, r3, #4
 800c41c:	f003 0307 	and.w	r3, r3, #7
 800c420:	4904      	ldr	r1, [pc, #16]	; (800c434 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c422:	5ccb      	ldrb	r3, [r1, r3]
 800c424:	f003 031f 	and.w	r3, r3, #31
 800c428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	58024400 	.word	0x58024400
 800c434:	08017a54 	.word	0x08017a54

0800c438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c438:	b480      	push	{r7}
 800c43a:	b089      	sub	sp, #36	; 0x24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c440:	4ba1      	ldr	r3, [pc, #644]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c444:	f003 0303 	and.w	r3, r3, #3
 800c448:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c44a:	4b9f      	ldr	r3, [pc, #636]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44e:	0b1b      	lsrs	r3, r3, #12
 800c450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c454:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c456:	4b9c      	ldr	r3, [pc, #624]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	091b      	lsrs	r3, r3, #4
 800c45c:	f003 0301 	and.w	r3, r3, #1
 800c460:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c462:	4b99      	ldr	r3, [pc, #612]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c466:	08db      	lsrs	r3, r3, #3
 800c468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	fb02 f303 	mul.w	r3, r2, r3
 800c472:	ee07 3a90 	vmov	s15, r3
 800c476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c47a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 8111 	beq.w	800c6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	f000 8083 	beq.w	800c594 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	2b02      	cmp	r3, #2
 800c492:	f200 80a1 	bhi.w	800c5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d003      	beq.n	800c4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d056      	beq.n	800c550 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c4a2:	e099      	b.n	800c5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4a4:	4b88      	ldr	r3, [pc, #544]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0320 	and.w	r3, r3, #32
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d02d      	beq.n	800c50c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4b0:	4b85      	ldr	r3, [pc, #532]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	08db      	lsrs	r3, r3, #3
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	4a84      	ldr	r2, [pc, #528]	; (800c6cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	ee07 3a90 	vmov	s15, r3
 800c4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	ee07 3a90 	vmov	s15, r3
 800c4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4da:	4b7b      	ldr	r3, [pc, #492]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e2:	ee07 3a90 	vmov	s15, r3
 800c4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c506:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c50a:	e087      	b.n	800c61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c51e:	4b6a      	ldr	r3, [pc, #424]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c532:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c54e:	e065      	b.n	800c61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c562:	4b59      	ldr	r3, [pc, #356]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c56a:	ee07 3a90 	vmov	s15, r3
 800c56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c572:	ed97 6a03 	vldr	s12, [r7, #12]
 800c576:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c592:	e043      	b.n	800c61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	ee07 3a90 	vmov	s15, r3
 800c59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c59e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c6dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5a6:	4b48      	ldr	r3, [pc, #288]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5d6:	e021      	b.n	800c61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ea:	4b37      	ldr	r3, [pc, #220]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c61a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c61c:	4b2a      	ldr	r3, [pc, #168]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c620:	0a5b      	lsrs	r3, r3, #9
 800c622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c62e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c632:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c636:	edd7 6a07 	vldr	s13, [r7, #28]
 800c63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c642:	ee17 2a90 	vmov	r2, s15
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c64a:	4b1f      	ldr	r3, [pc, #124]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64e:	0c1b      	lsrs	r3, r3, #16
 800c650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c654:	ee07 3a90 	vmov	s15, r3
 800c658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c660:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c664:	edd7 6a07 	vldr	s13, [r7, #28]
 800c668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c66c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c670:	ee17 2a90 	vmov	r2, s15
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c678:	4b13      	ldr	r3, [pc, #76]	; (800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67c:	0e1b      	lsrs	r3, r3, #24
 800c67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c682:	ee07 3a90 	vmov	s15, r3
 800c686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c692:	edd7 6a07 	vldr	s13, [r7, #28]
 800c696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c69e:	ee17 2a90 	vmov	r2, s15
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c6a6:	e008      	b.n	800c6ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	609a      	str	r2, [r3, #8]
}
 800c6ba:	bf00      	nop
 800c6bc:	3724      	adds	r7, #36	; 0x24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	58024400 	.word	0x58024400
 800c6cc:	03d09000 	.word	0x03d09000
 800c6d0:	46000000 	.word	0x46000000
 800c6d4:	4c742400 	.word	0x4c742400
 800c6d8:	4a742400 	.word	0x4a742400
 800c6dc:	4c3ebc20 	.word	0x4c3ebc20

0800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b089      	sub	sp, #36	; 0x24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6e8:	4ba1      	ldr	r3, [pc, #644]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c6f2:	4b9f      	ldr	r3, [pc, #636]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f6:	0d1b      	lsrs	r3, r3, #20
 800c6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c6fe:	4b9c      	ldr	r3, [pc, #624]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	0a1b      	lsrs	r3, r3, #8
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c70a:	4b99      	ldr	r3, [pc, #612]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c70e:	08db      	lsrs	r3, r3, #3
 800c710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	fb02 f303 	mul.w	r3, r2, r3
 800c71a:	ee07 3a90 	vmov	s15, r3
 800c71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 8111 	beq.w	800c950 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	2b02      	cmp	r3, #2
 800c732:	f000 8083 	beq.w	800c83c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	2b02      	cmp	r3, #2
 800c73a:	f200 80a1 	bhi.w	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d056      	beq.n	800c7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c74a:	e099      	b.n	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c74c:	4b88      	ldr	r3, [pc, #544]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 0320 	and.w	r3, r3, #32
 800c754:	2b00      	cmp	r3, #0
 800c756:	d02d      	beq.n	800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c758:	4b85      	ldr	r3, [pc, #532]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	08db      	lsrs	r3, r3, #3
 800c75e:	f003 0303 	and.w	r3, r3, #3
 800c762:	4a84      	ldr	r2, [pc, #528]	; (800c974 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c764:	fa22 f303 	lsr.w	r3, r2, r3
 800c768:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	ee07 3a90 	vmov	s15, r3
 800c770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	ee07 3a90 	vmov	s15, r3
 800c77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c782:	4b7b      	ldr	r3, [pc, #492]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c78a:	ee07 3a90 	vmov	s15, r3
 800c78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c792:	ed97 6a03 	vldr	s12, [r7, #12]
 800c796:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7b2:	e087      	b.n	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c97c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c6:	4b6a      	ldr	r3, [pc, #424]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ce:	ee07 3a90 	vmov	s15, r3
 800c7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7f6:	e065      	b.n	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c80a:	4b59      	ldr	r3, [pc, #356]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c812:	ee07 3a90 	vmov	s15, r3
 800c816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c81e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c83a:	e043      	b.n	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c846:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c84e:	4b48      	ldr	r3, [pc, #288]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c862:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c87a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c87e:	e021      	b.n	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	ee07 3a90 	vmov	s15, r3
 800c886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c88a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c892:	4b37      	ldr	r3, [pc, #220]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8c4:	4b2a      	ldr	r3, [pc, #168]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c8:	0a5b      	lsrs	r3, r3, #9
 800c8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ce:	ee07 3a90 	vmov	s15, r3
 800c8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8de:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8ea:	ee17 2a90 	vmov	r2, s15
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c8f2:	4b1f      	ldr	r3, [pc, #124]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	0c1b      	lsrs	r3, r3, #16
 800c8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8fc:	ee07 3a90 	vmov	s15, r3
 800c900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c918:	ee17 2a90 	vmov	r2, s15
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c920:	4b13      	ldr	r3, [pc, #76]	; (800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c924:	0e1b      	lsrs	r3, r3, #24
 800c926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c946:	ee17 2a90 	vmov	r2, s15
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c94e:	e008      	b.n	800c962 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	609a      	str	r2, [r3, #8]
}
 800c962:	bf00      	nop
 800c964:	3724      	adds	r7, #36	; 0x24
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	58024400 	.word	0x58024400
 800c974:	03d09000 	.word	0x03d09000
 800c978:	46000000 	.word	0x46000000
 800c97c:	4c742400 	.word	0x4c742400
 800c980:	4a742400 	.word	0x4a742400
 800c984:	4c3ebc20 	.word	0x4c3ebc20

0800c988 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c988:	b480      	push	{r7}
 800c98a:	b089      	sub	sp, #36	; 0x24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c990:	4ba0      	ldr	r3, [pc, #640]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c99a:	4b9e      	ldr	r3, [pc, #632]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99e:	091b      	lsrs	r3, r3, #4
 800c9a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9a6:	4b9b      	ldr	r3, [pc, #620]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9aa:	f003 0301 	and.w	r3, r3, #1
 800c9ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9b0:	4b98      	ldr	r3, [pc, #608]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9b4:	08db      	lsrs	r3, r3, #3
 800c9b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	fb02 f303 	mul.w	r3, r2, r3
 800c9c0:	ee07 3a90 	vmov	s15, r3
 800c9c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 8111 	beq.w	800cbf6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	f000 8083 	beq.w	800cae2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	f200 80a1 	bhi.w	800cb26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d056      	beq.n	800ca9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c9f0:	e099      	b.n	800cb26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9f2:	4b88      	ldr	r3, [pc, #544]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0320 	and.w	r3, r3, #32
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d02d      	beq.n	800ca5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9fe:	4b85      	ldr	r3, [pc, #532]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	08db      	lsrs	r3, r3, #3
 800ca04:	f003 0303 	and.w	r3, r3, #3
 800ca08:	4a83      	ldr	r2, [pc, #524]	; (800cc18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ca0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca0e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	ee07 3a90 	vmov	s15, r3
 800ca16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	ee07 3a90 	vmov	s15, r3
 800ca20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca28:	4b7a      	ldr	r3, [pc, #488]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca30:	ee07 3a90 	vmov	s15, r3
 800ca34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca38:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca54:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca58:	e087      	b.n	800cb6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	ee07 3a90 	vmov	s15, r3
 800ca60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ca68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca6c:	4b69      	ldr	r3, [pc, #420]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca74:	ee07 3a90 	vmov	s15, r3
 800ca78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca80:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca9c:	e065      	b.n	800cb6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	ee07 3a90 	vmov	s15, r3
 800caa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cc24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800caac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cab0:	4b58      	ldr	r3, [pc, #352]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab8:	ee07 3a90 	vmov	s15, r3
 800cabc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cac0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cac4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cacc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cadc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cae0:	e043      	b.n	800cb6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	ee07 3a90 	vmov	s15, r3
 800cae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cc28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800caf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caf4:	4b47      	ldr	r3, [pc, #284]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb04:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb08:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb24:	e021      	b.n	800cb6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	ee07 3a90 	vmov	s15, r3
 800cb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cc20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb38:	4b36      	ldr	r3, [pc, #216]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb40:	ee07 3a90 	vmov	s15, r3
 800cb44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb48:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cc1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cb6a:	4b2a      	ldr	r3, [pc, #168]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb6e:	0a5b      	lsrs	r3, r3, #9
 800cb70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb74:	ee07 3a90 	vmov	s15, r3
 800cb78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb84:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb90:	ee17 2a90 	vmov	r2, s15
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cb98:	4b1e      	ldr	r3, [pc, #120]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb9c:	0c1b      	lsrs	r3, r3, #16
 800cb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbbe:	ee17 2a90 	vmov	r2, s15
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cbc6:	4b13      	ldr	r3, [pc, #76]	; (800cc14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbca:	0e1b      	lsrs	r3, r3, #24
 800cbcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbec:	ee17 2a90 	vmov	r2, s15
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cbf4:	e008      	b.n	800cc08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	609a      	str	r2, [r3, #8]
}
 800cc08:	bf00      	nop
 800cc0a:	3724      	adds	r7, #36	; 0x24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	58024400 	.word	0x58024400
 800cc18:	03d09000 	.word	0x03d09000
 800cc1c:	46000000 	.word	0x46000000
 800cc20:	4c742400 	.word	0x4c742400
 800cc24:	4a742400 	.word	0x4a742400
 800cc28:	4c3ebc20 	.word	0x4c3ebc20

0800cc2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc3a:	4b53      	ldr	r3, [pc, #332]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3e:	f003 0303 	and.w	r3, r3, #3
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	d101      	bne.n	800cc4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e099      	b.n	800cd7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc4a:	4b4f      	ldr	r3, [pc, #316]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a4e      	ldr	r2, [pc, #312]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cc50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc56:	f7f6 fe93 	bl	8003980 <HAL_GetTick>
 800cc5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc5c:	e008      	b.n	800cc70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc5e:	f7f6 fe8f 	bl	8003980 <HAL_GetTick>
 800cc62:	4602      	mov	r2, r0
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d901      	bls.n	800cc70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e086      	b.n	800cd7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc70:	4b45      	ldr	r3, [pc, #276]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1f0      	bne.n	800cc5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cc7c:	4b42      	ldr	r3, [pc, #264]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	031b      	lsls	r3, r3, #12
 800cc8a:	493f      	ldr	r1, [pc, #252]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	628b      	str	r3, [r1, #40]	; 0x28
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	025b      	lsls	r3, r3, #9
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	431a      	orrs	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	041b      	lsls	r3, r3, #16
 800ccae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ccb2:	431a      	orrs	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	061b      	lsls	r3, r3, #24
 800ccbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ccc0:	4931      	ldr	r1, [pc, #196]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ccc6:	4b30      	ldr	r3, [pc, #192]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800ccc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	695b      	ldr	r3, [r3, #20]
 800ccd2:	492d      	ldr	r1, [pc, #180]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ccd8:	4b2b      	ldr	r3, [pc, #172]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800ccda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccdc:	f023 0220 	bic.w	r2, r3, #32
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	699b      	ldr	r3, [r3, #24]
 800cce4:	4928      	ldr	r1, [pc, #160]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ccea:	4b27      	ldr	r3, [pc, #156]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800ccec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccee:	4a26      	ldr	r2, [pc, #152]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800ccf0:	f023 0310 	bic.w	r3, r3, #16
 800ccf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ccf6:	4b24      	ldr	r3, [pc, #144]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800ccf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccfa:	4b24      	ldr	r3, [pc, #144]	; (800cd8c <RCCEx_PLL2_Config+0x160>)
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	69d2      	ldr	r2, [r2, #28]
 800cd02:	00d2      	lsls	r2, r2, #3
 800cd04:	4920      	ldr	r1, [pc, #128]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd06:	4313      	orrs	r3, r2
 800cd08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd0a:	4b1f      	ldr	r3, [pc, #124]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0e:	4a1e      	ldr	r2, [pc, #120]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd10:	f043 0310 	orr.w	r3, r3, #16
 800cd14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d106      	bne.n	800cd2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd1c:	4b1a      	ldr	r3, [pc, #104]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd20:	4a19      	ldr	r2, [pc, #100]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd28:	e00f      	b.n	800cd4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d106      	bne.n	800cd3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd30:	4b15      	ldr	r3, [pc, #84]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd34:	4a14      	ldr	r2, [pc, #80]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd3c:	e005      	b.n	800cd4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd3e:	4b12      	ldr	r3, [pc, #72]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd42:	4a11      	ldr	r2, [pc, #68]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd4a:	4b0f      	ldr	r3, [pc, #60]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a0e      	ldr	r2, [pc, #56]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd56:	f7f6 fe13 	bl	8003980 <HAL_GetTick>
 800cd5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd5c:	e008      	b.n	800cd70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd5e:	f7f6 fe0f 	bl	8003980 <HAL_GetTick>
 800cd62:	4602      	mov	r2, r0
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d901      	bls.n	800cd70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e006      	b.n	800cd7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <RCCEx_PLL2_Config+0x15c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d0f0      	beq.n	800cd5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	58024400 	.word	0x58024400
 800cd8c:	ffff0007 	.word	0xffff0007

0800cd90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd9e:	4b53      	ldr	r3, [pc, #332]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda2:	f003 0303 	and.w	r3, r3, #3
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d101      	bne.n	800cdae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e099      	b.n	800cee2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cdae:	4b4f      	ldr	r3, [pc, #316]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a4e      	ldr	r2, [pc, #312]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cdb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdba:	f7f6 fde1 	bl	8003980 <HAL_GetTick>
 800cdbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdc0:	e008      	b.n	800cdd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdc2:	f7f6 fddd 	bl	8003980 <HAL_GetTick>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d901      	bls.n	800cdd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e086      	b.n	800cee2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdd4:	4b45      	ldr	r3, [pc, #276]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1f0      	bne.n	800cdc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cde0:	4b42      	ldr	r3, [pc, #264]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	051b      	lsls	r3, r3, #20
 800cdee:	493f      	ldr	r1, [pc, #252]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	628b      	str	r3, [r1, #40]	; 0x28
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	3b01      	subs	r3, #1
 800ce04:	025b      	lsls	r3, r3, #9
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	431a      	orrs	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	041b      	lsls	r3, r3, #16
 800ce12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce16:	431a      	orrs	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	061b      	lsls	r3, r3, #24
 800ce20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce24:	4931      	ldr	r1, [pc, #196]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce2a:	4b30      	ldr	r3, [pc, #192]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	492d      	ldr	r1, [pc, #180]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce3c:	4b2b      	ldr	r3, [pc, #172]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	4928      	ldr	r1, [pc, #160]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce4e:	4b27      	ldr	r3, [pc, #156]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce52:	4a26      	ldr	r2, [pc, #152]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce5a:	4b24      	ldr	r3, [pc, #144]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce5e:	4b24      	ldr	r3, [pc, #144]	; (800cef0 <RCCEx_PLL3_Config+0x160>)
 800ce60:	4013      	ands	r3, r2
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	69d2      	ldr	r2, [r2, #28]
 800ce66:	00d2      	lsls	r2, r2, #3
 800ce68:	4920      	ldr	r1, [pc, #128]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ce6e:	4b1f      	ldr	r3, [pc, #124]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce72:	4a1e      	ldr	r2, [pc, #120]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d106      	bne.n	800ce8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ce80:	4b1a      	ldr	r3, [pc, #104]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce84:	4a19      	ldr	r2, [pc, #100]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ce8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce8c:	e00f      	b.n	800ceae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d106      	bne.n	800cea2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ce94:	4b15      	ldr	r3, [pc, #84]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce98:	4a14      	ldr	r2, [pc, #80]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ce9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ce9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cea0:	e005      	b.n	800ceae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cea2:	4b12      	ldr	r3, [pc, #72]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea6:	4a11      	ldr	r2, [pc, #68]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800cea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ceac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ceae:	4b0f      	ldr	r3, [pc, #60]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a0e      	ldr	r2, [pc, #56]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ceb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceba:	f7f6 fd61 	bl	8003980 <HAL_GetTick>
 800cebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cec0:	e008      	b.n	800ced4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cec2:	f7f6 fd5d 	bl	8003980 <HAL_GetTick>
 800cec6:	4602      	mov	r2, r0
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d901      	bls.n	800ced4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ced0:	2303      	movs	r3, #3
 800ced2:	e006      	b.n	800cee2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ced4:	4b05      	ldr	r3, [pc, #20]	; (800ceec <RCCEx_PLL3_Config+0x15c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d0f0      	beq.n	800cec2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	58024400 	.word	0x58024400
 800cef0:	ffff0007 	.word	0xffff0007

0800cef4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08a      	sub	sp, #40	; 0x28
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e075      	b.n	800cff2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d105      	bne.n	800cf1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7f5 fe9d 	bl	8002c58 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2204      	movs	r2, #4
 800cf22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f868 	bl	800cffc <HAL_SD_InitCard>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e05d      	b.n	800cff2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fdaf 	bl	800daa0 <HAL_SD_GetCardStatus>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d001      	beq.n	800cf4c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e052      	b.n	800cff2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cf4c:	7e3b      	ldrb	r3, [r7, #24]
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cf52:	7e7b      	ldrb	r3, [r7, #25]
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d10a      	bne.n	800cf76 <HAL_SD_Init+0x82>
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d102      	bne.n	800cf6c <HAL_SD_Init+0x78>
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d004      	beq.n	800cf76 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf72:	659a      	str	r2, [r3, #88]	; 0x58
 800cf74:	e00b      	b.n	800cf8e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d104      	bne.n	800cf88 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf84:	659a      	str	r2, [r3, #88]	; 0x58
 800cf86:	e002      	b.n	800cf8e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fe6d 	bl	800dc74 <HAL_SD_ConfigWideBusOperation>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d001      	beq.n	800cfa4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e026      	b.n	800cff2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cfa4:	f7f6 fcec 	bl	8003980 <HAL_GetTick>
 800cfa8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cfaa:	e011      	b.n	800cfd0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cfac:	f7f6 fce8 	bl	8003980 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d109      	bne.n	800cfd0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfc2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e010      	b.n	800cff2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 ff61 	bl	800de98 <HAL_SD_GetCardState>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b04      	cmp	r3, #4
 800cfda:	d1e7      	bne.n	800cfac <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3728      	adds	r7, #40	; 0x28
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
	...

0800cffc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cffc:	b590      	push	{r4, r7, lr}
 800cffe:	b08d      	sub	sp, #52	; 0x34
 800d000:	af02      	add	r7, sp, #8
 800d002:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d004:	2300      	movs	r3, #0
 800d006:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d008:	2300      	movs	r3, #0
 800d00a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d00c:	2300      	movs	r3, #0
 800d00e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d010:	2300      	movs	r3, #0
 800d012:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d014:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d018:	f04f 0100 	mov.w	r1, #0
 800d01c:	f7fe fd24 	bl	800ba68 <HAL_RCCEx_GetPeriphCLKFreq>
 800d020:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d024:	2b00      	cmp	r3, #0
 800d026:	d109      	bne.n	800d03c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d036:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e070      	b.n	800d11e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	0a1b      	lsrs	r3, r3, #8
 800d040:	4a39      	ldr	r2, [pc, #228]	; (800d128 <HAL_SD_InitCard+0x12c>)
 800d042:	fba2 2303 	umull	r2, r3, r2, r3
 800d046:	091b      	lsrs	r3, r3, #4
 800d048:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681c      	ldr	r4, [r3, #0]
 800d04e:	466a      	mov	r2, sp
 800d050:	f107 0318 	add.w	r3, r7, #24
 800d054:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d058:	e882 0003 	stmia.w	r2, {r0, r1}
 800d05c:	f107 030c 	add.w	r3, r7, #12
 800d060:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d062:	4620      	mov	r0, r4
 800d064:	f004 fe6c 	bl	8011d40 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f004 feaf 	bl	8011dd0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d005      	beq.n	800d084 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d082:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d086:	2b00      	cmp	r3, #0
 800d088:	d007      	beq.n	800d09a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d08a:	4a28      	ldr	r2, [pc, #160]	; (800d12c <HAL_SD_InitCard+0x130>)
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d092:	3301      	adds	r3, #1
 800d094:	4618      	mov	r0, r3
 800d096:	f7f6 fc7f 	bl	8003998 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 ffea 	bl	800e074 <SD_PowerON>
 800d0a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e02e      	b.n	800d11e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 ff09 	bl	800ded8 <SD_InitCard>
 800d0c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00b      	beq.n	800d0e6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e01b      	b.n	800d11e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f004 ff04 	bl	8011efc <SDMMC_CmdBlockLength>
 800d0f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00f      	beq.n	800d11c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a0b      	ldr	r2, [pc, #44]	; (800d130 <HAL_SD_InitCard+0x134>)
 800d102:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	431a      	orrs	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	372c      	adds	r7, #44	; 0x2c
 800d122:	46bd      	mov	sp, r7
 800d124:	bd90      	pop	{r4, r7, pc}
 800d126:	bf00      	nop
 800d128:	014f8b59 	.word	0x014f8b59
 800d12c:	00012110 	.word	0x00012110
 800d130:	1fe00fff 	.word	0x1fe00fff

0800d134 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08c      	sub	sp, #48	; 0x30
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d107      	bne.n	800d15c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d150:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	e08d      	b.n	800d278 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b01      	cmp	r3, #1
 800d166:	f040 8086 	bne.w	800d276 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	441a      	add	r2, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d907      	bls.n	800d18e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d182:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e074      	b.n	800d278 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2203      	movs	r2, #3
 800d192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2200      	movs	r2, #0
 800d19c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	025a      	lsls	r2, r3, #9
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d002      	beq.n	800d1ba <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	025b      	lsls	r3, r3, #9
 800d1b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d1be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	025b      	lsls	r3, r3, #9
 800d1c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d1c6:	2390      	movs	r3, #144	; 0x90
 800d1c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f107 0210 	add.w	r2, r7, #16
 800d1de:	4611      	mov	r1, r2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f004 fe5f 	bl	8011ea4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68da      	ldr	r2, [r3, #12]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1f4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2201      	movs	r2, #1
 800d204:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d90a      	bls.n	800d222 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2282      	movs	r2, #130	; 0x82
 800d210:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d218:	4618      	mov	r0, r3
 800d21a:	f004 feb5 	bl	8011f88 <SDMMC_CmdReadMultiBlock>
 800d21e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d220:	e009      	b.n	800d236 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2281      	movs	r2, #129	; 0x81
 800d226:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d22e:	4618      	mov	r0, r3
 800d230:	f004 fe87 	bl	8011f42 <SDMMC_CmdReadSingleBlock>
 800d234:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d012      	beq.n	800d262 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a0f      	ldr	r2, [pc, #60]	; (800d280 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24a:	431a      	orrs	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	e00a      	b.n	800d278 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d270:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	e000      	b.n	800d278 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d276:	2302      	movs	r3, #2
  }
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3730      	adds	r7, #48	; 0x30
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	1fe00fff 	.word	0x1fe00fff

0800d284 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b08c      	sub	sp, #48	; 0x30
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
 800d290:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d107      	bne.n	800d2ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e08d      	b.n	800d3c8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	f040 8086 	bne.w	800d3c6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	441a      	add	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d907      	bls.n	800d2de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e074      	b.n	800d3c8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2203      	movs	r2, #3
 800d2e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	025a      	lsls	r2, r3, #9
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d300:	2b01      	cmp	r3, #1
 800d302:	d002      	beq.n	800d30a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d306:	025b      	lsls	r3, r3, #9
 800d308:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d30a:	f04f 33ff 	mov.w	r3, #4294967295
 800d30e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	025b      	lsls	r3, r3, #9
 800d314:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d316:	2390      	movs	r3, #144	; 0x90
 800d318:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d31e:	2300      	movs	r3, #0
 800d320:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d322:	2300      	movs	r3, #0
 800d324:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f107 0210 	add.w	r2, r7, #16
 800d32e:	4611      	mov	r1, r2
 800d330:	4618      	mov	r0, r3
 800d332:	f004 fdb7 	bl	8011ea4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	68da      	ldr	r2, [r3, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d344:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2201      	movs	r2, #1
 800d354:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d90a      	bls.n	800d372 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	22a0      	movs	r2, #160	; 0xa0
 800d360:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d368:	4618      	mov	r0, r3
 800d36a:	f004 fe53 	bl	8012014 <SDMMC_CmdWriteMultiBlock>
 800d36e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d370:	e009      	b.n	800d386 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2290      	movs	r2, #144	; 0x90
 800d376:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d37e:	4618      	mov	r0, r3
 800d380:	f004 fe25 	bl	8011fce <SDMMC_CmdWriteSingleBlock>
 800d384:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d012      	beq.n	800d3b2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a0f      	ldr	r2, [pc, #60]	; (800d3d0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39a:	431a      	orrs	r2, r3
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e00a      	b.n	800d3c8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d3c0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e000      	b.n	800d3c8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3c6:	2302      	movs	r3, #2
  }
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3730      	adds	r7, #48	; 0x30
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	1fe00fff 	.word	0x1fe00fff

0800d3d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d008      	beq.n	800d402 <HAL_SD_IRQHandler+0x2e>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f003 0308 	and.w	r3, r3, #8
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d003      	beq.n	800d402 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f001 f926 	bl	800e64c <SD_Read_IT>
 800d400:	e19a      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 80ac 	beq.w	800d56a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d41a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	4b59      	ldr	r3, [pc, #356]	; (800d58c <HAL_SD_IRQHandler+0x1b8>)
 800d428:	400b      	ands	r3, r1
 800d42a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d43a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68da      	ldr	r2, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d44a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f003 0308 	and.w	r3, r3, #8
 800d452:	2b00      	cmp	r3, #0
 800d454:	d038      	beq.n	800d4c8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f003 0302 	and.w	r3, r3, #2
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d104      	bne.n	800d46a <HAL_SD_IRQHandler+0x96>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 0320 	and.w	r3, r3, #32
 800d466:	2b00      	cmp	r3, #0
 800d468:	d011      	beq.n	800d48e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4618      	mov	r0, r3
 800d470:	f004 fdf4 	bl	801205c <SDMMC_CmdStopTransfer>
 800d474:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d008      	beq.n	800d48e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	431a      	orrs	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f95b 	bl	800d744 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a3f      	ldr	r2, [pc, #252]	; (800d590 <HAL_SD_IRQHandler+0x1bc>)
 800d494:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d104      	bne.n	800d4b8 <HAL_SD_IRQHandler+0xe4>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f003 0302 	and.w	r3, r3, #2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f006 fdf5 	bl	80140a8 <HAL_SD_RxCpltCallback>
 800d4be:	e13b      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f006 fde7 	bl	8014094 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d4c6:	e137      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 8132 	beq.w	800d738 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f003 0302 	and.w	r3, r3, #2
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d104      	bne.n	800d500 <HAL_SD_IRQHandler+0x12c>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f003 0320 	and.w	r3, r3, #32
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d011      	beq.n	800d524 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4618      	mov	r0, r3
 800d506:	f004 fda9 	bl	801205c <SDMMC_CmdStopTransfer>
 800d50a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d008      	beq.n	800d524 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	431a      	orrs	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f910 	bl	800d744 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f003 0310 	and.w	r3, r3, #16
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d104      	bne.n	800d546 <HAL_SD_IRQHandler+0x172>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f003 0320 	and.w	r3, r3, #32
 800d542:	2b00      	cmp	r3, #0
 800d544:	d002      	beq.n	800d54c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f006 fda4 	bl	8014094 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d105      	bne.n	800d562 <HAL_SD_IRQHandler+0x18e>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f003 0302 	and.w	r3, r3, #2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 80eb 	beq.w	800d738 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f006 fda0 	bl	80140a8 <HAL_SD_RxCpltCallback>
}
 800d568:	e0e6      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00d      	beq.n	800d594 <HAL_SD_IRQHandler+0x1c0>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d008      	beq.n	800d594 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f001 f8a8 	bl	800e6d8 <SD_Write_IT>
 800d588:	e0d6      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
 800d58a:	bf00      	nop
 800d58c:	ffff3ec5 	.word	0xffff3ec5
 800d590:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f000 809d 	beq.w	800d6de <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5aa:	f003 0302 	and.w	r3, r3, #2
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d005      	beq.n	800d5be <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	f043 0202 	orr.w	r2, r3, #2
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c4:	f003 0308 	and.w	r3, r3, #8
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d005      	beq.n	800d5d8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d0:	f043 0208 	orr.w	r2, r3, #8
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5de:	f003 0320 	and.w	r3, r3, #32
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d005      	beq.n	800d5f2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ea:	f043 0220 	orr.w	r2, r3, #32
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f8:	f003 0310 	and.w	r3, r3, #16
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d005      	beq.n	800d60c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d604:	f043 0210 	orr.w	r2, r3, #16
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a4b      	ldr	r2, [pc, #300]	; (800d740 <HAL_SD_IRQHandler+0x36c>)
 800d612:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d622:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68da      	ldr	r2, [r3, #12]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d632:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d642:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68da      	ldr	r2, [r3, #12]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d652:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4618      	mov	r0, r3
 800d65a:	f004 fcff 	bl	801205c <SDMMC_CmdStopTransfer>
 800d65e:	4602      	mov	r2, r0
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d664:	431a      	orrs	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68da      	ldr	r2, [r3, #12]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d678:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d682:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f003 0308 	and.w	r3, r3, #8
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00a      	beq.n	800d6a4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f851 	bl	800d744 <HAL_SD_ErrorCallback>
}
 800d6a2:	e049      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d044      	beq.n	800d738 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d040      	beq.n	800d738 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d6c4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f834 	bl	800d744 <HAL_SD_ErrorCallback>
}
 800d6dc:	e02c      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d025      	beq.n	800d738 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6fc:	f003 0304 	and.w	r3, r3, #4
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10c      	bne.n	800d71e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f003 0320 	and.w	r3, r3, #32
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d003      	beq.n	800d716 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f001 f84a 	bl	800e7a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d714:	e010      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f001 f832 	bl	800e780 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d71c:	e00c      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f003 0320 	and.w	r3, r3, #32
 800d724:	2b00      	cmp	r3, #0
 800d726:	d003      	beq.n	800d730 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 f833 	bl	800e794 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d72e:	e003      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f001 f81b 	bl	800e76c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d736:	e7ff      	b.n	800d738 <HAL_SD_IRQHandler+0x364>
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	18000f3a 	.word	0x18000f3a

0800d744 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d74c:	bf00      	nop
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d766:	0f9b      	lsrs	r3, r3, #30
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d772:	0e9b      	lsrs	r3, r3, #26
 800d774:	b2db      	uxtb	r3, r3
 800d776:	f003 030f 	and.w	r3, r3, #15
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d784:	0e1b      	lsrs	r3, r3, #24
 800d786:	b2db      	uxtb	r3, r3
 800d788:	f003 0303 	and.w	r3, r3, #3
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d796:	0c1b      	lsrs	r3, r3, #16
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7a2:	0a1b      	lsrs	r3, r3, #8
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7b8:	0d1b      	lsrs	r3, r3, #20
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7c4:	0c1b      	lsrs	r3, r3, #16
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	f003 030f 	and.w	r3, r3, #15
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7d6:	0bdb      	lsrs	r3, r3, #15
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7e8:	0b9b      	lsrs	r3, r3, #14
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	f003 0301 	and.w	r3, r3, #1
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7fa:	0b5b      	lsrs	r3, r3, #13
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	b2da      	uxtb	r2, r3
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d80c:	0b1b      	lsrs	r3, r3, #12
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	b2da      	uxtb	r2, r3
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	2200      	movs	r2, #0
 800d81e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d824:	2b00      	cmp	r3, #0
 800d826:	d163      	bne.n	800d8f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d82c:	009a      	lsls	r2, r3, #2
 800d82e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d832:	4013      	ands	r3, r2
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d838:	0f92      	lsrs	r2, r2, #30
 800d83a:	431a      	orrs	r2, r3
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d844:	0edb      	lsrs	r3, r3, #27
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 0307 	and.w	r3, r3, #7
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d856:	0e1b      	lsrs	r3, r3, #24
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0307 	and.w	r3, r3, #7
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d868:	0d5b      	lsrs	r3, r3, #21
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	f003 0307 	and.w	r3, r3, #7
 800d870:	b2da      	uxtb	r2, r3
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d87a:	0c9b      	lsrs	r3, r3, #18
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	f003 0307 	and.w	r3, r3, #7
 800d882:	b2da      	uxtb	r2, r3
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d88c:	0bdb      	lsrs	r3, r3, #15
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	f003 0307 	and.w	r3, r3, #7
 800d894:	b2da      	uxtb	r2, r3
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	1c5a      	adds	r2, r3, #1
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	7e1b      	ldrb	r3, [r3, #24]
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	f003 0307 	and.w	r3, r3, #7
 800d8ae:	3302      	adds	r3, #2
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d8ba:	fb03 f202 	mul.w	r2, r3, r2
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	7a1b      	ldrb	r3, [r3, #8]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 030f 	and.w	r3, r3, #15
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	409a      	lsls	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d8dc:	0a52      	lsrs	r2, r2, #9
 800d8de:	fb03 f202 	mul.w	r2, r3, r2
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8ec:	655a      	str	r2, [r3, #84]	; 0x54
 800d8ee:	e031      	b.n	800d954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d11d      	bne.n	800d934 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8fc:	041b      	lsls	r3, r3, #16
 800d8fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d906:	0c1b      	lsrs	r3, r3, #16
 800d908:	431a      	orrs	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	3301      	adds	r3, #1
 800d914:	029a      	lsls	r2, r3, #10
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d928:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	655a      	str	r2, [r3, #84]	; 0x54
 800d932:	e00f      	b.n	800d954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a58      	ldr	r2, [pc, #352]	; (800da9c <HAL_SD_GetCardCSD+0x344>)
 800d93a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	e09d      	b.n	800da90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d958:	0b9b      	lsrs	r3, r3, #14
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	f003 0301 	and.w	r3, r3, #1
 800d960:	b2da      	uxtb	r2, r3
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d96a:	09db      	lsrs	r3, r3, #7
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d972:	b2da      	uxtb	r2, r3
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d982:	b2da      	uxtb	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d98c:	0fdb      	lsrs	r3, r3, #31
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d998:	0f5b      	lsrs	r3, r3, #29
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f003 0303 	and.w	r3, r3, #3
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9aa:	0e9b      	lsrs	r3, r3, #26
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	f003 0307 	and.w	r3, r3, #7
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9bc:	0d9b      	lsrs	r3, r3, #22
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f003 030f 	and.w	r3, r3, #15
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ce:	0d5b      	lsrs	r3, r3, #21
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ea:	0c1b      	lsrs	r3, r3, #16
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9fe:	0bdb      	lsrs	r3, r3, #15
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f003 0301 	and.w	r3, r3, #1
 800da06:	b2da      	uxtb	r2, r3
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da12:	0b9b      	lsrs	r3, r3, #14
 800da14:	b2db      	uxtb	r3, r3
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da26:	0b5b      	lsrs	r3, r3, #13
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3a:	0b1b      	lsrs	r3, r3, #12
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 0301 	and.w	r3, r3, #1
 800da42:	b2da      	uxtb	r2, r3
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4e:	0a9b      	lsrs	r3, r3, #10
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 0303 	and.w	r3, r3, #3
 800da56:	b2da      	uxtb	r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da62:	0a1b      	lsrs	r3, r3, #8
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 0303 	and.w	r3, r3, #3
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da76:	085b      	lsrs	r3, r3, #1
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da7e:	b2da      	uxtb	r2, r3
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	2201      	movs	r2, #1
 800da8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	1fe00fff 	.word	0x1fe00fff

0800daa0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b094      	sub	sp, #80	; 0x50
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800daaa:	2300      	movs	r3, #0
 800daac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b03      	cmp	r3, #3
 800daba:	d101      	bne.n	800dac0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e0a7      	b.n	800dc10 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dac0:	f107 0308 	add.w	r3, r7, #8
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fb62 	bl	800e190 <SD_SendSDStatus>
 800dacc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d011      	beq.n	800daf8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a4f      	ldr	r2, [pc, #316]	; (800dc18 <HAL_SD_GetCardStatus+0x178>)
 800dada:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dae2:	431a      	orrs	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800daf6:	e070      	b.n	800dbda <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	099b      	lsrs	r3, r3, #6
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	f003 0303 	and.w	r3, r3, #3
 800db02:	b2da      	uxtb	r2, r3
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	095b      	lsrs	r3, r3, #5
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	b2da      	uxtb	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	0a1b      	lsrs	r3, r3, #8
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db22:	b29a      	uxth	r2, r3
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	0e1b      	lsrs	r3, r3, #24
 800db28:	b29b      	uxth	r3, r3
 800db2a:	4313      	orrs	r3, r2
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	061a      	lsls	r2, r3, #24
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	021b      	lsls	r3, r3, #8
 800db3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db3e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	0a1b      	lsrs	r3, r3, #8
 800db44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db48:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	0e1b      	lsrs	r3, r3, #24
 800db4e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	0a1b      	lsrs	r3, r3, #8
 800db60:	b2da      	uxtb	r2, r3
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	0d1b      	lsrs	r3, r3, #20
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	f003 030f 	and.w	r3, r3, #15
 800db70:	b2da      	uxtb	r2, r3
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	0c1b      	lsrs	r3, r3, #16
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db80:	b29a      	uxth	r2, r3
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	b29b      	uxth	r3, r3
 800db86:	b2db      	uxtb	r3, r3
 800db88:	b29b      	uxth	r3, r3
 800db8a:	4313      	orrs	r3, r2
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	0a9b      	lsrs	r3, r3, #10
 800db96:	b2db      	uxtb	r3, r3
 800db98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	0a1b      	lsrs	r3, r3, #8
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	f003 0303 	and.w	r3, r3, #3
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	091b      	lsrs	r3, r3, #4
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f003 030f 	and.w	r3, r3, #15
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	f003 030f 	and.w	r3, r3, #15
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	0e1b      	lsrs	r3, r3, #24
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f004 f98a 	bl	8011efc <SDMMC_CmdBlockLength>
 800dbe8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00d      	beq.n	800dc0c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a08      	ldr	r2, [pc, #32]	; (800dc18 <HAL_SD_GetCardStatus+0x178>)
 800dbf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbfc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc06:	2301      	movs	r3, #1
 800dc08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dc0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3750      	adds	r7, #80	; 0x50
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	1fe00fff 	.word	0x1fe00fff

0800dc1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b083      	sub	sp, #12
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc74:	b590      	push	{r4, r7, lr}
 800dc76:	b08d      	sub	sp, #52	; 0x34
 800dc78:	af02      	add	r7, sp, #8
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2203      	movs	r2, #3
 800dc88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc90:	2b03      	cmp	r3, #3
 800dc92:	d02e      	beq.n	800dcf2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc9a:	d106      	bne.n	800dcaa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	635a      	str	r2, [r3, #52]	; 0x34
 800dca8:	e029      	b.n	800dcfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcb0:	d10a      	bne.n	800dcc8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fb64 	bl	800e380 <SD_WideBus_Enable>
 800dcb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcbe:	6a3b      	ldr	r3, [r7, #32]
 800dcc0:	431a      	orrs	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	635a      	str	r2, [r3, #52]	; 0x34
 800dcc6:	e01a      	b.n	800dcfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10a      	bne.n	800dce4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 fba1 	bl	800e416 <SD_WideBus_Disable>
 800dcd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	431a      	orrs	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	635a      	str	r2, [r3, #52]	; 0x34
 800dce2:	e00c      	b.n	800dcfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	635a      	str	r2, [r3, #52]	; 0x34
 800dcf0:	e005      	b.n	800dcfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d007      	beq.n	800dd16 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a5f      	ldr	r2, [pc, #380]	; (800de88 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd14:	e096      	b.n	800de44 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dd16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dd1a:	f04f 0100 	mov.w	r1, #0
 800dd1e:	f7fd fea3 	bl	800ba68 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd22:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 8083 	beq.w	800de32 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	695a      	ldr	r2, [r3, #20]
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	4950      	ldr	r1, [pc, #320]	; (800de8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd4a:	fba1 1303 	umull	r1, r3, r1, r3
 800dd4e:	0e1b      	lsrs	r3, r3, #24
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d303      	bcc.n	800dd5c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	695b      	ldr	r3, [r3, #20]
 800dd58:	61bb      	str	r3, [r7, #24]
 800dd5a:	e05a      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd64:	d103      	bne.n	800dd6e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	61bb      	str	r3, [r7, #24]
 800dd6c:	e051      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd76:	d126      	bne.n	800ddc6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	695b      	ldr	r3, [r3, #20]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10e      	bne.n	800dd9e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	4a43      	ldr	r2, [pc, #268]	; (800de90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d906      	bls.n	800dd96 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	4a40      	ldr	r2, [pc, #256]	; (800de8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd90:	0e5b      	lsrs	r3, r3, #25
 800dd92:	61bb      	str	r3, [r7, #24]
 800dd94:	e03d      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	61bb      	str	r3, [r7, #24]
 800dd9c:	e039      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	695b      	ldr	r3, [r3, #20]
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	69fa      	ldr	r2, [r7, #28]
 800dda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddaa:	4a39      	ldr	r2, [pc, #228]	; (800de90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d906      	bls.n	800ddbe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	4a36      	ldr	r2, [pc, #216]	; (800de8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddb4:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb8:	0e5b      	lsrs	r3, r3, #25
 800ddba:	61bb      	str	r3, [r7, #24]
 800ddbc:	e029      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	61bb      	str	r3, [r7, #24]
 800ddc4:	e025      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10e      	bne.n	800ddec <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	4a30      	ldr	r2, [pc, #192]	; (800de94 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d906      	bls.n	800dde4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	4a2c      	ldr	r2, [pc, #176]	; (800de8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddda:	fba2 2303 	umull	r2, r3, r2, r3
 800ddde:	0e1b      	lsrs	r3, r3, #24
 800dde0:	61bb      	str	r3, [r7, #24]
 800dde2:	e016      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	61bb      	str	r3, [r7, #24]
 800ddea:	e012      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	69fa      	ldr	r2, [r7, #28]
 800ddf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddf8:	4a26      	ldr	r2, [pc, #152]	; (800de94 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d906      	bls.n	800de0c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	4a22      	ldr	r2, [pc, #136]	; (800de8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de02:	fba2 2303 	umull	r2, r3, r2, r3
 800de06:	0e1b      	lsrs	r3, r3, #24
 800de08:	61bb      	str	r3, [r7, #24]
 800de0a:	e002      	b.n	800de12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681c      	ldr	r4, [r3, #0]
 800de16:	466a      	mov	r2, sp
 800de18:	f107 0314 	add.w	r3, r7, #20
 800de1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de20:	e882 0003 	stmia.w	r2, {r0, r1}
 800de24:	f107 0308 	add.w	r3, r7, #8
 800de28:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de2a:	4620      	mov	r0, r4
 800de2c:	f003 ff88 	bl	8011d40 <SDMMC_Init>
 800de30:	e008      	b.n	800de44 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de4c:	4618      	mov	r0, r3
 800de4e:	f004 f855 	bl	8011efc <SDMMC_CmdBlockLength>
 800de52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de54:	6a3b      	ldr	r3, [r7, #32]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00c      	beq.n	800de74 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a0a      	ldr	r2, [pc, #40]	; (800de88 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	431a      	orrs	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2201      	movs	r2, #1
 800de78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800de7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800de80:	4618      	mov	r0, r3
 800de82:	372c      	adds	r7, #44	; 0x2c
 800de84:	46bd      	mov	sp, r7
 800de86:	bd90      	pop	{r4, r7, pc}
 800de88:	1fe00fff 	.word	0x1fe00fff
 800de8c:	55e63b89 	.word	0x55e63b89
 800de90:	02faf080 	.word	0x02faf080
 800de94:	017d7840 	.word	0x017d7840

0800de98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dea0:	2300      	movs	r3, #0
 800dea2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dea4:	f107 030c 	add.w	r3, r7, #12
 800dea8:	4619      	mov	r1, r3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fa40 	bl	800e330 <SD_SendStatus>
 800deb0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d005      	beq.n	800dec4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	431a      	orrs	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	0a5b      	lsrs	r3, r3, #9
 800dec8:	f003 030f 	and.w	r3, r3, #15
 800decc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dece:	693b      	ldr	r3, [r7, #16]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3718      	adds	r7, #24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b090      	sub	sp, #64	; 0x40
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dee0:	2300      	movs	r3, #0
 800dee2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dee4:	f7f5 fd4c 	bl	8003980 <HAL_GetTick>
 800dee8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4618      	mov	r0, r3
 800def0:	f003 ff7f 	bl	8011df2 <SDMMC_GetPowerState>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d102      	bne.n	800df00 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800defa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800defe:	e0b5      	b.n	800e06c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df04:	2b03      	cmp	r3, #3
 800df06:	d02e      	beq.n	800df66 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f004 f9ca 	bl	80122a6 <SDMMC_CmdSendCID>
 800df12:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800df14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <SD_InitCard+0x46>
    {
      return errorstate;
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	e0a6      	b.n	800e06c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2100      	movs	r1, #0
 800df24:	4618      	mov	r0, r3
 800df26:	f003 ffaa 	bl	8011e7e <SDMMC_GetResponse>
 800df2a:	4602      	mov	r2, r0
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2104      	movs	r1, #4
 800df36:	4618      	mov	r0, r3
 800df38:	f003 ffa1 	bl	8011e7e <SDMMC_GetResponse>
 800df3c:	4602      	mov	r2, r0
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2108      	movs	r1, #8
 800df48:	4618      	mov	r0, r3
 800df4a:	f003 ff98 	bl	8011e7e <SDMMC_GetResponse>
 800df4e:	4602      	mov	r2, r0
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	210c      	movs	r1, #12
 800df5a:	4618      	mov	r0, r3
 800df5c:	f003 ff8f 	bl	8011e7e <SDMMC_GetResponse>
 800df60:	4602      	mov	r2, r0
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	d01d      	beq.n	800dfaa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800df6e:	e019      	b.n	800dfa4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f107 020a 	add.w	r2, r7, #10
 800df78:	4611      	mov	r1, r2
 800df7a:	4618      	mov	r0, r3
 800df7c:	f004 f9d2 	bl	8012324 <SDMMC_CmdSetRelAdd>
 800df80:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <SD_InitCard+0xb4>
      {
        return errorstate;
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	e06f      	b.n	800e06c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800df8c:	f7f5 fcf8 	bl	8003980 <HAL_GetTick>
 800df90:	4602      	mov	r2, r0
 800df92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	f241 3287 	movw	r2, #4999	; 0x1387
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d902      	bls.n	800dfa4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800df9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfa2:	e063      	b.n	800e06c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dfa4:	897b      	ldrh	r3, [r7, #10]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0e2      	beq.n	800df70 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfae:	2b03      	cmp	r3, #3
 800dfb0:	d036      	beq.n	800e020 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dfb2:	897b      	ldrh	r3, [r7, #10]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfc2:	041b      	lsls	r3, r3, #16
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	f004 f98c 	bl	80122e4 <SDMMC_CmdSendCSD>
 800dfcc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <SD_InitCard+0x100>
    {
      return errorstate;
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd6:	e049      	b.n	800e06c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2100      	movs	r1, #0
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f003 ff4d 	bl	8011e7e <SDMMC_GetResponse>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2104      	movs	r1, #4
 800dff0:	4618      	mov	r0, r3
 800dff2:	f003 ff44 	bl	8011e7e <SDMMC_GetResponse>
 800dff6:	4602      	mov	r2, r0
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2108      	movs	r1, #8
 800e002:	4618      	mov	r0, r3
 800e004:	f003 ff3b 	bl	8011e7e <SDMMC_GetResponse>
 800e008:	4602      	mov	r2, r0
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	210c      	movs	r1, #12
 800e014:	4618      	mov	r0, r3
 800e016:	f003 ff32 	bl	8011e7e <SDMMC_GetResponse>
 800e01a:	4602      	mov	r2, r0
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2104      	movs	r1, #4
 800e026:	4618      	mov	r0, r3
 800e028:	f003 ff29 	bl	8011e7e <SDMMC_GetResponse>
 800e02c:	4603      	mov	r3, r0
 800e02e:	0d1a      	lsrs	r2, r3, #20
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e034:	f107 030c 	add.w	r3, r7, #12
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff fb8c 	bl	800d758 <HAL_SD_GetCardCSD>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e046:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e04a:	e00f      	b.n	800e06c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e054:	041b      	lsls	r3, r3, #16
 800e056:	4619      	mov	r1, r3
 800e058:	4610      	mov	r0, r2
 800e05a:	f004 f83b 	bl	80120d4 <SDMMC_CmdSelDesel>
 800e05e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <SD_InitCard+0x192>
  {
    return errorstate;
 800e066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e068:	e000      	b.n	800e06c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3740      	adds	r7, #64	; 0x40
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e07c:	2300      	movs	r3, #0
 800e07e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e080:	2300      	movs	r3, #0
 800e082:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e084:	2300      	movs	r3, #0
 800e086:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f004 f844 	bl	801211a <SDMMC_CmdGoIdleState>
 800e092:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	e072      	b.n	800e184 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f004 f857 	bl	8012156 <SDMMC_CmdOperCond>
 800e0a8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0b0:	d10d      	bne.n	800e0ce <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f004 f82c 	bl	801211a <SDMMC_CmdGoIdleState>
 800e0c2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d004      	beq.n	800e0d4 <SD_PowerON+0x60>
    {
      return errorstate;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	e05a      	b.n	800e184 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d137      	bne.n	800e14c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f004 f857 	bl	8012196 <SDMMC_CmdAppCommand>
 800e0e8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d02d      	beq.n	800e14c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0f4:	e046      	b.n	800e184 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f004 f84a 	bl	8012196 <SDMMC_CmdAppCommand>
 800e102:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <SD_PowerON+0x9a>
    {
      return errorstate;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	e03a      	b.n	800e184 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	491e      	ldr	r1, [pc, #120]	; (800e18c <SD_PowerON+0x118>)
 800e114:	4618      	mov	r0, r3
 800e116:	f004 f861 	bl	80121dc <SDMMC_CmdAppOperCommand>
 800e11a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e122:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e126:	e02d      	b.n	800e184 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2100      	movs	r1, #0
 800e12e:	4618      	mov	r0, r3
 800e130:	f003 fea5 	bl	8011e7e <SDMMC_GetResponse>
 800e134:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	0fdb      	lsrs	r3, r3, #31
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d101      	bne.n	800e142 <SD_PowerON+0xce>
 800e13e:	2301      	movs	r3, #1
 800e140:	e000      	b.n	800e144 <SD_PowerON+0xd0>
 800e142:	2300      	movs	r3, #0
 800e144:	613b      	str	r3, [r7, #16]

    count++;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	3301      	adds	r3, #1
 800e14a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e152:	4293      	cmp	r3, r2
 800e154:	d802      	bhi.n	800e15c <SD_PowerON+0xe8>
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d0cc      	beq.n	800e0f6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e162:	4293      	cmp	r3, r2
 800e164:	d902      	bls.n	800e16c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e16a:	e00b      	b.n	800e184 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	c1100000 	.word	0xc1100000

0800e190 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b08c      	sub	sp, #48	; 0x30
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e19a:	f7f5 fbf1 	bl	8003980 <HAL_GetTick>
 800e19e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f003 fe67 	bl	8011e7e <SDMMC_GetResponse>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1ba:	d102      	bne.n	800e1c2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1c0:	e0b0      	b.n	800e324 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2140      	movs	r1, #64	; 0x40
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f003 fe97 	bl	8011efc <SDMMC_CmdBlockLength>
 800e1ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d005      	beq.n	800e1e2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	e0a0      	b.n	800e324 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ea:	041b      	lsls	r3, r3, #16
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	f003 ffd1 	bl	8012196 <SDMMC_CmdAppCommand>
 800e1f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d005      	beq.n	800e208 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	e08d      	b.n	800e324 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e208:	f04f 33ff 	mov.w	r3, #4294967295
 800e20c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e20e:	2340      	movs	r3, #64	; 0x40
 800e210:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e212:	2360      	movs	r3, #96	; 0x60
 800e214:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e216:	2302      	movs	r3, #2
 800e218:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e21e:	2301      	movs	r3, #1
 800e220:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f107 0208 	add.w	r2, r7, #8
 800e22a:	4611      	mov	r1, r2
 800e22c:	4618      	mov	r0, r3
 800e22e:	f003 fe39 	bl	8011ea4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4618      	mov	r0, r3
 800e238:	f004 f8b9 	bl	80123ae <SDMMC_CmdStatusRegister>
 800e23c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d02b      	beq.n	800e29c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	e069      	b.n	800e324 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d013      	beq.n	800e286 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e25e:	2300      	movs	r3, #0
 800e260:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e262:	e00d      	b.n	800e280 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4618      	mov	r0, r3
 800e26a:	f003 fd93 	bl	8011d94 <SDMMC_ReadFIFO>
 800e26e:	4602      	mov	r2, r0
 800e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e272:	601a      	str	r2, [r3, #0]
        pData++;
 800e274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e276:	3304      	adds	r3, #4
 800e278:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	3301      	adds	r3, #1
 800e27e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	2b07      	cmp	r3, #7
 800e284:	d9ee      	bls.n	800e264 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e286:	f7f5 fb7b 	bl	8003980 <HAL_GetTick>
 800e28a:	4602      	mov	r2, r0
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e294:	d102      	bne.n	800e29c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e296:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e29a:	e043      	b.n	800e324 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d0d2      	beq.n	800e250 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b0:	f003 0308 	and.w	r3, r3, #8
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e2b8:	2308      	movs	r3, #8
 800e2ba:	e033      	b.n	800e324 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c2:	f003 0302 	and.w	r3, r3, #2
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e02a      	b.n	800e324 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	f003 0320 	and.w	r3, r3, #32
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d017      	beq.n	800e30c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e2dc:	2320      	movs	r3, #32
 800e2de:	e021      	b.n	800e324 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f003 fd55 	bl	8011d94 <SDMMC_ReadFIFO>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ee:	601a      	str	r2, [r3, #0]
    pData++;
 800e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2f6:	f7f5 fb43 	bl	8003980 <HAL_GetTick>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d102      	bne.n	800e30c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e30a:	e00b      	b.n	800e324 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1e2      	bne.n	800e2e0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a03      	ldr	r2, [pc, #12]	; (800e32c <SD_SendSDStatus+0x19c>)
 800e320:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3730      	adds	r7, #48	; 0x30
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	18000f3a 	.word	0x18000f3a

0800e330 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d102      	bne.n	800e346 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e344:	e018      	b.n	800e378 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34e:	041b      	lsls	r3, r3, #16
 800e350:	4619      	mov	r1, r3
 800e352:	4610      	mov	r0, r2
 800e354:	f004 f808 	bl	8012368 <SDMMC_CmdSendStatus>
 800e358:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	e009      	b.n	800e378 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2100      	movs	r1, #0
 800e36a:	4618      	mov	r0, r3
 800e36c:	f003 fd87 	bl	8011e7e <SDMMC_GetResponse>
 800e370:	4602      	mov	r2, r0
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e388:	2300      	movs	r3, #0
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	2300      	movs	r3, #0
 800e38e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2100      	movs	r1, #0
 800e396:	4618      	mov	r0, r3
 800e398:	f003 fd71 	bl	8011e7e <SDMMC_GetResponse>
 800e39c:	4603      	mov	r3, r0
 800e39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3a6:	d102      	bne.n	800e3ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ac:	e02f      	b.n	800e40e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3ae:	f107 030c 	add.w	r3, r7, #12
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 f879 	bl	800e4ac <SD_FindSCR>
 800e3ba:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	e023      	b.n	800e40e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d01c      	beq.n	800e40a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3d8:	041b      	lsls	r3, r3, #16
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4610      	mov	r0, r2
 800e3de:	f003 feda 	bl	8012196 <SDMMC_CmdAppCommand>
 800e3e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	e00f      	b.n	800e40e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2102      	movs	r1, #2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f003 ff11 	bl	801221c <SDMMC_CmdBusWidth>
 800e3fa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	e003      	b.n	800e40e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e406:	2300      	movs	r3, #0
 800e408:	e001      	b.n	800e40e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e40a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b086      	sub	sp, #24
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e41e:	2300      	movs	r3, #0
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	2300      	movs	r3, #0
 800e424:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2100      	movs	r1, #0
 800e42c:	4618      	mov	r0, r3
 800e42e:	f003 fd26 	bl	8011e7e <SDMMC_GetResponse>
 800e432:	4603      	mov	r3, r0
 800e434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e43c:	d102      	bne.n	800e444 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e43e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e442:	e02f      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e444:	f107 030c 	add.w	r3, r7, #12
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f82e 	bl	800e4ac <SD_FindSCR>
 800e450:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	e023      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e462:	2b00      	cmp	r3, #0
 800e464:	d01c      	beq.n	800e4a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	4619      	mov	r1, r3
 800e472:	4610      	mov	r0, r2
 800e474:	f003 fe8f 	bl	8012196 <SDMMC_CmdAppCommand>
 800e478:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	e00f      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2100      	movs	r1, #0
 800e48a:	4618      	mov	r0, r3
 800e48c:	f003 fec6 	bl	801221c <SDMMC_CmdBusWidth>
 800e490:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	e003      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e49c:	2300      	movs	r3, #0
 800e49e:	e001      	b.n	800e4a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b08e      	sub	sp, #56	; 0x38
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e4b6:	f7f5 fa63 	bl	8003980 <HAL_GetTick>
 800e4ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	60bb      	str	r3, [r7, #8]
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2108      	movs	r1, #8
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f003 fd12 	bl	8011efc <SDMMC_CmdBlockLength>
 800e4d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	e0ad      	b.n	800e640 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ec:	041b      	lsls	r3, r3, #16
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	f003 fe50 	bl	8012196 <SDMMC_CmdAppCommand>
 800e4f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	e09e      	b.n	800e640 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e502:	f04f 33ff 	mov.w	r3, #4294967295
 800e506:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e508:	2308      	movs	r3, #8
 800e50a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e50c:	2330      	movs	r3, #48	; 0x30
 800e50e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e510:	2302      	movs	r3, #2
 800e512:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e514:	2300      	movs	r3, #0
 800e516:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e518:	2301      	movs	r3, #1
 800e51a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f107 0210 	add.w	r2, r7, #16
 800e524:	4611      	mov	r1, r2
 800e526:	4618      	mov	r0, r3
 800e528:	f003 fcbc 	bl	8011ea4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4618      	mov	r0, r3
 800e532:	f003 fe96 	bl	8012262 <SDMMC_CmdSendSCR>
 800e536:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d027      	beq.n	800e58e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e540:	e07e      	b.n	800e640 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d113      	bne.n	800e578 <SD_FindSCR+0xcc>
 800e550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e552:	2b00      	cmp	r3, #0
 800e554:	d110      	bne.n	800e578 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f003 fc1a 	bl	8011d94 <SDMMC_ReadFIFO>
 800e560:	4603      	mov	r3, r0
 800e562:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 fc13 	bl	8011d94 <SDMMC_ReadFIFO>
 800e56e:	4603      	mov	r3, r0
 800e570:	60fb      	str	r3, [r7, #12]
      index++;
 800e572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e574:	3301      	adds	r3, #1
 800e576:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e578:	f7f5 fa02 	bl	8003980 <HAL_GetTick>
 800e57c:	4602      	mov	r2, r0
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e586:	d102      	bne.n	800e58e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e58c:	e058      	b.n	800e640 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e594:	f240 532a 	movw	r3, #1322	; 0x52a
 800e598:	4013      	ands	r3, r2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d0d1      	beq.n	800e542 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a4:	f003 0308 	and.w	r3, r3, #8
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d005      	beq.n	800e5b8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2208      	movs	r2, #8
 800e5b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e5b4:	2308      	movs	r3, #8
 800e5b6:	e043      	b.n	800e640 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5be:	f003 0302 	and.w	r3, r3, #2
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d005      	beq.n	800e5d2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e5ce:	2302      	movs	r3, #2
 800e5d0:	e036      	b.n	800e640 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d8:	f003 0320 	and.w	r3, r3, #32
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d005      	beq.n	800e5ec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e5e8:	2320      	movs	r3, #32
 800e5ea:	e029      	b.n	800e640 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a15      	ldr	r2, [pc, #84]	; (800e648 <SD_FindSCR+0x19c>)
 800e5f2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	061a      	lsls	r2, r3, #24
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	021b      	lsls	r3, r3, #8
 800e5fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e600:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	0a1b      	lsrs	r3, r3, #8
 800e606:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e60a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	0e1b      	lsrs	r3, r3, #24
 800e610:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	601a      	str	r2, [r3, #0]
    scr++;
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	3304      	adds	r3, #4
 800e61a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	061a      	lsls	r2, r3, #24
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	021b      	lsls	r3, r3, #8
 800e624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e628:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	0a1b      	lsrs	r3, r3, #8
 800e62e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e632:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	0e1b      	lsrs	r3, r3, #24
 800e638:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3738      	adds	r7, #56	; 0x38
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	18000f3a 	.word	0x18000f3a

0800e64c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e658:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65e:	2b1f      	cmp	r3, #31
 800e660:	d936      	bls.n	800e6d0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e662:	2300      	movs	r3, #0
 800e664:	617b      	str	r3, [r7, #20]
 800e666:	e027      	b.n	800e6b8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f003 fb91 	bl	8011d94 <SDMMC_ReadFIFO>
 800e672:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	b2da      	uxtb	r2, r3
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	3301      	adds	r3, #1
 800e680:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	0a1b      	lsrs	r3, r3, #8
 800e686:	b2da      	uxtb	r2, r3
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	3301      	adds	r3, #1
 800e690:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	0c1b      	lsrs	r3, r3, #16
 800e696:	b2da      	uxtb	r2, r3
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	0e1b      	lsrs	r3, r3, #24
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	617b      	str	r3, [r7, #20]
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	2b07      	cmp	r3, #7
 800e6bc:	d9d4      	bls.n	800e668 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c8:	f1a3 0220 	sub.w	r2, r3, #32
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e6d0:	bf00      	nop
 800e6d2:	3718      	adds	r7, #24
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	69db      	ldr	r3, [r3, #28]
 800e6e4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6a1b      	ldr	r3, [r3, #32]
 800e6ea:	2b1f      	cmp	r3, #31
 800e6ec:	d93a      	bls.n	800e764 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	617b      	str	r3, [r7, #20]
 800e6f2:	e02b      	b.n	800e74c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	021a      	lsls	r2, r3, #8
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	4313      	orrs	r3, r2
 800e70a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	3301      	adds	r3, #1
 800e710:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	041a      	lsls	r2, r3, #16
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	3301      	adds	r3, #1
 800e722:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	061a      	lsls	r2, r3, #24
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	3301      	adds	r3, #1
 800e734:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f107 020c 	add.w	r2, r7, #12
 800e73e:	4611      	mov	r1, r2
 800e740:	4618      	mov	r0, r3
 800e742:	f003 fb34 	bl	8011dae <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	3301      	adds	r3, #1
 800e74a:	617b      	str	r3, [r7, #20]
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	2b07      	cmp	r3, #7
 800e750:	d9d0      	bls.n	800e6f4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	693a      	ldr	r2, [r7, #16]
 800e756:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a1b      	ldr	r3, [r3, #32]
 800e75c:	f1a3 0220 	sub.w	r2, r3, #32
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	621a      	str	r2, [r3, #32]
  }
}
 800e764:	bf00      	nop
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b083      	sub	sp, #12
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e788:	bf00      	nop
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e79c:	bf00      	nop
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e10f      	b.n	800e9ee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a87      	ldr	r2, [pc, #540]	; (800e9f8 <HAL_SPI_Init+0x23c>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d00f      	beq.n	800e7fe <HAL_SPI_Init+0x42>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a86      	ldr	r2, [pc, #536]	; (800e9fc <HAL_SPI_Init+0x240>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d00a      	beq.n	800e7fe <HAL_SPI_Init+0x42>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a84      	ldr	r2, [pc, #528]	; (800ea00 <HAL_SPI_Init+0x244>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d005      	beq.n	800e7fe <HAL_SPI_Init+0x42>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	2b0f      	cmp	r3, #15
 800e7f8:	d901      	bls.n	800e7fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e0f7      	b.n	800e9ee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 fd5a 	bl	800f2b8 <SPI_GetPacketSize>
 800e804:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4a7b      	ldr	r2, [pc, #492]	; (800e9f8 <HAL_SPI_Init+0x23c>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d00c      	beq.n	800e82a <HAL_SPI_Init+0x6e>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a79      	ldr	r2, [pc, #484]	; (800e9fc <HAL_SPI_Init+0x240>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d007      	beq.n	800e82a <HAL_SPI_Init+0x6e>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a78      	ldr	r2, [pc, #480]	; (800ea00 <HAL_SPI_Init+0x244>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d002      	beq.n	800e82a <HAL_SPI_Init+0x6e>
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b08      	cmp	r3, #8
 800e828:	d811      	bhi.n	800e84e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e82e:	4a72      	ldr	r2, [pc, #456]	; (800e9f8 <HAL_SPI_Init+0x23c>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d009      	beq.n	800e848 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a70      	ldr	r2, [pc, #448]	; (800e9fc <HAL_SPI_Init+0x240>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d004      	beq.n	800e848 <HAL_SPI_Init+0x8c>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a6f      	ldr	r2, [pc, #444]	; (800ea00 <HAL_SPI_Init+0x244>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d104      	bne.n	800e852 <HAL_SPI_Init+0x96>
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b10      	cmp	r3, #16
 800e84c:	d901      	bls.n	800e852 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	e0cd      	b.n	800e9ee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7f4 face 	bl	8002e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2202      	movs	r2, #2
 800e870:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f022 0201 	bic.w	r2, r2, #1
 800e882:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e88e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e898:	d119      	bne.n	800e8ce <HAL_SPI_Init+0x112>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8a2:	d103      	bne.n	800e8ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d008      	beq.n	800e8be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10c      	bne.n	800e8ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8bc:	d107      	bne.n	800e8ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e8cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00f      	beq.n	800e8fa <HAL_SPI_Init+0x13e>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	2b06      	cmp	r3, #6
 800e8e0:	d90b      	bls.n	800e8fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	430a      	orrs	r2, r1
 800e8f6:	601a      	str	r2, [r3, #0]
 800e8f8:	e007      	b.n	800e90a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e908:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	69da      	ldr	r2, [r3, #28]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e912:	431a      	orrs	r2, r3
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	431a      	orrs	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e91c:	ea42 0103 	orr.w	r1, r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	68da      	ldr	r2, [r3, #12]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	430a      	orrs	r2, r1
 800e92a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e934:	431a      	orrs	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	431a      	orrs	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	431a      	orrs	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	431a      	orrs	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	695b      	ldr	r3, [r3, #20]
 800e94c:	431a      	orrs	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	431a      	orrs	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	431a      	orrs	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e95e:	431a      	orrs	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	431a      	orrs	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e96a:	ea42 0103 	orr.w	r1, r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d113      	bne.n	800e9aa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e994:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f022 0201 	bic.w	r2, r2, #1
 800e9b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	430a      	orrs	r2, r1
 800e9da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	40013000 	.word	0x40013000
 800e9fc:	40003800 	.word	0x40003800
 800ea00:	40003c00 	.word	0x40003c00

0800ea04 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b08a      	sub	sp, #40	; 0x28
 800ea08:	af02      	add	r7, sp, #8
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	603b      	str	r3, [r7, #0]
 800ea10:	4613      	mov	r3, r2
 800ea12:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	3320      	adds	r3, #32
 800ea1a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d101      	bne.n	800ea2e <HAL_SPI_Transmit+0x2a>
 800ea2a:	2302      	movs	r3, #2
 800ea2c:	e1e1      	b.n	800edf2 <HAL_SPI_Transmit+0x3ee>
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea36:	f7f4 ffa3 	bl	8003980 <HAL_GetTick>
 800ea3a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d007      	beq.n	800ea58 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea54:	7efb      	ldrb	r3, [r7, #27]
 800ea56:	e1cc      	b.n	800edf2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d002      	beq.n	800ea64 <HAL_SPI_Transmit+0x60>
 800ea5e:	88fb      	ldrh	r3, [r7, #6]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d107      	bne.n	800ea74 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ea64:	2301      	movs	r3, #1
 800ea66:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea70:	7efb      	ldrb	r3, [r7, #27]
 800ea72:	e1be      	b.n	800edf2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2203      	movs	r2, #3
 800ea78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	68ba      	ldr	r2, [r7, #8]
 800ea88:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	88fa      	ldrh	r2, [r7, #6]
 800ea8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	88fa      	ldrh	r2, [r7, #6]
 800ea96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2200      	movs	r2, #0
 800eaba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eac4:	d108      	bne.n	800ead8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	e009      	b.n	800eaec <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eaea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	685a      	ldr	r2, [r3, #4]
 800eaf2:	4b96      	ldr	r3, [pc, #600]	; (800ed4c <HAL_SPI_Transmit+0x348>)
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	88f9      	ldrh	r1, [r7, #6]
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	6812      	ldr	r2, [r2, #0]
 800eafc:	430b      	orrs	r3, r1
 800eafe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f042 0201 	orr.w	r2, r2, #1
 800eb0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb18:	d107      	bne.n	800eb2a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	2b0f      	cmp	r3, #15
 800eb30:	d947      	bls.n	800ebc2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eb32:	e03f      	b.n	800ebb4 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	f003 0302 	and.w	r3, r3, #2
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	d114      	bne.n	800eb6c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6812      	ldr	r2, [r2, #0]
 800eb4c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb52:	1d1a      	adds	r2, r3, #4
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	3b01      	subs	r3, #1
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb6a:	e023      	b.n	800ebb4 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb6c:	f7f4 ff08 	bl	8003980 <HAL_GetTick>
 800eb70:	4602      	mov	r2, r0
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d803      	bhi.n	800eb84 <HAL_SPI_Transmit+0x180>
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d102      	bne.n	800eb8a <HAL_SPI_Transmit+0x186>
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d114      	bne.n	800ebb4 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f000 fac6 	bl	800f11c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	e11e      	b.n	800edf2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1b9      	bne.n	800eb34 <HAL_SPI_Transmit+0x130>
 800ebc0:	e0f1      	b.n	800eda6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	2b07      	cmp	r3, #7
 800ebc8:	f240 80e6 	bls.w	800ed98 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ebcc:	e05d      	b.n	800ec8a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	f003 0302 	and.w	r3, r3, #2
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d132      	bne.n	800ec42 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d918      	bls.n	800ec1a <HAL_SPI_Transmit+0x216>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d014      	beq.n	800ec1a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6812      	ldr	r2, [r2, #0]
 800ebfa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec00:	1d1a      	adds	r2, r3, #4
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	3b02      	subs	r3, #2
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec18:	e037      	b.n	800ec8a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec1e:	881a      	ldrh	r2, [r3, #0]
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec28:	1c9a      	adds	r2, r3, #2
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	3b01      	subs	r3, #1
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec40:	e023      	b.n	800ec8a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec42:	f7f4 fe9d 	bl	8003980 <HAL_GetTick>
 800ec46:	4602      	mov	r2, r0
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d803      	bhi.n	800ec5a <HAL_SPI_Transmit+0x256>
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec58:	d102      	bne.n	800ec60 <HAL_SPI_Transmit+0x25c>
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d114      	bne.n	800ec8a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f000 fa5b 	bl	800f11c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec86:	2303      	movs	r3, #3
 800ec88:	e0b3      	b.n	800edf2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d19b      	bne.n	800ebce <HAL_SPI_Transmit+0x1ca>
 800ec96:	e086      	b.n	800eda6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	695b      	ldr	r3, [r3, #20]
 800ec9e:	f003 0302 	and.w	r3, r3, #2
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d154      	bne.n	800ed50 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	2b03      	cmp	r3, #3
 800ecb0:	d918      	bls.n	800ece4 <HAL_SPI_Transmit+0x2e0>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb6:	2b40      	cmp	r3, #64	; 0x40
 800ecb8:	d914      	bls.n	800ece4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6812      	ldr	r2, [r2, #0]
 800ecc4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecca:	1d1a      	adds	r2, r3, #4
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	3b04      	subs	r3, #4
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ece2:	e059      	b.n	800ed98 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d917      	bls.n	800ed20 <HAL_SPI_Transmit+0x31c>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d013      	beq.n	800ed20 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecfc:	881a      	ldrh	r2, [r3, #0]
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed06:	1c9a      	adds	r2, r3, #2
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	3b02      	subs	r3, #2
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed1e:	e03b      	b.n	800ed98 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	3320      	adds	r3, #32
 800ed2a:	7812      	ldrb	r2, [r2, #0]
 800ed2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed32:	1c5a      	adds	r2, r3, #1
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	3b01      	subs	r3, #1
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed4a:	e025      	b.n	800ed98 <HAL_SPI_Transmit+0x394>
 800ed4c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed50:	f7f4 fe16 	bl	8003980 <HAL_GetTick>
 800ed54:	4602      	mov	r2, r0
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d803      	bhi.n	800ed68 <HAL_SPI_Transmit+0x364>
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed66:	d102      	bne.n	800ed6e <HAL_SPI_Transmit+0x36a>
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d114      	bne.n	800ed98 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f000 f9d4 	bl	800f11c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed94:	2303      	movs	r3, #3
 800ed96:	e02c      	b.n	800edf2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f47f af79 	bne.w	800ec98 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	2200      	movs	r2, #0
 800edae:	2108      	movs	r1, #8
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f000 fa53 	bl	800f25c <SPI_WaitOnFlagUntilTimeout>
 800edb6:	4603      	mov	r3, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d007      	beq.n	800edcc <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edc2:	f043 0220 	orr.w	r2, r3, #32
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f000 f9a5 	bl	800f11c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	e000      	b.n	800edf2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800edf0:	7efb      	ldrb	r3, [r7, #27]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3720      	adds	r7, #32
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop

0800edfc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	603b      	str	r3, [r7, #0]
 800ee08:	4613      	mov	r3, r2
 800ee0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	3330      	adds	r3, #48	; 0x30
 800ee16:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d101      	bne.n	800ee26 <HAL_SPI_Receive+0x2a>
 800ee22:	2302      	movs	r3, #2
 800ee24:	e173      	b.n	800f10e <HAL_SPI_Receive+0x312>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee2e:	f7f4 fda7 	bl	8003980 <HAL_GetTick>
 800ee32:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d007      	beq.n	800ee50 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ee40:	2302      	movs	r3, #2
 800ee42:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee4c:	7ffb      	ldrb	r3, [r7, #31]
 800ee4e:	e15e      	b.n	800f10e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d002      	beq.n	800ee5c <HAL_SPI_Receive+0x60>
 800ee56:	88fb      	ldrh	r3, [r7, #6]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d107      	bne.n	800ee6c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee68:	7ffb      	ldrb	r3, [r7, #31]
 800ee6a:	e150      	b.n	800f10e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2204      	movs	r2, #4
 800ee70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2200      	movs	r2, #0
 800ee78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	88fa      	ldrh	r2, [r7, #6]
 800ee86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	88fa      	ldrh	r2, [r7, #6]
 800ee8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eebc:	d108      	bne.n	800eed0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eecc:	601a      	str	r2, [r3, #0]
 800eece:	e009      	b.n	800eee4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800eee2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	685a      	ldr	r2, [r3, #4]
 800eeea:	4b8b      	ldr	r3, [pc, #556]	; (800f118 <HAL_SPI_Receive+0x31c>)
 800eeec:	4013      	ands	r3, r2
 800eeee:	88f9      	ldrh	r1, [r7, #6]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	6812      	ldr	r2, [r2, #0]
 800eef4:	430b      	orrs	r3, r1
 800eef6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f042 0201 	orr.w	r2, r2, #1
 800ef06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef10:	d107      	bne.n	800ef22 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	2b0f      	cmp	r3, #15
 800ef28:	d948      	bls.n	800efbc <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef2a:	e040      	b.n	800efae <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	695a      	ldr	r2, [r3, #20]
 800ef32:	f248 0308 	movw	r3, #32776	; 0x8008
 800ef36:	4013      	ands	r3, r2
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d014      	beq.n	800ef66 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ef46:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef4c:	1d1a      	adds	r2, r3, #4
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef64:	e023      	b.n	800efae <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef66:	f7f4 fd0b 	bl	8003980 <HAL_GetTick>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	683a      	ldr	r2, [r7, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d803      	bhi.n	800ef7e <HAL_SPI_Receive+0x182>
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7c:	d102      	bne.n	800ef84 <HAL_SPI_Receive+0x188>
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d114      	bne.n	800efae <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f000 f8c9 	bl	800f11c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2201      	movs	r2, #1
 800efa6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800efaa:	2303      	movs	r3, #3
 800efac:	e0af      	b.n	800f10e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1b8      	bne.n	800ef2c <HAL_SPI_Receive+0x130>
 800efba:	e095      	b.n	800f0e8 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	2b07      	cmp	r3, #7
 800efc2:	f240 808b 	bls.w	800f0dc <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800efc6:	e03f      	b.n	800f048 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	695b      	ldr	r3, [r3, #20]
 800efce:	f003 0301 	and.w	r3, r3, #1
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d114      	bne.n	800f000 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efda:	69ba      	ldr	r2, [r7, #24]
 800efdc:	8812      	ldrh	r2, [r2, #0]
 800efde:	b292      	uxth	r2, r2
 800efe0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efe6:	1c9a      	adds	r2, r3, #2
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	3b01      	subs	r3, #1
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800effe:	e023      	b.n	800f048 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f000:	f7f4 fcbe 	bl	8003980 <HAL_GetTick>
 800f004:	4602      	mov	r2, r0
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d803      	bhi.n	800f018 <HAL_SPI_Receive+0x21c>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f016:	d102      	bne.n	800f01e <HAL_SPI_Receive+0x222>
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d114      	bne.n	800f048 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f000 f87c 	bl	800f11c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f032:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f044:	2303      	movs	r3, #3
 800f046:	e062      	b.n	800f10e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f04e:	b29b      	uxth	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d1b9      	bne.n	800efc8 <HAL_SPI_Receive+0x1cc>
 800f054:	e048      	b.n	800f0e8 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	695b      	ldr	r3, [r3, #20]
 800f05c:	f003 0301 	and.w	r3, r3, #1
 800f060:	2b01      	cmp	r3, #1
 800f062:	d117      	bne.n	800f094 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f070:	7812      	ldrb	r2, [r2, #0]
 800f072:	b2d2      	uxtb	r2, r2
 800f074:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f086:	b29b      	uxth	r3, r3
 800f088:	3b01      	subs	r3, #1
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f092:	e023      	b.n	800f0dc <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f094:	f7f4 fc74 	bl	8003980 <HAL_GetTick>
 800f098:	4602      	mov	r2, r0
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d803      	bhi.n	800f0ac <HAL_SPI_Receive+0x2b0>
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0aa:	d102      	bne.n	800f0b2 <HAL_SPI_Receive+0x2b6>
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d114      	bne.n	800f0dc <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f000 f832 	bl	800f11c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0d8:	2303      	movs	r3, #3
 800f0da:	e018      	b.n	800f10e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1b6      	bne.n	800f056 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 f817 	bl	800f11c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f104:	2b00      	cmp	r3, #0
 800f106:	d001      	beq.n	800f10c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f108:	2301      	movs	r3, #1
 800f10a:	e000      	b.n	800f10e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f10c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3720      	adds	r7, #32
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	ffff0000 	.word	0xffff0000

0800f11c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	695b      	ldr	r3, [r3, #20]
 800f12a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	699a      	ldr	r2, [r3, #24]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f042 0208 	orr.w	r2, r2, #8
 800f13a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	699a      	ldr	r2, [r3, #24]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f042 0210 	orr.w	r2, r2, #16
 800f14a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f022 0201 	bic.w	r2, r2, #1
 800f15a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6919      	ldr	r1, [r3, #16]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	4b3c      	ldr	r3, [pc, #240]	; (800f258 <SPI_CloseTransfer+0x13c>)
 800f168:	400b      	ands	r3, r1
 800f16a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	689a      	ldr	r2, [r3, #8]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f17a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f182:	b2db      	uxtb	r3, r3
 800f184:	2b04      	cmp	r3, #4
 800f186:	d014      	beq.n	800f1b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f003 0320 	and.w	r3, r3, #32
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d00f      	beq.n	800f1b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f198:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	699a      	ldr	r2, [r3, #24]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f042 0220 	orr.w	r2, r2, #32
 800f1b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d014      	beq.n	800f1e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00f      	beq.n	800f1e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1ce:	f043 0204 	orr.w	r2, r3, #4
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	699a      	ldr	r2, [r3, #24]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00f      	beq.n	800f212 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1f8:	f043 0201 	orr.w	r2, r3, #1
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f210:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00f      	beq.n	800f23c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f222:	f043 0208 	orr.w	r2, r3, #8
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	699a      	ldr	r2, [r3, #24]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f23a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f24c:	bf00      	nop
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	fffffc90 	.word	0xfffffc90

0800f25c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	603b      	str	r3, [r7, #0]
 800f268:	4613      	mov	r3, r2
 800f26a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f26c:	e010      	b.n	800f290 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f26e:	f7f4 fb87 	bl	8003980 <HAL_GetTick>
 800f272:	4602      	mov	r2, r0
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d803      	bhi.n	800f286 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f284:	d102      	bne.n	800f28c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f28c:	2303      	movs	r3, #3
 800f28e:	e00f      	b.n	800f2b0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	695a      	ldr	r2, [r3, #20]
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	4013      	ands	r3, r2
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	bf0c      	ite	eq
 800f2a0:	2301      	moveq	r3, #1
 800f2a2:	2300      	movne	r3, #0
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d0df      	beq.n	800f26e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2c4:	095b      	lsrs	r3, r3, #5
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	3307      	adds	r3, #7
 800f2d6:	08db      	lsrs	r3, r3, #3
 800f2d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	fb02 f303 	mul.w	r3, r2, r3
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d101      	bne.n	800f300 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e049      	b.n	800f394 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d106      	bne.n	800f31a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7f3 fe33 	bl	8002f80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2202      	movs	r2, #2
 800f31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	3304      	adds	r3, #4
 800f32a:	4619      	mov	r1, r3
 800f32c:	4610      	mov	r0, r2
 800f32e:	f000 fed1 	bl	80100d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2201      	movs	r2, #1
 800f336:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2201      	movs	r2, #1
 800f33e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2201      	movs	r2, #1
 800f346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2201      	movs	r2, #1
 800f34e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2201      	movs	r2, #1
 800f356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2201      	movs	r2, #1
 800f35e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2201      	movs	r2, #1
 800f366:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2201      	movs	r2, #1
 800f376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2201      	movs	r2, #1
 800f37e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2201      	movs	r2, #1
 800f386:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2201      	movs	r2, #1
 800f38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d109      	bne.n	800f3c0 <HAL_TIM_PWM_Start+0x24>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	bf14      	ite	ne
 800f3b8:	2301      	movne	r3, #1
 800f3ba:	2300      	moveq	r3, #0
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	e03c      	b.n	800f43a <HAL_TIM_PWM_Start+0x9e>
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	2b04      	cmp	r3, #4
 800f3c4:	d109      	bne.n	800f3da <HAL_TIM_PWM_Start+0x3e>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	bf14      	ite	ne
 800f3d2:	2301      	movne	r3, #1
 800f3d4:	2300      	moveq	r3, #0
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	e02f      	b.n	800f43a <HAL_TIM_PWM_Start+0x9e>
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	2b08      	cmp	r3, #8
 800f3de:	d109      	bne.n	800f3f4 <HAL_TIM_PWM_Start+0x58>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	bf14      	ite	ne
 800f3ec:	2301      	movne	r3, #1
 800f3ee:	2300      	moveq	r3, #0
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	e022      	b.n	800f43a <HAL_TIM_PWM_Start+0x9e>
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	2b0c      	cmp	r3, #12
 800f3f8:	d109      	bne.n	800f40e <HAL_TIM_PWM_Start+0x72>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b01      	cmp	r3, #1
 800f404:	bf14      	ite	ne
 800f406:	2301      	movne	r3, #1
 800f408:	2300      	moveq	r3, #0
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	e015      	b.n	800f43a <HAL_TIM_PWM_Start+0x9e>
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2b10      	cmp	r3, #16
 800f412:	d109      	bne.n	800f428 <HAL_TIM_PWM_Start+0x8c>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	bf14      	ite	ne
 800f420:	2301      	movne	r3, #1
 800f422:	2300      	moveq	r3, #0
 800f424:	b2db      	uxtb	r3, r3
 800f426:	e008      	b.n	800f43a <HAL_TIM_PWM_Start+0x9e>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b01      	cmp	r3, #1
 800f432:	bf14      	ite	ne
 800f434:	2301      	movne	r3, #1
 800f436:	2300      	moveq	r3, #0
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e0ab      	b.n	800f59a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d104      	bne.n	800f452 <HAL_TIM_PWM_Start+0xb6>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2202      	movs	r2, #2
 800f44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f450:	e023      	b.n	800f49a <HAL_TIM_PWM_Start+0xfe>
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	2b04      	cmp	r3, #4
 800f456:	d104      	bne.n	800f462 <HAL_TIM_PWM_Start+0xc6>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2202      	movs	r2, #2
 800f45c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f460:	e01b      	b.n	800f49a <HAL_TIM_PWM_Start+0xfe>
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	2b08      	cmp	r3, #8
 800f466:	d104      	bne.n	800f472 <HAL_TIM_PWM_Start+0xd6>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2202      	movs	r2, #2
 800f46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f470:	e013      	b.n	800f49a <HAL_TIM_PWM_Start+0xfe>
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b0c      	cmp	r3, #12
 800f476:	d104      	bne.n	800f482 <HAL_TIM_PWM_Start+0xe6>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2202      	movs	r2, #2
 800f47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f480:	e00b      	b.n	800f49a <HAL_TIM_PWM_Start+0xfe>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	2b10      	cmp	r3, #16
 800f486:	d104      	bne.n	800f492 <HAL_TIM_PWM_Start+0xf6>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2202      	movs	r2, #2
 800f48c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f490:	e003      	b.n	800f49a <HAL_TIM_PWM_Start+0xfe>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2202      	movs	r2, #2
 800f496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	6839      	ldr	r1, [r7, #0]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f001 f992 	bl	80107cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4a3d      	ldr	r2, [pc, #244]	; (800f5a4 <HAL_TIM_PWM_Start+0x208>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d013      	beq.n	800f4da <HAL_TIM_PWM_Start+0x13e>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a3c      	ldr	r2, [pc, #240]	; (800f5a8 <HAL_TIM_PWM_Start+0x20c>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d00e      	beq.n	800f4da <HAL_TIM_PWM_Start+0x13e>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a3a      	ldr	r2, [pc, #232]	; (800f5ac <HAL_TIM_PWM_Start+0x210>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d009      	beq.n	800f4da <HAL_TIM_PWM_Start+0x13e>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4a39      	ldr	r2, [pc, #228]	; (800f5b0 <HAL_TIM_PWM_Start+0x214>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d004      	beq.n	800f4da <HAL_TIM_PWM_Start+0x13e>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a37      	ldr	r2, [pc, #220]	; (800f5b4 <HAL_TIM_PWM_Start+0x218>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d101      	bne.n	800f4de <HAL_TIM_PWM_Start+0x142>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e000      	b.n	800f4e0 <HAL_TIM_PWM_Start+0x144>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d007      	beq.n	800f4f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f4f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4a2a      	ldr	r2, [pc, #168]	; (800f5a4 <HAL_TIM_PWM_Start+0x208>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d02c      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f506:	d027      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4a2a      	ldr	r2, [pc, #168]	; (800f5b8 <HAL_TIM_PWM_Start+0x21c>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d022      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a29      	ldr	r2, [pc, #164]	; (800f5bc <HAL_TIM_PWM_Start+0x220>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d01d      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a27      	ldr	r2, [pc, #156]	; (800f5c0 <HAL_TIM_PWM_Start+0x224>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d018      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a1f      	ldr	r2, [pc, #124]	; (800f5a8 <HAL_TIM_PWM_Start+0x20c>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d013      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a23      	ldr	r2, [pc, #140]	; (800f5c4 <HAL_TIM_PWM_Start+0x228>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d00e      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4a1b      	ldr	r2, [pc, #108]	; (800f5ac <HAL_TIM_PWM_Start+0x210>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d009      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a1f      	ldr	r2, [pc, #124]	; (800f5c8 <HAL_TIM_PWM_Start+0x22c>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d004      	beq.n	800f558 <HAL_TIM_PWM_Start+0x1bc>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4a1e      	ldr	r2, [pc, #120]	; (800f5cc <HAL_TIM_PWM_Start+0x230>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d115      	bne.n	800f584 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	689a      	ldr	r2, [r3, #8]
 800f55e:	4b1c      	ldr	r3, [pc, #112]	; (800f5d0 <HAL_TIM_PWM_Start+0x234>)
 800f560:	4013      	ands	r3, r2
 800f562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b06      	cmp	r3, #6
 800f568:	d015      	beq.n	800f596 <HAL_TIM_PWM_Start+0x1fa>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f570:	d011      	beq.n	800f596 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f042 0201 	orr.w	r2, r2, #1
 800f580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f582:	e008      	b.n	800f596 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f042 0201 	orr.w	r2, r2, #1
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	e000      	b.n	800f598 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f596:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f598:	2300      	movs	r3, #0
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	40010000 	.word	0x40010000
 800f5a8:	40010400 	.word	0x40010400
 800f5ac:	40014000 	.word	0x40014000
 800f5b0:	40014400 	.word	0x40014400
 800f5b4:	40014800 	.word	0x40014800
 800f5b8:	40000400 	.word	0x40000400
 800f5bc:	40000800 	.word	0x40000800
 800f5c0:	40000c00 	.word	0x40000c00
 800f5c4:	40001800 	.word	0x40001800
 800f5c8:	4000e000 	.word	0x4000e000
 800f5cc:	4000e400 	.word	0x4000e400
 800f5d0:	00010007 	.word	0x00010007

0800f5d4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
 800f5e0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d109      	bne.n	800f600 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b02      	cmp	r3, #2
 800f5f6:	bf0c      	ite	eq
 800f5f8:	2301      	moveq	r3, #1
 800f5fa:	2300      	movne	r3, #0
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	e03c      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	2b04      	cmp	r3, #4
 800f604:	d109      	bne.n	800f61a <HAL_TIM_PWM_Start_DMA+0x46>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b02      	cmp	r3, #2
 800f610:	bf0c      	ite	eq
 800f612:	2301      	moveq	r3, #1
 800f614:	2300      	movne	r3, #0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	e02f      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2b08      	cmp	r3, #8
 800f61e:	d109      	bne.n	800f634 <HAL_TIM_PWM_Start_DMA+0x60>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f626:	b2db      	uxtb	r3, r3
 800f628:	2b02      	cmp	r3, #2
 800f62a:	bf0c      	ite	eq
 800f62c:	2301      	moveq	r3, #1
 800f62e:	2300      	movne	r3, #0
 800f630:	b2db      	uxtb	r3, r3
 800f632:	e022      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b0c      	cmp	r3, #12
 800f638:	d109      	bne.n	800f64e <HAL_TIM_PWM_Start_DMA+0x7a>
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f640:	b2db      	uxtb	r3, r3
 800f642:	2b02      	cmp	r3, #2
 800f644:	bf0c      	ite	eq
 800f646:	2301      	moveq	r3, #1
 800f648:	2300      	movne	r3, #0
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	e015      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	2b10      	cmp	r3, #16
 800f652:	d109      	bne.n	800f668 <HAL_TIM_PWM_Start_DMA+0x94>
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	bf0c      	ite	eq
 800f660:	2301      	moveq	r3, #1
 800f662:	2300      	movne	r3, #0
 800f664:	b2db      	uxtb	r3, r3
 800f666:	e008      	b.n	800f67a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	2b02      	cmp	r3, #2
 800f672:	bf0c      	ite	eq
 800f674:	2301      	moveq	r3, #1
 800f676:	2300      	movne	r3, #0
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d001      	beq.n	800f682 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f67e:	2302      	movs	r3, #2
 800f680:	e1ba      	b.n	800f9f8 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d109      	bne.n	800f69c <HAL_TIM_PWM_Start_DMA+0xc8>
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	2b01      	cmp	r3, #1
 800f692:	bf0c      	ite	eq
 800f694:	2301      	moveq	r3, #1
 800f696:	2300      	movne	r3, #0
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	e03c      	b.n	800f716 <HAL_TIM_PWM_Start_DMA+0x142>
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	2b04      	cmp	r3, #4
 800f6a0:	d109      	bne.n	800f6b6 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	bf0c      	ite	eq
 800f6ae:	2301      	moveq	r3, #1
 800f6b0:	2300      	movne	r3, #0
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	e02f      	b.n	800f716 <HAL_TIM_PWM_Start_DMA+0x142>
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	2b08      	cmp	r3, #8
 800f6ba:	d109      	bne.n	800f6d0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	bf0c      	ite	eq
 800f6c8:	2301      	moveq	r3, #1
 800f6ca:	2300      	movne	r3, #0
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	e022      	b.n	800f716 <HAL_TIM_PWM_Start_DMA+0x142>
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	2b0c      	cmp	r3, #12
 800f6d4:	d109      	bne.n	800f6ea <HAL_TIM_PWM_Start_DMA+0x116>
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	bf0c      	ite	eq
 800f6e2:	2301      	moveq	r3, #1
 800f6e4:	2300      	movne	r3, #0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	e015      	b.n	800f716 <HAL_TIM_PWM_Start_DMA+0x142>
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	2b10      	cmp	r3, #16
 800f6ee:	d109      	bne.n	800f704 <HAL_TIM_PWM_Start_DMA+0x130>
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	bf0c      	ite	eq
 800f6fc:	2301      	moveq	r3, #1
 800f6fe:	2300      	movne	r3, #0
 800f700:	b2db      	uxtb	r3, r3
 800f702:	e008      	b.n	800f716 <HAL_TIM_PWM_Start_DMA+0x142>
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	bf0c      	ite	eq
 800f710:	2301      	moveq	r3, #1
 800f712:	2300      	movne	r3, #0
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d034      	beq.n	800f784 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <HAL_TIM_PWM_Start_DMA+0x152>
 800f720:	887b      	ldrh	r3, [r7, #2]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f726:	2301      	movs	r3, #1
 800f728:	e166      	b.n	800f9f8 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d104      	bne.n	800f73a <HAL_TIM_PWM_Start_DMA+0x166>
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2202      	movs	r2, #2
 800f734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f738:	e026      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	2b04      	cmp	r3, #4
 800f73e:	d104      	bne.n	800f74a <HAL_TIM_PWM_Start_DMA+0x176>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2202      	movs	r2, #2
 800f744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f748:	e01e      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b08      	cmp	r3, #8
 800f74e:	d104      	bne.n	800f75a <HAL_TIM_PWM_Start_DMA+0x186>
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f758:	e016      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	2b0c      	cmp	r3, #12
 800f75e:	d104      	bne.n	800f76a <HAL_TIM_PWM_Start_DMA+0x196>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2202      	movs	r2, #2
 800f764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f768:	e00e      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	2b10      	cmp	r3, #16
 800f76e:	d104      	bne.n	800f77a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2202      	movs	r2, #2
 800f774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f778:	e006      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2202      	movs	r2, #2
 800f77e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f782:	e001      	b.n	800f788 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f784:	2301      	movs	r3, #1
 800f786:	e137      	b.n	800f9f8 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	2b0c      	cmp	r3, #12
 800f78c:	f200 80ae 	bhi.w	800f8ec <HAL_TIM_PWM_Start_DMA+0x318>
 800f790:	a201      	add	r2, pc, #4	; (adr r2, 800f798 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f796:	bf00      	nop
 800f798:	0800f7cd 	.word	0x0800f7cd
 800f79c:	0800f8ed 	.word	0x0800f8ed
 800f7a0:	0800f8ed 	.word	0x0800f8ed
 800f7a4:	0800f8ed 	.word	0x0800f8ed
 800f7a8:	0800f815 	.word	0x0800f815
 800f7ac:	0800f8ed 	.word	0x0800f8ed
 800f7b0:	0800f8ed 	.word	0x0800f8ed
 800f7b4:	0800f8ed 	.word	0x0800f8ed
 800f7b8:	0800f85d 	.word	0x0800f85d
 800f7bc:	0800f8ed 	.word	0x0800f8ed
 800f7c0:	0800f8ed 	.word	0x0800f8ed
 800f7c4:	0800f8ed 	.word	0x0800f8ed
 800f7c8:	0800f8a5 	.word	0x0800f8a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d0:	4a8b      	ldr	r2, [pc, #556]	; (800fa00 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f7d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d8:	4a8a      	ldr	r2, [pc, #552]	; (800fa04 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f7da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e0:	4a89      	ldr	r2, [pc, #548]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f7e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f7e8:	6879      	ldr	r1, [r7, #4]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	3334      	adds	r3, #52	; 0x34
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	887b      	ldrh	r3, [r7, #2]
 800f7f4:	f7f6 f8e4 	bl	80059c0 <HAL_DMA_Start_IT>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
 800f800:	e0fa      	b.n	800f9f8 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	68da      	ldr	r2, [r3, #12]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f810:	60da      	str	r2, [r3, #12]
      break;
 800f812:	e06e      	b.n	800f8f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f818:	4a79      	ldr	r2, [pc, #484]	; (800fa00 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f81a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f820:	4a78      	ldr	r2, [pc, #480]	; (800fa04 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f828:	4a77      	ldr	r2, [pc, #476]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f82a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f830:	6879      	ldr	r1, [r7, #4]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	3338      	adds	r3, #56	; 0x38
 800f838:	461a      	mov	r2, r3
 800f83a:	887b      	ldrh	r3, [r7, #2]
 800f83c:	f7f6 f8c0 	bl	80059c0 <HAL_DMA_Start_IT>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d001      	beq.n	800f84a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f846:	2301      	movs	r3, #1
 800f848:	e0d6      	b.n	800f9f8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	68da      	ldr	r2, [r3, #12]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f858:	60da      	str	r2, [r3, #12]
      break;
 800f85a:	e04a      	b.n	800f8f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f860:	4a67      	ldr	r2, [pc, #412]	; (800fa00 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f862:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f868:	4a66      	ldr	r2, [pc, #408]	; (800fa04 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f86a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f870:	4a65      	ldr	r2, [pc, #404]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f872:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	333c      	adds	r3, #60	; 0x3c
 800f880:	461a      	mov	r2, r3
 800f882:	887b      	ldrh	r3, [r7, #2]
 800f884:	f7f6 f89c 	bl	80059c0 <HAL_DMA_Start_IT>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	e0b2      	b.n	800f9f8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	68da      	ldr	r2, [r3, #12]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8a0:	60da      	str	r2, [r3, #12]
      break;
 800f8a2:	e026      	b.n	800f8f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a8:	4a55      	ldr	r2, [pc, #340]	; (800fa00 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f8aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b0:	4a54      	ldr	r2, [pc, #336]	; (800fa04 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f8b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b8:	4a53      	ldr	r2, [pc, #332]	; (800fa08 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f8ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f8c0:	6879      	ldr	r1, [r7, #4]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	3340      	adds	r3, #64	; 0x40
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	887b      	ldrh	r3, [r7, #2]
 800f8cc:	f7f6 f878 	bl	80059c0 <HAL_DMA_Start_IT>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d001      	beq.n	800f8da <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e08e      	b.n	800f9f8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	68da      	ldr	r2, [r3, #12]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8e8:	60da      	str	r2, [r3, #12]
      break;
 800f8ea:	e002      	b.n	800f8f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	75fb      	strb	r3, [r7, #23]
      break;
 800f8f0:	bf00      	nop
  }

  if (status == HAL_OK)
 800f8f2:	7dfb      	ldrb	r3, [r7, #23]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d17e      	bne.n	800f9f6 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	68b9      	ldr	r1, [r7, #8]
 800f900:	4618      	mov	r0, r3
 800f902:	f000 ff63 	bl	80107cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a40      	ldr	r2, [pc, #256]	; (800fa0c <HAL_TIM_PWM_Start_DMA+0x438>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d013      	beq.n	800f938 <HAL_TIM_PWM_Start_DMA+0x364>
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a3e      	ldr	r2, [pc, #248]	; (800fa10 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d00e      	beq.n	800f938 <HAL_TIM_PWM_Start_DMA+0x364>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4a3d      	ldr	r2, [pc, #244]	; (800fa14 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d009      	beq.n	800f938 <HAL_TIM_PWM_Start_DMA+0x364>
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4a3b      	ldr	r2, [pc, #236]	; (800fa18 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d004      	beq.n	800f938 <HAL_TIM_PWM_Start_DMA+0x364>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	4a3a      	ldr	r2, [pc, #232]	; (800fa1c <HAL_TIM_PWM_Start_DMA+0x448>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d101      	bne.n	800f93c <HAL_TIM_PWM_Start_DMA+0x368>
 800f938:	2301      	movs	r3, #1
 800f93a:	e000      	b.n	800f93e <HAL_TIM_PWM_Start_DMA+0x36a>
 800f93c:	2300      	movs	r3, #0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d007      	beq.n	800f952 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a2d      	ldr	r2, [pc, #180]	; (800fa0c <HAL_TIM_PWM_Start_DMA+0x438>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d02c      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f964:	d027      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a2d      	ldr	r2, [pc, #180]	; (800fa20 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d022      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a2b      	ldr	r2, [pc, #172]	; (800fa24 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d01d      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4a2a      	ldr	r2, [pc, #168]	; (800fa28 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d018      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a21      	ldr	r2, [pc, #132]	; (800fa10 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d013      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a26      	ldr	r2, [pc, #152]	; (800fa2c <HAL_TIM_PWM_Start_DMA+0x458>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d00e      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a1d      	ldr	r2, [pc, #116]	; (800fa14 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d009      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a22      	ldr	r2, [pc, #136]	; (800fa30 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d004      	beq.n	800f9b6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a20      	ldr	r2, [pc, #128]	; (800fa34 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d115      	bne.n	800f9e2 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	689a      	ldr	r2, [r3, #8]
 800f9bc:	4b1e      	ldr	r3, [pc, #120]	; (800fa38 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f9be:	4013      	ands	r3, r2
 800f9c0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	2b06      	cmp	r3, #6
 800f9c6:	d015      	beq.n	800f9f4 <HAL_TIM_PWM_Start_DMA+0x420>
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9ce:	d011      	beq.n	800f9f4 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f042 0201 	orr.w	r2, r2, #1
 800f9de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9e0:	e008      	b.n	800f9f4 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f042 0201 	orr.w	r2, r2, #1
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	e000      	b.n	800f9f6 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	0800ffc3 	.word	0x0800ffc3
 800fa04:	0801006b 	.word	0x0801006b
 800fa08:	0800ff31 	.word	0x0800ff31
 800fa0c:	40010000 	.word	0x40010000
 800fa10:	40010400 	.word	0x40010400
 800fa14:	40014000 	.word	0x40014000
 800fa18:	40014400 	.word	0x40014400
 800fa1c:	40014800 	.word	0x40014800
 800fa20:	40000400 	.word	0x40000400
 800fa24:	40000800 	.word	0x40000800
 800fa28:	40000c00 	.word	0x40000c00
 800fa2c:	40001800 	.word	0x40001800
 800fa30:	4000e000 	.word	0x4000e000
 800fa34:	4000e400 	.word	0x4000e400
 800fa38:	00010007 	.word	0x00010007

0800fa3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	691b      	ldr	r3, [r3, #16]
 800fa4a:	f003 0302 	and.w	r3, r3, #2
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	d122      	bne.n	800fa98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	f003 0302 	and.w	r3, r3, #2
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d11b      	bne.n	800fa98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f06f 0202 	mvn.w	r2, #2
 800fa68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	699b      	ldr	r3, [r3, #24]
 800fa76:	f003 0303 	and.w	r3, r3, #3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d003      	beq.n	800fa86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 fa24 	bl	800fecc <HAL_TIM_IC_CaptureCallback>
 800fa84:	e005      	b.n	800fa92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 fa16 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 fa27 	bl	800fee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2200      	movs	r2, #0
 800fa96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	691b      	ldr	r3, [r3, #16]
 800fa9e:	f003 0304 	and.w	r3, r3, #4
 800faa2:	2b04      	cmp	r3, #4
 800faa4:	d122      	bne.n	800faec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	f003 0304 	and.w	r3, r3, #4
 800fab0:	2b04      	cmp	r3, #4
 800fab2:	d11b      	bne.n	800faec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f06f 0204 	mvn.w	r2, #4
 800fabc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2202      	movs	r2, #2
 800fac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	699b      	ldr	r3, [r3, #24]
 800faca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800face:	2b00      	cmp	r3, #0
 800fad0:	d003      	beq.n	800fada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f9fa 	bl	800fecc <HAL_TIM_IC_CaptureCallback>
 800fad8:	e005      	b.n	800fae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 f9ec 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f9fd 	bl	800fee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	f003 0308 	and.w	r3, r3, #8
 800faf6:	2b08      	cmp	r3, #8
 800faf8:	d122      	bne.n	800fb40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	f003 0308 	and.w	r3, r3, #8
 800fb04:	2b08      	cmp	r3, #8
 800fb06:	d11b      	bne.n	800fb40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f06f 0208 	mvn.w	r2, #8
 800fb10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2204      	movs	r2, #4
 800fb16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	69db      	ldr	r3, [r3, #28]
 800fb1e:	f003 0303 	and.w	r3, r3, #3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d003      	beq.n	800fb2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 f9d0 	bl	800fecc <HAL_TIM_IC_CaptureCallback>
 800fb2c:	e005      	b.n	800fb3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f9c2 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 f9d3 	bl	800fee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	f003 0310 	and.w	r3, r3, #16
 800fb4a:	2b10      	cmp	r3, #16
 800fb4c:	d122      	bne.n	800fb94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	f003 0310 	and.w	r3, r3, #16
 800fb58:	2b10      	cmp	r3, #16
 800fb5a:	d11b      	bne.n	800fb94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f06f 0210 	mvn.w	r2, #16
 800fb64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2208      	movs	r2, #8
 800fb6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	69db      	ldr	r3, [r3, #28]
 800fb72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d003      	beq.n	800fb82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f000 f9a6 	bl	800fecc <HAL_TIM_IC_CaptureCallback>
 800fb80:	e005      	b.n	800fb8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f998 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 f9a9 	bl	800fee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	f003 0301 	and.w	r3, r3, #1
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d10e      	bne.n	800fbc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	f003 0301 	and.w	r3, r3, #1
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d107      	bne.n	800fbc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f06f 0201 	mvn.w	r2, #1
 800fbb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 f972 	bl	800fea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbca:	2b80      	cmp	r3, #128	; 0x80
 800fbcc:	d10e      	bne.n	800fbec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbd8:	2b80      	cmp	r3, #128	; 0x80
 800fbda:	d107      	bne.n	800fbec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fbe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 febc 	bl	8010964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	691b      	ldr	r3, [r3, #16]
 800fbf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbfa:	d10e      	bne.n	800fc1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc06:	2b80      	cmp	r3, #128	; 0x80
 800fc08:	d107      	bne.n	800fc1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 feaf 	bl	8010978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc24:	2b40      	cmp	r3, #64	; 0x40
 800fc26:	d10e      	bne.n	800fc46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc32:	2b40      	cmp	r3, #64	; 0x40
 800fc34:	d107      	bne.n	800fc46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f961 	bl	800ff08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	691b      	ldr	r3, [r3, #16]
 800fc4c:	f003 0320 	and.w	r3, r3, #32
 800fc50:	2b20      	cmp	r3, #32
 800fc52:	d10e      	bne.n	800fc72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	f003 0320 	and.w	r3, r3, #32
 800fc5e:	2b20      	cmp	r3, #32
 800fc60:	d107      	bne.n	800fc72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f06f 0220 	mvn.w	r2, #32
 800fc6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 fe6f 	bl	8010950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc72:	bf00      	nop
 800fc74:	3708      	adds	r7, #8
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
	...

0800fc7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d101      	bne.n	800fc9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fc96:	2302      	movs	r3, #2
 800fc98:	e0ff      	b.n	800fe9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b14      	cmp	r3, #20
 800fca6:	f200 80f0 	bhi.w	800fe8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fcaa:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fd05 	.word	0x0800fd05
 800fcb4:	0800fe8b 	.word	0x0800fe8b
 800fcb8:	0800fe8b 	.word	0x0800fe8b
 800fcbc:	0800fe8b 	.word	0x0800fe8b
 800fcc0:	0800fd45 	.word	0x0800fd45
 800fcc4:	0800fe8b 	.word	0x0800fe8b
 800fcc8:	0800fe8b 	.word	0x0800fe8b
 800fccc:	0800fe8b 	.word	0x0800fe8b
 800fcd0:	0800fd87 	.word	0x0800fd87
 800fcd4:	0800fe8b 	.word	0x0800fe8b
 800fcd8:	0800fe8b 	.word	0x0800fe8b
 800fcdc:	0800fe8b 	.word	0x0800fe8b
 800fce0:	0800fdc7 	.word	0x0800fdc7
 800fce4:	0800fe8b 	.word	0x0800fe8b
 800fce8:	0800fe8b 	.word	0x0800fe8b
 800fcec:	0800fe8b 	.word	0x0800fe8b
 800fcf0:	0800fe09 	.word	0x0800fe09
 800fcf4:	0800fe8b 	.word	0x0800fe8b
 800fcf8:	0800fe8b 	.word	0x0800fe8b
 800fcfc:	0800fe8b 	.word	0x0800fe8b
 800fd00:	0800fe49 	.word	0x0800fe49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68b9      	ldr	r1, [r7, #8]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 fa88 	bl	8010220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	699a      	ldr	r2, [r3, #24]
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f042 0208 	orr.w	r2, r2, #8
 800fd1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	699a      	ldr	r2, [r3, #24]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f022 0204 	bic.w	r2, r2, #4
 800fd2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	6999      	ldr	r1, [r3, #24]
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	691a      	ldr	r2, [r3, #16]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	430a      	orrs	r2, r1
 800fd40:	619a      	str	r2, [r3, #24]
      break;
 800fd42:	e0a5      	b.n	800fe90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	68b9      	ldr	r1, [r7, #8]
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f000 faf8 	bl	8010340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	699a      	ldr	r2, [r3, #24]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	699a      	ldr	r2, [r3, #24]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	6999      	ldr	r1, [r3, #24]
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	691b      	ldr	r3, [r3, #16]
 800fd7a:	021a      	lsls	r2, r3, #8
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	430a      	orrs	r2, r1
 800fd82:	619a      	str	r2, [r3, #24]
      break;
 800fd84:	e084      	b.n	800fe90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68b9      	ldr	r1, [r7, #8]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f000 fb61 	bl	8010454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	69da      	ldr	r2, [r3, #28]
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f042 0208 	orr.w	r2, r2, #8
 800fda0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	69da      	ldr	r2, [r3, #28]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f022 0204 	bic.w	r2, r2, #4
 800fdb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	69d9      	ldr	r1, [r3, #28]
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	691a      	ldr	r2, [r3, #16]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	430a      	orrs	r2, r1
 800fdc2:	61da      	str	r2, [r3, #28]
      break;
 800fdc4:	e064      	b.n	800fe90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68b9      	ldr	r1, [r7, #8]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f000 fbc9 	bl	8010564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	69da      	ldr	r2, [r3, #28]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fde0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	69da      	ldr	r2, [r3, #28]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	69d9      	ldr	r1, [r3, #28]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	021a      	lsls	r2, r3, #8
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	430a      	orrs	r2, r1
 800fe04:	61da      	str	r2, [r3, #28]
      break;
 800fe06:	e043      	b.n	800fe90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	68b9      	ldr	r1, [r7, #8]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 fc12 	bl	8010638 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f042 0208 	orr.w	r2, r2, #8
 800fe22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f022 0204 	bic.w	r2, r2, #4
 800fe32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	691a      	ldr	r2, [r3, #16]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	430a      	orrs	r2, r1
 800fe44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe46:	e023      	b.n	800fe90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68b9      	ldr	r1, [r7, #8]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f000 fc56 	bl	8010700 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	021a      	lsls	r2, r3, #8
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	430a      	orrs	r2, r1
 800fe86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe88:	e002      	b.n	800fe90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	75fb      	strb	r3, [r7, #23]
      break;
 800fe8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fe98:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3718      	adds	r7, #24
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop

0800fea4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fec0:	bf00      	nop
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fee8:	bf00      	nop
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff10:	bf00      	nop
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff3c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d107      	bne.n	800ff58 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2201      	movs	r2, #1
 800ff52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff56:	e02a      	b.n	800ffae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d107      	bne.n	800ff72 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2202      	movs	r2, #2
 800ff66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff70:	e01d      	b.n	800ffae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d107      	bne.n	800ff8c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2204      	movs	r2, #4
 800ff80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff8a:	e010      	b.n	800ffae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d107      	bne.n	800ffa6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2208      	movs	r2, #8
 800ff9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffa4:	e003      	b.n	800ffae <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f7ff ffb4 	bl	800ff1c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	771a      	strb	r2, [r3, #28]
}
 800ffba:	bf00      	nop
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}

0800ffc2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b084      	sub	sp, #16
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d10b      	bne.n	800fff2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2201      	movs	r2, #1
 800ffde:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	69db      	ldr	r3, [r3, #28]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d136      	bne.n	8010056 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2201      	movs	r2, #1
 800ffec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fff0:	e031      	b.n	8010056 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d10b      	bne.n	8010014 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2202      	movs	r2, #2
 8010000:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	69db      	ldr	r3, [r3, #28]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d125      	bne.n	8010056 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010012:	e020      	b.n	8010056 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	429a      	cmp	r2, r3
 801001c:	d10b      	bne.n	8010036 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2204      	movs	r2, #4
 8010022:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	69db      	ldr	r3, [r3, #28]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d114      	bne.n	8010056 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2201      	movs	r2, #1
 8010030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010034:	e00f      	b.n	8010056 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	429a      	cmp	r2, r3
 801003e:	d10a      	bne.n	8010056 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2208      	movs	r2, #8
 8010044:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	69db      	ldr	r3, [r3, #28]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d103      	bne.n	8010056 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2201      	movs	r2, #1
 8010052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010056:	68f8      	ldr	r0, [r7, #12]
 8010058:	f7ff ff42 	bl	800fee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2200      	movs	r2, #0
 8010060:	771a      	strb	r2, [r3, #28]
}
 8010062:	bf00      	nop
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}

0801006a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801006a:	b580      	push	{r7, lr}
 801006c:	b084      	sub	sp, #16
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010076:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	429a      	cmp	r2, r3
 8010080:	d103      	bne.n	801008a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2201      	movs	r2, #1
 8010086:	771a      	strb	r2, [r3, #28]
 8010088:	e019      	b.n	80100be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	429a      	cmp	r2, r3
 8010092:	d103      	bne.n	801009c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2202      	movs	r2, #2
 8010098:	771a      	strb	r2, [r3, #28]
 801009a:	e010      	b.n	80100be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d103      	bne.n	80100ae <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2204      	movs	r2, #4
 80100aa:	771a      	strb	r2, [r3, #28]
 80100ac:	e007      	b.n	80100be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d102      	bne.n	80100be <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2208      	movs	r2, #8
 80100bc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f7ff ff18 	bl	800fef4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2200      	movs	r2, #0
 80100c8:	771a      	strb	r2, [r3, #28]
}
 80100ca:	bf00      	nop
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b085      	sub	sp, #20
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4a44      	ldr	r2, [pc, #272]	; (80101f8 <TIM_Base_SetConfig+0x124>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d013      	beq.n	8010114 <TIM_Base_SetConfig+0x40>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100f2:	d00f      	beq.n	8010114 <TIM_Base_SetConfig+0x40>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4a41      	ldr	r2, [pc, #260]	; (80101fc <TIM_Base_SetConfig+0x128>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d00b      	beq.n	8010114 <TIM_Base_SetConfig+0x40>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	4a40      	ldr	r2, [pc, #256]	; (8010200 <TIM_Base_SetConfig+0x12c>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d007      	beq.n	8010114 <TIM_Base_SetConfig+0x40>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4a3f      	ldr	r2, [pc, #252]	; (8010204 <TIM_Base_SetConfig+0x130>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d003      	beq.n	8010114 <TIM_Base_SetConfig+0x40>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4a3e      	ldr	r2, [pc, #248]	; (8010208 <TIM_Base_SetConfig+0x134>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d108      	bne.n	8010126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801011a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	68fa      	ldr	r2, [r7, #12]
 8010122:	4313      	orrs	r3, r2
 8010124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	4a33      	ldr	r2, [pc, #204]	; (80101f8 <TIM_Base_SetConfig+0x124>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d027      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010134:	d023      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4a30      	ldr	r2, [pc, #192]	; (80101fc <TIM_Base_SetConfig+0x128>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d01f      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4a2f      	ldr	r2, [pc, #188]	; (8010200 <TIM_Base_SetConfig+0x12c>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d01b      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4a2e      	ldr	r2, [pc, #184]	; (8010204 <TIM_Base_SetConfig+0x130>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d017      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4a2d      	ldr	r2, [pc, #180]	; (8010208 <TIM_Base_SetConfig+0x134>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d013      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4a2c      	ldr	r2, [pc, #176]	; (801020c <TIM_Base_SetConfig+0x138>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d00f      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4a2b      	ldr	r2, [pc, #172]	; (8010210 <TIM_Base_SetConfig+0x13c>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d00b      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4a2a      	ldr	r2, [pc, #168]	; (8010214 <TIM_Base_SetConfig+0x140>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d007      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4a29      	ldr	r2, [pc, #164]	; (8010218 <TIM_Base_SetConfig+0x144>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d003      	beq.n	801017e <TIM_Base_SetConfig+0xaa>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4a28      	ldr	r2, [pc, #160]	; (801021c <TIM_Base_SetConfig+0x148>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d108      	bne.n	8010190 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	4313      	orrs	r3, r2
 801018e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	695b      	ldr	r3, [r3, #20]
 801019a:	4313      	orrs	r3, r2
 801019c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	689a      	ldr	r2, [r3, #8]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	4a10      	ldr	r2, [pc, #64]	; (80101f8 <TIM_Base_SetConfig+0x124>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d00f      	beq.n	80101dc <TIM_Base_SetConfig+0x108>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4a12      	ldr	r2, [pc, #72]	; (8010208 <TIM_Base_SetConfig+0x134>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d00b      	beq.n	80101dc <TIM_Base_SetConfig+0x108>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	4a11      	ldr	r2, [pc, #68]	; (801020c <TIM_Base_SetConfig+0x138>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d007      	beq.n	80101dc <TIM_Base_SetConfig+0x108>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4a10      	ldr	r2, [pc, #64]	; (8010210 <TIM_Base_SetConfig+0x13c>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d003      	beq.n	80101dc <TIM_Base_SetConfig+0x108>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4a0f      	ldr	r2, [pc, #60]	; (8010214 <TIM_Base_SetConfig+0x140>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d103      	bne.n	80101e4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	691a      	ldr	r2, [r3, #16]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	615a      	str	r2, [r3, #20]
}
 80101ea:	bf00      	nop
 80101ec:	3714      	adds	r7, #20
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	40010000 	.word	0x40010000
 80101fc:	40000400 	.word	0x40000400
 8010200:	40000800 	.word	0x40000800
 8010204:	40000c00 	.word	0x40000c00
 8010208:	40010400 	.word	0x40010400
 801020c:	40014000 	.word	0x40014000
 8010210:	40014400 	.word	0x40014400
 8010214:	40014800 	.word	0x40014800
 8010218:	4000e000 	.word	0x4000e000
 801021c:	4000e400 	.word	0x4000e400

08010220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010220:	b480      	push	{r7}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a1b      	ldr	r3, [r3, #32]
 801022e:	f023 0201 	bic.w	r2, r3, #1
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	699b      	ldr	r3, [r3, #24]
 8010246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	4b37      	ldr	r3, [pc, #220]	; (8010328 <TIM_OC1_SetConfig+0x108>)
 801024c:	4013      	ands	r3, r2
 801024e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f023 0303 	bic.w	r3, r3, #3
 8010256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	4313      	orrs	r3, r2
 8010260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	f023 0302 	bic.w	r3, r3, #2
 8010268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	697a      	ldr	r2, [r7, #20]
 8010270:	4313      	orrs	r3, r2
 8010272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4a2d      	ldr	r2, [pc, #180]	; (801032c <TIM_OC1_SetConfig+0x10c>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d00f      	beq.n	801029c <TIM_OC1_SetConfig+0x7c>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4a2c      	ldr	r2, [pc, #176]	; (8010330 <TIM_OC1_SetConfig+0x110>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d00b      	beq.n	801029c <TIM_OC1_SetConfig+0x7c>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4a2b      	ldr	r2, [pc, #172]	; (8010334 <TIM_OC1_SetConfig+0x114>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d007      	beq.n	801029c <TIM_OC1_SetConfig+0x7c>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a2a      	ldr	r2, [pc, #168]	; (8010338 <TIM_OC1_SetConfig+0x118>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d003      	beq.n	801029c <TIM_OC1_SetConfig+0x7c>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a29      	ldr	r2, [pc, #164]	; (801033c <TIM_OC1_SetConfig+0x11c>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d10c      	bne.n	80102b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	f023 0308 	bic.w	r3, r3, #8
 80102a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	697a      	ldr	r2, [r7, #20]
 80102aa:	4313      	orrs	r3, r2
 80102ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	f023 0304 	bic.w	r3, r3, #4
 80102b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4a1c      	ldr	r2, [pc, #112]	; (801032c <TIM_OC1_SetConfig+0x10c>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d00f      	beq.n	80102de <TIM_OC1_SetConfig+0xbe>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4a1b      	ldr	r2, [pc, #108]	; (8010330 <TIM_OC1_SetConfig+0x110>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d00b      	beq.n	80102de <TIM_OC1_SetConfig+0xbe>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4a1a      	ldr	r2, [pc, #104]	; (8010334 <TIM_OC1_SetConfig+0x114>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d007      	beq.n	80102de <TIM_OC1_SetConfig+0xbe>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4a19      	ldr	r2, [pc, #100]	; (8010338 <TIM_OC1_SetConfig+0x118>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d003      	beq.n	80102de <TIM_OC1_SetConfig+0xbe>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4a18      	ldr	r2, [pc, #96]	; (801033c <TIM_OC1_SetConfig+0x11c>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d111      	bne.n	8010302 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80102ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	695b      	ldr	r3, [r3, #20]
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	4313      	orrs	r3, r2
 80102f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	699b      	ldr	r3, [r3, #24]
 80102fc:	693a      	ldr	r2, [r7, #16]
 80102fe:	4313      	orrs	r3, r2
 8010300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	697a      	ldr	r2, [r7, #20]
 801031a:	621a      	str	r2, [r3, #32]
}
 801031c:	bf00      	nop
 801031e:	371c      	adds	r7, #28
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr
 8010328:	fffeff8f 	.word	0xfffeff8f
 801032c:	40010000 	.word	0x40010000
 8010330:	40010400 	.word	0x40010400
 8010334:	40014000 	.word	0x40014000
 8010338:	40014400 	.word	0x40014400
 801033c:	40014800 	.word	0x40014800

08010340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010340:	b480      	push	{r7}
 8010342:	b087      	sub	sp, #28
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	f023 0210 	bic.w	r2, r3, #16
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6a1b      	ldr	r3, [r3, #32]
 801035a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	699b      	ldr	r3, [r3, #24]
 8010366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	4b34      	ldr	r3, [pc, #208]	; (801043c <TIM_OC2_SetConfig+0xfc>)
 801036c:	4013      	ands	r3, r2
 801036e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	021b      	lsls	r3, r3, #8
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	4313      	orrs	r3, r2
 8010382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	f023 0320 	bic.w	r3, r3, #32
 801038a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	011b      	lsls	r3, r3, #4
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	4313      	orrs	r3, r2
 8010396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a29      	ldr	r2, [pc, #164]	; (8010440 <TIM_OC2_SetConfig+0x100>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d003      	beq.n	80103a8 <TIM_OC2_SetConfig+0x68>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a28      	ldr	r2, [pc, #160]	; (8010444 <TIM_OC2_SetConfig+0x104>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d10d      	bne.n	80103c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	011b      	lsls	r3, r3, #4
 80103b6:	697a      	ldr	r2, [r7, #20]
 80103b8:	4313      	orrs	r3, r2
 80103ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4a1e      	ldr	r2, [pc, #120]	; (8010440 <TIM_OC2_SetConfig+0x100>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d00f      	beq.n	80103ec <TIM_OC2_SetConfig+0xac>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a1d      	ldr	r2, [pc, #116]	; (8010444 <TIM_OC2_SetConfig+0x104>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d00b      	beq.n	80103ec <TIM_OC2_SetConfig+0xac>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a1c      	ldr	r2, [pc, #112]	; (8010448 <TIM_OC2_SetConfig+0x108>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d007      	beq.n	80103ec <TIM_OC2_SetConfig+0xac>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a1b      	ldr	r2, [pc, #108]	; (801044c <TIM_OC2_SetConfig+0x10c>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d003      	beq.n	80103ec <TIM_OC2_SetConfig+0xac>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a1a      	ldr	r2, [pc, #104]	; (8010450 <TIM_OC2_SetConfig+0x110>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d113      	bne.n	8010414 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80103f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80103fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	695b      	ldr	r3, [r3, #20]
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	693a      	ldr	r2, [r7, #16]
 8010404:	4313      	orrs	r3, r2
 8010406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	699b      	ldr	r3, [r3, #24]
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	693a      	ldr	r2, [r7, #16]
 8010410:	4313      	orrs	r3, r2
 8010412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	693a      	ldr	r2, [r7, #16]
 8010418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	68fa      	ldr	r2, [r7, #12]
 801041e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	697a      	ldr	r2, [r7, #20]
 801042c:	621a      	str	r2, [r3, #32]
}
 801042e:	bf00      	nop
 8010430:	371c      	adds	r7, #28
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	feff8fff 	.word	0xfeff8fff
 8010440:	40010000 	.word	0x40010000
 8010444:	40010400 	.word	0x40010400
 8010448:	40014000 	.word	0x40014000
 801044c:	40014400 	.word	0x40014400
 8010450:	40014800 	.word	0x40014800

08010454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010454:	b480      	push	{r7}
 8010456:	b087      	sub	sp, #28
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a1b      	ldr	r3, [r3, #32]
 8010462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6a1b      	ldr	r3, [r3, #32]
 801046e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	69db      	ldr	r3, [r3, #28]
 801047a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801047c:	68fa      	ldr	r2, [r7, #12]
 801047e:	4b33      	ldr	r3, [pc, #204]	; (801054c <TIM_OC3_SetConfig+0xf8>)
 8010480:	4013      	ands	r3, r2
 8010482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f023 0303 	bic.w	r3, r3, #3
 801048a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	4313      	orrs	r3, r2
 8010494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801049c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	021b      	lsls	r3, r3, #8
 80104a4:	697a      	ldr	r2, [r7, #20]
 80104a6:	4313      	orrs	r3, r2
 80104a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a28      	ldr	r2, [pc, #160]	; (8010550 <TIM_OC3_SetConfig+0xfc>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d003      	beq.n	80104ba <TIM_OC3_SetConfig+0x66>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a27      	ldr	r2, [pc, #156]	; (8010554 <TIM_OC3_SetConfig+0x100>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d10d      	bne.n	80104d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	021b      	lsls	r3, r3, #8
 80104c8:	697a      	ldr	r2, [r7, #20]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4a1d      	ldr	r2, [pc, #116]	; (8010550 <TIM_OC3_SetConfig+0xfc>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d00f      	beq.n	80104fe <TIM_OC3_SetConfig+0xaa>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4a1c      	ldr	r2, [pc, #112]	; (8010554 <TIM_OC3_SetConfig+0x100>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d00b      	beq.n	80104fe <TIM_OC3_SetConfig+0xaa>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4a1b      	ldr	r2, [pc, #108]	; (8010558 <TIM_OC3_SetConfig+0x104>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d007      	beq.n	80104fe <TIM_OC3_SetConfig+0xaa>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a1a      	ldr	r2, [pc, #104]	; (801055c <TIM_OC3_SetConfig+0x108>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d003      	beq.n	80104fe <TIM_OC3_SetConfig+0xaa>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4a19      	ldr	r2, [pc, #100]	; (8010560 <TIM_OC3_SetConfig+0x10c>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d113      	bne.n	8010526 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801050c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	695b      	ldr	r3, [r3, #20]
 8010512:	011b      	lsls	r3, r3, #4
 8010514:	693a      	ldr	r2, [r7, #16]
 8010516:	4313      	orrs	r3, r2
 8010518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	699b      	ldr	r3, [r3, #24]
 801051e:	011b      	lsls	r3, r3, #4
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	4313      	orrs	r3, r2
 8010524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	693a      	ldr	r2, [r7, #16]
 801052a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	685a      	ldr	r2, [r3, #4]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	621a      	str	r2, [r3, #32]
}
 8010540:	bf00      	nop
 8010542:	371c      	adds	r7, #28
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	fffeff8f 	.word	0xfffeff8f
 8010550:	40010000 	.word	0x40010000
 8010554:	40010400 	.word	0x40010400
 8010558:	40014000 	.word	0x40014000
 801055c:	40014400 	.word	0x40014400
 8010560:	40014800 	.word	0x40014800

08010564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010564:	b480      	push	{r7}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a1b      	ldr	r3, [r3, #32]
 8010572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a1b      	ldr	r3, [r3, #32]
 801057e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	69db      	ldr	r3, [r3, #28]
 801058a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	4b24      	ldr	r3, [pc, #144]	; (8010620 <TIM_OC4_SetConfig+0xbc>)
 8010590:	4013      	ands	r3, r2
 8010592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801059a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	021b      	lsls	r3, r3, #8
 80105a2:	68fa      	ldr	r2, [r7, #12]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	689b      	ldr	r3, [r3, #8]
 80105b4:	031b      	lsls	r3, r3, #12
 80105b6:	693a      	ldr	r2, [r7, #16]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4a19      	ldr	r2, [pc, #100]	; (8010624 <TIM_OC4_SetConfig+0xc0>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d00f      	beq.n	80105e4 <TIM_OC4_SetConfig+0x80>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4a18      	ldr	r2, [pc, #96]	; (8010628 <TIM_OC4_SetConfig+0xc4>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d00b      	beq.n	80105e4 <TIM_OC4_SetConfig+0x80>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4a17      	ldr	r2, [pc, #92]	; (801062c <TIM_OC4_SetConfig+0xc8>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d007      	beq.n	80105e4 <TIM_OC4_SetConfig+0x80>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	4a16      	ldr	r2, [pc, #88]	; (8010630 <TIM_OC4_SetConfig+0xcc>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d003      	beq.n	80105e4 <TIM_OC4_SetConfig+0x80>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a15      	ldr	r2, [pc, #84]	; (8010634 <TIM_OC4_SetConfig+0xd0>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d109      	bne.n	80105f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	695b      	ldr	r3, [r3, #20]
 80105f0:	019b      	lsls	r3, r3, #6
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	685a      	ldr	r2, [r3, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	693a      	ldr	r2, [r7, #16]
 8010610:	621a      	str	r2, [r3, #32]
}
 8010612:	bf00      	nop
 8010614:	371c      	adds	r7, #28
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	feff8fff 	.word	0xfeff8fff
 8010624:	40010000 	.word	0x40010000
 8010628:	40010400 	.word	0x40010400
 801062c:	40014000 	.word	0x40014000
 8010630:	40014400 	.word	0x40014400
 8010634:	40014800 	.word	0x40014800

08010638 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010638:	b480      	push	{r7}
 801063a:	b087      	sub	sp, #28
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801065e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010660:	68fa      	ldr	r2, [r7, #12]
 8010662:	4b21      	ldr	r3, [pc, #132]	; (80106e8 <TIM_OC5_SetConfig+0xb0>)
 8010664:	4013      	ands	r3, r2
 8010666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	68fa      	ldr	r2, [r7, #12]
 801066e:	4313      	orrs	r3, r2
 8010670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	689b      	ldr	r3, [r3, #8]
 801067e:	041b      	lsls	r3, r3, #16
 8010680:	693a      	ldr	r2, [r7, #16]
 8010682:	4313      	orrs	r3, r2
 8010684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4a18      	ldr	r2, [pc, #96]	; (80106ec <TIM_OC5_SetConfig+0xb4>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00f      	beq.n	80106ae <TIM_OC5_SetConfig+0x76>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a17      	ldr	r2, [pc, #92]	; (80106f0 <TIM_OC5_SetConfig+0xb8>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d00b      	beq.n	80106ae <TIM_OC5_SetConfig+0x76>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a16      	ldr	r2, [pc, #88]	; (80106f4 <TIM_OC5_SetConfig+0xbc>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d007      	beq.n	80106ae <TIM_OC5_SetConfig+0x76>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a15      	ldr	r2, [pc, #84]	; (80106f8 <TIM_OC5_SetConfig+0xc0>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d003      	beq.n	80106ae <TIM_OC5_SetConfig+0x76>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a14      	ldr	r2, [pc, #80]	; (80106fc <TIM_OC5_SetConfig+0xc4>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d109      	bne.n	80106c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	695b      	ldr	r3, [r3, #20]
 80106ba:	021b      	lsls	r3, r3, #8
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	4313      	orrs	r3, r2
 80106c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	68fa      	ldr	r2, [r7, #12]
 80106cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	685a      	ldr	r2, [r3, #4]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	693a      	ldr	r2, [r7, #16]
 80106da:	621a      	str	r2, [r3, #32]
}
 80106dc:	bf00      	nop
 80106de:	371c      	adds	r7, #28
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	fffeff8f 	.word	0xfffeff8f
 80106ec:	40010000 	.word	0x40010000
 80106f0:	40010400 	.word	0x40010400
 80106f4:	40014000 	.word	0x40014000
 80106f8:	40014400 	.word	0x40014400
 80106fc:	40014800 	.word	0x40014800

08010700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010700:	b480      	push	{r7}
 8010702:	b087      	sub	sp, #28
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a1b      	ldr	r3, [r3, #32]
 801071a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	4b22      	ldr	r3, [pc, #136]	; (80107b4 <TIM_OC6_SetConfig+0xb4>)
 801072c:	4013      	ands	r3, r2
 801072e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	021b      	lsls	r3, r3, #8
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	4313      	orrs	r3, r2
 801073a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	051b      	lsls	r3, r3, #20
 801074a:	693a      	ldr	r2, [r7, #16]
 801074c:	4313      	orrs	r3, r2
 801074e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	4a19      	ldr	r2, [pc, #100]	; (80107b8 <TIM_OC6_SetConfig+0xb8>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d00f      	beq.n	8010778 <TIM_OC6_SetConfig+0x78>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4a18      	ldr	r2, [pc, #96]	; (80107bc <TIM_OC6_SetConfig+0xbc>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d00b      	beq.n	8010778 <TIM_OC6_SetConfig+0x78>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4a17      	ldr	r2, [pc, #92]	; (80107c0 <TIM_OC6_SetConfig+0xc0>)
 8010764:	4293      	cmp	r3, r2
 8010766:	d007      	beq.n	8010778 <TIM_OC6_SetConfig+0x78>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4a16      	ldr	r2, [pc, #88]	; (80107c4 <TIM_OC6_SetConfig+0xc4>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d003      	beq.n	8010778 <TIM_OC6_SetConfig+0x78>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	4a15      	ldr	r2, [pc, #84]	; (80107c8 <TIM_OC6_SetConfig+0xc8>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d109      	bne.n	801078c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801077e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	695b      	ldr	r3, [r3, #20]
 8010784:	029b      	lsls	r3, r3, #10
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	4313      	orrs	r3, r2
 801078a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	693a      	ldr	r2, [r7, #16]
 80107a4:	621a      	str	r2, [r3, #32]
}
 80107a6:	bf00      	nop
 80107a8:	371c      	adds	r7, #28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	feff8fff 	.word	0xfeff8fff
 80107b8:	40010000 	.word	0x40010000
 80107bc:	40010400 	.word	0x40010400
 80107c0:	40014000 	.word	0x40014000
 80107c4:	40014400 	.word	0x40014400
 80107c8:	40014800 	.word	0x40014800

080107cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	f003 031f 	and.w	r3, r3, #31
 80107de:	2201      	movs	r2, #1
 80107e0:	fa02 f303 	lsl.w	r3, r2, r3
 80107e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	6a1a      	ldr	r2, [r3, #32]
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	43db      	mvns	r3, r3
 80107ee:	401a      	ands	r2, r3
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a1a      	ldr	r2, [r3, #32]
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	f003 031f 	and.w	r3, r3, #31
 80107fe:	6879      	ldr	r1, [r7, #4]
 8010800:	fa01 f303 	lsl.w	r3, r1, r3
 8010804:	431a      	orrs	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	621a      	str	r2, [r3, #32]
}
 801080a:	bf00      	nop
 801080c:	371c      	adds	r7, #28
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr
	...

08010818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010828:	2b01      	cmp	r3, #1
 801082a:	d101      	bne.n	8010830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801082c:	2302      	movs	r3, #2
 801082e:	e077      	b.n	8010920 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2201      	movs	r2, #1
 8010834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2202      	movs	r2, #2
 801083c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a35      	ldr	r2, [pc, #212]	; (801092c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d004      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a34      	ldr	r2, [pc, #208]	; (8010930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d108      	bne.n	8010876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801086a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	4313      	orrs	r3, r2
 8010874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801087c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	68fa      	ldr	r2, [r7, #12]
 8010884:	4313      	orrs	r3, r2
 8010886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a25      	ldr	r2, [pc, #148]	; (801092c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d02c      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108a2:	d027      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4a22      	ldr	r2, [pc, #136]	; (8010934 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d022      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a21      	ldr	r2, [pc, #132]	; (8010938 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d01d      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a1f      	ldr	r2, [pc, #124]	; (801093c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d018      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a1a      	ldr	r2, [pc, #104]	; (8010930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d013      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a1b      	ldr	r2, [pc, #108]	; (8010940 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d00e      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a1a      	ldr	r2, [pc, #104]	; (8010944 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d009      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a18      	ldr	r2, [pc, #96]	; (8010948 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d004      	beq.n	80108f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a17      	ldr	r2, [pc, #92]	; (801094c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d10c      	bne.n	801090e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	4313      	orrs	r3, r2
 8010904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	68ba      	ldr	r2, [r7, #8]
 801090c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2201      	movs	r2, #1
 8010912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2200      	movs	r2, #0
 801091a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3714      	adds	r7, #20
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr
 801092c:	40010000 	.word	0x40010000
 8010930:	40010400 	.word	0x40010400
 8010934:	40000400 	.word	0x40000400
 8010938:	40000800 	.word	0x40000800
 801093c:	40000c00 	.word	0x40000c00
 8010940:	40001800 	.word	0x40001800
 8010944:	40014000 	.word	0x40014000
 8010948:	4000e000 	.word	0x4000e000
 801094c:	4000e400 	.word	0x4000e400

08010950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801096c:	bf00      	nop
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010980:	bf00      	nop
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d101      	bne.n	801099e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801099a:	2301      	movs	r3, #1
 801099c:	e042      	b.n	8010a24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d106      	bne.n	80109b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7f2 fd3f 	bl	8003434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2224      	movs	r2, #36	; 0x24
 80109ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f022 0201 	bic.w	r2, r2, #1
 80109cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f000 f82c 	bl	8010a2c <UART_SetConfig>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d101      	bne.n	80109de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80109da:	2301      	movs	r3, #1
 80109dc:	e022      	b.n	8010a24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d002      	beq.n	80109ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 fe8c 	bl	8011704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	685a      	ldr	r2, [r3, #4]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	689a      	ldr	r2, [r3, #8]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f042 0201 	orr.w	r2, r2, #1
 8010a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 ff13 	bl	8011848 <UART_CheckIdleState>
 8010a22:	4603      	mov	r3, r0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a30:	b092      	sub	sp, #72	; 0x48
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a36:	2300      	movs	r3, #0
 8010a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	689a      	ldr	r2, [r3, #8]
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	691b      	ldr	r3, [r3, #16]
 8010a44:	431a      	orrs	r2, r3
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	695b      	ldr	r3, [r3, #20]
 8010a4a:	431a      	orrs	r2, r3
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	69db      	ldr	r3, [r3, #28]
 8010a50:	4313      	orrs	r3, r2
 8010a52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	4bbe      	ldr	r3, [pc, #760]	; (8010d54 <UART_SetConfig+0x328>)
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	697a      	ldr	r2, [r7, #20]
 8010a60:	6812      	ldr	r2, [r2, #0]
 8010a62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a64:	430b      	orrs	r3, r1
 8010a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	68da      	ldr	r2, [r3, #12]
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	430a      	orrs	r2, r1
 8010a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4ab3      	ldr	r2, [pc, #716]	; (8010d58 <UART_SetConfig+0x32c>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d004      	beq.n	8010a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	6a1b      	ldr	r3, [r3, #32]
 8010a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a94:	4313      	orrs	r3, r2
 8010a96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	689a      	ldr	r2, [r3, #8]
 8010a9e:	4baf      	ldr	r3, [pc, #700]	; (8010d5c <UART_SetConfig+0x330>)
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	697a      	ldr	r2, [r7, #20]
 8010aa4:	6812      	ldr	r2, [r2, #0]
 8010aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010aa8:	430b      	orrs	r3, r1
 8010aaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ab2:	f023 010f 	bic.w	r1, r3, #15
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	430a      	orrs	r2, r1
 8010ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4aa6      	ldr	r2, [pc, #664]	; (8010d60 <UART_SetConfig+0x334>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d177      	bne.n	8010bbc <UART_SetConfig+0x190>
 8010acc:	4ba5      	ldr	r3, [pc, #660]	; (8010d64 <UART_SetConfig+0x338>)
 8010ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ad4:	2b28      	cmp	r3, #40	; 0x28
 8010ad6:	d86d      	bhi.n	8010bb4 <UART_SetConfig+0x188>
 8010ad8:	a201      	add	r2, pc, #4	; (adr r2, 8010ae0 <UART_SetConfig+0xb4>)
 8010ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ade:	bf00      	nop
 8010ae0:	08010b85 	.word	0x08010b85
 8010ae4:	08010bb5 	.word	0x08010bb5
 8010ae8:	08010bb5 	.word	0x08010bb5
 8010aec:	08010bb5 	.word	0x08010bb5
 8010af0:	08010bb5 	.word	0x08010bb5
 8010af4:	08010bb5 	.word	0x08010bb5
 8010af8:	08010bb5 	.word	0x08010bb5
 8010afc:	08010bb5 	.word	0x08010bb5
 8010b00:	08010b8d 	.word	0x08010b8d
 8010b04:	08010bb5 	.word	0x08010bb5
 8010b08:	08010bb5 	.word	0x08010bb5
 8010b0c:	08010bb5 	.word	0x08010bb5
 8010b10:	08010bb5 	.word	0x08010bb5
 8010b14:	08010bb5 	.word	0x08010bb5
 8010b18:	08010bb5 	.word	0x08010bb5
 8010b1c:	08010bb5 	.word	0x08010bb5
 8010b20:	08010b95 	.word	0x08010b95
 8010b24:	08010bb5 	.word	0x08010bb5
 8010b28:	08010bb5 	.word	0x08010bb5
 8010b2c:	08010bb5 	.word	0x08010bb5
 8010b30:	08010bb5 	.word	0x08010bb5
 8010b34:	08010bb5 	.word	0x08010bb5
 8010b38:	08010bb5 	.word	0x08010bb5
 8010b3c:	08010bb5 	.word	0x08010bb5
 8010b40:	08010b9d 	.word	0x08010b9d
 8010b44:	08010bb5 	.word	0x08010bb5
 8010b48:	08010bb5 	.word	0x08010bb5
 8010b4c:	08010bb5 	.word	0x08010bb5
 8010b50:	08010bb5 	.word	0x08010bb5
 8010b54:	08010bb5 	.word	0x08010bb5
 8010b58:	08010bb5 	.word	0x08010bb5
 8010b5c:	08010bb5 	.word	0x08010bb5
 8010b60:	08010ba5 	.word	0x08010ba5
 8010b64:	08010bb5 	.word	0x08010bb5
 8010b68:	08010bb5 	.word	0x08010bb5
 8010b6c:	08010bb5 	.word	0x08010bb5
 8010b70:	08010bb5 	.word	0x08010bb5
 8010b74:	08010bb5 	.word	0x08010bb5
 8010b78:	08010bb5 	.word	0x08010bb5
 8010b7c:	08010bb5 	.word	0x08010bb5
 8010b80:	08010bad 	.word	0x08010bad
 8010b84:	2301      	movs	r3, #1
 8010b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8a:	e326      	b.n	80111da <UART_SetConfig+0x7ae>
 8010b8c:	2304      	movs	r3, #4
 8010b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b92:	e322      	b.n	80111da <UART_SetConfig+0x7ae>
 8010b94:	2308      	movs	r3, #8
 8010b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9a:	e31e      	b.n	80111da <UART_SetConfig+0x7ae>
 8010b9c:	2310      	movs	r3, #16
 8010b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba2:	e31a      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ba4:	2320      	movs	r3, #32
 8010ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010baa:	e316      	b.n	80111da <UART_SetConfig+0x7ae>
 8010bac:	2340      	movs	r3, #64	; 0x40
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb2:	e312      	b.n	80111da <UART_SetConfig+0x7ae>
 8010bb4:	2380      	movs	r3, #128	; 0x80
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bba:	e30e      	b.n	80111da <UART_SetConfig+0x7ae>
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4a69      	ldr	r2, [pc, #420]	; (8010d68 <UART_SetConfig+0x33c>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d130      	bne.n	8010c28 <UART_SetConfig+0x1fc>
 8010bc6:	4b67      	ldr	r3, [pc, #412]	; (8010d64 <UART_SetConfig+0x338>)
 8010bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bca:	f003 0307 	and.w	r3, r3, #7
 8010bce:	2b05      	cmp	r3, #5
 8010bd0:	d826      	bhi.n	8010c20 <UART_SetConfig+0x1f4>
 8010bd2:	a201      	add	r2, pc, #4	; (adr r2, 8010bd8 <UART_SetConfig+0x1ac>)
 8010bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd8:	08010bf1 	.word	0x08010bf1
 8010bdc:	08010bf9 	.word	0x08010bf9
 8010be0:	08010c01 	.word	0x08010c01
 8010be4:	08010c09 	.word	0x08010c09
 8010be8:	08010c11 	.word	0x08010c11
 8010bec:	08010c19 	.word	0x08010c19
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e2f0      	b.n	80111da <UART_SetConfig+0x7ae>
 8010bf8:	2304      	movs	r3, #4
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfe:	e2ec      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c00:	2308      	movs	r3, #8
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c06:	e2e8      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c08:	2310      	movs	r3, #16
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0e:	e2e4      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c10:	2320      	movs	r3, #32
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c16:	e2e0      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c18:	2340      	movs	r3, #64	; 0x40
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1e:	e2dc      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c20:	2380      	movs	r3, #128	; 0x80
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c26:	e2d8      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a4f      	ldr	r2, [pc, #316]	; (8010d6c <UART_SetConfig+0x340>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d130      	bne.n	8010c94 <UART_SetConfig+0x268>
 8010c32:	4b4c      	ldr	r3, [pc, #304]	; (8010d64 <UART_SetConfig+0x338>)
 8010c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c36:	f003 0307 	and.w	r3, r3, #7
 8010c3a:	2b05      	cmp	r3, #5
 8010c3c:	d826      	bhi.n	8010c8c <UART_SetConfig+0x260>
 8010c3e:	a201      	add	r2, pc, #4	; (adr r2, 8010c44 <UART_SetConfig+0x218>)
 8010c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c44:	08010c5d 	.word	0x08010c5d
 8010c48:	08010c65 	.word	0x08010c65
 8010c4c:	08010c6d 	.word	0x08010c6d
 8010c50:	08010c75 	.word	0x08010c75
 8010c54:	08010c7d 	.word	0x08010c7d
 8010c58:	08010c85 	.word	0x08010c85
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c62:	e2ba      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c64:	2304      	movs	r3, #4
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6a:	e2b6      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c6c:	2308      	movs	r3, #8
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c72:	e2b2      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c74:	2310      	movs	r3, #16
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e2ae      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c7c:	2320      	movs	r3, #32
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e2aa      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c84:	2340      	movs	r3, #64	; 0x40
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e2a6      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c8c:	2380      	movs	r3, #128	; 0x80
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e2a2      	b.n	80111da <UART_SetConfig+0x7ae>
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	4a35      	ldr	r2, [pc, #212]	; (8010d70 <UART_SetConfig+0x344>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d130      	bne.n	8010d00 <UART_SetConfig+0x2d4>
 8010c9e:	4b31      	ldr	r3, [pc, #196]	; (8010d64 <UART_SetConfig+0x338>)
 8010ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ca2:	f003 0307 	and.w	r3, r3, #7
 8010ca6:	2b05      	cmp	r3, #5
 8010ca8:	d826      	bhi.n	8010cf8 <UART_SetConfig+0x2cc>
 8010caa:	a201      	add	r2, pc, #4	; (adr r2, 8010cb0 <UART_SetConfig+0x284>)
 8010cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb0:	08010cc9 	.word	0x08010cc9
 8010cb4:	08010cd1 	.word	0x08010cd1
 8010cb8:	08010cd9 	.word	0x08010cd9
 8010cbc:	08010ce1 	.word	0x08010ce1
 8010cc0:	08010ce9 	.word	0x08010ce9
 8010cc4:	08010cf1 	.word	0x08010cf1
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e284      	b.n	80111da <UART_SetConfig+0x7ae>
 8010cd0:	2304      	movs	r3, #4
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd6:	e280      	b.n	80111da <UART_SetConfig+0x7ae>
 8010cd8:	2308      	movs	r3, #8
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cde:	e27c      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ce0:	2310      	movs	r3, #16
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e278      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ce8:	2320      	movs	r3, #32
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cee:	e274      	b.n	80111da <UART_SetConfig+0x7ae>
 8010cf0:	2340      	movs	r3, #64	; 0x40
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e270      	b.n	80111da <UART_SetConfig+0x7ae>
 8010cf8:	2380      	movs	r3, #128	; 0x80
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e26c      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4a1b      	ldr	r2, [pc, #108]	; (8010d74 <UART_SetConfig+0x348>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d142      	bne.n	8010d90 <UART_SetConfig+0x364>
 8010d0a:	4b16      	ldr	r3, [pc, #88]	; (8010d64 <UART_SetConfig+0x338>)
 8010d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d0e:	f003 0307 	and.w	r3, r3, #7
 8010d12:	2b05      	cmp	r3, #5
 8010d14:	d838      	bhi.n	8010d88 <UART_SetConfig+0x35c>
 8010d16:	a201      	add	r2, pc, #4	; (adr r2, 8010d1c <UART_SetConfig+0x2f0>)
 8010d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1c:	08010d35 	.word	0x08010d35
 8010d20:	08010d3d 	.word	0x08010d3d
 8010d24:	08010d45 	.word	0x08010d45
 8010d28:	08010d4d 	.word	0x08010d4d
 8010d2c:	08010d79 	.word	0x08010d79
 8010d30:	08010d81 	.word	0x08010d81
 8010d34:	2300      	movs	r3, #0
 8010d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3a:	e24e      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d3c:	2304      	movs	r3, #4
 8010d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d42:	e24a      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d44:	2308      	movs	r3, #8
 8010d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4a:	e246      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d4c:	2310      	movs	r3, #16
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e242      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d54:	cfff69f3 	.word	0xcfff69f3
 8010d58:	58000c00 	.word	0x58000c00
 8010d5c:	11fff4ff 	.word	0x11fff4ff
 8010d60:	40011000 	.word	0x40011000
 8010d64:	58024400 	.word	0x58024400
 8010d68:	40004400 	.word	0x40004400
 8010d6c:	40004800 	.word	0x40004800
 8010d70:	40004c00 	.word	0x40004c00
 8010d74:	40005000 	.word	0x40005000
 8010d78:	2320      	movs	r3, #32
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7e:	e22c      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d80:	2340      	movs	r3, #64	; 0x40
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e228      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d88:	2380      	movs	r3, #128	; 0x80
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e224      	b.n	80111da <UART_SetConfig+0x7ae>
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4ab1      	ldr	r2, [pc, #708]	; (801105c <UART_SetConfig+0x630>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d176      	bne.n	8010e88 <UART_SetConfig+0x45c>
 8010d9a:	4bb1      	ldr	r3, [pc, #708]	; (8011060 <UART_SetConfig+0x634>)
 8010d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010da2:	2b28      	cmp	r3, #40	; 0x28
 8010da4:	d86c      	bhi.n	8010e80 <UART_SetConfig+0x454>
 8010da6:	a201      	add	r2, pc, #4	; (adr r2, 8010dac <UART_SetConfig+0x380>)
 8010da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dac:	08010e51 	.word	0x08010e51
 8010db0:	08010e81 	.word	0x08010e81
 8010db4:	08010e81 	.word	0x08010e81
 8010db8:	08010e81 	.word	0x08010e81
 8010dbc:	08010e81 	.word	0x08010e81
 8010dc0:	08010e81 	.word	0x08010e81
 8010dc4:	08010e81 	.word	0x08010e81
 8010dc8:	08010e81 	.word	0x08010e81
 8010dcc:	08010e59 	.word	0x08010e59
 8010dd0:	08010e81 	.word	0x08010e81
 8010dd4:	08010e81 	.word	0x08010e81
 8010dd8:	08010e81 	.word	0x08010e81
 8010ddc:	08010e81 	.word	0x08010e81
 8010de0:	08010e81 	.word	0x08010e81
 8010de4:	08010e81 	.word	0x08010e81
 8010de8:	08010e81 	.word	0x08010e81
 8010dec:	08010e61 	.word	0x08010e61
 8010df0:	08010e81 	.word	0x08010e81
 8010df4:	08010e81 	.word	0x08010e81
 8010df8:	08010e81 	.word	0x08010e81
 8010dfc:	08010e81 	.word	0x08010e81
 8010e00:	08010e81 	.word	0x08010e81
 8010e04:	08010e81 	.word	0x08010e81
 8010e08:	08010e81 	.word	0x08010e81
 8010e0c:	08010e69 	.word	0x08010e69
 8010e10:	08010e81 	.word	0x08010e81
 8010e14:	08010e81 	.word	0x08010e81
 8010e18:	08010e81 	.word	0x08010e81
 8010e1c:	08010e81 	.word	0x08010e81
 8010e20:	08010e81 	.word	0x08010e81
 8010e24:	08010e81 	.word	0x08010e81
 8010e28:	08010e81 	.word	0x08010e81
 8010e2c:	08010e71 	.word	0x08010e71
 8010e30:	08010e81 	.word	0x08010e81
 8010e34:	08010e81 	.word	0x08010e81
 8010e38:	08010e81 	.word	0x08010e81
 8010e3c:	08010e81 	.word	0x08010e81
 8010e40:	08010e81 	.word	0x08010e81
 8010e44:	08010e81 	.word	0x08010e81
 8010e48:	08010e81 	.word	0x08010e81
 8010e4c:	08010e79 	.word	0x08010e79
 8010e50:	2301      	movs	r3, #1
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e1c0      	b.n	80111da <UART_SetConfig+0x7ae>
 8010e58:	2304      	movs	r3, #4
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e1bc      	b.n	80111da <UART_SetConfig+0x7ae>
 8010e60:	2308      	movs	r3, #8
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e1b8      	b.n	80111da <UART_SetConfig+0x7ae>
 8010e68:	2310      	movs	r3, #16
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e1b4      	b.n	80111da <UART_SetConfig+0x7ae>
 8010e70:	2320      	movs	r3, #32
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e1b0      	b.n	80111da <UART_SetConfig+0x7ae>
 8010e78:	2340      	movs	r3, #64	; 0x40
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e1ac      	b.n	80111da <UART_SetConfig+0x7ae>
 8010e80:	2380      	movs	r3, #128	; 0x80
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e1a8      	b.n	80111da <UART_SetConfig+0x7ae>
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a75      	ldr	r2, [pc, #468]	; (8011064 <UART_SetConfig+0x638>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d130      	bne.n	8010ef4 <UART_SetConfig+0x4c8>
 8010e92:	4b73      	ldr	r3, [pc, #460]	; (8011060 <UART_SetConfig+0x634>)
 8010e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e96:	f003 0307 	and.w	r3, r3, #7
 8010e9a:	2b05      	cmp	r3, #5
 8010e9c:	d826      	bhi.n	8010eec <UART_SetConfig+0x4c0>
 8010e9e:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <UART_SetConfig+0x478>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010ebd 	.word	0x08010ebd
 8010ea8:	08010ec5 	.word	0x08010ec5
 8010eac:	08010ecd 	.word	0x08010ecd
 8010eb0:	08010ed5 	.word	0x08010ed5
 8010eb4:	08010edd 	.word	0x08010edd
 8010eb8:	08010ee5 	.word	0x08010ee5
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e18a      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ec4:	2304      	movs	r3, #4
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e186      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ecc:	2308      	movs	r3, #8
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e182      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ed4:	2310      	movs	r3, #16
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e17e      	b.n	80111da <UART_SetConfig+0x7ae>
 8010edc:	2320      	movs	r3, #32
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e17a      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ee4:	2340      	movs	r3, #64	; 0x40
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e176      	b.n	80111da <UART_SetConfig+0x7ae>
 8010eec:	2380      	movs	r3, #128	; 0x80
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e172      	b.n	80111da <UART_SetConfig+0x7ae>
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a5b      	ldr	r2, [pc, #364]	; (8011068 <UART_SetConfig+0x63c>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d130      	bne.n	8010f60 <UART_SetConfig+0x534>
 8010efe:	4b58      	ldr	r3, [pc, #352]	; (8011060 <UART_SetConfig+0x634>)
 8010f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f02:	f003 0307 	and.w	r3, r3, #7
 8010f06:	2b05      	cmp	r3, #5
 8010f08:	d826      	bhi.n	8010f58 <UART_SetConfig+0x52c>
 8010f0a:	a201      	add	r2, pc, #4	; (adr r2, 8010f10 <UART_SetConfig+0x4e4>)
 8010f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f10:	08010f29 	.word	0x08010f29
 8010f14:	08010f31 	.word	0x08010f31
 8010f18:	08010f39 	.word	0x08010f39
 8010f1c:	08010f41 	.word	0x08010f41
 8010f20:	08010f49 	.word	0x08010f49
 8010f24:	08010f51 	.word	0x08010f51
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e154      	b.n	80111da <UART_SetConfig+0x7ae>
 8010f30:	2304      	movs	r3, #4
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e150      	b.n	80111da <UART_SetConfig+0x7ae>
 8010f38:	2308      	movs	r3, #8
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e14c      	b.n	80111da <UART_SetConfig+0x7ae>
 8010f40:	2310      	movs	r3, #16
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e148      	b.n	80111da <UART_SetConfig+0x7ae>
 8010f48:	2320      	movs	r3, #32
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e144      	b.n	80111da <UART_SetConfig+0x7ae>
 8010f50:	2340      	movs	r3, #64	; 0x40
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e140      	b.n	80111da <UART_SetConfig+0x7ae>
 8010f58:	2380      	movs	r3, #128	; 0x80
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e13c      	b.n	80111da <UART_SetConfig+0x7ae>
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4a41      	ldr	r2, [pc, #260]	; (801106c <UART_SetConfig+0x640>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	f040 8082 	bne.w	8011070 <UART_SetConfig+0x644>
 8010f6c:	4b3c      	ldr	r3, [pc, #240]	; (8011060 <UART_SetConfig+0x634>)
 8010f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f74:	2b28      	cmp	r3, #40	; 0x28
 8010f76:	d86d      	bhi.n	8011054 <UART_SetConfig+0x628>
 8010f78:	a201      	add	r2, pc, #4	; (adr r2, 8010f80 <UART_SetConfig+0x554>)
 8010f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7e:	bf00      	nop
 8010f80:	08011025 	.word	0x08011025
 8010f84:	08011055 	.word	0x08011055
 8010f88:	08011055 	.word	0x08011055
 8010f8c:	08011055 	.word	0x08011055
 8010f90:	08011055 	.word	0x08011055
 8010f94:	08011055 	.word	0x08011055
 8010f98:	08011055 	.word	0x08011055
 8010f9c:	08011055 	.word	0x08011055
 8010fa0:	0801102d 	.word	0x0801102d
 8010fa4:	08011055 	.word	0x08011055
 8010fa8:	08011055 	.word	0x08011055
 8010fac:	08011055 	.word	0x08011055
 8010fb0:	08011055 	.word	0x08011055
 8010fb4:	08011055 	.word	0x08011055
 8010fb8:	08011055 	.word	0x08011055
 8010fbc:	08011055 	.word	0x08011055
 8010fc0:	08011035 	.word	0x08011035
 8010fc4:	08011055 	.word	0x08011055
 8010fc8:	08011055 	.word	0x08011055
 8010fcc:	08011055 	.word	0x08011055
 8010fd0:	08011055 	.word	0x08011055
 8010fd4:	08011055 	.word	0x08011055
 8010fd8:	08011055 	.word	0x08011055
 8010fdc:	08011055 	.word	0x08011055
 8010fe0:	0801103d 	.word	0x0801103d
 8010fe4:	08011055 	.word	0x08011055
 8010fe8:	08011055 	.word	0x08011055
 8010fec:	08011055 	.word	0x08011055
 8010ff0:	08011055 	.word	0x08011055
 8010ff4:	08011055 	.word	0x08011055
 8010ff8:	08011055 	.word	0x08011055
 8010ffc:	08011055 	.word	0x08011055
 8011000:	08011045 	.word	0x08011045
 8011004:	08011055 	.word	0x08011055
 8011008:	08011055 	.word	0x08011055
 801100c:	08011055 	.word	0x08011055
 8011010:	08011055 	.word	0x08011055
 8011014:	08011055 	.word	0x08011055
 8011018:	08011055 	.word	0x08011055
 801101c:	08011055 	.word	0x08011055
 8011020:	0801104d 	.word	0x0801104d
 8011024:	2301      	movs	r3, #1
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102a:	e0d6      	b.n	80111da <UART_SetConfig+0x7ae>
 801102c:	2304      	movs	r3, #4
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e0d2      	b.n	80111da <UART_SetConfig+0x7ae>
 8011034:	2308      	movs	r3, #8
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e0ce      	b.n	80111da <UART_SetConfig+0x7ae>
 801103c:	2310      	movs	r3, #16
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e0ca      	b.n	80111da <UART_SetConfig+0x7ae>
 8011044:	2320      	movs	r3, #32
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e0c6      	b.n	80111da <UART_SetConfig+0x7ae>
 801104c:	2340      	movs	r3, #64	; 0x40
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e0c2      	b.n	80111da <UART_SetConfig+0x7ae>
 8011054:	2380      	movs	r3, #128	; 0x80
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e0be      	b.n	80111da <UART_SetConfig+0x7ae>
 801105c:	40011400 	.word	0x40011400
 8011060:	58024400 	.word	0x58024400
 8011064:	40007800 	.word	0x40007800
 8011068:	40007c00 	.word	0x40007c00
 801106c:	40011800 	.word	0x40011800
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4aad      	ldr	r2, [pc, #692]	; (801132c <UART_SetConfig+0x900>)
 8011076:	4293      	cmp	r3, r2
 8011078:	d176      	bne.n	8011168 <UART_SetConfig+0x73c>
 801107a:	4bad      	ldr	r3, [pc, #692]	; (8011330 <UART_SetConfig+0x904>)
 801107c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801107e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011082:	2b28      	cmp	r3, #40	; 0x28
 8011084:	d86c      	bhi.n	8011160 <UART_SetConfig+0x734>
 8011086:	a201      	add	r2, pc, #4	; (adr r2, 801108c <UART_SetConfig+0x660>)
 8011088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801108c:	08011131 	.word	0x08011131
 8011090:	08011161 	.word	0x08011161
 8011094:	08011161 	.word	0x08011161
 8011098:	08011161 	.word	0x08011161
 801109c:	08011161 	.word	0x08011161
 80110a0:	08011161 	.word	0x08011161
 80110a4:	08011161 	.word	0x08011161
 80110a8:	08011161 	.word	0x08011161
 80110ac:	08011139 	.word	0x08011139
 80110b0:	08011161 	.word	0x08011161
 80110b4:	08011161 	.word	0x08011161
 80110b8:	08011161 	.word	0x08011161
 80110bc:	08011161 	.word	0x08011161
 80110c0:	08011161 	.word	0x08011161
 80110c4:	08011161 	.word	0x08011161
 80110c8:	08011161 	.word	0x08011161
 80110cc:	08011141 	.word	0x08011141
 80110d0:	08011161 	.word	0x08011161
 80110d4:	08011161 	.word	0x08011161
 80110d8:	08011161 	.word	0x08011161
 80110dc:	08011161 	.word	0x08011161
 80110e0:	08011161 	.word	0x08011161
 80110e4:	08011161 	.word	0x08011161
 80110e8:	08011161 	.word	0x08011161
 80110ec:	08011149 	.word	0x08011149
 80110f0:	08011161 	.word	0x08011161
 80110f4:	08011161 	.word	0x08011161
 80110f8:	08011161 	.word	0x08011161
 80110fc:	08011161 	.word	0x08011161
 8011100:	08011161 	.word	0x08011161
 8011104:	08011161 	.word	0x08011161
 8011108:	08011161 	.word	0x08011161
 801110c:	08011151 	.word	0x08011151
 8011110:	08011161 	.word	0x08011161
 8011114:	08011161 	.word	0x08011161
 8011118:	08011161 	.word	0x08011161
 801111c:	08011161 	.word	0x08011161
 8011120:	08011161 	.word	0x08011161
 8011124:	08011161 	.word	0x08011161
 8011128:	08011161 	.word	0x08011161
 801112c:	08011159 	.word	0x08011159
 8011130:	2301      	movs	r3, #1
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e050      	b.n	80111da <UART_SetConfig+0x7ae>
 8011138:	2304      	movs	r3, #4
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e04c      	b.n	80111da <UART_SetConfig+0x7ae>
 8011140:	2308      	movs	r3, #8
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e048      	b.n	80111da <UART_SetConfig+0x7ae>
 8011148:	2310      	movs	r3, #16
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e044      	b.n	80111da <UART_SetConfig+0x7ae>
 8011150:	2320      	movs	r3, #32
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e040      	b.n	80111da <UART_SetConfig+0x7ae>
 8011158:	2340      	movs	r3, #64	; 0x40
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e03c      	b.n	80111da <UART_SetConfig+0x7ae>
 8011160:	2380      	movs	r3, #128	; 0x80
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e038      	b.n	80111da <UART_SetConfig+0x7ae>
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4a71      	ldr	r2, [pc, #452]	; (8011334 <UART_SetConfig+0x908>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d130      	bne.n	80111d4 <UART_SetConfig+0x7a8>
 8011172:	4b6f      	ldr	r3, [pc, #444]	; (8011330 <UART_SetConfig+0x904>)
 8011174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011176:	f003 0307 	and.w	r3, r3, #7
 801117a:	2b05      	cmp	r3, #5
 801117c:	d826      	bhi.n	80111cc <UART_SetConfig+0x7a0>
 801117e:	a201      	add	r2, pc, #4	; (adr r2, 8011184 <UART_SetConfig+0x758>)
 8011180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011184:	0801119d 	.word	0x0801119d
 8011188:	080111a5 	.word	0x080111a5
 801118c:	080111ad 	.word	0x080111ad
 8011190:	080111b5 	.word	0x080111b5
 8011194:	080111bd 	.word	0x080111bd
 8011198:	080111c5 	.word	0x080111c5
 801119c:	2302      	movs	r3, #2
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e01a      	b.n	80111da <UART_SetConfig+0x7ae>
 80111a4:	2304      	movs	r3, #4
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e016      	b.n	80111da <UART_SetConfig+0x7ae>
 80111ac:	2308      	movs	r3, #8
 80111ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b2:	e012      	b.n	80111da <UART_SetConfig+0x7ae>
 80111b4:	2310      	movs	r3, #16
 80111b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ba:	e00e      	b.n	80111da <UART_SetConfig+0x7ae>
 80111bc:	2320      	movs	r3, #32
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e00a      	b.n	80111da <UART_SetConfig+0x7ae>
 80111c4:	2340      	movs	r3, #64	; 0x40
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e006      	b.n	80111da <UART_SetConfig+0x7ae>
 80111cc:	2380      	movs	r3, #128	; 0x80
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e002      	b.n	80111da <UART_SetConfig+0x7ae>
 80111d4:	2380      	movs	r3, #128	; 0x80
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	4a55      	ldr	r2, [pc, #340]	; (8011334 <UART_SetConfig+0x908>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	f040 80f8 	bne.w	80113d6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80111e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111ea:	2b20      	cmp	r3, #32
 80111ec:	dc46      	bgt.n	801127c <UART_SetConfig+0x850>
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	db75      	blt.n	80112de <UART_SetConfig+0x8b2>
 80111f2:	3b02      	subs	r3, #2
 80111f4:	2b1e      	cmp	r3, #30
 80111f6:	d872      	bhi.n	80112de <UART_SetConfig+0x8b2>
 80111f8:	a201      	add	r2, pc, #4	; (adr r2, 8011200 <UART_SetConfig+0x7d4>)
 80111fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111fe:	bf00      	nop
 8011200:	08011283 	.word	0x08011283
 8011204:	080112df 	.word	0x080112df
 8011208:	0801128b 	.word	0x0801128b
 801120c:	080112df 	.word	0x080112df
 8011210:	080112df 	.word	0x080112df
 8011214:	080112df 	.word	0x080112df
 8011218:	0801129b 	.word	0x0801129b
 801121c:	080112df 	.word	0x080112df
 8011220:	080112df 	.word	0x080112df
 8011224:	080112df 	.word	0x080112df
 8011228:	080112df 	.word	0x080112df
 801122c:	080112df 	.word	0x080112df
 8011230:	080112df 	.word	0x080112df
 8011234:	080112df 	.word	0x080112df
 8011238:	080112ab 	.word	0x080112ab
 801123c:	080112df 	.word	0x080112df
 8011240:	080112df 	.word	0x080112df
 8011244:	080112df 	.word	0x080112df
 8011248:	080112df 	.word	0x080112df
 801124c:	080112df 	.word	0x080112df
 8011250:	080112df 	.word	0x080112df
 8011254:	080112df 	.word	0x080112df
 8011258:	080112df 	.word	0x080112df
 801125c:	080112df 	.word	0x080112df
 8011260:	080112df 	.word	0x080112df
 8011264:	080112df 	.word	0x080112df
 8011268:	080112df 	.word	0x080112df
 801126c:	080112df 	.word	0x080112df
 8011270:	080112df 	.word	0x080112df
 8011274:	080112df 	.word	0x080112df
 8011278:	080112d1 	.word	0x080112d1
 801127c:	2b40      	cmp	r3, #64	; 0x40
 801127e:	d02a      	beq.n	80112d6 <UART_SetConfig+0x8aa>
 8011280:	e02d      	b.n	80112de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011282:	f7fb f8c3 	bl	800c40c <HAL_RCCEx_GetD3PCLK1Freq>
 8011286:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011288:	e02f      	b.n	80112ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801128e:	4618      	mov	r0, r3
 8011290:	f7fb f8d2 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011298:	e027      	b.n	80112ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801129a:	f107 0318 	add.w	r3, r7, #24
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fb fa1e 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112a8:	e01f      	b.n	80112ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112aa:	4b21      	ldr	r3, [pc, #132]	; (8011330 <UART_SetConfig+0x904>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f003 0320 	and.w	r3, r3, #32
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d009      	beq.n	80112ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112b6:	4b1e      	ldr	r3, [pc, #120]	; (8011330 <UART_SetConfig+0x904>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	08db      	lsrs	r3, r3, #3
 80112bc:	f003 0303 	and.w	r3, r3, #3
 80112c0:	4a1d      	ldr	r2, [pc, #116]	; (8011338 <UART_SetConfig+0x90c>)
 80112c2:	fa22 f303 	lsr.w	r3, r2, r3
 80112c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112c8:	e00f      	b.n	80112ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80112ca:	4b1b      	ldr	r3, [pc, #108]	; (8011338 <UART_SetConfig+0x90c>)
 80112cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112ce:	e00c      	b.n	80112ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112d0:	4b1a      	ldr	r3, [pc, #104]	; (801133c <UART_SetConfig+0x910>)
 80112d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d4:	e009      	b.n	80112ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112dc:	e005      	b.n	80112ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80112de:	2300      	movs	r3, #0
 80112e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80112e2:	2301      	movs	r3, #1
 80112e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80112e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80112ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f000 81ee 	beq.w	80116ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f6:	4a12      	ldr	r2, [pc, #72]	; (8011340 <UART_SetConfig+0x914>)
 80112f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112fc:	461a      	mov	r2, r3
 80112fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011300:	fbb3 f3f2 	udiv	r3, r3, r2
 8011304:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	685a      	ldr	r2, [r3, #4]
 801130a:	4613      	mov	r3, r2
 801130c:	005b      	lsls	r3, r3, #1
 801130e:	4413      	add	r3, r2
 8011310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011312:	429a      	cmp	r2, r3
 8011314:	d305      	bcc.n	8011322 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801131c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801131e:	429a      	cmp	r2, r3
 8011320:	d910      	bls.n	8011344 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011328:	e1d1      	b.n	80116ce <UART_SetConfig+0xca2>
 801132a:	bf00      	nop
 801132c:	40011c00 	.word	0x40011c00
 8011330:	58024400 	.word	0x58024400
 8011334:	58000c00 	.word	0x58000c00
 8011338:	03d09000 	.word	0x03d09000
 801133c:	003d0900 	.word	0x003d0900
 8011340:	08017a6c 	.word	0x08017a6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011346:	2200      	movs	r2, #0
 8011348:	60bb      	str	r3, [r7, #8]
 801134a:	60fa      	str	r2, [r7, #12]
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011350:	4ac0      	ldr	r2, [pc, #768]	; (8011654 <UART_SetConfig+0xc28>)
 8011352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011356:	b29b      	uxth	r3, r3
 8011358:	2200      	movs	r2, #0
 801135a:	603b      	str	r3, [r7, #0]
 801135c:	607a      	str	r2, [r7, #4]
 801135e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011366:	f7ef f83b 	bl	80003e0 <__aeabi_uldivmod>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	4610      	mov	r0, r2
 8011370:	4619      	mov	r1, r3
 8011372:	f04f 0200 	mov.w	r2, #0
 8011376:	f04f 0300 	mov.w	r3, #0
 801137a:	020b      	lsls	r3, r1, #8
 801137c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011380:	0202      	lsls	r2, r0, #8
 8011382:	6979      	ldr	r1, [r7, #20]
 8011384:	6849      	ldr	r1, [r1, #4]
 8011386:	0849      	lsrs	r1, r1, #1
 8011388:	2000      	movs	r0, #0
 801138a:	460c      	mov	r4, r1
 801138c:	4605      	mov	r5, r0
 801138e:	eb12 0804 	adds.w	r8, r2, r4
 8011392:	eb43 0905 	adc.w	r9, r3, r5
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	469a      	mov	sl, r3
 801139e:	4693      	mov	fp, r2
 80113a0:	4652      	mov	r2, sl
 80113a2:	465b      	mov	r3, fp
 80113a4:	4640      	mov	r0, r8
 80113a6:	4649      	mov	r1, r9
 80113a8:	f7ef f81a 	bl	80003e0 <__aeabi_uldivmod>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	4613      	mov	r3, r2
 80113b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80113b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113ba:	d308      	bcc.n	80113ce <UART_SetConfig+0x9a2>
 80113bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113c2:	d204      	bcs.n	80113ce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113ca:	60da      	str	r2, [r3, #12]
 80113cc:	e17f      	b.n	80116ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80113ce:	2301      	movs	r3, #1
 80113d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80113d4:	e17b      	b.n	80116ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	69db      	ldr	r3, [r3, #28]
 80113da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113de:	f040 80bd 	bne.w	801155c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80113e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113e6:	2b20      	cmp	r3, #32
 80113e8:	dc48      	bgt.n	801147c <UART_SetConfig+0xa50>
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	db7b      	blt.n	80114e6 <UART_SetConfig+0xaba>
 80113ee:	2b20      	cmp	r3, #32
 80113f0:	d879      	bhi.n	80114e6 <UART_SetConfig+0xaba>
 80113f2:	a201      	add	r2, pc, #4	; (adr r2, 80113f8 <UART_SetConfig+0x9cc>)
 80113f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f8:	08011483 	.word	0x08011483
 80113fc:	0801148b 	.word	0x0801148b
 8011400:	080114e7 	.word	0x080114e7
 8011404:	080114e7 	.word	0x080114e7
 8011408:	08011493 	.word	0x08011493
 801140c:	080114e7 	.word	0x080114e7
 8011410:	080114e7 	.word	0x080114e7
 8011414:	080114e7 	.word	0x080114e7
 8011418:	080114a3 	.word	0x080114a3
 801141c:	080114e7 	.word	0x080114e7
 8011420:	080114e7 	.word	0x080114e7
 8011424:	080114e7 	.word	0x080114e7
 8011428:	080114e7 	.word	0x080114e7
 801142c:	080114e7 	.word	0x080114e7
 8011430:	080114e7 	.word	0x080114e7
 8011434:	080114e7 	.word	0x080114e7
 8011438:	080114b3 	.word	0x080114b3
 801143c:	080114e7 	.word	0x080114e7
 8011440:	080114e7 	.word	0x080114e7
 8011444:	080114e7 	.word	0x080114e7
 8011448:	080114e7 	.word	0x080114e7
 801144c:	080114e7 	.word	0x080114e7
 8011450:	080114e7 	.word	0x080114e7
 8011454:	080114e7 	.word	0x080114e7
 8011458:	080114e7 	.word	0x080114e7
 801145c:	080114e7 	.word	0x080114e7
 8011460:	080114e7 	.word	0x080114e7
 8011464:	080114e7 	.word	0x080114e7
 8011468:	080114e7 	.word	0x080114e7
 801146c:	080114e7 	.word	0x080114e7
 8011470:	080114e7 	.word	0x080114e7
 8011474:	080114e7 	.word	0x080114e7
 8011478:	080114d9 	.word	0x080114d9
 801147c:	2b40      	cmp	r3, #64	; 0x40
 801147e:	d02e      	beq.n	80114de <UART_SetConfig+0xab2>
 8011480:	e031      	b.n	80114e6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011482:	f7f9 f925 	bl	800a6d0 <HAL_RCC_GetPCLK1Freq>
 8011486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011488:	e033      	b.n	80114f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801148a:	f7f9 f937 	bl	800a6fc <HAL_RCC_GetPCLK2Freq>
 801148e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011490:	e02f      	b.n	80114f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011496:	4618      	mov	r0, r3
 8011498:	f7fa ffce 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a0:	e027      	b.n	80114f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114a2:	f107 0318 	add.w	r3, r7, #24
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fb f91a 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b0:	e01f      	b.n	80114f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114b2:	4b69      	ldr	r3, [pc, #420]	; (8011658 <UART_SetConfig+0xc2c>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f003 0320 	and.w	r3, r3, #32
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d009      	beq.n	80114d2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114be:	4b66      	ldr	r3, [pc, #408]	; (8011658 <UART_SetConfig+0xc2c>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	08db      	lsrs	r3, r3, #3
 80114c4:	f003 0303 	and.w	r3, r3, #3
 80114c8:	4a64      	ldr	r2, [pc, #400]	; (801165c <UART_SetConfig+0xc30>)
 80114ca:	fa22 f303 	lsr.w	r3, r2, r3
 80114ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114d0:	e00f      	b.n	80114f2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80114d2:	4b62      	ldr	r3, [pc, #392]	; (801165c <UART_SetConfig+0xc30>)
 80114d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114d6:	e00c      	b.n	80114f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114d8:	4b61      	ldr	r3, [pc, #388]	; (8011660 <UART_SetConfig+0xc34>)
 80114da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114dc:	e009      	b.n	80114f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114e4:	e005      	b.n	80114f2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80114e6:	2300      	movs	r3, #0
 80114e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114ea:	2301      	movs	r3, #1
 80114ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80114f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f000 80ea 	beq.w	80116ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114fe:	4a55      	ldr	r2, [pc, #340]	; (8011654 <UART_SetConfig+0xc28>)
 8011500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011504:	461a      	mov	r2, r3
 8011506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011508:	fbb3 f3f2 	udiv	r3, r3, r2
 801150c:	005a      	lsls	r2, r3, #1
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	085b      	lsrs	r3, r3, #1
 8011514:	441a      	add	r2, r3
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	fbb2 f3f3 	udiv	r3, r2, r3
 801151e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011522:	2b0f      	cmp	r3, #15
 8011524:	d916      	bls.n	8011554 <UART_SetConfig+0xb28>
 8011526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801152c:	d212      	bcs.n	8011554 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011530:	b29b      	uxth	r3, r3
 8011532:	f023 030f 	bic.w	r3, r3, #15
 8011536:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153a:	085b      	lsrs	r3, r3, #1
 801153c:	b29b      	uxth	r3, r3
 801153e:	f003 0307 	and.w	r3, r3, #7
 8011542:	b29a      	uxth	r2, r3
 8011544:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011546:	4313      	orrs	r3, r2
 8011548:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011550:	60da      	str	r2, [r3, #12]
 8011552:	e0bc      	b.n	80116ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011554:	2301      	movs	r3, #1
 8011556:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801155a:	e0b8      	b.n	80116ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801155c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011560:	2b20      	cmp	r3, #32
 8011562:	dc4b      	bgt.n	80115fc <UART_SetConfig+0xbd0>
 8011564:	2b00      	cmp	r3, #0
 8011566:	f2c0 8087 	blt.w	8011678 <UART_SetConfig+0xc4c>
 801156a:	2b20      	cmp	r3, #32
 801156c:	f200 8084 	bhi.w	8011678 <UART_SetConfig+0xc4c>
 8011570:	a201      	add	r2, pc, #4	; (adr r2, 8011578 <UART_SetConfig+0xb4c>)
 8011572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011576:	bf00      	nop
 8011578:	08011603 	.word	0x08011603
 801157c:	0801160b 	.word	0x0801160b
 8011580:	08011679 	.word	0x08011679
 8011584:	08011679 	.word	0x08011679
 8011588:	08011613 	.word	0x08011613
 801158c:	08011679 	.word	0x08011679
 8011590:	08011679 	.word	0x08011679
 8011594:	08011679 	.word	0x08011679
 8011598:	08011623 	.word	0x08011623
 801159c:	08011679 	.word	0x08011679
 80115a0:	08011679 	.word	0x08011679
 80115a4:	08011679 	.word	0x08011679
 80115a8:	08011679 	.word	0x08011679
 80115ac:	08011679 	.word	0x08011679
 80115b0:	08011679 	.word	0x08011679
 80115b4:	08011679 	.word	0x08011679
 80115b8:	08011633 	.word	0x08011633
 80115bc:	08011679 	.word	0x08011679
 80115c0:	08011679 	.word	0x08011679
 80115c4:	08011679 	.word	0x08011679
 80115c8:	08011679 	.word	0x08011679
 80115cc:	08011679 	.word	0x08011679
 80115d0:	08011679 	.word	0x08011679
 80115d4:	08011679 	.word	0x08011679
 80115d8:	08011679 	.word	0x08011679
 80115dc:	08011679 	.word	0x08011679
 80115e0:	08011679 	.word	0x08011679
 80115e4:	08011679 	.word	0x08011679
 80115e8:	08011679 	.word	0x08011679
 80115ec:	08011679 	.word	0x08011679
 80115f0:	08011679 	.word	0x08011679
 80115f4:	08011679 	.word	0x08011679
 80115f8:	0801166b 	.word	0x0801166b
 80115fc:	2b40      	cmp	r3, #64	; 0x40
 80115fe:	d037      	beq.n	8011670 <UART_SetConfig+0xc44>
 8011600:	e03a      	b.n	8011678 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011602:	f7f9 f865 	bl	800a6d0 <HAL_RCC_GetPCLK1Freq>
 8011606:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011608:	e03c      	b.n	8011684 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801160a:	f7f9 f877 	bl	800a6fc <HAL_RCC_GetPCLK2Freq>
 801160e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011610:	e038      	b.n	8011684 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011616:	4618      	mov	r0, r3
 8011618:	f7fa ff0e 	bl	800c438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011620:	e030      	b.n	8011684 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011622:	f107 0318 	add.w	r3, r7, #24
 8011626:	4618      	mov	r0, r3
 8011628:	f7fb f85a 	bl	800c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801162c:	69fb      	ldr	r3, [r7, #28]
 801162e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011630:	e028      	b.n	8011684 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011632:	4b09      	ldr	r3, [pc, #36]	; (8011658 <UART_SetConfig+0xc2c>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f003 0320 	and.w	r3, r3, #32
 801163a:	2b00      	cmp	r3, #0
 801163c:	d012      	beq.n	8011664 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801163e:	4b06      	ldr	r3, [pc, #24]	; (8011658 <UART_SetConfig+0xc2c>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	08db      	lsrs	r3, r3, #3
 8011644:	f003 0303 	and.w	r3, r3, #3
 8011648:	4a04      	ldr	r2, [pc, #16]	; (801165c <UART_SetConfig+0xc30>)
 801164a:	fa22 f303 	lsr.w	r3, r2, r3
 801164e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011650:	e018      	b.n	8011684 <UART_SetConfig+0xc58>
 8011652:	bf00      	nop
 8011654:	08017a6c 	.word	0x08017a6c
 8011658:	58024400 	.word	0x58024400
 801165c:	03d09000 	.word	0x03d09000
 8011660:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011664:	4b24      	ldr	r3, [pc, #144]	; (80116f8 <UART_SetConfig+0xccc>)
 8011666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011668:	e00c      	b.n	8011684 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801166a:	4b24      	ldr	r3, [pc, #144]	; (80116fc <UART_SetConfig+0xcd0>)
 801166c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801166e:	e009      	b.n	8011684 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011676:	e005      	b.n	8011684 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011678:	2300      	movs	r3, #0
 801167a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801167c:	2301      	movs	r3, #1
 801167e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011682:	bf00      	nop
    }

    if (pclk != 0U)
 8011684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011686:	2b00      	cmp	r3, #0
 8011688:	d021      	beq.n	80116ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801168e:	4a1c      	ldr	r2, [pc, #112]	; (8011700 <UART_SetConfig+0xcd4>)
 8011690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011694:	461a      	mov	r2, r3
 8011696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011698:	fbb3 f2f2 	udiv	r2, r3, r2
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	085b      	lsrs	r3, r3, #1
 80116a2:	441a      	add	r2, r3
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80116ac:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	2b0f      	cmp	r3, #15
 80116b2:	d909      	bls.n	80116c8 <UART_SetConfig+0xc9c>
 80116b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116ba:	d205      	bcs.n	80116c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	b29a      	uxth	r2, r3
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	60da      	str	r2, [r3, #12]
 80116c6:	e002      	b.n	80116ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80116c8:	2301      	movs	r3, #1
 80116ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	2201      	movs	r2, #1
 80116d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	2201      	movs	r2, #1
 80116da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	2200      	movs	r2, #0
 80116e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	2200      	movs	r2, #0
 80116e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80116ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3748      	adds	r7, #72	; 0x48
 80116f2:	46bd      	mov	sp, r7
 80116f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116f8:	03d09000 	.word	0x03d09000
 80116fc:	003d0900 	.word	0x003d0900
 8011700:	08017a6c 	.word	0x08017a6c

08011704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011704:	b480      	push	{r7}
 8011706:	b083      	sub	sp, #12
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011710:	f003 0301 	and.w	r3, r3, #1
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00a      	beq.n	801172e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	430a      	orrs	r2, r1
 801172c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011732:	f003 0302 	and.w	r3, r3, #2
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00a      	beq.n	8011750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	430a      	orrs	r2, r1
 801174e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011754:	f003 0304 	and.w	r3, r3, #4
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	430a      	orrs	r2, r1
 8011770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011776:	f003 0308 	and.w	r3, r3, #8
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00a      	beq.n	8011794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	430a      	orrs	r2, r1
 8011792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011798:	f003 0310 	and.w	r3, r3, #16
 801179c:	2b00      	cmp	r3, #0
 801179e:	d00a      	beq.n	80117b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	430a      	orrs	r2, r1
 80117b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ba:	f003 0320 	and.w	r3, r3, #32
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00a      	beq.n	80117d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	430a      	orrs	r2, r1
 80117d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d01a      	beq.n	801181a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	430a      	orrs	r2, r1
 80117f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011802:	d10a      	bne.n	801181a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	430a      	orrs	r2, r1
 8011818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00a      	beq.n	801183c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	430a      	orrs	r2, r1
 801183a:	605a      	str	r2, [r3, #4]
  }
}
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b098      	sub	sp, #96	; 0x60
 801184c:	af02      	add	r7, sp, #8
 801184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011858:	f7f2 f892 	bl	8003980 <HAL_GetTick>
 801185c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f003 0308 	and.w	r3, r3, #8
 8011868:	2b08      	cmp	r3, #8
 801186a:	d12f      	bne.n	80118cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801186c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011874:	2200      	movs	r2, #0
 8011876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 f88e 	bl	801199c <UART_WaitOnFlagUntilTimeout>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d022      	beq.n	80118cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	e853 3f00 	ldrex	r3, [r3]
 8011892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801189a:	653b      	str	r3, [r7, #80]	; 0x50
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	461a      	mov	r2, r3
 80118a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118a4:	647b      	str	r3, [r7, #68]	; 0x44
 80118a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118ac:	e841 2300 	strex	r3, r2, [r1]
 80118b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80118b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d1e6      	bne.n	8011886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2220      	movs	r2, #32
 80118bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118c8:	2303      	movs	r3, #3
 80118ca:	e063      	b.n	8011994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f003 0304 	and.w	r3, r3, #4
 80118d6:	2b04      	cmp	r3, #4
 80118d8:	d149      	bne.n	801196e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118e2:	2200      	movs	r2, #0
 80118e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f000 f857 	bl	801199c <UART_WaitOnFlagUntilTimeout>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d03c      	beq.n	801196e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	e853 3f00 	ldrex	r3, [r3]
 8011900:	623b      	str	r3, [r7, #32]
   return(result);
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011908:	64fb      	str	r3, [r7, #76]	; 0x4c
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	461a      	mov	r2, r3
 8011910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011912:	633b      	str	r3, [r7, #48]	; 0x30
 8011914:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801191a:	e841 2300 	strex	r3, r2, [r1]
 801191e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011922:	2b00      	cmp	r3, #0
 8011924:	d1e6      	bne.n	80118f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	3308      	adds	r3, #8
 801192c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	e853 3f00 	ldrex	r3, [r3]
 8011934:	60fb      	str	r3, [r7, #12]
   return(result);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	f023 0301 	bic.w	r3, r3, #1
 801193c:	64bb      	str	r3, [r7, #72]	; 0x48
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	3308      	adds	r3, #8
 8011944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011946:	61fa      	str	r2, [r7, #28]
 8011948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194a:	69b9      	ldr	r1, [r7, #24]
 801194c:	69fa      	ldr	r2, [r7, #28]
 801194e:	e841 2300 	strex	r3, r2, [r1]
 8011952:	617b      	str	r3, [r7, #20]
   return(result);
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1e5      	bne.n	8011926 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2220      	movs	r2, #32
 801195e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801196a:	2303      	movs	r3, #3
 801196c:	e012      	b.n	8011994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2220      	movs	r2, #32
 8011972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2220      	movs	r2, #32
 801197a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2200      	movs	r2, #0
 8011982:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2200      	movs	r2, #0
 801198e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011992:	2300      	movs	r3, #0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3758      	adds	r7, #88	; 0x58
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	603b      	str	r3, [r7, #0]
 80119a8:	4613      	mov	r3, r2
 80119aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119ac:	e049      	b.n	8011a42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119ae:	69bb      	ldr	r3, [r7, #24]
 80119b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119b4:	d045      	beq.n	8011a42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119b6:	f7f1 ffe3 	bl	8003980 <HAL_GetTick>
 80119ba:	4602      	mov	r2, r0
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	69ba      	ldr	r2, [r7, #24]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d302      	bcc.n	80119cc <UART_WaitOnFlagUntilTimeout+0x30>
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d101      	bne.n	80119d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80119cc:	2303      	movs	r3, #3
 80119ce:	e048      	b.n	8011a62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	f003 0304 	and.w	r3, r3, #4
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d031      	beq.n	8011a42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	69db      	ldr	r3, [r3, #28]
 80119e4:	f003 0308 	and.w	r3, r3, #8
 80119e8:	2b08      	cmp	r3, #8
 80119ea:	d110      	bne.n	8011a0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2208      	movs	r2, #8
 80119f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f000 f839 	bl	8011a6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2208      	movs	r2, #8
 80119fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2200      	movs	r2, #0
 8011a06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	e029      	b.n	8011a62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	69db      	ldr	r3, [r3, #28]
 8011a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a1c:	d111      	bne.n	8011a42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f000 f81f 	bl	8011a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2220      	movs	r2, #32
 8011a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011a3e:	2303      	movs	r3, #3
 8011a40:	e00f      	b.n	8011a62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	69da      	ldr	r2, [r3, #28]
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	4013      	ands	r3, r2
 8011a4c:	68ba      	ldr	r2, [r7, #8]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	bf0c      	ite	eq
 8011a52:	2301      	moveq	r3, #1
 8011a54:	2300      	movne	r3, #0
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	461a      	mov	r2, r3
 8011a5a:	79fb      	ldrb	r3, [r7, #7]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d0a6      	beq.n	80119ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b095      	sub	sp, #84	; 0x54
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7c:	e853 3f00 	ldrex	r3, [r3]
 8011a80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a92:	643b      	str	r3, [r7, #64]	; 0x40
 8011a94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a9a:	e841 2300 	strex	r3, r2, [r1]
 8011a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1e6      	bne.n	8011a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	3308      	adds	r3, #8
 8011aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	e853 3f00 	ldrex	r3, [r3]
 8011ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ab6:	69fa      	ldr	r2, [r7, #28]
 8011ab8:	4b1e      	ldr	r3, [pc, #120]	; (8011b34 <UART_EndRxTransfer+0xc8>)
 8011aba:	4013      	ands	r3, r2
 8011abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ace:	e841 2300 	strex	r3, r2, [r1]
 8011ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d1e5      	bne.n	8011aa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d118      	bne.n	8011b14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	e853 3f00 	ldrex	r3, [r3]
 8011aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	f023 0310 	bic.w	r3, r3, #16
 8011af6:	647b      	str	r3, [r7, #68]	; 0x44
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	461a      	mov	r2, r3
 8011afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b00:	61bb      	str	r3, [r7, #24]
 8011b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b04:	6979      	ldr	r1, [r7, #20]
 8011b06:	69ba      	ldr	r2, [r7, #24]
 8011b08:	e841 2300 	strex	r3, r2, [r1]
 8011b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1e6      	bne.n	8011ae2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2220      	movs	r2, #32
 8011b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2200      	movs	r2, #0
 8011b26:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b28:	bf00      	nop
 8011b2a:	3754      	adds	r7, #84	; 0x54
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	effffffe 	.word	0xeffffffe

08011b38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d101      	bne.n	8011b4e <HAL_UARTEx_DisableFifoMode+0x16>
 8011b4a:	2302      	movs	r3, #2
 8011b4c:	e027      	b.n	8011b9e <HAL_UARTEx_DisableFifoMode+0x66>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2201      	movs	r2, #1
 8011b52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2224      	movs	r2, #36	; 0x24
 8011b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f022 0201 	bic.w	r2, r2, #1
 8011b74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011b7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2200      	movs	r2, #0
 8011b82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	68fa      	ldr	r2, [r7, #12]
 8011b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2220      	movs	r2, #32
 8011b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2200      	movs	r2, #0
 8011b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3714      	adds	r7, #20
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba8:	4770      	bx	lr

08011baa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b084      	sub	sp, #16
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
 8011bb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d101      	bne.n	8011bc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011bbe:	2302      	movs	r3, #2
 8011bc0:	e02d      	b.n	8011c1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2224      	movs	r2, #36	; 0x24
 8011bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f022 0201 	bic.w	r2, r2, #1
 8011be8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	683a      	ldr	r2, [r7, #0]
 8011bfa:	430a      	orrs	r2, r1
 8011bfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 f850 	bl	8011ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2220      	movs	r2, #32
 8011c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2200      	movs	r2, #0
 8011c18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c1c:	2300      	movs	r3, #0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b084      	sub	sp, #16
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d101      	bne.n	8011c3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	e02d      	b.n	8011c9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2224      	movs	r2, #36	; 0x24
 8011c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f022 0201 	bic.w	r2, r2, #1
 8011c64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	683a      	ldr	r2, [r7, #0]
 8011c76:	430a      	orrs	r2, r1
 8011c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 f812 	bl	8011ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2220      	movs	r2, #32
 8011c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
	...

08011ca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b085      	sub	sp, #20
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d108      	bne.n	8011cc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011cc4:	e031      	b.n	8011d2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011cc6:	2310      	movs	r3, #16
 8011cc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011cca:	2310      	movs	r3, #16
 8011ccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	689b      	ldr	r3, [r3, #8]
 8011cd4:	0e5b      	lsrs	r3, r3, #25
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	f003 0307 	and.w	r3, r3, #7
 8011cdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	0f5b      	lsrs	r3, r3, #29
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	f003 0307 	and.w	r3, r3, #7
 8011cec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011cee:	7bbb      	ldrb	r3, [r7, #14]
 8011cf0:	7b3a      	ldrb	r2, [r7, #12]
 8011cf2:	4911      	ldr	r1, [pc, #68]	; (8011d38 <UARTEx_SetNbDataToProcess+0x94>)
 8011cf4:	5c8a      	ldrb	r2, [r1, r2]
 8011cf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011cfa:	7b3a      	ldrb	r2, [r7, #12]
 8011cfc:	490f      	ldr	r1, [pc, #60]	; (8011d3c <UARTEx_SetNbDataToProcess+0x98>)
 8011cfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d0c:	7bfb      	ldrb	r3, [r7, #15]
 8011d0e:	7b7a      	ldrb	r2, [r7, #13]
 8011d10:	4909      	ldr	r1, [pc, #36]	; (8011d38 <UARTEx_SetNbDataToProcess+0x94>)
 8011d12:	5c8a      	ldrb	r2, [r1, r2]
 8011d14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011d18:	7b7a      	ldrb	r2, [r7, #13]
 8011d1a:	4908      	ldr	r1, [pc, #32]	; (8011d3c <UARTEx_SetNbDataToProcess+0x98>)
 8011d1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011d2a:	bf00      	nop
 8011d2c:	3714      	adds	r7, #20
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop
 8011d38:	08017a84 	.word	0x08017a84
 8011d3c:	08017a8c 	.word	0x08017a8c

08011d40 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011d40:	b084      	sub	sp, #16
 8011d42:	b480      	push	{r7}
 8011d44:	b085      	sub	sp, #20
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	f107 001c 	add.w	r0, r7, #28
 8011d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011d56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011d58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011d5a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011d5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011d62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011d66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	685a      	ldr	r2, [r3, #4]
 8011d72:	4b07      	ldr	r3, [pc, #28]	; (8011d90 <SDMMC_Init+0x50>)
 8011d74:	4013      	ands	r3, r2
 8011d76:	68fa      	ldr	r2, [r7, #12]
 8011d78:	431a      	orrs	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3714      	adds	r7, #20
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	b004      	add	sp, #16
 8011d8c:	4770      	bx	lr
 8011d8e:	bf00      	nop
 8011d90:	ffc02c00 	.word	0xffc02c00

08011d94 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	370c      	adds	r7, #12
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr

08011dae <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011dae:	b480      	push	{r7}
 8011db0:	b083      	sub	sp, #12
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
 8011db6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	370c      	adds	r7, #12
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr

08011dd0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b083      	sub	sp, #12
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f043 0203 	orr.w	r2, r3, #3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011de4:	2300      	movs	r3, #0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	370c      	adds	r7, #12
 8011dea:	46bd      	mov	sp, r7
 8011dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df0:	4770      	bx	lr

08011df2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011df2:	b480      	push	{r7}
 8011df4:	b083      	sub	sp, #12
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f003 0303 	and.w	r3, r3, #3
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	370c      	adds	r7, #12
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr
	...

08011e10 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b085      	sub	sp, #20
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011e34:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011e3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e3c:	68fa      	ldr	r2, [r7, #12]
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	68da      	ldr	r2, [r3, #12]
 8011e46:	4b06      	ldr	r3, [pc, #24]	; (8011e60 <SDMMC_SendCommand+0x50>)
 8011e48:	4013      	ands	r3, r2
 8011e4a:	68fa      	ldr	r2, [r7, #12]
 8011e4c:	431a      	orrs	r2, r3
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr
 8011e60:	fffee0c0 	.word	0xfffee0c0

08011e64 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011e64:	b480      	push	{r7}
 8011e66:	b083      	sub	sp, #12
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	691b      	ldr	r3, [r3, #16]
 8011e70:	b2db      	uxtb	r3, r3
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011e7e:	b480      	push	{r7}
 8011e80:	b085      	sub	sp, #20
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
 8011e86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	3314      	adds	r3, #20
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	4413      	add	r3, r2
 8011e92:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3714      	adds	r7, #20
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b085      	sub	sp, #20
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	685a      	ldr	r2, [r3, #4]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011eca:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011ed0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011ed6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	431a      	orrs	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011eee:	2300      	movs	r3, #0

}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3714      	adds	r7, #20
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efa:	4770      	bx	lr

08011efc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b088      	sub	sp, #32
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011f0a:	2310      	movs	r3, #16
 8011f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f14:	2300      	movs	r3, #0
 8011f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f1e:	f107 0308 	add.w	r3, r7, #8
 8011f22:	4619      	mov	r1, r3
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff ff73 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f2e:	2110      	movs	r1, #16
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f000 fa5f 	bl	80123f4 <SDMMC_GetCmdResp1>
 8011f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f38:	69fb      	ldr	r3, [r7, #28]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3720      	adds	r7, #32
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b088      	sub	sp, #32
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011f50:	2311      	movs	r3, #17
 8011f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f64:	f107 0308 	add.w	r3, r7, #8
 8011f68:	4619      	mov	r1, r3
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7ff ff50 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f74:	2111      	movs	r1, #17
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 fa3c 	bl	80123f4 <SDMMC_GetCmdResp1>
 8011f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f7e:	69fb      	ldr	r3, [r7, #28]
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3720      	adds	r7, #32
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b088      	sub	sp, #32
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011f96:	2312      	movs	r3, #18
 8011f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011faa:	f107 0308 	add.w	r3, r7, #8
 8011fae:	4619      	mov	r1, r3
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7ff ff2d 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fba:	2112      	movs	r1, #18
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f000 fa19 	bl	80123f4 <SDMMC_GetCmdResp1>
 8011fc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fc4:	69fb      	ldr	r3, [r7, #28]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3720      	adds	r7, #32
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b088      	sub	sp, #32
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
 8011fd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011fdc:	2318      	movs	r3, #24
 8011fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ff0:	f107 0308 	add.w	r3, r7, #8
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7ff ff0a 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012000:	2118      	movs	r1, #24
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f9f6 	bl	80123f4 <SDMMC_GetCmdResp1>
 8012008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801200a:	69fb      	ldr	r3, [r7, #28]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3720      	adds	r7, #32
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b088      	sub	sp, #32
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012022:	2319      	movs	r3, #25
 8012024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012026:	f44f 7380 	mov.w	r3, #256	; 0x100
 801202a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801202c:	2300      	movs	r3, #0
 801202e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012034:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012036:	f107 0308 	add.w	r3, r7, #8
 801203a:	4619      	mov	r1, r3
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7ff fee7 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012042:	f241 3288 	movw	r2, #5000	; 0x1388
 8012046:	2119      	movs	r1, #25
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f000 f9d3 	bl	80123f4 <SDMMC_GetCmdResp1>
 801204e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012050:	69fb      	ldr	r3, [r7, #28]
}
 8012052:	4618      	mov	r0, r3
 8012054:	3720      	adds	r7, #32
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b088      	sub	sp, #32
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012064:	2300      	movs	r3, #0
 8012066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012068:	230c      	movs	r3, #12
 801206a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012072:	2300      	movs	r3, #0
 8012074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801207a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	68db      	ldr	r3, [r3, #12]
 801208c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012094:	f107 0308 	add.w	r3, r7, #8
 8012098:	4619      	mov	r1, r3
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f7ff feb8 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80120a0:	4a0b      	ldr	r2, [pc, #44]	; (80120d0 <SDMMC_CmdStopTransfer+0x74>)
 80120a2:	210c      	movs	r1, #12
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f000 f9a5 	bl	80123f4 <SDMMC_GetCmdResp1>
 80120aa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80120b8:	69fb      	ldr	r3, [r7, #28]
 80120ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80120be:	d101      	bne.n	80120c4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80120c0:	2300      	movs	r3, #0
 80120c2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80120c4:	69fb      	ldr	r3, [r7, #28]
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3720      	adds	r7, #32
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	05f5e100 	.word	0x05f5e100

080120d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b088      	sub	sp, #32
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80120e2:	2307      	movs	r3, #7
 80120e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ec:	2300      	movs	r3, #0
 80120ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120f6:	f107 0308 	add.w	r3, r7, #8
 80120fa:	4619      	mov	r1, r3
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f7ff fe87 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012102:	f241 3288 	movw	r2, #5000	; 0x1388
 8012106:	2107      	movs	r1, #7
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 f973 	bl	80123f4 <SDMMC_GetCmdResp1>
 801210e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012110:	69fb      	ldr	r3, [r7, #28]
}
 8012112:	4618      	mov	r0, r3
 8012114:	3720      	adds	r7, #32
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b088      	sub	sp, #32
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012122:	2300      	movs	r3, #0
 8012124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012126:	2300      	movs	r3, #0
 8012128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801212a:	2300      	movs	r3, #0
 801212c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801212e:	2300      	movs	r3, #0
 8012130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012138:	f107 0308 	add.w	r3, r7, #8
 801213c:	4619      	mov	r1, r3
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff fe66 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f000 fb97 	bl	8012878 <SDMMC_GetCmdError>
 801214a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801214c:	69fb      	ldr	r3, [r7, #28]
}
 801214e:	4618      	mov	r0, r3
 8012150:	3720      	adds	r7, #32
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}

08012156 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012156:	b580      	push	{r7, lr}
 8012158:	b088      	sub	sp, #32
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801215e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012164:	2308      	movs	r3, #8
 8012166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012168:	f44f 7380 	mov.w	r3, #256	; 0x100
 801216c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801216e:	2300      	movs	r3, #0
 8012170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012178:	f107 0308 	add.w	r3, r7, #8
 801217c:	4619      	mov	r1, r3
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f7ff fe46 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 fb29 	bl	80127dc <SDMMC_GetCmdResp7>
 801218a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801218c:	69fb      	ldr	r3, [r7, #28]
}
 801218e:	4618      	mov	r0, r3
 8012190:	3720      	adds	r7, #32
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012196:	b580      	push	{r7, lr}
 8012198:	b088      	sub	sp, #32
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
 801219e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80121a4:	2337      	movs	r3, #55	; 0x37
 80121a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121ae:	2300      	movs	r3, #0
 80121b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121b8:	f107 0308 	add.w	r3, r7, #8
 80121bc:	4619      	mov	r1, r3
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f7ff fe26 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80121c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80121c8:	2137      	movs	r1, #55	; 0x37
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f000 f912 	bl	80123f4 <SDMMC_GetCmdResp1>
 80121d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121d2:	69fb      	ldr	r3, [r7, #28]
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3720      	adds	r7, #32
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b088      	sub	sp, #32
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80121ea:	2329      	movs	r3, #41	; 0x29
 80121ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121f4:	2300      	movs	r3, #0
 80121f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121fe:	f107 0308 	add.w	r3, r7, #8
 8012202:	4619      	mov	r1, r3
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff fe03 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 fa2e 	bl	801266c <SDMMC_GetCmdResp3>
 8012210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012212:	69fb      	ldr	r3, [r7, #28]
}
 8012214:	4618      	mov	r0, r3
 8012216:	3720      	adds	r7, #32
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b088      	sub	sp, #32
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801222a:	2306      	movs	r3, #6
 801222c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012234:	2300      	movs	r3, #0
 8012236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801223c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801223e:	f107 0308 	add.w	r3, r7, #8
 8012242:	4619      	mov	r1, r3
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f7ff fde3 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801224a:	f241 3288 	movw	r2, #5000	; 0x1388
 801224e:	2106      	movs	r1, #6
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 f8cf 	bl	80123f4 <SDMMC_GetCmdResp1>
 8012256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012258:	69fb      	ldr	r3, [r7, #28]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3720      	adds	r7, #32
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b088      	sub	sp, #32
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801226a:	2300      	movs	r3, #0
 801226c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801226e:	2333      	movs	r3, #51	; 0x33
 8012270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012278:	2300      	movs	r3, #0
 801227a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801227c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012282:	f107 0308 	add.w	r3, r7, #8
 8012286:	4619      	mov	r1, r3
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7ff fdc1 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012292:	2133      	movs	r1, #51	; 0x33
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 f8ad 	bl	80123f4 <SDMMC_GetCmdResp1>
 801229a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801229c:	69fb      	ldr	r3, [r7, #28]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3720      	adds	r7, #32
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b088      	sub	sp, #32
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80122ae:	2300      	movs	r3, #0
 80122b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80122b2:	2302      	movs	r3, #2
 80122b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122bc:	2300      	movs	r3, #0
 80122be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122c6:	f107 0308 	add.w	r3, r7, #8
 80122ca:	4619      	mov	r1, r3
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff fd9f 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 f980 	bl	80125d8 <SDMMC_GetCmdResp2>
 80122d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122da:	69fb      	ldr	r3, [r7, #28]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3720      	adds	r7, #32
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b088      	sub	sp, #32
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80122f2:	2309      	movs	r3, #9
 80122f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122fc:	2300      	movs	r3, #0
 80122fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012306:	f107 0308 	add.w	r3, r7, #8
 801230a:	4619      	mov	r1, r3
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7ff fd7f 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 f960 	bl	80125d8 <SDMMC_GetCmdResp2>
 8012318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801231a:	69fb      	ldr	r3, [r7, #28]
}
 801231c:	4618      	mov	r0, r3
 801231e:	3720      	adds	r7, #32
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b088      	sub	sp, #32
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801232e:	2300      	movs	r3, #0
 8012330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012332:	2303      	movs	r3, #3
 8012334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012336:	f44f 7380 	mov.w	r3, #256	; 0x100
 801233a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801233c:	2300      	movs	r3, #0
 801233e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012344:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012346:	f107 0308 	add.w	r3, r7, #8
 801234a:	4619      	mov	r1, r3
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f7ff fd5f 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012352:	683a      	ldr	r2, [r7, #0]
 8012354:	2103      	movs	r1, #3
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 f9c8 	bl	80126ec <SDMMC_GetCmdResp6>
 801235c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801235e:	69fb      	ldr	r3, [r7, #28]
}
 8012360:	4618      	mov	r0, r3
 8012362:	3720      	adds	r7, #32
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b088      	sub	sp, #32
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012376:	230d      	movs	r3, #13
 8012378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801237e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012380:	2300      	movs	r3, #0
 8012382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801238a:	f107 0308 	add.w	r3, r7, #8
 801238e:	4619      	mov	r1, r3
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f7ff fd3d 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012396:	f241 3288 	movw	r2, #5000	; 0x1388
 801239a:	210d      	movs	r1, #13
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 f829 	bl	80123f4 <SDMMC_GetCmdResp1>
 80123a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123a4:	69fb      	ldr	r3, [r7, #28]
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3720      	adds	r7, #32
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b088      	sub	sp, #32
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80123b6:	2300      	movs	r3, #0
 80123b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80123ba:	230d      	movs	r3, #13
 80123bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123c4:	2300      	movs	r3, #0
 80123c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123ce:	f107 0308 	add.w	r3, r7, #8
 80123d2:	4619      	mov	r1, r3
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff fd1b 	bl	8011e10 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80123da:	f241 3288 	movw	r2, #5000	; 0x1388
 80123de:	210d      	movs	r1, #13
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 f807 	bl	80123f4 <SDMMC_GetCmdResp1>
 80123e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123e8:	69fb      	ldr	r3, [r7, #28]
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3720      	adds	r7, #32
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
	...

080123f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b088      	sub	sp, #32
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	460b      	mov	r3, r1
 80123fe:	607a      	str	r2, [r7, #4]
 8012400:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012402:	4b70      	ldr	r3, [pc, #448]	; (80125c4 <SDMMC_GetCmdResp1+0x1d0>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	4a70      	ldr	r2, [pc, #448]	; (80125c8 <SDMMC_GetCmdResp1+0x1d4>)
 8012408:	fba2 2303 	umull	r2, r3, r2, r3
 801240c:	0a5a      	lsrs	r2, r3, #9
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	fb02 f303 	mul.w	r3, r2, r3
 8012414:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	1e5a      	subs	r2, r3, #1
 801241a:	61fa      	str	r2, [r7, #28]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012424:	e0c9      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801242a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801242c:	69ba      	ldr	r2, [r7, #24]
 801242e:	4b67      	ldr	r3, [pc, #412]	; (80125cc <SDMMC_GetCmdResp1+0x1d8>)
 8012430:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012432:	2b00      	cmp	r3, #0
 8012434:	d0ef      	beq.n	8012416 <SDMMC_GetCmdResp1+0x22>
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1ea      	bne.n	8012416 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012444:	f003 0304 	and.w	r3, r3, #4
 8012448:	2b00      	cmp	r3, #0
 801244a:	d004      	beq.n	8012456 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2204      	movs	r2, #4
 8012450:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012452:	2304      	movs	r3, #4
 8012454:	e0b1      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801245a:	f003 0301 	and.w	r3, r3, #1
 801245e:	2b00      	cmp	r3, #0
 8012460:	d004      	beq.n	801246c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2201      	movs	r2, #1
 8012466:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012468:	2301      	movs	r3, #1
 801246a:	e0a6      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	4a58      	ldr	r2, [pc, #352]	; (80125d0 <SDMMC_GetCmdResp1+0x1dc>)
 8012470:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012472:	68f8      	ldr	r0, [r7, #12]
 8012474:	f7ff fcf6 	bl	8011e64 <SDMMC_GetCommandResponse>
 8012478:	4603      	mov	r3, r0
 801247a:	461a      	mov	r2, r3
 801247c:	7afb      	ldrb	r3, [r7, #11]
 801247e:	4293      	cmp	r3, r2
 8012480:	d001      	beq.n	8012486 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012482:	2301      	movs	r3, #1
 8012484:	e099      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012486:	2100      	movs	r1, #0
 8012488:	68f8      	ldr	r0, [r7, #12]
 801248a:	f7ff fcf8 	bl	8011e7e <SDMMC_GetResponse>
 801248e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012490:	697a      	ldr	r2, [r7, #20]
 8012492:	4b50      	ldr	r3, [pc, #320]	; (80125d4 <SDMMC_GetCmdResp1+0x1e0>)
 8012494:	4013      	ands	r3, r2
 8012496:	2b00      	cmp	r3, #0
 8012498:	d101      	bne.n	801249e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801249a:	2300      	movs	r3, #0
 801249c:	e08d      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	da02      	bge.n	80124aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80124a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80124a8:	e087      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d001      	beq.n	80124b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80124b4:	2340      	movs	r3, #64	; 0x40
 80124b6:	e080      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d001      	beq.n	80124c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80124c2:	2380      	movs	r3, #128	; 0x80
 80124c4:	e079      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80124d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124d4:	e071      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80124e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124e4:	e069      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d002      	beq.n	80124f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80124f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124f4:	e061      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d002      	beq.n	8012506 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012504:	e059      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012514:	e051      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012524:	e049      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801252c:	2b00      	cmp	r3, #0
 801252e:	d002      	beq.n	8012536 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012534:	e041      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801253c:	2b00      	cmp	r3, #0
 801253e:	d002      	beq.n	8012546 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012544:	e039      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801254c:	2b00      	cmp	r3, #0
 801254e:	d002      	beq.n	8012556 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012554:	e031      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801255c:	2b00      	cmp	r3, #0
 801255e:	d002      	beq.n	8012566 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012560:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012564:	e029      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801256c:	2b00      	cmp	r3, #0
 801256e:	d002      	beq.n	8012576 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012570:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012574:	e021      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801257c:	2b00      	cmp	r3, #0
 801257e:	d002      	beq.n	8012586 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012580:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012584:	e019      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801258c:	2b00      	cmp	r3, #0
 801258e:	d002      	beq.n	8012596 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012594:	e011      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801259c:	2b00      	cmp	r3, #0
 801259e:	d002      	beq.n	80125a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80125a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80125a4:	e009      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	f003 0308 	and.w	r3, r3, #8
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d002      	beq.n	80125b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80125b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80125b4:	e001      	b.n	80125ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80125b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3720      	adds	r7, #32
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	24000000 	.word	0x24000000
 80125c8:	10624dd3 	.word	0x10624dd3
 80125cc:	00200045 	.word	0x00200045
 80125d0:	002000c5 	.word	0x002000c5
 80125d4:	fdffe008 	.word	0xfdffe008

080125d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80125d8:	b480      	push	{r7}
 80125da:	b085      	sub	sp, #20
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80125e0:	4b1f      	ldr	r3, [pc, #124]	; (8012660 <SDMMC_GetCmdResp2+0x88>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4a1f      	ldr	r2, [pc, #124]	; (8012664 <SDMMC_GetCmdResp2+0x8c>)
 80125e6:	fba2 2303 	umull	r2, r3, r2, r3
 80125ea:	0a5b      	lsrs	r3, r3, #9
 80125ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80125f0:	fb02 f303 	mul.w	r3, r2, r3
 80125f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	1e5a      	subs	r2, r3, #1
 80125fa:	60fa      	str	r2, [r7, #12]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d102      	bne.n	8012606 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012604:	e026      	b.n	8012654 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801260a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012612:	2b00      	cmp	r3, #0
 8012614:	d0ef      	beq.n	80125f6 <SDMMC_GetCmdResp2+0x1e>
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801261c:	2b00      	cmp	r3, #0
 801261e:	d1ea      	bne.n	80125f6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012624:	f003 0304 	and.w	r3, r3, #4
 8012628:	2b00      	cmp	r3, #0
 801262a:	d004      	beq.n	8012636 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2204      	movs	r2, #4
 8012630:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012632:	2304      	movs	r3, #4
 8012634:	e00e      	b.n	8012654 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801263a:	f003 0301 	and.w	r3, r3, #1
 801263e:	2b00      	cmp	r3, #0
 8012640:	d004      	beq.n	801264c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2201      	movs	r2, #1
 8012646:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012648:	2301      	movs	r3, #1
 801264a:	e003      	b.n	8012654 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	4a06      	ldr	r2, [pc, #24]	; (8012668 <SDMMC_GetCmdResp2+0x90>)
 8012650:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012652:	2300      	movs	r3, #0
}
 8012654:	4618      	mov	r0, r3
 8012656:	3714      	adds	r7, #20
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr
 8012660:	24000000 	.word	0x24000000
 8012664:	10624dd3 	.word	0x10624dd3
 8012668:	002000c5 	.word	0x002000c5

0801266c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801266c:	b480      	push	{r7}
 801266e:	b085      	sub	sp, #20
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012674:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <SDMMC_GetCmdResp3+0x74>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4a1a      	ldr	r2, [pc, #104]	; (80126e4 <SDMMC_GetCmdResp3+0x78>)
 801267a:	fba2 2303 	umull	r2, r3, r2, r3
 801267e:	0a5b      	lsrs	r3, r3, #9
 8012680:	f241 3288 	movw	r2, #5000	; 0x1388
 8012684:	fb02 f303 	mul.w	r3, r2, r3
 8012688:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	1e5a      	subs	r2, r3, #1
 801268e:	60fa      	str	r2, [r7, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d102      	bne.n	801269a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012698:	e01b      	b.n	80126d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801269e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d0ef      	beq.n	801268a <SDMMC_GetCmdResp3+0x1e>
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d1ea      	bne.n	801268a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126b8:	f003 0304 	and.w	r3, r3, #4
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d004      	beq.n	80126ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2204      	movs	r2, #4
 80126c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80126c6:	2304      	movs	r3, #4
 80126c8:	e003      	b.n	80126d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4a06      	ldr	r2, [pc, #24]	; (80126e8 <SDMMC_GetCmdResp3+0x7c>)
 80126ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80126d0:	2300      	movs	r3, #0
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3714      	adds	r7, #20
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr
 80126de:	bf00      	nop
 80126e0:	24000000 	.word	0x24000000
 80126e4:	10624dd3 	.word	0x10624dd3
 80126e8:	002000c5 	.word	0x002000c5

080126ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b088      	sub	sp, #32
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	460b      	mov	r3, r1
 80126f6:	607a      	str	r2, [r7, #4]
 80126f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126fa:	4b35      	ldr	r3, [pc, #212]	; (80127d0 <SDMMC_GetCmdResp6+0xe4>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4a35      	ldr	r2, [pc, #212]	; (80127d4 <SDMMC_GetCmdResp6+0xe8>)
 8012700:	fba2 2303 	umull	r2, r3, r2, r3
 8012704:	0a5b      	lsrs	r3, r3, #9
 8012706:	f241 3288 	movw	r2, #5000	; 0x1388
 801270a:	fb02 f303 	mul.w	r3, r2, r3
 801270e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	1e5a      	subs	r2, r3, #1
 8012714:	61fa      	str	r2, [r7, #28]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d102      	bne.n	8012720 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801271a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801271e:	e052      	b.n	80127c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012724:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012726:	69bb      	ldr	r3, [r7, #24]
 8012728:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801272c:	2b00      	cmp	r3, #0
 801272e:	d0ef      	beq.n	8012710 <SDMMC_GetCmdResp6+0x24>
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012736:	2b00      	cmp	r3, #0
 8012738:	d1ea      	bne.n	8012710 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801273e:	f003 0304 	and.w	r3, r3, #4
 8012742:	2b00      	cmp	r3, #0
 8012744:	d004      	beq.n	8012750 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2204      	movs	r2, #4
 801274a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801274c:	2304      	movs	r3, #4
 801274e:	e03a      	b.n	80127c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012754:	f003 0301 	and.w	r3, r3, #1
 8012758:	2b00      	cmp	r3, #0
 801275a:	d004      	beq.n	8012766 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2201      	movs	r2, #1
 8012760:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012762:	2301      	movs	r3, #1
 8012764:	e02f      	b.n	80127c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f7ff fb7c 	bl	8011e64 <SDMMC_GetCommandResponse>
 801276c:	4603      	mov	r3, r0
 801276e:	461a      	mov	r2, r3
 8012770:	7afb      	ldrb	r3, [r7, #11]
 8012772:	4293      	cmp	r3, r2
 8012774:	d001      	beq.n	801277a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012776:	2301      	movs	r3, #1
 8012778:	e025      	b.n	80127c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	4a16      	ldr	r2, [pc, #88]	; (80127d8 <SDMMC_GetCmdResp6+0xec>)
 801277e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012780:	2100      	movs	r1, #0
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	f7ff fb7b 	bl	8011e7e <SDMMC_GetResponse>
 8012788:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012790:	2b00      	cmp	r3, #0
 8012792:	d106      	bne.n	80127a2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	0c1b      	lsrs	r3, r3, #16
 8012798:	b29a      	uxth	r2, r3
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801279e:	2300      	movs	r3, #0
 80127a0:	e011      	b.n	80127c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d002      	beq.n	80127b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80127ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80127b0:	e009      	b.n	80127c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d002      	beq.n	80127c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80127bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127c0:	e001      	b.n	80127c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3720      	adds	r7, #32
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	24000000 	.word	0x24000000
 80127d4:	10624dd3 	.word	0x10624dd3
 80127d8:	002000c5 	.word	0x002000c5

080127dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80127dc:	b480      	push	{r7}
 80127de:	b085      	sub	sp, #20
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127e4:	4b22      	ldr	r3, [pc, #136]	; (8012870 <SDMMC_GetCmdResp7+0x94>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4a22      	ldr	r2, [pc, #136]	; (8012874 <SDMMC_GetCmdResp7+0x98>)
 80127ea:	fba2 2303 	umull	r2, r3, r2, r3
 80127ee:	0a5b      	lsrs	r3, r3, #9
 80127f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127f4:	fb02 f303 	mul.w	r3, r2, r3
 80127f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	1e5a      	subs	r2, r3, #1
 80127fe:	60fa      	str	r2, [r7, #12]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d102      	bne.n	801280a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012808:	e02c      	b.n	8012864 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801280e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012816:	2b00      	cmp	r3, #0
 8012818:	d0ef      	beq.n	80127fa <SDMMC_GetCmdResp7+0x1e>
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012820:	2b00      	cmp	r3, #0
 8012822:	d1ea      	bne.n	80127fa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012828:	f003 0304 	and.w	r3, r3, #4
 801282c:	2b00      	cmp	r3, #0
 801282e:	d004      	beq.n	801283a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2204      	movs	r2, #4
 8012834:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012836:	2304      	movs	r3, #4
 8012838:	e014      	b.n	8012864 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801283e:	f003 0301 	and.w	r3, r3, #1
 8012842:	2b00      	cmp	r3, #0
 8012844:	d004      	beq.n	8012850 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2201      	movs	r2, #1
 801284a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801284c:	2301      	movs	r3, #1
 801284e:	e009      	b.n	8012864 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012858:	2b00      	cmp	r3, #0
 801285a:	d002      	beq.n	8012862 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2240      	movs	r2, #64	; 0x40
 8012860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012862:	2300      	movs	r3, #0

}
 8012864:	4618      	mov	r0, r3
 8012866:	3714      	adds	r7, #20
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr
 8012870:	24000000 	.word	0x24000000
 8012874:	10624dd3 	.word	0x10624dd3

08012878 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012880:	4b11      	ldr	r3, [pc, #68]	; (80128c8 <SDMMC_GetCmdError+0x50>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4a11      	ldr	r2, [pc, #68]	; (80128cc <SDMMC_GetCmdError+0x54>)
 8012886:	fba2 2303 	umull	r2, r3, r2, r3
 801288a:	0a5b      	lsrs	r3, r3, #9
 801288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012890:	fb02 f303 	mul.w	r3, r2, r3
 8012894:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	1e5a      	subs	r2, r3, #1
 801289a:	60fa      	str	r2, [r7, #12]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d102      	bne.n	80128a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128a4:	e009      	b.n	80128ba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d0f1      	beq.n	8012896 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	4a06      	ldr	r2, [pc, #24]	; (80128d0 <SDMMC_GetCmdError+0x58>)
 80128b6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3714      	adds	r7, #20
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop
 80128c8:	24000000 	.word	0x24000000
 80128cc:	10624dd3 	.word	0x10624dd3
 80128d0:	002000c5 	.word	0x002000c5

080128d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80128d4:	b084      	sub	sp, #16
 80128d6:	b580      	push	{r7, lr}
 80128d8:	b084      	sub	sp, #16
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	f107 001c 	add.w	r0, r7, #28
 80128e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80128e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d120      	bne.n	801292e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	68da      	ldr	r2, [r3, #12]
 80128fc:	4b2a      	ldr	r3, [pc, #168]	; (80129a8 <USB_CoreInit+0xd4>)
 80128fe:	4013      	ands	r3, r2
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012912:	2b01      	cmp	r3, #1
 8012914:	d105      	bne.n	8012922 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	68db      	ldr	r3, [r3, #12]
 801291a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f001 faf8 	bl	8013f18 <USB_CoreReset>
 8012928:	4603      	mov	r3, r0
 801292a:	73fb      	strb	r3, [r7, #15]
 801292c:	e01a      	b.n	8012964 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f001 faec 	bl	8013f18 <USB_CoreReset>
 8012940:	4603      	mov	r3, r0
 8012942:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012946:	2b00      	cmp	r3, #0
 8012948:	d106      	bne.n	8012958 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801294e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	639a      	str	r2, [r3, #56]	; 0x38
 8012956:	e005      	b.n	8012964 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801295c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012966:	2b01      	cmp	r3, #1
 8012968:	d116      	bne.n	8012998 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801296e:	b29a      	uxth	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012978:	4b0c      	ldr	r3, [pc, #48]	; (80129ac <USB_CoreInit+0xd8>)
 801297a:	4313      	orrs	r3, r2
 801297c:	687a      	ldr	r2, [r7, #4]
 801297e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	689b      	ldr	r3, [r3, #8]
 8012984:	f043 0206 	orr.w	r2, r3, #6
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	f043 0220 	orr.w	r2, r3, #32
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012998:	7bfb      	ldrb	r3, [r7, #15]
}
 801299a:	4618      	mov	r0, r3
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129a4:	b004      	add	sp, #16
 80129a6:	4770      	bx	lr
 80129a8:	ffbdffbf 	.word	0xffbdffbf
 80129ac:	03ee0000 	.word	0x03ee0000

080129b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b087      	sub	sp, #28
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	4613      	mov	r3, r2
 80129bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80129be:	79fb      	ldrb	r3, [r7, #7]
 80129c0:	2b02      	cmp	r3, #2
 80129c2:	d165      	bne.n	8012a90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	4a41      	ldr	r2, [pc, #260]	; (8012acc <USB_SetTurnaroundTime+0x11c>)
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d906      	bls.n	80129da <USB_SetTurnaroundTime+0x2a>
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	4a40      	ldr	r2, [pc, #256]	; (8012ad0 <USB_SetTurnaroundTime+0x120>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d202      	bcs.n	80129da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80129d4:	230f      	movs	r3, #15
 80129d6:	617b      	str	r3, [r7, #20]
 80129d8:	e062      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	4a3c      	ldr	r2, [pc, #240]	; (8012ad0 <USB_SetTurnaroundTime+0x120>)
 80129de:	4293      	cmp	r3, r2
 80129e0:	d306      	bcc.n	80129f0 <USB_SetTurnaroundTime+0x40>
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	4a3b      	ldr	r2, [pc, #236]	; (8012ad4 <USB_SetTurnaroundTime+0x124>)
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d202      	bcs.n	80129f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80129ea:	230e      	movs	r3, #14
 80129ec:	617b      	str	r3, [r7, #20]
 80129ee:	e057      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	4a38      	ldr	r2, [pc, #224]	; (8012ad4 <USB_SetTurnaroundTime+0x124>)
 80129f4:	4293      	cmp	r3, r2
 80129f6:	d306      	bcc.n	8012a06 <USB_SetTurnaroundTime+0x56>
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	4a37      	ldr	r2, [pc, #220]	; (8012ad8 <USB_SetTurnaroundTime+0x128>)
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d202      	bcs.n	8012a06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012a00:	230d      	movs	r3, #13
 8012a02:	617b      	str	r3, [r7, #20]
 8012a04:	e04c      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	4a33      	ldr	r2, [pc, #204]	; (8012ad8 <USB_SetTurnaroundTime+0x128>)
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d306      	bcc.n	8012a1c <USB_SetTurnaroundTime+0x6c>
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	4a32      	ldr	r2, [pc, #200]	; (8012adc <USB_SetTurnaroundTime+0x12c>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d802      	bhi.n	8012a1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012a16:	230c      	movs	r3, #12
 8012a18:	617b      	str	r3, [r7, #20]
 8012a1a:	e041      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	4a2f      	ldr	r2, [pc, #188]	; (8012adc <USB_SetTurnaroundTime+0x12c>)
 8012a20:	4293      	cmp	r3, r2
 8012a22:	d906      	bls.n	8012a32 <USB_SetTurnaroundTime+0x82>
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	4a2e      	ldr	r2, [pc, #184]	; (8012ae0 <USB_SetTurnaroundTime+0x130>)
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d802      	bhi.n	8012a32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012a2c:	230b      	movs	r3, #11
 8012a2e:	617b      	str	r3, [r7, #20]
 8012a30:	e036      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	4a2a      	ldr	r2, [pc, #168]	; (8012ae0 <USB_SetTurnaroundTime+0x130>)
 8012a36:	4293      	cmp	r3, r2
 8012a38:	d906      	bls.n	8012a48 <USB_SetTurnaroundTime+0x98>
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	4a29      	ldr	r2, [pc, #164]	; (8012ae4 <USB_SetTurnaroundTime+0x134>)
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d802      	bhi.n	8012a48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012a42:	230a      	movs	r3, #10
 8012a44:	617b      	str	r3, [r7, #20]
 8012a46:	e02b      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	4a26      	ldr	r2, [pc, #152]	; (8012ae4 <USB_SetTurnaroundTime+0x134>)
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	d906      	bls.n	8012a5e <USB_SetTurnaroundTime+0xae>
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	4a25      	ldr	r2, [pc, #148]	; (8012ae8 <USB_SetTurnaroundTime+0x138>)
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d202      	bcs.n	8012a5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012a58:	2309      	movs	r3, #9
 8012a5a:	617b      	str	r3, [r7, #20]
 8012a5c:	e020      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	4a21      	ldr	r2, [pc, #132]	; (8012ae8 <USB_SetTurnaroundTime+0x138>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d306      	bcc.n	8012a74 <USB_SetTurnaroundTime+0xc4>
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	4a20      	ldr	r2, [pc, #128]	; (8012aec <USB_SetTurnaroundTime+0x13c>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d802      	bhi.n	8012a74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012a6e:	2308      	movs	r3, #8
 8012a70:	617b      	str	r3, [r7, #20]
 8012a72:	e015      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	4a1d      	ldr	r2, [pc, #116]	; (8012aec <USB_SetTurnaroundTime+0x13c>)
 8012a78:	4293      	cmp	r3, r2
 8012a7a:	d906      	bls.n	8012a8a <USB_SetTurnaroundTime+0xda>
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	4a1c      	ldr	r2, [pc, #112]	; (8012af0 <USB_SetTurnaroundTime+0x140>)
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d202      	bcs.n	8012a8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012a84:	2307      	movs	r3, #7
 8012a86:	617b      	str	r3, [r7, #20]
 8012a88:	e00a      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012a8a:	2306      	movs	r3, #6
 8012a8c:	617b      	str	r3, [r7, #20]
 8012a8e:	e007      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012a90:	79fb      	ldrb	r3, [r7, #7]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d102      	bne.n	8012a9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012a96:	2309      	movs	r3, #9
 8012a98:	617b      	str	r3, [r7, #20]
 8012a9a:	e001      	b.n	8012aa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012a9c:	2309      	movs	r3, #9
 8012a9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	68da      	ldr	r2, [r3, #12]
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	029b      	lsls	r3, r3, #10
 8012ab4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012ab8:	431a      	orrs	r2, r3
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012abe:	2300      	movs	r3, #0
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	371c      	adds	r7, #28
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	00d8acbf 	.word	0x00d8acbf
 8012ad0:	00e4e1c0 	.word	0x00e4e1c0
 8012ad4:	00f42400 	.word	0x00f42400
 8012ad8:	01067380 	.word	0x01067380
 8012adc:	011a499f 	.word	0x011a499f
 8012ae0:	01312cff 	.word	0x01312cff
 8012ae4:	014ca43f 	.word	0x014ca43f
 8012ae8:	016e3600 	.word	0x016e3600
 8012aec:	01a6ab1f 	.word	0x01a6ab1f
 8012af0:	01e84800 	.word	0x01e84800

08012af4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b083      	sub	sp, #12
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	689b      	ldr	r3, [r3, #8]
 8012b00:	f043 0201 	orr.w	r2, r3, #1
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b08:	2300      	movs	r3, #0
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	370c      	adds	r7, #12
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr

08012b16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012b16:	b480      	push	{r7}
 8012b18:	b083      	sub	sp, #12
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	f023 0201 	bic.w	r2, r3, #1
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	460b      	mov	r3, r1
 8012b42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012b44:	2300      	movs	r3, #0
 8012b46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012b54:	78fb      	ldrb	r3, [r7, #3]
 8012b56:	2b01      	cmp	r3, #1
 8012b58:	d115      	bne.n	8012b86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b66:	2001      	movs	r0, #1
 8012b68:	f7f0 ff16 	bl	8003998 <HAL_Delay>
      ms++;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f001 f93f 	bl	8013df6 <USB_GetMode>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d01e      	beq.n	8012bbc <USB_SetCurrentMode+0x84>
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	2b31      	cmp	r3, #49	; 0x31
 8012b82:	d9f0      	bls.n	8012b66 <USB_SetCurrentMode+0x2e>
 8012b84:	e01a      	b.n	8012bbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012b86:	78fb      	ldrb	r3, [r7, #3]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d115      	bne.n	8012bb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	68db      	ldr	r3, [r3, #12]
 8012b90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b98:	2001      	movs	r0, #1
 8012b9a:	f7f0 fefd 	bl	8003998 <HAL_Delay>
      ms++;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f001 f926 	bl	8013df6 <USB_GetMode>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d005      	beq.n	8012bbc <USB_SetCurrentMode+0x84>
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2b31      	cmp	r3, #49	; 0x31
 8012bb4:	d9f0      	bls.n	8012b98 <USB_SetCurrentMode+0x60>
 8012bb6:	e001      	b.n	8012bbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012bb8:	2301      	movs	r3, #1
 8012bba:	e005      	b.n	8012bc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2b32      	cmp	r3, #50	; 0x32
 8012bc0:	d101      	bne.n	8012bc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	e000      	b.n	8012bc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012bc6:	2300      	movs	r3, #0
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3710      	adds	r7, #16
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012bd0:	b084      	sub	sp, #16
 8012bd2:	b580      	push	{r7, lr}
 8012bd4:	b086      	sub	sp, #24
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
 8012bda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012be2:	2300      	movs	r3, #0
 8012be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012bea:	2300      	movs	r3, #0
 8012bec:	613b      	str	r3, [r7, #16]
 8012bee:	e009      	b.n	8012c04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	3340      	adds	r3, #64	; 0x40
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4413      	add	r3, r2
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	3301      	adds	r3, #1
 8012c02:	613b      	str	r3, [r7, #16]
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	2b0e      	cmp	r3, #14
 8012c08:	d9f2      	bls.n	8012bf0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d11c      	bne.n	8012c4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c1e:	f043 0302 	orr.w	r3, r3, #2
 8012c22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	601a      	str	r2, [r3, #0]
 8012c48:	e005      	b.n	8012c56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	2300      	movs	r3, #0
 8012c60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c68:	4619      	mov	r1, r3
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c70:	461a      	mov	r2, r3
 8012c72:	680b      	ldr	r3, [r1, #0]
 8012c74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d10c      	bne.n	8012c96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d104      	bne.n	8012c8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012c82:	2100      	movs	r1, #0
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 f965 	bl	8012f54 <USB_SetDevSpeed>
 8012c8a:	e008      	b.n	8012c9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012c8c:	2101      	movs	r1, #1
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f000 f960 	bl	8012f54 <USB_SetDevSpeed>
 8012c94:	e003      	b.n	8012c9e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012c96:	2103      	movs	r1, #3
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f000 f95b 	bl	8012f54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012c9e:	2110      	movs	r1, #16
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 f8f3 	bl	8012e8c <USB_FlushTxFifo>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d001      	beq.n	8012cb0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012cac:	2301      	movs	r3, #1
 8012cae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f000 f91f 	bl	8012ef4 <USB_FlushRxFifo>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d001      	beq.n	8012cc0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	2300      	movs	r3, #0
 8012cca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cde:	461a      	mov	r2, r3
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	613b      	str	r3, [r7, #16]
 8012ce8:	e043      	b.n	8012d72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	015a      	lsls	r2, r3, #5
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d00:	d118      	bne.n	8012d34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d10a      	bne.n	8012d1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	015a      	lsls	r2, r3, #5
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	4413      	add	r3, r2
 8012d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d14:	461a      	mov	r2, r3
 8012d16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d1a:	6013      	str	r3, [r2, #0]
 8012d1c:	e013      	b.n	8012d46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	015a      	lsls	r2, r3, #5
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	4413      	add	r3, r2
 8012d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012d30:	6013      	str	r3, [r2, #0]
 8012d32:	e008      	b.n	8012d46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	015a      	lsls	r2, r3, #5
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d40:	461a      	mov	r2, r3
 8012d42:	2300      	movs	r3, #0
 8012d44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	015a      	lsls	r2, r3, #5
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d52:	461a      	mov	r2, r3
 8012d54:	2300      	movs	r3, #0
 8012d56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	015a      	lsls	r2, r3, #5
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	4413      	add	r3, r2
 8012d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d64:	461a      	mov	r2, r3
 8012d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012d6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	613b      	str	r3, [r7, #16]
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	693a      	ldr	r2, [r7, #16]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d3b7      	bcc.n	8012cea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	613b      	str	r3, [r7, #16]
 8012d7e:	e043      	b.n	8012e08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	015a      	lsls	r2, r3, #5
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	4413      	add	r3, r2
 8012d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d96:	d118      	bne.n	8012dca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d10a      	bne.n	8012db4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	015a      	lsls	r2, r3, #5
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	4413      	add	r3, r2
 8012da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012daa:	461a      	mov	r2, r3
 8012dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012db0:	6013      	str	r3, [r2, #0]
 8012db2:	e013      	b.n	8012ddc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	015a      	lsls	r2, r3, #5
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	4413      	add	r3, r2
 8012dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012dc6:	6013      	str	r3, [r2, #0]
 8012dc8:	e008      	b.n	8012ddc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	015a      	lsls	r2, r3, #5
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	2300      	movs	r3, #0
 8012dda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	015a      	lsls	r2, r3, #5
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	4413      	add	r3, r2
 8012de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012de8:	461a      	mov	r2, r3
 8012dea:	2300      	movs	r3, #0
 8012dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	015a      	lsls	r2, r3, #5
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	4413      	add	r3, r2
 8012df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012e00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	3301      	adds	r3, #1
 8012e06:	613b      	str	r3, [r7, #16]
 8012e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0a:	693a      	ldr	r2, [r7, #16]
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d3b7      	bcc.n	8012d80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e16:	691b      	ldr	r3, [r3, #16]
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2200      	movs	r2, #0
 8012e28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012e30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d105      	bne.n	8012e44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	699b      	ldr	r3, [r3, #24]
 8012e3c:	f043 0210 	orr.w	r2, r3, #16
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	699a      	ldr	r2, [r3, #24]
 8012e48:	4b0e      	ldr	r3, [pc, #56]	; (8012e84 <USB_DevInit+0x2b4>)
 8012e4a:	4313      	orrs	r3, r2
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d005      	beq.n	8012e62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	699b      	ldr	r3, [r3, #24]
 8012e5a:	f043 0208 	orr.w	r2, r3, #8
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d105      	bne.n	8012e74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	699a      	ldr	r2, [r3, #24]
 8012e6c:	4b06      	ldr	r3, [pc, #24]	; (8012e88 <USB_DevInit+0x2b8>)
 8012e6e:	4313      	orrs	r3, r2
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3718      	adds	r7, #24
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e80:	b004      	add	sp, #16
 8012e82:	4770      	bx	lr
 8012e84:	803c3800 	.word	0x803c3800
 8012e88:	40000004 	.word	0x40000004

08012e8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012e96:	2300      	movs	r3, #0
 8012e98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	4a13      	ldr	r2, [pc, #76]	; (8012ef0 <USB_FlushTxFifo+0x64>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d901      	bls.n	8012eac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	e01b      	b.n	8012ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	691b      	ldr	r3, [r3, #16]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	daf2      	bge.n	8012e9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	019b      	lsls	r3, r3, #6
 8012ebc:	f043 0220 	orr.w	r2, r3, #32
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	4a08      	ldr	r2, [pc, #32]	; (8012ef0 <USB_FlushTxFifo+0x64>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d901      	bls.n	8012ed6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012ed2:	2303      	movs	r3, #3
 8012ed4:	e006      	b.n	8012ee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	691b      	ldr	r3, [r3, #16]
 8012eda:	f003 0320 	and.w	r3, r3, #32
 8012ede:	2b20      	cmp	r3, #32
 8012ee0:	d0f0      	beq.n	8012ec4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012ee2:	2300      	movs	r3, #0
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3714      	adds	r7, #20
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr
 8012ef0:	00030d40 	.word	0x00030d40

08012ef4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b085      	sub	sp, #20
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012efc:	2300      	movs	r3, #0
 8012efe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	3301      	adds	r3, #1
 8012f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	4a11      	ldr	r2, [pc, #68]	; (8012f50 <USB_FlushRxFifo+0x5c>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d901      	bls.n	8012f12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	e018      	b.n	8012f44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	691b      	ldr	r3, [r3, #16]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	daf2      	bge.n	8012f00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2210      	movs	r2, #16
 8012f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	3301      	adds	r3, #1
 8012f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	4a08      	ldr	r2, [pc, #32]	; (8012f50 <USB_FlushRxFifo+0x5c>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d901      	bls.n	8012f36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012f32:	2303      	movs	r3, #3
 8012f34:	e006      	b.n	8012f44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	f003 0310 	and.w	r3, r3, #16
 8012f3e:	2b10      	cmp	r3, #16
 8012f40:	d0f0      	beq.n	8012f24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012f42:	2300      	movs	r3, #0
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3714      	adds	r7, #20
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4e:	4770      	bx	lr
 8012f50:	00030d40 	.word	0x00030d40

08012f54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012f54:	b480      	push	{r7}
 8012f56:	b085      	sub	sp, #20
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	78fb      	ldrb	r3, [r7, #3]
 8012f6e:	68f9      	ldr	r1, [r7, #12]
 8012f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f74:	4313      	orrs	r3, r2
 8012f76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012f78:	2300      	movs	r3, #0
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3714      	adds	r7, #20
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f84:	4770      	bx	lr

08012f86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012f86:	b480      	push	{r7}
 8012f88:	b087      	sub	sp, #28
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	f003 0306 	and.w	r3, r3, #6
 8012f9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d102      	bne.n	8012fac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	75fb      	strb	r3, [r7, #23]
 8012faa:	e00a      	b.n	8012fc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	d002      	beq.n	8012fb8 <USB_GetDevSpeed+0x32>
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2b06      	cmp	r3, #6
 8012fb6:	d102      	bne.n	8012fbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012fb8:	2302      	movs	r3, #2
 8012fba:	75fb      	strb	r3, [r7, #23]
 8012fbc:	e001      	b.n	8012fc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012fbe:	230f      	movs	r3, #15
 8012fc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	371c      	adds	r7, #28
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr

08012fd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	785b      	ldrb	r3, [r3, #1]
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d139      	bne.n	8013060 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ff2:	69da      	ldr	r2, [r3, #28]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f003 030f 	and.w	r3, r3, #15
 8012ffc:	2101      	movs	r1, #1
 8012ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8013002:	b29b      	uxth	r3, r3
 8013004:	68f9      	ldr	r1, [r7, #12]
 8013006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801300a:	4313      	orrs	r3, r2
 801300c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	015a      	lsls	r2, r3, #5
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	4413      	add	r3, r2
 8013016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013020:	2b00      	cmp	r3, #0
 8013022:	d153      	bne.n	80130cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	015a      	lsls	r2, r3, #5
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	4413      	add	r3, r2
 801302c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	689b      	ldr	r3, [r3, #8]
 8013036:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	791b      	ldrb	r3, [r3, #4]
 801303e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013040:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	059b      	lsls	r3, r3, #22
 8013046:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013048:	431a      	orrs	r2, r3
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	0159      	lsls	r1, r3, #5
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	440b      	add	r3, r1
 8013052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013056:	4619      	mov	r1, r3
 8013058:	4b20      	ldr	r3, [pc, #128]	; (80130dc <USB_ActivateEndpoint+0x10c>)
 801305a:	4313      	orrs	r3, r2
 801305c:	600b      	str	r3, [r1, #0]
 801305e:	e035      	b.n	80130cc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013066:	69da      	ldr	r2, [r3, #28]
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	f003 030f 	and.w	r3, r3, #15
 8013070:	2101      	movs	r1, #1
 8013072:	fa01 f303 	lsl.w	r3, r1, r3
 8013076:	041b      	lsls	r3, r3, #16
 8013078:	68f9      	ldr	r1, [r7, #12]
 801307a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801307e:	4313      	orrs	r3, r2
 8013080:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	015a      	lsls	r2, r3, #5
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	4413      	add	r3, r2
 801308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013094:	2b00      	cmp	r3, #0
 8013096:	d119      	bne.n	80130cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	015a      	lsls	r2, r3, #5
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	4413      	add	r3, r2
 80130a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130a4:	681a      	ldr	r2, [r3, #0]
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	689b      	ldr	r3, [r3, #8]
 80130aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	791b      	ldrb	r3, [r3, #4]
 80130b2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80130b4:	430b      	orrs	r3, r1
 80130b6:	431a      	orrs	r2, r3
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	0159      	lsls	r1, r3, #5
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	440b      	add	r3, r1
 80130c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130c4:	4619      	mov	r1, r3
 80130c6:	4b05      	ldr	r3, [pc, #20]	; (80130dc <USB_ActivateEndpoint+0x10c>)
 80130c8:	4313      	orrs	r3, r2
 80130ca:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3714      	adds	r7, #20
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr
 80130da:	bf00      	nop
 80130dc:	10008000 	.word	0x10008000

080130e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80130e0:	b480      	push	{r7}
 80130e2:	b085      	sub	sp, #20
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	785b      	ldrb	r3, [r3, #1]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d161      	bne.n	80131c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	015a      	lsls	r2, r3, #5
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	4413      	add	r3, r2
 8013104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801310e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013112:	d11f      	bne.n	8013154 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	015a      	lsls	r2, r3, #5
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	4413      	add	r3, r2
 801311c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	68ba      	ldr	r2, [r7, #8]
 8013124:	0151      	lsls	r1, r2, #5
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	440a      	add	r2, r1
 801312a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801312e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013132:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	015a      	lsls	r2, r3, #5
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	4413      	add	r3, r2
 801313c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	68ba      	ldr	r2, [r7, #8]
 8013144:	0151      	lsls	r1, r2, #5
 8013146:	68fa      	ldr	r2, [r7, #12]
 8013148:	440a      	add	r2, r1
 801314a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801314e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013152:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801315a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	f003 030f 	and.w	r3, r3, #15
 8013164:	2101      	movs	r1, #1
 8013166:	fa01 f303 	lsl.w	r3, r1, r3
 801316a:	b29b      	uxth	r3, r3
 801316c:	43db      	mvns	r3, r3
 801316e:	68f9      	ldr	r1, [r7, #12]
 8013170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013174:	4013      	ands	r3, r2
 8013176:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801317e:	69da      	ldr	r2, [r3, #28]
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	f003 030f 	and.w	r3, r3, #15
 8013188:	2101      	movs	r1, #1
 801318a:	fa01 f303 	lsl.w	r3, r1, r3
 801318e:	b29b      	uxth	r3, r3
 8013190:	43db      	mvns	r3, r3
 8013192:	68f9      	ldr	r1, [r7, #12]
 8013194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013198:	4013      	ands	r3, r2
 801319a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	015a      	lsls	r2, r3, #5
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	4413      	add	r3, r2
 80131a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	0159      	lsls	r1, r3, #5
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	440b      	add	r3, r1
 80131b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b6:	4619      	mov	r1, r3
 80131b8:	4b35      	ldr	r3, [pc, #212]	; (8013290 <USB_DeactivateEndpoint+0x1b0>)
 80131ba:	4013      	ands	r3, r2
 80131bc:	600b      	str	r3, [r1, #0]
 80131be:	e060      	b.n	8013282 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	015a      	lsls	r2, r3, #5
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	4413      	add	r3, r2
 80131c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131d6:	d11f      	bne.n	8013218 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	015a      	lsls	r2, r3, #5
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	4413      	add	r3, r2
 80131e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	0151      	lsls	r1, r2, #5
 80131ea:	68fa      	ldr	r2, [r7, #12]
 80131ec:	440a      	add	r2, r1
 80131ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80131f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	015a      	lsls	r2, r3, #5
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	4413      	add	r3, r2
 8013200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	68ba      	ldr	r2, [r7, #8]
 8013208:	0151      	lsls	r1, r2, #5
 801320a:	68fa      	ldr	r2, [r7, #12]
 801320c:	440a      	add	r2, r1
 801320e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013216:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801321e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	f003 030f 	and.w	r3, r3, #15
 8013228:	2101      	movs	r1, #1
 801322a:	fa01 f303 	lsl.w	r3, r1, r3
 801322e:	041b      	lsls	r3, r3, #16
 8013230:	43db      	mvns	r3, r3
 8013232:	68f9      	ldr	r1, [r7, #12]
 8013234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013238:	4013      	ands	r3, r2
 801323a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013242:	69da      	ldr	r2, [r3, #28]
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	f003 030f 	and.w	r3, r3, #15
 801324c:	2101      	movs	r1, #1
 801324e:	fa01 f303 	lsl.w	r3, r1, r3
 8013252:	041b      	lsls	r3, r3, #16
 8013254:	43db      	mvns	r3, r3
 8013256:	68f9      	ldr	r1, [r7, #12]
 8013258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801325c:	4013      	ands	r3, r2
 801325e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	015a      	lsls	r2, r3, #5
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	4413      	add	r3, r2
 8013268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	0159      	lsls	r1, r3, #5
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	440b      	add	r3, r1
 8013276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801327a:	4619      	mov	r1, r3
 801327c:	4b05      	ldr	r3, [pc, #20]	; (8013294 <USB_DeactivateEndpoint+0x1b4>)
 801327e:	4013      	ands	r3, r2
 8013280:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013282:	2300      	movs	r3, #0
}
 8013284:	4618      	mov	r0, r3
 8013286:	3714      	adds	r7, #20
 8013288:	46bd      	mov	sp, r7
 801328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328e:	4770      	bx	lr
 8013290:	ec337800 	.word	0xec337800
 8013294:	eff37800 	.word	0xeff37800

08013298 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b08a      	sub	sp, #40	; 0x28
 801329c:	af02      	add	r7, sp, #8
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	4613      	mov	r3, r2
 80132a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	785b      	ldrb	r3, [r3, #1]
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	f040 8181 	bne.w	80135bc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	691b      	ldr	r3, [r3, #16]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d132      	bne.n	8013328 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	015a      	lsls	r2, r3, #5
 80132c6:	69fb      	ldr	r3, [r7, #28]
 80132c8:	4413      	add	r3, r2
 80132ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132ce:	691a      	ldr	r2, [r3, #16]
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	0159      	lsls	r1, r3, #5
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	440b      	add	r3, r1
 80132d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132dc:	4619      	mov	r1, r3
 80132de:	4ba5      	ldr	r3, [pc, #660]	; (8013574 <USB_EPStartXfer+0x2dc>)
 80132e0:	4013      	ands	r3, r2
 80132e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	015a      	lsls	r2, r3, #5
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	4413      	add	r3, r2
 80132ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f0:	691b      	ldr	r3, [r3, #16]
 80132f2:	69ba      	ldr	r2, [r7, #24]
 80132f4:	0151      	lsls	r1, r2, #5
 80132f6:	69fa      	ldr	r2, [r7, #28]
 80132f8:	440a      	add	r2, r1
 80132fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	015a      	lsls	r2, r3, #5
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	4413      	add	r3, r2
 801330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013310:	691a      	ldr	r2, [r3, #16]
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	0159      	lsls	r1, r3, #5
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	440b      	add	r3, r1
 801331a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801331e:	4619      	mov	r1, r3
 8013320:	4b95      	ldr	r3, [pc, #596]	; (8013578 <USB_EPStartXfer+0x2e0>)
 8013322:	4013      	ands	r3, r2
 8013324:	610b      	str	r3, [r1, #16]
 8013326:	e092      	b.n	801344e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	015a      	lsls	r2, r3, #5
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	4413      	add	r3, r2
 8013330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013334:	691a      	ldr	r2, [r3, #16]
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	0159      	lsls	r1, r3, #5
 801333a:	69fb      	ldr	r3, [r7, #28]
 801333c:	440b      	add	r3, r1
 801333e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013342:	4619      	mov	r1, r3
 8013344:	4b8c      	ldr	r3, [pc, #560]	; (8013578 <USB_EPStartXfer+0x2e0>)
 8013346:	4013      	ands	r3, r2
 8013348:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801334a:	69bb      	ldr	r3, [r7, #24]
 801334c:	015a      	lsls	r2, r3, #5
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	4413      	add	r3, r2
 8013352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013356:	691a      	ldr	r2, [r3, #16]
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	0159      	lsls	r1, r3, #5
 801335c:	69fb      	ldr	r3, [r7, #28]
 801335e:	440b      	add	r3, r1
 8013360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013364:	4619      	mov	r1, r3
 8013366:	4b83      	ldr	r3, [pc, #524]	; (8013574 <USB_EPStartXfer+0x2dc>)
 8013368:	4013      	ands	r3, r2
 801336a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d11a      	bne.n	80133a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	691a      	ldr	r2, [r3, #16]
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	429a      	cmp	r2, r3
 801337c:	d903      	bls.n	8013386 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	689a      	ldr	r2, [r3, #8]
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	015a      	lsls	r2, r3, #5
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	4413      	add	r3, r2
 801338e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013392:	691b      	ldr	r3, [r3, #16]
 8013394:	69ba      	ldr	r2, [r7, #24]
 8013396:	0151      	lsls	r1, r2, #5
 8013398:	69fa      	ldr	r2, [r7, #28]
 801339a:	440a      	add	r2, r1
 801339c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133a4:	6113      	str	r3, [r2, #16]
 80133a6:	e01b      	b.n	80133e0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	015a      	lsls	r2, r3, #5
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	4413      	add	r3, r2
 80133b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133b4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	6919      	ldr	r1, [r3, #16]
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	440b      	add	r3, r1
 80133c0:	1e59      	subs	r1, r3, #1
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	689b      	ldr	r3, [r3, #8]
 80133c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80133ca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80133cc:	4b6b      	ldr	r3, [pc, #428]	; (801357c <USB_EPStartXfer+0x2e4>)
 80133ce:	400b      	ands	r3, r1
 80133d0:	69b9      	ldr	r1, [r7, #24]
 80133d2:	0148      	lsls	r0, r1, #5
 80133d4:	69f9      	ldr	r1, [r7, #28]
 80133d6:	4401      	add	r1, r0
 80133d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80133dc:	4313      	orrs	r3, r2
 80133de:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	015a      	lsls	r2, r3, #5
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	4413      	add	r3, r2
 80133e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ec:	691a      	ldr	r2, [r3, #16]
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	691b      	ldr	r3, [r3, #16]
 80133f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133f6:	69b9      	ldr	r1, [r7, #24]
 80133f8:	0148      	lsls	r0, r1, #5
 80133fa:	69f9      	ldr	r1, [r7, #28]
 80133fc:	4401      	add	r1, r0
 80133fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013402:	4313      	orrs	r3, r2
 8013404:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	791b      	ldrb	r3, [r3, #4]
 801340a:	2b01      	cmp	r3, #1
 801340c:	d11f      	bne.n	801344e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	015a      	lsls	r2, r3, #5
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	4413      	add	r3, r2
 8013416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801341a:	691b      	ldr	r3, [r3, #16]
 801341c:	69ba      	ldr	r2, [r7, #24]
 801341e:	0151      	lsls	r1, r2, #5
 8013420:	69fa      	ldr	r2, [r7, #28]
 8013422:	440a      	add	r2, r1
 8013424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013428:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801342c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	015a      	lsls	r2, r3, #5
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	4413      	add	r3, r2
 8013436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801343a:	691b      	ldr	r3, [r3, #16]
 801343c:	69ba      	ldr	r2, [r7, #24]
 801343e:	0151      	lsls	r1, r2, #5
 8013440:	69fa      	ldr	r2, [r7, #28]
 8013442:	440a      	add	r2, r1
 8013444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801344c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801344e:	79fb      	ldrb	r3, [r7, #7]
 8013450:	2b01      	cmp	r3, #1
 8013452:	d14b      	bne.n	80134ec <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	69db      	ldr	r3, [r3, #28]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d009      	beq.n	8013470 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	015a      	lsls	r2, r3, #5
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	4413      	add	r3, r2
 8013464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013468:	461a      	mov	r2, r3
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	69db      	ldr	r3, [r3, #28]
 801346e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	791b      	ldrb	r3, [r3, #4]
 8013474:	2b01      	cmp	r3, #1
 8013476:	d128      	bne.n	80134ca <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013484:	2b00      	cmp	r3, #0
 8013486:	d110      	bne.n	80134aa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013488:	69bb      	ldr	r3, [r7, #24]
 801348a:	015a      	lsls	r2, r3, #5
 801348c:	69fb      	ldr	r3, [r7, #28]
 801348e:	4413      	add	r3, r2
 8013490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	69ba      	ldr	r2, [r7, #24]
 8013498:	0151      	lsls	r1, r2, #5
 801349a:	69fa      	ldr	r2, [r7, #28]
 801349c:	440a      	add	r2, r1
 801349e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80134a6:	6013      	str	r3, [r2, #0]
 80134a8:	e00f      	b.n	80134ca <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	015a      	lsls	r2, r3, #5
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	4413      	add	r3, r2
 80134b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	69ba      	ldr	r2, [r7, #24]
 80134ba:	0151      	lsls	r1, r2, #5
 80134bc:	69fa      	ldr	r2, [r7, #28]
 80134be:	440a      	add	r2, r1
 80134c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80134c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	015a      	lsls	r2, r3, #5
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	4413      	add	r3, r2
 80134d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	69ba      	ldr	r2, [r7, #24]
 80134da:	0151      	lsls	r1, r2, #5
 80134dc:	69fa      	ldr	r2, [r7, #28]
 80134de:	440a      	add	r2, r1
 80134e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80134e8:	6013      	str	r3, [r2, #0]
 80134ea:	e16a      	b.n	80137c2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	015a      	lsls	r2, r3, #5
 80134f0:	69fb      	ldr	r3, [r7, #28]
 80134f2:	4413      	add	r3, r2
 80134f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	69ba      	ldr	r2, [r7, #24]
 80134fc:	0151      	lsls	r1, r2, #5
 80134fe:	69fa      	ldr	r2, [r7, #28]
 8013500:	440a      	add	r2, r1
 8013502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013506:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801350a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	791b      	ldrb	r3, [r3, #4]
 8013510:	2b01      	cmp	r3, #1
 8013512:	d015      	beq.n	8013540 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	2b00      	cmp	r3, #0
 801351a:	f000 8152 	beq.w	80137c2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	f003 030f 	and.w	r3, r3, #15
 801352e:	2101      	movs	r1, #1
 8013530:	fa01 f303 	lsl.w	r3, r1, r3
 8013534:	69f9      	ldr	r1, [r7, #28]
 8013536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801353a:	4313      	orrs	r3, r2
 801353c:	634b      	str	r3, [r1, #52]	; 0x34
 801353e:	e140      	b.n	80137c2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013546:	689b      	ldr	r3, [r3, #8]
 8013548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801354c:	2b00      	cmp	r3, #0
 801354e:	d117      	bne.n	8013580 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013550:	69bb      	ldr	r3, [r7, #24]
 8013552:	015a      	lsls	r2, r3, #5
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	4413      	add	r3, r2
 8013558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	69ba      	ldr	r2, [r7, #24]
 8013560:	0151      	lsls	r1, r2, #5
 8013562:	69fa      	ldr	r2, [r7, #28]
 8013564:	440a      	add	r2, r1
 8013566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801356a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801356e:	6013      	str	r3, [r2, #0]
 8013570:	e016      	b.n	80135a0 <USB_EPStartXfer+0x308>
 8013572:	bf00      	nop
 8013574:	e007ffff 	.word	0xe007ffff
 8013578:	fff80000 	.word	0xfff80000
 801357c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	015a      	lsls	r2, r3, #5
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	4413      	add	r3, r2
 8013588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	69ba      	ldr	r2, [r7, #24]
 8013590:	0151      	lsls	r1, r2, #5
 8013592:	69fa      	ldr	r2, [r7, #28]
 8013594:	440a      	add	r2, r1
 8013596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801359a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801359e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	68d9      	ldr	r1, [r3, #12]
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	781a      	ldrb	r2, [r3, #0]
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	691b      	ldr	r3, [r3, #16]
 80135ac:	b298      	uxth	r0, r3
 80135ae:	79fb      	ldrb	r3, [r7, #7]
 80135b0:	9300      	str	r3, [sp, #0]
 80135b2:	4603      	mov	r3, r0
 80135b4:	68f8      	ldr	r0, [r7, #12]
 80135b6:	f000 f9b9 	bl	801392c <USB_WritePacket>
 80135ba:	e102      	b.n	80137c2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80135bc:	69bb      	ldr	r3, [r7, #24]
 80135be:	015a      	lsls	r2, r3, #5
 80135c0:	69fb      	ldr	r3, [r7, #28]
 80135c2:	4413      	add	r3, r2
 80135c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135c8:	691a      	ldr	r2, [r3, #16]
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	0159      	lsls	r1, r3, #5
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	440b      	add	r3, r1
 80135d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135d6:	4619      	mov	r1, r3
 80135d8:	4b7c      	ldr	r3, [pc, #496]	; (80137cc <USB_EPStartXfer+0x534>)
 80135da:	4013      	ands	r3, r2
 80135dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	015a      	lsls	r2, r3, #5
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	4413      	add	r3, r2
 80135e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ea:	691a      	ldr	r2, [r3, #16]
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	0159      	lsls	r1, r3, #5
 80135f0:	69fb      	ldr	r3, [r7, #28]
 80135f2:	440b      	add	r3, r1
 80135f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135f8:	4619      	mov	r1, r3
 80135fa:	4b75      	ldr	r3, [pc, #468]	; (80137d0 <USB_EPStartXfer+0x538>)
 80135fc:	4013      	ands	r3, r2
 80135fe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013600:	69bb      	ldr	r3, [r7, #24]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d12f      	bne.n	8013666 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	691b      	ldr	r3, [r3, #16]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d003      	beq.n	8013616 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	689a      	ldr	r2, [r3, #8]
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	689a      	ldr	r2, [r3, #8]
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	015a      	lsls	r2, r3, #5
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	4413      	add	r3, r2
 8013626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801362a:	691a      	ldr	r2, [r3, #16]
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	6a1b      	ldr	r3, [r3, #32]
 8013630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013634:	69b9      	ldr	r1, [r7, #24]
 8013636:	0148      	lsls	r0, r1, #5
 8013638:	69f9      	ldr	r1, [r7, #28]
 801363a:	4401      	add	r1, r0
 801363c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013640:	4313      	orrs	r3, r2
 8013642:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	015a      	lsls	r2, r3, #5
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	4413      	add	r3, r2
 801364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013650:	691b      	ldr	r3, [r3, #16]
 8013652:	69ba      	ldr	r2, [r7, #24]
 8013654:	0151      	lsls	r1, r2, #5
 8013656:	69fa      	ldr	r2, [r7, #28]
 8013658:	440a      	add	r2, r1
 801365a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801365e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013662:	6113      	str	r3, [r2, #16]
 8013664:	e05f      	b.n	8013726 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	691b      	ldr	r3, [r3, #16]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d123      	bne.n	80136b6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	015a      	lsls	r2, r3, #5
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	4413      	add	r3, r2
 8013676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801367a:	691a      	ldr	r2, [r3, #16]
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	689b      	ldr	r3, [r3, #8]
 8013680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013684:	69b9      	ldr	r1, [r7, #24]
 8013686:	0148      	lsls	r0, r1, #5
 8013688:	69f9      	ldr	r1, [r7, #28]
 801368a:	4401      	add	r1, r0
 801368c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013690:	4313      	orrs	r3, r2
 8013692:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	015a      	lsls	r2, r3, #5
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	4413      	add	r3, r2
 801369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a0:	691b      	ldr	r3, [r3, #16]
 80136a2:	69ba      	ldr	r2, [r7, #24]
 80136a4:	0151      	lsls	r1, r2, #5
 80136a6:	69fa      	ldr	r2, [r7, #28]
 80136a8:	440a      	add	r2, r1
 80136aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80136b2:	6113      	str	r3, [r2, #16]
 80136b4:	e037      	b.n	8013726 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	691a      	ldr	r2, [r3, #16]
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	689b      	ldr	r3, [r3, #8]
 80136be:	4413      	add	r3, r2
 80136c0:	1e5a      	subs	r2, r3, #1
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	689b      	ldr	r3, [r3, #8]
 80136c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80136ca:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	8afa      	ldrh	r2, [r7, #22]
 80136d2:	fb03 f202 	mul.w	r2, r3, r2
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	015a      	lsls	r2, r3, #5
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	4413      	add	r3, r2
 80136e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136e6:	691a      	ldr	r2, [r3, #16]
 80136e8:	8afb      	ldrh	r3, [r7, #22]
 80136ea:	04d9      	lsls	r1, r3, #19
 80136ec:	4b39      	ldr	r3, [pc, #228]	; (80137d4 <USB_EPStartXfer+0x53c>)
 80136ee:	400b      	ands	r3, r1
 80136f0:	69b9      	ldr	r1, [r7, #24]
 80136f2:	0148      	lsls	r0, r1, #5
 80136f4:	69f9      	ldr	r1, [r7, #28]
 80136f6:	4401      	add	r1, r0
 80136f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80136fc:	4313      	orrs	r3, r2
 80136fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	015a      	lsls	r2, r3, #5
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	4413      	add	r3, r2
 8013708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801370c:	691a      	ldr	r2, [r3, #16]
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	6a1b      	ldr	r3, [r3, #32]
 8013712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013716:	69b9      	ldr	r1, [r7, #24]
 8013718:	0148      	lsls	r0, r1, #5
 801371a:	69f9      	ldr	r1, [r7, #28]
 801371c:	4401      	add	r1, r0
 801371e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013722:	4313      	orrs	r3, r2
 8013724:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013726:	79fb      	ldrb	r3, [r7, #7]
 8013728:	2b01      	cmp	r3, #1
 801372a:	d10d      	bne.n	8013748 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	68db      	ldr	r3, [r3, #12]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d009      	beq.n	8013748 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	68d9      	ldr	r1, [r3, #12]
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	015a      	lsls	r2, r3, #5
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	4413      	add	r3, r2
 8013740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013744:	460a      	mov	r2, r1
 8013746:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	791b      	ldrb	r3, [r3, #4]
 801374c:	2b01      	cmp	r3, #1
 801374e:	d128      	bne.n	80137a2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013756:	689b      	ldr	r3, [r3, #8]
 8013758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801375c:	2b00      	cmp	r3, #0
 801375e:	d110      	bne.n	8013782 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	015a      	lsls	r2, r3, #5
 8013764:	69fb      	ldr	r3, [r7, #28]
 8013766:	4413      	add	r3, r2
 8013768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	69ba      	ldr	r2, [r7, #24]
 8013770:	0151      	lsls	r1, r2, #5
 8013772:	69fa      	ldr	r2, [r7, #28]
 8013774:	440a      	add	r2, r1
 8013776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801377a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801377e:	6013      	str	r3, [r2, #0]
 8013780:	e00f      	b.n	80137a2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	015a      	lsls	r2, r3, #5
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	4413      	add	r3, r2
 801378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	69ba      	ldr	r2, [r7, #24]
 8013792:	0151      	lsls	r1, r2, #5
 8013794:	69fa      	ldr	r2, [r7, #28]
 8013796:	440a      	add	r2, r1
 8013798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137a0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	015a      	lsls	r2, r3, #5
 80137a6:	69fb      	ldr	r3, [r7, #28]
 80137a8:	4413      	add	r3, r2
 80137aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	69ba      	ldr	r2, [r7, #24]
 80137b2:	0151      	lsls	r1, r2, #5
 80137b4:	69fa      	ldr	r2, [r7, #28]
 80137b6:	440a      	add	r2, r1
 80137b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80137c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80137c2:	2300      	movs	r3, #0
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	3720      	adds	r7, #32
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	fff80000 	.word	0xfff80000
 80137d0:	e007ffff 	.word	0xe007ffff
 80137d4:	1ff80000 	.word	0x1ff80000

080137d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80137d8:	b480      	push	{r7}
 80137da:	b087      	sub	sp, #28
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80137e2:	2300      	movs	r3, #0
 80137e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80137e6:	2300      	movs	r3, #0
 80137e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	785b      	ldrb	r3, [r3, #1]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d14a      	bne.n	801388c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	015a      	lsls	r2, r3, #5
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	4413      	add	r3, r2
 8013800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801380a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801380e:	f040 8086 	bne.w	801391e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	781b      	ldrb	r3, [r3, #0]
 8013816:	015a      	lsls	r2, r3, #5
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	4413      	add	r3, r2
 801381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	683a      	ldr	r2, [r7, #0]
 8013824:	7812      	ldrb	r2, [r2, #0]
 8013826:	0151      	lsls	r1, r2, #5
 8013828:	693a      	ldr	r2, [r7, #16]
 801382a:	440a      	add	r2, r1
 801382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013834:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	015a      	lsls	r2, r3, #5
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	4413      	add	r3, r2
 8013840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	683a      	ldr	r2, [r7, #0]
 8013848:	7812      	ldrb	r2, [r2, #0]
 801384a:	0151      	lsls	r1, r2, #5
 801384c:	693a      	ldr	r2, [r7, #16]
 801384e:	440a      	add	r2, r1
 8013850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	3301      	adds	r3, #1
 801385e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f242 7210 	movw	r2, #10000	; 0x2710
 8013866:	4293      	cmp	r3, r2
 8013868:	d902      	bls.n	8013870 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801386a:	2301      	movs	r3, #1
 801386c:	75fb      	strb	r3, [r7, #23]
          break;
 801386e:	e056      	b.n	801391e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	015a      	lsls	r2, r3, #5
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	4413      	add	r3, r2
 801387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013888:	d0e7      	beq.n	801385a <USB_EPStopXfer+0x82>
 801388a:	e048      	b.n	801391e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	015a      	lsls	r2, r3, #5
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	4413      	add	r3, r2
 8013896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138a4:	d13b      	bne.n	801391e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	015a      	lsls	r2, r3, #5
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	4413      	add	r3, r2
 80138b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	683a      	ldr	r2, [r7, #0]
 80138b8:	7812      	ldrb	r2, [r2, #0]
 80138ba:	0151      	lsls	r1, r2, #5
 80138bc:	693a      	ldr	r2, [r7, #16]
 80138be:	440a      	add	r2, r1
 80138c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80138c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	015a      	lsls	r2, r3, #5
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	4413      	add	r3, r2
 80138d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	683a      	ldr	r2, [r7, #0]
 80138dc:	7812      	ldrb	r2, [r2, #0]
 80138de:	0151      	lsls	r1, r2, #5
 80138e0:	693a      	ldr	r2, [r7, #16]
 80138e2:	440a      	add	r2, r1
 80138e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	3301      	adds	r3, #1
 80138f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80138fa:	4293      	cmp	r3, r2
 80138fc:	d902      	bls.n	8013904 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80138fe:	2301      	movs	r3, #1
 8013900:	75fb      	strb	r3, [r7, #23]
          break;
 8013902:	e00c      	b.n	801391e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	015a      	lsls	r2, r3, #5
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	4413      	add	r3, r2
 801390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801391c:	d0e7      	beq.n	80138ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801391e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013920:	4618      	mov	r0, r3
 8013922:	371c      	adds	r7, #28
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr

0801392c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801392c:	b480      	push	{r7}
 801392e:	b089      	sub	sp, #36	; 0x24
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	4611      	mov	r1, r2
 8013938:	461a      	mov	r2, r3
 801393a:	460b      	mov	r3, r1
 801393c:	71fb      	strb	r3, [r7, #7]
 801393e:	4613      	mov	r3, r2
 8013940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801394a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801394e:	2b00      	cmp	r3, #0
 8013950:	d123      	bne.n	801399a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013952:	88bb      	ldrh	r3, [r7, #4]
 8013954:	3303      	adds	r3, #3
 8013956:	089b      	lsrs	r3, r3, #2
 8013958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801395a:	2300      	movs	r3, #0
 801395c:	61bb      	str	r3, [r7, #24]
 801395e:	e018      	b.n	8013992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013960:	79fb      	ldrb	r3, [r7, #7]
 8013962:	031a      	lsls	r2, r3, #12
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	4413      	add	r3, r2
 8013968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801396c:	461a      	mov	r2, r3
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	3301      	adds	r3, #1
 8013978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	3301      	adds	r3, #1
 801397e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	3301      	adds	r3, #1
 8013984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013986:	69fb      	ldr	r3, [r7, #28]
 8013988:	3301      	adds	r3, #1
 801398a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801398c:	69bb      	ldr	r3, [r7, #24]
 801398e:	3301      	adds	r3, #1
 8013990:	61bb      	str	r3, [r7, #24]
 8013992:	69ba      	ldr	r2, [r7, #24]
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	429a      	cmp	r2, r3
 8013998:	d3e2      	bcc.n	8013960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	3724      	adds	r7, #36	; 0x24
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b08b      	sub	sp, #44	; 0x2c
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	4613      	mov	r3, r2
 80139b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80139be:	88fb      	ldrh	r3, [r7, #6]
 80139c0:	089b      	lsrs	r3, r3, #2
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80139c6:	88fb      	ldrh	r3, [r7, #6]
 80139c8:	f003 0303 	and.w	r3, r3, #3
 80139cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80139ce:	2300      	movs	r3, #0
 80139d0:	623b      	str	r3, [r7, #32]
 80139d2:	e014      	b.n	80139fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80139d4:	69bb      	ldr	r3, [r7, #24]
 80139d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139de:	601a      	str	r2, [r3, #0]
    pDest++;
 80139e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e2:	3301      	adds	r3, #1
 80139e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e8:	3301      	adds	r3, #1
 80139ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ee:	3301      	adds	r3, #1
 80139f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f4:	3301      	adds	r3, #1
 80139f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80139f8:	6a3b      	ldr	r3, [r7, #32]
 80139fa:	3301      	adds	r3, #1
 80139fc:	623b      	str	r3, [r7, #32]
 80139fe:	6a3a      	ldr	r2, [r7, #32]
 8013a00:	697b      	ldr	r3, [r7, #20]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d3e6      	bcc.n	80139d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013a06:	8bfb      	ldrh	r3, [r7, #30]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d01e      	beq.n	8013a4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a16:	461a      	mov	r2, r3
 8013a18:	f107 0310 	add.w	r3, r7, #16
 8013a1c:	6812      	ldr	r2, [r2, #0]
 8013a1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013a20:	693a      	ldr	r2, [r7, #16]
 8013a22:	6a3b      	ldr	r3, [r7, #32]
 8013a24:	b2db      	uxtb	r3, r3
 8013a26:	00db      	lsls	r3, r3, #3
 8013a28:	fa22 f303 	lsr.w	r3, r2, r3
 8013a2c:	b2da      	uxtb	r2, r3
 8013a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a30:	701a      	strb	r2, [r3, #0]
      i++;
 8013a32:	6a3b      	ldr	r3, [r7, #32]
 8013a34:	3301      	adds	r3, #1
 8013a36:	623b      	str	r3, [r7, #32]
      pDest++;
 8013a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013a3e:	8bfb      	ldrh	r3, [r7, #30]
 8013a40:	3b01      	subs	r3, #1
 8013a42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013a44:	8bfb      	ldrh	r3, [r7, #30]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d1ea      	bne.n	8013a20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	372c      	adds	r7, #44	; 0x2c
 8013a50:	46bd      	mov	sp, r7
 8013a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a56:	4770      	bx	lr

08013a58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a58:	b480      	push	{r7}
 8013a5a:	b085      	sub	sp, #20
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	781b      	ldrb	r3, [r3, #0]
 8013a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	785b      	ldrb	r3, [r3, #1]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d12c      	bne.n	8013ace <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	015a      	lsls	r2, r3, #5
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	db12      	blt.n	8013aac <USB_EPSetStall+0x54>
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00f      	beq.n	8013aac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	015a      	lsls	r2, r3, #5
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	4413      	add	r3, r2
 8013a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	68ba      	ldr	r2, [r7, #8]
 8013a9c:	0151      	lsls	r1, r2, #5
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	440a      	add	r2, r1
 8013aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013aa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013aaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	015a      	lsls	r2, r3, #5
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	4413      	add	r3, r2
 8013ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	68ba      	ldr	r2, [r7, #8]
 8013abc:	0151      	lsls	r1, r2, #5
 8013abe:	68fa      	ldr	r2, [r7, #12]
 8013ac0:	440a      	add	r2, r1
 8013ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013aca:	6013      	str	r3, [r2, #0]
 8013acc:	e02b      	b.n	8013b26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	015a      	lsls	r2, r3, #5
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	db12      	blt.n	8013b06 <USB_EPSetStall+0xae>
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d00f      	beq.n	8013b06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	015a      	lsls	r2, r3, #5
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	4413      	add	r3, r2
 8013aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	0151      	lsls	r1, r2, #5
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	440a      	add	r2, r1
 8013afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	015a      	lsls	r2, r3, #5
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	68ba      	ldr	r2, [r7, #8]
 8013b16:	0151      	lsls	r1, r2, #5
 8013b18:	68fa      	ldr	r2, [r7, #12]
 8013b1a:	440a      	add	r2, r1
 8013b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3714      	adds	r7, #20
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b32:	4770      	bx	lr

08013b34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	785b      	ldrb	r3, [r3, #1]
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d128      	bne.n	8013ba2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	015a      	lsls	r2, r3, #5
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	4413      	add	r3, r2
 8013b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	68ba      	ldr	r2, [r7, #8]
 8013b60:	0151      	lsls	r1, r2, #5
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	440a      	add	r2, r1
 8013b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	791b      	ldrb	r3, [r3, #4]
 8013b74:	2b03      	cmp	r3, #3
 8013b76:	d003      	beq.n	8013b80 <USB_EPClearStall+0x4c>
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	791b      	ldrb	r3, [r3, #4]
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	d138      	bne.n	8013bf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	015a      	lsls	r2, r3, #5
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	4413      	add	r3, r2
 8013b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	68ba      	ldr	r2, [r7, #8]
 8013b90:	0151      	lsls	r1, r2, #5
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	440a      	add	r2, r1
 8013b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b9e:	6013      	str	r3, [r2, #0]
 8013ba0:	e027      	b.n	8013bf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	015a      	lsls	r2, r3, #5
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	4413      	add	r3, r2
 8013baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	68ba      	ldr	r2, [r7, #8]
 8013bb2:	0151      	lsls	r1, r2, #5
 8013bb4:	68fa      	ldr	r2, [r7, #12]
 8013bb6:	440a      	add	r2, r1
 8013bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013bc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	791b      	ldrb	r3, [r3, #4]
 8013bc6:	2b03      	cmp	r3, #3
 8013bc8:	d003      	beq.n	8013bd2 <USB_EPClearStall+0x9e>
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	791b      	ldrb	r3, [r3, #4]
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	d10f      	bne.n	8013bf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	015a      	lsls	r2, r3, #5
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	4413      	add	r3, r2
 8013bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	68ba      	ldr	r2, [r7, #8]
 8013be2:	0151      	lsls	r1, r2, #5
 8013be4:	68fa      	ldr	r2, [r7, #12]
 8013be6:	440a      	add	r2, r1
 8013be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013bf2:	2300      	movs	r3, #0
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3714      	adds	r7, #20
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013c00:	b480      	push	{r7}
 8013c02:	b085      	sub	sp, #20
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	460b      	mov	r3, r1
 8013c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013c22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	78fb      	ldrb	r3, [r7, #3]
 8013c2e:	011b      	lsls	r3, r3, #4
 8013c30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013c34:	68f9      	ldr	r1, [r7, #12]
 8013c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3714      	adds	r7, #20
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b085      	sub	sp, #20
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	68fa      	ldr	r2, [r7, #12]
 8013c62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013c66:	f023 0303 	bic.w	r3, r3, #3
 8013c6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c7a:	f023 0302 	bic.w	r3, r3, #2
 8013c7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013c80:	2300      	movs	r3, #0
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3714      	adds	r7, #20
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr

08013c8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c8e:	b480      	push	{r7}
 8013c90:	b085      	sub	sp, #20
 8013c92:	af00      	add	r7, sp, #0
 8013c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ca8:	f023 0303 	bic.w	r3, r3, #3
 8013cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cbc:	f043 0302 	orr.w	r3, r3, #2
 8013cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3714      	adds	r7, #20
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr

08013cd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	b085      	sub	sp, #20
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	695b      	ldr	r3, [r3, #20]
 8013cdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	699b      	ldr	r3, [r3, #24]
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	4013      	ands	r3, r2
 8013ce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3714      	adds	r7, #20
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr

08013cf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013cf6:	b480      	push	{r7}
 8013cf8:	b085      	sub	sp, #20
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d08:	699b      	ldr	r3, [r3, #24]
 8013d0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d12:	69db      	ldr	r3, [r3, #28]
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	4013      	ands	r3, r2
 8013d18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	0c1b      	lsrs	r3, r3, #16
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3714      	adds	r7, #20
 8013d22:	46bd      	mov	sp, r7
 8013d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d28:	4770      	bx	lr

08013d2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013d2a:	b480      	push	{r7}
 8013d2c:	b085      	sub	sp, #20
 8013d2e:	af00      	add	r7, sp, #0
 8013d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d3c:	699b      	ldr	r3, [r3, #24]
 8013d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d46:	69db      	ldr	r3, [r3, #28]
 8013d48:	68ba      	ldr	r2, [r7, #8]
 8013d4a:	4013      	ands	r3, r2
 8013d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	b29b      	uxth	r3, r3
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3714      	adds	r7, #20
 8013d56:	46bd      	mov	sp, r7
 8013d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5c:	4770      	bx	lr

08013d5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013d5e:	b480      	push	{r7}
 8013d60:	b085      	sub	sp, #20
 8013d62:	af00      	add	r7, sp, #0
 8013d64:	6078      	str	r0, [r7, #4]
 8013d66:	460b      	mov	r3, r1
 8013d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013d6e:	78fb      	ldrb	r3, [r7, #3]
 8013d70:	015a      	lsls	r2, r3, #5
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	4413      	add	r3, r2
 8013d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	68ba      	ldr	r2, [r7, #8]
 8013d88:	4013      	ands	r3, r2
 8013d8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013d8c:	68bb      	ldr	r3, [r7, #8]
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3714      	adds	r7, #20
 8013d92:	46bd      	mov	sp, r7
 8013d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d98:	4770      	bx	lr

08013d9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013d9a:	b480      	push	{r7}
 8013d9c:	b087      	sub	sp, #28
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
 8013da2:	460b      	mov	r3, r1
 8013da4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013dbe:	78fb      	ldrb	r3, [r7, #3]
 8013dc0:	f003 030f 	and.w	r3, r3, #15
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8013dca:	01db      	lsls	r3, r3, #7
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	693a      	ldr	r2, [r7, #16]
 8013dd0:	4313      	orrs	r3, r2
 8013dd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013dd4:	78fb      	ldrb	r3, [r7, #3]
 8013dd6:	015a      	lsls	r2, r3, #5
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	4413      	add	r3, r2
 8013ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013de0:	689b      	ldr	r3, [r3, #8]
 8013de2:	693a      	ldr	r2, [r7, #16]
 8013de4:	4013      	ands	r3, r2
 8013de6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013de8:	68bb      	ldr	r3, [r7, #8]
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	371c      	adds	r7, #28
 8013dee:	46bd      	mov	sp, r7
 8013df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df4:	4770      	bx	lr

08013df6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013df6:	b480      	push	{r7}
 8013df8:	b083      	sub	sp, #12
 8013dfa:	af00      	add	r7, sp, #0
 8013dfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	695b      	ldr	r3, [r3, #20]
 8013e02:	f003 0301 	and.w	r3, r3, #1
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	370c      	adds	r7, #12
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e10:	4770      	bx	lr
	...

08013e14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013e14:	b480      	push	{r7}
 8013e16:	b085      	sub	sp, #20
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e26:	681a      	ldr	r2, [r3, #0]
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e2e:	4619      	mov	r1, r3
 8013e30:	4b09      	ldr	r3, [pc, #36]	; (8013e58 <USB_ActivateSetup+0x44>)
 8013e32:	4013      	ands	r3, r2
 8013e34:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	68fa      	ldr	r2, [r7, #12]
 8013e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e4a:	2300      	movs	r3, #0
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3714      	adds	r7, #20
 8013e50:	46bd      	mov	sp, r7
 8013e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e56:	4770      	bx	lr
 8013e58:	fffff800 	.word	0xfffff800

08013e5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b087      	sub	sp, #28
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	460b      	mov	r3, r1
 8013e66:	607a      	str	r2, [r7, #4]
 8013e68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	333c      	adds	r3, #60	; 0x3c
 8013e72:	3304      	adds	r3, #4
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	4a26      	ldr	r2, [pc, #152]	; (8013f14 <USB_EP0_OutStart+0xb8>)
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	d90a      	bls.n	8013e96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e90:	d101      	bne.n	8013e96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013e92:	2300      	movs	r3, #0
 8013e94:	e037      	b.n	8013f06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea8:	691b      	ldr	r3, [r3, #16]
 8013eaa:	697a      	ldr	r2, [r7, #20]
 8013eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ebc:	691b      	ldr	r3, [r3, #16]
 8013ebe:	697a      	ldr	r2, [r7, #20]
 8013ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ec4:	f043 0318 	orr.w	r3, r3, #24
 8013ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed0:	691b      	ldr	r3, [r3, #16]
 8013ed2:	697a      	ldr	r2, [r7, #20]
 8013ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ed8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013edc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013ede:	7afb      	ldrb	r3, [r7, #11]
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	d10f      	bne.n	8013f04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eea:	461a      	mov	r2, r3
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	697a      	ldr	r2, [r7, #20]
 8013efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013efe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	371c      	adds	r7, #28
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr
 8013f12:	bf00      	nop
 8013f14:	4f54300a 	.word	0x4f54300a

08013f18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013f20:	2300      	movs	r3, #0
 8013f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	3301      	adds	r3, #1
 8013f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	4a13      	ldr	r2, [pc, #76]	; (8013f7c <USB_CoreReset+0x64>)
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d901      	bls.n	8013f36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013f32:	2303      	movs	r3, #3
 8013f34:	e01b      	b.n	8013f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	691b      	ldr	r3, [r3, #16]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	daf2      	bge.n	8013f24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	691b      	ldr	r3, [r3, #16]
 8013f46:	f043 0201 	orr.w	r2, r3, #1
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	3301      	adds	r3, #1
 8013f52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	4a09      	ldr	r2, [pc, #36]	; (8013f7c <USB_CoreReset+0x64>)
 8013f58:	4293      	cmp	r3, r2
 8013f5a:	d901      	bls.n	8013f60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013f5c:	2303      	movs	r3, #3
 8013f5e:	e006      	b.n	8013f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	691b      	ldr	r3, [r3, #16]
 8013f64:	f003 0301 	and.w	r3, r3, #1
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	d0f0      	beq.n	8013f4e <USB_CoreReset+0x36>

  return HAL_OK;
 8013f6c:	2300      	movs	r3, #0
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3714      	adds	r7, #20
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	00030d40 	.word	0x00030d40

08013f80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013f84:	4904      	ldr	r1, [pc, #16]	; (8013f98 <MX_FATFS_Init+0x18>)
 8013f86:	4805      	ldr	r0, [pc, #20]	; (8013f9c <MX_FATFS_Init+0x1c>)
 8013f88:	f002 fa56 	bl	8016438 <FATFS_LinkDriver>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	461a      	mov	r2, r3
 8013f90:	4b03      	ldr	r3, [pc, #12]	; (8013fa0 <MX_FATFS_Init+0x20>)
 8013f92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013f94:	bf00      	nop
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	2400149c 	.word	0x2400149c
 8013f9c:	08017a94 	.word	0x08017a94
 8013fa0:	24001498 	.word	0x24001498

08013fa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013faa:	2300      	movs	r3, #0
 8013fac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013fae:	f000 f885 	bl	80140bc <BSP_SD_IsDetected>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d001      	beq.n	8013fbc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013fb8:	2302      	movs	r3, #2
 8013fba:	e012      	b.n	8013fe2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013fbc:	480b      	ldr	r0, [pc, #44]	; (8013fec <BSP_SD_Init+0x48>)
 8013fbe:	f7f8 ff99 	bl	800cef4 <HAL_SD_Init>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013fc6:	79fb      	ldrb	r3, [r7, #7]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d109      	bne.n	8013fe0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013fd0:	4806      	ldr	r0, [pc, #24]	; (8013fec <BSP_SD_Init+0x48>)
 8013fd2:	f7f9 fe4f 	bl	800dc74 <HAL_SD_ConfigWideBusOperation>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d001      	beq.n	8013fe0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013fdc:	2301      	movs	r3, #1
 8013fde:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3708      	adds	r7, #8
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	24000dcc 	.word	0x24000dcc

08013ff0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	68f9      	ldr	r1, [r7, #12]
 8014006:	4806      	ldr	r0, [pc, #24]	; (8014020 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014008:	f7f9 f894 	bl	800d134 <HAL_SD_ReadBlocks_DMA>
 801400c:	4603      	mov	r3, r0
 801400e:	2b00      	cmp	r3, #0
 8014010:	d001      	beq.n	8014016 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014012:	2301      	movs	r3, #1
 8014014:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014016:	7dfb      	ldrb	r3, [r7, #23]
}
 8014018:	4618      	mov	r0, r3
 801401a:	3718      	adds	r7, #24
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	24000dcc 	.word	0x24000dcc

08014024 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b086      	sub	sp, #24
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014030:	2300      	movs	r3, #0
 8014032:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	68ba      	ldr	r2, [r7, #8]
 8014038:	68f9      	ldr	r1, [r7, #12]
 801403a:	4806      	ldr	r0, [pc, #24]	; (8014054 <BSP_SD_WriteBlocks_DMA+0x30>)
 801403c:	f7f9 f922 	bl	800d284 <HAL_SD_WriteBlocks_DMA>
 8014040:	4603      	mov	r3, r0
 8014042:	2b00      	cmp	r3, #0
 8014044:	d001      	beq.n	801404a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014046:	2301      	movs	r3, #1
 8014048:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801404a:	7dfb      	ldrb	r3, [r7, #23]
}
 801404c:	4618      	mov	r0, r3
 801404e:	3718      	adds	r7, #24
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}
 8014054:	24000dcc 	.word	0x24000dcc

08014058 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801405c:	4805      	ldr	r0, [pc, #20]	; (8014074 <BSP_SD_GetCardState+0x1c>)
 801405e:	f7f9 ff1b 	bl	800de98 <HAL_SD_GetCardState>
 8014062:	4603      	mov	r3, r0
 8014064:	2b04      	cmp	r3, #4
 8014066:	bf14      	ite	ne
 8014068:	2301      	movne	r3, #1
 801406a:	2300      	moveq	r3, #0
 801406c:	b2db      	uxtb	r3, r3
}
 801406e:	4618      	mov	r0, r3
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	24000dcc 	.word	0x24000dcc

08014078 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014080:	6879      	ldr	r1, [r7, #4]
 8014082:	4803      	ldr	r0, [pc, #12]	; (8014090 <BSP_SD_GetCardInfo+0x18>)
 8014084:	f7f9 fdca 	bl	800dc1c <HAL_SD_GetCardInfo>
}
 8014088:	bf00      	nop
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	24000dcc 	.word	0x24000dcc

08014094 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801409c:	f000 f9a0 	bl	80143e0 <BSP_SD_WriteCpltCallback>
}
 80140a0:	bf00      	nop
 80140a2:	3708      	adds	r7, #8
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}

080140a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b082      	sub	sp, #8
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80140b0:	f000 f9a2 	bl	80143f8 <BSP_SD_ReadCpltCallback>
}
 80140b4:	bf00      	nop
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80140c2:	2301      	movs	r3, #1
 80140c4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80140c6:	f000 f80b 	bl	80140e0 <BSP_PlatformIsDetected>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d101      	bne.n	80140d4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80140d0:	2300      	movs	r3, #0
 80140d2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80140d4:	79fb      	ldrb	r3, [r7, #7]
 80140d6:	b2db      	uxtb	r3, r3
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80140e6:	2301      	movs	r3, #1
 80140e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80140ea:	2104      	movs	r1, #4
 80140ec:	4806      	ldr	r0, [pc, #24]	; (8014108 <BSP_PlatformIsDetected+0x28>)
 80140ee:	f7f3 feef 	bl	8007ed0 <HAL_GPIO_ReadPin>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d001      	beq.n	80140fc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80140f8:	2300      	movs	r3, #0
 80140fa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80140fc:	79fb      	ldrb	r3, [r7, #7]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3708      	adds	r7, #8
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	58020400 	.word	0x58020400

0801410c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014114:	f7ef fc34 	bl	8003980 <HAL_GetTick>
 8014118:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801411a:	e006      	b.n	801412a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801411c:	f7ff ff9c 	bl	8014058 <BSP_SD_GetCardState>
 8014120:	4603      	mov	r3, r0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d101      	bne.n	801412a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014126:	2300      	movs	r3, #0
 8014128:	e009      	b.n	801413e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801412a:	f7ef fc29 	bl	8003980 <HAL_GetTick>
 801412e:	4602      	mov	r2, r0
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	429a      	cmp	r2, r3
 8014138:	d8f0      	bhi.n	801411c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801413a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801413e:	4618      	mov	r0, r3
 8014140:	3710      	adds	r7, #16
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
	...

08014148 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	4603      	mov	r3, r0
 8014150:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014152:	4b0b      	ldr	r3, [pc, #44]	; (8014180 <SD_CheckStatus+0x38>)
 8014154:	2201      	movs	r2, #1
 8014156:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014158:	f7ff ff7e 	bl	8014058 <BSP_SD_GetCardState>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d107      	bne.n	8014172 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014162:	4b07      	ldr	r3, [pc, #28]	; (8014180 <SD_CheckStatus+0x38>)
 8014164:	781b      	ldrb	r3, [r3, #0]
 8014166:	b2db      	uxtb	r3, r3
 8014168:	f023 0301 	bic.w	r3, r3, #1
 801416c:	b2da      	uxtb	r2, r3
 801416e:	4b04      	ldr	r3, [pc, #16]	; (8014180 <SD_CheckStatus+0x38>)
 8014170:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014172:	4b03      	ldr	r3, [pc, #12]	; (8014180 <SD_CheckStatus+0x38>)
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	b2db      	uxtb	r3, r3
}
 8014178:	4618      	mov	r0, r3
 801417a:	3708      	adds	r7, #8
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	2400000d 	.word	0x2400000d

08014184 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	4603      	mov	r3, r0
 801418c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801418e:	f7ff ff09 	bl	8013fa4 <BSP_SD_Init>
 8014192:	4603      	mov	r3, r0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d107      	bne.n	80141a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014198:	79fb      	ldrb	r3, [r7, #7]
 801419a:	4618      	mov	r0, r3
 801419c:	f7ff ffd4 	bl	8014148 <SD_CheckStatus>
 80141a0:	4603      	mov	r3, r0
 80141a2:	461a      	mov	r2, r3
 80141a4:	4b04      	ldr	r3, [pc, #16]	; (80141b8 <SD_initialize+0x34>)
 80141a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80141a8:	4b03      	ldr	r3, [pc, #12]	; (80141b8 <SD_initialize+0x34>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	b2db      	uxtb	r3, r3
}
 80141ae:	4618      	mov	r0, r3
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}
 80141b6:	bf00      	nop
 80141b8:	2400000d 	.word	0x2400000d

080141bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	4603      	mov	r3, r0
 80141c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80141c6:	79fb      	ldrb	r3, [r7, #7]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7ff ffbd 	bl	8014148 <SD_CheckStatus>
 80141ce:	4603      	mov	r3, r0
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b086      	sub	sp, #24
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60b9      	str	r1, [r7, #8]
 80141e0:	607a      	str	r2, [r7, #4]
 80141e2:	603b      	str	r3, [r7, #0]
 80141e4:	4603      	mov	r3, r0
 80141e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80141e8:	2301      	movs	r3, #1
 80141ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80141ec:	f247 5030 	movw	r0, #30000	; 0x7530
 80141f0:	f7ff ff8c 	bl	801410c <SD_CheckStatusWithTimeout>
 80141f4:	4603      	mov	r3, r0
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	da01      	bge.n	80141fe <SD_read+0x26>
  {
    return res;
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
 80141fc:	e03b      	b.n	8014276 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80141fe:	683a      	ldr	r2, [r7, #0]
 8014200:	6879      	ldr	r1, [r7, #4]
 8014202:	68b8      	ldr	r0, [r7, #8]
 8014204:	f7ff fef4 	bl	8013ff0 <BSP_SD_ReadBlocks_DMA>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	d132      	bne.n	8014274 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801420e:	4b1c      	ldr	r3, [pc, #112]	; (8014280 <SD_read+0xa8>)
 8014210:	2200      	movs	r2, #0
 8014212:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014214:	f7ef fbb4 	bl	8003980 <HAL_GetTick>
 8014218:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801421a:	bf00      	nop
 801421c:	4b18      	ldr	r3, [pc, #96]	; (8014280 <SD_read+0xa8>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d108      	bne.n	8014236 <SD_read+0x5e>
 8014224:	f7ef fbac 	bl	8003980 <HAL_GetTick>
 8014228:	4602      	mov	r2, r0
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	1ad3      	subs	r3, r2, r3
 801422e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014232:	4293      	cmp	r3, r2
 8014234:	d9f2      	bls.n	801421c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014236:	4b12      	ldr	r3, [pc, #72]	; (8014280 <SD_read+0xa8>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d102      	bne.n	8014244 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801423e:	2301      	movs	r3, #1
 8014240:	75fb      	strb	r3, [r7, #23]
 8014242:	e017      	b.n	8014274 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014244:	4b0e      	ldr	r3, [pc, #56]	; (8014280 <SD_read+0xa8>)
 8014246:	2200      	movs	r2, #0
 8014248:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801424a:	f7ef fb99 	bl	8003980 <HAL_GetTick>
 801424e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014250:	e007      	b.n	8014262 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014252:	f7ff ff01 	bl	8014058 <BSP_SD_GetCardState>
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d102      	bne.n	8014262 <SD_read+0x8a>
          {
            res = RES_OK;
 801425c:	2300      	movs	r3, #0
 801425e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014260:	e008      	b.n	8014274 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014262:	f7ef fb8d 	bl	8003980 <HAL_GetTick>
 8014266:	4602      	mov	r2, r0
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	1ad3      	subs	r3, r2, r3
 801426c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014270:	4293      	cmp	r3, r2
 8014272:	d9ee      	bls.n	8014252 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014274:	7dfb      	ldrb	r3, [r7, #23]
}
 8014276:	4618      	mov	r0, r3
 8014278:	3718      	adds	r7, #24
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	240014a4 	.word	0x240014a4

08014284 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b086      	sub	sp, #24
 8014288:	af00      	add	r7, sp, #0
 801428a:	60b9      	str	r1, [r7, #8]
 801428c:	607a      	str	r2, [r7, #4]
 801428e:	603b      	str	r3, [r7, #0]
 8014290:	4603      	mov	r3, r0
 8014292:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014294:	2301      	movs	r3, #1
 8014296:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014298:	4b24      	ldr	r3, [pc, #144]	; (801432c <SD_write+0xa8>)
 801429a:	2200      	movs	r2, #0
 801429c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801429e:	f247 5030 	movw	r0, #30000	; 0x7530
 80142a2:	f7ff ff33 	bl	801410c <SD_CheckStatusWithTimeout>
 80142a6:	4603      	mov	r3, r0
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	da01      	bge.n	80142b0 <SD_write+0x2c>
  {
    return res;
 80142ac:	7dfb      	ldrb	r3, [r7, #23]
 80142ae:	e038      	b.n	8014322 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80142b0:	683a      	ldr	r2, [r7, #0]
 80142b2:	6879      	ldr	r1, [r7, #4]
 80142b4:	68b8      	ldr	r0, [r7, #8]
 80142b6:	f7ff feb5 	bl	8014024 <BSP_SD_WriteBlocks_DMA>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d12f      	bne.n	8014320 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80142c0:	f7ef fb5e 	bl	8003980 <HAL_GetTick>
 80142c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80142c6:	bf00      	nop
 80142c8:	4b18      	ldr	r3, [pc, #96]	; (801432c <SD_write+0xa8>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d108      	bne.n	80142e2 <SD_write+0x5e>
 80142d0:	f7ef fb56 	bl	8003980 <HAL_GetTick>
 80142d4:	4602      	mov	r2, r0
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	1ad3      	subs	r3, r2, r3
 80142da:	f247 522f 	movw	r2, #29999	; 0x752f
 80142de:	4293      	cmp	r3, r2
 80142e0:	d9f2      	bls.n	80142c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80142e2:	4b12      	ldr	r3, [pc, #72]	; (801432c <SD_write+0xa8>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d102      	bne.n	80142f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80142ea:	2301      	movs	r3, #1
 80142ec:	75fb      	strb	r3, [r7, #23]
 80142ee:	e017      	b.n	8014320 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80142f0:	4b0e      	ldr	r3, [pc, #56]	; (801432c <SD_write+0xa8>)
 80142f2:	2200      	movs	r2, #0
 80142f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80142f6:	f7ef fb43 	bl	8003980 <HAL_GetTick>
 80142fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80142fc:	e007      	b.n	801430e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80142fe:	f7ff feab 	bl	8014058 <BSP_SD_GetCardState>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d102      	bne.n	801430e <SD_write+0x8a>
          {
            res = RES_OK;
 8014308:	2300      	movs	r3, #0
 801430a:	75fb      	strb	r3, [r7, #23]
            break;
 801430c:	e008      	b.n	8014320 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801430e:	f7ef fb37 	bl	8003980 <HAL_GetTick>
 8014312:	4602      	mov	r2, r0
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	f247 522f 	movw	r2, #29999	; 0x752f
 801431c:	4293      	cmp	r3, r2
 801431e:	d9ee      	bls.n	80142fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014320:	7dfb      	ldrb	r3, [r7, #23]
}
 8014322:	4618      	mov	r0, r3
 8014324:	3718      	adds	r7, #24
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	240014a0 	.word	0x240014a0

08014330 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08c      	sub	sp, #48	; 0x30
 8014334:	af00      	add	r7, sp, #0
 8014336:	4603      	mov	r3, r0
 8014338:	603a      	str	r2, [r7, #0]
 801433a:	71fb      	strb	r3, [r7, #7]
 801433c:	460b      	mov	r3, r1
 801433e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014340:	2301      	movs	r3, #1
 8014342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014346:	4b25      	ldr	r3, [pc, #148]	; (80143dc <SD_ioctl+0xac>)
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	b2db      	uxtb	r3, r3
 801434c:	f003 0301 	and.w	r3, r3, #1
 8014350:	2b00      	cmp	r3, #0
 8014352:	d001      	beq.n	8014358 <SD_ioctl+0x28>
 8014354:	2303      	movs	r3, #3
 8014356:	e03c      	b.n	80143d2 <SD_ioctl+0xa2>

  switch (cmd)
 8014358:	79bb      	ldrb	r3, [r7, #6]
 801435a:	2b03      	cmp	r3, #3
 801435c:	d834      	bhi.n	80143c8 <SD_ioctl+0x98>
 801435e:	a201      	add	r2, pc, #4	; (adr r2, 8014364 <SD_ioctl+0x34>)
 8014360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014364:	08014375 	.word	0x08014375
 8014368:	0801437d 	.word	0x0801437d
 801436c:	08014395 	.word	0x08014395
 8014370:	080143af 	.word	0x080143af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014374:	2300      	movs	r3, #0
 8014376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801437a:	e028      	b.n	80143ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801437c:	f107 0308 	add.w	r3, r7, #8
 8014380:	4618      	mov	r0, r3
 8014382:	f7ff fe79 	bl	8014078 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014386:	6a3a      	ldr	r2, [r7, #32]
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801438c:	2300      	movs	r3, #0
 801438e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014392:	e01c      	b.n	80143ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014394:	f107 0308 	add.w	r3, r7, #8
 8014398:	4618      	mov	r0, r3
 801439a:	f7ff fe6d 	bl	8014078 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80143a6:	2300      	movs	r3, #0
 80143a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143ac:	e00f      	b.n	80143ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80143ae:	f107 0308 	add.w	r3, r7, #8
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7ff fe60 	bl	8014078 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80143b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ba:	0a5a      	lsrs	r2, r3, #9
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80143c0:	2300      	movs	r3, #0
 80143c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143c6:	e002      	b.n	80143ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80143c8:	2304      	movs	r3, #4
 80143ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80143ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3730      	adds	r7, #48	; 0x30
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	2400000d 	.word	0x2400000d

080143e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80143e0:	b480      	push	{r7}
 80143e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80143e4:	4b03      	ldr	r3, [pc, #12]	; (80143f4 <BSP_SD_WriteCpltCallback+0x14>)
 80143e6:	2201      	movs	r2, #1
 80143e8:	601a      	str	r2, [r3, #0]
}
 80143ea:	bf00      	nop
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr
 80143f4:	240014a0 	.word	0x240014a0

080143f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80143f8:	b480      	push	{r7}
 80143fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80143fc:	4b03      	ldr	r3, [pc, #12]	; (801440c <BSP_SD_ReadCpltCallback+0x14>)
 80143fe:	2201      	movs	r2, #1
 8014400:	601a      	str	r2, [r3, #0]
}
 8014402:	bf00      	nop
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr
 801440c:	240014a4 	.word	0x240014a4

08014410 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
 8014418:	460b      	mov	r3, r1
 801441a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801441c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014420:	f002 fcea 	bl	8016df8 <USBD_static_malloc>
 8014424:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d109      	bne.n	8014440 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	32b0      	adds	r2, #176	; 0xb0
 8014436:	2100      	movs	r1, #0
 8014438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801443c:	2302      	movs	r3, #2
 801443e:	e0d4      	b.n	80145ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014440:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014444:	2100      	movs	r1, #0
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	f002 fd52 	bl	8016ef0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	32b0      	adds	r2, #176	; 0xb0
 8014456:	68f9      	ldr	r1, [r7, #12]
 8014458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	32b0      	adds	r2, #176	; 0xb0
 8014466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	7c1b      	ldrb	r3, [r3, #16]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d138      	bne.n	80144ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014478:	4b5e      	ldr	r3, [pc, #376]	; (80145f4 <USBD_CDC_Init+0x1e4>)
 801447a:	7819      	ldrb	r1, [r3, #0]
 801447c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014480:	2202      	movs	r2, #2
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f002 fb95 	bl	8016bb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014488:	4b5a      	ldr	r3, [pc, #360]	; (80145f4 <USBD_CDC_Init+0x1e4>)
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	f003 020f 	and.w	r2, r3, #15
 8014490:	6879      	ldr	r1, [r7, #4]
 8014492:	4613      	mov	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4413      	add	r3, r2
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	440b      	add	r3, r1
 801449c:	3324      	adds	r3, #36	; 0x24
 801449e:	2201      	movs	r2, #1
 80144a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80144a2:	4b55      	ldr	r3, [pc, #340]	; (80145f8 <USBD_CDC_Init+0x1e8>)
 80144a4:	7819      	ldrb	r1, [r3, #0]
 80144a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144aa:	2202      	movs	r2, #2
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f002 fb80 	bl	8016bb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80144b2:	4b51      	ldr	r3, [pc, #324]	; (80145f8 <USBD_CDC_Init+0x1e8>)
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 020f 	and.w	r2, r3, #15
 80144ba:	6879      	ldr	r1, [r7, #4]
 80144bc:	4613      	mov	r3, r2
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	440b      	add	r3, r1
 80144c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80144ca:	2201      	movs	r2, #1
 80144cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80144ce:	4b4b      	ldr	r3, [pc, #300]	; (80145fc <USBD_CDC_Init+0x1ec>)
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	f003 020f 	and.w	r2, r3, #15
 80144d6:	6879      	ldr	r1, [r7, #4]
 80144d8:	4613      	mov	r3, r2
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	4413      	add	r3, r2
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	440b      	add	r3, r1
 80144e2:	3326      	adds	r3, #38	; 0x26
 80144e4:	2210      	movs	r2, #16
 80144e6:	801a      	strh	r2, [r3, #0]
 80144e8:	e035      	b.n	8014556 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80144ea:	4b42      	ldr	r3, [pc, #264]	; (80145f4 <USBD_CDC_Init+0x1e4>)
 80144ec:	7819      	ldrb	r1, [r3, #0]
 80144ee:	2340      	movs	r3, #64	; 0x40
 80144f0:	2202      	movs	r2, #2
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f002 fb5d 	bl	8016bb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80144f8:	4b3e      	ldr	r3, [pc, #248]	; (80145f4 <USBD_CDC_Init+0x1e4>)
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	f003 020f 	and.w	r2, r3, #15
 8014500:	6879      	ldr	r1, [r7, #4]
 8014502:	4613      	mov	r3, r2
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	4413      	add	r3, r2
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	440b      	add	r3, r1
 801450c:	3324      	adds	r3, #36	; 0x24
 801450e:	2201      	movs	r2, #1
 8014510:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014512:	4b39      	ldr	r3, [pc, #228]	; (80145f8 <USBD_CDC_Init+0x1e8>)
 8014514:	7819      	ldrb	r1, [r3, #0]
 8014516:	2340      	movs	r3, #64	; 0x40
 8014518:	2202      	movs	r2, #2
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f002 fb49 	bl	8016bb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014520:	4b35      	ldr	r3, [pc, #212]	; (80145f8 <USBD_CDC_Init+0x1e8>)
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	f003 020f 	and.w	r2, r3, #15
 8014528:	6879      	ldr	r1, [r7, #4]
 801452a:	4613      	mov	r3, r2
 801452c:	009b      	lsls	r3, r3, #2
 801452e:	4413      	add	r3, r2
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	440b      	add	r3, r1
 8014534:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014538:	2201      	movs	r2, #1
 801453a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801453c:	4b2f      	ldr	r3, [pc, #188]	; (80145fc <USBD_CDC_Init+0x1ec>)
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	f003 020f 	and.w	r2, r3, #15
 8014544:	6879      	ldr	r1, [r7, #4]
 8014546:	4613      	mov	r3, r2
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	4413      	add	r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	440b      	add	r3, r1
 8014550:	3326      	adds	r3, #38	; 0x26
 8014552:	2210      	movs	r2, #16
 8014554:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014556:	4b29      	ldr	r3, [pc, #164]	; (80145fc <USBD_CDC_Init+0x1ec>)
 8014558:	7819      	ldrb	r1, [r3, #0]
 801455a:	2308      	movs	r3, #8
 801455c:	2203      	movs	r2, #3
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f002 fb27 	bl	8016bb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014564:	4b25      	ldr	r3, [pc, #148]	; (80145fc <USBD_CDC_Init+0x1ec>)
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	f003 020f 	and.w	r2, r3, #15
 801456c:	6879      	ldr	r1, [r7, #4]
 801456e:	4613      	mov	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	4413      	add	r3, r2
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	440b      	add	r3, r1
 8014578:	3324      	adds	r3, #36	; 0x24
 801457a:	2201      	movs	r2, #1
 801457c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2200      	movs	r2, #0
 8014582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	33b0      	adds	r3, #176	; 0xb0
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	4413      	add	r3, r2
 8014594:	685b      	ldr	r3, [r3, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2200      	movs	r2, #0
 801459e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d101      	bne.n	80145b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80145b4:	2302      	movs	r3, #2
 80145b6:	e018      	b.n	80145ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	7c1b      	ldrb	r3, [r3, #16]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10a      	bne.n	80145d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80145c0:	4b0d      	ldr	r3, [pc, #52]	; (80145f8 <USBD_CDC_Init+0x1e8>)
 80145c2:	7819      	ldrb	r1, [r3, #0]
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80145ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f002 fbde 	bl	8016d90 <USBD_LL_PrepareReceive>
 80145d4:	e008      	b.n	80145e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80145d6:	4b08      	ldr	r3, [pc, #32]	; (80145f8 <USBD_CDC_Init+0x1e8>)
 80145d8:	7819      	ldrb	r1, [r3, #0]
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80145e0:	2340      	movs	r3, #64	; 0x40
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f002 fbd4 	bl	8016d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
 80145f2:	bf00      	nop
 80145f4:	24000097 	.word	0x24000097
 80145f8:	24000098 	.word	0x24000098
 80145fc:	24000099 	.word	0x24000099

08014600 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	460b      	mov	r3, r1
 801460a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801460c:	4b3a      	ldr	r3, [pc, #232]	; (80146f8 <USBD_CDC_DeInit+0xf8>)
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	4619      	mov	r1, r3
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f002 faf3 	bl	8016bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014618:	4b37      	ldr	r3, [pc, #220]	; (80146f8 <USBD_CDC_DeInit+0xf8>)
 801461a:	781b      	ldrb	r3, [r3, #0]
 801461c:	f003 020f 	and.w	r2, r3, #15
 8014620:	6879      	ldr	r1, [r7, #4]
 8014622:	4613      	mov	r3, r2
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	4413      	add	r3, r2
 8014628:	009b      	lsls	r3, r3, #2
 801462a:	440b      	add	r3, r1
 801462c:	3324      	adds	r3, #36	; 0x24
 801462e:	2200      	movs	r2, #0
 8014630:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014632:	4b32      	ldr	r3, [pc, #200]	; (80146fc <USBD_CDC_DeInit+0xfc>)
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	4619      	mov	r1, r3
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f002 fae0 	bl	8016bfe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801463e:	4b2f      	ldr	r3, [pc, #188]	; (80146fc <USBD_CDC_DeInit+0xfc>)
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	f003 020f 	and.w	r2, r3, #15
 8014646:	6879      	ldr	r1, [r7, #4]
 8014648:	4613      	mov	r3, r2
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4413      	add	r3, r2
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	440b      	add	r3, r1
 8014652:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014656:	2200      	movs	r2, #0
 8014658:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801465a:	4b29      	ldr	r3, [pc, #164]	; (8014700 <USBD_CDC_DeInit+0x100>)
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	4619      	mov	r1, r3
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f002 facc 	bl	8016bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014666:	4b26      	ldr	r3, [pc, #152]	; (8014700 <USBD_CDC_DeInit+0x100>)
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	f003 020f 	and.w	r2, r3, #15
 801466e:	6879      	ldr	r1, [r7, #4]
 8014670:	4613      	mov	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	440b      	add	r3, r1
 801467a:	3324      	adds	r3, #36	; 0x24
 801467c:	2200      	movs	r2, #0
 801467e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014680:	4b1f      	ldr	r3, [pc, #124]	; (8014700 <USBD_CDC_DeInit+0x100>)
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	f003 020f 	and.w	r2, r3, #15
 8014688:	6879      	ldr	r1, [r7, #4]
 801468a:	4613      	mov	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	4413      	add	r3, r2
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	440b      	add	r3, r1
 8014694:	3326      	adds	r3, #38	; 0x26
 8014696:	2200      	movs	r2, #0
 8014698:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	32b0      	adds	r2, #176	; 0xb0
 80146a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d01f      	beq.n	80146ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	33b0      	adds	r3, #176	; 0xb0
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	4413      	add	r3, r2
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	32b0      	adds	r2, #176	; 0xb0
 80146ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ce:	4618      	mov	r0, r3
 80146d0:	f002 fba0 	bl	8016e14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	32b0      	adds	r2, #176	; 0xb0
 80146de:	2100      	movs	r1, #0
 80146e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2200      	movs	r2, #0
 80146e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80146ec:	2300      	movs	r3, #0
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3708      	adds	r7, #8
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	24000097 	.word	0x24000097
 80146fc:	24000098 	.word	0x24000098
 8014700:	24000099 	.word	0x24000099

08014704 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b086      	sub	sp, #24
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	32b0      	adds	r2, #176	; 0xb0
 8014718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801471e:	2300      	movs	r3, #0
 8014720:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014722:	2300      	movs	r3, #0
 8014724:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014726:	2300      	movs	r3, #0
 8014728:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d101      	bne.n	8014734 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014730:	2303      	movs	r3, #3
 8014732:	e0bf      	b.n	80148b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801473c:	2b00      	cmp	r3, #0
 801473e:	d050      	beq.n	80147e2 <USBD_CDC_Setup+0xde>
 8014740:	2b20      	cmp	r3, #32
 8014742:	f040 80af 	bne.w	80148a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	88db      	ldrh	r3, [r3, #6]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d03a      	beq.n	80147c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	b25b      	sxtb	r3, r3
 8014754:	2b00      	cmp	r3, #0
 8014756:	da1b      	bge.n	8014790 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	33b0      	adds	r3, #176	; 0xb0
 8014762:	009b      	lsls	r3, r3, #2
 8014764:	4413      	add	r3, r2
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	683a      	ldr	r2, [r7, #0]
 801476c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801476e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014770:	683a      	ldr	r2, [r7, #0]
 8014772:	88d2      	ldrh	r2, [r2, #6]
 8014774:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	88db      	ldrh	r3, [r3, #6]
 801477a:	2b07      	cmp	r3, #7
 801477c:	bf28      	it	cs
 801477e:	2307      	movcs	r3, #7
 8014780:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	89fa      	ldrh	r2, [r7, #14]
 8014786:	4619      	mov	r1, r3
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f001 fd89 	bl	80162a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801478e:	e090      	b.n	80148b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	785a      	ldrb	r2, [r3, #1]
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	88db      	ldrh	r3, [r3, #6]
 801479e:	2b3f      	cmp	r3, #63	; 0x3f
 80147a0:	d803      	bhi.n	80147aa <USBD_CDC_Setup+0xa6>
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	88db      	ldrh	r3, [r3, #6]
 80147a6:	b2da      	uxtb	r2, r3
 80147a8:	e000      	b.n	80147ac <USBD_CDC_Setup+0xa8>
 80147aa:	2240      	movs	r2, #64	; 0x40
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80147b2:	6939      	ldr	r1, [r7, #16]
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80147ba:	461a      	mov	r2, r3
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f001 fd9b 	bl	80162f8 <USBD_CtlPrepareRx>
      break;
 80147c2:	e076      	b.n	80148b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	33b0      	adds	r3, #176	; 0xb0
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4413      	add	r3, r2
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	683a      	ldr	r2, [r7, #0]
 80147d8:	7850      	ldrb	r0, [r2, #1]
 80147da:	2200      	movs	r2, #0
 80147dc:	6839      	ldr	r1, [r7, #0]
 80147de:	4798      	blx	r3
      break;
 80147e0:	e067      	b.n	80148b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	785b      	ldrb	r3, [r3, #1]
 80147e6:	2b0b      	cmp	r3, #11
 80147e8:	d851      	bhi.n	801488e <USBD_CDC_Setup+0x18a>
 80147ea:	a201      	add	r2, pc, #4	; (adr r2, 80147f0 <USBD_CDC_Setup+0xec>)
 80147ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f0:	08014821 	.word	0x08014821
 80147f4:	0801489d 	.word	0x0801489d
 80147f8:	0801488f 	.word	0x0801488f
 80147fc:	0801488f 	.word	0x0801488f
 8014800:	0801488f 	.word	0x0801488f
 8014804:	0801488f 	.word	0x0801488f
 8014808:	0801488f 	.word	0x0801488f
 801480c:	0801488f 	.word	0x0801488f
 8014810:	0801488f 	.word	0x0801488f
 8014814:	0801488f 	.word	0x0801488f
 8014818:	0801484b 	.word	0x0801484b
 801481c:	08014875 	.word	0x08014875
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014826:	b2db      	uxtb	r3, r3
 8014828:	2b03      	cmp	r3, #3
 801482a:	d107      	bne.n	801483c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801482c:	f107 030a 	add.w	r3, r7, #10
 8014830:	2202      	movs	r2, #2
 8014832:	4619      	mov	r1, r3
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f001 fd33 	bl	80162a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801483a:	e032      	b.n	80148a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801483c:	6839      	ldr	r1, [r7, #0]
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f001 fcbd 	bl	80161be <USBD_CtlError>
            ret = USBD_FAIL;
 8014844:	2303      	movs	r3, #3
 8014846:	75fb      	strb	r3, [r7, #23]
          break;
 8014848:	e02b      	b.n	80148a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014850:	b2db      	uxtb	r3, r3
 8014852:	2b03      	cmp	r3, #3
 8014854:	d107      	bne.n	8014866 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014856:	f107 030d 	add.w	r3, r7, #13
 801485a:	2201      	movs	r2, #1
 801485c:	4619      	mov	r1, r3
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f001 fd1e 	bl	80162a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014864:	e01d      	b.n	80148a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014866:	6839      	ldr	r1, [r7, #0]
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f001 fca8 	bl	80161be <USBD_CtlError>
            ret = USBD_FAIL;
 801486e:	2303      	movs	r3, #3
 8014870:	75fb      	strb	r3, [r7, #23]
          break;
 8014872:	e016      	b.n	80148a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801487a:	b2db      	uxtb	r3, r3
 801487c:	2b03      	cmp	r3, #3
 801487e:	d00f      	beq.n	80148a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014880:	6839      	ldr	r1, [r7, #0]
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f001 fc9b 	bl	80161be <USBD_CtlError>
            ret = USBD_FAIL;
 8014888:	2303      	movs	r3, #3
 801488a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801488c:	e008      	b.n	80148a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801488e:	6839      	ldr	r1, [r7, #0]
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f001 fc94 	bl	80161be <USBD_CtlError>
          ret = USBD_FAIL;
 8014896:	2303      	movs	r3, #3
 8014898:	75fb      	strb	r3, [r7, #23]
          break;
 801489a:	e002      	b.n	80148a2 <USBD_CDC_Setup+0x19e>
          break;
 801489c:	bf00      	nop
 801489e:	e008      	b.n	80148b2 <USBD_CDC_Setup+0x1ae>
          break;
 80148a0:	bf00      	nop
      }
      break;
 80148a2:	e006      	b.n	80148b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80148a4:	6839      	ldr	r1, [r7, #0]
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f001 fc89 	bl	80161be <USBD_CtlError>
      ret = USBD_FAIL;
 80148ac:	2303      	movs	r3, #3
 80148ae:	75fb      	strb	r3, [r7, #23]
      break;
 80148b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80148b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80148b4:	4618      	mov	r0, r3
 80148b6:	3718      	adds	r7, #24
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b084      	sub	sp, #16
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	460b      	mov	r3, r1
 80148c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80148ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	32b0      	adds	r2, #176	; 0xb0
 80148da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d101      	bne.n	80148e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80148e2:	2303      	movs	r3, #3
 80148e4:	e065      	b.n	80149b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	32b0      	adds	r2, #176	; 0xb0
 80148f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80148f6:	78fb      	ldrb	r3, [r7, #3]
 80148f8:	f003 020f 	and.w	r2, r3, #15
 80148fc:	6879      	ldr	r1, [r7, #4]
 80148fe:	4613      	mov	r3, r2
 8014900:	009b      	lsls	r3, r3, #2
 8014902:	4413      	add	r3, r2
 8014904:	009b      	lsls	r3, r3, #2
 8014906:	440b      	add	r3, r1
 8014908:	3318      	adds	r3, #24
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d02f      	beq.n	8014970 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014910:	78fb      	ldrb	r3, [r7, #3]
 8014912:	f003 020f 	and.w	r2, r3, #15
 8014916:	6879      	ldr	r1, [r7, #4]
 8014918:	4613      	mov	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	4413      	add	r3, r2
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	440b      	add	r3, r1
 8014922:	3318      	adds	r3, #24
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	78fb      	ldrb	r3, [r7, #3]
 8014928:	f003 010f 	and.w	r1, r3, #15
 801492c:	68f8      	ldr	r0, [r7, #12]
 801492e:	460b      	mov	r3, r1
 8014930:	00db      	lsls	r3, r3, #3
 8014932:	440b      	add	r3, r1
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	4403      	add	r3, r0
 8014938:	3344      	adds	r3, #68	; 0x44
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014940:	fb01 f303 	mul.w	r3, r1, r3
 8014944:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014946:	2b00      	cmp	r3, #0
 8014948:	d112      	bne.n	8014970 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801494a:	78fb      	ldrb	r3, [r7, #3]
 801494c:	f003 020f 	and.w	r2, r3, #15
 8014950:	6879      	ldr	r1, [r7, #4]
 8014952:	4613      	mov	r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	4413      	add	r3, r2
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	440b      	add	r3, r1
 801495c:	3318      	adds	r3, #24
 801495e:	2200      	movs	r2, #0
 8014960:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014962:	78f9      	ldrb	r1, [r7, #3]
 8014964:	2300      	movs	r3, #0
 8014966:	2200      	movs	r2, #0
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f002 f9f0 	bl	8016d4e <USBD_LL_Transmit>
 801496e:	e01f      	b.n	80149b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	2200      	movs	r2, #0
 8014974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801497e:	687a      	ldr	r2, [r7, #4]
 8014980:	33b0      	adds	r3, #176	; 0xb0
 8014982:	009b      	lsls	r3, r3, #2
 8014984:	4413      	add	r3, r2
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	691b      	ldr	r3, [r3, #16]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d010      	beq.n	80149b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014994:	687a      	ldr	r2, [r7, #4]
 8014996:	33b0      	adds	r3, #176	; 0xb0
 8014998:	009b      	lsls	r3, r3, #2
 801499a:	4413      	add	r3, r2
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	691b      	ldr	r3, [r3, #16]
 80149a0:	68ba      	ldr	r2, [r7, #8]
 80149a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80149a6:	68ba      	ldr	r2, [r7, #8]
 80149a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80149ac:	78fa      	ldrb	r2, [r7, #3]
 80149ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80149b0:	2300      	movs	r3, #0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3710      	adds	r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}

080149ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149ba:	b580      	push	{r7, lr}
 80149bc:	b084      	sub	sp, #16
 80149be:	af00      	add	r7, sp, #0
 80149c0:	6078      	str	r0, [r7, #4]
 80149c2:	460b      	mov	r3, r1
 80149c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	32b0      	adds	r2, #176	; 0xb0
 80149d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	32b0      	adds	r2, #176	; 0xb0
 80149e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d101      	bne.n	80149ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80149e8:	2303      	movs	r3, #3
 80149ea:	e01a      	b.n	8014a22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80149ec:	78fb      	ldrb	r3, [r7, #3]
 80149ee:	4619      	mov	r1, r3
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f002 f9ee 	bl	8016dd2 <USBD_LL_GetRxDataSize>
 80149f6:	4602      	mov	r2, r0
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	33b0      	adds	r3, #176	; 0xb0
 8014a08:	009b      	lsls	r3, r3, #2
 8014a0a:	4413      	add	r3, r2
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	68db      	ldr	r3, [r3, #12]
 8014a10:	68fa      	ldr	r2, [r7, #12]
 8014a12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014a1c:	4611      	mov	r1, r2
 8014a1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014a20:	2300      	movs	r3, #0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3710      	adds	r7, #16
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}

08014a2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014a2a:	b580      	push	{r7, lr}
 8014a2c:	b084      	sub	sp, #16
 8014a2e:	af00      	add	r7, sp, #0
 8014a30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	32b0      	adds	r2, #176	; 0xb0
 8014a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d101      	bne.n	8014a4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014a48:	2303      	movs	r3, #3
 8014a4a:	e025      	b.n	8014a98 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	33b0      	adds	r3, #176	; 0xb0
 8014a56:	009b      	lsls	r3, r3, #2
 8014a58:	4413      	add	r3, r2
 8014a5a:	685b      	ldr	r3, [r3, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d01a      	beq.n	8014a96 <USBD_CDC_EP0_RxReady+0x6c>
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014a66:	2bff      	cmp	r3, #255	; 0xff
 8014a68:	d015      	beq.n	8014a96 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	33b0      	adds	r3, #176	; 0xb0
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	4413      	add	r3, r2
 8014a78:	685b      	ldr	r3, [r3, #4]
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	68fa      	ldr	r2, [r7, #12]
 8014a7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014a82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014a84:	68fa      	ldr	r2, [r7, #12]
 8014a86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a8a:	b292      	uxth	r2, r2
 8014a8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	22ff      	movs	r2, #255	; 0xff
 8014a92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014a96:	2300      	movs	r3, #0
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	3710      	adds	r7, #16
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}

08014aa0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b086      	sub	sp, #24
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014aa8:	2182      	movs	r1, #130	; 0x82
 8014aaa:	4818      	ldr	r0, [pc, #96]	; (8014b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014aac:	f000 fd4f 	bl	801554e <USBD_GetEpDesc>
 8014ab0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ab2:	2101      	movs	r1, #1
 8014ab4:	4815      	ldr	r0, [pc, #84]	; (8014b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ab6:	f000 fd4a 	bl	801554e <USBD_GetEpDesc>
 8014aba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014abc:	2181      	movs	r1, #129	; 0x81
 8014abe:	4813      	ldr	r0, [pc, #76]	; (8014b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ac0:	f000 fd45 	bl	801554e <USBD_GetEpDesc>
 8014ac4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d002      	beq.n	8014ad2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	2210      	movs	r2, #16
 8014ad0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014ad2:	693b      	ldr	r3, [r7, #16]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d006      	beq.n	8014ae6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	2200      	movs	r2, #0
 8014adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ae0:	711a      	strb	r2, [r3, #4]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d006      	beq.n	8014afa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	2200      	movs	r2, #0
 8014af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014af4:	711a      	strb	r2, [r3, #4]
 8014af6:	2200      	movs	r2, #0
 8014af8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2243      	movs	r2, #67	; 0x43
 8014afe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b00:	4b02      	ldr	r3, [pc, #8]	; (8014b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3718      	adds	r7, #24
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	24000054 	.word	0x24000054

08014b10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b18:	2182      	movs	r1, #130	; 0x82
 8014b1a:	4818      	ldr	r0, [pc, #96]	; (8014b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b1c:	f000 fd17 	bl	801554e <USBD_GetEpDesc>
 8014b20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b22:	2101      	movs	r1, #1
 8014b24:	4815      	ldr	r0, [pc, #84]	; (8014b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b26:	f000 fd12 	bl	801554e <USBD_GetEpDesc>
 8014b2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b2c:	2181      	movs	r1, #129	; 0x81
 8014b2e:	4813      	ldr	r0, [pc, #76]	; (8014b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b30:	f000 fd0d 	bl	801554e <USBD_GetEpDesc>
 8014b34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d002      	beq.n	8014b42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	2210      	movs	r2, #16
 8014b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d006      	beq.n	8014b56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	711a      	strb	r2, [r3, #4]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f042 0202 	orr.w	r2, r2, #2
 8014b54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d006      	beq.n	8014b6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	711a      	strb	r2, [r3, #4]
 8014b62:	2200      	movs	r2, #0
 8014b64:	f042 0202 	orr.w	r2, r2, #2
 8014b68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2243      	movs	r2, #67	; 0x43
 8014b6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b70:	4b02      	ldr	r3, [pc, #8]	; (8014b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3718      	adds	r7, #24
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	24000054 	.word	0x24000054

08014b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b086      	sub	sp, #24
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b88:	2182      	movs	r1, #130	; 0x82
 8014b8a:	4818      	ldr	r0, [pc, #96]	; (8014bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b8c:	f000 fcdf 	bl	801554e <USBD_GetEpDesc>
 8014b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b92:	2101      	movs	r1, #1
 8014b94:	4815      	ldr	r0, [pc, #84]	; (8014bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b96:	f000 fcda 	bl	801554e <USBD_GetEpDesc>
 8014b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b9c:	2181      	movs	r1, #129	; 0x81
 8014b9e:	4813      	ldr	r0, [pc, #76]	; (8014bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014ba0:	f000 fcd5 	bl	801554e <USBD_GetEpDesc>
 8014ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d002      	beq.n	8014bb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	2210      	movs	r2, #16
 8014bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d006      	beq.n	8014bc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bc0:	711a      	strb	r2, [r3, #4]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d006      	beq.n	8014bda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bd4:	711a      	strb	r2, [r3, #4]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	2243      	movs	r2, #67	; 0x43
 8014bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014be0:	4b02      	ldr	r3, [pc, #8]	; (8014bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3718      	adds	r7, #24
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	24000054 	.word	0x24000054

08014bf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b083      	sub	sp, #12
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	220a      	movs	r2, #10
 8014bfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014bfe:	4b03      	ldr	r3, [pc, #12]	; (8014c0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	370c      	adds	r7, #12
 8014c04:	46bd      	mov	sp, r7
 8014c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0a:	4770      	bx	lr
 8014c0c:	24000010 	.word	0x24000010

08014c10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014c10:	b480      	push	{r7}
 8014c12:	b083      	sub	sp, #12
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d101      	bne.n	8014c24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014c20:	2303      	movs	r3, #3
 8014c22:	e009      	b.n	8014c38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	33b0      	adds	r3, #176	; 0xb0
 8014c2e:	009b      	lsls	r3, r3, #2
 8014c30:	4413      	add	r3, r2
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014c36:	2300      	movs	r3, #0
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	370c      	adds	r7, #12
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr

08014c44 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014c44:	b480      	push	{r7}
 8014c46:	b087      	sub	sp, #28
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	60b9      	str	r1, [r7, #8]
 8014c4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	32b0      	adds	r2, #176	; 0xb0
 8014c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c5e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d101      	bne.n	8014c6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014c66:	2303      	movs	r3, #3
 8014c68:	e008      	b.n	8014c7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	68ba      	ldr	r2, [r7, #8]
 8014c6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	371c      	adds	r7, #28
 8014c80:	46bd      	mov	sp, r7
 8014c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c86:	4770      	bx	lr

08014c88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b085      	sub	sp, #20
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	32b0      	adds	r2, #176	; 0xb0
 8014c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ca0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d101      	bne.n	8014cac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	e004      	b.n	8014cb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	683a      	ldr	r2, [r7, #0]
 8014cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014cb4:	2300      	movs	r3, #0
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3714      	adds	r7, #20
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc0:	4770      	bx	lr
	...

08014cc4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b084      	sub	sp, #16
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	32b0      	adds	r2, #176	; 0xb0
 8014cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cda:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d101      	bne.n	8014cea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ce6:	2303      	movs	r3, #3
 8014ce8:	e025      	b.n	8014d36 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d11f      	bne.n	8014d34 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014cfc:	4b10      	ldr	r3, [pc, #64]	; (8014d40 <USBD_CDC_TransmitPacket+0x7c>)
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	f003 020f 	and.w	r2, r3, #15
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	4613      	mov	r3, r2
 8014d0e:	009b      	lsls	r3, r3, #2
 8014d10:	4413      	add	r3, r2
 8014d12:	009b      	lsls	r3, r3, #2
 8014d14:	4403      	add	r3, r0
 8014d16:	3318      	adds	r3, #24
 8014d18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014d1a:	4b09      	ldr	r3, [pc, #36]	; (8014d40 <USBD_CDC_TransmitPacket+0x7c>)
 8014d1c:	7819      	ldrb	r1, [r3, #0]
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f002 f80f 	bl	8016d4e <USBD_LL_Transmit>

    ret = USBD_OK;
 8014d30:	2300      	movs	r3, #0
 8014d32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3710      	adds	r7, #16
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}
 8014d3e:	bf00      	nop
 8014d40:	24000097 	.word	0x24000097

08014d44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	32b0      	adds	r2, #176	; 0xb0
 8014d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	32b0      	adds	r2, #176	; 0xb0
 8014d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d101      	bne.n	8014d72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014d6e:	2303      	movs	r3, #3
 8014d70:	e018      	b.n	8014da4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	7c1b      	ldrb	r3, [r3, #16]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d10a      	bne.n	8014d90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d7a:	4b0c      	ldr	r3, [pc, #48]	; (8014dac <USBD_CDC_ReceivePacket+0x68>)
 8014d7c:	7819      	ldrb	r1, [r3, #0]
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f002 f801 	bl	8016d90 <USBD_LL_PrepareReceive>
 8014d8e:	e008      	b.n	8014da2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d90:	4b06      	ldr	r3, [pc, #24]	; (8014dac <USBD_CDC_ReceivePacket+0x68>)
 8014d92:	7819      	ldrb	r1, [r3, #0]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d9a:	2340      	movs	r3, #64	; 0x40
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f001 fff7 	bl	8016d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014da2:	2300      	movs	r3, #0
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3710      	adds	r7, #16
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	24000098 	.word	0x24000098

08014db0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b086      	sub	sp, #24
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	60b9      	str	r1, [r7, #8]
 8014dba:	4613      	mov	r3, r2
 8014dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d101      	bne.n	8014dc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014dc4:	2303      	movs	r3, #3
 8014dc6:	e01f      	b.n	8014e08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d003      	beq.n	8014dee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	68ba      	ldr	r2, [r7, #8]
 8014dea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	2201      	movs	r2, #1
 8014df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	79fa      	ldrb	r2, [r7, #7]
 8014dfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014dfc:	68f8      	ldr	r0, [r7, #12]
 8014dfe:	f001 fe6b 	bl	8016ad8 <USBD_LL_Init>
 8014e02:	4603      	mov	r3, r0
 8014e04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3718      	adds	r7, #24
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}

08014e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d101      	bne.n	8014e28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e24:	2303      	movs	r3, #3
 8014e26:	e025      	b.n	8014e74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	32ae      	adds	r2, #174	; 0xae
 8014e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d00f      	beq.n	8014e64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	32ae      	adds	r2, #174	; 0xae
 8014e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e54:	f107 020e 	add.w	r2, r7, #14
 8014e58:	4610      	mov	r0, r2
 8014e5a:	4798      	blx	r3
 8014e5c:	4602      	mov	r2, r0
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e6a:	1c5a      	adds	r2, r3, #1
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014e72:	2300      	movs	r3, #0
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3710      	adds	r7, #16
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f001 fe79 	bl	8016b7c <USBD_LL_Start>
 8014e8a:	4603      	mov	r3, r0
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3708      	adds	r7, #8
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014e94:	b480      	push	{r7}
 8014e96:	b083      	sub	sp, #12
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014e9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	370c      	adds	r7, #12
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr

08014eaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014eaa:	b580      	push	{r7, lr}
 8014eac:	b084      	sub	sp, #16
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d009      	beq.n	8014ed8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	78fa      	ldrb	r2, [r7, #3]
 8014ece:	4611      	mov	r1, r2
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	4798      	blx	r3
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b084      	sub	sp, #16
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
 8014eea:	460b      	mov	r3, r1
 8014eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	78fa      	ldrb	r2, [r7, #3]
 8014efc:	4611      	mov	r1, r2
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	4798      	blx	r3
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d001      	beq.n	8014f0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014f08:	2303      	movs	r3, #3
 8014f0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3710      	adds	r7, #16
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}

08014f16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014f16:	b580      	push	{r7, lr}
 8014f18:	b084      	sub	sp, #16
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	6078      	str	r0, [r7, #4]
 8014f1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f001 f90e 	bl	801614a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2201      	movs	r2, #1
 8014f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f4a:	f003 031f 	and.w	r3, r3, #31
 8014f4e:	2b02      	cmp	r3, #2
 8014f50:	d01a      	beq.n	8014f88 <USBD_LL_SetupStage+0x72>
 8014f52:	2b02      	cmp	r3, #2
 8014f54:	d822      	bhi.n	8014f9c <USBD_LL_SetupStage+0x86>
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d002      	beq.n	8014f60 <USBD_LL_SetupStage+0x4a>
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	d00a      	beq.n	8014f74 <USBD_LL_SetupStage+0x5e>
 8014f5e:	e01d      	b.n	8014f9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f66:	4619      	mov	r1, r3
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f000 fb65 	bl	8015638 <USBD_StdDevReq>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	73fb      	strb	r3, [r7, #15]
      break;
 8014f72:	e020      	b.n	8014fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f000 fbcd 	bl	801571c <USBD_StdItfReq>
 8014f82:	4603      	mov	r3, r0
 8014f84:	73fb      	strb	r3, [r7, #15]
      break;
 8014f86:	e016      	b.n	8014fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f8e:	4619      	mov	r1, r3
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f000 fc2f 	bl	80157f4 <USBD_StdEPReq>
 8014f96:	4603      	mov	r3, r0
 8014f98:	73fb      	strb	r3, [r7, #15]
      break;
 8014f9a:	e00c      	b.n	8014fb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014fa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	4619      	mov	r1, r3
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f001 fe46 	bl	8016c3c <USBD_LL_StallEP>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8014fb4:	bf00      	nop
  }

  return ret;
 8014fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3710      	adds	r7, #16
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b086      	sub	sp, #24
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	60f8      	str	r0, [r7, #12]
 8014fc8:	460b      	mov	r3, r1
 8014fca:	607a      	str	r2, [r7, #4]
 8014fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014fd2:	7afb      	ldrb	r3, [r7, #11]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d16e      	bne.n	80150b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014fde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014fe6:	2b03      	cmp	r3, #3
 8014fe8:	f040 8098 	bne.w	801511c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	689a      	ldr	r2, [r3, #8]
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	68db      	ldr	r3, [r3, #12]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d913      	bls.n	8015020 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	689a      	ldr	r2, [r3, #8]
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	68db      	ldr	r3, [r3, #12]
 8015000:	1ad2      	subs	r2, r2, r3
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	68da      	ldr	r2, [r3, #12]
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	689b      	ldr	r3, [r3, #8]
 801500e:	4293      	cmp	r3, r2
 8015010:	bf28      	it	cs
 8015012:	4613      	movcs	r3, r2
 8015014:	461a      	mov	r2, r3
 8015016:	6879      	ldr	r1, [r7, #4]
 8015018:	68f8      	ldr	r0, [r7, #12]
 801501a:	f001 f98a 	bl	8016332 <USBD_CtlContinueRx>
 801501e:	e07d      	b.n	801511c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015026:	f003 031f 	and.w	r3, r3, #31
 801502a:	2b02      	cmp	r3, #2
 801502c:	d014      	beq.n	8015058 <USBD_LL_DataOutStage+0x98>
 801502e:	2b02      	cmp	r3, #2
 8015030:	d81d      	bhi.n	801506e <USBD_LL_DataOutStage+0xae>
 8015032:	2b00      	cmp	r3, #0
 8015034:	d002      	beq.n	801503c <USBD_LL_DataOutStage+0x7c>
 8015036:	2b01      	cmp	r3, #1
 8015038:	d003      	beq.n	8015042 <USBD_LL_DataOutStage+0x82>
 801503a:	e018      	b.n	801506e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801503c:	2300      	movs	r3, #0
 801503e:	75bb      	strb	r3, [r7, #22]
            break;
 8015040:	e018      	b.n	8015074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015048:	b2db      	uxtb	r3, r3
 801504a:	4619      	mov	r1, r3
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f000 fa64 	bl	801551a <USBD_CoreFindIF>
 8015052:	4603      	mov	r3, r0
 8015054:	75bb      	strb	r3, [r7, #22]
            break;
 8015056:	e00d      	b.n	8015074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801505e:	b2db      	uxtb	r3, r3
 8015060:	4619      	mov	r1, r3
 8015062:	68f8      	ldr	r0, [r7, #12]
 8015064:	f000 fa66 	bl	8015534 <USBD_CoreFindEP>
 8015068:	4603      	mov	r3, r0
 801506a:	75bb      	strb	r3, [r7, #22]
            break;
 801506c:	e002      	b.n	8015074 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801506e:	2300      	movs	r3, #0
 8015070:	75bb      	strb	r3, [r7, #22]
            break;
 8015072:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015074:	7dbb      	ldrb	r3, [r7, #22]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d119      	bne.n	80150ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015080:	b2db      	uxtb	r3, r3
 8015082:	2b03      	cmp	r3, #3
 8015084:	d113      	bne.n	80150ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015086:	7dba      	ldrb	r2, [r7, #22]
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	32ae      	adds	r2, #174	; 0xae
 801508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015090:	691b      	ldr	r3, [r3, #16]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d00b      	beq.n	80150ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015096:	7dba      	ldrb	r2, [r7, #22]
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801509e:	7dba      	ldrb	r2, [r7, #22]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	32ae      	adds	r2, #174	; 0xae
 80150a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150a8:	691b      	ldr	r3, [r3, #16]
 80150aa:	68f8      	ldr	r0, [r7, #12]
 80150ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80150ae:	68f8      	ldr	r0, [r7, #12]
 80150b0:	f001 f950 	bl	8016354 <USBD_CtlSendStatus>
 80150b4:	e032      	b.n	801511c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80150b6:	7afb      	ldrb	r3, [r7, #11]
 80150b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	4619      	mov	r1, r3
 80150c0:	68f8      	ldr	r0, [r7, #12]
 80150c2:	f000 fa37 	bl	8015534 <USBD_CoreFindEP>
 80150c6:	4603      	mov	r3, r0
 80150c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80150ca:	7dbb      	ldrb	r3, [r7, #22]
 80150cc:	2bff      	cmp	r3, #255	; 0xff
 80150ce:	d025      	beq.n	801511c <USBD_LL_DataOutStage+0x15c>
 80150d0:	7dbb      	ldrb	r3, [r7, #22]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d122      	bne.n	801511c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150dc:	b2db      	uxtb	r3, r3
 80150de:	2b03      	cmp	r3, #3
 80150e0:	d117      	bne.n	8015112 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80150e2:	7dba      	ldrb	r2, [r7, #22]
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	32ae      	adds	r2, #174	; 0xae
 80150e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ec:	699b      	ldr	r3, [r3, #24]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d00f      	beq.n	8015112 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80150f2:	7dba      	ldrb	r2, [r7, #22]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80150fa:	7dba      	ldrb	r2, [r7, #22]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	32ae      	adds	r2, #174	; 0xae
 8015100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015104:	699b      	ldr	r3, [r3, #24]
 8015106:	7afa      	ldrb	r2, [r7, #11]
 8015108:	4611      	mov	r1, r2
 801510a:	68f8      	ldr	r0, [r7, #12]
 801510c:	4798      	blx	r3
 801510e:	4603      	mov	r3, r0
 8015110:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015112:	7dfb      	ldrb	r3, [r7, #23]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d001      	beq.n	801511c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015118:	7dfb      	ldrb	r3, [r7, #23]
 801511a:	e000      	b.n	801511e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801511c:	2300      	movs	r3, #0
}
 801511e:	4618      	mov	r0, r3
 8015120:	3718      	adds	r7, #24
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b086      	sub	sp, #24
 801512a:	af00      	add	r7, sp, #0
 801512c:	60f8      	str	r0, [r7, #12]
 801512e:	460b      	mov	r3, r1
 8015130:	607a      	str	r2, [r7, #4]
 8015132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015134:	7afb      	ldrb	r3, [r7, #11]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d16f      	bne.n	801521a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	3314      	adds	r3, #20
 801513e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015146:	2b02      	cmp	r3, #2
 8015148:	d15a      	bne.n	8015200 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	689a      	ldr	r2, [r3, #8]
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	429a      	cmp	r2, r3
 8015154:	d914      	bls.n	8015180 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	689a      	ldr	r2, [r3, #8]
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	1ad2      	subs	r2, r2, r3
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	689b      	ldr	r3, [r3, #8]
 8015168:	461a      	mov	r2, r3
 801516a:	6879      	ldr	r1, [r7, #4]
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f001 f8b2 	bl	80162d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015172:	2300      	movs	r3, #0
 8015174:	2200      	movs	r2, #0
 8015176:	2100      	movs	r1, #0
 8015178:	68f8      	ldr	r0, [r7, #12]
 801517a:	f001 fe09 	bl	8016d90 <USBD_LL_PrepareReceive>
 801517e:	e03f      	b.n	8015200 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	68da      	ldr	r2, [r3, #12]
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	689b      	ldr	r3, [r3, #8]
 8015188:	429a      	cmp	r2, r3
 801518a:	d11c      	bne.n	80151c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	685a      	ldr	r2, [r3, #4]
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015194:	429a      	cmp	r2, r3
 8015196:	d316      	bcc.n	80151c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	685a      	ldr	r2, [r3, #4]
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d20f      	bcs.n	80151c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80151a6:	2200      	movs	r2, #0
 80151a8:	2100      	movs	r1, #0
 80151aa:	68f8      	ldr	r0, [r7, #12]
 80151ac:	f001 f893 	bl	80162d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2200      	movs	r2, #0
 80151b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151b8:	2300      	movs	r3, #0
 80151ba:	2200      	movs	r2, #0
 80151bc:	2100      	movs	r1, #0
 80151be:	68f8      	ldr	r0, [r7, #12]
 80151c0:	f001 fde6 	bl	8016d90 <USBD_LL_PrepareReceive>
 80151c4:	e01c      	b.n	8015200 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	2b03      	cmp	r3, #3
 80151d0:	d10f      	bne.n	80151f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151d8:	68db      	ldr	r3, [r3, #12]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d009      	beq.n	80151f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2200      	movs	r2, #0
 80151e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	68f8      	ldr	r0, [r7, #12]
 80151f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80151f2:	2180      	movs	r1, #128	; 0x80
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f001 fd21 	bl	8016c3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f001 f8bd 	bl	801637a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015206:	2b00      	cmp	r3, #0
 8015208:	d03a      	beq.n	8015280 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801520a:	68f8      	ldr	r0, [r7, #12]
 801520c:	f7ff fe42 	bl	8014e94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2200      	movs	r2, #0
 8015214:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015218:	e032      	b.n	8015280 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801521a:	7afb      	ldrb	r3, [r7, #11]
 801521c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015220:	b2db      	uxtb	r3, r3
 8015222:	4619      	mov	r1, r3
 8015224:	68f8      	ldr	r0, [r7, #12]
 8015226:	f000 f985 	bl	8015534 <USBD_CoreFindEP>
 801522a:	4603      	mov	r3, r0
 801522c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801522e:	7dfb      	ldrb	r3, [r7, #23]
 8015230:	2bff      	cmp	r3, #255	; 0xff
 8015232:	d025      	beq.n	8015280 <USBD_LL_DataInStage+0x15a>
 8015234:	7dfb      	ldrb	r3, [r7, #23]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d122      	bne.n	8015280 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015240:	b2db      	uxtb	r3, r3
 8015242:	2b03      	cmp	r3, #3
 8015244:	d11c      	bne.n	8015280 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015246:	7dfa      	ldrb	r2, [r7, #23]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	32ae      	adds	r2, #174	; 0xae
 801524c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015250:	695b      	ldr	r3, [r3, #20]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d014      	beq.n	8015280 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015256:	7dfa      	ldrb	r2, [r7, #23]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801525e:	7dfa      	ldrb	r2, [r7, #23]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	32ae      	adds	r2, #174	; 0xae
 8015264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015268:	695b      	ldr	r3, [r3, #20]
 801526a:	7afa      	ldrb	r2, [r7, #11]
 801526c:	4611      	mov	r1, r2
 801526e:	68f8      	ldr	r0, [r7, #12]
 8015270:	4798      	blx	r3
 8015272:	4603      	mov	r3, r0
 8015274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015276:	7dbb      	ldrb	r3, [r7, #22]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d001      	beq.n	8015280 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801527c:	7dbb      	ldrb	r3, [r7, #22]
 801527e:	e000      	b.n	8015282 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015280:	2300      	movs	r3, #0
}
 8015282:	4618      	mov	r0, r3
 8015284:	3718      	adds	r7, #24
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}

0801528a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801528a:	b580      	push	{r7, lr}
 801528c:	b084      	sub	sp, #16
 801528e:	af00      	add	r7, sp, #0
 8015290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015292:	2300      	movs	r3, #0
 8015294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	2201      	movs	r2, #1
 801529a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2200      	movs	r2, #0
 80152a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2200      	movs	r2, #0
 80152aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2200      	movs	r2, #0
 80152b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d014      	beq.n	80152f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d00e      	beq.n	80152f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	687a      	ldr	r2, [r7, #4]
 80152dc:	6852      	ldr	r2, [r2, #4]
 80152de:	b2d2      	uxtb	r2, r2
 80152e0:	4611      	mov	r1, r2
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	4798      	blx	r3
 80152e6:	4603      	mov	r3, r0
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d001      	beq.n	80152f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80152ec:	2303      	movs	r3, #3
 80152ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80152f0:	2340      	movs	r3, #64	; 0x40
 80152f2:	2200      	movs	r2, #0
 80152f4:	2100      	movs	r1, #0
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f001 fc5b 	bl	8016bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2201      	movs	r2, #1
 8015300:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2240      	movs	r2, #64	; 0x40
 8015308:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801530c:	2340      	movs	r3, #64	; 0x40
 801530e:	2200      	movs	r2, #0
 8015310:	2180      	movs	r1, #128	; 0x80
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f001 fc4d 	bl	8016bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2201      	movs	r2, #1
 801531c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2240      	movs	r2, #64	; 0x40
 8015322:	621a      	str	r2, [r3, #32]

  return ret;
 8015324:	7bfb      	ldrb	r3, [r7, #15]
}
 8015326:	4618      	mov	r0, r3
 8015328:	3710      	adds	r7, #16
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}

0801532e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801532e:	b480      	push	{r7}
 8015330:	b083      	sub	sp, #12
 8015332:	af00      	add	r7, sp, #0
 8015334:	6078      	str	r0, [r7, #4]
 8015336:	460b      	mov	r3, r1
 8015338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	78fa      	ldrb	r2, [r7, #3]
 801533e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015340:	2300      	movs	r3, #0
}
 8015342:	4618      	mov	r0, r3
 8015344:	370c      	adds	r7, #12
 8015346:	46bd      	mov	sp, r7
 8015348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534c:	4770      	bx	lr

0801534e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801534e:	b480      	push	{r7}
 8015350:	b083      	sub	sp, #12
 8015352:	af00      	add	r7, sp, #0
 8015354:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801535c:	b2db      	uxtb	r3, r3
 801535e:	2b04      	cmp	r3, #4
 8015360:	d006      	beq.n	8015370 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015368:	b2da      	uxtb	r2, r3
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2204      	movs	r2, #4
 8015374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015378:	2300      	movs	r3, #0
}
 801537a:	4618      	mov	r0, r3
 801537c:	370c      	adds	r7, #12
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr

08015386 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015386:	b480      	push	{r7}
 8015388:	b083      	sub	sp, #12
 801538a:	af00      	add	r7, sp, #0
 801538c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015394:	b2db      	uxtb	r3, r3
 8015396:	2b04      	cmp	r3, #4
 8015398:	d106      	bne.n	80153a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80153a0:	b2da      	uxtb	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	370c      	adds	r7, #12
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr

080153b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b082      	sub	sp, #8
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	2b03      	cmp	r3, #3
 80153c8:	d110      	bne.n	80153ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d00b      	beq.n	80153ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153da:	69db      	ldr	r3, [r3, #28]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d005      	beq.n	80153ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153e6:	69db      	ldr	r3, [r3, #28]
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80153ec:	2300      	movs	r3, #0
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	3708      	adds	r7, #8
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80153f6:	b580      	push	{r7, lr}
 80153f8:	b082      	sub	sp, #8
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	6078      	str	r0, [r7, #4]
 80153fe:	460b      	mov	r3, r1
 8015400:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	32ae      	adds	r2, #174	; 0xae
 801540c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d101      	bne.n	8015418 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015414:	2303      	movs	r3, #3
 8015416:	e01c      	b.n	8015452 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801541e:	b2db      	uxtb	r3, r3
 8015420:	2b03      	cmp	r3, #3
 8015422:	d115      	bne.n	8015450 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	32ae      	adds	r2, #174	; 0xae
 801542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015432:	6a1b      	ldr	r3, [r3, #32]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d00b      	beq.n	8015450 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	32ae      	adds	r2, #174	; 0xae
 8015442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015446:	6a1b      	ldr	r3, [r3, #32]
 8015448:	78fa      	ldrb	r2, [r7, #3]
 801544a:	4611      	mov	r1, r2
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015450:	2300      	movs	r3, #0
}
 8015452:	4618      	mov	r0, r3
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801545a:	b580      	push	{r7, lr}
 801545c:	b082      	sub	sp, #8
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
 8015462:	460b      	mov	r3, r1
 8015464:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	32ae      	adds	r2, #174	; 0xae
 8015470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d101      	bne.n	801547c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015478:	2303      	movs	r3, #3
 801547a:	e01c      	b.n	80154b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015482:	b2db      	uxtb	r3, r3
 8015484:	2b03      	cmp	r3, #3
 8015486:	d115      	bne.n	80154b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	32ae      	adds	r2, #174	; 0xae
 8015492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015498:	2b00      	cmp	r3, #0
 801549a:	d00b      	beq.n	80154b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	32ae      	adds	r2, #174	; 0xae
 80154a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154ac:	78fa      	ldrb	r2, [r7, #3]
 80154ae:	4611      	mov	r1, r2
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3708      	adds	r7, #8
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80154be:	b480      	push	{r7}
 80154c0:	b083      	sub	sp, #12
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80154c6:	2300      	movs	r3, #0
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	370c      	adds	r7, #12
 80154cc:	46bd      	mov	sp, r7
 80154ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d2:	4770      	bx	lr

080154d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b084      	sub	sp, #16
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80154dc:	2300      	movs	r3, #0
 80154de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2201      	movs	r2, #1
 80154e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d00e      	beq.n	8015510 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	6852      	ldr	r2, [r2, #4]
 80154fe:	b2d2      	uxtb	r2, r2
 8015500:	4611      	mov	r1, r2
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	4798      	blx	r3
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d001      	beq.n	8015510 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801550c:	2303      	movs	r3, #3
 801550e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015510:	7bfb      	ldrb	r3, [r7, #15]
}
 8015512:	4618      	mov	r0, r3
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}

0801551a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801551a:	b480      	push	{r7}
 801551c:	b083      	sub	sp, #12
 801551e:	af00      	add	r7, sp, #0
 8015520:	6078      	str	r0, [r7, #4]
 8015522:	460b      	mov	r3, r1
 8015524:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015526:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015528:	4618      	mov	r0, r3
 801552a:	370c      	adds	r7, #12
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr

08015534 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	460b      	mov	r3, r1
 801553e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015540:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015542:	4618      	mov	r0, r3
 8015544:	370c      	adds	r7, #12
 8015546:	46bd      	mov	sp, r7
 8015548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554c:	4770      	bx	lr

0801554e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b086      	sub	sp, #24
 8015552:	af00      	add	r7, sp, #0
 8015554:	6078      	str	r0, [r7, #4]
 8015556:	460b      	mov	r3, r1
 8015558:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015562:	2300      	movs	r3, #0
 8015564:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	885b      	ldrh	r3, [r3, #2]
 801556a:	b29a      	uxth	r2, r3
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	b29b      	uxth	r3, r3
 8015572:	429a      	cmp	r2, r3
 8015574:	d920      	bls.n	80155b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	b29b      	uxth	r3, r3
 801557c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801557e:	e013      	b.n	80155a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015580:	f107 030a 	add.w	r3, r7, #10
 8015584:	4619      	mov	r1, r3
 8015586:	6978      	ldr	r0, [r7, #20]
 8015588:	f000 f81b 	bl	80155c2 <USBD_GetNextDesc>
 801558c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801558e:	697b      	ldr	r3, [r7, #20]
 8015590:	785b      	ldrb	r3, [r3, #1]
 8015592:	2b05      	cmp	r3, #5
 8015594:	d108      	bne.n	80155a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	789b      	ldrb	r3, [r3, #2]
 801559e:	78fa      	ldrb	r2, [r7, #3]
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d008      	beq.n	80155b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80155a4:	2300      	movs	r3, #0
 80155a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	885b      	ldrh	r3, [r3, #2]
 80155ac:	b29a      	uxth	r2, r3
 80155ae:	897b      	ldrh	r3, [r7, #10]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	d8e5      	bhi.n	8015580 <USBD_GetEpDesc+0x32>
 80155b4:	e000      	b.n	80155b8 <USBD_GetEpDesc+0x6a>
          break;
 80155b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80155b8:	693b      	ldr	r3, [r7, #16]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3718      	adds	r7, #24
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80155c2:	b480      	push	{r7}
 80155c4:	b085      	sub	sp, #20
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
 80155ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	881a      	ldrh	r2, [r3, #0]
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	781b      	ldrb	r3, [r3, #0]
 80155d8:	b29b      	uxth	r3, r3
 80155da:	4413      	add	r3, r2
 80155dc:	b29a      	uxth	r2, r3
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	461a      	mov	r2, r3
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	4413      	add	r3, r2
 80155ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80155ee:	68fb      	ldr	r3, [r7, #12]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3714      	adds	r7, #20
 80155f4:	46bd      	mov	sp, r7
 80155f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fa:	4770      	bx	lr

080155fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80155fc:	b480      	push	{r7}
 80155fe:	b087      	sub	sp, #28
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	3301      	adds	r3, #1
 8015612:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801561a:	8a3b      	ldrh	r3, [r7, #16]
 801561c:	021b      	lsls	r3, r3, #8
 801561e:	b21a      	sxth	r2, r3
 8015620:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015624:	4313      	orrs	r3, r2
 8015626:	b21b      	sxth	r3, r3
 8015628:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801562a:	89fb      	ldrh	r3, [r7, #14]
}
 801562c:	4618      	mov	r0, r3
 801562e:	371c      	adds	r7, #28
 8015630:	46bd      	mov	sp, r7
 8015632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015636:	4770      	bx	lr

08015638 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015642:	2300      	movs	r3, #0
 8015644:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801564e:	2b40      	cmp	r3, #64	; 0x40
 8015650:	d005      	beq.n	801565e <USBD_StdDevReq+0x26>
 8015652:	2b40      	cmp	r3, #64	; 0x40
 8015654:	d857      	bhi.n	8015706 <USBD_StdDevReq+0xce>
 8015656:	2b00      	cmp	r3, #0
 8015658:	d00f      	beq.n	801567a <USBD_StdDevReq+0x42>
 801565a:	2b20      	cmp	r3, #32
 801565c:	d153      	bne.n	8015706 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	32ae      	adds	r2, #174	; 0xae
 8015668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	6839      	ldr	r1, [r7, #0]
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	4798      	blx	r3
 8015674:	4603      	mov	r3, r0
 8015676:	73fb      	strb	r3, [r7, #15]
      break;
 8015678:	e04a      	b.n	8015710 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	785b      	ldrb	r3, [r3, #1]
 801567e:	2b09      	cmp	r3, #9
 8015680:	d83b      	bhi.n	80156fa <USBD_StdDevReq+0xc2>
 8015682:	a201      	add	r2, pc, #4	; (adr r2, 8015688 <USBD_StdDevReq+0x50>)
 8015684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015688:	080156dd 	.word	0x080156dd
 801568c:	080156f1 	.word	0x080156f1
 8015690:	080156fb 	.word	0x080156fb
 8015694:	080156e7 	.word	0x080156e7
 8015698:	080156fb 	.word	0x080156fb
 801569c:	080156bb 	.word	0x080156bb
 80156a0:	080156b1 	.word	0x080156b1
 80156a4:	080156fb 	.word	0x080156fb
 80156a8:	080156d3 	.word	0x080156d3
 80156ac:	080156c5 	.word	0x080156c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80156b0:	6839      	ldr	r1, [r7, #0]
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f000 fa3c 	bl	8015b30 <USBD_GetDescriptor>
          break;
 80156b8:	e024      	b.n	8015704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80156ba:	6839      	ldr	r1, [r7, #0]
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 fba1 	bl	8015e04 <USBD_SetAddress>
          break;
 80156c2:	e01f      	b.n	8015704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80156c4:	6839      	ldr	r1, [r7, #0]
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f000 fbe0 	bl	8015e8c <USBD_SetConfig>
 80156cc:	4603      	mov	r3, r0
 80156ce:	73fb      	strb	r3, [r7, #15]
          break;
 80156d0:	e018      	b.n	8015704 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80156d2:	6839      	ldr	r1, [r7, #0]
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f000 fc83 	bl	8015fe0 <USBD_GetConfig>
          break;
 80156da:	e013      	b.n	8015704 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80156dc:	6839      	ldr	r1, [r7, #0]
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 fcb4 	bl	801604c <USBD_GetStatus>
          break;
 80156e4:	e00e      	b.n	8015704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80156e6:	6839      	ldr	r1, [r7, #0]
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f000 fce3 	bl	80160b4 <USBD_SetFeature>
          break;
 80156ee:	e009      	b.n	8015704 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80156f0:	6839      	ldr	r1, [r7, #0]
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 fd07 	bl	8016106 <USBD_ClrFeature>
          break;
 80156f8:	e004      	b.n	8015704 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80156fa:	6839      	ldr	r1, [r7, #0]
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f000 fd5e 	bl	80161be <USBD_CtlError>
          break;
 8015702:	bf00      	nop
      }
      break;
 8015704:	e004      	b.n	8015710 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015706:	6839      	ldr	r1, [r7, #0]
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f000 fd58 	bl	80161be <USBD_CtlError>
      break;
 801570e:	bf00      	nop
  }

  return ret;
 8015710:	7bfb      	ldrb	r3, [r7, #15]
}
 8015712:	4618      	mov	r0, r3
 8015714:	3710      	adds	r7, #16
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop

0801571c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b084      	sub	sp, #16
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015726:	2300      	movs	r3, #0
 8015728:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015732:	2b40      	cmp	r3, #64	; 0x40
 8015734:	d005      	beq.n	8015742 <USBD_StdItfReq+0x26>
 8015736:	2b40      	cmp	r3, #64	; 0x40
 8015738:	d852      	bhi.n	80157e0 <USBD_StdItfReq+0xc4>
 801573a:	2b00      	cmp	r3, #0
 801573c:	d001      	beq.n	8015742 <USBD_StdItfReq+0x26>
 801573e:	2b20      	cmp	r3, #32
 8015740:	d14e      	bne.n	80157e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015748:	b2db      	uxtb	r3, r3
 801574a:	3b01      	subs	r3, #1
 801574c:	2b02      	cmp	r3, #2
 801574e:	d840      	bhi.n	80157d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	889b      	ldrh	r3, [r3, #4]
 8015754:	b2db      	uxtb	r3, r3
 8015756:	2b01      	cmp	r3, #1
 8015758:	d836      	bhi.n	80157c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	889b      	ldrh	r3, [r3, #4]
 801575e:	b2db      	uxtb	r3, r3
 8015760:	4619      	mov	r1, r3
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	f7ff fed9 	bl	801551a <USBD_CoreFindIF>
 8015768:	4603      	mov	r3, r0
 801576a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801576c:	7bbb      	ldrb	r3, [r7, #14]
 801576e:	2bff      	cmp	r3, #255	; 0xff
 8015770:	d01d      	beq.n	80157ae <USBD_StdItfReq+0x92>
 8015772:	7bbb      	ldrb	r3, [r7, #14]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d11a      	bne.n	80157ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015778:	7bba      	ldrb	r2, [r7, #14]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	32ae      	adds	r2, #174	; 0xae
 801577e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d00f      	beq.n	80157a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015788:	7bba      	ldrb	r2, [r7, #14]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015790:	7bba      	ldrb	r2, [r7, #14]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	32ae      	adds	r2, #174	; 0xae
 8015796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801579a:	689b      	ldr	r3, [r3, #8]
 801579c:	6839      	ldr	r1, [r7, #0]
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	4798      	blx	r3
 80157a2:	4603      	mov	r3, r0
 80157a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157a6:	e004      	b.n	80157b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80157a8:	2303      	movs	r3, #3
 80157aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157ac:	e001      	b.n	80157b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80157ae:	2303      	movs	r3, #3
 80157b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	88db      	ldrh	r3, [r3, #6]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d110      	bne.n	80157dc <USBD_StdItfReq+0xc0>
 80157ba:	7bfb      	ldrb	r3, [r7, #15]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d10d      	bne.n	80157dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f000 fdc7 	bl	8016354 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80157c6:	e009      	b.n	80157dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80157c8:	6839      	ldr	r1, [r7, #0]
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f000 fcf7 	bl	80161be <USBD_CtlError>
          break;
 80157d0:	e004      	b.n	80157dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80157d2:	6839      	ldr	r1, [r7, #0]
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f000 fcf2 	bl	80161be <USBD_CtlError>
          break;
 80157da:	e000      	b.n	80157de <USBD_StdItfReq+0xc2>
          break;
 80157dc:	bf00      	nop
      }
      break;
 80157de:	e004      	b.n	80157ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fceb 	bl	80161be <USBD_CtlError>
      break;
 80157e8:	bf00      	nop
  }

  return ret;
 80157ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	3710      	adds	r7, #16
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}

080157f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80157fe:	2300      	movs	r3, #0
 8015800:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	889b      	ldrh	r3, [r3, #4]
 8015806:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015810:	2b40      	cmp	r3, #64	; 0x40
 8015812:	d007      	beq.n	8015824 <USBD_StdEPReq+0x30>
 8015814:	2b40      	cmp	r3, #64	; 0x40
 8015816:	f200 817f 	bhi.w	8015b18 <USBD_StdEPReq+0x324>
 801581a:	2b00      	cmp	r3, #0
 801581c:	d02a      	beq.n	8015874 <USBD_StdEPReq+0x80>
 801581e:	2b20      	cmp	r3, #32
 8015820:	f040 817a 	bne.w	8015b18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015824:	7bbb      	ldrb	r3, [r7, #14]
 8015826:	4619      	mov	r1, r3
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f7ff fe83 	bl	8015534 <USBD_CoreFindEP>
 801582e:	4603      	mov	r3, r0
 8015830:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015832:	7b7b      	ldrb	r3, [r7, #13]
 8015834:	2bff      	cmp	r3, #255	; 0xff
 8015836:	f000 8174 	beq.w	8015b22 <USBD_StdEPReq+0x32e>
 801583a:	7b7b      	ldrb	r3, [r7, #13]
 801583c:	2b00      	cmp	r3, #0
 801583e:	f040 8170 	bne.w	8015b22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015842:	7b7a      	ldrb	r2, [r7, #13]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801584a:	7b7a      	ldrb	r2, [r7, #13]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	32ae      	adds	r2, #174	; 0xae
 8015850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015854:	689b      	ldr	r3, [r3, #8]
 8015856:	2b00      	cmp	r3, #0
 8015858:	f000 8163 	beq.w	8015b22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801585c:	7b7a      	ldrb	r2, [r7, #13]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	32ae      	adds	r2, #174	; 0xae
 8015862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015866:	689b      	ldr	r3, [r3, #8]
 8015868:	6839      	ldr	r1, [r7, #0]
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	4798      	blx	r3
 801586e:	4603      	mov	r3, r0
 8015870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015872:	e156      	b.n	8015b22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	785b      	ldrb	r3, [r3, #1]
 8015878:	2b03      	cmp	r3, #3
 801587a:	d008      	beq.n	801588e <USBD_StdEPReq+0x9a>
 801587c:	2b03      	cmp	r3, #3
 801587e:	f300 8145 	bgt.w	8015b0c <USBD_StdEPReq+0x318>
 8015882:	2b00      	cmp	r3, #0
 8015884:	f000 809b 	beq.w	80159be <USBD_StdEPReq+0x1ca>
 8015888:	2b01      	cmp	r3, #1
 801588a:	d03c      	beq.n	8015906 <USBD_StdEPReq+0x112>
 801588c:	e13e      	b.n	8015b0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015894:	b2db      	uxtb	r3, r3
 8015896:	2b02      	cmp	r3, #2
 8015898:	d002      	beq.n	80158a0 <USBD_StdEPReq+0xac>
 801589a:	2b03      	cmp	r3, #3
 801589c:	d016      	beq.n	80158cc <USBD_StdEPReq+0xd8>
 801589e:	e02c      	b.n	80158fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158a0:	7bbb      	ldrb	r3, [r7, #14]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d00d      	beq.n	80158c2 <USBD_StdEPReq+0xce>
 80158a6:	7bbb      	ldrb	r3, [r7, #14]
 80158a8:	2b80      	cmp	r3, #128	; 0x80
 80158aa:	d00a      	beq.n	80158c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158ac:	7bbb      	ldrb	r3, [r7, #14]
 80158ae:	4619      	mov	r1, r3
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f001 f9c3 	bl	8016c3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158b6:	2180      	movs	r1, #128	; 0x80
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f001 f9bf 	bl	8016c3c <USBD_LL_StallEP>
 80158be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80158c0:	e020      	b.n	8015904 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80158c2:	6839      	ldr	r1, [r7, #0]
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f000 fc7a 	bl	80161be <USBD_CtlError>
              break;
 80158ca:	e01b      	b.n	8015904 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	885b      	ldrh	r3, [r3, #2]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d10e      	bne.n	80158f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80158d4:	7bbb      	ldrb	r3, [r7, #14]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00b      	beq.n	80158f2 <USBD_StdEPReq+0xfe>
 80158da:	7bbb      	ldrb	r3, [r7, #14]
 80158dc:	2b80      	cmp	r3, #128	; 0x80
 80158de:	d008      	beq.n	80158f2 <USBD_StdEPReq+0xfe>
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	88db      	ldrh	r3, [r3, #6]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d104      	bne.n	80158f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80158e8:	7bbb      	ldrb	r3, [r7, #14]
 80158ea:	4619      	mov	r1, r3
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f001 f9a5 	bl	8016c3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f000 fd2e 	bl	8016354 <USBD_CtlSendStatus>

              break;
 80158f8:	e004      	b.n	8015904 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80158fa:	6839      	ldr	r1, [r7, #0]
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fc5e 	bl	80161be <USBD_CtlError>
              break;
 8015902:	bf00      	nop
          }
          break;
 8015904:	e107      	b.n	8015b16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801590c:	b2db      	uxtb	r3, r3
 801590e:	2b02      	cmp	r3, #2
 8015910:	d002      	beq.n	8015918 <USBD_StdEPReq+0x124>
 8015912:	2b03      	cmp	r3, #3
 8015914:	d016      	beq.n	8015944 <USBD_StdEPReq+0x150>
 8015916:	e04b      	b.n	80159b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015918:	7bbb      	ldrb	r3, [r7, #14]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d00d      	beq.n	801593a <USBD_StdEPReq+0x146>
 801591e:	7bbb      	ldrb	r3, [r7, #14]
 8015920:	2b80      	cmp	r3, #128	; 0x80
 8015922:	d00a      	beq.n	801593a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015924:	7bbb      	ldrb	r3, [r7, #14]
 8015926:	4619      	mov	r1, r3
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f001 f987 	bl	8016c3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801592e:	2180      	movs	r1, #128	; 0x80
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f001 f983 	bl	8016c3c <USBD_LL_StallEP>
 8015936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015938:	e040      	b.n	80159bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801593a:	6839      	ldr	r1, [r7, #0]
 801593c:	6878      	ldr	r0, [r7, #4]
 801593e:	f000 fc3e 	bl	80161be <USBD_CtlError>
              break;
 8015942:	e03b      	b.n	80159bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	885b      	ldrh	r3, [r3, #2]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d136      	bne.n	80159ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801594c:	7bbb      	ldrb	r3, [r7, #14]
 801594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015952:	2b00      	cmp	r3, #0
 8015954:	d004      	beq.n	8015960 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015956:	7bbb      	ldrb	r3, [r7, #14]
 8015958:	4619      	mov	r1, r3
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f001 f98d 	bl	8016c7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f000 fcf7 	bl	8016354 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015966:	7bbb      	ldrb	r3, [r7, #14]
 8015968:	4619      	mov	r1, r3
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f7ff fde2 	bl	8015534 <USBD_CoreFindEP>
 8015970:	4603      	mov	r3, r0
 8015972:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015974:	7b7b      	ldrb	r3, [r7, #13]
 8015976:	2bff      	cmp	r3, #255	; 0xff
 8015978:	d01f      	beq.n	80159ba <USBD_StdEPReq+0x1c6>
 801597a:	7b7b      	ldrb	r3, [r7, #13]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d11c      	bne.n	80159ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015980:	7b7a      	ldrb	r2, [r7, #13]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015988:	7b7a      	ldrb	r2, [r7, #13]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	32ae      	adds	r2, #174	; 0xae
 801598e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015992:	689b      	ldr	r3, [r3, #8]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d010      	beq.n	80159ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015998:	7b7a      	ldrb	r2, [r7, #13]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	32ae      	adds	r2, #174	; 0xae
 801599e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159a2:	689b      	ldr	r3, [r3, #8]
 80159a4:	6839      	ldr	r1, [r7, #0]
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	4798      	blx	r3
 80159aa:	4603      	mov	r3, r0
 80159ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80159ae:	e004      	b.n	80159ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80159b0:	6839      	ldr	r1, [r7, #0]
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f000 fc03 	bl	80161be <USBD_CtlError>
              break;
 80159b8:	e000      	b.n	80159bc <USBD_StdEPReq+0x1c8>
              break;
 80159ba:	bf00      	nop
          }
          break;
 80159bc:	e0ab      	b.n	8015b16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	2b02      	cmp	r3, #2
 80159c8:	d002      	beq.n	80159d0 <USBD_StdEPReq+0x1dc>
 80159ca:	2b03      	cmp	r3, #3
 80159cc:	d032      	beq.n	8015a34 <USBD_StdEPReq+0x240>
 80159ce:	e097      	b.n	8015b00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159d0:	7bbb      	ldrb	r3, [r7, #14]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d007      	beq.n	80159e6 <USBD_StdEPReq+0x1f2>
 80159d6:	7bbb      	ldrb	r3, [r7, #14]
 80159d8:	2b80      	cmp	r3, #128	; 0x80
 80159da:	d004      	beq.n	80159e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80159dc:	6839      	ldr	r1, [r7, #0]
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f000 fbed 	bl	80161be <USBD_CtlError>
                break;
 80159e4:	e091      	b.n	8015b0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80159e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	da0b      	bge.n	8015a06 <USBD_StdEPReq+0x212>
 80159ee:	7bbb      	ldrb	r3, [r7, #14]
 80159f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80159f4:	4613      	mov	r3, r2
 80159f6:	009b      	lsls	r3, r3, #2
 80159f8:	4413      	add	r3, r2
 80159fa:	009b      	lsls	r3, r3, #2
 80159fc:	3310      	adds	r3, #16
 80159fe:	687a      	ldr	r2, [r7, #4]
 8015a00:	4413      	add	r3, r2
 8015a02:	3304      	adds	r3, #4
 8015a04:	e00b      	b.n	8015a1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a06:	7bbb      	ldrb	r3, [r7, #14]
 8015a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	4413      	add	r3, r2
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	4413      	add	r3, r2
 8015a1c:	3304      	adds	r3, #4
 8015a1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	2200      	movs	r2, #0
 8015a24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	2202      	movs	r2, #2
 8015a2a:	4619      	mov	r1, r3
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f000 fc37 	bl	80162a0 <USBD_CtlSendData>
              break;
 8015a32:	e06a      	b.n	8015b0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	da11      	bge.n	8015a60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a3c:	7bbb      	ldrb	r3, [r7, #14]
 8015a3e:	f003 020f 	and.w	r2, r3, #15
 8015a42:	6879      	ldr	r1, [r7, #4]
 8015a44:	4613      	mov	r3, r2
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	4413      	add	r3, r2
 8015a4a:	009b      	lsls	r3, r3, #2
 8015a4c:	440b      	add	r3, r1
 8015a4e:	3324      	adds	r3, #36	; 0x24
 8015a50:	881b      	ldrh	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d117      	bne.n	8015a86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a56:	6839      	ldr	r1, [r7, #0]
 8015a58:	6878      	ldr	r0, [r7, #4]
 8015a5a:	f000 fbb0 	bl	80161be <USBD_CtlError>
                  break;
 8015a5e:	e054      	b.n	8015b0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a60:	7bbb      	ldrb	r3, [r7, #14]
 8015a62:	f003 020f 	and.w	r2, r3, #15
 8015a66:	6879      	ldr	r1, [r7, #4]
 8015a68:	4613      	mov	r3, r2
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	4413      	add	r3, r2
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	440b      	add	r3, r1
 8015a72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a76:	881b      	ldrh	r3, [r3, #0]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d104      	bne.n	8015a86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a7c:	6839      	ldr	r1, [r7, #0]
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f000 fb9d 	bl	80161be <USBD_CtlError>
                  break;
 8015a84:	e041      	b.n	8015b0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	da0b      	bge.n	8015aa6 <USBD_StdEPReq+0x2b2>
 8015a8e:	7bbb      	ldrb	r3, [r7, #14]
 8015a90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a94:	4613      	mov	r3, r2
 8015a96:	009b      	lsls	r3, r3, #2
 8015a98:	4413      	add	r3, r2
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	3310      	adds	r3, #16
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	4413      	add	r3, r2
 8015aa2:	3304      	adds	r3, #4
 8015aa4:	e00b      	b.n	8015abe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015aa6:	7bbb      	ldrb	r3, [r7, #14]
 8015aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015aac:	4613      	mov	r3, r2
 8015aae:	009b      	lsls	r3, r3, #2
 8015ab0:	4413      	add	r3, r2
 8015ab2:	009b      	lsls	r3, r3, #2
 8015ab4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	4413      	add	r3, r2
 8015abc:	3304      	adds	r3, #4
 8015abe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ac0:	7bbb      	ldrb	r3, [r7, #14]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d002      	beq.n	8015acc <USBD_StdEPReq+0x2d8>
 8015ac6:	7bbb      	ldrb	r3, [r7, #14]
 8015ac8:	2b80      	cmp	r3, #128	; 0x80
 8015aca:	d103      	bne.n	8015ad4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	601a      	str	r2, [r3, #0]
 8015ad2:	e00e      	b.n	8015af2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015ad4:	7bbb      	ldrb	r3, [r7, #14]
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f001 f8ed 	bl	8016cb8 <USBD_LL_IsStallEP>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d003      	beq.n	8015aec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	601a      	str	r2, [r3, #0]
 8015aea:	e002      	b.n	8015af2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	2200      	movs	r2, #0
 8015af0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	2202      	movs	r2, #2
 8015af6:	4619      	mov	r1, r3
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f000 fbd1 	bl	80162a0 <USBD_CtlSendData>
              break;
 8015afe:	e004      	b.n	8015b0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015b00:	6839      	ldr	r1, [r7, #0]
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 fb5b 	bl	80161be <USBD_CtlError>
              break;
 8015b08:	bf00      	nop
          }
          break;
 8015b0a:	e004      	b.n	8015b16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015b0c:	6839      	ldr	r1, [r7, #0]
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f000 fb55 	bl	80161be <USBD_CtlError>
          break;
 8015b14:	bf00      	nop
      }
      break;
 8015b16:	e005      	b.n	8015b24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015b18:	6839      	ldr	r1, [r7, #0]
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f000 fb4f 	bl	80161be <USBD_CtlError>
      break;
 8015b20:	e000      	b.n	8015b24 <USBD_StdEPReq+0x330>
      break;
 8015b22:	bf00      	nop
  }

  return ret;
 8015b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3710      	adds	r7, #16
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
	...

08015b30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b42:	2300      	movs	r3, #0
 8015b44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	885b      	ldrh	r3, [r3, #2]
 8015b4a:	0a1b      	lsrs	r3, r3, #8
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	3b01      	subs	r3, #1
 8015b50:	2b06      	cmp	r3, #6
 8015b52:	f200 8128 	bhi.w	8015da6 <USBD_GetDescriptor+0x276>
 8015b56:	a201      	add	r2, pc, #4	; (adr r2, 8015b5c <USBD_GetDescriptor+0x2c>)
 8015b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b5c:	08015b79 	.word	0x08015b79
 8015b60:	08015b91 	.word	0x08015b91
 8015b64:	08015bd1 	.word	0x08015bd1
 8015b68:	08015da7 	.word	0x08015da7
 8015b6c:	08015da7 	.word	0x08015da7
 8015b70:	08015d47 	.word	0x08015d47
 8015b74:	08015d73 	.word	0x08015d73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	7c12      	ldrb	r2, [r2, #16]
 8015b84:	f107 0108 	add.w	r1, r7, #8
 8015b88:	4610      	mov	r0, r2
 8015b8a:	4798      	blx	r3
 8015b8c:	60f8      	str	r0, [r7, #12]
      break;
 8015b8e:	e112      	b.n	8015db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	7c1b      	ldrb	r3, [r3, #16]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d10d      	bne.n	8015bb4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ba0:	f107 0208 	add.w	r2, r7, #8
 8015ba4:	4610      	mov	r0, r2
 8015ba6:	4798      	blx	r3
 8015ba8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	3301      	adds	r3, #1
 8015bae:	2202      	movs	r2, #2
 8015bb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bb2:	e100      	b.n	8015db6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bbc:	f107 0208 	add.w	r2, r7, #8
 8015bc0:	4610      	mov	r0, r2
 8015bc2:	4798      	blx	r3
 8015bc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	3301      	adds	r3, #1
 8015bca:	2202      	movs	r2, #2
 8015bcc:	701a      	strb	r2, [r3, #0]
      break;
 8015bce:	e0f2      	b.n	8015db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	885b      	ldrh	r3, [r3, #2]
 8015bd4:	b2db      	uxtb	r3, r3
 8015bd6:	2b05      	cmp	r3, #5
 8015bd8:	f200 80ac 	bhi.w	8015d34 <USBD_GetDescriptor+0x204>
 8015bdc:	a201      	add	r2, pc, #4	; (adr r2, 8015be4 <USBD_GetDescriptor+0xb4>)
 8015bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015be2:	bf00      	nop
 8015be4:	08015bfd 	.word	0x08015bfd
 8015be8:	08015c31 	.word	0x08015c31
 8015bec:	08015c65 	.word	0x08015c65
 8015bf0:	08015c99 	.word	0x08015c99
 8015bf4:	08015ccd 	.word	0x08015ccd
 8015bf8:	08015d01 	.word	0x08015d01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d00b      	beq.n	8015c20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	7c12      	ldrb	r2, [r2, #16]
 8015c14:	f107 0108 	add.w	r1, r7, #8
 8015c18:	4610      	mov	r0, r2
 8015c1a:	4798      	blx	r3
 8015c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c1e:	e091      	b.n	8015d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c20:	6839      	ldr	r1, [r7, #0]
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f000 facb 	bl	80161be <USBD_CtlError>
            err++;
 8015c28:	7afb      	ldrb	r3, [r7, #11]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8015c2e:	e089      	b.n	8015d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c36:	689b      	ldr	r3, [r3, #8]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d00b      	beq.n	8015c54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c42:	689b      	ldr	r3, [r3, #8]
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	7c12      	ldrb	r2, [r2, #16]
 8015c48:	f107 0108 	add.w	r1, r7, #8
 8015c4c:	4610      	mov	r0, r2
 8015c4e:	4798      	blx	r3
 8015c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c52:	e077      	b.n	8015d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c54:	6839      	ldr	r1, [r7, #0]
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f000 fab1 	bl	80161be <USBD_CtlError>
            err++;
 8015c5c:	7afb      	ldrb	r3, [r7, #11]
 8015c5e:	3301      	adds	r3, #1
 8015c60:	72fb      	strb	r3, [r7, #11]
          break;
 8015c62:	e06f      	b.n	8015d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c6a:	68db      	ldr	r3, [r3, #12]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d00b      	beq.n	8015c88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	687a      	ldr	r2, [r7, #4]
 8015c7a:	7c12      	ldrb	r2, [r2, #16]
 8015c7c:	f107 0108 	add.w	r1, r7, #8
 8015c80:	4610      	mov	r0, r2
 8015c82:	4798      	blx	r3
 8015c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c86:	e05d      	b.n	8015d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c88:	6839      	ldr	r1, [r7, #0]
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f000 fa97 	bl	80161be <USBD_CtlError>
            err++;
 8015c90:	7afb      	ldrb	r3, [r7, #11]
 8015c92:	3301      	adds	r3, #1
 8015c94:	72fb      	strb	r3, [r7, #11]
          break;
 8015c96:	e055      	b.n	8015d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c9e:	691b      	ldr	r3, [r3, #16]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d00b      	beq.n	8015cbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015caa:	691b      	ldr	r3, [r3, #16]
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	7c12      	ldrb	r2, [r2, #16]
 8015cb0:	f107 0108 	add.w	r1, r7, #8
 8015cb4:	4610      	mov	r0, r2
 8015cb6:	4798      	blx	r3
 8015cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cba:	e043      	b.n	8015d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cbc:	6839      	ldr	r1, [r7, #0]
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f000 fa7d 	bl	80161be <USBD_CtlError>
            err++;
 8015cc4:	7afb      	ldrb	r3, [r7, #11]
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8015cca:	e03b      	b.n	8015d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cd2:	695b      	ldr	r3, [r3, #20]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d00b      	beq.n	8015cf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cde:	695b      	ldr	r3, [r3, #20]
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	7c12      	ldrb	r2, [r2, #16]
 8015ce4:	f107 0108 	add.w	r1, r7, #8
 8015ce8:	4610      	mov	r0, r2
 8015cea:	4798      	blx	r3
 8015cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cee:	e029      	b.n	8015d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 fa63 	bl	80161be <USBD_CtlError>
            err++;
 8015cf8:	7afb      	ldrb	r3, [r7, #11]
 8015cfa:	3301      	adds	r3, #1
 8015cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8015cfe:	e021      	b.n	8015d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d06:	699b      	ldr	r3, [r3, #24]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d00b      	beq.n	8015d24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d12:	699b      	ldr	r3, [r3, #24]
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	7c12      	ldrb	r2, [r2, #16]
 8015d18:	f107 0108 	add.w	r1, r7, #8
 8015d1c:	4610      	mov	r0, r2
 8015d1e:	4798      	blx	r3
 8015d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d22:	e00f      	b.n	8015d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d24:	6839      	ldr	r1, [r7, #0]
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f000 fa49 	bl	80161be <USBD_CtlError>
            err++;
 8015d2c:	7afb      	ldrb	r3, [r7, #11]
 8015d2e:	3301      	adds	r3, #1
 8015d30:	72fb      	strb	r3, [r7, #11]
          break;
 8015d32:	e007      	b.n	8015d44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d34:	6839      	ldr	r1, [r7, #0]
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f000 fa41 	bl	80161be <USBD_CtlError>
          err++;
 8015d3c:	7afb      	ldrb	r3, [r7, #11]
 8015d3e:	3301      	adds	r3, #1
 8015d40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015d42:	bf00      	nop
      }
      break;
 8015d44:	e037      	b.n	8015db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	7c1b      	ldrb	r3, [r3, #16]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d109      	bne.n	8015d62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d56:	f107 0208 	add.w	r2, r7, #8
 8015d5a:	4610      	mov	r0, r2
 8015d5c:	4798      	blx	r3
 8015d5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d60:	e029      	b.n	8015db6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d62:	6839      	ldr	r1, [r7, #0]
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f000 fa2a 	bl	80161be <USBD_CtlError>
        err++;
 8015d6a:	7afb      	ldrb	r3, [r7, #11]
 8015d6c:	3301      	adds	r3, #1
 8015d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8015d70:	e021      	b.n	8015db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	7c1b      	ldrb	r3, [r3, #16]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d10d      	bne.n	8015d96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d82:	f107 0208 	add.w	r2, r7, #8
 8015d86:	4610      	mov	r0, r2
 8015d88:	4798      	blx	r3
 8015d8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	3301      	adds	r3, #1
 8015d90:	2207      	movs	r2, #7
 8015d92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d94:	e00f      	b.n	8015db6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d96:	6839      	ldr	r1, [r7, #0]
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f000 fa10 	bl	80161be <USBD_CtlError>
        err++;
 8015d9e:	7afb      	ldrb	r3, [r7, #11]
 8015da0:	3301      	adds	r3, #1
 8015da2:	72fb      	strb	r3, [r7, #11]
      break;
 8015da4:	e007      	b.n	8015db6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015da6:	6839      	ldr	r1, [r7, #0]
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f000 fa08 	bl	80161be <USBD_CtlError>
      err++;
 8015dae:	7afb      	ldrb	r3, [r7, #11]
 8015db0:	3301      	adds	r3, #1
 8015db2:	72fb      	strb	r3, [r7, #11]
      break;
 8015db4:	bf00      	nop
  }

  if (err != 0U)
 8015db6:	7afb      	ldrb	r3, [r7, #11]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d11e      	bne.n	8015dfa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	88db      	ldrh	r3, [r3, #6]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d016      	beq.n	8015df2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015dc4:	893b      	ldrh	r3, [r7, #8]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d00e      	beq.n	8015de8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	88da      	ldrh	r2, [r3, #6]
 8015dce:	893b      	ldrh	r3, [r7, #8]
 8015dd0:	4293      	cmp	r3, r2
 8015dd2:	bf28      	it	cs
 8015dd4:	4613      	movcs	r3, r2
 8015dd6:	b29b      	uxth	r3, r3
 8015dd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015dda:	893b      	ldrh	r3, [r7, #8]
 8015ddc:	461a      	mov	r2, r3
 8015dde:	68f9      	ldr	r1, [r7, #12]
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f000 fa5d 	bl	80162a0 <USBD_CtlSendData>
 8015de6:	e009      	b.n	8015dfc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015de8:	6839      	ldr	r1, [r7, #0]
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f9e7 	bl	80161be <USBD_CtlError>
 8015df0:	e004      	b.n	8015dfc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f000 faae 	bl	8016354 <USBD_CtlSendStatus>
 8015df8:	e000      	b.n	8015dfc <USBD_GetDescriptor+0x2cc>
    return;
 8015dfa:	bf00      	nop
  }
}
 8015dfc:	3710      	adds	r7, #16
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop

08015e04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b084      	sub	sp, #16
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
 8015e0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	889b      	ldrh	r3, [r3, #4]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d131      	bne.n	8015e7a <USBD_SetAddress+0x76>
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	88db      	ldrh	r3, [r3, #6]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d12d      	bne.n	8015e7a <USBD_SetAddress+0x76>
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	885b      	ldrh	r3, [r3, #2]
 8015e22:	2b7f      	cmp	r3, #127	; 0x7f
 8015e24:	d829      	bhi.n	8015e7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	885b      	ldrh	r3, [r3, #2]
 8015e2a:	b2db      	uxtb	r3, r3
 8015e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e38:	b2db      	uxtb	r3, r3
 8015e3a:	2b03      	cmp	r3, #3
 8015e3c:	d104      	bne.n	8015e48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f000 f9bc 	bl	80161be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e46:	e01d      	b.n	8015e84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	7bfa      	ldrb	r2, [r7, #15]
 8015e4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e50:	7bfb      	ldrb	r3, [r7, #15]
 8015e52:	4619      	mov	r1, r3
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f000 ff5b 	bl	8016d10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f000 fa7a 	bl	8016354 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e60:	7bfb      	ldrb	r3, [r7, #15]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d004      	beq.n	8015e70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2202      	movs	r2, #2
 8015e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e6e:	e009      	b.n	8015e84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2201      	movs	r2, #1
 8015e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e78:	e004      	b.n	8015e84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015e7a:	6839      	ldr	r1, [r7, #0]
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 f99e 	bl	80161be <USBD_CtlError>
  }
}
 8015e82:	bf00      	nop
 8015e84:	bf00      	nop
 8015e86:	3710      	adds	r7, #16
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}

08015e8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b084      	sub	sp, #16
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e96:	2300      	movs	r3, #0
 8015e98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	885b      	ldrh	r3, [r3, #2]
 8015e9e:	b2da      	uxtb	r2, r3
 8015ea0:	4b4e      	ldr	r3, [pc, #312]	; (8015fdc <USBD_SetConfig+0x150>)
 8015ea2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ea4:	4b4d      	ldr	r3, [pc, #308]	; (8015fdc <USBD_SetConfig+0x150>)
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	2b01      	cmp	r3, #1
 8015eaa:	d905      	bls.n	8015eb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015eac:	6839      	ldr	r1, [r7, #0]
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f000 f985 	bl	80161be <USBD_CtlError>
    return USBD_FAIL;
 8015eb4:	2303      	movs	r3, #3
 8015eb6:	e08c      	b.n	8015fd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	2b02      	cmp	r3, #2
 8015ec2:	d002      	beq.n	8015eca <USBD_SetConfig+0x3e>
 8015ec4:	2b03      	cmp	r3, #3
 8015ec6:	d029      	beq.n	8015f1c <USBD_SetConfig+0x90>
 8015ec8:	e075      	b.n	8015fb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015eca:	4b44      	ldr	r3, [pc, #272]	; (8015fdc <USBD_SetConfig+0x150>)
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d020      	beq.n	8015f14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015ed2:	4b42      	ldr	r3, [pc, #264]	; (8015fdc <USBD_SetConfig+0x150>)
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	461a      	mov	r2, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015edc:	4b3f      	ldr	r3, [pc, #252]	; (8015fdc <USBD_SetConfig+0x150>)
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	4619      	mov	r1, r3
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f7fe ffe1 	bl	8014eaa <USBD_SetClassConfig>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015eec:	7bfb      	ldrb	r3, [r7, #15]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d008      	beq.n	8015f04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015ef2:	6839      	ldr	r1, [r7, #0]
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f000 f962 	bl	80161be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2202      	movs	r2, #2
 8015efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f02:	e065      	b.n	8015fd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f000 fa25 	bl	8016354 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	2203      	movs	r2, #3
 8015f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f12:	e05d      	b.n	8015fd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f000 fa1d 	bl	8016354 <USBD_CtlSendStatus>
      break;
 8015f1a:	e059      	b.n	8015fd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f1c:	4b2f      	ldr	r3, [pc, #188]	; (8015fdc <USBD_SetConfig+0x150>)
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d112      	bne.n	8015f4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2202      	movs	r2, #2
 8015f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015f2c:	4b2b      	ldr	r3, [pc, #172]	; (8015fdc <USBD_SetConfig+0x150>)
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	461a      	mov	r2, r3
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f36:	4b29      	ldr	r3, [pc, #164]	; (8015fdc <USBD_SetConfig+0x150>)
 8015f38:	781b      	ldrb	r3, [r3, #0]
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f7fe ffd0 	bl	8014ee2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f000 fa06 	bl	8016354 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f48:	e042      	b.n	8015fd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015f4a:	4b24      	ldr	r3, [pc, #144]	; (8015fdc <USBD_SetConfig+0x150>)
 8015f4c:	781b      	ldrb	r3, [r3, #0]
 8015f4e:	461a      	mov	r2, r3
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d02a      	beq.n	8015fae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	4619      	mov	r1, r3
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f7fe ffbe 	bl	8014ee2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f66:	4b1d      	ldr	r3, [pc, #116]	; (8015fdc <USBD_SetConfig+0x150>)
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f70:	4b1a      	ldr	r3, [pc, #104]	; (8015fdc <USBD_SetConfig+0x150>)
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	4619      	mov	r1, r3
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f7fe ff97 	bl	8014eaa <USBD_SetClassConfig>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015f80:	7bfb      	ldrb	r3, [r7, #15]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d00f      	beq.n	8015fa6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 f918 	bl	80161be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	4619      	mov	r1, r3
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f7fe ffa3 	bl	8014ee2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	2202      	movs	r2, #2
 8015fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015fa4:	e014      	b.n	8015fd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 f9d4 	bl	8016354 <USBD_CtlSendStatus>
      break;
 8015fac:	e010      	b.n	8015fd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f000 f9d0 	bl	8016354 <USBD_CtlSendStatus>
      break;
 8015fb4:	e00c      	b.n	8015fd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015fb6:	6839      	ldr	r1, [r7, #0]
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 f900 	bl	80161be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fbe:	4b07      	ldr	r3, [pc, #28]	; (8015fdc <USBD_SetConfig+0x150>)
 8015fc0:	781b      	ldrb	r3, [r3, #0]
 8015fc2:	4619      	mov	r1, r3
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f7fe ff8c 	bl	8014ee2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015fca:	2303      	movs	r3, #3
 8015fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8015fce:	bf00      	nop
  }

  return ret;
 8015fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3710      	adds	r7, #16
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	240014a8 	.word	0x240014a8

08015fe0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	88db      	ldrh	r3, [r3, #6]
 8015fee:	2b01      	cmp	r3, #1
 8015ff0:	d004      	beq.n	8015ffc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015ff2:	6839      	ldr	r1, [r7, #0]
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f000 f8e2 	bl	80161be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015ffa:	e023      	b.n	8016044 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016002:	b2db      	uxtb	r3, r3
 8016004:	2b02      	cmp	r3, #2
 8016006:	dc02      	bgt.n	801600e <USBD_GetConfig+0x2e>
 8016008:	2b00      	cmp	r3, #0
 801600a:	dc03      	bgt.n	8016014 <USBD_GetConfig+0x34>
 801600c:	e015      	b.n	801603a <USBD_GetConfig+0x5a>
 801600e:	2b03      	cmp	r3, #3
 8016010:	d00b      	beq.n	801602a <USBD_GetConfig+0x4a>
 8016012:	e012      	b.n	801603a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2200      	movs	r2, #0
 8016018:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	3308      	adds	r3, #8
 801601e:	2201      	movs	r2, #1
 8016020:	4619      	mov	r1, r3
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f000 f93c 	bl	80162a0 <USBD_CtlSendData>
        break;
 8016028:	e00c      	b.n	8016044 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	3304      	adds	r3, #4
 801602e:	2201      	movs	r2, #1
 8016030:	4619      	mov	r1, r3
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f000 f934 	bl	80162a0 <USBD_CtlSendData>
        break;
 8016038:	e004      	b.n	8016044 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801603a:	6839      	ldr	r1, [r7, #0]
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f000 f8be 	bl	80161be <USBD_CtlError>
        break;
 8016042:	bf00      	nop
}
 8016044:	bf00      	nop
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801605c:	b2db      	uxtb	r3, r3
 801605e:	3b01      	subs	r3, #1
 8016060:	2b02      	cmp	r3, #2
 8016062:	d81e      	bhi.n	80160a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	88db      	ldrh	r3, [r3, #6]
 8016068:	2b02      	cmp	r3, #2
 801606a:	d004      	beq.n	8016076 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801606c:	6839      	ldr	r1, [r7, #0]
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f000 f8a5 	bl	80161be <USBD_CtlError>
        break;
 8016074:	e01a      	b.n	80160ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2201      	movs	r2, #1
 801607a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016082:	2b00      	cmp	r3, #0
 8016084:	d005      	beq.n	8016092 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	68db      	ldr	r3, [r3, #12]
 801608a:	f043 0202 	orr.w	r2, r3, #2
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	330c      	adds	r3, #12
 8016096:	2202      	movs	r2, #2
 8016098:	4619      	mov	r1, r3
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f000 f900 	bl	80162a0 <USBD_CtlSendData>
      break;
 80160a0:	e004      	b.n	80160ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160a2:	6839      	ldr	r1, [r7, #0]
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f000 f88a 	bl	80161be <USBD_CtlError>
      break;
 80160aa:	bf00      	nop
  }
}
 80160ac:	bf00      	nop
 80160ae:	3708      	adds	r7, #8
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	885b      	ldrh	r3, [r3, #2]
 80160c2:	2b01      	cmp	r3, #1
 80160c4:	d107      	bne.n	80160d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2201      	movs	r2, #1
 80160ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f000 f940 	bl	8016354 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80160d4:	e013      	b.n	80160fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	885b      	ldrh	r3, [r3, #2]
 80160da:	2b02      	cmp	r3, #2
 80160dc:	d10b      	bne.n	80160f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	889b      	ldrh	r3, [r3, #4]
 80160e2:	0a1b      	lsrs	r3, r3, #8
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	b2da      	uxtb	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f000 f930 	bl	8016354 <USBD_CtlSendStatus>
}
 80160f4:	e003      	b.n	80160fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80160f6:	6839      	ldr	r1, [r7, #0]
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f000 f860 	bl	80161be <USBD_CtlError>
}
 80160fe:	bf00      	nop
 8016100:	3708      	adds	r7, #8
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}

08016106 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016106:	b580      	push	{r7, lr}
 8016108:	b082      	sub	sp, #8
 801610a:	af00      	add	r7, sp, #0
 801610c:	6078      	str	r0, [r7, #4]
 801610e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016116:	b2db      	uxtb	r3, r3
 8016118:	3b01      	subs	r3, #1
 801611a:	2b02      	cmp	r3, #2
 801611c:	d80b      	bhi.n	8016136 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	885b      	ldrh	r3, [r3, #2]
 8016122:	2b01      	cmp	r3, #1
 8016124:	d10c      	bne.n	8016140 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2200      	movs	r2, #0
 801612a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 f910 	bl	8016354 <USBD_CtlSendStatus>
      }
      break;
 8016134:	e004      	b.n	8016140 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016136:	6839      	ldr	r1, [r7, #0]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f000 f840 	bl	80161be <USBD_CtlError>
      break;
 801613e:	e000      	b.n	8016142 <USBD_ClrFeature+0x3c>
      break;
 8016140:	bf00      	nop
  }
}
 8016142:	bf00      	nop
 8016144:	3708      	adds	r7, #8
 8016146:	46bd      	mov	sp, r7
 8016148:	bd80      	pop	{r7, pc}

0801614a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801614a:	b580      	push	{r7, lr}
 801614c:	b084      	sub	sp, #16
 801614e:	af00      	add	r7, sp, #0
 8016150:	6078      	str	r0, [r7, #4]
 8016152:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	781a      	ldrb	r2, [r3, #0]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	3301      	adds	r3, #1
 8016164:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	781a      	ldrb	r2, [r3, #0]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	3301      	adds	r3, #1
 8016172:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f7ff fa41 	bl	80155fc <SWAPBYTE>
 801617a:	4603      	mov	r3, r0
 801617c:	461a      	mov	r2, r3
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	3301      	adds	r3, #1
 8016186:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	3301      	adds	r3, #1
 801618c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801618e:	68f8      	ldr	r0, [r7, #12]
 8016190:	f7ff fa34 	bl	80155fc <SWAPBYTE>
 8016194:	4603      	mov	r3, r0
 8016196:	461a      	mov	r2, r3
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	3301      	adds	r3, #1
 80161a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	3301      	adds	r3, #1
 80161a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161a8:	68f8      	ldr	r0, [r7, #12]
 80161aa:	f7ff fa27 	bl	80155fc <SWAPBYTE>
 80161ae:	4603      	mov	r3, r0
 80161b0:	461a      	mov	r2, r3
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	80da      	strh	r2, [r3, #6]
}
 80161b6:	bf00      	nop
 80161b8:	3710      	adds	r7, #16
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}

080161be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161be:	b580      	push	{r7, lr}
 80161c0:	b082      	sub	sp, #8
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	6078      	str	r0, [r7, #4]
 80161c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161c8:	2180      	movs	r1, #128	; 0x80
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f000 fd36 	bl	8016c3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161d0:	2100      	movs	r1, #0
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f000 fd32 	bl	8016c3c <USBD_LL_StallEP>
}
 80161d8:	bf00      	nop
 80161da:	3708      	adds	r7, #8
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}

080161e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b086      	sub	sp, #24
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	60f8      	str	r0, [r7, #12]
 80161e8:	60b9      	str	r1, [r7, #8]
 80161ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80161ec:	2300      	movs	r3, #0
 80161ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d036      	beq.n	8016264 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80161fa:	6938      	ldr	r0, [r7, #16]
 80161fc:	f000 f836 	bl	801626c <USBD_GetLen>
 8016200:	4603      	mov	r3, r0
 8016202:	3301      	adds	r3, #1
 8016204:	b29b      	uxth	r3, r3
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	b29a      	uxth	r2, r3
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801620e:	7dfb      	ldrb	r3, [r7, #23]
 8016210:	68ba      	ldr	r2, [r7, #8]
 8016212:	4413      	add	r3, r2
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	7812      	ldrb	r2, [r2, #0]
 8016218:	701a      	strb	r2, [r3, #0]
  idx++;
 801621a:	7dfb      	ldrb	r3, [r7, #23]
 801621c:	3301      	adds	r3, #1
 801621e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016220:	7dfb      	ldrb	r3, [r7, #23]
 8016222:	68ba      	ldr	r2, [r7, #8]
 8016224:	4413      	add	r3, r2
 8016226:	2203      	movs	r2, #3
 8016228:	701a      	strb	r2, [r3, #0]
  idx++;
 801622a:	7dfb      	ldrb	r3, [r7, #23]
 801622c:	3301      	adds	r3, #1
 801622e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016230:	e013      	b.n	801625a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	68ba      	ldr	r2, [r7, #8]
 8016236:	4413      	add	r3, r2
 8016238:	693a      	ldr	r2, [r7, #16]
 801623a:	7812      	ldrb	r2, [r2, #0]
 801623c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	3301      	adds	r3, #1
 8016242:	613b      	str	r3, [r7, #16]
    idx++;
 8016244:	7dfb      	ldrb	r3, [r7, #23]
 8016246:	3301      	adds	r3, #1
 8016248:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801624a:	7dfb      	ldrb	r3, [r7, #23]
 801624c:	68ba      	ldr	r2, [r7, #8]
 801624e:	4413      	add	r3, r2
 8016250:	2200      	movs	r2, #0
 8016252:	701a      	strb	r2, [r3, #0]
    idx++;
 8016254:	7dfb      	ldrb	r3, [r7, #23]
 8016256:	3301      	adds	r3, #1
 8016258:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d1e7      	bne.n	8016232 <USBD_GetString+0x52>
 8016262:	e000      	b.n	8016266 <USBD_GetString+0x86>
    return;
 8016264:	bf00      	nop
  }
}
 8016266:	3718      	adds	r7, #24
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}

0801626c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801626c:	b480      	push	{r7}
 801626e:	b085      	sub	sp, #20
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016274:	2300      	movs	r3, #0
 8016276:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801627c:	e005      	b.n	801628a <USBD_GetLen+0x1e>
  {
    len++;
 801627e:	7bfb      	ldrb	r3, [r7, #15]
 8016280:	3301      	adds	r3, #1
 8016282:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	3301      	adds	r3, #1
 8016288:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d1f5      	bne.n	801627e <USBD_GetLen+0x12>
  }

  return len;
 8016292:	7bfb      	ldrb	r3, [r7, #15]
}
 8016294:	4618      	mov	r0, r3
 8016296:	3714      	adds	r7, #20
 8016298:	46bd      	mov	sp, r7
 801629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629e:	4770      	bx	lr

080162a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	60f8      	str	r0, [r7, #12]
 80162a8:	60b9      	str	r1, [r7, #8]
 80162aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2202      	movs	r2, #2
 80162b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	687a      	ldr	r2, [r7, #4]
 80162b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	687a      	ldr	r2, [r7, #4]
 80162be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	68ba      	ldr	r2, [r7, #8]
 80162c4:	2100      	movs	r1, #0
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	f000 fd41 	bl	8016d4e <USBD_LL_Transmit>

  return USBD_OK;
 80162cc:	2300      	movs	r3, #0
}
 80162ce:	4618      	mov	r0, r3
 80162d0:	3710      	adds	r7, #16
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}

080162d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162d6:	b580      	push	{r7, lr}
 80162d8:	b084      	sub	sp, #16
 80162da:	af00      	add	r7, sp, #0
 80162dc:	60f8      	str	r0, [r7, #12]
 80162de:	60b9      	str	r1, [r7, #8]
 80162e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	68ba      	ldr	r2, [r7, #8]
 80162e6:	2100      	movs	r1, #0
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	f000 fd30 	bl	8016d4e <USBD_LL_Transmit>

  return USBD_OK;
 80162ee:	2300      	movs	r3, #0
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3710      	adds	r7, #16
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}

080162f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	60f8      	str	r0, [r7, #12]
 8016300:	60b9      	str	r1, [r7, #8]
 8016302:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	2203      	movs	r2, #3
 8016308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	687a      	ldr	r2, [r7, #4]
 8016310:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	68ba      	ldr	r2, [r7, #8]
 8016320:	2100      	movs	r1, #0
 8016322:	68f8      	ldr	r0, [r7, #12]
 8016324:	f000 fd34 	bl	8016d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016328:	2300      	movs	r3, #0
}
 801632a:	4618      	mov	r0, r3
 801632c:	3710      	adds	r7, #16
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}

08016332 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b084      	sub	sp, #16
 8016336:	af00      	add	r7, sp, #0
 8016338:	60f8      	str	r0, [r7, #12]
 801633a:	60b9      	str	r1, [r7, #8]
 801633c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	2100      	movs	r1, #0
 8016344:	68f8      	ldr	r0, [r7, #12]
 8016346:	f000 fd23 	bl	8016d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801634a:	2300      	movs	r3, #0
}
 801634c:	4618      	mov	r0, r3
 801634e:	3710      	adds	r7, #16
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2204      	movs	r2, #4
 8016360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016364:	2300      	movs	r3, #0
 8016366:	2200      	movs	r2, #0
 8016368:	2100      	movs	r1, #0
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 fcef 	bl	8016d4e <USBD_LL_Transmit>

  return USBD_OK;
 8016370:	2300      	movs	r3, #0
}
 8016372:	4618      	mov	r0, r3
 8016374:	3708      	adds	r7, #8
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}

0801637a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801637a:	b580      	push	{r7, lr}
 801637c:	b082      	sub	sp, #8
 801637e:	af00      	add	r7, sp, #0
 8016380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2205      	movs	r2, #5
 8016386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801638a:	2300      	movs	r3, #0
 801638c:	2200      	movs	r2, #0
 801638e:	2100      	movs	r1, #0
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f000 fcfd 	bl	8016d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016396:	2300      	movs	r3, #0
}
 8016398:	4618      	mov	r0, r3
 801639a:	3708      	adds	r7, #8
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}

080163a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80163a0:	b480      	push	{r7}
 80163a2:	b087      	sub	sp, #28
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	60f8      	str	r0, [r7, #12]
 80163a8:	60b9      	str	r1, [r7, #8]
 80163aa:	4613      	mov	r3, r2
 80163ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80163ae:	2301      	movs	r3, #1
 80163b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80163b2:	2300      	movs	r3, #0
 80163b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80163b6:	4b1f      	ldr	r3, [pc, #124]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163b8:	7a5b      	ldrb	r3, [r3, #9]
 80163ba:	b2db      	uxtb	r3, r3
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d131      	bne.n	8016424 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80163c0:	4b1c      	ldr	r3, [pc, #112]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163c2:	7a5b      	ldrb	r3, [r3, #9]
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	461a      	mov	r2, r3
 80163c8:	4b1a      	ldr	r3, [pc, #104]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163ca:	2100      	movs	r1, #0
 80163cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80163ce:	4b19      	ldr	r3, [pc, #100]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163d0:	7a5b      	ldrb	r3, [r3, #9]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	4a17      	ldr	r2, [pc, #92]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	4413      	add	r3, r2
 80163da:	68fa      	ldr	r2, [r7, #12]
 80163dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80163de:	4b15      	ldr	r3, [pc, #84]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163e0:	7a5b      	ldrb	r3, [r3, #9]
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	461a      	mov	r2, r3
 80163e6:	4b13      	ldr	r3, [pc, #76]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163e8:	4413      	add	r3, r2
 80163ea:	79fa      	ldrb	r2, [r7, #7]
 80163ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80163ee:	4b11      	ldr	r3, [pc, #68]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163f0:	7a5b      	ldrb	r3, [r3, #9]
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	1c5a      	adds	r2, r3, #1
 80163f6:	b2d1      	uxtb	r1, r2
 80163f8:	4a0e      	ldr	r2, [pc, #56]	; (8016434 <FATFS_LinkDriverEx+0x94>)
 80163fa:	7251      	strb	r1, [r2, #9]
 80163fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80163fe:	7dbb      	ldrb	r3, [r7, #22]
 8016400:	3330      	adds	r3, #48	; 0x30
 8016402:	b2da      	uxtb	r2, r3
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016408:	68bb      	ldr	r3, [r7, #8]
 801640a:	3301      	adds	r3, #1
 801640c:	223a      	movs	r2, #58	; 0x3a
 801640e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	3302      	adds	r3, #2
 8016414:	222f      	movs	r2, #47	; 0x2f
 8016416:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	3303      	adds	r3, #3
 801641c:	2200      	movs	r2, #0
 801641e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016420:	2300      	movs	r3, #0
 8016422:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016424:	7dfb      	ldrb	r3, [r7, #23]
}
 8016426:	4618      	mov	r0, r3
 8016428:	371c      	adds	r7, #28
 801642a:	46bd      	mov	sp, r7
 801642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016430:	4770      	bx	lr
 8016432:	bf00      	nop
 8016434:	240014ac 	.word	0x240014ac

08016438 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b082      	sub	sp, #8
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016442:	2200      	movs	r2, #0
 8016444:	6839      	ldr	r1, [r7, #0]
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f7ff ffaa 	bl	80163a0 <FATFS_LinkDriverEx>
 801644c:	4603      	mov	r3, r0
}
 801644e:	4618      	mov	r0, r3
 8016450:	3708      	adds	r7, #8
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
	...

08016458 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801645c:	2201      	movs	r2, #1
 801645e:	4913      	ldr	r1, [pc, #76]	; (80164ac <MX_USB_DEVICE_Init+0x54>)
 8016460:	4813      	ldr	r0, [pc, #76]	; (80164b0 <MX_USB_DEVICE_Init+0x58>)
 8016462:	f7fe fca5 	bl	8014db0 <USBD_Init>
 8016466:	4603      	mov	r3, r0
 8016468:	2b00      	cmp	r3, #0
 801646a:	d001      	beq.n	8016470 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801646c:	f7ec fa2a 	bl	80028c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016470:	4910      	ldr	r1, [pc, #64]	; (80164b4 <MX_USB_DEVICE_Init+0x5c>)
 8016472:	480f      	ldr	r0, [pc, #60]	; (80164b0 <MX_USB_DEVICE_Init+0x58>)
 8016474:	f7fe fccc 	bl	8014e10 <USBD_RegisterClass>
 8016478:	4603      	mov	r3, r0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d001      	beq.n	8016482 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801647e:	f7ec fa21 	bl	80028c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016482:	490d      	ldr	r1, [pc, #52]	; (80164b8 <MX_USB_DEVICE_Init+0x60>)
 8016484:	480a      	ldr	r0, [pc, #40]	; (80164b0 <MX_USB_DEVICE_Init+0x58>)
 8016486:	f7fe fbc3 	bl	8014c10 <USBD_CDC_RegisterInterface>
 801648a:	4603      	mov	r3, r0
 801648c:	2b00      	cmp	r3, #0
 801648e:	d001      	beq.n	8016494 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016490:	f7ec fa18 	bl	80028c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016494:	4806      	ldr	r0, [pc, #24]	; (80164b0 <MX_USB_DEVICE_Init+0x58>)
 8016496:	f7fe fcf1 	bl	8014e7c <USBD_Start>
 801649a:	4603      	mov	r3, r0
 801649c:	2b00      	cmp	r3, #0
 801649e:	d001      	beq.n	80164a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80164a0:	f7ec fa10 	bl	80028c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80164a4:	f7f3 f960 	bl	8009768 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80164a8:	bf00      	nop
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	240000b0 	.word	0x240000b0
 80164b0:	240014b8 	.word	0x240014b8
 80164b4:	2400001c 	.word	0x2400001c
 80164b8:	2400009c 	.word	0x2400009c

080164bc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80164c0:	2200      	movs	r2, #0
 80164c2:	4905      	ldr	r1, [pc, #20]	; (80164d8 <CDC_Init_HS+0x1c>)
 80164c4:	4805      	ldr	r0, [pc, #20]	; (80164dc <CDC_Init_HS+0x20>)
 80164c6:	f7fe fbbd 	bl	8014c44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80164ca:	4905      	ldr	r1, [pc, #20]	; (80164e0 <CDC_Init_HS+0x24>)
 80164cc:	4803      	ldr	r0, [pc, #12]	; (80164dc <CDC_Init_HS+0x20>)
 80164ce:	f7fe fbdb 	bl	8014c88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80164d2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	24001f94 	.word	0x24001f94
 80164dc:	240014b8 	.word	0x240014b8
 80164e0:	24001794 	.word	0x24001794

080164e4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80164e4:	b480      	push	{r7}
 80164e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80164e8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	46bd      	mov	sp, r7
 80164ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f2:	4770      	bx	lr

080164f4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80164f4:	b480      	push	{r7}
 80164f6:	b083      	sub	sp, #12
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	4603      	mov	r3, r0
 80164fc:	6039      	str	r1, [r7, #0]
 80164fe:	71fb      	strb	r3, [r7, #7]
 8016500:	4613      	mov	r3, r2
 8016502:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016504:	79fb      	ldrb	r3, [r7, #7]
 8016506:	2b23      	cmp	r3, #35	; 0x23
 8016508:	d84a      	bhi.n	80165a0 <CDC_Control_HS+0xac>
 801650a:	a201      	add	r2, pc, #4	; (adr r2, 8016510 <CDC_Control_HS+0x1c>)
 801650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016510:	080165a1 	.word	0x080165a1
 8016514:	080165a1 	.word	0x080165a1
 8016518:	080165a1 	.word	0x080165a1
 801651c:	080165a1 	.word	0x080165a1
 8016520:	080165a1 	.word	0x080165a1
 8016524:	080165a1 	.word	0x080165a1
 8016528:	080165a1 	.word	0x080165a1
 801652c:	080165a1 	.word	0x080165a1
 8016530:	080165a1 	.word	0x080165a1
 8016534:	080165a1 	.word	0x080165a1
 8016538:	080165a1 	.word	0x080165a1
 801653c:	080165a1 	.word	0x080165a1
 8016540:	080165a1 	.word	0x080165a1
 8016544:	080165a1 	.word	0x080165a1
 8016548:	080165a1 	.word	0x080165a1
 801654c:	080165a1 	.word	0x080165a1
 8016550:	080165a1 	.word	0x080165a1
 8016554:	080165a1 	.word	0x080165a1
 8016558:	080165a1 	.word	0x080165a1
 801655c:	080165a1 	.word	0x080165a1
 8016560:	080165a1 	.word	0x080165a1
 8016564:	080165a1 	.word	0x080165a1
 8016568:	080165a1 	.word	0x080165a1
 801656c:	080165a1 	.word	0x080165a1
 8016570:	080165a1 	.word	0x080165a1
 8016574:	080165a1 	.word	0x080165a1
 8016578:	080165a1 	.word	0x080165a1
 801657c:	080165a1 	.word	0x080165a1
 8016580:	080165a1 	.word	0x080165a1
 8016584:	080165a1 	.word	0x080165a1
 8016588:	080165a1 	.word	0x080165a1
 801658c:	080165a1 	.word	0x080165a1
 8016590:	080165a1 	.word	0x080165a1
 8016594:	080165a1 	.word	0x080165a1
 8016598:	080165a1 	.word	0x080165a1
 801659c:	080165a1 	.word	0x080165a1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80165a0:	bf00      	nop
  }

  return (USBD_OK);
 80165a2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	370c      	adds	r7, #12
 80165a8:	46bd      	mov	sp, r7
 80165aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ae:	4770      	bx	lr

080165b0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80165ba:	6879      	ldr	r1, [r7, #4]
 80165bc:	4805      	ldr	r0, [pc, #20]	; (80165d4 <CDC_Receive_HS+0x24>)
 80165be:	f7fe fb63 	bl	8014c88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80165c2:	4804      	ldr	r0, [pc, #16]	; (80165d4 <CDC_Receive_HS+0x24>)
 80165c4:	f7fe fbbe 	bl	8014d44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80165c8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3708      	adds	r7, #8
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}
 80165d2:	bf00      	nop
 80165d4:	240014b8 	.word	0x240014b8

080165d8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
 80165e0:	460b      	mov	r3, r1
 80165e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80165e4:	2300      	movs	r3, #0
 80165e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80165e8:	4b0d      	ldr	r3, [pc, #52]	; (8016620 <CDC_Transmit_HS+0x48>)
 80165ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80165ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d001      	beq.n	80165fe <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80165fa:	2301      	movs	r3, #1
 80165fc:	e00b      	b.n	8016616 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80165fe:	887b      	ldrh	r3, [r7, #2]
 8016600:	461a      	mov	r2, r3
 8016602:	6879      	ldr	r1, [r7, #4]
 8016604:	4806      	ldr	r0, [pc, #24]	; (8016620 <CDC_Transmit_HS+0x48>)
 8016606:	f7fe fb1d 	bl	8014c44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801660a:	4805      	ldr	r0, [pc, #20]	; (8016620 <CDC_Transmit_HS+0x48>)
 801660c:	f7fe fb5a 	bl	8014cc4 <USBD_CDC_TransmitPacket>
 8016610:	4603      	mov	r3, r0
 8016612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016614:	7bfb      	ldrb	r3, [r7, #15]
}
 8016616:	4618      	mov	r0, r3
 8016618:	3710      	adds	r7, #16
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	240014b8 	.word	0x240014b8

08016624 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016624:	b480      	push	{r7}
 8016626:	b087      	sub	sp, #28
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	4613      	mov	r3, r2
 8016630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016632:	2300      	movs	r3, #0
 8016634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801663a:	4618      	mov	r0, r3
 801663c:	371c      	adds	r7, #28
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr
	...

08016648 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	4603      	mov	r3, r0
 8016650:	6039      	str	r1, [r7, #0]
 8016652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	2212      	movs	r2, #18
 8016658:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801665a:	4b03      	ldr	r3, [pc, #12]	; (8016668 <USBD_HS_DeviceDescriptor+0x20>)
}
 801665c:	4618      	mov	r0, r3
 801665e:	370c      	adds	r7, #12
 8016660:	46bd      	mov	sp, r7
 8016662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016666:	4770      	bx	lr
 8016668:	240000cc 	.word	0x240000cc

0801666c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	4603      	mov	r3, r0
 8016674:	6039      	str	r1, [r7, #0]
 8016676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	2204      	movs	r2, #4
 801667c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801667e:	4b03      	ldr	r3, [pc, #12]	; (801668c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016680:	4618      	mov	r0, r3
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr
 801668c:	240000e0 	.word	0x240000e0

08016690 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b082      	sub	sp, #8
 8016694:	af00      	add	r7, sp, #0
 8016696:	4603      	mov	r3, r0
 8016698:	6039      	str	r1, [r7, #0]
 801669a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801669c:	79fb      	ldrb	r3, [r7, #7]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d105      	bne.n	80166ae <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166a2:	683a      	ldr	r2, [r7, #0]
 80166a4:	4907      	ldr	r1, [pc, #28]	; (80166c4 <USBD_HS_ProductStrDescriptor+0x34>)
 80166a6:	4808      	ldr	r0, [pc, #32]	; (80166c8 <USBD_HS_ProductStrDescriptor+0x38>)
 80166a8:	f7ff fd9a 	bl	80161e0 <USBD_GetString>
 80166ac:	e004      	b.n	80166b8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166ae:	683a      	ldr	r2, [r7, #0]
 80166b0:	4904      	ldr	r1, [pc, #16]	; (80166c4 <USBD_HS_ProductStrDescriptor+0x34>)
 80166b2:	4805      	ldr	r0, [pc, #20]	; (80166c8 <USBD_HS_ProductStrDescriptor+0x38>)
 80166b4:	f7ff fd94 	bl	80161e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80166b8:	4b02      	ldr	r3, [pc, #8]	; (80166c4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3708      	adds	r7, #8
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	24002794 	.word	0x24002794
 80166c8:	080179a8 	.word	0x080179a8

080166cc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	4603      	mov	r3, r0
 80166d4:	6039      	str	r1, [r7, #0]
 80166d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80166d8:	683a      	ldr	r2, [r7, #0]
 80166da:	4904      	ldr	r1, [pc, #16]	; (80166ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80166dc:	4804      	ldr	r0, [pc, #16]	; (80166f0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80166de:	f7ff fd7f 	bl	80161e0 <USBD_GetString>
  return USBD_StrDesc;
 80166e2:	4b02      	ldr	r3, [pc, #8]	; (80166ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3708      	adds	r7, #8
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}
 80166ec:	24002794 	.word	0x24002794
 80166f0:	080179c4 	.word	0x080179c4

080166f4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b082      	sub	sp, #8
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	4603      	mov	r3, r0
 80166fc:	6039      	str	r1, [r7, #0]
 80166fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	221a      	movs	r2, #26
 8016704:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016706:	f000 f843 	bl	8016790 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801670a:	4b02      	ldr	r3, [pc, #8]	; (8016714 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801670c:	4618      	mov	r0, r3
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}
 8016714:	240000e4 	.word	0x240000e4

08016718 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	4603      	mov	r3, r0
 8016720:	6039      	str	r1, [r7, #0]
 8016722:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016724:	79fb      	ldrb	r3, [r7, #7]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d105      	bne.n	8016736 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801672a:	683a      	ldr	r2, [r7, #0]
 801672c:	4907      	ldr	r1, [pc, #28]	; (801674c <USBD_HS_ConfigStrDescriptor+0x34>)
 801672e:	4808      	ldr	r0, [pc, #32]	; (8016750 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016730:	f7ff fd56 	bl	80161e0 <USBD_GetString>
 8016734:	e004      	b.n	8016740 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016736:	683a      	ldr	r2, [r7, #0]
 8016738:	4904      	ldr	r1, [pc, #16]	; (801674c <USBD_HS_ConfigStrDescriptor+0x34>)
 801673a:	4805      	ldr	r0, [pc, #20]	; (8016750 <USBD_HS_ConfigStrDescriptor+0x38>)
 801673c:	f7ff fd50 	bl	80161e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016740:	4b02      	ldr	r3, [pc, #8]	; (801674c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016742:	4618      	mov	r0, r3
 8016744:	3708      	adds	r7, #8
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
 801674a:	bf00      	nop
 801674c:	24002794 	.word	0x24002794
 8016750:	080179c8 	.word	0x080179c8

08016754 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	4603      	mov	r3, r0
 801675c:	6039      	str	r1, [r7, #0]
 801675e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016760:	79fb      	ldrb	r3, [r7, #7]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d105      	bne.n	8016772 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016766:	683a      	ldr	r2, [r7, #0]
 8016768:	4907      	ldr	r1, [pc, #28]	; (8016788 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801676a:	4808      	ldr	r0, [pc, #32]	; (801678c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801676c:	f7ff fd38 	bl	80161e0 <USBD_GetString>
 8016770:	e004      	b.n	801677c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016772:	683a      	ldr	r2, [r7, #0]
 8016774:	4904      	ldr	r1, [pc, #16]	; (8016788 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016776:	4805      	ldr	r0, [pc, #20]	; (801678c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016778:	f7ff fd32 	bl	80161e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801677c:	4b02      	ldr	r3, [pc, #8]	; (8016788 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801677e:	4618      	mov	r0, r3
 8016780:	3708      	adds	r7, #8
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	24002794 	.word	0x24002794
 801678c:	080179d4 	.word	0x080179d4

08016790 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b084      	sub	sp, #16
 8016794:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016796:	4b0f      	ldr	r3, [pc, #60]	; (80167d4 <Get_SerialNum+0x44>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801679c:	4b0e      	ldr	r3, [pc, #56]	; (80167d8 <Get_SerialNum+0x48>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80167a2:	4b0e      	ldr	r3, [pc, #56]	; (80167dc <Get_SerialNum+0x4c>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80167a8:	68fa      	ldr	r2, [r7, #12]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	4413      	add	r3, r2
 80167ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d009      	beq.n	80167ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80167b6:	2208      	movs	r2, #8
 80167b8:	4909      	ldr	r1, [pc, #36]	; (80167e0 <Get_SerialNum+0x50>)
 80167ba:	68f8      	ldr	r0, [r7, #12]
 80167bc:	f000 f814 	bl	80167e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80167c0:	2204      	movs	r2, #4
 80167c2:	4908      	ldr	r1, [pc, #32]	; (80167e4 <Get_SerialNum+0x54>)
 80167c4:	68b8      	ldr	r0, [r7, #8]
 80167c6:	f000 f80f 	bl	80167e8 <IntToUnicode>
  }
}
 80167ca:	bf00      	nop
 80167cc:	3710      	adds	r7, #16
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	1ff1e800 	.word	0x1ff1e800
 80167d8:	1ff1e804 	.word	0x1ff1e804
 80167dc:	1ff1e808 	.word	0x1ff1e808
 80167e0:	240000e6 	.word	0x240000e6
 80167e4:	240000f6 	.word	0x240000f6

080167e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80167e8:	b480      	push	{r7}
 80167ea:	b087      	sub	sp, #28
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	60b9      	str	r1, [r7, #8]
 80167f2:	4613      	mov	r3, r2
 80167f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80167f6:	2300      	movs	r3, #0
 80167f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80167fa:	2300      	movs	r3, #0
 80167fc:	75fb      	strb	r3, [r7, #23]
 80167fe:	e027      	b.n	8016850 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	0f1b      	lsrs	r3, r3, #28
 8016804:	2b09      	cmp	r3, #9
 8016806:	d80b      	bhi.n	8016820 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	0f1b      	lsrs	r3, r3, #28
 801680c:	b2da      	uxtb	r2, r3
 801680e:	7dfb      	ldrb	r3, [r7, #23]
 8016810:	005b      	lsls	r3, r3, #1
 8016812:	4619      	mov	r1, r3
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	440b      	add	r3, r1
 8016818:	3230      	adds	r2, #48	; 0x30
 801681a:	b2d2      	uxtb	r2, r2
 801681c:	701a      	strb	r2, [r3, #0]
 801681e:	e00a      	b.n	8016836 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	0f1b      	lsrs	r3, r3, #28
 8016824:	b2da      	uxtb	r2, r3
 8016826:	7dfb      	ldrb	r3, [r7, #23]
 8016828:	005b      	lsls	r3, r3, #1
 801682a:	4619      	mov	r1, r3
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	440b      	add	r3, r1
 8016830:	3237      	adds	r2, #55	; 0x37
 8016832:	b2d2      	uxtb	r2, r2
 8016834:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	011b      	lsls	r3, r3, #4
 801683a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801683c:	7dfb      	ldrb	r3, [r7, #23]
 801683e:	005b      	lsls	r3, r3, #1
 8016840:	3301      	adds	r3, #1
 8016842:	68ba      	ldr	r2, [r7, #8]
 8016844:	4413      	add	r3, r2
 8016846:	2200      	movs	r2, #0
 8016848:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801684a:	7dfb      	ldrb	r3, [r7, #23]
 801684c:	3301      	adds	r3, #1
 801684e:	75fb      	strb	r3, [r7, #23]
 8016850:	7dfa      	ldrb	r2, [r7, #23]
 8016852:	79fb      	ldrb	r3, [r7, #7]
 8016854:	429a      	cmp	r2, r3
 8016856:	d3d3      	bcc.n	8016800 <IntToUnicode+0x18>
  }
}
 8016858:	bf00      	nop
 801685a:	bf00      	nop
 801685c:	371c      	adds	r7, #28
 801685e:	46bd      	mov	sp, r7
 8016860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016864:	4770      	bx	lr
	...

08016868 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b0b2      	sub	sp, #200	; 0xc8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016870:	f107 0310 	add.w	r3, r7, #16
 8016874:	22b8      	movs	r2, #184	; 0xb8
 8016876:	2100      	movs	r1, #0
 8016878:	4618      	mov	r0, r3
 801687a:	f000 fb39 	bl	8016ef0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	4a1a      	ldr	r2, [pc, #104]	; (80168ec <HAL_PCD_MspInit+0x84>)
 8016884:	4293      	cmp	r3, r2
 8016886:	d12c      	bne.n	80168e2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016888:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801688c:	f04f 0300 	mov.w	r3, #0
 8016890:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016894:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801689c:	f107 0310 	add.w	r3, r7, #16
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7f3 ff41 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d001      	beq.n	80168b0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80168ac:	f7ec f80a 	bl	80028c4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80168b0:	f7f2 ff5a 	bl	8009768 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80168b4:	4b0e      	ldr	r3, [pc, #56]	; (80168f0 <HAL_PCD_MspInit+0x88>)
 80168b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168ba:	4a0d      	ldr	r2, [pc, #52]	; (80168f0 <HAL_PCD_MspInit+0x88>)
 80168bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80168c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80168c4:	4b0a      	ldr	r3, [pc, #40]	; (80168f0 <HAL_PCD_MspInit+0x88>)
 80168c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80168ce:	60fb      	str	r3, [r7, #12]
 80168d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80168d2:	2200      	movs	r2, #0
 80168d4:	2100      	movs	r1, #0
 80168d6:	204d      	movs	r0, #77	; 0x4d
 80168d8:	f7ee fce3 	bl	80052a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80168dc:	204d      	movs	r0, #77	; 0x4d
 80168de:	f7ee fcfa 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80168e2:	bf00      	nop
 80168e4:	37c8      	adds	r7, #200	; 0xc8
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	40040000 	.word	0x40040000
 80168f0:	58024400 	.word	0x58024400

080168f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016908:	4619      	mov	r1, r3
 801690a:	4610      	mov	r0, r2
 801690c:	f7fe fb03 	bl	8014f16 <USBD_LL_SetupStage>
}
 8016910:	bf00      	nop
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	460b      	mov	r3, r1
 8016922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801692a:	78fa      	ldrb	r2, [r7, #3]
 801692c:	6879      	ldr	r1, [r7, #4]
 801692e:	4613      	mov	r3, r2
 8016930:	00db      	lsls	r3, r3, #3
 8016932:	4413      	add	r3, r2
 8016934:	009b      	lsls	r3, r3, #2
 8016936:	440b      	add	r3, r1
 8016938:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801693c:	681a      	ldr	r2, [r3, #0]
 801693e:	78fb      	ldrb	r3, [r7, #3]
 8016940:	4619      	mov	r1, r3
 8016942:	f7fe fb3d 	bl	8014fc0 <USBD_LL_DataOutStage>
}
 8016946:	bf00      	nop
 8016948:	3708      	adds	r7, #8
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}

0801694e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801694e:	b580      	push	{r7, lr}
 8016950:	b082      	sub	sp, #8
 8016952:	af00      	add	r7, sp, #0
 8016954:	6078      	str	r0, [r7, #4]
 8016956:	460b      	mov	r3, r1
 8016958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016960:	78fa      	ldrb	r2, [r7, #3]
 8016962:	6879      	ldr	r1, [r7, #4]
 8016964:	4613      	mov	r3, r2
 8016966:	00db      	lsls	r3, r3, #3
 8016968:	4413      	add	r3, r2
 801696a:	009b      	lsls	r3, r3, #2
 801696c:	440b      	add	r3, r1
 801696e:	3348      	adds	r3, #72	; 0x48
 8016970:	681a      	ldr	r2, [r3, #0]
 8016972:	78fb      	ldrb	r3, [r7, #3]
 8016974:	4619      	mov	r1, r3
 8016976:	f7fe fbd6 	bl	8015126 <USBD_LL_DataInStage>
}
 801697a:	bf00      	nop
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b082      	sub	sp, #8
 8016986:	af00      	add	r7, sp, #0
 8016988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016990:	4618      	mov	r0, r3
 8016992:	f7fe fd10 	bl	80153b6 <USBD_LL_SOF>
}
 8016996:	bf00      	nop
 8016998:	3708      	adds	r7, #8
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}

0801699e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801699e:	b580      	push	{r7, lr}
 80169a0:	b084      	sub	sp, #16
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80169a6:	2301      	movs	r3, #1
 80169a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	691b      	ldr	r3, [r3, #16]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d102      	bne.n	80169b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80169b2:	2300      	movs	r3, #0
 80169b4:	73fb      	strb	r3, [r7, #15]
 80169b6:	e008      	b.n	80169ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	691b      	ldr	r3, [r3, #16]
 80169bc:	2b02      	cmp	r3, #2
 80169be:	d102      	bne.n	80169c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80169c0:	2301      	movs	r3, #1
 80169c2:	73fb      	strb	r3, [r7, #15]
 80169c4:	e001      	b.n	80169ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80169c6:	f7eb ff7d 	bl	80028c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169d0:	7bfa      	ldrb	r2, [r7, #15]
 80169d2:	4611      	mov	r1, r2
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7fe fcaa 	bl	801532e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7fe fc52 	bl	801528a <USBD_LL_Reset>
}
 80169e6:	bf00      	nop
 80169e8:	3710      	adds	r7, #16
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
	...

080169f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b082      	sub	sp, #8
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7fe fca5 	bl	801534e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	687a      	ldr	r2, [r7, #4]
 8016a10:	6812      	ldr	r2, [r2, #0]
 8016a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016a16:	f043 0301 	orr.w	r3, r3, #1
 8016a1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6a1b      	ldr	r3, [r3, #32]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d005      	beq.n	8016a30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a24:	4b04      	ldr	r3, [pc, #16]	; (8016a38 <HAL_PCD_SuspendCallback+0x48>)
 8016a26:	691b      	ldr	r3, [r3, #16]
 8016a28:	4a03      	ldr	r2, [pc, #12]	; (8016a38 <HAL_PCD_SuspendCallback+0x48>)
 8016a2a:	f043 0306 	orr.w	r3, r3, #6
 8016a2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a30:	bf00      	nop
 8016a32:	3708      	adds	r7, #8
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}
 8016a38:	e000ed00 	.word	0xe000ed00

08016a3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7fe fc9b 	bl	8015386 <USBD_LL_Resume>
}
 8016a50:	bf00      	nop
 8016a52:	3708      	adds	r7, #8
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	460b      	mov	r3, r1
 8016a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a6a:	78fa      	ldrb	r2, [r7, #3]
 8016a6c:	4611      	mov	r1, r2
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7fe fcf3 	bl	801545a <USBD_LL_IsoOUTIncomplete>
}
 8016a74:	bf00      	nop
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b082      	sub	sp, #8
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	460b      	mov	r3, r1
 8016a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a8e:	78fa      	ldrb	r2, [r7, #3]
 8016a90:	4611      	mov	r1, r2
 8016a92:	4618      	mov	r0, r3
 8016a94:	f7fe fcaf 	bl	80153f6 <USBD_LL_IsoINIncomplete>
}
 8016a98:	bf00      	nop
 8016a9a:	3708      	adds	r7, #8
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7fe fd05 	bl	80154be <USBD_LL_DevConnected>
}
 8016ab4:	bf00      	nop
 8016ab6:	3708      	adds	r7, #8
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7fe fd02 	bl	80154d4 <USBD_LL_DevDisconnected>
}
 8016ad0:	bf00      	nop
 8016ad2:	3708      	adds	r7, #8
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	781b      	ldrb	r3, [r3, #0]
 8016ae4:	2b01      	cmp	r3, #1
 8016ae6:	d140      	bne.n	8016b6a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016ae8:	4a22      	ldr	r2, [pc, #136]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	4a20      	ldr	r2, [pc, #128]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016af4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016af8:	4b1e      	ldr	r3, [pc, #120]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016afa:	4a1f      	ldr	r2, [pc, #124]	; (8016b78 <USBD_LL_Init+0xa0>)
 8016afc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016afe:	4b1d      	ldr	r3, [pc, #116]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b00:	2209      	movs	r2, #9
 8016b02:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016b04:	4b1b      	ldr	r3, [pc, #108]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b06:	2202      	movs	r2, #2
 8016b08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016b0a:	4b1a      	ldr	r3, [pc, #104]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016b10:	4b18      	ldr	r3, [pc, #96]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b12:	2202      	movs	r2, #2
 8016b14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016b16:	4b17      	ldr	r3, [pc, #92]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b18:	2200      	movs	r2, #0
 8016b1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016b1c:	4b15      	ldr	r3, [pc, #84]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b1e:	2200      	movs	r2, #0
 8016b20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016b22:	4b14      	ldr	r3, [pc, #80]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b24:	2200      	movs	r2, #0
 8016b26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016b28:	4b12      	ldr	r3, [pc, #72]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016b2e:	4b11      	ldr	r3, [pc, #68]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b30:	2200      	movs	r2, #0
 8016b32:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016b34:	4b0f      	ldr	r3, [pc, #60]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b36:	2200      	movs	r2, #0
 8016b38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016b3a:	480e      	ldr	r0, [pc, #56]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b3c:	f7f1 fb21 	bl	8008182 <HAL_PCD_Init>
 8016b40:	4603      	mov	r3, r0
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d001      	beq.n	8016b4a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016b46:	f7eb febd 	bl	80028c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016b4e:	4809      	ldr	r0, [pc, #36]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b50:	f7f2 fd8f 	bl	8009672 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016b54:	2280      	movs	r2, #128	; 0x80
 8016b56:	2100      	movs	r1, #0
 8016b58:	4806      	ldr	r0, [pc, #24]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b5a:	f7f2 fd43 	bl	80095e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016b5e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016b62:	2101      	movs	r1, #1
 8016b64:	4803      	ldr	r0, [pc, #12]	; (8016b74 <USBD_LL_Init+0x9c>)
 8016b66:	f7f2 fd3d 	bl	80095e4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016b6a:	2300      	movs	r3, #0
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3708      	adds	r7, #8
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}
 8016b74:	24002994 	.word	0x24002994
 8016b78:	40040000 	.word	0x40040000

08016b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b84:	2300      	movs	r3, #0
 8016b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7f1 fc19 	bl	80083ca <HAL_PCD_Start>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b9c:	7bfb      	ldrb	r3, [r7, #15]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f000 f942 	bl	8016e28 <USBD_Get_USB_Status>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3710      	adds	r7, #16
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}

08016bb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016bb2:	b580      	push	{r7, lr}
 8016bb4:	b084      	sub	sp, #16
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
 8016bba:	4608      	mov	r0, r1
 8016bbc:	4611      	mov	r1, r2
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	70fb      	strb	r3, [r7, #3]
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	70bb      	strb	r3, [r7, #2]
 8016bc8:	4613      	mov	r3, r2
 8016bca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016bda:	78bb      	ldrb	r3, [r7, #2]
 8016bdc:	883a      	ldrh	r2, [r7, #0]
 8016bde:	78f9      	ldrb	r1, [r7, #3]
 8016be0:	f7f2 f919 	bl	8008e16 <HAL_PCD_EP_Open>
 8016be4:	4603      	mov	r3, r0
 8016be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016be8:	7bfb      	ldrb	r3, [r7, #15]
 8016bea:	4618      	mov	r0, r3
 8016bec:	f000 f91c 	bl	8016e28 <USBD_Get_USB_Status>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
 8016c06:	460b      	mov	r3, r1
 8016c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c18:	78fa      	ldrb	r2, [r7, #3]
 8016c1a:	4611      	mov	r1, r2
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7f2 f962 	bl	8008ee6 <HAL_PCD_EP_Close>
 8016c22:	4603      	mov	r3, r0
 8016c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c26:	7bfb      	ldrb	r3, [r7, #15]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f000 f8fd 	bl	8016e28 <USBD_Get_USB_Status>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3710      	adds	r7, #16
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b084      	sub	sp, #16
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	460b      	mov	r3, r1
 8016c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c56:	78fa      	ldrb	r2, [r7, #3]
 8016c58:	4611      	mov	r1, r2
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7f2 fa1c 	bl	8009098 <HAL_PCD_EP_SetStall>
 8016c60:	4603      	mov	r3, r0
 8016c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c64:	7bfb      	ldrb	r3, [r7, #15]
 8016c66:	4618      	mov	r0, r3
 8016c68:	f000 f8de 	bl	8016e28 <USBD_Get_USB_Status>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}

08016c7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b084      	sub	sp, #16
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
 8016c82:	460b      	mov	r3, r1
 8016c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c86:	2300      	movs	r3, #0
 8016c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c94:	78fa      	ldrb	r2, [r7, #3]
 8016c96:	4611      	mov	r1, r2
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7f2 fa61 	bl	8009160 <HAL_PCD_EP_ClrStall>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ca2:	7bfb      	ldrb	r3, [r7, #15]
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f000 f8bf 	bl	8016e28 <USBD_Get_USB_Status>
 8016caa:	4603      	mov	r3, r0
 8016cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3710      	adds	r7, #16
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b085      	sub	sp, #20
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	da0b      	bge.n	8016cec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016cd4:	78fb      	ldrb	r3, [r7, #3]
 8016cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cda:	68f9      	ldr	r1, [r7, #12]
 8016cdc:	4613      	mov	r3, r2
 8016cde:	00db      	lsls	r3, r3, #3
 8016ce0:	4413      	add	r3, r2
 8016ce2:	009b      	lsls	r3, r3, #2
 8016ce4:	440b      	add	r3, r1
 8016ce6:	333e      	adds	r3, #62	; 0x3e
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	e00b      	b.n	8016d04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016cec:	78fb      	ldrb	r3, [r7, #3]
 8016cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cf2:	68f9      	ldr	r1, [r7, #12]
 8016cf4:	4613      	mov	r3, r2
 8016cf6:	00db      	lsls	r3, r3, #3
 8016cf8:	4413      	add	r3, r2
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	440b      	add	r3, r1
 8016cfe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3714      	adds	r7, #20
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0e:	4770      	bx	lr

08016d10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b084      	sub	sp, #16
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
 8016d18:	460b      	mov	r3, r1
 8016d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d20:	2300      	movs	r3, #0
 8016d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d2a:	78fa      	ldrb	r2, [r7, #3]
 8016d2c:	4611      	mov	r1, r2
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7f2 f84c 	bl	8008dcc <HAL_PCD_SetAddress>
 8016d34:	4603      	mov	r3, r0
 8016d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d38:	7bfb      	ldrb	r3, [r7, #15]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f000 f874 	bl	8016e28 <USBD_Get_USB_Status>
 8016d40:	4603      	mov	r3, r0
 8016d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3710      	adds	r7, #16
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}

08016d4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d4e:	b580      	push	{r7, lr}
 8016d50:	b086      	sub	sp, #24
 8016d52:	af00      	add	r7, sp, #0
 8016d54:	60f8      	str	r0, [r7, #12]
 8016d56:	607a      	str	r2, [r7, #4]
 8016d58:	603b      	str	r3, [r7, #0]
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d62:	2300      	movs	r3, #0
 8016d64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016d6c:	7af9      	ldrb	r1, [r7, #11]
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	687a      	ldr	r2, [r7, #4]
 8016d72:	f7f2 f956 	bl	8009022 <HAL_PCD_EP_Transmit>
 8016d76:	4603      	mov	r3, r0
 8016d78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d7a:	7dfb      	ldrb	r3, [r7, #23]
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f000 f853 	bl	8016e28 <USBD_Get_USB_Status>
 8016d82:	4603      	mov	r3, r0
 8016d84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016d86:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3718      	adds	r7, #24
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b086      	sub	sp, #24
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	607a      	str	r2, [r7, #4]
 8016d9a:	603b      	str	r3, [r7, #0]
 8016d9c:	460b      	mov	r3, r1
 8016d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016da0:	2300      	movs	r3, #0
 8016da2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016da4:	2300      	movs	r3, #0
 8016da6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016dae:	7af9      	ldrb	r1, [r7, #11]
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	687a      	ldr	r2, [r7, #4]
 8016db4:	f7f2 f8e1 	bl	8008f7a <HAL_PCD_EP_Receive>
 8016db8:	4603      	mov	r3, r0
 8016dba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dbc:	7dfb      	ldrb	r3, [r7, #23]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f000 f832 	bl	8016e28 <USBD_Get_USB_Status>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016dc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3718      	adds	r7, #24
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}

08016dd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dd2:	b580      	push	{r7, lr}
 8016dd4:	b082      	sub	sp, #8
 8016dd6:	af00      	add	r7, sp, #0
 8016dd8:	6078      	str	r0, [r7, #4]
 8016dda:	460b      	mov	r3, r1
 8016ddc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016de4:	78fa      	ldrb	r2, [r7, #3]
 8016de6:	4611      	mov	r1, r2
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7f2 f902 	bl	8008ff2 <HAL_PCD_EP_GetRxCount>
 8016dee:	4603      	mov	r3, r0
}
 8016df0:	4618      	mov	r0, r3
 8016df2:	3708      	adds	r7, #8
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}

08016df8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016df8:	b480      	push	{r7}
 8016dfa:	b083      	sub	sp, #12
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016e00:	4b03      	ldr	r3, [pc, #12]	; (8016e10 <USBD_static_malloc+0x18>)
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	370c      	adds	r7, #12
 8016e06:	46bd      	mov	sp, r7
 8016e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0c:	4770      	bx	lr
 8016e0e:	bf00      	nop
 8016e10:	24002ea0 	.word	0x24002ea0

08016e14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016e14:	b480      	push	{r7}
 8016e16:	b083      	sub	sp, #12
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016e1c:	bf00      	nop
 8016e1e:	370c      	adds	r7, #12
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr

08016e28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b085      	sub	sp, #20
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	4603      	mov	r3, r0
 8016e30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e32:	2300      	movs	r3, #0
 8016e34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e36:	79fb      	ldrb	r3, [r7, #7]
 8016e38:	2b03      	cmp	r3, #3
 8016e3a:	d817      	bhi.n	8016e6c <USBD_Get_USB_Status+0x44>
 8016e3c:	a201      	add	r2, pc, #4	; (adr r2, 8016e44 <USBD_Get_USB_Status+0x1c>)
 8016e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e42:	bf00      	nop
 8016e44:	08016e55 	.word	0x08016e55
 8016e48:	08016e5b 	.word	0x08016e5b
 8016e4c:	08016e61 	.word	0x08016e61
 8016e50:	08016e67 	.word	0x08016e67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e54:	2300      	movs	r3, #0
 8016e56:	73fb      	strb	r3, [r7, #15]
    break;
 8016e58:	e00b      	b.n	8016e72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e5a:	2303      	movs	r3, #3
 8016e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8016e5e:	e008      	b.n	8016e72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e60:	2301      	movs	r3, #1
 8016e62:	73fb      	strb	r3, [r7, #15]
    break;
 8016e64:	e005      	b.n	8016e72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e66:	2303      	movs	r3, #3
 8016e68:	73fb      	strb	r3, [r7, #15]
    break;
 8016e6a:	e002      	b.n	8016e72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016e6c:	2303      	movs	r3, #3
 8016e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8016e70:	bf00      	nop
  }
  return usb_status;
 8016e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3714      	adds	r7, #20
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr

08016e80 <__errno>:
 8016e80:	4b01      	ldr	r3, [pc, #4]	; (8016e88 <__errno+0x8>)
 8016e82:	6818      	ldr	r0, [r3, #0]
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	24000100 	.word	0x24000100

08016e8c <__libc_init_array>:
 8016e8c:	b570      	push	{r4, r5, r6, lr}
 8016e8e:	4d0d      	ldr	r5, [pc, #52]	; (8016ec4 <__libc_init_array+0x38>)
 8016e90:	4c0d      	ldr	r4, [pc, #52]	; (8016ec8 <__libc_init_array+0x3c>)
 8016e92:	1b64      	subs	r4, r4, r5
 8016e94:	10a4      	asrs	r4, r4, #2
 8016e96:	2600      	movs	r6, #0
 8016e98:	42a6      	cmp	r6, r4
 8016e9a:	d109      	bne.n	8016eb0 <__libc_init_array+0x24>
 8016e9c:	4d0b      	ldr	r5, [pc, #44]	; (8016ecc <__libc_init_array+0x40>)
 8016e9e:	4c0c      	ldr	r4, [pc, #48]	; (8016ed0 <__libc_init_array+0x44>)
 8016ea0:	f000 fc96 	bl	80177d0 <_init>
 8016ea4:	1b64      	subs	r4, r4, r5
 8016ea6:	10a4      	asrs	r4, r4, #2
 8016ea8:	2600      	movs	r6, #0
 8016eaa:	42a6      	cmp	r6, r4
 8016eac:	d105      	bne.n	8016eba <__libc_init_array+0x2e>
 8016eae:	bd70      	pop	{r4, r5, r6, pc}
 8016eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016eb4:	4798      	blx	r3
 8016eb6:	3601      	adds	r6, #1
 8016eb8:	e7ee      	b.n	8016e98 <__libc_init_array+0xc>
 8016eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ebe:	4798      	blx	r3
 8016ec0:	3601      	adds	r6, #1
 8016ec2:	e7f2      	b.n	8016eaa <__libc_init_array+0x1e>
 8016ec4:	08017ae4 	.word	0x08017ae4
 8016ec8:	08017ae4 	.word	0x08017ae4
 8016ecc:	08017ae4 	.word	0x08017ae4
 8016ed0:	08017ae8 	.word	0x08017ae8

08016ed4 <memcpy>:
 8016ed4:	440a      	add	r2, r1
 8016ed6:	4291      	cmp	r1, r2
 8016ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8016edc:	d100      	bne.n	8016ee0 <memcpy+0xc>
 8016ede:	4770      	bx	lr
 8016ee0:	b510      	push	{r4, lr}
 8016ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016eea:	4291      	cmp	r1, r2
 8016eec:	d1f9      	bne.n	8016ee2 <memcpy+0xe>
 8016eee:	bd10      	pop	{r4, pc}

08016ef0 <memset>:
 8016ef0:	4402      	add	r2, r0
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	4293      	cmp	r3, r2
 8016ef6:	d100      	bne.n	8016efa <memset+0xa>
 8016ef8:	4770      	bx	lr
 8016efa:	f803 1b01 	strb.w	r1, [r3], #1
 8016efe:	e7f9      	b.n	8016ef4 <memset+0x4>

08016f00 <siprintf>:
 8016f00:	b40e      	push	{r1, r2, r3}
 8016f02:	b500      	push	{lr}
 8016f04:	b09c      	sub	sp, #112	; 0x70
 8016f06:	ab1d      	add	r3, sp, #116	; 0x74
 8016f08:	9002      	str	r0, [sp, #8]
 8016f0a:	9006      	str	r0, [sp, #24]
 8016f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f10:	4809      	ldr	r0, [pc, #36]	; (8016f38 <siprintf+0x38>)
 8016f12:	9107      	str	r1, [sp, #28]
 8016f14:	9104      	str	r1, [sp, #16]
 8016f16:	4909      	ldr	r1, [pc, #36]	; (8016f3c <siprintf+0x3c>)
 8016f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f1c:	9105      	str	r1, [sp, #20]
 8016f1e:	6800      	ldr	r0, [r0, #0]
 8016f20:	9301      	str	r3, [sp, #4]
 8016f22:	a902      	add	r1, sp, #8
 8016f24:	f000 f870 	bl	8017008 <_svfiprintf_r>
 8016f28:	9b02      	ldr	r3, [sp, #8]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	701a      	strb	r2, [r3, #0]
 8016f2e:	b01c      	add	sp, #112	; 0x70
 8016f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f34:	b003      	add	sp, #12
 8016f36:	4770      	bx	lr
 8016f38:	24000100 	.word	0x24000100
 8016f3c:	ffff0208 	.word	0xffff0208

08016f40 <strcpy>:
 8016f40:	4603      	mov	r3, r0
 8016f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f46:	f803 2b01 	strb.w	r2, [r3], #1
 8016f4a:	2a00      	cmp	r2, #0
 8016f4c:	d1f9      	bne.n	8016f42 <strcpy+0x2>
 8016f4e:	4770      	bx	lr

08016f50 <__ssputs_r>:
 8016f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f54:	688e      	ldr	r6, [r1, #8]
 8016f56:	429e      	cmp	r6, r3
 8016f58:	4682      	mov	sl, r0
 8016f5a:	460c      	mov	r4, r1
 8016f5c:	4690      	mov	r8, r2
 8016f5e:	461f      	mov	r7, r3
 8016f60:	d838      	bhi.n	8016fd4 <__ssputs_r+0x84>
 8016f62:	898a      	ldrh	r2, [r1, #12]
 8016f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016f68:	d032      	beq.n	8016fd0 <__ssputs_r+0x80>
 8016f6a:	6825      	ldr	r5, [r4, #0]
 8016f6c:	6909      	ldr	r1, [r1, #16]
 8016f6e:	eba5 0901 	sub.w	r9, r5, r1
 8016f72:	6965      	ldr	r5, [r4, #20]
 8016f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f7c:	3301      	adds	r3, #1
 8016f7e:	444b      	add	r3, r9
 8016f80:	106d      	asrs	r5, r5, #1
 8016f82:	429d      	cmp	r5, r3
 8016f84:	bf38      	it	cc
 8016f86:	461d      	movcc	r5, r3
 8016f88:	0553      	lsls	r3, r2, #21
 8016f8a:	d531      	bpl.n	8016ff0 <__ssputs_r+0xa0>
 8016f8c:	4629      	mov	r1, r5
 8016f8e:	f000 fb55 	bl	801763c <_malloc_r>
 8016f92:	4606      	mov	r6, r0
 8016f94:	b950      	cbnz	r0, 8016fac <__ssputs_r+0x5c>
 8016f96:	230c      	movs	r3, #12
 8016f98:	f8ca 3000 	str.w	r3, [sl]
 8016f9c:	89a3      	ldrh	r3, [r4, #12]
 8016f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fa2:	81a3      	strh	r3, [r4, #12]
 8016fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8016fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fac:	6921      	ldr	r1, [r4, #16]
 8016fae:	464a      	mov	r2, r9
 8016fb0:	f7ff ff90 	bl	8016ed4 <memcpy>
 8016fb4:	89a3      	ldrh	r3, [r4, #12]
 8016fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fbe:	81a3      	strh	r3, [r4, #12]
 8016fc0:	6126      	str	r6, [r4, #16]
 8016fc2:	6165      	str	r5, [r4, #20]
 8016fc4:	444e      	add	r6, r9
 8016fc6:	eba5 0509 	sub.w	r5, r5, r9
 8016fca:	6026      	str	r6, [r4, #0]
 8016fcc:	60a5      	str	r5, [r4, #8]
 8016fce:	463e      	mov	r6, r7
 8016fd0:	42be      	cmp	r6, r7
 8016fd2:	d900      	bls.n	8016fd6 <__ssputs_r+0x86>
 8016fd4:	463e      	mov	r6, r7
 8016fd6:	6820      	ldr	r0, [r4, #0]
 8016fd8:	4632      	mov	r2, r6
 8016fda:	4641      	mov	r1, r8
 8016fdc:	f000 faa8 	bl	8017530 <memmove>
 8016fe0:	68a3      	ldr	r3, [r4, #8]
 8016fe2:	1b9b      	subs	r3, r3, r6
 8016fe4:	60a3      	str	r3, [r4, #8]
 8016fe6:	6823      	ldr	r3, [r4, #0]
 8016fe8:	4433      	add	r3, r6
 8016fea:	6023      	str	r3, [r4, #0]
 8016fec:	2000      	movs	r0, #0
 8016fee:	e7db      	b.n	8016fa8 <__ssputs_r+0x58>
 8016ff0:	462a      	mov	r2, r5
 8016ff2:	f000 fb97 	bl	8017724 <_realloc_r>
 8016ff6:	4606      	mov	r6, r0
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d1e1      	bne.n	8016fc0 <__ssputs_r+0x70>
 8016ffc:	6921      	ldr	r1, [r4, #16]
 8016ffe:	4650      	mov	r0, sl
 8017000:	f000 fab0 	bl	8017564 <_free_r>
 8017004:	e7c7      	b.n	8016f96 <__ssputs_r+0x46>
	...

08017008 <_svfiprintf_r>:
 8017008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801700c:	4698      	mov	r8, r3
 801700e:	898b      	ldrh	r3, [r1, #12]
 8017010:	061b      	lsls	r3, r3, #24
 8017012:	b09d      	sub	sp, #116	; 0x74
 8017014:	4607      	mov	r7, r0
 8017016:	460d      	mov	r5, r1
 8017018:	4614      	mov	r4, r2
 801701a:	d50e      	bpl.n	801703a <_svfiprintf_r+0x32>
 801701c:	690b      	ldr	r3, [r1, #16]
 801701e:	b963      	cbnz	r3, 801703a <_svfiprintf_r+0x32>
 8017020:	2140      	movs	r1, #64	; 0x40
 8017022:	f000 fb0b 	bl	801763c <_malloc_r>
 8017026:	6028      	str	r0, [r5, #0]
 8017028:	6128      	str	r0, [r5, #16]
 801702a:	b920      	cbnz	r0, 8017036 <_svfiprintf_r+0x2e>
 801702c:	230c      	movs	r3, #12
 801702e:	603b      	str	r3, [r7, #0]
 8017030:	f04f 30ff 	mov.w	r0, #4294967295
 8017034:	e0d1      	b.n	80171da <_svfiprintf_r+0x1d2>
 8017036:	2340      	movs	r3, #64	; 0x40
 8017038:	616b      	str	r3, [r5, #20]
 801703a:	2300      	movs	r3, #0
 801703c:	9309      	str	r3, [sp, #36]	; 0x24
 801703e:	2320      	movs	r3, #32
 8017040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017044:	f8cd 800c 	str.w	r8, [sp, #12]
 8017048:	2330      	movs	r3, #48	; 0x30
 801704a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80171f4 <_svfiprintf_r+0x1ec>
 801704e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017052:	f04f 0901 	mov.w	r9, #1
 8017056:	4623      	mov	r3, r4
 8017058:	469a      	mov	sl, r3
 801705a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801705e:	b10a      	cbz	r2, 8017064 <_svfiprintf_r+0x5c>
 8017060:	2a25      	cmp	r2, #37	; 0x25
 8017062:	d1f9      	bne.n	8017058 <_svfiprintf_r+0x50>
 8017064:	ebba 0b04 	subs.w	fp, sl, r4
 8017068:	d00b      	beq.n	8017082 <_svfiprintf_r+0x7a>
 801706a:	465b      	mov	r3, fp
 801706c:	4622      	mov	r2, r4
 801706e:	4629      	mov	r1, r5
 8017070:	4638      	mov	r0, r7
 8017072:	f7ff ff6d 	bl	8016f50 <__ssputs_r>
 8017076:	3001      	adds	r0, #1
 8017078:	f000 80aa 	beq.w	80171d0 <_svfiprintf_r+0x1c8>
 801707c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801707e:	445a      	add	r2, fp
 8017080:	9209      	str	r2, [sp, #36]	; 0x24
 8017082:	f89a 3000 	ldrb.w	r3, [sl]
 8017086:	2b00      	cmp	r3, #0
 8017088:	f000 80a2 	beq.w	80171d0 <_svfiprintf_r+0x1c8>
 801708c:	2300      	movs	r3, #0
 801708e:	f04f 32ff 	mov.w	r2, #4294967295
 8017092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017096:	f10a 0a01 	add.w	sl, sl, #1
 801709a:	9304      	str	r3, [sp, #16]
 801709c:	9307      	str	r3, [sp, #28]
 801709e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170a2:	931a      	str	r3, [sp, #104]	; 0x68
 80170a4:	4654      	mov	r4, sl
 80170a6:	2205      	movs	r2, #5
 80170a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170ac:	4851      	ldr	r0, [pc, #324]	; (80171f4 <_svfiprintf_r+0x1ec>)
 80170ae:	f7e9 f947 	bl	8000340 <memchr>
 80170b2:	9a04      	ldr	r2, [sp, #16]
 80170b4:	b9d8      	cbnz	r0, 80170ee <_svfiprintf_r+0xe6>
 80170b6:	06d0      	lsls	r0, r2, #27
 80170b8:	bf44      	itt	mi
 80170ba:	2320      	movmi	r3, #32
 80170bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80170c0:	0711      	lsls	r1, r2, #28
 80170c2:	bf44      	itt	mi
 80170c4:	232b      	movmi	r3, #43	; 0x2b
 80170c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80170ca:	f89a 3000 	ldrb.w	r3, [sl]
 80170ce:	2b2a      	cmp	r3, #42	; 0x2a
 80170d0:	d015      	beq.n	80170fe <_svfiprintf_r+0xf6>
 80170d2:	9a07      	ldr	r2, [sp, #28]
 80170d4:	4654      	mov	r4, sl
 80170d6:	2000      	movs	r0, #0
 80170d8:	f04f 0c0a 	mov.w	ip, #10
 80170dc:	4621      	mov	r1, r4
 80170de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170e2:	3b30      	subs	r3, #48	; 0x30
 80170e4:	2b09      	cmp	r3, #9
 80170e6:	d94e      	bls.n	8017186 <_svfiprintf_r+0x17e>
 80170e8:	b1b0      	cbz	r0, 8017118 <_svfiprintf_r+0x110>
 80170ea:	9207      	str	r2, [sp, #28]
 80170ec:	e014      	b.n	8017118 <_svfiprintf_r+0x110>
 80170ee:	eba0 0308 	sub.w	r3, r0, r8
 80170f2:	fa09 f303 	lsl.w	r3, r9, r3
 80170f6:	4313      	orrs	r3, r2
 80170f8:	9304      	str	r3, [sp, #16]
 80170fa:	46a2      	mov	sl, r4
 80170fc:	e7d2      	b.n	80170a4 <_svfiprintf_r+0x9c>
 80170fe:	9b03      	ldr	r3, [sp, #12]
 8017100:	1d19      	adds	r1, r3, #4
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	9103      	str	r1, [sp, #12]
 8017106:	2b00      	cmp	r3, #0
 8017108:	bfbb      	ittet	lt
 801710a:	425b      	neglt	r3, r3
 801710c:	f042 0202 	orrlt.w	r2, r2, #2
 8017110:	9307      	strge	r3, [sp, #28]
 8017112:	9307      	strlt	r3, [sp, #28]
 8017114:	bfb8      	it	lt
 8017116:	9204      	strlt	r2, [sp, #16]
 8017118:	7823      	ldrb	r3, [r4, #0]
 801711a:	2b2e      	cmp	r3, #46	; 0x2e
 801711c:	d10c      	bne.n	8017138 <_svfiprintf_r+0x130>
 801711e:	7863      	ldrb	r3, [r4, #1]
 8017120:	2b2a      	cmp	r3, #42	; 0x2a
 8017122:	d135      	bne.n	8017190 <_svfiprintf_r+0x188>
 8017124:	9b03      	ldr	r3, [sp, #12]
 8017126:	1d1a      	adds	r2, r3, #4
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	9203      	str	r2, [sp, #12]
 801712c:	2b00      	cmp	r3, #0
 801712e:	bfb8      	it	lt
 8017130:	f04f 33ff 	movlt.w	r3, #4294967295
 8017134:	3402      	adds	r4, #2
 8017136:	9305      	str	r3, [sp, #20]
 8017138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017204 <_svfiprintf_r+0x1fc>
 801713c:	7821      	ldrb	r1, [r4, #0]
 801713e:	2203      	movs	r2, #3
 8017140:	4650      	mov	r0, sl
 8017142:	f7e9 f8fd 	bl	8000340 <memchr>
 8017146:	b140      	cbz	r0, 801715a <_svfiprintf_r+0x152>
 8017148:	2340      	movs	r3, #64	; 0x40
 801714a:	eba0 000a 	sub.w	r0, r0, sl
 801714e:	fa03 f000 	lsl.w	r0, r3, r0
 8017152:	9b04      	ldr	r3, [sp, #16]
 8017154:	4303      	orrs	r3, r0
 8017156:	3401      	adds	r4, #1
 8017158:	9304      	str	r3, [sp, #16]
 801715a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801715e:	4826      	ldr	r0, [pc, #152]	; (80171f8 <_svfiprintf_r+0x1f0>)
 8017160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017164:	2206      	movs	r2, #6
 8017166:	f7e9 f8eb 	bl	8000340 <memchr>
 801716a:	2800      	cmp	r0, #0
 801716c:	d038      	beq.n	80171e0 <_svfiprintf_r+0x1d8>
 801716e:	4b23      	ldr	r3, [pc, #140]	; (80171fc <_svfiprintf_r+0x1f4>)
 8017170:	bb1b      	cbnz	r3, 80171ba <_svfiprintf_r+0x1b2>
 8017172:	9b03      	ldr	r3, [sp, #12]
 8017174:	3307      	adds	r3, #7
 8017176:	f023 0307 	bic.w	r3, r3, #7
 801717a:	3308      	adds	r3, #8
 801717c:	9303      	str	r3, [sp, #12]
 801717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017180:	4433      	add	r3, r6
 8017182:	9309      	str	r3, [sp, #36]	; 0x24
 8017184:	e767      	b.n	8017056 <_svfiprintf_r+0x4e>
 8017186:	fb0c 3202 	mla	r2, ip, r2, r3
 801718a:	460c      	mov	r4, r1
 801718c:	2001      	movs	r0, #1
 801718e:	e7a5      	b.n	80170dc <_svfiprintf_r+0xd4>
 8017190:	2300      	movs	r3, #0
 8017192:	3401      	adds	r4, #1
 8017194:	9305      	str	r3, [sp, #20]
 8017196:	4619      	mov	r1, r3
 8017198:	f04f 0c0a 	mov.w	ip, #10
 801719c:	4620      	mov	r0, r4
 801719e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171a2:	3a30      	subs	r2, #48	; 0x30
 80171a4:	2a09      	cmp	r2, #9
 80171a6:	d903      	bls.n	80171b0 <_svfiprintf_r+0x1a8>
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d0c5      	beq.n	8017138 <_svfiprintf_r+0x130>
 80171ac:	9105      	str	r1, [sp, #20]
 80171ae:	e7c3      	b.n	8017138 <_svfiprintf_r+0x130>
 80171b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80171b4:	4604      	mov	r4, r0
 80171b6:	2301      	movs	r3, #1
 80171b8:	e7f0      	b.n	801719c <_svfiprintf_r+0x194>
 80171ba:	ab03      	add	r3, sp, #12
 80171bc:	9300      	str	r3, [sp, #0]
 80171be:	462a      	mov	r2, r5
 80171c0:	4b0f      	ldr	r3, [pc, #60]	; (8017200 <_svfiprintf_r+0x1f8>)
 80171c2:	a904      	add	r1, sp, #16
 80171c4:	4638      	mov	r0, r7
 80171c6:	f3af 8000 	nop.w
 80171ca:	1c42      	adds	r2, r0, #1
 80171cc:	4606      	mov	r6, r0
 80171ce:	d1d6      	bne.n	801717e <_svfiprintf_r+0x176>
 80171d0:	89ab      	ldrh	r3, [r5, #12]
 80171d2:	065b      	lsls	r3, r3, #25
 80171d4:	f53f af2c 	bmi.w	8017030 <_svfiprintf_r+0x28>
 80171d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171da:	b01d      	add	sp, #116	; 0x74
 80171dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e0:	ab03      	add	r3, sp, #12
 80171e2:	9300      	str	r3, [sp, #0]
 80171e4:	462a      	mov	r2, r5
 80171e6:	4b06      	ldr	r3, [pc, #24]	; (8017200 <_svfiprintf_r+0x1f8>)
 80171e8:	a904      	add	r1, sp, #16
 80171ea:	4638      	mov	r0, r7
 80171ec:	f000 f87a 	bl	80172e4 <_printf_i>
 80171f0:	e7eb      	b.n	80171ca <_svfiprintf_r+0x1c2>
 80171f2:	bf00      	nop
 80171f4:	08017aa8 	.word	0x08017aa8
 80171f8:	08017ab2 	.word	0x08017ab2
 80171fc:	00000000 	.word	0x00000000
 8017200:	08016f51 	.word	0x08016f51
 8017204:	08017aae 	.word	0x08017aae

08017208 <_printf_common>:
 8017208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801720c:	4616      	mov	r6, r2
 801720e:	4699      	mov	r9, r3
 8017210:	688a      	ldr	r2, [r1, #8]
 8017212:	690b      	ldr	r3, [r1, #16]
 8017214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017218:	4293      	cmp	r3, r2
 801721a:	bfb8      	it	lt
 801721c:	4613      	movlt	r3, r2
 801721e:	6033      	str	r3, [r6, #0]
 8017220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017224:	4607      	mov	r7, r0
 8017226:	460c      	mov	r4, r1
 8017228:	b10a      	cbz	r2, 801722e <_printf_common+0x26>
 801722a:	3301      	adds	r3, #1
 801722c:	6033      	str	r3, [r6, #0]
 801722e:	6823      	ldr	r3, [r4, #0]
 8017230:	0699      	lsls	r1, r3, #26
 8017232:	bf42      	ittt	mi
 8017234:	6833      	ldrmi	r3, [r6, #0]
 8017236:	3302      	addmi	r3, #2
 8017238:	6033      	strmi	r3, [r6, #0]
 801723a:	6825      	ldr	r5, [r4, #0]
 801723c:	f015 0506 	ands.w	r5, r5, #6
 8017240:	d106      	bne.n	8017250 <_printf_common+0x48>
 8017242:	f104 0a19 	add.w	sl, r4, #25
 8017246:	68e3      	ldr	r3, [r4, #12]
 8017248:	6832      	ldr	r2, [r6, #0]
 801724a:	1a9b      	subs	r3, r3, r2
 801724c:	42ab      	cmp	r3, r5
 801724e:	dc26      	bgt.n	801729e <_printf_common+0x96>
 8017250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017254:	1e13      	subs	r3, r2, #0
 8017256:	6822      	ldr	r2, [r4, #0]
 8017258:	bf18      	it	ne
 801725a:	2301      	movne	r3, #1
 801725c:	0692      	lsls	r2, r2, #26
 801725e:	d42b      	bmi.n	80172b8 <_printf_common+0xb0>
 8017260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017264:	4649      	mov	r1, r9
 8017266:	4638      	mov	r0, r7
 8017268:	47c0      	blx	r8
 801726a:	3001      	adds	r0, #1
 801726c:	d01e      	beq.n	80172ac <_printf_common+0xa4>
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	68e5      	ldr	r5, [r4, #12]
 8017272:	6832      	ldr	r2, [r6, #0]
 8017274:	f003 0306 	and.w	r3, r3, #6
 8017278:	2b04      	cmp	r3, #4
 801727a:	bf08      	it	eq
 801727c:	1aad      	subeq	r5, r5, r2
 801727e:	68a3      	ldr	r3, [r4, #8]
 8017280:	6922      	ldr	r2, [r4, #16]
 8017282:	bf0c      	ite	eq
 8017284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017288:	2500      	movne	r5, #0
 801728a:	4293      	cmp	r3, r2
 801728c:	bfc4      	itt	gt
 801728e:	1a9b      	subgt	r3, r3, r2
 8017290:	18ed      	addgt	r5, r5, r3
 8017292:	2600      	movs	r6, #0
 8017294:	341a      	adds	r4, #26
 8017296:	42b5      	cmp	r5, r6
 8017298:	d11a      	bne.n	80172d0 <_printf_common+0xc8>
 801729a:	2000      	movs	r0, #0
 801729c:	e008      	b.n	80172b0 <_printf_common+0xa8>
 801729e:	2301      	movs	r3, #1
 80172a0:	4652      	mov	r2, sl
 80172a2:	4649      	mov	r1, r9
 80172a4:	4638      	mov	r0, r7
 80172a6:	47c0      	blx	r8
 80172a8:	3001      	adds	r0, #1
 80172aa:	d103      	bne.n	80172b4 <_printf_common+0xac>
 80172ac:	f04f 30ff 	mov.w	r0, #4294967295
 80172b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172b4:	3501      	adds	r5, #1
 80172b6:	e7c6      	b.n	8017246 <_printf_common+0x3e>
 80172b8:	18e1      	adds	r1, r4, r3
 80172ba:	1c5a      	adds	r2, r3, #1
 80172bc:	2030      	movs	r0, #48	; 0x30
 80172be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80172c2:	4422      	add	r2, r4
 80172c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80172c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80172cc:	3302      	adds	r3, #2
 80172ce:	e7c7      	b.n	8017260 <_printf_common+0x58>
 80172d0:	2301      	movs	r3, #1
 80172d2:	4622      	mov	r2, r4
 80172d4:	4649      	mov	r1, r9
 80172d6:	4638      	mov	r0, r7
 80172d8:	47c0      	blx	r8
 80172da:	3001      	adds	r0, #1
 80172dc:	d0e6      	beq.n	80172ac <_printf_common+0xa4>
 80172de:	3601      	adds	r6, #1
 80172e0:	e7d9      	b.n	8017296 <_printf_common+0x8e>
	...

080172e4 <_printf_i>:
 80172e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80172e8:	7e0f      	ldrb	r7, [r1, #24]
 80172ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80172ec:	2f78      	cmp	r7, #120	; 0x78
 80172ee:	4691      	mov	r9, r2
 80172f0:	4680      	mov	r8, r0
 80172f2:	460c      	mov	r4, r1
 80172f4:	469a      	mov	sl, r3
 80172f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80172fa:	d807      	bhi.n	801730c <_printf_i+0x28>
 80172fc:	2f62      	cmp	r7, #98	; 0x62
 80172fe:	d80a      	bhi.n	8017316 <_printf_i+0x32>
 8017300:	2f00      	cmp	r7, #0
 8017302:	f000 80d8 	beq.w	80174b6 <_printf_i+0x1d2>
 8017306:	2f58      	cmp	r7, #88	; 0x58
 8017308:	f000 80a3 	beq.w	8017452 <_printf_i+0x16e>
 801730c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017314:	e03a      	b.n	801738c <_printf_i+0xa8>
 8017316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801731a:	2b15      	cmp	r3, #21
 801731c:	d8f6      	bhi.n	801730c <_printf_i+0x28>
 801731e:	a101      	add	r1, pc, #4	; (adr r1, 8017324 <_printf_i+0x40>)
 8017320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017324:	0801737d 	.word	0x0801737d
 8017328:	08017391 	.word	0x08017391
 801732c:	0801730d 	.word	0x0801730d
 8017330:	0801730d 	.word	0x0801730d
 8017334:	0801730d 	.word	0x0801730d
 8017338:	0801730d 	.word	0x0801730d
 801733c:	08017391 	.word	0x08017391
 8017340:	0801730d 	.word	0x0801730d
 8017344:	0801730d 	.word	0x0801730d
 8017348:	0801730d 	.word	0x0801730d
 801734c:	0801730d 	.word	0x0801730d
 8017350:	0801749d 	.word	0x0801749d
 8017354:	080173c1 	.word	0x080173c1
 8017358:	0801747f 	.word	0x0801747f
 801735c:	0801730d 	.word	0x0801730d
 8017360:	0801730d 	.word	0x0801730d
 8017364:	080174bf 	.word	0x080174bf
 8017368:	0801730d 	.word	0x0801730d
 801736c:	080173c1 	.word	0x080173c1
 8017370:	0801730d 	.word	0x0801730d
 8017374:	0801730d 	.word	0x0801730d
 8017378:	08017487 	.word	0x08017487
 801737c:	682b      	ldr	r3, [r5, #0]
 801737e:	1d1a      	adds	r2, r3, #4
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	602a      	str	r2, [r5, #0]
 8017384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801738c:	2301      	movs	r3, #1
 801738e:	e0a3      	b.n	80174d8 <_printf_i+0x1f4>
 8017390:	6820      	ldr	r0, [r4, #0]
 8017392:	6829      	ldr	r1, [r5, #0]
 8017394:	0606      	lsls	r6, r0, #24
 8017396:	f101 0304 	add.w	r3, r1, #4
 801739a:	d50a      	bpl.n	80173b2 <_printf_i+0xce>
 801739c:	680e      	ldr	r6, [r1, #0]
 801739e:	602b      	str	r3, [r5, #0]
 80173a0:	2e00      	cmp	r6, #0
 80173a2:	da03      	bge.n	80173ac <_printf_i+0xc8>
 80173a4:	232d      	movs	r3, #45	; 0x2d
 80173a6:	4276      	negs	r6, r6
 80173a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173ac:	485e      	ldr	r0, [pc, #376]	; (8017528 <_printf_i+0x244>)
 80173ae:	230a      	movs	r3, #10
 80173b0:	e019      	b.n	80173e6 <_printf_i+0x102>
 80173b2:	680e      	ldr	r6, [r1, #0]
 80173b4:	602b      	str	r3, [r5, #0]
 80173b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80173ba:	bf18      	it	ne
 80173bc:	b236      	sxthne	r6, r6
 80173be:	e7ef      	b.n	80173a0 <_printf_i+0xbc>
 80173c0:	682b      	ldr	r3, [r5, #0]
 80173c2:	6820      	ldr	r0, [r4, #0]
 80173c4:	1d19      	adds	r1, r3, #4
 80173c6:	6029      	str	r1, [r5, #0]
 80173c8:	0601      	lsls	r1, r0, #24
 80173ca:	d501      	bpl.n	80173d0 <_printf_i+0xec>
 80173cc:	681e      	ldr	r6, [r3, #0]
 80173ce:	e002      	b.n	80173d6 <_printf_i+0xf2>
 80173d0:	0646      	lsls	r6, r0, #25
 80173d2:	d5fb      	bpl.n	80173cc <_printf_i+0xe8>
 80173d4:	881e      	ldrh	r6, [r3, #0]
 80173d6:	4854      	ldr	r0, [pc, #336]	; (8017528 <_printf_i+0x244>)
 80173d8:	2f6f      	cmp	r7, #111	; 0x6f
 80173da:	bf0c      	ite	eq
 80173dc:	2308      	moveq	r3, #8
 80173de:	230a      	movne	r3, #10
 80173e0:	2100      	movs	r1, #0
 80173e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80173e6:	6865      	ldr	r5, [r4, #4]
 80173e8:	60a5      	str	r5, [r4, #8]
 80173ea:	2d00      	cmp	r5, #0
 80173ec:	bfa2      	ittt	ge
 80173ee:	6821      	ldrge	r1, [r4, #0]
 80173f0:	f021 0104 	bicge.w	r1, r1, #4
 80173f4:	6021      	strge	r1, [r4, #0]
 80173f6:	b90e      	cbnz	r6, 80173fc <_printf_i+0x118>
 80173f8:	2d00      	cmp	r5, #0
 80173fa:	d04d      	beq.n	8017498 <_printf_i+0x1b4>
 80173fc:	4615      	mov	r5, r2
 80173fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8017402:	fb03 6711 	mls	r7, r3, r1, r6
 8017406:	5dc7      	ldrb	r7, [r0, r7]
 8017408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801740c:	4637      	mov	r7, r6
 801740e:	42bb      	cmp	r3, r7
 8017410:	460e      	mov	r6, r1
 8017412:	d9f4      	bls.n	80173fe <_printf_i+0x11a>
 8017414:	2b08      	cmp	r3, #8
 8017416:	d10b      	bne.n	8017430 <_printf_i+0x14c>
 8017418:	6823      	ldr	r3, [r4, #0]
 801741a:	07de      	lsls	r6, r3, #31
 801741c:	d508      	bpl.n	8017430 <_printf_i+0x14c>
 801741e:	6923      	ldr	r3, [r4, #16]
 8017420:	6861      	ldr	r1, [r4, #4]
 8017422:	4299      	cmp	r1, r3
 8017424:	bfde      	ittt	le
 8017426:	2330      	movle	r3, #48	; 0x30
 8017428:	f805 3c01 	strble.w	r3, [r5, #-1]
 801742c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017430:	1b52      	subs	r2, r2, r5
 8017432:	6122      	str	r2, [r4, #16]
 8017434:	f8cd a000 	str.w	sl, [sp]
 8017438:	464b      	mov	r3, r9
 801743a:	aa03      	add	r2, sp, #12
 801743c:	4621      	mov	r1, r4
 801743e:	4640      	mov	r0, r8
 8017440:	f7ff fee2 	bl	8017208 <_printf_common>
 8017444:	3001      	adds	r0, #1
 8017446:	d14c      	bne.n	80174e2 <_printf_i+0x1fe>
 8017448:	f04f 30ff 	mov.w	r0, #4294967295
 801744c:	b004      	add	sp, #16
 801744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017452:	4835      	ldr	r0, [pc, #212]	; (8017528 <_printf_i+0x244>)
 8017454:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017458:	6829      	ldr	r1, [r5, #0]
 801745a:	6823      	ldr	r3, [r4, #0]
 801745c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017460:	6029      	str	r1, [r5, #0]
 8017462:	061d      	lsls	r5, r3, #24
 8017464:	d514      	bpl.n	8017490 <_printf_i+0x1ac>
 8017466:	07df      	lsls	r7, r3, #31
 8017468:	bf44      	itt	mi
 801746a:	f043 0320 	orrmi.w	r3, r3, #32
 801746e:	6023      	strmi	r3, [r4, #0]
 8017470:	b91e      	cbnz	r6, 801747a <_printf_i+0x196>
 8017472:	6823      	ldr	r3, [r4, #0]
 8017474:	f023 0320 	bic.w	r3, r3, #32
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	2310      	movs	r3, #16
 801747c:	e7b0      	b.n	80173e0 <_printf_i+0xfc>
 801747e:	6823      	ldr	r3, [r4, #0]
 8017480:	f043 0320 	orr.w	r3, r3, #32
 8017484:	6023      	str	r3, [r4, #0]
 8017486:	2378      	movs	r3, #120	; 0x78
 8017488:	4828      	ldr	r0, [pc, #160]	; (801752c <_printf_i+0x248>)
 801748a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801748e:	e7e3      	b.n	8017458 <_printf_i+0x174>
 8017490:	0659      	lsls	r1, r3, #25
 8017492:	bf48      	it	mi
 8017494:	b2b6      	uxthmi	r6, r6
 8017496:	e7e6      	b.n	8017466 <_printf_i+0x182>
 8017498:	4615      	mov	r5, r2
 801749a:	e7bb      	b.n	8017414 <_printf_i+0x130>
 801749c:	682b      	ldr	r3, [r5, #0]
 801749e:	6826      	ldr	r6, [r4, #0]
 80174a0:	6961      	ldr	r1, [r4, #20]
 80174a2:	1d18      	adds	r0, r3, #4
 80174a4:	6028      	str	r0, [r5, #0]
 80174a6:	0635      	lsls	r5, r6, #24
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	d501      	bpl.n	80174b0 <_printf_i+0x1cc>
 80174ac:	6019      	str	r1, [r3, #0]
 80174ae:	e002      	b.n	80174b6 <_printf_i+0x1d2>
 80174b0:	0670      	lsls	r0, r6, #25
 80174b2:	d5fb      	bpl.n	80174ac <_printf_i+0x1c8>
 80174b4:	8019      	strh	r1, [r3, #0]
 80174b6:	2300      	movs	r3, #0
 80174b8:	6123      	str	r3, [r4, #16]
 80174ba:	4615      	mov	r5, r2
 80174bc:	e7ba      	b.n	8017434 <_printf_i+0x150>
 80174be:	682b      	ldr	r3, [r5, #0]
 80174c0:	1d1a      	adds	r2, r3, #4
 80174c2:	602a      	str	r2, [r5, #0]
 80174c4:	681d      	ldr	r5, [r3, #0]
 80174c6:	6862      	ldr	r2, [r4, #4]
 80174c8:	2100      	movs	r1, #0
 80174ca:	4628      	mov	r0, r5
 80174cc:	f7e8 ff38 	bl	8000340 <memchr>
 80174d0:	b108      	cbz	r0, 80174d6 <_printf_i+0x1f2>
 80174d2:	1b40      	subs	r0, r0, r5
 80174d4:	6060      	str	r0, [r4, #4]
 80174d6:	6863      	ldr	r3, [r4, #4]
 80174d8:	6123      	str	r3, [r4, #16]
 80174da:	2300      	movs	r3, #0
 80174dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174e0:	e7a8      	b.n	8017434 <_printf_i+0x150>
 80174e2:	6923      	ldr	r3, [r4, #16]
 80174e4:	462a      	mov	r2, r5
 80174e6:	4649      	mov	r1, r9
 80174e8:	4640      	mov	r0, r8
 80174ea:	47d0      	blx	sl
 80174ec:	3001      	adds	r0, #1
 80174ee:	d0ab      	beq.n	8017448 <_printf_i+0x164>
 80174f0:	6823      	ldr	r3, [r4, #0]
 80174f2:	079b      	lsls	r3, r3, #30
 80174f4:	d413      	bmi.n	801751e <_printf_i+0x23a>
 80174f6:	68e0      	ldr	r0, [r4, #12]
 80174f8:	9b03      	ldr	r3, [sp, #12]
 80174fa:	4298      	cmp	r0, r3
 80174fc:	bfb8      	it	lt
 80174fe:	4618      	movlt	r0, r3
 8017500:	e7a4      	b.n	801744c <_printf_i+0x168>
 8017502:	2301      	movs	r3, #1
 8017504:	4632      	mov	r2, r6
 8017506:	4649      	mov	r1, r9
 8017508:	4640      	mov	r0, r8
 801750a:	47d0      	blx	sl
 801750c:	3001      	adds	r0, #1
 801750e:	d09b      	beq.n	8017448 <_printf_i+0x164>
 8017510:	3501      	adds	r5, #1
 8017512:	68e3      	ldr	r3, [r4, #12]
 8017514:	9903      	ldr	r1, [sp, #12]
 8017516:	1a5b      	subs	r3, r3, r1
 8017518:	42ab      	cmp	r3, r5
 801751a:	dcf2      	bgt.n	8017502 <_printf_i+0x21e>
 801751c:	e7eb      	b.n	80174f6 <_printf_i+0x212>
 801751e:	2500      	movs	r5, #0
 8017520:	f104 0619 	add.w	r6, r4, #25
 8017524:	e7f5      	b.n	8017512 <_printf_i+0x22e>
 8017526:	bf00      	nop
 8017528:	08017ab9 	.word	0x08017ab9
 801752c:	08017aca 	.word	0x08017aca

08017530 <memmove>:
 8017530:	4288      	cmp	r0, r1
 8017532:	b510      	push	{r4, lr}
 8017534:	eb01 0402 	add.w	r4, r1, r2
 8017538:	d902      	bls.n	8017540 <memmove+0x10>
 801753a:	4284      	cmp	r4, r0
 801753c:	4623      	mov	r3, r4
 801753e:	d807      	bhi.n	8017550 <memmove+0x20>
 8017540:	1e43      	subs	r3, r0, #1
 8017542:	42a1      	cmp	r1, r4
 8017544:	d008      	beq.n	8017558 <memmove+0x28>
 8017546:	f811 2b01 	ldrb.w	r2, [r1], #1
 801754a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801754e:	e7f8      	b.n	8017542 <memmove+0x12>
 8017550:	4402      	add	r2, r0
 8017552:	4601      	mov	r1, r0
 8017554:	428a      	cmp	r2, r1
 8017556:	d100      	bne.n	801755a <memmove+0x2a>
 8017558:	bd10      	pop	{r4, pc}
 801755a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801755e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017562:	e7f7      	b.n	8017554 <memmove+0x24>

08017564 <_free_r>:
 8017564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017566:	2900      	cmp	r1, #0
 8017568:	d044      	beq.n	80175f4 <_free_r+0x90>
 801756a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801756e:	9001      	str	r0, [sp, #4]
 8017570:	2b00      	cmp	r3, #0
 8017572:	f1a1 0404 	sub.w	r4, r1, #4
 8017576:	bfb8      	it	lt
 8017578:	18e4      	addlt	r4, r4, r3
 801757a:	f000 f913 	bl	80177a4 <__malloc_lock>
 801757e:	4a1e      	ldr	r2, [pc, #120]	; (80175f8 <_free_r+0x94>)
 8017580:	9801      	ldr	r0, [sp, #4]
 8017582:	6813      	ldr	r3, [r2, #0]
 8017584:	b933      	cbnz	r3, 8017594 <_free_r+0x30>
 8017586:	6063      	str	r3, [r4, #4]
 8017588:	6014      	str	r4, [r2, #0]
 801758a:	b003      	add	sp, #12
 801758c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017590:	f000 b90e 	b.w	80177b0 <__malloc_unlock>
 8017594:	42a3      	cmp	r3, r4
 8017596:	d908      	bls.n	80175aa <_free_r+0x46>
 8017598:	6825      	ldr	r5, [r4, #0]
 801759a:	1961      	adds	r1, r4, r5
 801759c:	428b      	cmp	r3, r1
 801759e:	bf01      	itttt	eq
 80175a0:	6819      	ldreq	r1, [r3, #0]
 80175a2:	685b      	ldreq	r3, [r3, #4]
 80175a4:	1949      	addeq	r1, r1, r5
 80175a6:	6021      	streq	r1, [r4, #0]
 80175a8:	e7ed      	b.n	8017586 <_free_r+0x22>
 80175aa:	461a      	mov	r2, r3
 80175ac:	685b      	ldr	r3, [r3, #4]
 80175ae:	b10b      	cbz	r3, 80175b4 <_free_r+0x50>
 80175b0:	42a3      	cmp	r3, r4
 80175b2:	d9fa      	bls.n	80175aa <_free_r+0x46>
 80175b4:	6811      	ldr	r1, [r2, #0]
 80175b6:	1855      	adds	r5, r2, r1
 80175b8:	42a5      	cmp	r5, r4
 80175ba:	d10b      	bne.n	80175d4 <_free_r+0x70>
 80175bc:	6824      	ldr	r4, [r4, #0]
 80175be:	4421      	add	r1, r4
 80175c0:	1854      	adds	r4, r2, r1
 80175c2:	42a3      	cmp	r3, r4
 80175c4:	6011      	str	r1, [r2, #0]
 80175c6:	d1e0      	bne.n	801758a <_free_r+0x26>
 80175c8:	681c      	ldr	r4, [r3, #0]
 80175ca:	685b      	ldr	r3, [r3, #4]
 80175cc:	6053      	str	r3, [r2, #4]
 80175ce:	4421      	add	r1, r4
 80175d0:	6011      	str	r1, [r2, #0]
 80175d2:	e7da      	b.n	801758a <_free_r+0x26>
 80175d4:	d902      	bls.n	80175dc <_free_r+0x78>
 80175d6:	230c      	movs	r3, #12
 80175d8:	6003      	str	r3, [r0, #0]
 80175da:	e7d6      	b.n	801758a <_free_r+0x26>
 80175dc:	6825      	ldr	r5, [r4, #0]
 80175de:	1961      	adds	r1, r4, r5
 80175e0:	428b      	cmp	r3, r1
 80175e2:	bf04      	itt	eq
 80175e4:	6819      	ldreq	r1, [r3, #0]
 80175e6:	685b      	ldreq	r3, [r3, #4]
 80175e8:	6063      	str	r3, [r4, #4]
 80175ea:	bf04      	itt	eq
 80175ec:	1949      	addeq	r1, r1, r5
 80175ee:	6021      	streq	r1, [r4, #0]
 80175f0:	6054      	str	r4, [r2, #4]
 80175f2:	e7ca      	b.n	801758a <_free_r+0x26>
 80175f4:	b003      	add	sp, #12
 80175f6:	bd30      	pop	{r4, r5, pc}
 80175f8:	240030c0 	.word	0x240030c0

080175fc <sbrk_aligned>:
 80175fc:	b570      	push	{r4, r5, r6, lr}
 80175fe:	4e0e      	ldr	r6, [pc, #56]	; (8017638 <sbrk_aligned+0x3c>)
 8017600:	460c      	mov	r4, r1
 8017602:	6831      	ldr	r1, [r6, #0]
 8017604:	4605      	mov	r5, r0
 8017606:	b911      	cbnz	r1, 801760e <sbrk_aligned+0x12>
 8017608:	f000 f8bc 	bl	8017784 <_sbrk_r>
 801760c:	6030      	str	r0, [r6, #0]
 801760e:	4621      	mov	r1, r4
 8017610:	4628      	mov	r0, r5
 8017612:	f000 f8b7 	bl	8017784 <_sbrk_r>
 8017616:	1c43      	adds	r3, r0, #1
 8017618:	d00a      	beq.n	8017630 <sbrk_aligned+0x34>
 801761a:	1cc4      	adds	r4, r0, #3
 801761c:	f024 0403 	bic.w	r4, r4, #3
 8017620:	42a0      	cmp	r0, r4
 8017622:	d007      	beq.n	8017634 <sbrk_aligned+0x38>
 8017624:	1a21      	subs	r1, r4, r0
 8017626:	4628      	mov	r0, r5
 8017628:	f000 f8ac 	bl	8017784 <_sbrk_r>
 801762c:	3001      	adds	r0, #1
 801762e:	d101      	bne.n	8017634 <sbrk_aligned+0x38>
 8017630:	f04f 34ff 	mov.w	r4, #4294967295
 8017634:	4620      	mov	r0, r4
 8017636:	bd70      	pop	{r4, r5, r6, pc}
 8017638:	240030c4 	.word	0x240030c4

0801763c <_malloc_r>:
 801763c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017640:	1ccd      	adds	r5, r1, #3
 8017642:	f025 0503 	bic.w	r5, r5, #3
 8017646:	3508      	adds	r5, #8
 8017648:	2d0c      	cmp	r5, #12
 801764a:	bf38      	it	cc
 801764c:	250c      	movcc	r5, #12
 801764e:	2d00      	cmp	r5, #0
 8017650:	4607      	mov	r7, r0
 8017652:	db01      	blt.n	8017658 <_malloc_r+0x1c>
 8017654:	42a9      	cmp	r1, r5
 8017656:	d905      	bls.n	8017664 <_malloc_r+0x28>
 8017658:	230c      	movs	r3, #12
 801765a:	603b      	str	r3, [r7, #0]
 801765c:	2600      	movs	r6, #0
 801765e:	4630      	mov	r0, r6
 8017660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017664:	4e2e      	ldr	r6, [pc, #184]	; (8017720 <_malloc_r+0xe4>)
 8017666:	f000 f89d 	bl	80177a4 <__malloc_lock>
 801766a:	6833      	ldr	r3, [r6, #0]
 801766c:	461c      	mov	r4, r3
 801766e:	bb34      	cbnz	r4, 80176be <_malloc_r+0x82>
 8017670:	4629      	mov	r1, r5
 8017672:	4638      	mov	r0, r7
 8017674:	f7ff ffc2 	bl	80175fc <sbrk_aligned>
 8017678:	1c43      	adds	r3, r0, #1
 801767a:	4604      	mov	r4, r0
 801767c:	d14d      	bne.n	801771a <_malloc_r+0xde>
 801767e:	6834      	ldr	r4, [r6, #0]
 8017680:	4626      	mov	r6, r4
 8017682:	2e00      	cmp	r6, #0
 8017684:	d140      	bne.n	8017708 <_malloc_r+0xcc>
 8017686:	6823      	ldr	r3, [r4, #0]
 8017688:	4631      	mov	r1, r6
 801768a:	4638      	mov	r0, r7
 801768c:	eb04 0803 	add.w	r8, r4, r3
 8017690:	f000 f878 	bl	8017784 <_sbrk_r>
 8017694:	4580      	cmp	r8, r0
 8017696:	d13a      	bne.n	801770e <_malloc_r+0xd2>
 8017698:	6821      	ldr	r1, [r4, #0]
 801769a:	3503      	adds	r5, #3
 801769c:	1a6d      	subs	r5, r5, r1
 801769e:	f025 0503 	bic.w	r5, r5, #3
 80176a2:	3508      	adds	r5, #8
 80176a4:	2d0c      	cmp	r5, #12
 80176a6:	bf38      	it	cc
 80176a8:	250c      	movcc	r5, #12
 80176aa:	4629      	mov	r1, r5
 80176ac:	4638      	mov	r0, r7
 80176ae:	f7ff ffa5 	bl	80175fc <sbrk_aligned>
 80176b2:	3001      	adds	r0, #1
 80176b4:	d02b      	beq.n	801770e <_malloc_r+0xd2>
 80176b6:	6823      	ldr	r3, [r4, #0]
 80176b8:	442b      	add	r3, r5
 80176ba:	6023      	str	r3, [r4, #0]
 80176bc:	e00e      	b.n	80176dc <_malloc_r+0xa0>
 80176be:	6822      	ldr	r2, [r4, #0]
 80176c0:	1b52      	subs	r2, r2, r5
 80176c2:	d41e      	bmi.n	8017702 <_malloc_r+0xc6>
 80176c4:	2a0b      	cmp	r2, #11
 80176c6:	d916      	bls.n	80176f6 <_malloc_r+0xba>
 80176c8:	1961      	adds	r1, r4, r5
 80176ca:	42a3      	cmp	r3, r4
 80176cc:	6025      	str	r5, [r4, #0]
 80176ce:	bf18      	it	ne
 80176d0:	6059      	strne	r1, [r3, #4]
 80176d2:	6863      	ldr	r3, [r4, #4]
 80176d4:	bf08      	it	eq
 80176d6:	6031      	streq	r1, [r6, #0]
 80176d8:	5162      	str	r2, [r4, r5]
 80176da:	604b      	str	r3, [r1, #4]
 80176dc:	4638      	mov	r0, r7
 80176de:	f104 060b 	add.w	r6, r4, #11
 80176e2:	f000 f865 	bl	80177b0 <__malloc_unlock>
 80176e6:	f026 0607 	bic.w	r6, r6, #7
 80176ea:	1d23      	adds	r3, r4, #4
 80176ec:	1af2      	subs	r2, r6, r3
 80176ee:	d0b6      	beq.n	801765e <_malloc_r+0x22>
 80176f0:	1b9b      	subs	r3, r3, r6
 80176f2:	50a3      	str	r3, [r4, r2]
 80176f4:	e7b3      	b.n	801765e <_malloc_r+0x22>
 80176f6:	6862      	ldr	r2, [r4, #4]
 80176f8:	42a3      	cmp	r3, r4
 80176fa:	bf0c      	ite	eq
 80176fc:	6032      	streq	r2, [r6, #0]
 80176fe:	605a      	strne	r2, [r3, #4]
 8017700:	e7ec      	b.n	80176dc <_malloc_r+0xa0>
 8017702:	4623      	mov	r3, r4
 8017704:	6864      	ldr	r4, [r4, #4]
 8017706:	e7b2      	b.n	801766e <_malloc_r+0x32>
 8017708:	4634      	mov	r4, r6
 801770a:	6876      	ldr	r6, [r6, #4]
 801770c:	e7b9      	b.n	8017682 <_malloc_r+0x46>
 801770e:	230c      	movs	r3, #12
 8017710:	603b      	str	r3, [r7, #0]
 8017712:	4638      	mov	r0, r7
 8017714:	f000 f84c 	bl	80177b0 <__malloc_unlock>
 8017718:	e7a1      	b.n	801765e <_malloc_r+0x22>
 801771a:	6025      	str	r5, [r4, #0]
 801771c:	e7de      	b.n	80176dc <_malloc_r+0xa0>
 801771e:	bf00      	nop
 8017720:	240030c0 	.word	0x240030c0

08017724 <_realloc_r>:
 8017724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017728:	4680      	mov	r8, r0
 801772a:	4614      	mov	r4, r2
 801772c:	460e      	mov	r6, r1
 801772e:	b921      	cbnz	r1, 801773a <_realloc_r+0x16>
 8017730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017734:	4611      	mov	r1, r2
 8017736:	f7ff bf81 	b.w	801763c <_malloc_r>
 801773a:	b92a      	cbnz	r2, 8017748 <_realloc_r+0x24>
 801773c:	f7ff ff12 	bl	8017564 <_free_r>
 8017740:	4625      	mov	r5, r4
 8017742:	4628      	mov	r0, r5
 8017744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017748:	f000 f838 	bl	80177bc <_malloc_usable_size_r>
 801774c:	4284      	cmp	r4, r0
 801774e:	4607      	mov	r7, r0
 8017750:	d802      	bhi.n	8017758 <_realloc_r+0x34>
 8017752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017756:	d812      	bhi.n	801777e <_realloc_r+0x5a>
 8017758:	4621      	mov	r1, r4
 801775a:	4640      	mov	r0, r8
 801775c:	f7ff ff6e 	bl	801763c <_malloc_r>
 8017760:	4605      	mov	r5, r0
 8017762:	2800      	cmp	r0, #0
 8017764:	d0ed      	beq.n	8017742 <_realloc_r+0x1e>
 8017766:	42bc      	cmp	r4, r7
 8017768:	4622      	mov	r2, r4
 801776a:	4631      	mov	r1, r6
 801776c:	bf28      	it	cs
 801776e:	463a      	movcs	r2, r7
 8017770:	f7ff fbb0 	bl	8016ed4 <memcpy>
 8017774:	4631      	mov	r1, r6
 8017776:	4640      	mov	r0, r8
 8017778:	f7ff fef4 	bl	8017564 <_free_r>
 801777c:	e7e1      	b.n	8017742 <_realloc_r+0x1e>
 801777e:	4635      	mov	r5, r6
 8017780:	e7df      	b.n	8017742 <_realloc_r+0x1e>
	...

08017784 <_sbrk_r>:
 8017784:	b538      	push	{r3, r4, r5, lr}
 8017786:	4d06      	ldr	r5, [pc, #24]	; (80177a0 <_sbrk_r+0x1c>)
 8017788:	2300      	movs	r3, #0
 801778a:	4604      	mov	r4, r0
 801778c:	4608      	mov	r0, r1
 801778e:	602b      	str	r3, [r5, #0]
 8017790:	f7eb ff98 	bl	80036c4 <_sbrk>
 8017794:	1c43      	adds	r3, r0, #1
 8017796:	d102      	bne.n	801779e <_sbrk_r+0x1a>
 8017798:	682b      	ldr	r3, [r5, #0]
 801779a:	b103      	cbz	r3, 801779e <_sbrk_r+0x1a>
 801779c:	6023      	str	r3, [r4, #0]
 801779e:	bd38      	pop	{r3, r4, r5, pc}
 80177a0:	240030c8 	.word	0x240030c8

080177a4 <__malloc_lock>:
 80177a4:	4801      	ldr	r0, [pc, #4]	; (80177ac <__malloc_lock+0x8>)
 80177a6:	f000 b811 	b.w	80177cc <__retarget_lock_acquire_recursive>
 80177aa:	bf00      	nop
 80177ac:	240030cc 	.word	0x240030cc

080177b0 <__malloc_unlock>:
 80177b0:	4801      	ldr	r0, [pc, #4]	; (80177b8 <__malloc_unlock+0x8>)
 80177b2:	f000 b80c 	b.w	80177ce <__retarget_lock_release_recursive>
 80177b6:	bf00      	nop
 80177b8:	240030cc 	.word	0x240030cc

080177bc <_malloc_usable_size_r>:
 80177bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177c0:	1f18      	subs	r0, r3, #4
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	bfbc      	itt	lt
 80177c6:	580b      	ldrlt	r3, [r1, r0]
 80177c8:	18c0      	addlt	r0, r0, r3
 80177ca:	4770      	bx	lr

080177cc <__retarget_lock_acquire_recursive>:
 80177cc:	4770      	bx	lr

080177ce <__retarget_lock_release_recursive>:
 80177ce:	4770      	bx	lr

080177d0 <_init>:
 80177d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177d2:	bf00      	nop
 80177d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177d6:	bc08      	pop	{r3}
 80177d8:	469e      	mov	lr, r3
 80177da:	4770      	bx	lr

080177dc <_fini>:
 80177dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177de:	bf00      	nop
 80177e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177e2:	bc08      	pop	{r3}
 80177e4:	469e      	mov	lr, r3
 80177e6:	4770      	bx	lr
