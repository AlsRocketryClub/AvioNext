
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018648  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08018918  08018918  00028918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018d00  08018d00  00028d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018d08  08018d08  00028d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018d0c  08018d0c  00028d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  08018d10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003208  24000154  08018e64  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2400335c  08018e64  0003335c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   000360e6  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000063ec  00000000  00000000  000662ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b90  00000000  00000000  0006c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021c9  00000000  00000000  0006f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e6f3  00000000  00000000  000713f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003bf6b  00000000  00000000  000afae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e42e  00000000  00000000  000eba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c580  00000000  00000000  00269e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00276400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018900 	.word	0x08018900

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	08018900 	.word	0x08018900

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fd7e 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fcc2 	bl	800f088 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fcbc 	bl	800f088 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fd6c 	bl	80081f4 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fd8 	.word	0x24000fd8

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fd54 	bl	80081f4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fc98 	bl	800f088 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fe8d 	bl	800f480 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fd41 	bl	80081f4 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fd8 	.word	0x24000fd8

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fd2a 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e fc6e 	bl	800f088 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e fc68 	bl	800f088 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fd18 	bl	80081f4 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fd8 	.word	0x24000fd8

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018aec 	.word	0x08018aec
 8000c30:	24000b54 	.word	0x24000b54
 8000c34:	24000274 	.word	0x24000274
 8000c38:	2400053c 	.word	0x2400053c
 8000c3c:	24000804 	.word	0x24000804
 8000c40:	240009ac 	.word	0x240009ac
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00f f826 	bl	800fd08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00f f820 	bl	800fd08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00f f81a 	bl	800fd08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00f f814 	bl	800fd08 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018aec 	.word	0x08018aec
 8000cec:	240009ac 	.word	0x240009ac
 8000cf0:	24000274 	.word	0x24000274
 8000cf4:	240011cc 	.word	0x240011cc
 8000cf8:	2400053c 	.word	0x2400053c
 8000cfc:	240010e8 	.word	0x240010e8
 8000d00:	24000804 	.word	0x24000804
 8000d04:	24001134 	.word	0x24001134

08000d08 <rand_range>:
	{
		return normalized - LENGTH*2/3;
	}
}

uint32_t rand_range(uint32_t a, uint32_t b) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	uint32_t rand = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d914      	bls.n	8000d4e <rand_range+0x46>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480f      	ldr	r0, [pc, #60]	; (8000d68 <rand_range+0x60>)
 8000d2c:	f00c fb1a 	bl	800d364 <HAL_RNG_GenerateRandomNumber>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10b      	bne.n	8000d4e <rand_range+0x46>
	{
		return a+rand/(MAX/(b-a));
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	6839      	ldr	r1, [r7, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	e008      	b.n	8000d60 <rand_range+0x58>
	}
	else
	{
		HAL_Delay(100);
 8000d4e:	2064      	movs	r0, #100	; 0x64
 8000d50:	f002 ff9e 	bl	8003c90 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 8000d54:	210a      	movs	r1, #10
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <rand_range+0x64>)
 8000d58:	f016 f818 	bl	8016d8c <CDC_Transmit_HS>
	}
	return -1;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24000ec0 	.word	0x24000ec0
 8000d6c:	08018918 	.word	0x08018918

08000d70 <LoRA_Read_Register>:

uint8_t LoRA_Read_Register(uint8_t addr){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoRA_Read_Register+0x48>)
 8000d82:	f007 fa37 	bl	80081f4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoRA_Read_Register+0x4c>)
 8000d8e:	f00e f97b 	bl	800f088 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d92:	f107 010f 	add.w	r1, r7, #15
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <LoRA_Read_Register+0x4c>)
 8000d9c:	f00e fb70 	bl	800f480 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <LoRA_Read_Register+0x48>)
 8000da8:	f007 fa24 	bl	80081f4 <HAL_GPIO_WritePin>

	return reg_value;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58020000 	.word	0x58020000
 8000dbc:	24001060 	.word	0x24001060

08000dc0 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoRA_Write_Register+0x54>)
 8000de2:	f007 fa07 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000de6:	1df9      	adds	r1, r7, #7
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	2201      	movs	r2, #1
 8000dec:	480a      	ldr	r0, [pc, #40]	; (8000e18 <LoRA_Write_Register+0x58>)
 8000dee:	f00e f94b 	bl	800f088 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000df2:	1db9      	adds	r1, r7, #6
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	2201      	movs	r2, #1
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <LoRA_Write_Register+0x58>)
 8000dfa:	f00e f945 	bl	800f088 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <LoRA_Write_Register+0x54>)
 8000e06:	f007 f9f5 	bl	80081f4 <HAL_GPIO_WritePin>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	58020000 	.word	0x58020000
 8000e18:	24001060 	.word	0x24001060

08000e1c <LoRA_sleep>:


void LoRA_sleep(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff ffcc 	bl	8000dc0 <LoRA_Write_Register>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	17c8      	asrs	r0, r1, #31
 8000e38:	460a      	mov	r2, r1
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	1355      	asrs	r5, r2, #13
 8000e3e:	04d4      	lsls	r4, r2, #19
 8000e40:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <LoRA_set_frequency+0x78>)
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	4620      	mov	r0, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f7ff fac9 	bl	80003e0 <__aeabi_uldivmod>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0c02      	lsrs	r2, r0, #16
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	0c0b      	lsrs	r3, r1, #16
 8000e6a:	b2d3      	uxtb	r3, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f7ff ffa6 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	0a02      	lsrs	r2, r0, #8
 8000e82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e86:	0a0b      	lsrs	r3, r1, #8
 8000e88:	b2d3      	uxtb	r3, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2007      	movs	r0, #7
 8000e8e:	f7ff ff97 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e92:	7a3b      	ldrb	r3, [r7, #8]
 8000e94:	4619      	mov	r1, r3
 8000e96:	2008      	movs	r0, #8
 8000e98:	f7ff ff92 	bl	8000dc0 <LoRA_Write_Register>
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea4:	01e84800 	.word	0x01e84800

08000ea8 <LoRA_idle>:

void LoRA_idle(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000eac:	2181      	movs	r1, #129	; 0x81
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff86 	bl	8000dc0 <LoRA_Write_Register>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000ec2:	231b      	movs	r3, #27
 8000ec4:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b78      	cmp	r3, #120	; 0x78
 8000eca:	d809      	bhi.n	8000ee0 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	3b2d      	subs	r3, #45	; 0x2d
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <LoRA_setOCP+0x60>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1052      	asrs	r2, r2, #1
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e00b      	b.n	8000ef8 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2bf0      	cmp	r3, #240	; 0xf0
 8000ee4:	d808      	bhi.n	8000ef8 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	331e      	adds	r3, #30
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoRA_setOCP+0x60>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	1092      	asrs	r2, r2, #2
 8000ef2:	17db      	asrs	r3, r3, #31
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	200b      	movs	r0, #11
 8000f0a:	f7ff ff59 	bl	8000dc0 <LoRA_Write_Register>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	66666667 	.word	0x66666667

08000f1c <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b11      	cmp	r3, #17
 8000f28:	dd0f      	ble.n	8000f4a <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b14      	cmp	r3, #20
 8000f2e:	dd01      	ble.n	8000f34 <LoRA_setTxPower+0x18>
        level = 20;
 8000f30:	2314      	movs	r3, #20
 8000f32:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b03      	subs	r3, #3
 8000f38:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000f3a:	2187      	movs	r1, #135	; 0x87
 8000f3c:	204d      	movs	r0, #77	; 0x4d
 8000f3e:	f7ff ff3f 	bl	8000dc0 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000f42:	208c      	movs	r0, #140	; 0x8c
 8000f44:	f7ff ffb8 	bl	8000eb8 <LoRA_setOCP>
 8000f48:	e00b      	b.n	8000f62 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	dc01      	bgt.n	8000f54 <LoRA_setTxPower+0x38>
        level = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000f54:	2184      	movs	r1, #132	; 0x84
 8000f56:	204d      	movs	r0, #77	; 0x4d
 8000f58:	f7ff ff32 	bl	8000dc0 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f7ff ffab 	bl	8000eb8 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3b02      	subs	r3, #2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	2009      	movs	r0, #9
 8000f78:	f7ff ff22 	bl	8000dc0 <LoRA_Write_Register>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f88:	201d      	movs	r0, #29
 8000f8a:	f7ff fef1 	bl	8000d70 <LoRA_Read_Register>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4619      	mov	r1, r3
 8000f98:	201d      	movs	r0, #29
 8000f9a:	f7ff ff11 	bl	8000dc0 <LoRA_Write_Register>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09c      	sub	sp, #112	; 0x70
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4822      	ldr	r0, [pc, #136]	; (800103c <LoRA_begin+0x98>)
 8000fb2:	f007 f91f 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <LoRA_begin+0x9c>)
 8000fbe:	f007 f919 	bl	80081f4 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000fc2:	2042      	movs	r0, #66	; 0x42
 8000fc4:	f7ff fed4 	bl	8000d70 <LoRA_Read_Register>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000fce:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	491b      	ldr	r1, [pc, #108]	; (8001044 <LoRA_begin+0xa0>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f016 fb2b 	bl	8017634 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f99e 	bl	8000324 <strlen>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f015 fecb 	bl	8016d8c <CDC_Transmit_HS>

	LoRA_sleep();
 8000ff6:	f7ff ff11 	bl	8000e1c <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000ffa:	4813      	ldr	r0, [pc, #76]	; (8001048 <LoRA_begin+0xa4>)
 8000ffc:	f7ff ff16 	bl	8000e2c <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	200f      	movs	r0, #15
 8001004:	f7ff fedc 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001008:	2100      	movs	r1, #0
 800100a:	200e      	movs	r0, #14
 800100c:	f7ff fed8 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001010:	200c      	movs	r0, #12
 8001012:	f7ff fead 	bl	8000d70 <LoRA_Read_Register>
 8001016:	4603      	mov	r3, r0
 8001018:	f043 0303 	orr.w	r3, r3, #3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	200c      	movs	r0, #12
 8001022:	f7ff fecd 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001026:	2104      	movs	r1, #4
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f7ff fec9 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 800102e:	2011      	movs	r0, #17
 8001030:	f7ff ff74 	bl	8000f1c <LoRA_setTxPower>

}
 8001034:	bf00      	nop
 8001036:	3770      	adds	r7, #112	; 0x70
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58020c00 	.word	0x58020c00
 8001040:	58020000 	.word	0x58020000
 8001044:	08018924 	.word	0x08018924
 8001048:	33bca100 	.word	0x33bca100

0800104c <LoRA_beginPacket>:


void LoRA_beginPacket(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001050:	f7ff ff98 	bl	8000f84 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001054:	2100      	movs	r1, #0
 8001056:	200d      	movs	r0, #13
 8001058:	f7ff feb2 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 800105c:	2100      	movs	r1, #0
 800105e:	2022      	movs	r0, #34	; 0x22
 8001060:	f7ff feae 	bl	8000dc0 <LoRA_Write_Register>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800106c:	2183      	movs	r1, #131	; 0x83
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fea6 	bl	8000dc0 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8001074:	bf00      	nop
 8001076:	2012      	movs	r0, #18
 8001078:	f7ff fe7a 	bl	8000d70 <LoRA_Read_Register>
 800107c:	4603      	mov	r3, r0
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f7      	beq.n	8001076 <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001086:	2185      	movs	r1, #133	; 0x85
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fe99 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800108e:	2108      	movs	r1, #8
 8001090:	2012      	movs	r0, #18
 8001092:	f7ff fe95 	bl	8000dc0 <LoRA_Write_Register>

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}

0800109a <LoRA_parsePacket>:


int LoRA_parsePacket(){
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010a4:	2012      	movs	r0, #18
 80010a6:	f7ff fe63 	bl	8000d70 <LoRA_Read_Register>
 80010aa:	4603      	mov	r3, r0
 80010ac:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80010ae:	f7ff ff69 	bl	8000f84 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	2012      	movs	r0, #18
 80010ba:	f7ff fe81 	bl	8000dc0 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d016      	beq.n	80010f6 <LoRA_parsePacket+0x5c>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d111      	bne.n	80010f6 <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80010d2:	2013      	movs	r0, #19
 80010d4:	f7ff fe4c 	bl	8000d70 <LoRA_Read_Register>
 80010d8:	4603      	mov	r3, r0
 80010da:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80010dc:	2010      	movs	r0, #16
 80010de:	f7ff fe47 	bl	8000d70 <LoRA_Read_Register>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4619      	mov	r1, r3
 80010e6:	200d      	movs	r0, #13
 80010e8:	f7ff fe6a 	bl	8000dc0 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010ec:	2185      	movs	r1, #133	; 0x85
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff fe66 	bl	8000dc0 <LoRA_Write_Register>
 80010f4:	e00d      	b.n	8001112 <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff fe3a 	bl	8000d70 <LoRA_Read_Register>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b85      	cmp	r3, #133	; 0x85
 8001100:	d007      	beq.n	8001112 <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001102:	2100      	movs	r1, #0
 8001104:	200d      	movs	r0, #13
 8001106:	f7ff fe5b 	bl	8000dc0 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800110a:	2185      	movs	r1, #133	; 0x85
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff fe57 	bl	8000dc0 <LoRA_Write_Register>
	}
	return packetLenght;
 8001112:	687b      	ldr	r3, [r7, #4]

}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b0c4      	sub	sp, #272	; 0x110
 8001120:	af00      	add	r7, sp, #0
 8001122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001126:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800112a:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 800112c:	f7ff febc 	bl	8000ea8 <LoRA_idle>

	char debug[MAX_PAYLOAD_LENGHT];
	if(recv_packet(debug, MAX_PAYLOAD_LENGHT)) {
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	21fa      	movs	r1, #250	; 0xfa
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f8dc 	bl	80012f4 <recv_packet>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d022      	beq.n	8001188 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8001142:	2064      	movs	r0, #100	; 0x64
 8001144:	f002 fda4 	bl	8003c90 <HAL_Delay>
		strcat(debug, " was thrown away");
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f8e9 	bl	8000324 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4413      	add	r3, r2
 800115c:	4a32      	ldr	r2, [pc, #200]	; (8001228 <LoRA_sendPacket+0x10c>)
 800115e:	461d      	mov	r5, r3
 8001160:	4614      	mov	r4, r2
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	6028      	str	r0, [r5, #0]
 8001166:	6069      	str	r1, [r5, #4]
 8001168:	60aa      	str	r2, [r5, #8]
 800116a:	60eb      	str	r3, [r5, #12]
 800116c:	7823      	ldrb	r3, [r4, #0]
 800116e:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f8d5 	bl	8000324 <strlen>
 800117a:	4602      	mov	r2, r0
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f015 fe02 	bl	8016d8c <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001188:	2012      	movs	r0, #18
 800118a:	f7ff fdf1 	bl	8000d70 <LoRA_Read_Register>
 800118e:	4603      	mov	r3, r0
 8001190:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8001194:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <LoRA_sendPacket+0x90>
 80011a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d033      	beq.n	8001214 <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80011ac:	f7ff ff4e 	bl	800104c <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80011b6:	e011      	b.n	80011dc <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80011b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011bc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011c0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdf7 	bl	8000dc0 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 80011d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011d6:	3301      	adds	r3, #1
 80011d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80011dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f7ff f89d 	bl	8000324 <strlen>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8e1      	bhi.n	80011b8 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80011f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	f7ff f891 	bl	8000324 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	2022      	movs	r0, #34	; 0x22
 800120a:	f7ff fdd9 	bl	8000dc0 <LoRA_Write_Register>
    	LoRA_endPacket();
 800120e:	f7ff ff2b 	bl	8001068 <LoRA_endPacket>
 8001212:	e004      	b.n	800121e <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001214:	2185      	movs	r1, #133	; 0x85
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fdd2 	bl	8000dc0 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001224:	46bd      	mov	sp, r7
 8001226:	bdb0      	pop	{r4, r5, r7, pc}
 8001228:	08018928 	.word	0x08018928

0800122c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2102      	movs	r1, #2
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <disarm+0xac>)
 800123a:	f006 ffdb 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2104      	movs	r1, #4
 8001242:	4825      	ldr	r0, [pc, #148]	; (80012d8 <disarm+0xac>)
 8001244:	f006 ffd6 	bl	80081f4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2102      	movs	r1, #2
 800124c:	4823      	ldr	r0, [pc, #140]	; (80012dc <disarm+0xb0>)
 800124e:	f006 ffd1 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <disarm+0xb4>)
 800125a:	f006 ffcb 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	481e      	ldr	r0, [pc, #120]	; (80012e0 <disarm+0xb4>)
 8001266:	f006 ffc5 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001270:	481b      	ldr	r0, [pc, #108]	; (80012e0 <disarm+0xb4>)
 8001272:	f006 ffbf 	bl	80081f4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2102      	movs	r1, #2
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <disarm+0xb8>)
 800127c:	f006 ffba 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <disarm+0xbc>)
 8001288:	f006 ffb4 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001292:	4815      	ldr	r0, [pc, #84]	; (80012e8 <disarm+0xbc>)
 8001294:	f006 ffae 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <disarm+0xbc>)
 80012a0:	f006 ffa8 	bl	80081f4 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <disarm+0xc0>)
 80012a6:	22ff      	movs	r2, #255	; 0xff
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <disarm+0xc0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <disarm+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80012b6:	f7ff fb6f 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <disarm+0xc4>)
 80012be:	461a      	mov	r2, r3
 80012c0:	460b      	mov	r3, r1
 80012c2:	cb03      	ldmia	r3!, {r0, r1}
 80012c4:	6010      	str	r0, [r2, #0]
 80012c6:	6051      	str	r1, [r2, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	7213      	strb	r3, [r2, #8]
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	58020000 	.word	0x58020000
 80012dc:	58020400 	.word	0x58020400
 80012e0:	58021400 	.word	0x58021400
 80012e4:	58021800 	.word	0x58021800
 80012e8:	58021000 	.word	0x58021000
 80012ec:	24000b54 	.word	0x24000b54
 80012f0:	0801893c 	.word	0x0801893c

080012f4 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 80012fe:	f7ff fecc 	bl	800109a <LoRA_parsePacket>
 8001302:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	dc01      	bgt.n	8001310 <recv_packet+0x1c>
  {
    return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e01c      	b.n	800134a <recv_packet+0x56>
  }
  if(packet_length){
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d018      	beq.n	8001348 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	18d4      	adds	r4, r2, r3
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fd24 	bl	8000d70 <LoRA_Read_Register>
 8001328:	4603      	mov	r3, r0
 800132a:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbf0      	blt.n	800131c <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	e000      	b.n	800134a <recv_packet+0x56>
  }
  else{
    return 0;
 8001348:	2300      	movs	r3, #0
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	466b      	mov	r3, sp
 800135e:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7fe ffdf 	bl	8000324 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	3301      	adds	r3, #1
 800136c:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 800136e:	8af9      	ldrh	r1, [r7, #22]
 8001370:	460b      	mov	r3, r1
 8001372:	3b01      	subs	r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	b28b      	uxth	r3, r1
 8001378:	2200      	movs	r2, #0
 800137a:	4698      	mov	r8, r3
 800137c:	4691      	mov	r9, r2
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800138a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800138e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001392:	b28b      	uxth	r3, r1
 8001394:	2200      	movs	r2, #0
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	00eb      	lsls	r3, r5, #3
 80013a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013a8:	00e2      	lsls	r2, r4, #3
 80013aa:	460b      	mov	r3, r1
 80013ac:	3307      	adds	r3, #7
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	ebad 0d03 	sub.w	sp, sp, r3
 80013b6:	466b      	mov	r3, sp
 80013b8:	3300      	adds	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 80013bc:	f002 fc5c 	bl	8003c78 <HAL_GetTick>
 80013c0:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 80013c2:	210d      	movs	r1, #13
 80013c4:	2003      	movs	r0, #3
 80013c6:	f7ff fc9f 	bl	8000d08 <rand_range>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2264      	movs	r2, #100	; 0x64
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fea1 	bl	800111c <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80013da:	8afb      	ldrh	r3, [r7, #22]
 80013dc:	4619      	mov	r1, r3
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff ff88 	bl	80012f4 <recv_packet>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7fe ff8f 	bl	8000310 <strcmp>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01a      	beq.n	800142e <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe8f 	bl	800111c <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 80013fe:	f002 fc3b 	bl	8003c78 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	429a      	cmp	r2, r3
 800140c:	d2e5      	bcs.n	80013da <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 800140e:	210d      	movs	r1, #13
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff fc79 	bl	8000d08 <rand_range>
 8001416:	4603      	mov	r3, r0
 8001418:	2264      	movs	r2, #100	; 0x64
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fe7b 	bl	800111c <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001426:	f002 fc27 	bl	8003c78 <HAL_GetTick>
 800142a:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 800142c:	e7d5      	b.n	80013da <reliable_send_packet+0x88>
				break;
 800142e:	bf00      	nop
 8001430:	46b5      	mov	sp, r6
		}
	}
}
 8001432:	bf00      	nop
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800143c <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <usbReceiveHandle+0x38>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4909      	ldr	r1, [pc, #36]	; (8001478 <usbReceiveHandle+0x3c>)
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f016 f977 	bl	8017748 <memcpy>
		output[temp] = '\0';
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <usbReceiveHandle+0x38>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	}
	return temp;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	24000270 	.word	0x24000270
 8001478:	24000170 	.word	0x24000170
 800147c:	00000000 	.word	0x00000000

08001480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001488:	4be1      	ldr	r3, [pc, #900]	; (8001810 <main+0x390>)
 800148a:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 800148e:	461d      	mov	r5, r3
 8001490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001494:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001498:	c403      	stmia	r4!, {r0, r1}
 800149a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f002 fb66 	bl	8003b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 fb9c 	bl	8001bdc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014a4:	f000 fc12 	bl	8001ccc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f001 f9b0 	bl	800280c <MX_GPIO_Init>
  MX_DMA_Init();
 80014ac:	f001 f94e 	bl	800274c <MX_DMA_Init>
  MX_SPI3_Init();
 80014b0:	f000 fea8 	bl	8002204 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80014b4:	f000 fd22 	bl	8001efc <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80014b8:	f001 f8fc 	bl	80026b4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80014bc:	f000 fc38 	bl	8001d30 <MX_ADC1_Init>
  MX_TIM4_Init();
 80014c0:	f000 ffb2 	bl	8002428 <MX_TIM4_Init>
  MX_ADC3_Init();
 80014c4:	f000 fcac 	bl	8001e20 <MX_ADC3_Init>
  MX_SPI2_Init();
 80014c8:	f000 fe46 	bl	8002158 <MX_SPI2_Init>
  MX_I2C2_Init();
 80014cc:	f000 fd7a 	bl	8001fc4 <MX_I2C2_Init>
  MX_TIM2_Init();
 80014d0:	f000 feee 	bl	80022b0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80014d4:	f001 f824 	bl	8002520 <MX_TIM5_Init>
  MX_TIM3_Init();
 80014d8:	f000 ff42 	bl	8002360 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80014dc:	f015 fb80 	bl	8016be0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80014e0:	f000 fde4 	bl	80020ac <MX_SPI1_Init>
  MX_UART4_Init();
 80014e4:	f001 f89a 	bl	800261c <MX_UART4_Init>
  MX_FATFS_Init();
 80014e8:	f013 f8e4 	bl	80146b4 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80014ec:	f000 fdc0 	bl	8002070 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80014f0:	f001 f870 	bl	80025d4 <MX_TIM13_Init>
  MX_RNG_Init();
 80014f4:	f000 fda6 	bl	8002044 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80014f8:	2332      	movs	r3, #50	; 0x32
 80014fa:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
	const double SPEED = 2.0/2000;
 80014fe:	a3c2      	add	r3, pc, #776	; (adr r3, 8001808 <main+0x388>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 8001508:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4bbc      	ldr	r3, [pc, #752]	; (8001814 <main+0x394>)
 8001522:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001532:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 8001536:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800153a:	213c      	movs	r1, #60	; 0x3c
 800153c:	2010      	movs	r0, #16
 800153e:	f7ff f921 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001542:	2130      	movs	r1, #48	; 0x30
 8001544:	2011      	movs	r0, #17
 8001546:	f7ff f91d 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800154a:	2104      	movs	r1, #4
 800154c:	2013      	movs	r0, #19
 800154e:	f7ff f919 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001552:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001556:	f002 fb9b 	bl	8003c90 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800155a:	21bf      	movs	r1, #191	; 0xbf
 800155c:	201c      	movs	r0, #28
 800155e:	f7ff f8bd 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001562:	2002      	movs	r0, #2
 8001564:	f002 fb94 	bl	8003c90 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001568:	2158      	movs	r1, #88	; 0x58
 800156a:	201b      	movs	r0, #27
 800156c:	f7ff f8b6 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001570:	21d8      	movs	r1, #216	; 0xd8
 8001572:	201b      	movs	r0, #27
 8001574:	f7ff f8b2 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 8001580:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8001590:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 800159a:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 80015a4:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80015ac:	e02e      	b.n	800160c <main+0x18c>
		calOmegaX += LG2_Get_Gyro_X();
 80015ae:	f7ff f911 	bl	80007d4 <LG2_Get_Gyro_X>
 80015b2:	eeb0 7a40 	vmov.f32	s14, s0
 80015b6:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c2:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80015c6:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80015ca:	f7ff f933 	bl	8000834 <LG2_Get_Gyro_Y>
 80015ce:	eeb0 7a40 	vmov.f32	s14, s0
 80015d2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015de:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015e2:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80015e6:	f7ff f957 	bl	8000898 <LG2_Get_Gyro_Z>
 80015ea:	eeb0 7a40 	vmov.f32	s14, s0
 80015ee:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015fa:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015fe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8001602:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001606:	3301      	adds	r3, #1
 8001608:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 800160c:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001610:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001614:	dbcb      	blt.n	80015ae <main+0x12e>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001616:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8001818 <main+0x398>
 8001622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001626:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800162a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 800162e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001818 <main+0x398>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001642:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001646:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	eddf 6a72 	vldr	s13, [pc, #456]	; 8001818 <main+0x398>
 8001652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001656:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800165a:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800165e:	2201      	movs	r2, #1
 8001660:	2101      	movs	r1, #1
 8001662:	486e      	ldr	r0, [pc, #440]	; (800181c <main+0x39c>)
 8001664:	f006 fdc6 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001668:	20c8      	movs	r0, #200	; 0xc8
 800166a:	f002 fb11 	bl	8003c90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2101      	movs	r1, #1
 8001672:	486a      	ldr	r0, [pc, #424]	; (800181c <main+0x39c>)
 8001674:	f006 fdbe 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001678:	20c8      	movs	r0, #200	; 0xc8
 800167a:	f002 fb09 	bl	8003c90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	2101      	movs	r1, #1
 8001682:	4866      	ldr	r0, [pc, #408]	; (800181c <main+0x39c>)
 8001684:	f006 fdb6 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001688:	20c8      	movs	r0, #200	; 0xc8
 800168a:	f002 fb01 	bl	8003c90 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800168e:	2201      	movs	r2, #1
 8001690:	2104      	movs	r1, #4
 8001692:	4863      	ldr	r0, [pc, #396]	; (8001820 <main+0x3a0>)
 8001694:	f006 fdae 	bl	80081f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2108      	movs	r1, #8
 800169c:	4860      	ldr	r0, [pc, #384]	; (8001820 <main+0x3a0>)
 800169e:	f006 fda9 	bl	80081f4 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016a2:	2100      	movs	r1, #0
 80016a4:	485f      	ldr	r0, [pc, #380]	; (8001824 <main+0x3a4>)
 80016a6:	f00e fa13 	bl	800fad0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80016aa:	2104      	movs	r1, #4
 80016ac:	485d      	ldr	r0, [pc, #372]	; (8001824 <main+0x3a4>)
 80016ae:	f00e fa0f 	bl	800fad0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80016b2:	2108      	movs	r1, #8
 80016b4:	485b      	ldr	r0, [pc, #364]	; (8001824 <main+0x3a4>)
 80016b6:	f00e fa0b 	bl	800fad0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80016ba:	210c      	movs	r1, #12
 80016bc:	4859      	ldr	r0, [pc, #356]	; (8001824 <main+0x3a4>)
 80016be:	f00e fa07 	bl	800fad0 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80016c2:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8001828 <main+0x3a8>
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff f91e 	bl	8000908 <setServo>
    setServo(2, 180);
 80016cc:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800182c <main+0x3ac>
 80016d0:	2002      	movs	r0, #2
 80016d2:	f7ff f919 	bl	8000908 <setServo>
    setServo(3, 0);
 80016d6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001830 <main+0x3b0>
 80016da:	2003      	movs	r0, #3
 80016dc:	f7ff f914 	bl	8000908 <setServo>
    setServo(4, 45);
 80016e0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001834 <main+0x3b4>
 80016e4:	2004      	movs	r0, #4
 80016e6:	f7ff f90f 	bl	8000908 <setServo>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80016fc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001700:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 800170e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001712:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	3304      	adds	r3, #4
 800171c:	22f6      	movs	r2, #246	; 0xf6
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f015 ffd5 	bl	80176d0 <memset>
  char command[MAX_PAYLOAD_LENGHT];
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT] = "";
 8001726:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800172a:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	3304      	adds	r3, #4
 8001734:	22f6      	movs	r2, #246	; 0xf6
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f015 ffc9 	bl	80176d0 <memset>
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 8001744:	2332      	movs	r3, #50	; 0x32
 8001746:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 8001750:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001754:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 8001758:	4b37      	ldr	r3, [pc, #220]	; (8001838 <main+0x3b8>)
 800175a:	4634      	mov	r4, r6
 800175c:	461d      	mov	r5, r3
 800175e:	6828      	ldr	r0, [r5, #0]
 8001760:	6869      	ldr	r1, [r5, #4]
 8001762:	68aa      	ldr	r2, [r5, #8]
 8001764:	68eb      	ldr	r3, [r5, #12]
 8001766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001768:	7c2b      	ldrb	r3, [r5, #16]
 800176a:	7023      	strb	r3, [r4, #0]
 800176c:	f106 0311 	add.w	r3, r6, #17
 8001770:	2221      	movs	r2, #33	; 0x21
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f015 ffab 	bl	80176d0 <memset>
  uint32_t previousTime = HAL_GetTick();
 800177a:	f002 fa7d 	bl	8003c78 <HAL_GetTick>
 800177e:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  uint32_t wait_time = rand_range(3, 13)*100;
 8001782:	210d      	movs	r1, #13
 8001784:	2003      	movs	r0, #3
 8001786:	f7ff fabf 	bl	8000d08 <rand_range>
 800178a:	4603      	mov	r3, r0
 800178c:	2264      	movs	r2, #100	; 0x64
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
  disarm(state);
 8001796:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fd46 	bl	800122c <disarm>
  LoRA_begin(868000000);
 80017a0:	4826      	ldr	r0, [pc, #152]	; (800183c <main+0x3bc>)
 80017a2:	f7ff fbff 	bl	8000fa4 <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 80017a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017aa:	4925      	ldr	r1, [pc, #148]	; (8001840 <main+0x3c0>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fdaf 	bl	8000310 <strcmp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f040 8089 	bne.w	80018cc <main+0x44c>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 80017ba:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017be:	21fa      	movs	r1, #250	; 0xfa
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fd97 	bl	80012f4 <recv_packet>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 81ec 	beq.w	8001ba6 <main+0x726>
      {
    	have_recieved_anything = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 80017d4:	f002 fa50 	bl	8003c78 <HAL_GetTick>
 80017d8:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80017dc:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80017e0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017e4:	4917      	ldr	r1, [pc, #92]	; (8001844 <main+0x3c4>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f015 ff44 	bl	8017674 <siscanf>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d12a      	bne.n	8001848 <main+0x3c8>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80017f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <main+0x3b8>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	7023      	strb	r3, [r4, #0]
 8001804:	e1cf      	b.n	8001ba6 <main+0x726>
 8001806:	bf00      	nop
 8001808:	d2f1a9fc 	.word	0xd2f1a9fc
 800180c:	3f50624d 	.word	0x3f50624d
 8001810:	08018a38 	.word	0x08018a38
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	43fa0000 	.word	0x43fa0000
 800181c:	58020c00 	.word	0x58020c00
 8001820:	58021800 	.word	0x58021800
 8001824:	24001180 	.word	0x24001180
 8001828:	42b40000 	.word	0x42b40000
 800182c:	43340000 	.word	0x43340000
 8001830:	00000000 	.word	0x00000000
 8001834:	42340000 	.word	0x42340000
 8001838:	080189a4 	.word	0x080189a4
 800183c:	33bca100 	.word	0x33bca100
 8001840:	08018988 	.word	0x08018988
 8001844:	0801899c 	.word	0x0801899c
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001848:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800184c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001850:	49ba      	ldr	r1, [pc, #744]	; (8001b3c <main+0x6bc>)
 8001852:	4618      	mov	r0, r3
 8001854:	f015 ff0e 	bl	8017674 <siscanf>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10b      	bne.n	8001876 <main+0x3f6>
        {
          strcpy(communication_state,"SENDING STREAM");
 800185e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001862:	4ab7      	ldr	r2, [pc, #732]	; (8001b40 <main+0x6c0>)
 8001864:	461c      	mov	r4, r3
 8001866:	4613      	mov	r3, r2
 8001868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186a:	c407      	stmia	r4!, {r0, r1, r2}
 800186c:	8023      	strh	r3, [r4, #0]
 800186e:	3402      	adds	r4, #2
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	7023      	strb	r3, [r4, #0]
 8001874:	e197      	b.n	8001ba6 <main+0x726>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 8001876:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800187a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fd45 	bl	8000310 <strcmp>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <main+0x418>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 800188c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fc43 	bl	800111c <LoRA_sendPacket>
 8001896:	e186      	b.n	8001ba6 <main+0x726>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001898:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800189c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f015 ff48 	bl	8017738 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 80018a8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fc35 	bl	800111c <LoRA_sendPacket>
          //HAL_Delay(100);
          /*char debug[250];
          sprintf(debug, "new packet: %s\n", recieved_packet);*/
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80018b2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fd34 	bl	8000324 <strlen>
 80018bc:	4602      	mov	r2, r0
 80018be:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f015 fa61 	bl	8016d8c <CDC_Transmit_HS>
 80018ca:	e16c      	b.n	8001ba6 <main+0x726>

        }
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 80018cc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018d0:	499c      	ldr	r1, [pc, #624]	; (8001b44 <main+0x6c4>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd1c 	bl	8000310 <strcmp>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d155      	bne.n	800198a <main+0x50a>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 80018de:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018e2:	21fa      	movs	r1, #250	; 0xfa
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd05 	bl	80012f4 <recv_packet>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d025      	beq.n	800193c <main+0x4bc>
      {
        previousTime = HAL_GetTick();
 80018f0:	f002 f9c2 	bl	8003c78 <HAL_GetTick>
 80018f4:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80018f8:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80018fc:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001900:	4991      	ldr	r1, [pc, #580]	; (8001b48 <main+0x6c8>)
 8001902:	4618      	mov	r0, r3
 8001904:	f015 feb6 	bl	8017674 <siscanf>
 8001908:	4603      	mov	r3, r0
 800190a:	2b01      	cmp	r3, #1
 800190c:	d109      	bne.n	8001922 <main+0x4a2>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 800190e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001912:	4a8e      	ldr	r2, [pc, #568]	; (8001b4c <main+0x6cc>)
 8001914:	461c      	mov	r4, r3
 8001916:	4615      	mov	r5, r2
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	7023      	strb	r3, [r4, #0]
 8001920:	e141      	b.n	8001ba6 <main+0x726>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001922:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fcfc 	bl	8000324 <strlen>
 800192c:	4602      	mov	r2, r0
 800192e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f015 fa29 	bl	8016d8c <CDC_Transmit_HS>
 800193a:	e134      	b.n	8001ba6 <main+0x726>
        }
      }
      else if(HAL_GetTick()-previousTime > wait_time)
 800193c:	f002 f99c 	bl	8003c78 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f8d7 2bf4 	ldr.w	r2, [r7, #3060]	; 0xbf4
 800194c:	429a      	cmp	r2, r3
 800194e:	f080 812a 	bcs.w	8001ba6 <main+0x726>
      {
    	wait_time = rand_range(3, 13)*100;
 8001952:	210d      	movs	r1, #13
 8001954:	2003      	movs	r0, #3
 8001956:	f7ff f9d7 	bl	8000d08 <rand_range>
 800195a:	4603      	mov	r3, r0
 800195c:	2264      	movs	r2, #100	; 0x64
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
        previousTime = HAL_GetTick();
 8001966:	f002 f987 	bl	8003c78 <HAL_GetTick>
 800196a:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 800196e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001972:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001976:	4971      	ldr	r1, [pc, #452]	; (8001b3c <main+0x6bc>)
 8001978:	4618      	mov	r0, r3
 800197a:	f015 fe5b 	bl	8017634 <siprintf>
        LoRA_sendPacket(sendMessage);
 800197e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fbca 	bl	800111c <LoRA_sendPacket>
 8001988:	e10d      	b.n	8001ba6 <main+0x726>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 800198a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800198e:	496c      	ldr	r1, [pc, #432]	; (8001b40 <main+0x6c0>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fcbd 	bl	8000310 <strcmp>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d121      	bne.n	80019e0 <main+0x560>
    {
      if(max_packet_count == 0)
 800199c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80019a0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10e      	bne.n	80019c8 <main+0x548>
      {
        strcpy(communication_state,"TRANSITIONING");
 80019aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019ae:	4a68      	ldr	r2, [pc, #416]	; (8001b50 <main+0x6d0>)
 80019b0:	461c      	mov	r4, r3
 80019b2:	4613      	mov	r3, r2
 80019b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b6:	c407      	stmia	r4!, {r0, r1, r2}
 80019b8:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 80019c0:	4864      	ldr	r0, [pc, #400]	; (8001b54 <main+0x6d4>)
 80019c2:	f7ff fbab 	bl	800111c <LoRA_sendPacket>
 80019c6:	e0ee      	b.n	8001ba6 <main+0x726>
      }
      else
      {
        //send whatever
        max_packet_count--;
 80019c8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80019cc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80019d8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e0e2      	b.n	8001ba6 <main+0x726>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 80019e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019e4:	4959      	ldr	r1, [pc, #356]	; (8001b4c <main+0x6cc>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fc92 	bl	8000310 <strcmp>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d166      	bne.n	8001ac0 <main+0x640>
    {
    	reliable_send_packet("*");
 80019f2:	4859      	ldr	r0, [pc, #356]	; (8001b58 <main+0x6d8>)
 80019f4:	f7ff fcad 	bl	8001352 <reliable_send_packet>
    	sprintf(response_packet, "\nState of other board: %s\n> ", state);
 80019f8:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80019fc:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001a00:	4956      	ldr	r1, [pc, #344]	; (8001b5c <main+0x6dc>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f015 fe16 	bl	8017634 <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 8001a08:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc89 	bl	8000324 <strlen>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f015 f9b6 	bl	8016d8c <CDC_Transmit_HS>
	  	//CDC_Transmit_HS("", strlen("> "));
    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 8001a20:	bf00      	nop
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fd09 	bl	800143c <usbReceiveHandle>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f8      	beq.n	8001a22 <main+0x5a2>
    	{}

      reliable_send_packet(input);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fc8d 	bl	8001352 <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "%s\n", input);
 8001a38:	1d3a      	adds	r2, r7, #4
 8001a3a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a3e:	4948      	ldr	r1, [pc, #288]	; (8001b60 <main+0x6e0>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f015 fdf7 	bl	8017634 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001a46:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fc6a 	bl	8000324 <strlen>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f015 f997 	bl	8016d8c <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4940      	ldr	r1, [pc, #256]	; (8001b64 <main+0x6e4>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fc54 	bl	8000310 <strcmp>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <main+0x61c>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001a6e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a72:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <main+0x6c4>)
 8001a74:	461c      	mov	r4, r3
 8001a76:	4615      	mov	r5, r2
 8001a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 8001a80:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001a84:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001a88:	492c      	ldr	r1, [pc, #176]	; (8001b3c <main+0x6bc>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f015 fdd2 	bl	8017634 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001a90:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb41 	bl	800111c <LoRA_sendPacket>
 8001a9a:	e084      	b.n	8001ba6 <main+0x726>
      }
      else
      {
        strcpy(communication_state,"TRANSITIONING");
 8001a9c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <main+0x6d0>)
 8001aa2:	461c      	mov	r4, r3
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa8:	c407      	stmia	r4!, {r0, r1, r2}
 8001aaa:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 8001ab2:	2064      	movs	r0, #100	; 0x64
 8001ab4:	f002 f8ec 	bl	8003c90 <HAL_Delay>
        LoRA_sendPacket("$");
 8001ab8:	4826      	ldr	r0, [pc, #152]	; (8001b54 <main+0x6d4>)
 8001aba:	f7ff fb2f 	bl	800111c <LoRA_sendPacket>
 8001abe:	e072      	b.n	8001ba6 <main+0x726>
      }
    }
    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 8001ac0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ac4:	4922      	ldr	r1, [pc, #136]	; (8001b50 <main+0x6d0>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fc22 	bl	8000310 <strcmp>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d169      	bne.n	8001ba6 <main+0x726>
    {

        if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001ad2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001ad6:	21fa      	movs	r1, #250	; 0xfa
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc0b 	bl	80012f4 <recv_packet>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d045      	beq.n	8001b70 <main+0x6f0>
        {
          CDC_Transmit_HS("transitioning\n", strlen("transitioning\n"));
 8001ae4:	210e      	movs	r1, #14
 8001ae6:	4820      	ldr	r0, [pc, #128]	; (8001b68 <main+0x6e8>)
 8001ae8:	f015 f950 	bl	8016d8c <CDC_Transmit_HS>
          previousTime = HAL_GetTick();
 8001aec:	f002 f8c4 	bl	8003c78 <HAL_GetTick>
 8001af0:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
          if(strcmp(recieved_packet, "*")==0)
 8001af4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001af8:	4917      	ldr	r1, [pc, #92]	; (8001b58 <main+0x6d8>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc08 	bl	8000310 <strcmp>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d14f      	bne.n	8001ba6 <main+0x726>
          {
        	strcpy(previous_packet, recieved_packet);
 8001b06:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8001b0a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f015 fe11 	bl	8017738 <strcpy>
        	strcpy(communication_state, "RECEIVING RELIABLE");
 8001b16:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <main+0x6ec>)
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	4615      	mov	r5, r2
 8001b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	8022      	strh	r2, [r4, #0]
 8001b2a:	3402      	adds	r4, #2
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	7023      	strb	r3, [r4, #0]
            LoRA_sendPacket(recieved_packet);
 8001b30:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff faf1 	bl	800111c <LoRA_sendPacket>
 8001b3a:	e034      	b.n	8001ba6 <main+0x726>
 8001b3c:	080189b8 	.word	0x080189b8
 8001b40:	080189c0 	.word	0x080189c0
 8001b44:	080189d0 	.word	0x080189d0
 8001b48:	0801899c 	.word	0x0801899c
 8001b4c:	080189a4 	.word	0x080189a4
 8001b50:	080189e4 	.word	0x080189e4
 8001b54:	080189f4 	.word	0x080189f4
 8001b58:	080189f8 	.word	0x080189f8
 8001b5c:	080189fc 	.word	0x080189fc
 8001b60:	08018a1c 	.word	0x08018a1c
 8001b64:	08018a20 	.word	0x08018a20
 8001b68:	08018a28 	.word	0x08018a28
 8001b6c:	08018988 	.word	0x08018988
          }
        }
        else if (HAL_GetTick()-previousTime > wait_time)
 8001b70:	f002 f882 	bl	8003c78 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f8d7 2bf4 	ldr.w	r2, [r7, #3060]	; 0xbf4
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d210      	bcs.n	8001ba6 <main+0x726>
        {
          wait_time = rand_range(3, 13)*100;
 8001b84:	210d      	movs	r1, #13
 8001b86:	2003      	movs	r0, #3
 8001b88:	f7ff f8be 	bl	8000d08 <rand_range>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2264      	movs	r2, #100	; 0x64
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
          previousTime = HAL_GetTick();
 8001b98:	f002 f86e 	bl	8003c78 <HAL_GetTick>
 8001b9c:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
		  LoRA_sendPacket("$");
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <main+0x754>)
 8001ba2:	f7ff fabb 	bl	800111c <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001ba6:	f002 f867 	bl	8003c78 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bba:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001bd8 <main+0x758>
 8001bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc2:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001bc6:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001bca:	f002 f855 	bl	8003c78 <HAL_GetTick>
 8001bce:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001bd2:	e5e8      	b.n	80017a6 <main+0x326>
 8001bd4:	080189f4 	.word	0x080189f4
 8001bd8:	447a0000 	.word	0x447a0000

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b09c      	sub	sp, #112	; 0x70
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	224c      	movs	r2, #76	; 0x4c
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f015 fd70 	bl	80176d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f015 fd6a 	bl	80176d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f007 ff0d 	bl	8009a1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c22:	bf00      	nop
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c30:	d1f8      	bne.n	8001c24 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001c32:	2322      	movs	r3, #34	; 0x22
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c46:	2300      	movs	r3, #0
 8001c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001c56:	230c      	movs	r3, #12
 8001c58:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c5e:	230c      	movs	r3, #12
 8001c60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 ff1e 	bl	8009ab0 <HAL_RCC_OscConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c7a:	f000 ff31 	bl	8002ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7e:	233f      	movs	r3, #63	; 0x3f
 8001c80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c82:	2303      	movs	r3, #3
 8001c84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c92:	2340      	movs	r3, #64	; 0x40
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f008 fadd 	bl	800a264 <HAL_RCC_ClockConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001cb0:	f000 ff16 	bl	8002ae0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001cb4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f008 fc88 	bl	800a5d0 <HAL_RCC_MCOConfig>
}
 8001cc0:	bf00      	nop
 8001cc2:	3770      	adds	r7, #112	; 0x70
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58024800 	.word	0x58024800

08001ccc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0ae      	sub	sp, #184	; 0xb8
 8001cd0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	22b8      	movs	r2, #184	; 0xb8
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f015 fcf9 	bl	80176d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001cde:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cea:	2304      	movs	r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f008 fe99 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001d24:	f000 fedc 	bl	8002ae0 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	37b8      	adds	r7, #184	; 0xb8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	2224      	movs	r2, #36	; 0x24
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f015 fcc1 	bl	80176d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d50:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <MX_ADC1_Init+0xe8>)
 8001d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d56:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001d5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001db0:	f002 f9ee 	bl	8004190 <HAL_ADC_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001dba:	f000 fe91 	bl	8002ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4812      	ldr	r0, [pc, #72]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001dca:	f003 fa29 	bl	8005220 <HAL_ADCEx_MultiModeConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001dd4:	f000 fe84 	bl	8002ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_ADC1_Init+0xec>)
 8001dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ddc:	2306      	movs	r3, #6
 8001dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001de0:	2303      	movs	r3, #3
 8001de2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001de4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001de8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dea:	2304      	movs	r3, #4
 8001dec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001dfe:	f002 fbcf 	bl	80045a0 <HAL_ADC_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001e08:	f000 fe6a 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	24000bfc 	.word	0x24000bfc
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	2a000400 	.word	0x2a000400

08001e20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2224      	movs	r2, #36	; 0x24
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f015 fc4f 	bl	80176d0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e34:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <MX_ADC3_Init+0xd4>)
 8001e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e3a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e42:	2208      	movs	r2, #8
 8001e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e54:	2204      	movs	r2, #4
 8001e56:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ea6:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001ea8:	f002 f972 	bl	8004190 <HAL_ADC_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001eb2:	f000 fe15 	bl	8002ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <MX_ADC3_Init+0xd8>)
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ec2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ec6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001eda:	f002 fb61 	bl	80045a0 <HAL_ADC_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001ee4:	f000 fdfc 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	24000c6c 	.word	0x24000c6c
 8001ef4:	58026000 	.word	0x58026000
 8001ef8:	04300002 	.word	0x04300002

08001efc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f02:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <MX_FDCAN3_Init+0xc4>)
 8001f04:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f26:	2210      	movs	r2, #16
 8001f28:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f32:	2202      	movs	r2, #2
 8001f34:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f38:	2202      	movs	r2, #2
 8001f3a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f6e:	2204      	movs	r2, #4
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001faa:	f005 fbff 	bl	80077ac <HAL_FDCAN_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001fb4:	f000 fd94 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24000dcc 	.word	0x24000dcc
 8001fc0:	4000d400 	.word	0x4000d400

08001fc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <MX_I2C2_Init+0x78>)
 8001fcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <MX_I2C2_Init+0x7c>)
 8001fd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C2_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C2_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ffe:	480e      	ldr	r0, [pc, #56]	; (8002038 <MX_I2C2_Init+0x74>)
 8002000:	f006 f912 	bl	8008228 <HAL_I2C_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800200a:	f000 fd69 	bl	8002ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800200e:	2100      	movs	r1, #0
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <MX_I2C2_Init+0x74>)
 8002012:	f006 f9b3 	bl	800837c <HAL_I2CEx_ConfigAnalogFilter>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800201c:	f000 fd60 	bl	8002ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002020:	2100      	movs	r1, #0
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_I2C2_Init+0x74>)
 8002024:	f006 f9f5 	bl	8008412 <HAL_I2CEx_ConfigDigitalFilter>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800202e:	f000 fd57 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	24000e6c 	.word	0x24000e6c
 800203c:	40005800 	.word	0x40005800
 8002040:	20303e5d 	.word	0x20303e5d

08002044 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <MX_RNG_Init+0x24>)
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <MX_RNG_Init+0x28>)
 800204c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <MX_RNG_Init+0x24>)
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <MX_RNG_Init+0x24>)
 8002056:	f00b f8e1 	bl	800d21c <HAL_RNG_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002060:	f000 fd3e 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	24000ec0 	.word	0x24000ec0
 800206c:	48021800 	.word	0x48021800

08002070 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_SDMMC2_SD_Init+0x34>)
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <MX_SDMMC2_SD_Init+0x38>)
 8002078:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <MX_SDMMC2_SD_Init+0x34>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_SDMMC2_SD_Init+0x34>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <MX_SDMMC2_SD_Init+0x34>)
 8002088:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800208c:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <MX_SDMMC2_SD_Init+0x34>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <MX_SDMMC2_SD_Init+0x34>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	24000ed4 	.word	0x24000ed4
 80020a8:	48022400 	.word	0x48022400

080020ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020b2:	4a28      	ldr	r2, [pc, #160]	; (8002154 <MX_SPI1_Init+0xa8>)
 80020b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020c6:	2207      	movs	r2, #7
 80020c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020e0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <MX_SPI1_Init+0xa4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_SPI1_Init+0xa4>)
 8002100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002104:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_SPI1_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <MX_SPI1_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_SPI1_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <MX_SPI1_Init+0xa4>)
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_SPI1_Init+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <MX_SPI1_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_SPI1_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <MX_SPI1_Init+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_SPI1_Init+0xa4>)
 8002138:	2200      	movs	r2, #0
 800213a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_SPI1_Init+0xa4>)
 800213e:	f00c fe7f 	bl	800ee40 <HAL_SPI_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002148:	f000 fcca 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	24000f50 	.word	0x24000f50
 8002154:	40013000 	.word	0x40013000

08002158 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <MX_SPI2_Init+0xa4>)
 800215e:	4a28      	ldr	r2, [pc, #160]	; (8002200 <MX_SPI2_Init+0xa8>)
 8002160:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <MX_SPI2_Init+0xa4>)
 8002164:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002168:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <MX_SPI2_Init+0xa4>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <MX_SPI2_Init+0xa4>)
 8002172:	2207      	movs	r2, #7
 8002174:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <MX_SPI2_Init+0xa4>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <MX_SPI2_Init+0xa4>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <MX_SPI2_Init+0xa4>)
 8002184:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002188:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MX_SPI2_Init+0xa4>)
 800218c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002190:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <MX_SPI2_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <MX_SPI2_Init+0xa4>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <MX_SPI2_Init+0xa4>)
 80021ea:	f00c fe29 	bl	800ee40 <HAL_SPI_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80021f4:	f000 fc74 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	24000fd8 	.word	0x24000fd8
 8002200:	40003800 	.word	0x40003800

08002204 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <MX_SPI3_Init+0xa4>)
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <MX_SPI3_Init+0xa8>)
 800220c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002210:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002214:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <MX_SPI3_Init+0xa4>)
 800221e:	2207      	movs	r2, #7
 8002220:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <MX_SPI3_Init+0xa4>)
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002230:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002234:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002238:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800223c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <MX_SPI3_Init+0xa4>)
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800225c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002260:	2200      	movs	r2, #0
 8002262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002266:	2200      	movs	r2, #0
 8002268:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_SPI3_Init+0xa4>)
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002278:	2200      	movs	r2, #0
 800227a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <MX_SPI3_Init+0xa4>)
 800227e:	2200      	movs	r2, #0
 8002280:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002284:	2200      	movs	r2, #0
 8002286:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <MX_SPI3_Init+0xa4>)
 800228a:	2200      	movs	r2, #0
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002290:	2200      	movs	r2, #0
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <MX_SPI3_Init+0xa4>)
 8002296:	f00c fdd3 	bl	800ee40 <HAL_SPI_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80022a0:	f000 fc1e 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	24001060 	.word	0x24001060
 80022ac:	40003c00 	.word	0x40003c00

080022b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c2:	463b      	mov	r3, r7
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <MX_TIM2_Init+0xac>)
 80022d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <MX_TIM2_Init+0xac>)
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <MX_TIM2_Init+0xac>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <MX_TIM2_Init+0xac>)
 80022ea:	225a      	movs	r2, #90	; 0x5a
 80022ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <MX_TIM2_Init+0xac>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <MX_TIM2_Init+0xac>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022fa:	4818      	ldr	r0, [pc, #96]	; (800235c <MX_TIM2_Init+0xac>)
 80022fc:	f00d fb90 	bl	800fa20 <HAL_TIM_PWM_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002306:	f000 fbeb 	bl	8002ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4810      	ldr	r0, [pc, #64]	; (800235c <MX_TIM2_Init+0xac>)
 800231a:	f00e fe17 	bl	8010f4c <HAL_TIMEx_MasterConfigSynchronization>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002324:	f000 fbdc 	bl	8002ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002328:	2360      	movs	r3, #96	; 0x60
 800232a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	2208      	movs	r2, #8
 800233c:	4619      	mov	r1, r3
 800233e:	4807      	ldr	r0, [pc, #28]	; (800235c <MX_TIM2_Init+0xac>)
 8002340:	f00e f836 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800234a:	f000 fbc9 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <MX_TIM2_Init+0xac>)
 8002350:	f001 f91e 	bl	8003590 <HAL_TIM_MspPostInit>

}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	240010e8 	.word	0x240010e8

08002360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002372:	463b      	mov	r3, r7
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
 8002380:	615a      	str	r2, [r3, #20]
 8002382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <MX_TIM3_Init+0xc0>)
 8002386:	4a27      	ldr	r2, [pc, #156]	; (8002424 <MX_TIM3_Init+0xc4>)
 8002388:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <MX_TIM3_Init+0xc0>)
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <MX_TIM3_Init+0xc0>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <MX_TIM3_Init+0xc0>)
 8002398:	225a      	movs	r2, #90	; 0x5a
 800239a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <MX_TIM3_Init+0xc0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <MX_TIM3_Init+0xc0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023a8:	481d      	ldr	r0, [pc, #116]	; (8002420 <MX_TIM3_Init+0xc0>)
 80023aa:	f00d fb39 	bl	800fa20 <HAL_TIM_PWM_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023b4:	f000 fb94 	bl	8002ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	4619      	mov	r1, r3
 80023c6:	4816      	ldr	r0, [pc, #88]	; (8002420 <MX_TIM3_Init+0xc0>)
 80023c8:	f00e fdc0 	bl	8010f4c <HAL_TIMEx_MasterConfigSynchronization>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023d2:	f000 fb85 	bl	8002ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	2360      	movs	r3, #96	; 0x60
 80023d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e6:	463b      	mov	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	4619      	mov	r1, r3
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <MX_TIM3_Init+0xc0>)
 80023ee:	f00d ffdf 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023f8:	f000 fb72 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023fc:	463b      	mov	r3, r7
 80023fe:	2204      	movs	r2, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <MX_TIM3_Init+0xc0>)
 8002404:	f00d ffd4 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800240e:	f000 fb67 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002412:	4803      	ldr	r0, [pc, #12]	; (8002420 <MX_TIM3_Init+0xc0>)
 8002414:	f001 f8bc 	bl	8003590 <HAL_TIM_MspPostInit>

}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	24001134 	.word	0x24001134
 8002424:	40000400 	.word	0x40000400

08002428 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
 8002448:	615a      	str	r2, [r3, #20]
 800244a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <MX_TIM4_Init+0xf0>)
 800244e:	4a33      	ldr	r2, [pc, #204]	; (800251c <MX_TIM4_Init+0xf4>)
 8002450:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002452:	4b31      	ldr	r3, [pc, #196]	; (8002518 <MX_TIM4_Init+0xf0>)
 8002454:	221c      	movs	r2, #28
 8002456:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <MX_TIM4_Init+0xf0>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800245e:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <MX_TIM4_Init+0xf0>)
 8002460:	f242 720f 	movw	r2, #9999	; 0x270f
 8002464:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <MX_TIM4_Init+0xf0>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <MX_TIM4_Init+0xf0>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002472:	4829      	ldr	r0, [pc, #164]	; (8002518 <MX_TIM4_Init+0xf0>)
 8002474:	f00d fad4 	bl	800fa20 <HAL_TIM_PWM_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800247e:	f000 fb2f 	bl	8002ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800248a:	f107 031c 	add.w	r3, r7, #28
 800248e:	4619      	mov	r1, r3
 8002490:	4821      	ldr	r0, [pc, #132]	; (8002518 <MX_TIM4_Init+0xf0>)
 8002492:	f00e fd5b 	bl	8010f4c <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800249c:	f000 fb20 	bl	8002ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a0:	2360      	movs	r3, #96	; 0x60
 80024a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	4619      	mov	r1, r3
 80024b6:	4818      	ldr	r0, [pc, #96]	; (8002518 <MX_TIM4_Init+0xf0>)
 80024b8:	f00d ff7a 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80024c2:	f000 fb0d 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024c6:	463b      	mov	r3, r7
 80024c8:	2204      	movs	r2, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4812      	ldr	r0, [pc, #72]	; (8002518 <MX_TIM4_Init+0xf0>)
 80024ce:	f00d ff6f 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80024d8:	f000 fb02 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	2208      	movs	r2, #8
 80024e0:	4619      	mov	r1, r3
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <MX_TIM4_Init+0xf0>)
 80024e4:	f00d ff64 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80024ee:	f000 faf7 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024f2:	463b      	mov	r3, r7
 80024f4:	220c      	movs	r2, #12
 80024f6:	4619      	mov	r1, r3
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <MX_TIM4_Init+0xf0>)
 80024fa:	f00d ff59 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002504:	f000 faec 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <MX_TIM4_Init+0xf0>)
 800250a:	f001 f841 	bl	8003590 <HAL_TIM_MspPostInit>

}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	24001180 	.word	0x24001180
 800251c:	40000800 	.word	0x40000800

08002520 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002532:	463b      	mov	r3, r7
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	615a      	str	r2, [r3, #20]
 8002542:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <MX_TIM5_Init+0xac>)
 8002546:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <MX_TIM5_Init+0xb0>)
 8002548:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <MX_TIM5_Init+0xac>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <MX_TIM5_Init+0xac>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <MX_TIM5_Init+0xac>)
 8002558:	225a      	movs	r2, #90	; 0x5a
 800255a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <MX_TIM5_Init+0xac>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <MX_TIM5_Init+0xac>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002568:	4818      	ldr	r0, [pc, #96]	; (80025cc <MX_TIM5_Init+0xac>)
 800256a:	f00d fa59 	bl	800fa20 <HAL_TIM_PWM_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002574:	f000 fab4 	bl	8002ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	4811      	ldr	r0, [pc, #68]	; (80025cc <MX_TIM5_Init+0xac>)
 8002588:	f00e fce0 	bl	8010f4c <HAL_TIMEx_MasterConfigSynchronization>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002592:	f000 faa5 	bl	8002ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002596:	2360      	movs	r3, #96	; 0x60
 8002598:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025a6:	463b      	mov	r3, r7
 80025a8:	220c      	movs	r2, #12
 80025aa:	4619      	mov	r1, r3
 80025ac:	4807      	ldr	r0, [pc, #28]	; (80025cc <MX_TIM5_Init+0xac>)
 80025ae:	f00d feff 	bl	80103b0 <HAL_TIM_PWM_ConfigChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80025b8:	f000 fa92 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <MX_TIM5_Init+0xac>)
 80025be:	f000 ffe7 	bl	8003590 <HAL_TIM_MspPostInit>

}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	240011cc 	.word	0x240011cc
 80025d0:	40000c00 	.word	0x40000c00

080025d4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_TIM13_Init+0x40>)
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <MX_TIM13_Init+0x44>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <MX_TIM13_Init+0x40>)
 80025e0:	225f      	movs	r2, #95	; 0x5f
 80025e2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <MX_TIM13_Init+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_TIM13_Init+0x40>)
 80025ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <MX_TIM13_Init+0x40>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_TIM13_Init+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_TIM13_Init+0x40>)
 8002600:	f00d f9b7 	bl	800f972 <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800260a:	f000 fa69 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	24001218 	.word	0x24001218
 8002618:	40001c00 	.word	0x40001c00

0800261c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <MX_UART4_Init+0x90>)
 8002622:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <MX_UART4_Init+0x94>)
 8002624:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <MX_UART4_Init+0x90>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <MX_UART4_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_UART4_Init+0x90>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_UART4_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_UART4_Init+0x90>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_UART4_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <MX_UART4_Init+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_UART4_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <MX_UART4_Init+0x90>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_UART4_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002664:	4811      	ldr	r0, [pc, #68]	; (80026ac <MX_UART4_Init+0x90>)
 8002666:	f00e fd2b 	bl	80110c0 <HAL_UART_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002670:	f000 fa36 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002674:	2100      	movs	r1, #0
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <MX_UART4_Init+0x90>)
 8002678:	f00f fe31 	bl	80122de <HAL_UARTEx_SetTxFifoThreshold>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002682:	f000 fa2d 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002686:	2100      	movs	r1, #0
 8002688:	4808      	ldr	r0, [pc, #32]	; (80026ac <MX_UART4_Init+0x90>)
 800268a:	f00f fe66 	bl	801235a <HAL_UARTEx_SetRxFifoThreshold>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002694:	f000 fa24 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <MX_UART4_Init+0x90>)
 800269a:	f00f fde7 	bl	801226c <HAL_UARTEx_DisableFifoMode>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80026a4:	f000 fa1c 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	240014bc 	.word	0x240014bc
 80026b0:	40004c00 	.word	0x40004c00

080026b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026b8:	4b22      	ldr	r3, [pc, #136]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <MX_USART6_UART_Init+0x94>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026fc:	4811      	ldr	r0, [pc, #68]	; (8002744 <MX_USART6_UART_Init+0x90>)
 80026fe:	f00e fcdf 	bl	80110c0 <HAL_UART_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002708:	f000 f9ea 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800270c:	2100      	movs	r1, #0
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <MX_USART6_UART_Init+0x90>)
 8002710:	f00f fde5 	bl	80122de <HAL_UARTEx_SetTxFifoThreshold>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800271a:	f000 f9e1 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800271e:	2100      	movs	r1, #0
 8002720:	4808      	ldr	r0, [pc, #32]	; (8002744 <MX_USART6_UART_Init+0x90>)
 8002722:	f00f fe1a 	bl	801235a <HAL_UARTEx_SetRxFifoThreshold>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800272c:	f000 f9d8 	bl	8002ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_USART6_UART_Init+0x90>)
 8002732:	f00f fd9b 	bl	801226c <HAL_UARTEx_DisableFifoMode>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800273c:	f000 f9d0 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	24001550 	.word	0x24001550
 8002748:	40011400 	.word	0x40011400

0800274c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <MX_DMA_Init+0xbc>)
 8002754:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <MX_DMA_Init+0xbc>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <MX_DMA_Init+0xbc>)
 8002764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <MX_DMA_Init+0xbc>)
 8002772:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002776:	4a24      	ldr	r2, [pc, #144]	; (8002808 <MX_DMA_Init+0xbc>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002780:	4b21      	ldr	r3, [pc, #132]	; (8002808 <MX_DMA_Init+0xbc>)
 8002782:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	200b      	movs	r0, #11
 8002794:	f002 ff01 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002798:	200b      	movs	r0, #11
 800279a:	f002 ff18 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	200c      	movs	r0, #12
 80027a4:	f002 fef9 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027a8:	200c      	movs	r0, #12
 80027aa:	f002 ff10 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	200d      	movs	r0, #13
 80027b4:	f002 fef1 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80027b8:	200d      	movs	r0, #13
 80027ba:	f002 ff08 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200e      	movs	r0, #14
 80027c4:	f002 fee9 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80027c8:	200e      	movs	r0, #14
 80027ca:	f002 ff00 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	200f      	movs	r0, #15
 80027d4:	f002 fee1 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80027d8:	200f      	movs	r0, #15
 80027da:	f002 fef8 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2010      	movs	r0, #16
 80027e4:	f002 fed9 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027e8:	2010      	movs	r0, #16
 80027ea:	f002 fef0 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2046      	movs	r0, #70	; 0x46
 80027f4:	f002 fed1 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80027f8:	2046      	movs	r0, #70	; 0x46
 80027fa:	f002 fee8 	bl	80055ce <HAL_NVIC_EnableIRQ>

}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	58024400 	.word	0x58024400

0800280c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002822:	4ba7      	ldr	r3, [pc, #668]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002828:	4aa5      	ldr	r2, [pc, #660]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 800282a:	f043 0310 	orr.w	r3, r3, #16
 800282e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002832:	4ba3      	ldr	r3, [pc, #652]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002840:	4b9f      	ldr	r3, [pc, #636]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002846:	4a9e      	ldr	r2, [pc, #632]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002848:	f043 0320 	orr.w	r3, r3, #32
 800284c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002850:	4b9b      	ldr	r3, [pc, #620]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800285e:	4b98      	ldr	r3, [pc, #608]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002864:	4a96      	ldr	r2, [pc, #600]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800286e:	4b94      	ldr	r3, [pc, #592]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287c:	4b90      	ldr	r3, [pc, #576]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	4a8f      	ldr	r2, [pc, #572]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288c:	4b8c      	ldr	r3, [pc, #560]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	4b89      	ldr	r3, [pc, #548]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a0:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028aa:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028be:	4a80      	ldr	r2, [pc, #512]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c8:	4b7d      	ldr	r3, [pc, #500]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	4b7a      	ldr	r3, [pc, #488]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028dc:	4a78      	ldr	r2, [pc, #480]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <MX_GPIO_Init+0x2b4>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80028f4:	2200      	movs	r2, #0
 80028f6:	f241 5104 	movw	r1, #5380	; 0x1504
 80028fa:	4872      	ldr	r0, [pc, #456]	; (8002ac4 <MX_GPIO_Init+0x2b8>)
 80028fc:	f005 fc7a 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f248 0106 	movw	r1, #32774	; 0x8006
 8002906:	4870      	ldr	r0, [pc, #448]	; (8002ac8 <MX_GPIO_Init+0x2bc>)
 8002908:	f005 fc74 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800290c:	2200      	movs	r2, #0
 800290e:	2130      	movs	r1, #48	; 0x30
 8002910:	486e      	ldr	r0, [pc, #440]	; (8002acc <MX_GPIO_Init+0x2c0>)
 8002912:	f005 fc6f 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	2103      	movs	r1, #3
 800291a:	486d      	ldr	r0, [pc, #436]	; (8002ad0 <MX_GPIO_Init+0x2c4>)
 800291c:	f005 fc6a 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002920:	2200      	movs	r2, #0
 8002922:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002926:	486b      	ldr	r0, [pc, #428]	; (8002ad4 <MX_GPIO_Init+0x2c8>)
 8002928:	f005 fc64 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	210e      	movs	r1, #14
 8002930:	4869      	ldr	r0, [pc, #420]	; (8002ad8 <MX_GPIO_Init+0x2cc>)
 8002932:	f005 fc5f 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002936:	2201      	movs	r2, #1
 8002938:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800293c:	4867      	ldr	r0, [pc, #412]	; (8002adc <MX_GPIO_Init+0x2d0>)
 800293e:	f005 fc59 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002942:	2200      	movs	r2, #0
 8002944:	2101      	movs	r1, #1
 8002946:	4865      	ldr	r0, [pc, #404]	; (8002adc <MX_GPIO_Init+0x2d0>)
 8002948:	f005 fc54 	bl	80081f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800294c:	f241 5304 	movw	r3, #5380	; 0x1504
 8002950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002952:	2301      	movs	r3, #1
 8002954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	4857      	ldr	r0, [pc, #348]	; (8002ac4 <MX_GPIO_Init+0x2b8>)
 8002966:	f005 fa85 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800296a:	f248 0306 	movw	r3, #32774	; 0x8006
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	4851      	ldr	r0, [pc, #324]	; (8002ac8 <MX_GPIO_Init+0x2bc>)
 8002984:	f005 fa76 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002988:	2330      	movs	r3, #48	; 0x30
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	4619      	mov	r1, r3
 800299e:	484b      	ldr	r0, [pc, #300]	; (8002acc <MX_GPIO_Init+0x2c0>)
 80029a0:	f005 fa68 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 80029a4:	2303      	movs	r3, #3
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4619      	mov	r1, r3
 80029ba:	4845      	ldr	r0, [pc, #276]	; (8002ad0 <MX_GPIO_Init+0x2c4>)
 80029bc:	f005 fa5a 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80029c0:	2304      	movs	r3, #4
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	4619      	mov	r1, r3
 80029d2:	483f      	ldr	r0, [pc, #252]	; (8002ad0 <MX_GPIO_Init+0x2c4>)
 80029d4:	f005 fa4e 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80029d8:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80029dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	4838      	ldr	r0, [pc, #224]	; (8002ad4 <MX_GPIO_Init+0x2c8>)
 80029f2:	f005 fa3f 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80029f6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80029fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4832      	ldr	r0, [pc, #200]	; (8002ad4 <MX_GPIO_Init+0x2c8>)
 8002a0c:	f005 fa32 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	482d      	ldr	r0, [pc, #180]	; (8002ad8 <MX_GPIO_Init+0x2cc>)
 8002a24:	f005 fa26 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002a28:	230e      	movs	r3, #14
 8002a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4826      	ldr	r0, [pc, #152]	; (8002ad8 <MX_GPIO_Init+0x2cc>)
 8002a40:	f005 fa18 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002a44:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	4619      	mov	r1, r3
 8002a58:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <MX_GPIO_Init+0x2b8>)
 8002a5a:	f005 fa0b 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002a5e:	f240 7301 	movw	r3, #1793	; 0x701
 8002a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	2301      	movs	r3, #1
 8002a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	4819      	ldr	r0, [pc, #100]	; (8002adc <MX_GPIO_Init+0x2d0>)
 8002a78:	f005 f9fc 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4812      	ldr	r0, [pc, #72]	; (8002ad8 <MX_GPIO_Init+0x2cc>)
 8002a90:	f005 f9f0 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <MX_GPIO_Init+0x2bc>)
 8002ab2:	f005 f9df 	bl	8007e74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ab6:	bf00      	nop
 8002ab8:	3730      	adds	r7, #48	; 0x30
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	58021000 	.word	0x58021000
 8002ac8:	58020000 	.word	0x58020000
 8002acc:	58020800 	.word	0x58020800
 8002ad0:	58020400 	.word	0x58020400
 8002ad4:	58021400 	.word	0x58021400
 8002ad8:	58021800 	.word	0x58021800
 8002adc:	58020c00 	.word	0x58020c00

08002ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae4:	b672      	cpsid	i
}
 8002ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ae8:	e7fe      	b.n	8002ae8 <Error_Handler+0x8>
	...

08002aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_MspInit+0x30>)
 8002af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_MspInit+0x30>)
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_MspInit+0x30>)
 8002b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	58024400 	.word	0x58024400

08002b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5d      	ldr	r2, [pc, #372]	; (8002cb4 <HAL_ADC_MspInit+0x194>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d159      	bne.n	8002bf6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b42:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b48:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002b4a:	f043 0320 	orr.w	r3, r3, #32
 8002b4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b52:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b60:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b66:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b70:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b82:	2303      	movs	r3, #3
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	484a      	ldr	r0, [pc, #296]	; (8002cbc <HAL_ADC_MspInit+0x19c>)
 8002b92:	f005 f96f 	bl	8007e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002b96:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002b98:	4a4a      	ldr	r2, [pc, #296]	; (8002cc4 <HAL_ADC_MspInit+0x1a4>)
 8002b9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b9c:	4b48      	ldr	r3, [pc, #288]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002b9e:	2209      	movs	r2, #9
 8002ba0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba8:	4b45      	ldr	r3, [pc, #276]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bb6:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bbe:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bcc:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bd8:	4839      	ldr	r0, [pc, #228]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bda:	f002 fd13 	bl	8005604 <HAL_DMA_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002be4:	f7ff ff7c 	bl	8002ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a35      	ldr	r2, [pc, #212]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bec:	659a      	str	r2, [r3, #88]	; 0x58
 8002bee:	4a34      	ldr	r2, [pc, #208]	; (8002cc0 <HAL_ADC_MspInit+0x1a0>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002bf4:	e059      	b.n	8002caa <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a33      	ldr	r2, [pc, #204]	; (8002cc8 <HAL_ADC_MspInit+0x1a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d154      	bne.n	8002caa <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c06:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_ADC_MspInit+0x198>)
 8002c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002c3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002c40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c44:	f001 f848 	bl	8003cd8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c4a:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <HAL_ADC_MspInit+0x1b0>)
 8002c4c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002c4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c50:	2273      	movs	r2, #115	; 0x73
 8002c52:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c66:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c76:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c86:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002c8e:	480f      	ldr	r0, [pc, #60]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002c90:	f002 fcb8 	bl	8005604 <HAL_DMA_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002c9a:	f7ff ff21 	bl	8002ae0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ca4:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_ADC_MspInit+0x1ac>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002caa:	bf00      	nop
 8002cac:	3730      	adds	r7, #48	; 0x30
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	58024400 	.word	0x58024400
 8002cbc:	58020800 	.word	0x58020800
 8002cc0:	24000cdc 	.word	0x24000cdc
 8002cc4:	40020088 	.word	0x40020088
 8002cc8:	58026000 	.word	0x58026000
 8002ccc:	24000d54 	.word	0x24000d54
 8002cd0:	400204b8 	.word	0x400204b8

08002cd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b0b8      	sub	sp, #224	; 0xe0
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	22b8      	movs	r2, #184	; 0xb8
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f014 fceb 	bl	80176d0 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <HAL_FDCAN_MspInit+0xc4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d145      	bne.n	8002d90 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d14:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f007 fe98 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002d26:	f7ff fedb 	bl	8002ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_FDCAN_MspInit+0xc8>)
 8002d2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d30:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_FDCAN_MspInit+0xc8>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_FDCAN_MspInit+0xc8>)
 8002d3c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_FDCAN_MspInit+0xc8>)
 8002d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4e:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <HAL_FDCAN_MspInit+0xc8>)
 8002d50:	f043 0320 	orr.w	r3, r3, #32
 8002d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_FDCAN_MspInit+0xc8>)
 8002d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d66:	23c0      	movs	r3, #192	; 0xc0
 8002d68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4805      	ldr	r0, [pc, #20]	; (8002da0 <HAL_FDCAN_MspInit+0xcc>)
 8002d8c:	f005 f872 	bl	8007e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002d90:	bf00      	nop
 8002d92:	37e0      	adds	r7, #224	; 0xe0
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	4000d400 	.word	0x4000d400
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	58021400 	.word	0x58021400

08002da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b0b8      	sub	sp, #224	; 0xe0
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	22b8      	movs	r2, #184	; 0xb8
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f014 fc83 	bl	80176d0 <memset>
  if(hi2c->Instance==I2C2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <HAL_I2C_MspInit+0xd4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d14d      	bne.n	8002e70 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002dd4:	f04f 0208 	mov.w	r2, #8
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f007 fe30 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002df6:	f7ff fe73 	bl	8002ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_I2C_MspInit+0xd8>)
 8002dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_I2C_MspInit+0xd8>)
 8002e02:	f043 0320 	orr.w	r3, r3, #32
 8002e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_I2C_MspInit+0xd8>)
 8002e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1e:	2312      	movs	r3, #18
 8002e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e30:	2304      	movs	r3, #4
 8002e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4810      	ldr	r0, [pc, #64]	; (8002e80 <HAL_I2C_MspInit+0xdc>)
 8002e3e:	f005 f819 	bl	8007e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_I2C_MspInit+0xd8>)
 8002e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e48:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_I2C_MspInit+0xd8>)
 8002e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_I2C_MspInit+0xd8>)
 8002e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2101      	movs	r1, #1
 8002e64:	2021      	movs	r0, #33	; 0x21
 8002e66:	f002 fb98 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002e6a:	2021      	movs	r0, #33	; 0x21
 8002e6c:	f002 fbaf 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	37e0      	adds	r7, #224	; 0xe0
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40005800 	.word	0x40005800
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	58021400 	.word	0x58021400

08002e84 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b0b2      	sub	sp, #200	; 0xc8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	22b8      	movs	r2, #184	; 0xb8
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f014 fc1b 	bl	80176d0 <memset>
  if(hrng->Instance==RNG)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_RNG_MspInit+0x6c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d121      	bne.n	8002ee8 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002ea4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f007 fdc8 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002ec6:	f7ff fe0b 	bl	8002ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_RNG_MspInit+0x70>)
 8002ecc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_RNG_MspInit+0x70>)
 8002ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RNG_MspInit+0x70>)
 8002edc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002ee8:	bf00      	nop
 8002eea:	37c8      	adds	r7, #200	; 0xc8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	48021800 	.word	0x48021800
 8002ef4:	58024400 	.word	0x58024400

08002ef8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0ba      	sub	sp, #232	; 0xe8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f10:	f107 0318 	add.w	r3, r7, #24
 8002f14:	22b8      	movs	r2, #184	; 0xb8
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f014 fbd9 	bl	80176d0 <memset>
  if(hsd->Instance==SDMMC2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5d      	ldr	r2, [pc, #372]	; (8003098 <HAL_SD_MspInit+0x1a0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	f040 80b3 	bne.w	8003090 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f3a:	f107 0318 	add.w	r3, r7, #24
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f007 fd86 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002f4a:	f7ff fdc9 	bl	8002ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002f4e:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f54:	4a51      	ldr	r2, [pc, #324]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f5a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f5e:	4b4f      	ldr	r3, [pc, #316]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f72:	4a4a      	ldr	r2, [pc, #296]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f7c:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f90:	4a42      	ldr	r2, [pc, #264]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f9a:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_SD_MspInit+0x1a4>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fa8:	2340      	movs	r3, #64	; 0x40
 8002faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002fc0:	230b      	movs	r3, #11
 8002fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4834      	ldr	r0, [pc, #208]	; (80030a0 <HAL_SD_MspInit+0x1a8>)
 8002fce:	f004 ff51 	bl	8007e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002fea:	230b      	movs	r3, #11
 8002fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	482a      	ldr	r0, [pc, #168]	; (80030a0 <HAL_SD_MspInit+0x1a8>)
 8002ff8:	f004 ff3c 	bl	8007e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800300a:	2301      	movs	r3, #1
 800300c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003016:	230b      	movs	r3, #11
 8003018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800301c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003020:	4619      	mov	r1, r3
 8003022:	4820      	ldr	r0, [pc, #128]	; (80030a4 <HAL_SD_MspInit+0x1ac>)
 8003024:	f004 ff26 	bl	8007e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303c:	2303      	movs	r3, #3
 800303e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003042:	230b      	movs	r3, #11
 8003044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003048:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800304c:	4619      	mov	r1, r3
 800304e:	4815      	ldr	r0, [pc, #84]	; (80030a4 <HAL_SD_MspInit+0x1ac>)
 8003050:	f004 ff10 	bl	8007e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003054:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003058:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003068:	2303      	movs	r3, #3
 800306a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800306e:	230a      	movs	r3, #10
 8003070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003074:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003078:	4619      	mov	r1, r3
 800307a:	480a      	ldr	r0, [pc, #40]	; (80030a4 <HAL_SD_MspInit+0x1ac>)
 800307c:	f004 fefa 	bl	8007e74 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	207c      	movs	r0, #124	; 0x7c
 8003086:	f002 fa88 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800308a:	207c      	movs	r0, #124	; 0x7c
 800308c:	f002 fa9f 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003090:	bf00      	nop
 8003092:	37e8      	adds	r7, #232	; 0xe8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	48022400 	.word	0x48022400
 800309c:	58024400 	.word	0x58024400
 80030a0:	58020c00 	.word	0x58020c00
 80030a4:	58021800 	.word	0x58021800

080030a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08e      	sub	sp, #56	; 0x38
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a4f      	ldr	r2, [pc, #316]	; (8003204 <HAL_SPI_MspInit+0x15c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d12e      	bne.n	8003128 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80030cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d0:	4a4d      	ldr	r2, [pc, #308]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80030d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030da:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80030dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e8:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	4a46      	ldr	r2, [pc, #280]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f8:	4b43      	ldr	r3, [pc, #268]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003106:	23e0      	movs	r3, #224	; 0xe0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003116:	2305      	movs	r3, #5
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311e:	4619      	mov	r1, r3
 8003120:	483a      	ldr	r0, [pc, #232]	; (800320c <HAL_SPI_MspInit+0x164>)
 8003122:	f004 fea7 	bl	8007e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003126:	e068      	b.n	80031fa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a38      	ldr	r2, [pc, #224]	; (8003210 <HAL_SPI_MspInit+0x168>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d12f      	bne.n	8003192 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003132:	4b35      	ldr	r3, [pc, #212]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003138:	4a33      	ldr	r2, [pc, #204]	; (8003208 <HAL_SPI_MspInit+0x160>)
 800313a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_SPI_MspInit+0x160>)
 8003162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800316e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003180:	2305      	movs	r3, #5
 8003182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003188:	4619      	mov	r1, r3
 800318a:	4822      	ldr	r0, [pc, #136]	; (8003214 <HAL_SPI_MspInit+0x16c>)
 800318c:	f004 fe72 	bl	8007e74 <HAL_GPIO_Init>
}
 8003190:	e033      	b.n	80031fa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a20      	ldr	r2, [pc, #128]	; (8003218 <HAL_SPI_MspInit+0x170>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d12e      	bne.n	80031fa <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_SPI_MspInit+0x160>)
 800319e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a2:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031ac:	4b16      	ldr	r3, [pc, #88]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ca:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <HAL_SPI_MspInit+0x160>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80031d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	2300      	movs	r3, #0
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031ea:	2306      	movs	r3, #6
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f2:	4619      	mov	r1, r3
 80031f4:	4809      	ldr	r0, [pc, #36]	; (800321c <HAL_SPI_MspInit+0x174>)
 80031f6:	f004 fe3d 	bl	8007e74 <HAL_GPIO_Init>
}
 80031fa:	bf00      	nop
 80031fc:	3738      	adds	r7, #56	; 0x38
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40013000 	.word	0x40013000
 8003208:	58024400 	.word	0x58024400
 800320c:	58020000 	.word	0x58020000
 8003210:	40003800 	.word	0x40003800
 8003214:	58020400 	.word	0x58020400
 8003218:	40003c00 	.word	0x40003c00
 800321c:	58020800 	.word	0x58020800

08003220 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08c      	sub	sp, #48	; 0x30
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d15d      	bne.n	80032fe <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003242:	4b8e      	ldr	r3, [pc, #568]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 8003244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003248:	4a8c      	ldr	r2, [pc, #560]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003252:	4b8a      	ldr	r3, [pc, #552]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 8003254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003260:	4b86      	ldr	r3, [pc, #536]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 8003262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003266:	4a85      	ldr	r2, [pc, #532]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003270:	4b82      	ldr	r3, [pc, #520]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 8003272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800327e:	2301      	movs	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800328e:	2301      	movs	r3, #1
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	4879      	ldr	r0, [pc, #484]	; (8003480 <HAL_TIM_PWM_MspInit+0x260>)
 800329a:	f004 fdeb 	bl	8007e74 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800329e:	4b79      	ldr	r3, [pc, #484]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032a0:	4a79      	ldr	r2, [pc, #484]	; (8003488 <HAL_TIM_PWM_MspInit+0x268>)
 80032a2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80032a4:	4b77      	ldr	r3, [pc, #476]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032a6:	2214      	movs	r2, #20
 80032a8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b0:	4b74      	ldr	r3, [pc, #464]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032bc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032be:	4b71      	ldr	r3, [pc, #452]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032c4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032c6:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032cc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80032d4:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032da:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032dc:	2200      	movs	r2, #0
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80032e0:	4868      	ldr	r0, [pc, #416]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032e2:	f002 f98f 	bl	8005604 <HAL_DMA_Init>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80032ec:	f7ff fbf8 	bl	8002ae0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a64      	ldr	r2, [pc, #400]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f6:	4a63      	ldr	r2, [pc, #396]	; (8003484 <HAL_TIM_PWM_MspInit+0x264>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032fc:	e119      	b.n	8003532 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a62      	ldr	r2, [pc, #392]	; (800348c <HAL_TIM_PWM_MspInit+0x26c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d16d      	bne.n	80033e4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003308:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 800330a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800330e:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003318:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 800331a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003326:	4b5a      	ldr	r3, [pc, #360]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003328:	4a5a      	ldr	r2, [pc, #360]	; (8003494 <HAL_TIM_PWM_MspInit+0x274>)
 800332a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800332c:	4b58      	ldr	r3, [pc, #352]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 800332e:	2218      	movs	r2, #24
 8003330:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003332:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003334:	2240      	movs	r2, #64	; 0x40
 8003336:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003338:	4b55      	ldr	r3, [pc, #340]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 800333a:	2200      	movs	r2, #0
 800333c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800333e:	4b54      	ldr	r3, [pc, #336]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003344:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003346:	4b52      	ldr	r3, [pc, #328]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800334c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800334e:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003350:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003354:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 800335e:	2200      	movs	r2, #0
 8003360:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003362:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003364:	2200      	movs	r2, #0
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003368:	4849      	ldr	r0, [pc, #292]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 800336a:	f002 f94b 	bl	8005604 <HAL_DMA_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003374:	f7ff fbb4 	bl	8002ae0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a45      	ldr	r2, [pc, #276]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
 800337e:	4a44      	ldr	r2, [pc, #272]	; (8003490 <HAL_TIM_PWM_MspInit+0x270>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 8003386:	4a45      	ldr	r2, [pc, #276]	; (800349c <HAL_TIM_PWM_MspInit+0x27c>)
 8003388:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800338a:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 800338c:	2217      	movs	r2, #23
 800338e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003390:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003396:	4b40      	ldr	r3, [pc, #256]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 8003398:	2200      	movs	r2, #0
 800339a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 800339e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033a4:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033aa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033b2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80033b4:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033bc:	2200      	movs	r2, #0
 80033be:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033c0:	4b35      	ldr	r3, [pc, #212]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80033c6:	4834      	ldr	r0, [pc, #208]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033c8:	f002 f91c 	bl	8005604 <HAL_DMA_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80033d2:	f7ff fb85 	bl	8002ae0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033da:	625a      	str	r2, [r3, #36]	; 0x24
 80033dc:	4a2e      	ldr	r2, [pc, #184]	; (8003498 <HAL_TIM_PWM_MspInit+0x278>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80033e2:	e0a6      	b.n	8003532 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <HAL_TIM_PWM_MspInit+0x280>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d15e      	bne.n	80034ac <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 80033f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033f4:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033fe:	4b1f      	ldr	r3, [pc, #124]	; (800347c <HAL_TIM_PWM_MspInit+0x25c>)
 8003400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 800340e:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <HAL_TIM_PWM_MspInit+0x288>)
 8003410:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003414:	221f      	movs	r2, #31
 8003416:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003420:	2200      	movs	r2, #0
 8003422:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800342a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 800342e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003432:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800343a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003444:	2200      	movs	r2, #0
 8003446:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 800344a:	2200      	movs	r2, #0
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800344e:	4815      	ldr	r0, [pc, #84]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003450:	f002 f8d8 	bl	8005604 <HAL_DMA_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800345a:	f7ff fb41 	bl	8002ae0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	201e      	movs	r0, #30
 8003470:	f002 f893 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003474:	201e      	movs	r0, #30
 8003476:	f002 f8aa 	bl	80055ce <HAL_NVIC_EnableIRQ>
}
 800347a:	e05a      	b.n	8003532 <HAL_TIM_PWM_MspInit+0x312>
 800347c:	58024400 	.word	0x58024400
 8003480:	58020000 	.word	0x58020000
 8003484:	24001264 	.word	0x24001264
 8003488:	40020028 	.word	0x40020028
 800348c:	40000400 	.word	0x40000400
 8003490:	240012dc 	.word	0x240012dc
 8003494:	40020058 	.word	0x40020058
 8003498:	24001354 	.word	0x24001354
 800349c:	40020070 	.word	0x40020070
 80034a0:	40000800 	.word	0x40000800
 80034a4:	240013cc 	.word	0x240013cc
 80034a8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <HAL_TIM_PWM_MspInit+0x31c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d13d      	bne.n	8003532 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_TIM_PWM_MspInit+0x320>)
 80034b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <HAL_TIM_PWM_MspInit+0x320>)
 80034be:	f043 0308 	orr.w	r3, r3, #8
 80034c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_TIM_PWM_MspInit+0x320>)
 80034c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 80034d6:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_TIM_PWM_MspInit+0x328>)
 80034d8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 80034dc:	223a      	movs	r2, #58	; 0x3a
 80034de:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 80034ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 80034f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034fa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 80034fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003502:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 8003506:	2200      	movs	r2, #0
 8003508:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 8003512:	2200      	movs	r2, #0
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003516:	480b      	ldr	r0, [pc, #44]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 8003518:	f002 f874 	bl	8005604 <HAL_DMA_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003522:	f7ff fadd 	bl	8002ae0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a06      	ldr	r2, [pc, #24]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
 800352c:	4a05      	ldr	r2, [pc, #20]	; (8003544 <HAL_TIM_PWM_MspInit+0x324>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003532:	bf00      	nop
 8003534:	3730      	adds	r7, #48	; 0x30
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40000c00 	.word	0x40000c00
 8003540:	58024400 	.word	0x58024400
 8003544:	24001444 	.word	0x24001444
 8003548:	40020040 	.word	0x40020040

0800354c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <HAL_TIM_Base_MspInit+0x3c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10e      	bne.n	800357c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_TIM_Base_MspInit+0x40>)
 8003560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <HAL_TIM_Base_MspInit+0x40>)
 8003566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <HAL_TIM_Base_MspInit+0x40>)
 8003570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40001c00 	.word	0x40001c00
 800358c:	58024400 	.word	0x58024400

08003590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	; 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d120      	bne.n	80035f4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b2:	4b52      	ldr	r3, [pc, #328]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 80035b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b8:	4a50      	ldr	r2, [pc, #320]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c2:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 80035c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035da:	2302      	movs	r3, #2
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035e2:	2301      	movs	r3, #1
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	4619      	mov	r1, r3
 80035ec:	4844      	ldr	r0, [pc, #272]	; (8003700 <HAL_TIM_MspPostInit+0x170>)
 80035ee:	f004 fc41 	bl	8007e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80035f2:	e07f      	b.n	80036f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a42      	ldr	r2, [pc, #264]	; (8003704 <HAL_TIM_MspPostInit+0x174>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d11f      	bne.n	800363e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 8003600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003604:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 8003606:	f043 0302 	orr.w	r3, r3, #2
 800360a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 8003610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800361c:	2330      	movs	r3, #48	; 0x30
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003624:	2302      	movs	r3, #2
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003628:	2300      	movs	r3, #0
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800362c:	2302      	movs	r3, #2
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4619      	mov	r1, r3
 8003636:	4832      	ldr	r0, [pc, #200]	; (8003700 <HAL_TIM_MspPostInit+0x170>)
 8003638:	f004 fc1c 	bl	8007e74 <HAL_GPIO_Init>
}
 800363c:	e05a      	b.n	80036f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a31      	ldr	r2, [pc, #196]	; (8003708 <HAL_TIM_MspPostInit+0x178>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d131      	bne.n	80036ac <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364e:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 8003650:	f043 0308 	orr.w	r3, r3, #8
 8003654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 800365a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003666:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800366a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	2300      	movs	r3, #0
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003678:	2302      	movs	r3, #2
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	4619      	mov	r1, r3
 8003682:	4822      	ldr	r0, [pc, #136]	; (800370c <HAL_TIM_MspPostInit+0x17c>)
 8003684:	f004 fbf6 	bl	8007e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800368c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003692:	2302      	movs	r3, #2
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003696:	2300      	movs	r3, #0
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800369a:	2302      	movs	r3, #2
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800369e:	f107 031c 	add.w	r3, r7, #28
 80036a2:	4619      	mov	r1, r3
 80036a4:	4819      	ldr	r0, [pc, #100]	; (800370c <HAL_TIM_MspPostInit+0x17c>)
 80036a6:	f004 fbe5 	bl	8007e74 <HAL_GPIO_Init>
}
 80036aa:	e023      	b.n	80036f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_TIM_MspPostInit+0x180>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d11e      	bne.n	80036f4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 80036b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_TIM_MspPostInit+0x16c>)
 80036c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036d4:	2308      	movs	r3, #8
 80036d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036dc:	2302      	movs	r3, #2
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036e4:	2302      	movs	r3, #2
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	4619      	mov	r1, r3
 80036ee:	4809      	ldr	r0, [pc, #36]	; (8003714 <HAL_TIM_MspPostInit+0x184>)
 80036f0:	f004 fbc0 	bl	8007e74 <HAL_GPIO_Init>
}
 80036f4:	bf00      	nop
 80036f6:	3730      	adds	r7, #48	; 0x30
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	58024400 	.word	0x58024400
 8003700:	58020400 	.word	0x58020400
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	58020c00 	.word	0x58020c00
 8003710:	40000c00 	.word	0x40000c00
 8003714:	58020000 	.word	0x58020000

08003718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b0ba      	sub	sp, #232	; 0xe8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003730:	f107 0318 	add.w	r3, r7, #24
 8003734:	22b8      	movs	r2, #184	; 0xb8
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f013 ffc9 	bl	80176d0 <memset>
  if(huart->Instance==UART4)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a4d      	ldr	r2, [pc, #308]	; (8003878 <HAL_UART_MspInit+0x160>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d147      	bne.n	80037d8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003748:	f04f 0202 	mov.w	r2, #2
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800375a:	f107 0318 	add.w	r3, r7, #24
 800375e:	4618      	mov	r0, r3
 8003760:	f007 f976 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800376a:	f7ff f9b9 	bl	8002ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800376e:	4b43      	ldr	r3, [pc, #268]	; (800387c <HAL_UART_MspInit+0x164>)
 8003770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003774:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_UART_MspInit+0x164>)
 8003776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800377a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <HAL_UART_MspInit+0x164>)
 8003780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378c:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_UART_MspInit+0x164>)
 800378e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003792:	4a3a      	ldr	r2, [pc, #232]	; (800387c <HAL_UART_MspInit+0x164>)
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800379c:	4b37      	ldr	r3, [pc, #220]	; (800387c <HAL_UART_MspInit+0x164>)
 800379e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037c4:	2308      	movs	r3, #8
 80037c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037ce:	4619      	mov	r1, r3
 80037d0:	482b      	ldr	r0, [pc, #172]	; (8003880 <HAL_UART_MspInit+0x168>)
 80037d2:	f004 fb4f 	bl	8007e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80037d6:	e04a      	b.n	800386e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a29      	ldr	r2, [pc, #164]	; (8003884 <HAL_UART_MspInit+0x16c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d145      	bne.n	800386e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80037e2:	f04f 0201 	mov.w	r2, #1
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f4:	f107 0318 	add.w	r3, r7, #24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f007 f929 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003804:	f7ff f96c 	bl	8002ae0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <HAL_UART_MspInit+0x164>)
 800380a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800380e:	4a1b      	ldr	r2, [pc, #108]	; (800387c <HAL_UART_MspInit+0x164>)
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003818:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_UART_MspInit+0x164>)
 800381a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_UART_MspInit+0x164>)
 8003828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800382c:	4a13      	ldr	r2, [pc, #76]	; (800387c <HAL_UART_MspInit+0x164>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_UART_MspInit+0x164>)
 8003838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003844:	23c0      	movs	r3, #192	; 0xc0
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800385c:	2307      	movs	r3, #7
 800385e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003862:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003866:	4619      	mov	r1, r3
 8003868:	4807      	ldr	r0, [pc, #28]	; (8003888 <HAL_UART_MspInit+0x170>)
 800386a:	f004 fb03 	bl	8007e74 <HAL_GPIO_Init>
}
 800386e:	bf00      	nop
 8003870:	37e8      	adds	r7, #232	; 0xe8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40004c00 	.word	0x40004c00
 800387c:	58024400 	.word	0x58024400
 8003880:	58020400 	.word	0x58020400
 8003884:	40011400 	.word	0x40011400
 8003888:	58020800 	.word	0x58020800

0800388c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003890:	e7fe      	b.n	8003890 <NMI_Handler+0x4>

08003892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003896:	e7fe      	b.n	8003896 <HardFault_Handler+0x4>

08003898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800389c:	e7fe      	b.n	800389c <MemManage_Handler+0x4>

0800389e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038a2:	e7fe      	b.n	80038a2 <BusFault_Handler+0x4>

080038a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <UsageFault_Handler+0x4>

080038aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d8:	f000 f9ba 	bl	8003c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}

080038e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <DMA1_Stream0_IRQHandler+0x10>)
 80038e6:	f002 fc4f 	bl	8006188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	240013cc 	.word	0x240013cc

080038f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <DMA1_Stream1_IRQHandler+0x10>)
 80038fa:	f002 fc45 	bl	8006188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	24001264 	.word	0x24001264

08003908 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <DMA1_Stream2_IRQHandler+0x10>)
 800390e:	f002 fc3b 	bl	8006188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	24001444 	.word	0x24001444

0800391c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <DMA1_Stream3_IRQHandler+0x10>)
 8003922:	f002 fc31 	bl	8006188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	240012dc 	.word	0x240012dc

08003930 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <DMA1_Stream4_IRQHandler+0x10>)
 8003936:	f002 fc27 	bl	8006188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	24001354 	.word	0x24001354

08003944 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <DMA1_Stream5_IRQHandler+0x10>)
 800394a:	f002 fc1d 	bl	8006188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	24000cdc 	.word	0x24000cdc

08003958 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <TIM4_IRQHandler+0x10>)
 800395e:	f00c fc07 	bl	8010170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	24001180 	.word	0x24001180

0800396c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <I2C2_EV_IRQHandler+0x10>)
 8003972:	f004 fce9 	bl	8008348 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	24000e6c 	.word	0x24000e6c

08003980 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <DMA2_Stream7_IRQHandler+0x10>)
 8003986:	f002 fbff 	bl	8006188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	24000d54 	.word	0x24000d54

08003994 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <OTG_HS_IRQHandler+0x10>)
 800399a:	f004 fedf 	bl	800875c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	24002ae8 	.word	0x24002ae8

080039a8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <SDMMC2_IRQHandler+0x10>)
 80039ae:	f00a f853 	bl	800da58 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	24000ed4 	.word	0x24000ed4

080039bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <_sbrk+0x5c>)
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <_sbrk+0x60>)
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <_sbrk+0x64>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <_sbrk+0x64>)
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <_sbrk+0x68>)
 80039dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <_sbrk+0x64>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d207      	bcs.n	80039fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039ec:	f013 fe78 	bl	80176e0 <__errno>
 80039f0:	4603      	mov	r3, r0
 80039f2:	220c      	movs	r2, #12
 80039f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	e009      	b.n	8003a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <_sbrk+0x64>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <_sbrk+0x64>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <_sbrk+0x64>)
 8003a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	24050000 	.word	0x24050000
 8003a1c:	00000800 	.word	0x00000800
 8003a20:	240015e4 	.word	0x240015e4
 8003a24:	24003360 	.word	0x24003360

08003a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a2c:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <SystemInit+0xd0>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <SystemInit+0xd0>)
 8003a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003a3c:	4b2f      	ldr	r3, [pc, #188]	; (8003afc <SystemInit+0xd4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d807      	bhi.n	8003a58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003a48:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <SystemInit+0xd4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 030f 	bic.w	r3, r3, #15
 8003a50:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <SystemInit+0xd4>)
 8003a52:	f043 0307 	orr.w	r3, r3, #7
 8003a56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003a58:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <SystemInit+0xd8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <SystemInit+0xd8>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a64:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <SystemInit+0xd8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003a6a:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <SystemInit+0xd8>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4924      	ldr	r1, [pc, #144]	; (8003b00 <SystemInit+0xd8>)
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <SystemInit+0xdc>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <SystemInit+0xd4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <SystemInit+0xd4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 030f 	bic.w	r3, r3, #15
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <SystemInit+0xd4>)
 8003a8c:	f043 0307 	orr.w	r3, r3, #7
 8003a90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <SystemInit+0xd8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <SystemInit+0xd8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003a9e:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <SystemInit+0xd8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003aa4:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <SystemInit+0xd8>)
 8003aa6:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <SystemInit+0xe0>)
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <SystemInit+0xd8>)
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <SystemInit+0xe4>)
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <SystemInit+0xd8>)
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <SystemInit+0xe8>)
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <SystemInit+0xd8>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <SystemInit+0xd8>)
 8003abe:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <SystemInit+0xe8>)
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <SystemInit+0xd8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <SystemInit+0xd8>)
 8003aca:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <SystemInit+0xe8>)
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <SystemInit+0xd8>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <SystemInit+0xd8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <SystemInit+0xd8>)
 8003ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ade:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <SystemInit+0xd8>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <SystemInit+0xec>)
 8003ae8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003aec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003aee:	bf00      	nop
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00
 8003afc:	52002000 	.word	0x52002000
 8003b00:	58024400 	.word	0x58024400
 8003b04:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b08:	02020200 	.word	0x02020200
 8003b0c:	01ff0000 	.word	0x01ff0000
 8003b10:	01010280 	.word	0x01010280
 8003b14:	52004000 	.word	0x52004000

08003b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b1c:	f7ff ff84 	bl	8003a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b20:	480c      	ldr	r0, [pc, #48]	; (8003b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b22:	490d      	ldr	r1, [pc, #52]	; (8003b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b24:	4a0d      	ldr	r2, [pc, #52]	; (8003b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b28:	e002      	b.n	8003b30 <LoopCopyDataInit>

08003b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2e:	3304      	adds	r3, #4

08003b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b34:	d3f9      	bcc.n	8003b2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b38:	4c0a      	ldr	r4, [pc, #40]	; (8003b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b3c:	e001      	b.n	8003b42 <LoopFillZerobss>

08003b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b40:	3204      	adds	r2, #4

08003b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b44:	d3fb      	bcc.n	8003b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b46:	f013 fdd1 	bl	80176ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b4a:	f7fd fc99 	bl	8001480 <main>
  bx  lr
 8003b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b50:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003b54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003b58:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8003b5c:	08018d10 	.word	0x08018d10
  ldr r2, =_sbss
 8003b60:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8003b64:	2400335c 	.word	0x2400335c

08003b68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b68:	e7fe      	b.n	8003b68 <ADC3_IRQHandler>
	...

08003b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b72:	2003      	movs	r0, #3
 8003b74:	f001 fd06 	bl	8005584 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b78:	f006 fd94 	bl	800a6a4 <HAL_RCC_GetSysClockFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_Init+0x68>)
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	4913      	ldr	r1, [pc, #76]	; (8003bd8 <HAL_Init+0x6c>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
 8003b94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <HAL_Init+0x68>)
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <HAL_Init+0x6c>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_Init+0x70>)
 8003bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	; (8003be0 <HAL_Init+0x74>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bb6:	200f      	movs	r0, #15
 8003bb8:	f000 f814 	bl	8003be4 <HAL_InitTick>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e002      	b.n	8003bcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc6:	f7fe ff91 	bl	8002aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	08018b5c 	.word	0x08018b5c
 8003bdc:	24000004 	.word	0x24000004
 8003be0:	24000000 	.word	0x24000000

08003be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003bec:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_InitTick+0x60>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e021      	b.n	8003c3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_InitTick+0x64>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <HAL_InitTick+0x60>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
 8003c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 fceb 	bl	80055ea <HAL_SYSTICK_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e00e      	b.n	8003c3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d80a      	bhi.n	8003c3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c24:	2200      	movs	r2, #0
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	f001 fcb5 	bl	800559a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c30:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <HAL_InitTick+0x68>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	2400000c 	.word	0x2400000c
 8003c48:	24000000 	.word	0x24000000
 8003c4c:	24000008 	.word	0x24000008

08003c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_IncTick+0x20>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_IncTick+0x24>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <HAL_IncTick+0x24>)
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2400000c 	.word	0x2400000c
 8003c74:	240015e8 	.word	0x240015e8

08003c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_GetTick+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	240015e8 	.word	0x240015e8

08003c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c98:	f7ff ffee 	bl	8003c78 <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d005      	beq.n	8003cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_Delay+0x44>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cb6:	bf00      	nop
 8003cb8:	f7ff ffde 	bl	8003c78 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d8f7      	bhi.n	8003cb8 <HAL_Delay+0x28>
  {
  }
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	2400000c 	.word	0x2400000c

08003cd8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	401a      	ands	r2, r3
 8003cec:	4904      	ldr	r1, [pc, #16]	; (8003d00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	58000400 	.word	0x58000400

08003d04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3360      	adds	r3, #96	; 0x60
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <LL_ADC_SetOffset+0x60>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10b      	bne.n	8003da8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003da6:	e00b      	b.n	8003dc0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	601a      	str	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	58026000 	.word	0x58026000

08003dd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3360      	adds	r3, #96	; 0x60
 8003dde:	461a      	mov	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	611a      	str	r2, [r3, #16]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3360      	adds	r3, #96	; 0x60
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	601a      	str	r2, [r3, #0]
  }
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	58026000 	.word	0x58026000

08003e74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <LL_ADC_SetOffsetSaturation+0x40>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d10e      	bne.n	8003ea6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3360      	adds	r3, #96	; 0x60
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	58026000 	.word	0x58026000

08003eb8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <LL_ADC_SetOffsetSign+0x40>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d10e      	bne.n	8003eea <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3360      	adds	r3, #96	; 0x60
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	58026000 	.word	0x58026000

08003efc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3360      	adds	r3, #96	; 0x60
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <LL_ADC_SetOffsetState+0x50>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003f2e:	e007      	b.n	8003f40 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	601a      	str	r2, [r3, #0]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	58026000 	.word	0x58026000

08003f50 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3330      	adds	r3, #48	; 0x30
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	4413      	add	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	211f      	movs	r1, #31
 8003f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	401a      	ands	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	f003 011f 	and.w	r1, r3, #31
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	431a      	orrs	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	0e5b      	lsrs	r3, r3, #25
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	0d1b      	lsrs	r3, r3, #20
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2107      	movs	r1, #7
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	401a      	ands	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	0d1b      	lsrs	r3, r3, #20
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	431a      	orrs	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004020:	43db      	mvns	r3, r3
 8004022:	401a      	ands	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0318 	and.w	r3, r3, #24
 800402a:	4914      	ldr	r1, [pc, #80]	; (800407c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800402c:	40d9      	lsrs	r1, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	400b      	ands	r3, r1
 8004032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800403e:	e014      	b.n	800406a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800404c:	43db      	mvns	r3, r3
 800404e:	401a      	ands	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0318 	and.w	r3, r3, #24
 8004056:	4909      	ldr	r1, [pc, #36]	; (800407c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004058:	40d9      	lsrs	r1, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	400b      	ands	r3, r1
 800405e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004062:	431a      	orrs	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	58026000 	.word	0x58026000
 800407c:	000fffff 	.word	0x000fffff

08004080 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800408e:	4013      	ands	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6093      	str	r3, [r2, #8]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	5fffffc0 	.word	0x5fffffc0

080040a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b8:	d101      	bne.n	80040be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80040da:	4013      	ands	r3, r2
 80040dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	6fffffc0 	.word	0x6fffffc0

080040f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004108:	d101      	bne.n	800410e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <LL_ADC_IsEnabled+0x18>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LL_ADC_IsEnabled+0x1a>
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d101      	bne.n	800415a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d101      	bne.n	8004180 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e1ee      	b.n	8004588 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fe fcb1 	bl	8002b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff67 	bl	80040a4 <LL_ADC_IsDeepPowerDownEnabled>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff4d 	bl	8004080 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff82 	bl	80040f4 <LL_ADC_IsInternalRegulatorEnabled>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d114      	bne.n	8004220 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff66 	bl	80040cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004200:	4b8e      	ldr	r3, [pc, #568]	; (800443c <HAL_ADC_Init+0x2ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	4a8e      	ldr	r2, [pc, #568]	; (8004440 <HAL_ADC_Init+0x2b0>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	3301      	adds	r3, #1
 8004210:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004212:	e002      	b.n	800421a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3b01      	subs	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f9      	bne.n	8004214 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff65 	bl	80040f4 <LL_ADC_IsInternalRegulatorEnabled>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004234:	f043 0210 	orr.w	r2, r3, #16
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004240:	f043 0201 	orr.w	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ff76 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 8004256:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	f040 8188 	bne.w	8004576 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8184 	bne.w	8004576 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff4a 	bl	800411c <LL_ADC_IsEnabled>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d136      	bne.n	80042fc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a6c      	ldr	r2, [pc, #432]	; (8004444 <HAL_ADC_Init+0x2b4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_ADC_Init+0x112>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_ADC_Init+0x2b8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10e      	bne.n	80042c0 <HAL_ADC_Init+0x130>
 80042a2:	4868      	ldr	r0, [pc, #416]	; (8004444 <HAL_ADC_Init+0x2b4>)
 80042a4:	f7ff ff3a 	bl	800411c <LL_ADC_IsEnabled>
 80042a8:	4604      	mov	r4, r0
 80042aa:	4867      	ldr	r0, [pc, #412]	; (8004448 <HAL_ADC_Init+0x2b8>)
 80042ac:	f7ff ff36 	bl	800411c <LL_ADC_IsEnabled>
 80042b0:	4603      	mov	r3, r0
 80042b2:	4323      	orrs	r3, r4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e008      	b.n	80042d2 <HAL_ADC_Init+0x142>
 80042c0:	4862      	ldr	r0, [pc, #392]	; (800444c <HAL_ADC_Init+0x2bc>)
 80042c2:	f7ff ff2b 	bl	800411c <LL_ADC_IsEnabled>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a5a      	ldr	r2, [pc, #360]	; (8004444 <HAL_ADC_Init+0x2b4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_ADC_Init+0x15a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_ADC_Init+0x2b8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_Init+0x15e>
 80042ea:	4a59      	ldr	r2, [pc, #356]	; (8004450 <HAL_ADC_Init+0x2c0>)
 80042ec:	e000      	b.n	80042f0 <HAL_ADC_Init+0x160>
 80042ee:	4a59      	ldr	r2, [pc, #356]	; (8004454 <HAL_ADC_Init+0x2c4>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f7ff fd04 	bl	8003d04 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_ADC_Init+0x2bc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d129      	bne.n	800435a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	7e5b      	ldrb	r3, [r3, #25]
 800430a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004310:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004316:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d013      	beq.n	8004348 <HAL_ADC_Init+0x1b8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	d00d      	beq.n	8004344 <HAL_ADC_Init+0x1b4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b1c      	cmp	r3, #28
 800432e:	d007      	beq.n	8004340 <HAL_ADC_Init+0x1b0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b18      	cmp	r3, #24
 8004336:	d101      	bne.n	800433c <HAL_ADC_Init+0x1ac>
 8004338:	2318      	movs	r3, #24
 800433a:	e006      	b.n	800434a <HAL_ADC_Init+0x1ba>
 800433c:	2300      	movs	r3, #0
 800433e:	e004      	b.n	800434a <HAL_ADC_Init+0x1ba>
 8004340:	2310      	movs	r3, #16
 8004342:	e002      	b.n	800434a <HAL_ADC_Init+0x1ba>
 8004344:	2308      	movs	r3, #8
 8004346:	e000      	b.n	800434a <HAL_ADC_Init+0x1ba>
 8004348:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800434a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004352:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e00e      	b.n	8004378 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7e5b      	ldrb	r3, [r3, #25]
 800435e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004364:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800436a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004372:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d106      	bne.n	8004390 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	3b01      	subs	r3, #1
 8004388:	045b      	lsls	r3, r3, #17
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_ADC_Init+0x2bc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d115      	bne.n	80043e2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_ADC_Init+0x2c8>)
 80043be:	4013      	ands	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	430b      	orrs	r3, r1
 80043c8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	611a      	str	r2, [r3, #16]
 80043e0:	e009      	b.n	80043f6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <HAL_ADC_Init+0x2cc>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fea1 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 8004400:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff feae 	bl	8004168 <LL_ADC_INJ_IsConversionOngoing>
 800440c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f040 808e 	bne.w	8004532 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 808a 	bne.w	8004532 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <HAL_ADC_Init+0x2bc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d11b      	bne.n	8004460 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7e1b      	ldrb	r3, [r3, #24]
 800442c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004434:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e018      	b.n	800446e <HAL_ADC_Init+0x2de>
 800443c:	24000000 	.word	0x24000000
 8004440:	053e2d63 	.word	0x053e2d63
 8004444:	40022000 	.word	0x40022000
 8004448:	40022100 	.word	0x40022100
 800444c:	58026000 	.word	0x58026000
 8004450:	40022300 	.word	0x40022300
 8004454:	58026300 	.word	0x58026300
 8004458:	fff04007 	.word	0xfff04007
 800445c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7e1b      	ldrb	r3, [r3, #24]
 8004464:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	4b46      	ldr	r3, [pc, #280]	; (8004590 <HAL_ADC_Init+0x400>)
 8004476:	4013      	ands	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	69b9      	ldr	r1, [r7, #24]
 800447e:	430b      	orrs	r3, r1
 8004480:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004488:	2b01      	cmp	r3, #1
 800448a:	d137      	bne.n	80044fc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3f      	ldr	r2, [pc, #252]	; (8004594 <HAL_ADC_Init+0x404>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d116      	bne.n	80044ca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_ADC_Init+0x408>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80044ae:	4311      	orrs	r1, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044b4:	4311      	orrs	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80044ba:	430a      	orrs	r2, r1
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	611a      	str	r2, [r3, #16]
 80044c8:	e020      	b.n	800450c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	4b32      	ldr	r3, [pc, #200]	; (800459c <HAL_ADC_Init+0x40c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044d8:	3a01      	subs	r2, #1
 80044da:	0411      	lsls	r1, r2, #16
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80044e0:	4311      	orrs	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044e6:	4311      	orrs	r1, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80044ec:	430a      	orrs	r2, r1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	611a      	str	r2, [r3, #16]
 80044fa:	e007      	b.n	800450c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_ADC_Init+0x404>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d002      	beq.n	8004532 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fd63 	bl	8004ff8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10c      	bne.n	8004554 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f023 010f 	bic.w	r1, r3, #15
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
 8004552:	e007      	b.n	8004564 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 020f 	bic.w	r2, r2, #15
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	f023 0303 	bic.w	r3, r3, #3
 800456c:	f043 0201 	orr.w	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	661a      	str	r2, [r3, #96]	; 0x60
 8004574:	e007      	b.n	8004586 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	f043 0210 	orr.w	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004586:	7ffb      	ldrb	r3, [r7, #31]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3724      	adds	r7, #36	; 0x24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd90      	pop	{r4, r7, pc}
 8004590:	ffffbffc 	.word	0xffffbffc
 8004594:	58026000 	.word	0x58026000
 8004598:	fc00f81f 	.word	0xfc00f81f
 800459c:	fc00f81e 	.word	0xfc00f81e

080045a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b0b9      	sub	sp, #228	; 0xe4
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ba:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4aa9      	ldr	r2, [pc, #676]	; (8004868 <HAL_ADC_ConfigChannel+0x2c8>)
 80045c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x34>
 80045ce:	2302      	movs	r3, #2
 80045d0:	f000 bcfa 	b.w	8004fc8 <HAL_ADC_ConfigChannel+0xa28>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fdae 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 84de 	bne.w	8004faa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a9e      	ldr	r2, [pc, #632]	; (800486c <HAL_ADC_ConfigChannel+0x2cc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d033      	beq.n	8004660 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004600:	2b00      	cmp	r3, #0
 8004602:	d108      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x76>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2201      	movs	r2, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	e01d      	b.n	8004652 <HAL_ADC_ConfigChannel+0xb2>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800462a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800462e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e004      	b.n	8004648 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800463e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2201      	movs	r2, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	69d1      	ldr	r1, [r2, #28]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	430b      	orrs	r3, r1
 800465e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	f7ff fc6f 	bl	8003f50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fd63 	bl	8004142 <LL_ADC_REG_IsConversionOngoing>
 800467c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fd6f 	bl	8004168 <LL_ADC_INJ_IsConversionOngoing>
 800468a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800468e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004692:	2b00      	cmp	r3, #0
 8004694:	f040 8270 	bne.w	8004b78 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 826b 	bne.w	8004b78 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f7ff fc7a 	bl	8003fa8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6c      	ldr	r2, [pc, #432]	; (800486c <HAL_ADC_ConfigChannel+0x2cc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10d      	bne.n	80046da <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046d8:	e032      	b.n	8004740 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046da:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_ADC_ConfigChannel+0x2d0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046e6:	d10b      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x160>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	e01d      	b.n	800473c <HAL_ADC_ConfigChannel+0x19c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x186>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	e00a      	b.n	800473c <HAL_ADC_ConfigChannel+0x19c>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d048      	beq.n	80047da <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6919      	ldr	r1, [r3, #16]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004758:	f7ff fb08 	bl	8003d6c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a42      	ldr	r2, [pc, #264]	; (800486c <HAL_ADC_ConfigChannel+0x2cc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d119      	bne.n	800479a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6919      	ldr	r1, [r3, #16]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	461a      	mov	r2, r3
 8004774:	f7ff fba0 	bl	8003eb8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6919      	ldr	r1, [r3, #16]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x1f0>
 800478a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800478e:	e000      	b.n	8004792 <HAL_ADC_ConfigChannel+0x1f2>
 8004790:	2300      	movs	r3, #0
 8004792:	461a      	mov	r2, r3
 8004794:	f7ff fb6e 	bl	8003e74 <LL_ADC_SetOffsetSaturation>
 8004798:	e1ee      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6919      	ldr	r1, [r3, #16]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d102      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x212>
 80047ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047b0:	e000      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x214>
 80047b2:	2300      	movs	r3, #0
 80047b4:	461a      	mov	r2, r3
 80047b6:	f7ff fb3b 	bl	8003e30 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6919      	ldr	r1, [r3, #16]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	7e1b      	ldrb	r3, [r3, #24]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d102      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x230>
 80047ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047ce:	e000      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x232>
 80047d0:	2300      	movs	r3, #0
 80047d2:	461a      	mov	r2, r3
 80047d4:	f7ff fb12 	bl	8003dfc <LL_ADC_SetDataRightShift>
 80047d8:	e1ce      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a23      	ldr	r2, [pc, #140]	; (800486c <HAL_ADC_ConfigChannel+0x2cc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	f040 8181 	bne.w	8004ae8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff faef 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x272>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2100      	movs	r1, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fae4 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	f003 021f 	and.w	r2, r3, #31
 8004810:	e01e      	b.n	8004850 <HAL_ADC_ConfigChannel+0x2b0>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fad9 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 800481e:	4603      	mov	r3, r0
 8004820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004834:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004838:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004840:	2320      	movs	r3, #32
 8004842:	e004      	b.n	800484e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x2d4>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	e01e      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x306>
 8004868:	47ff0000 	.word	0x47ff0000
 800486c:	58026000 	.word	0x58026000
 8004870:	5c001000 	.word	0x5c001000
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800488c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004898:	2320      	movs	r3, #32
 800489a:	e004      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800489c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d106      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fb22 	bl	8003efc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fa86 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x344>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fa7b 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 80048da:	4603      	mov	r3, r0
 80048dc:	0e9b      	lsrs	r3, r3, #26
 80048de:	f003 021f 	and.w	r2, r3, #31
 80048e2:	e01e      	b.n	8004922 <HAL_ADC_ConfigChannel+0x382>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fa70 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004902:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800490a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004912:	2320      	movs	r3, #32
 8004914:	e004      	b.n	8004920 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <HAL_ADC_ConfigChannel+0x39a>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	0e9b      	lsrs	r3, r3, #26
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	e018      	b.n	800496c <HAL_ADC_ConfigChannel+0x3cc>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800494e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004952:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004956:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800495e:	2320      	movs	r3, #32
 8004960:	e004      	b.n	800496c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	429a      	cmp	r2, r3
 800496e:	d106      	bne.n	800497e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	2101      	movs	r1, #1
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fabf 	bl	8003efc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2102      	movs	r1, #2
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fa23 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 800498a:	4603      	mov	r3, r0
 800498c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x40a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fa18 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 80049a0:	4603      	mov	r3, r0
 80049a2:	0e9b      	lsrs	r3, r3, #26
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	e01e      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x448>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2102      	movs	r1, #2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fa0d 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80049c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80049d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80049d8:	2320      	movs	r3, #32
 80049da:	e004      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80049dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x460>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	0e9b      	lsrs	r3, r3, #26
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	e014      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x48a>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	e004      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a24:	fab3 f383 	clz	r3, r3
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d106      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2102      	movs	r1, #2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fa60 	bl	8003efc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2103      	movs	r1, #3
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff f9c4 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x4c8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2103      	movs	r1, #3
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff f9b9 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	0e9b      	lsrs	r3, r3, #26
 8004a62:	f003 021f 	and.w	r2, r3, #31
 8004a66:	e017      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x4f8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff f9ae 	bl	8003dd0 <LL_ADC_GetOffsetChannel>
 8004a74:	4603      	mov	r3, r0
 8004a76:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a82:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	e003      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x510>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0e9b      	lsrs	r3, r3, #26
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	e011      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x534>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	e003      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d14f      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2103      	movs	r1, #3
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fa0b 	bl	8003efc <LL_ADC_SetOffsetState>
 8004ae6:	e047      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	069b      	lsls	r3, r3, #26
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d107      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b0a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	069b      	lsls	r3, r3, #26
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d107      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b2e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	069b      	lsls	r3, r3, #26
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d107      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b52:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	069b      	lsls	r3, r3, #26
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d107      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff facd 	bl	800411c <LL_ADC_IsEnabled>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 8219 	bne.w	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f7ff fa32 	bl	8004000 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4aa1      	ldr	r2, [pc, #644]	; (8004e28 <HAL_ADC_ConfigChannel+0x888>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	f040 812e 	bne.w	8004e04 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x630>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0e9b      	lsrs	r3, r3, #26
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2b09      	cmp	r3, #9
 8004bc6:	bf94      	ite	ls
 8004bc8:	2301      	movls	r3, #1
 8004bca:	2300      	movhi	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e019      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x664>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004be8:	2320      	movs	r3, #32
 8004bea:	e003      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	2b09      	cmp	r3, #9
 8004bfc:	bf94      	ite	ls
 8004bfe:	2301      	movls	r3, #1
 8004c00:	2300      	movhi	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d079      	beq.n	8004cfc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d107      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x684>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	0e9b      	lsrs	r3, r3, #26
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	069b      	lsls	r3, r3, #26
 8004c1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c22:	e015      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x6b0>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2c:	fa93 f3a3 	rbit	r3, r3
 8004c30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	e003      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	3301      	adds	r3, #1
 8004c4a:	069b      	lsls	r3, r3, #26
 8004c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x6d0>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	0e9b      	lsrs	r3, r3, #26
 8004c62:	3301      	adds	r3, #1
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2101      	movs	r1, #1
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	e017      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x700>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004c88:	2320      	movs	r3, #32
 8004c8a:	e003      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca0:	ea42 0103 	orr.w	r1, r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x726>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	0e9b      	lsrs	r3, r3, #26
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	f003 021f 	and.w	r2, r3, #31
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4413      	add	r3, r2
 8004cc2:	051b      	lsls	r3, r3, #20
 8004cc4:	e018      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x758>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	fa93 f3a3 	rbit	r3, r3
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004cde:	2320      	movs	r3, #32
 8004ce0:	e003      	b.n	8004cea <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	fab3 f383 	clz	r3, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	f003 021f 	and.w	r2, r3, #31
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	e07e      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d107      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x778>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0e9b      	lsrs	r3, r3, #26
 8004d0e:	3301      	adds	r3, #1
 8004d10:	069b      	lsls	r3, r3, #26
 8004d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d16:	e015      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x7a4>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	fa93 f3a3 	rbit	r3, r3
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004d30:	2320      	movs	r3, #32
 8004d32:	e003      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	fab3 f383 	clz	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	069b      	lsls	r3, r3, #26
 8004d40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x7c4>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0e9b      	lsrs	r3, r3, #26
 8004d56:	3301      	adds	r3, #1
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d62:	e017      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x7f4>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	61bb      	str	r3, [r7, #24]
  return result;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	e003      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	2101      	movs	r1, #1
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	ea42 0103 	orr.w	r1, r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10d      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x820>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	0e9b      	lsrs	r3, r3, #26
 8004daa:	3301      	adds	r3, #1
 8004dac:	f003 021f 	and.w	r2, r3, #31
 8004db0:	4613      	mov	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	3b1e      	subs	r3, #30
 8004db8:	051b      	lsls	r3, r3, #20
 8004dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	e01b      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x858>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	fa93 f3a3 	rbit	r3, r3
 8004dcc:	60fb      	str	r3, [r7, #12]
  return result;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004dd8:	2320      	movs	r3, #32
 8004dda:	e003      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	fab3 f383 	clz	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	3301      	adds	r3, #1
 8004de6:	f003 021f 	and.w	r2, r3, #31
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	3b1e      	subs	r3, #30
 8004df2:	051b      	lsls	r3, r3, #20
 8004df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	6892      	ldr	r2, [r2, #8]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f7ff f8d2 	bl	8003fa8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f280 80d7 	bge.w	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a06      	ldr	r2, [pc, #24]	; (8004e2c <HAL_ADC_ConfigChannel+0x88c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_ADC_ConfigChannel+0x882>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <HAL_ADC_ConfigChannel+0x890>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10a      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x898>
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <HAL_ADC_ConfigChannel+0x894>)
 8004e24:	e009      	b.n	8004e3a <HAL_ADC_ConfigChannel+0x89a>
 8004e26:	bf00      	nop
 8004e28:	47ff0000 	.word	0x47ff0000
 8004e2c:	40022000 	.word	0x40022000
 8004e30:	40022100 	.word	0x40022100
 8004e34:	40022300 	.word	0x40022300
 8004e38:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe ff88 	bl	8003d50 <LL_ADC_GetCommonPathInternalCh>
 8004e40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a62      	ldr	r2, [pc, #392]	; (8004fd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_ADC_ConfigChannel+0x8b8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a61      	ldr	r2, [pc, #388]	; (8004fd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10e      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x8d6>
 8004e58:	485e      	ldr	r0, [pc, #376]	; (8004fd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004e5a:	f7ff f95f 	bl	800411c <LL_ADC_IsEnabled>
 8004e5e:	4604      	mov	r4, r0
 8004e60:	485d      	ldr	r0, [pc, #372]	; (8004fd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004e62:	f7ff f95b 	bl	800411c <LL_ADC_IsEnabled>
 8004e66:	4603      	mov	r3, r0
 8004e68:	4323      	orrs	r3, r4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e008      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x8e8>
 8004e76:	4859      	ldr	r0, [pc, #356]	; (8004fdc <HAL_ADC_ConfigChannel+0xa3c>)
 8004e78:	f7ff f950 	bl	800411c <LL_ADC_IsEnabled>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bf0c      	ite	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	2300      	movne	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8084 	beq.w	8004f96 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a53      	ldr	r2, [pc, #332]	; (8004fe0 <HAL_ADC_ConfigChannel+0xa40>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d132      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x95e>
 8004e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d12c      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4c      	ldr	r2, [pc, #304]	; (8004fdc <HAL_ADC_ConfigChannel+0xa3c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	f040 8086 	bne.w	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a47      	ldr	r2, [pc, #284]	; (8004fd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_ADC_ConfigChannel+0x924>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a46      	ldr	r2, [pc, #280]	; (8004fd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x928>
 8004ec4:	4a47      	ldr	r2, [pc, #284]	; (8004fe4 <HAL_ADC_ConfigChannel+0xa44>)
 8004ec6:	e000      	b.n	8004eca <HAL_ADC_ConfigChannel+0x92a>
 8004ec8:	4a41      	ldr	r2, [pc, #260]	; (8004fd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004eca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ece:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f7fe ff28 	bl	8003d2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eda:	4b43      	ldr	r3, [pc, #268]	; (8004fe8 <HAL_ADC_ConfigChannel+0xa48>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	4a42      	ldr	r2, [pc, #264]	; (8004fec <HAL_ADC_ConfigChannel+0xa4c>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	3301      	adds	r3, #1
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004eee:	e002      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f9      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004efc:	e05e      	b.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3b      	ldr	r2, [pc, #236]	; (8004ff0 <HAL_ADC_ConfigChannel+0xa50>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d120      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x9aa>
 8004f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11a      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a30      	ldr	r2, [pc, #192]	; (8004fdc <HAL_ADC_ConfigChannel+0xa3c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d14e      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_ADC_ConfigChannel+0x992>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x996>
 8004f32:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <HAL_ADC_ConfigChannel+0xa44>)
 8004f34:	e000      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x998>
 8004f36:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7fe fef1 	bl	8003d2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f48:	e038      	b.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a29      	ldr	r2, [pc, #164]	; (8004ff4 <HAL_ADC_ConfigChannel+0xa54>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d133      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
 8004f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d12d      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_ADC_ConfigChannel+0xa3c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d128      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a19      	ldr	r2, [pc, #100]	; (8004fd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_ADC_ConfigChannel+0x9de>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x9e2>
 8004f7e:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_ADC_ConfigChannel+0xa44>)
 8004f80:	e000      	b.n	8004f84 <HAL_ADC_ConfigChannel+0x9e4>
 8004f82:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f7fe fecb 	bl	8003d2a <LL_ADC_SetCommonPathInternalCh>
 8004f94:	e012      	b.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004fa8:	e008      	b.n	8004fbc <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004fc4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	37e4      	adds	r7, #228	; 0xe4
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}
 8004fd0:	58026300 	.word	0x58026300
 8004fd4:	40022000 	.word	0x40022000
 8004fd8:	40022100 	.word	0x40022100
 8004fdc:	58026000 	.word	0x58026000
 8004fe0:	c7520000 	.word	0xc7520000
 8004fe4:	40022300 	.word	0x40022300
 8004fe8:	24000000 	.word	0x24000000
 8004fec:	053e2d63 	.word	0x053e2d63
 8004ff0:	c3210000 	.word	0xc3210000
 8004ff4:	cb840000 	.word	0xcb840000

08004ff8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a6c      	ldr	r2, [pc, #432]	; (80051b8 <ADC_ConfigureBoostMode+0x1c0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <ADC_ConfigureBoostMode+0x1c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6b      	ldr	r2, [pc, #428]	; (80051bc <ADC_ConfigureBoostMode+0x1c4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d109      	bne.n	8005028 <ADC_ConfigureBoostMode+0x30>
 8005014:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <ADC_ConfigureBoostMode+0x1c8>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e008      	b.n	800503a <ADC_ConfigureBoostMode+0x42>
 8005028:	4b66      	ldr	r3, [pc, #408]	; (80051c4 <ADC_ConfigureBoostMode+0x1cc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01c      	beq.n	8005078 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800503e:	f005 fcab 	bl	800a998 <HAL_RCC_GetHCLKFreq>
 8005042:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800504c:	d010      	beq.n	8005070 <ADC_ConfigureBoostMode+0x78>
 800504e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005052:	d873      	bhi.n	800513c <ADC_ConfigureBoostMode+0x144>
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005058:	d002      	beq.n	8005060 <ADC_ConfigureBoostMode+0x68>
 800505a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800505e:	d16d      	bne.n	800513c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	60fb      	str	r3, [r7, #12]
        break;
 800506e:	e068      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	60fb      	str	r3, [r7, #12]
        break;
 8005076:	e064      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005078:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	f006 fe86 	bl	800bd90 <HAL_RCCEx_GetPeriphCLKFreq>
 8005084:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800508e:	d051      	beq.n	8005134 <ADC_ConfigureBoostMode+0x13c>
 8005090:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005094:	d854      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 8005096:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800509a:	d047      	beq.n	800512c <ADC_ConfigureBoostMode+0x134>
 800509c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050a0:	d84e      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050a6:	d03d      	beq.n	8005124 <ADC_ConfigureBoostMode+0x12c>
 80050a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050ac:	d848      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050b2:	d033      	beq.n	800511c <ADC_ConfigureBoostMode+0x124>
 80050b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050b8:	d842      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050be:	d029      	beq.n	8005114 <ADC_ConfigureBoostMode+0x11c>
 80050c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050c4:	d83c      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050ca:	d01a      	beq.n	8005102 <ADC_ConfigureBoostMode+0x10a>
 80050cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050d0:	d836      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80050d6:	d014      	beq.n	8005102 <ADC_ConfigureBoostMode+0x10a>
 80050d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80050dc:	d830      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e2:	d00e      	beq.n	8005102 <ADC_ConfigureBoostMode+0x10a>
 80050e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e8:	d82a      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050ee:	d008      	beq.n	8005102 <ADC_ConfigureBoostMode+0x10a>
 80050f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050f4:	d824      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x148>
 80050f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050fa:	d002      	beq.n	8005102 <ADC_ConfigureBoostMode+0x10a>
 80050fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005100:	d11e      	bne.n	8005140 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	0c9b      	lsrs	r3, r3, #18
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005110:	60fb      	str	r3, [r7, #12]
        break;
 8005112:	e016      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	60fb      	str	r3, [r7, #12]
        break;
 800511a:	e012      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	60fb      	str	r3, [r7, #12]
        break;
 8005122:	e00e      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	60fb      	str	r3, [r7, #12]
        break;
 800512a:	e00a      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]
        break;
 8005132:	e006      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	60fb      	str	r3, [r7, #12]
        break;
 800513a:	e002      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
        break;
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005140:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <ADC_ConfigureBoostMode+0x1d0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d808      	bhi.n	8005162 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800515e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005160:	e025      	b.n	80051ae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <ADC_ConfigureBoostMode+0x1d4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d80a      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517c:	609a      	str	r2, [r3, #8]
}
 800517e:	e016      	b.n	80051ae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <ADC_ConfigureBoostMode+0x1d8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d80a      	bhi.n	800519e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	e007      	b.n	80051ae <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80051ac:	609a      	str	r2, [r3, #8]
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40022000 	.word	0x40022000
 80051bc:	40022100 	.word	0x40022100
 80051c0:	40022300 	.word	0x40022300
 80051c4:	58026300 	.word	0x58026300
 80051c8:	005f5e10 	.word	0x005f5e10
 80051cc:	00bebc20 	.word	0x00bebc20
 80051d0:	017d7840 	.word	0x017d7840

080051d4 <LL_ADC_IsEnabled>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <LL_ADC_IsEnabled+0x18>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <LL_ADC_IsEnabled+0x1a>
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <LL_ADC_REG_IsConversionOngoing>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b04      	cmp	r3, #4
 800520c:	d101      	bne.n	8005212 <LL_ADC_REG_IsConversionOngoing+0x18>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005220:	b590      	push	{r4, r7, lr}
 8005222:	b0a3      	sub	sp, #140	; 0x8c
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800523a:	2302      	movs	r3, #2
 800523c:	e0c1      	b.n	80053c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800524a:	2300      	movs	r3, #0
 800524c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a5e      	ldr	r2, [pc, #376]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d102      	bne.n	800525e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005258:	4b5d      	ldr	r3, [pc, #372]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e001      	b.n	8005262 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0a0      	b.n	80053c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff ffb9 	bl	80051fa <LL_ADC_REG_IsConversionOngoing>
 8005288:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ffb2 	bl	80051fa <LL_ADC_REG_IsConversionOngoing>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 8081 	bne.w	80053a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800529e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d17c      	bne.n	80053a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a48      	ldr	r2, [pc, #288]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a46      	ldr	r2, [pc, #280]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80052bc:	e000      	b.n	80052c0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80052be:	4b46      	ldr	r3, [pc, #280]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80052c0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d039      	beq.n	800533e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80052ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a3a      	ldr	r2, [pc, #232]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a39      	ldr	r2, [pc, #228]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10e      	bne.n	800530e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80052f0:	4836      	ldr	r0, [pc, #216]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052f2:	f7ff ff6f 	bl	80051d4 <LL_ADC_IsEnabled>
 80052f6:	4604      	mov	r4, r0
 80052f8:	4835      	ldr	r0, [pc, #212]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052fa:	f7ff ff6b 	bl	80051d4 <LL_ADC_IsEnabled>
 80052fe:	4603      	mov	r3, r0
 8005300:	4323      	orrs	r3, r4
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e008      	b.n	8005320 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800530e:	4833      	ldr	r0, [pc, #204]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005310:	f7ff ff60 	bl	80051d4 <LL_ADC_IsEnabled>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	bf0c      	ite	eq
 800531a:	2301      	moveq	r3, #1
 800531c:	2300      	movne	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d047      	beq.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	4b2d      	ldr	r3, [pc, #180]	; (80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800532a:	4013      	ands	r3, r2
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	6811      	ldr	r1, [r2, #0]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	430a      	orrs	r2, r1
 8005336:	431a      	orrs	r2, r3
 8005338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800533a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800533c:	e03a      	b.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800533e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005348:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10e      	bne.n	800537c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800535e:	481b      	ldr	r0, [pc, #108]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005360:	f7ff ff38 	bl	80051d4 <LL_ADC_IsEnabled>
 8005364:	4604      	mov	r4, r0
 8005366:	481a      	ldr	r0, [pc, #104]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005368:	f7ff ff34 	bl	80051d4 <LL_ADC_IsEnabled>
 800536c:	4603      	mov	r3, r0
 800536e:	4323      	orrs	r3, r4
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e008      	b.n	800538e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800537c:	4817      	ldr	r0, [pc, #92]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800537e:	f7ff ff29 	bl	80051d4 <LL_ADC_IsEnabled>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005392:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005398:	4013      	ands	r3, r2
 800539a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800539c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800539e:	e009      	b.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80053b2:	e000      	b.n	80053b6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80053be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	378c      	adds	r7, #140	; 0x8c
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd90      	pop	{r4, r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40022100 	.word	0x40022100
 80053d4:	40022300 	.word	0x40022300
 80053d8:	58026300 	.word	0x58026300
 80053dc:	58026000 	.word	0x58026000
 80053e0:	fffff0e0 	.word	0xfffff0e0

080053e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <__NVIC_SetPriorityGrouping+0x40>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005400:	4013      	ands	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <__NVIC_SetPriorityGrouping+0x44>)
 800540e:	4313      	orrs	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005412:	4a04      	ldr	r2, [pc, #16]	; (8005424 <__NVIC_SetPriorityGrouping+0x40>)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	60d3      	str	r3, [r2, #12]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000ed00 	.word	0xe000ed00
 8005428:	05fa0000 	.word	0x05fa0000

0800542c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <__NVIC_GetPriorityGrouping+0x18>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	f003 0307 	and.w	r3, r3, #7
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	e000ed00 	.word	0xe000ed00

08005448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db0b      	blt.n	8005472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	f003 021f 	and.w	r2, r3, #31
 8005460:	4907      	ldr	r1, [pc, #28]	; (8005480 <__NVIC_EnableIRQ+0x38>)
 8005462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2001      	movs	r0, #1
 800546a:	fa00 f202 	lsl.w	r2, r0, r2
 800546e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000e100 	.word	0xe000e100

08005484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	db0a      	blt.n	80054ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	490c      	ldr	r1, [pc, #48]	; (80054d0 <__NVIC_SetPriority+0x4c>)
 800549e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	440b      	add	r3, r1
 80054a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054ac:	e00a      	b.n	80054c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4908      	ldr	r1, [pc, #32]	; (80054d4 <__NVIC_SetPriority+0x50>)
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	3b04      	subs	r3, #4
 80054bc:	0112      	lsls	r2, r2, #4
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	440b      	add	r3, r1
 80054c2:	761a      	strb	r2, [r3, #24]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000e100 	.word	0xe000e100
 80054d4:	e000ed00 	.word	0xe000ed00

080054d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f1c3 0307 	rsb	r3, r3, #7
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf28      	it	cs
 80054f6:	2304      	movcs	r3, #4
 80054f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d902      	bls.n	8005508 <NVIC_EncodePriority+0x30>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3b03      	subs	r3, #3
 8005506:	e000      	b.n	800550a <NVIC_EncodePriority+0x32>
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	401a      	ands	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005520:	f04f 31ff 	mov.w	r1, #4294967295
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	43d9      	mvns	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005530:	4313      	orrs	r3, r2
         );
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005550:	d301      	bcc.n	8005556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005552:	2301      	movs	r3, #1
 8005554:	e00f      	b.n	8005576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <SysTick_Config+0x40>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555e:	210f      	movs	r1, #15
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	f7ff ff8e 	bl	8005484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <SysTick_Config+0x40>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <SysTick_Config+0x40>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff29 	bl	80053e4 <__NVIC_SetPriorityGrouping>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055a8:	f7ff ff40 	bl	800542c <__NVIC_GetPriorityGrouping>
 80055ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f7ff ff90 	bl	80054d8 <NVIC_EncodePriority>
 80055b8:	4602      	mov	r2, r0
 80055ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff ff5f 	bl	8005484 <__NVIC_SetPriority>
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	4603      	mov	r3, r0
 80055d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ff33 	bl	8005448 <__NVIC_EnableIRQ>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ffa4 	bl	8005540 <SysTick_Config>
 80055f8:	4603      	mov	r3, r0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800560c:	f7fe fb34 	bl	8003c78 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e312      	b.n	8005c42 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a66      	ldr	r2, [pc, #408]	; (80057bc <HAL_DMA_Init+0x1b8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d04a      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a65      	ldr	r2, [pc, #404]	; (80057c0 <HAL_DMA_Init+0x1bc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d045      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a63      	ldr	r2, [pc, #396]	; (80057c4 <HAL_DMA_Init+0x1c0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d040      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a62      	ldr	r2, [pc, #392]	; (80057c8 <HAL_DMA_Init+0x1c4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d03b      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a60      	ldr	r2, [pc, #384]	; (80057cc <HAL_DMA_Init+0x1c8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d036      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a5f      	ldr	r2, [pc, #380]	; (80057d0 <HAL_DMA_Init+0x1cc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d031      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a5d      	ldr	r2, [pc, #372]	; (80057d4 <HAL_DMA_Init+0x1d0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d02c      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a5c      	ldr	r2, [pc, #368]	; (80057d8 <HAL_DMA_Init+0x1d4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d027      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5a      	ldr	r2, [pc, #360]	; (80057dc <HAL_DMA_Init+0x1d8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d022      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a59      	ldr	r2, [pc, #356]	; (80057e0 <HAL_DMA_Init+0x1dc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d01d      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a57      	ldr	r2, [pc, #348]	; (80057e4 <HAL_DMA_Init+0x1e0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d018      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a56      	ldr	r2, [pc, #344]	; (80057e8 <HAL_DMA_Init+0x1e4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a54      	ldr	r2, [pc, #336]	; (80057ec <HAL_DMA_Init+0x1e8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00e      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a53      	ldr	r2, [pc, #332]	; (80057f0 <HAL_DMA_Init+0x1ec>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a51      	ldr	r2, [pc, #324]	; (80057f4 <HAL_DMA_Init+0x1f0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_DMA_Init+0xb8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a50      	ldr	r2, [pc, #320]	; (80057f8 <HAL_DMA_Init+0x1f4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d101      	bne.n	80056c0 <HAL_DMA_Init+0xbc>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_DMA_Init+0xbe>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 813c 	beq.w	8005940 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a37      	ldr	r2, [pc, #220]	; (80057bc <HAL_DMA_Init+0x1b8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04a      	beq.n	8005778 <HAL_DMA_Init+0x174>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a36      	ldr	r2, [pc, #216]	; (80057c0 <HAL_DMA_Init+0x1bc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d045      	beq.n	8005778 <HAL_DMA_Init+0x174>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a34      	ldr	r2, [pc, #208]	; (80057c4 <HAL_DMA_Init+0x1c0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d040      	beq.n	8005778 <HAL_DMA_Init+0x174>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a33      	ldr	r2, [pc, #204]	; (80057c8 <HAL_DMA_Init+0x1c4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d03b      	beq.n	8005778 <HAL_DMA_Init+0x174>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a31      	ldr	r2, [pc, #196]	; (80057cc <HAL_DMA_Init+0x1c8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d036      	beq.n	8005778 <HAL_DMA_Init+0x174>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a30      	ldr	r2, [pc, #192]	; (80057d0 <HAL_DMA_Init+0x1cc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d031      	beq.n	8005778 <HAL_DMA_Init+0x174>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a2e      	ldr	r2, [pc, #184]	; (80057d4 <HAL_DMA_Init+0x1d0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02c      	beq.n	8005778 <HAL_DMA_Init+0x174>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <HAL_DMA_Init+0x1d4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d027      	beq.n	8005778 <HAL_DMA_Init+0x174>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <HAL_DMA_Init+0x1d8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <HAL_DMA_Init+0x174>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <HAL_DMA_Init+0x1dc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01d      	beq.n	8005778 <HAL_DMA_Init+0x174>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <HAL_DMA_Init+0x1e0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_DMA_Init+0x174>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <HAL_DMA_Init+0x1e4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <HAL_DMA_Init+0x174>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a25      	ldr	r2, [pc, #148]	; (80057ec <HAL_DMA_Init+0x1e8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_DMA_Init+0x174>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <HAL_DMA_Init+0x1ec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_DMA_Init+0x174>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_DMA_Init+0x1f0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_DMA_Init+0x174>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a21      	ldr	r2, [pc, #132]	; (80057f8 <HAL_DMA_Init+0x1f4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <HAL_DMA_Init+0x186>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e007      	b.n	800579a <HAL_DMA_Init+0x196>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800579a:	e02f      	b.n	80057fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800579c:	f7fe fa6c 	bl	8003c78 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d928      	bls.n	80057fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2203      	movs	r2, #3
 80057b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e242      	b.n	8005c42 <HAL_DMA_Init+0x63e>
 80057bc:	40020010 	.word	0x40020010
 80057c0:	40020028 	.word	0x40020028
 80057c4:	40020040 	.word	0x40020040
 80057c8:	40020058 	.word	0x40020058
 80057cc:	40020070 	.word	0x40020070
 80057d0:	40020088 	.word	0x40020088
 80057d4:	400200a0 	.word	0x400200a0
 80057d8:	400200b8 	.word	0x400200b8
 80057dc:	40020410 	.word	0x40020410
 80057e0:	40020428 	.word	0x40020428
 80057e4:	40020440 	.word	0x40020440
 80057e8:	40020458 	.word	0x40020458
 80057ec:	40020470 	.word	0x40020470
 80057f0:	40020488 	.word	0x40020488
 80057f4:	400204a0 	.word	0x400204a0
 80057f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1c8      	bne.n	800579c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4b83      	ldr	r3, [pc, #524]	; (8005a24 <HAL_DMA_Init+0x420>)
 8005816:	4013      	ands	r3, r2
 8005818:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005822:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800583a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2b04      	cmp	r3, #4
 800584e:	d107      	bne.n	8005860 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	4313      	orrs	r3, r2
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b28      	cmp	r3, #40	; 0x28
 8005866:	d903      	bls.n	8005870 <HAL_DMA_Init+0x26c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b2e      	cmp	r3, #46	; 0x2e
 800586e:	d91f      	bls.n	80058b0 <HAL_DMA_Init+0x2ac>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b3e      	cmp	r3, #62	; 0x3e
 8005876:	d903      	bls.n	8005880 <HAL_DMA_Init+0x27c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b42      	cmp	r3, #66	; 0x42
 800587e:	d917      	bls.n	80058b0 <HAL_DMA_Init+0x2ac>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b46      	cmp	r3, #70	; 0x46
 8005886:	d903      	bls.n	8005890 <HAL_DMA_Init+0x28c>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b48      	cmp	r3, #72	; 0x48
 800588e:	d90f      	bls.n	80058b0 <HAL_DMA_Init+0x2ac>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b4e      	cmp	r3, #78	; 0x4e
 8005896:	d903      	bls.n	80058a0 <HAL_DMA_Init+0x29c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b52      	cmp	r3, #82	; 0x52
 800589e:	d907      	bls.n	80058b0 <HAL_DMA_Init+0x2ac>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b73      	cmp	r3, #115	; 0x73
 80058a6:	d905      	bls.n	80058b4 <HAL_DMA_Init+0x2b0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b77      	cmp	r3, #119	; 0x77
 80058ae:	d801      	bhi.n	80058b4 <HAL_DMA_Init+0x2b0>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <HAL_DMA_Init+0x2b2>
 80058b4:	2300      	movs	r3, #0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d117      	bne.n	800591c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 fdca 	bl	8007498 <DMA_CheckFifoParam>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e192      	b.n	8005c42 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fd05 	bl	8007334 <DMA_CalcBaseAndBitshift>
 800592a:	4603      	mov	r3, r0
 800592c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	223f      	movs	r2, #63	; 0x3f
 8005938:	409a      	lsls	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	609a      	str	r2, [r3, #8]
 800593e:	e0c8      	b.n	8005ad2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a38      	ldr	r2, [pc, #224]	; (8005a28 <HAL_DMA_Init+0x424>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d022      	beq.n	8005990 <HAL_DMA_Init+0x38c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a37      	ldr	r2, [pc, #220]	; (8005a2c <HAL_DMA_Init+0x428>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d01d      	beq.n	8005990 <HAL_DMA_Init+0x38c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <HAL_DMA_Init+0x42c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_DMA_Init+0x38c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a34      	ldr	r2, [pc, #208]	; (8005a34 <HAL_DMA_Init+0x430>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <HAL_DMA_Init+0x38c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a32      	ldr	r2, [pc, #200]	; (8005a38 <HAL_DMA_Init+0x434>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_DMA_Init+0x38c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a31      	ldr	r2, [pc, #196]	; (8005a3c <HAL_DMA_Init+0x438>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_DMA_Init+0x38c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <HAL_DMA_Init+0x43c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_DMA_Init+0x38c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2e      	ldr	r2, [pc, #184]	; (8005a44 <HAL_DMA_Init+0x440>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <HAL_DMA_Init+0x390>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <HAL_DMA_Init+0x392>
 8005994:	2300      	movs	r3, #0
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8092 	beq.w	8005ac0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a21      	ldr	r2, [pc, #132]	; (8005a28 <HAL_DMA_Init+0x424>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d021      	beq.n	80059ea <HAL_DMA_Init+0x3e6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a20      	ldr	r2, [pc, #128]	; (8005a2c <HAL_DMA_Init+0x428>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01c      	beq.n	80059ea <HAL_DMA_Init+0x3e6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <HAL_DMA_Init+0x42c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d017      	beq.n	80059ea <HAL_DMA_Init+0x3e6>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_DMA_Init+0x430>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d012      	beq.n	80059ea <HAL_DMA_Init+0x3e6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1b      	ldr	r2, [pc, #108]	; (8005a38 <HAL_DMA_Init+0x434>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00d      	beq.n	80059ea <HAL_DMA_Init+0x3e6>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1a      	ldr	r2, [pc, #104]	; (8005a3c <HAL_DMA_Init+0x438>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d008      	beq.n	80059ea <HAL_DMA_Init+0x3e6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <HAL_DMA_Init+0x43c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <HAL_DMA_Init+0x3e6>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_DMA_Init+0x440>)
 80059e8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <HAL_DMA_Init+0x444>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d01c      	beq.n	8005a4c <HAL_DMA_Init+0x448>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d102      	bne.n	8005a20 <HAL_DMA_Init+0x41c>
 8005a1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a1e:	e016      	b.n	8005a4e <HAL_DMA_Init+0x44a>
 8005a20:	2300      	movs	r3, #0
 8005a22:	e014      	b.n	8005a4e <HAL_DMA_Init+0x44a>
 8005a24:	fe10803f 	.word	0xfe10803f
 8005a28:	58025408 	.word	0x58025408
 8005a2c:	5802541c 	.word	0x5802541c
 8005a30:	58025430 	.word	0x58025430
 8005a34:	58025444 	.word	0x58025444
 8005a38:	58025458 	.word	0x58025458
 8005a3c:	5802546c 	.word	0x5802546c
 8005a40:	58025480 	.word	0x58025480
 8005a44:	58025494 	.word	0x58025494
 8005a48:	fffe000f 	.word	0xfffe000f
 8005a4c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68d2      	ldr	r2, [r2, #12]
 8005a52:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a7c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b6e      	ldr	r3, [pc, #440]	; (8005c4c <HAL_DMA_Init+0x648>)
 8005a94:	4413      	add	r3, r2
 8005a96:	4a6e      	ldr	r2, [pc, #440]	; (8005c50 <HAL_DMA_Init+0x64c>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	009a      	lsls	r2, r3, #2
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 fc45 	bl	8007334 <DMA_CalcBaseAndBitshift>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	e008      	b.n	8005ad2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	; 0x40
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e0b7      	b.n	8005c42 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a5f      	ldr	r2, [pc, #380]	; (8005c54 <HAL_DMA_Init+0x650>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d072      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a5d      	ldr	r2, [pc, #372]	; (8005c58 <HAL_DMA_Init+0x654>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d06d      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a5c      	ldr	r2, [pc, #368]	; (8005c5c <HAL_DMA_Init+0x658>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d068      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a5a      	ldr	r2, [pc, #360]	; (8005c60 <HAL_DMA_Init+0x65c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d063      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a59      	ldr	r2, [pc, #356]	; (8005c64 <HAL_DMA_Init+0x660>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d05e      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a57      	ldr	r2, [pc, #348]	; (8005c68 <HAL_DMA_Init+0x664>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d059      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a56      	ldr	r2, [pc, #344]	; (8005c6c <HAL_DMA_Init+0x668>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d054      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a54      	ldr	r2, [pc, #336]	; (8005c70 <HAL_DMA_Init+0x66c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04f      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a53      	ldr	r2, [pc, #332]	; (8005c74 <HAL_DMA_Init+0x670>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04a      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a51      	ldr	r2, [pc, #324]	; (8005c78 <HAL_DMA_Init+0x674>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d045      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a50      	ldr	r2, [pc, #320]	; (8005c7c <HAL_DMA_Init+0x678>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d040      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a4e      	ldr	r2, [pc, #312]	; (8005c80 <HAL_DMA_Init+0x67c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d03b      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a4d      	ldr	r2, [pc, #308]	; (8005c84 <HAL_DMA_Init+0x680>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d036      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a4b      	ldr	r2, [pc, #300]	; (8005c88 <HAL_DMA_Init+0x684>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a4a      	ldr	r2, [pc, #296]	; (8005c8c <HAL_DMA_Init+0x688>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02c      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a48      	ldr	r2, [pc, #288]	; (8005c90 <HAL_DMA_Init+0x68c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d027      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a47      	ldr	r2, [pc, #284]	; (8005c94 <HAL_DMA_Init+0x690>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a45      	ldr	r2, [pc, #276]	; (8005c98 <HAL_DMA_Init+0x694>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a44      	ldr	r2, [pc, #272]	; (8005c9c <HAL_DMA_Init+0x698>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a42      	ldr	r2, [pc, #264]	; (8005ca0 <HAL_DMA_Init+0x69c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a41      	ldr	r2, [pc, #260]	; (8005ca4 <HAL_DMA_Init+0x6a0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a3f      	ldr	r2, [pc, #252]	; (8005ca8 <HAL_DMA_Init+0x6a4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a3e      	ldr	r2, [pc, #248]	; (8005cac <HAL_DMA_Init+0x6a8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_DMA_Init+0x5be>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <HAL_DMA_Init+0x6ac>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DMA_Init+0x5c2>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_DMA_Init+0x5c4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d032      	beq.n	8005c32 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 fcdf 	bl	8007590 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b80      	cmp	r3, #128	; 0x80
 8005bd8:	d102      	bne.n	8005be0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bf4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_DMA_Init+0x61c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d80c      	bhi.n	8005c20 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 fd5c 	bl	80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	e008      	b.n	8005c32 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	a7fdabf8 	.word	0xa7fdabf8
 8005c50:	cccccccd 	.word	0xcccccccd
 8005c54:	40020010 	.word	0x40020010
 8005c58:	40020028 	.word	0x40020028
 8005c5c:	40020040 	.word	0x40020040
 8005c60:	40020058 	.word	0x40020058
 8005c64:	40020070 	.word	0x40020070
 8005c68:	40020088 	.word	0x40020088
 8005c6c:	400200a0 	.word	0x400200a0
 8005c70:	400200b8 	.word	0x400200b8
 8005c74:	40020410 	.word	0x40020410
 8005c78:	40020428 	.word	0x40020428
 8005c7c:	40020440 	.word	0x40020440
 8005c80:	40020458 	.word	0x40020458
 8005c84:	40020470 	.word	0x40020470
 8005c88:	40020488 	.word	0x40020488
 8005c8c:	400204a0 	.word	0x400204a0
 8005c90:	400204b8 	.word	0x400204b8
 8005c94:	58025408 	.word	0x58025408
 8005c98:	5802541c 	.word	0x5802541c
 8005c9c:	58025430 	.word	0x58025430
 8005ca0:	58025444 	.word	0x58025444
 8005ca4:	58025458 	.word	0x58025458
 8005ca8:	5802546c 	.word	0x5802546c
 8005cac:	58025480 	.word	0x58025480
 8005cb0:	58025494 	.word	0x58025494

08005cb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e226      	b.n	800611e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_DMA_Start_IT+0x2a>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e21f      	b.n	800611e <HAL_DMA_Start_IT+0x46a>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	f040 820a 	bne.w	8006108 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a68      	ldr	r2, [pc, #416]	; (8005ea8 <HAL_DMA_Start_IT+0x1f4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d04a      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a66      	ldr	r2, [pc, #408]	; (8005eac <HAL_DMA_Start_IT+0x1f8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d045      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a65      	ldr	r2, [pc, #404]	; (8005eb0 <HAL_DMA_Start_IT+0x1fc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d040      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a63      	ldr	r2, [pc, #396]	; (8005eb4 <HAL_DMA_Start_IT+0x200>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d03b      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a62      	ldr	r2, [pc, #392]	; (8005eb8 <HAL_DMA_Start_IT+0x204>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d036      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a60      	ldr	r2, [pc, #384]	; (8005ebc <HAL_DMA_Start_IT+0x208>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5f      	ldr	r2, [pc, #380]	; (8005ec0 <HAL_DMA_Start_IT+0x20c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d02c      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5d      	ldr	r2, [pc, #372]	; (8005ec4 <HAL_DMA_Start_IT+0x210>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d027      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a5c      	ldr	r2, [pc, #368]	; (8005ec8 <HAL_DMA_Start_IT+0x214>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d022      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5a      	ldr	r2, [pc, #360]	; (8005ecc <HAL_DMA_Start_IT+0x218>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a59      	ldr	r2, [pc, #356]	; (8005ed0 <HAL_DMA_Start_IT+0x21c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d018      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a57      	ldr	r2, [pc, #348]	; (8005ed4 <HAL_DMA_Start_IT+0x220>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	; (8005ed8 <HAL_DMA_Start_IT+0x224>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a54      	ldr	r2, [pc, #336]	; (8005edc <HAL_DMA_Start_IT+0x228>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a53      	ldr	r2, [pc, #332]	; (8005ee0 <HAL_DMA_Start_IT+0x22c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_Start_IT+0xee>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a51      	ldr	r2, [pc, #324]	; (8005ee4 <HAL_DMA_Start_IT+0x230>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d108      	bne.n	8005db4 <HAL_DMA_Start_IT+0x100>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e007      	b.n	8005dc4 <HAL_DMA_Start_IT+0x110>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f001 f906 	bl	8006fdc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a34      	ldr	r2, [pc, #208]	; (8005ea8 <HAL_DMA_Start_IT+0x1f4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d04a      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a33      	ldr	r2, [pc, #204]	; (8005eac <HAL_DMA_Start_IT+0x1f8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d045      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a31      	ldr	r2, [pc, #196]	; (8005eb0 <HAL_DMA_Start_IT+0x1fc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d040      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a30      	ldr	r2, [pc, #192]	; (8005eb4 <HAL_DMA_Start_IT+0x200>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d03b      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2e      	ldr	r2, [pc, #184]	; (8005eb8 <HAL_DMA_Start_IT+0x204>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d036      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2d      	ldr	r2, [pc, #180]	; (8005ebc <HAL_DMA_Start_IT+0x208>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d031      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2b      	ldr	r2, [pc, #172]	; (8005ec0 <HAL_DMA_Start_IT+0x20c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d02c      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ec4 <HAL_DMA_Start_IT+0x210>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d027      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a28      	ldr	r2, [pc, #160]	; (8005ec8 <HAL_DMA_Start_IT+0x214>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d022      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a27      	ldr	r2, [pc, #156]	; (8005ecc <HAL_DMA_Start_IT+0x218>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d01d      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a25      	ldr	r2, [pc, #148]	; (8005ed0 <HAL_DMA_Start_IT+0x21c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a24      	ldr	r2, [pc, #144]	; (8005ed4 <HAL_DMA_Start_IT+0x220>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <HAL_DMA_Start_IT+0x224>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <HAL_DMA_Start_IT+0x228>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <HAL_DMA_Start_IT+0x22c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_DMA_Start_IT+0x1bc>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_DMA_Start_IT+0x230>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d101      	bne.n	8005e74 <HAL_DMA_Start_IT+0x1c0>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <HAL_DMA_Start_IT+0x1c2>
 8005e74:	2300      	movs	r3, #0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d036      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f023 021e 	bic.w	r2, r3, #30
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0216 	orr.w	r2, r2, #22
 8005e8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d03e      	beq.n	8005f14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0208 	orr.w	r2, r2, #8
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e035      	b.n	8005f14 <HAL_DMA_Start_IT+0x260>
 8005ea8:	40020010 	.word	0x40020010
 8005eac:	40020028 	.word	0x40020028
 8005eb0:	40020040 	.word	0x40020040
 8005eb4:	40020058 	.word	0x40020058
 8005eb8:	40020070 	.word	0x40020070
 8005ebc:	40020088 	.word	0x40020088
 8005ec0:	400200a0 	.word	0x400200a0
 8005ec4:	400200b8 	.word	0x400200b8
 8005ec8:	40020410 	.word	0x40020410
 8005ecc:	40020428 	.word	0x40020428
 8005ed0:	40020440 	.word	0x40020440
 8005ed4:	40020458 	.word	0x40020458
 8005ed8:	40020470 	.word	0x40020470
 8005edc:	40020488 	.word	0x40020488
 8005ee0:	400204a0 	.word	0x400204a0
 8005ee4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 020e 	bic.w	r2, r3, #14
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 020a 	orr.w	r2, r2, #10
 8005efa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0204 	orr.w	r2, r2, #4
 8005f12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a83      	ldr	r2, [pc, #524]	; (8006128 <HAL_DMA_Start_IT+0x474>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d072      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a82      	ldr	r2, [pc, #520]	; (800612c <HAL_DMA_Start_IT+0x478>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d06d      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a80      	ldr	r2, [pc, #512]	; (8006130 <HAL_DMA_Start_IT+0x47c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d068      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a7f      	ldr	r2, [pc, #508]	; (8006134 <HAL_DMA_Start_IT+0x480>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d063      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a7d      	ldr	r2, [pc, #500]	; (8006138 <HAL_DMA_Start_IT+0x484>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d05e      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a7c      	ldr	r2, [pc, #496]	; (800613c <HAL_DMA_Start_IT+0x488>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d059      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a7a      	ldr	r2, [pc, #488]	; (8006140 <HAL_DMA_Start_IT+0x48c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d054      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a79      	ldr	r2, [pc, #484]	; (8006144 <HAL_DMA_Start_IT+0x490>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04f      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a77      	ldr	r2, [pc, #476]	; (8006148 <HAL_DMA_Start_IT+0x494>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d04a      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a76      	ldr	r2, [pc, #472]	; (800614c <HAL_DMA_Start_IT+0x498>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d045      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a74      	ldr	r2, [pc, #464]	; (8006150 <HAL_DMA_Start_IT+0x49c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d040      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a73      	ldr	r2, [pc, #460]	; (8006154 <HAL_DMA_Start_IT+0x4a0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d03b      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a71      	ldr	r2, [pc, #452]	; (8006158 <HAL_DMA_Start_IT+0x4a4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d036      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a70      	ldr	r2, [pc, #448]	; (800615c <HAL_DMA_Start_IT+0x4a8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d031      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6e      	ldr	r2, [pc, #440]	; (8006160 <HAL_DMA_Start_IT+0x4ac>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d02c      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a6d      	ldr	r2, [pc, #436]	; (8006164 <HAL_DMA_Start_IT+0x4b0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d027      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a6b      	ldr	r2, [pc, #428]	; (8006168 <HAL_DMA_Start_IT+0x4b4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d022      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a6a      	ldr	r2, [pc, #424]	; (800616c <HAL_DMA_Start_IT+0x4b8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d01d      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a68      	ldr	r2, [pc, #416]	; (8006170 <HAL_DMA_Start_IT+0x4bc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d018      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a67      	ldr	r2, [pc, #412]	; (8006174 <HAL_DMA_Start_IT+0x4c0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a65      	ldr	r2, [pc, #404]	; (8006178 <HAL_DMA_Start_IT+0x4c4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a64      	ldr	r2, [pc, #400]	; (800617c <HAL_DMA_Start_IT+0x4c8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d009      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a62      	ldr	r2, [pc, #392]	; (8006180 <HAL_DMA_Start_IT+0x4cc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_DMA_Start_IT+0x350>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a61      	ldr	r2, [pc, #388]	; (8006184 <HAL_DMA_Start_IT+0x4d0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d101      	bne.n	8006008 <HAL_DMA_Start_IT+0x354>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <HAL_DMA_Start_IT+0x356>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01a      	beq.n	8006044 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800603e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006042:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a37      	ldr	r2, [pc, #220]	; (8006128 <HAL_DMA_Start_IT+0x474>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04a      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a36      	ldr	r2, [pc, #216]	; (800612c <HAL_DMA_Start_IT+0x478>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d045      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a34      	ldr	r2, [pc, #208]	; (8006130 <HAL_DMA_Start_IT+0x47c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d040      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a33      	ldr	r2, [pc, #204]	; (8006134 <HAL_DMA_Start_IT+0x480>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d03b      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a31      	ldr	r2, [pc, #196]	; (8006138 <HAL_DMA_Start_IT+0x484>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d036      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a30      	ldr	r2, [pc, #192]	; (800613c <HAL_DMA_Start_IT+0x488>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d031      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2e      	ldr	r2, [pc, #184]	; (8006140 <HAL_DMA_Start_IT+0x48c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02c      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <HAL_DMA_Start_IT+0x490>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d027      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <HAL_DMA_Start_IT+0x494>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2a      	ldr	r2, [pc, #168]	; (800614c <HAL_DMA_Start_IT+0x498>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d01d      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a28      	ldr	r2, [pc, #160]	; (8006150 <HAL_DMA_Start_IT+0x49c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a27      	ldr	r2, [pc, #156]	; (8006154 <HAL_DMA_Start_IT+0x4a0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a25      	ldr	r2, [pc, #148]	; (8006158 <HAL_DMA_Start_IT+0x4a4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a24      	ldr	r2, [pc, #144]	; (800615c <HAL_DMA_Start_IT+0x4a8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_DMA_Start_IT+0x4ac>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_DMA_Start_IT+0x430>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a21      	ldr	r2, [pc, #132]	; (8006164 <HAL_DMA_Start_IT+0x4b0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d108      	bne.n	80060f6 <HAL_DMA_Start_IT+0x442>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e012      	b.n	800611c <HAL_DMA_Start_IT+0x468>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	e009      	b.n	800611c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800610e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40020010 	.word	0x40020010
 800612c:	40020028 	.word	0x40020028
 8006130:	40020040 	.word	0x40020040
 8006134:	40020058 	.word	0x40020058
 8006138:	40020070 	.word	0x40020070
 800613c:	40020088 	.word	0x40020088
 8006140:	400200a0 	.word	0x400200a0
 8006144:	400200b8 	.word	0x400200b8
 8006148:	40020410 	.word	0x40020410
 800614c:	40020428 	.word	0x40020428
 8006150:	40020440 	.word	0x40020440
 8006154:	40020458 	.word	0x40020458
 8006158:	40020470 	.word	0x40020470
 800615c:	40020488 	.word	0x40020488
 8006160:	400204a0 	.word	0x400204a0
 8006164:	400204b8 	.word	0x400204b8
 8006168:	58025408 	.word	0x58025408
 800616c:	5802541c 	.word	0x5802541c
 8006170:	58025430 	.word	0x58025430
 8006174:	58025444 	.word	0x58025444
 8006178:	58025458 	.word	0x58025458
 800617c:	5802546c 	.word	0x5802546c
 8006180:	58025480 	.word	0x58025480
 8006184:	58025494 	.word	0x58025494

08006188 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006194:	4b67      	ldr	r3, [pc, #412]	; (8006334 <HAL_DMA_IRQHandler+0x1ac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a67      	ldr	r2, [pc, #412]	; (8006338 <HAL_DMA_IRQHandler+0x1b0>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	0a9b      	lsrs	r3, r3, #10
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a5f      	ldr	r2, [pc, #380]	; (800633c <HAL_DMA_IRQHandler+0x1b4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d04a      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a5d      	ldr	r2, [pc, #372]	; (8006340 <HAL_DMA_IRQHandler+0x1b8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d045      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a5c      	ldr	r2, [pc, #368]	; (8006344 <HAL_DMA_IRQHandler+0x1bc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d040      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a5a      	ldr	r2, [pc, #360]	; (8006348 <HAL_DMA_IRQHandler+0x1c0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d03b      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a59      	ldr	r2, [pc, #356]	; (800634c <HAL_DMA_IRQHandler+0x1c4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d036      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a57      	ldr	r2, [pc, #348]	; (8006350 <HAL_DMA_IRQHandler+0x1c8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d031      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a56      	ldr	r2, [pc, #344]	; (8006354 <HAL_DMA_IRQHandler+0x1cc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d02c      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a54      	ldr	r2, [pc, #336]	; (8006358 <HAL_DMA_IRQHandler+0x1d0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d027      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a53      	ldr	r2, [pc, #332]	; (800635c <HAL_DMA_IRQHandler+0x1d4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a51      	ldr	r2, [pc, #324]	; (8006360 <HAL_DMA_IRQHandler+0x1d8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01d      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a50      	ldr	r2, [pc, #320]	; (8006364 <HAL_DMA_IRQHandler+0x1dc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a4e      	ldr	r2, [pc, #312]	; (8006368 <HAL_DMA_IRQHandler+0x1e0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a4d      	ldr	r2, [pc, #308]	; (800636c <HAL_DMA_IRQHandler+0x1e4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a4b      	ldr	r2, [pc, #300]	; (8006370 <HAL_DMA_IRQHandler+0x1e8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a4a      	ldr	r2, [pc, #296]	; (8006374 <HAL_DMA_IRQHandler+0x1ec>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_DMA_IRQHandler+0xd2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a48      	ldr	r2, [pc, #288]	; (8006378 <HAL_DMA_IRQHandler+0x1f0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <HAL_DMA_IRQHandler+0xd6>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_DMA_IRQHandler+0xd8>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 842b 	beq.w	8006abc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2208      	movs	r2, #8
 8006270:	409a      	lsls	r2, r3
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	4013      	ands	r3, r2
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 80a2 	beq.w	80063c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2e      	ldr	r2, [pc, #184]	; (800633c <HAL_DMA_IRQHandler+0x1b4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d04a      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <HAL_DMA_IRQHandler+0x1b8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d045      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <HAL_DMA_IRQHandler+0x1bc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d040      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2a      	ldr	r2, [pc, #168]	; (8006348 <HAL_DMA_IRQHandler+0x1c0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d03b      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a28      	ldr	r2, [pc, #160]	; (800634c <HAL_DMA_IRQHandler+0x1c4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d036      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a27      	ldr	r2, [pc, #156]	; (8006350 <HAL_DMA_IRQHandler+0x1c8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d031      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a25      	ldr	r2, [pc, #148]	; (8006354 <HAL_DMA_IRQHandler+0x1cc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d02c      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a24      	ldr	r2, [pc, #144]	; (8006358 <HAL_DMA_IRQHandler+0x1d0>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d027      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a22      	ldr	r2, [pc, #136]	; (800635c <HAL_DMA_IRQHandler+0x1d4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d022      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a21      	ldr	r2, [pc, #132]	; (8006360 <HAL_DMA_IRQHandler+0x1d8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d01d      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_DMA_IRQHandler+0x1dc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d018      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1e      	ldr	r2, [pc, #120]	; (8006368 <HAL_DMA_IRQHandler+0x1e0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1c      	ldr	r2, [pc, #112]	; (800636c <HAL_DMA_IRQHandler+0x1e4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00e      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <HAL_DMA_IRQHandler+0x1e8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d009      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <HAL_DMA_IRQHandler+0x1ec>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d004      	beq.n	800631c <HAL_DMA_IRQHandler+0x194>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a18      	ldr	r2, [pc, #96]	; (8006378 <HAL_DMA_IRQHandler+0x1f0>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d12f      	bne.n	800637c <HAL_DMA_IRQHandler+0x1f4>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e02e      	b.n	8006390 <HAL_DMA_IRQHandler+0x208>
 8006332:	bf00      	nop
 8006334:	24000000 	.word	0x24000000
 8006338:	1b4e81b5 	.word	0x1b4e81b5
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	bf14      	ite	ne
 800638a:	2301      	movne	r3, #1
 800638c:	2300      	moveq	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d015      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0204 	bic.w	r2, r2, #4
 80063a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2208      	movs	r2, #8
 80063ae:	409a      	lsls	r2, r3
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	f043 0201 	orr.w	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	fa22 f303 	lsr.w	r3, r2, r3
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d06e      	beq.n	80064b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a69      	ldr	r2, [pc, #420]	; (8006580 <HAL_DMA_IRQHandler+0x3f8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d04a      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a67      	ldr	r2, [pc, #412]	; (8006584 <HAL_DMA_IRQHandler+0x3fc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d045      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a66      	ldr	r2, [pc, #408]	; (8006588 <HAL_DMA_IRQHandler+0x400>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d040      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a64      	ldr	r2, [pc, #400]	; (800658c <HAL_DMA_IRQHandler+0x404>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d03b      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a63      	ldr	r2, [pc, #396]	; (8006590 <HAL_DMA_IRQHandler+0x408>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d036      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a61      	ldr	r2, [pc, #388]	; (8006594 <HAL_DMA_IRQHandler+0x40c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d031      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a60      	ldr	r2, [pc, #384]	; (8006598 <HAL_DMA_IRQHandler+0x410>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d02c      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a5e      	ldr	r2, [pc, #376]	; (800659c <HAL_DMA_IRQHandler+0x414>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d027      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a5d      	ldr	r2, [pc, #372]	; (80065a0 <HAL_DMA_IRQHandler+0x418>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a5b      	ldr	r2, [pc, #364]	; (80065a4 <HAL_DMA_IRQHandler+0x41c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01d      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a5a      	ldr	r2, [pc, #360]	; (80065a8 <HAL_DMA_IRQHandler+0x420>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d018      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a58      	ldr	r2, [pc, #352]	; (80065ac <HAL_DMA_IRQHandler+0x424>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a57      	ldr	r2, [pc, #348]	; (80065b0 <HAL_DMA_IRQHandler+0x428>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a55      	ldr	r2, [pc, #340]	; (80065b4 <HAL_DMA_IRQHandler+0x42c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a54      	ldr	r2, [pc, #336]	; (80065b8 <HAL_DMA_IRQHandler+0x430>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_DMA_IRQHandler+0x2ee>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a52      	ldr	r2, [pc, #328]	; (80065bc <HAL_DMA_IRQHandler+0x434>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10a      	bne.n	800648c <HAL_DMA_IRQHandler+0x304>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e003      	b.n	8006494 <HAL_DMA_IRQHandler+0x30c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2201      	movs	r2, #1
 80064a2:	409a      	lsls	r2, r3
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	f043 0202 	orr.w	r2, r3, #2
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2204      	movs	r2, #4
 80064be:	409a      	lsls	r2, r3
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 808f 	beq.w	80065e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2c      	ldr	r2, [pc, #176]	; (8006580 <HAL_DMA_IRQHandler+0x3f8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d04a      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_DMA_IRQHandler+0x3fc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d045      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a29      	ldr	r2, [pc, #164]	; (8006588 <HAL_DMA_IRQHandler+0x400>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d040      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a27      	ldr	r2, [pc, #156]	; (800658c <HAL_DMA_IRQHandler+0x404>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d03b      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a26      	ldr	r2, [pc, #152]	; (8006590 <HAL_DMA_IRQHandler+0x408>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d036      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_DMA_IRQHandler+0x40c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d031      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a23      	ldr	r2, [pc, #140]	; (8006598 <HAL_DMA_IRQHandler+0x410>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d02c      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_DMA_IRQHandler+0x414>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d027      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <HAL_DMA_IRQHandler+0x418>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <HAL_DMA_IRQHandler+0x41c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01d      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1d      	ldr	r2, [pc, #116]	; (80065a8 <HAL_DMA_IRQHandler+0x420>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <HAL_DMA_IRQHandler+0x424>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1a      	ldr	r2, [pc, #104]	; (80065b0 <HAL_DMA_IRQHandler+0x428>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_DMA_IRQHandler+0x42c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <HAL_DMA_IRQHandler+0x430>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_DMA_IRQHandler+0x3e2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a15      	ldr	r2, [pc, #84]	; (80065bc <HAL_DMA_IRQHandler+0x434>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d12a      	bne.n	80065c0 <HAL_DMA_IRQHandler+0x438>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	e023      	b.n	80065c8 <HAL_DMA_IRQHandler+0x440>
 8006580:	40020010 	.word	0x40020010
 8006584:	40020028 	.word	0x40020028
 8006588:	40020040 	.word	0x40020040
 800658c:	40020058 	.word	0x40020058
 8006590:	40020070 	.word	0x40020070
 8006594:	40020088 	.word	0x40020088
 8006598:	400200a0 	.word	0x400200a0
 800659c:	400200b8 	.word	0x400200b8
 80065a0:	40020410 	.word	0x40020410
 80065a4:	40020428 	.word	0x40020428
 80065a8:	40020440 	.word	0x40020440
 80065ac:	40020458 	.word	0x40020458
 80065b0:	40020470 	.word	0x40020470
 80065b4:	40020488 	.word	0x40020488
 80065b8:	400204a0 	.word	0x400204a0
 80065bc:	400204b8 	.word	0x400204b8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2204      	movs	r2, #4
 80065d6:	409a      	lsls	r2, r3
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e0:	f043 0204 	orr.w	r2, r3, #4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2210      	movs	r2, #16
 80065f2:	409a      	lsls	r2, r3
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80a6 	beq.w	800674a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a85      	ldr	r2, [pc, #532]	; (8006818 <HAL_DMA_IRQHandler+0x690>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d04a      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a83      	ldr	r2, [pc, #524]	; (800681c <HAL_DMA_IRQHandler+0x694>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d045      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a82      	ldr	r2, [pc, #520]	; (8006820 <HAL_DMA_IRQHandler+0x698>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d040      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a80      	ldr	r2, [pc, #512]	; (8006824 <HAL_DMA_IRQHandler+0x69c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d03b      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a7f      	ldr	r2, [pc, #508]	; (8006828 <HAL_DMA_IRQHandler+0x6a0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d036      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a7d      	ldr	r2, [pc, #500]	; (800682c <HAL_DMA_IRQHandler+0x6a4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d031      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a7c      	ldr	r2, [pc, #496]	; (8006830 <HAL_DMA_IRQHandler+0x6a8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d02c      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7a      	ldr	r2, [pc, #488]	; (8006834 <HAL_DMA_IRQHandler+0x6ac>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d027      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a79      	ldr	r2, [pc, #484]	; (8006838 <HAL_DMA_IRQHandler+0x6b0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a77      	ldr	r2, [pc, #476]	; (800683c <HAL_DMA_IRQHandler+0x6b4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01d      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a76      	ldr	r2, [pc, #472]	; (8006840 <HAL_DMA_IRQHandler+0x6b8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a74      	ldr	r2, [pc, #464]	; (8006844 <HAL_DMA_IRQHandler+0x6bc>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a73      	ldr	r2, [pc, #460]	; (8006848 <HAL_DMA_IRQHandler+0x6c0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a71      	ldr	r2, [pc, #452]	; (800684c <HAL_DMA_IRQHandler+0x6c4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a70      	ldr	r2, [pc, #448]	; (8006850 <HAL_DMA_IRQHandler+0x6c8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_DMA_IRQHandler+0x516>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a6e      	ldr	r2, [pc, #440]	; (8006854 <HAL_DMA_IRQHandler+0x6cc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d10a      	bne.n	80066b4 <HAL_DMA_IRQHandler+0x52c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bf14      	ite	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	2300      	moveq	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	e009      	b.n	80066c8 <HAL_DMA_IRQHandler+0x540>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bf14      	ite	ne
 80066c2:	2301      	movne	r3, #1
 80066c4:	2300      	moveq	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d03e      	beq.n	800674a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2210      	movs	r2, #16
 80066d6:	409a      	lsls	r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d018      	beq.n	800671c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d108      	bne.n	800670a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d024      	beq.n	800674a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
 8006708:	e01f      	b.n	800674a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01b      	beq.n	800674a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
 800671a:	e016      	b.n	800674a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d107      	bne.n	800673a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0208 	bic.w	r2, r2, #8
 8006738:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2220      	movs	r2, #32
 8006754:	409a      	lsls	r2, r3
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8110 	beq.w	8006980 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a2c      	ldr	r2, [pc, #176]	; (8006818 <HAL_DMA_IRQHandler+0x690>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d04a      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a2b      	ldr	r2, [pc, #172]	; (800681c <HAL_DMA_IRQHandler+0x694>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d045      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a29      	ldr	r2, [pc, #164]	; (8006820 <HAL_DMA_IRQHandler+0x698>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d040      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a28      	ldr	r2, [pc, #160]	; (8006824 <HAL_DMA_IRQHandler+0x69c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d03b      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a26      	ldr	r2, [pc, #152]	; (8006828 <HAL_DMA_IRQHandler+0x6a0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d036      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a25      	ldr	r2, [pc, #148]	; (800682c <HAL_DMA_IRQHandler+0x6a4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d031      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a23      	ldr	r2, [pc, #140]	; (8006830 <HAL_DMA_IRQHandler+0x6a8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d02c      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a22      	ldr	r2, [pc, #136]	; (8006834 <HAL_DMA_IRQHandler+0x6ac>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d027      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a20      	ldr	r2, [pc, #128]	; (8006838 <HAL_DMA_IRQHandler+0x6b0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d022      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1f      	ldr	r2, [pc, #124]	; (800683c <HAL_DMA_IRQHandler+0x6b4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d01d      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <HAL_DMA_IRQHandler+0x6b8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d018      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <HAL_DMA_IRQHandler+0x6bc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <HAL_DMA_IRQHandler+0x6c0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00e      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a19      	ldr	r2, [pc, #100]	; (800684c <HAL_DMA_IRQHandler+0x6c4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d009      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_DMA_IRQHandler+0x6c8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_DMA_IRQHandler+0x678>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a16      	ldr	r2, [pc, #88]	; (8006854 <HAL_DMA_IRQHandler+0x6cc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d12b      	bne.n	8006858 <HAL_DMA_IRQHandler+0x6d0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf14      	ite	ne
 800680e:	2301      	movne	r3, #1
 8006810:	2300      	moveq	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	e02a      	b.n	800686c <HAL_DMA_IRQHandler+0x6e4>
 8006816:	bf00      	nop
 8006818:	40020010 	.word	0x40020010
 800681c:	40020028 	.word	0x40020028
 8006820:	40020040 	.word	0x40020040
 8006824:	40020058 	.word	0x40020058
 8006828:	40020070 	.word	0x40020070
 800682c:	40020088 	.word	0x40020088
 8006830:	400200a0 	.word	0x400200a0
 8006834:	400200b8 	.word	0x400200b8
 8006838:	40020410 	.word	0x40020410
 800683c:	40020428 	.word	0x40020428
 8006840:	40020440 	.word	0x40020440
 8006844:	40020458 	.word	0x40020458
 8006848:	40020470 	.word	0x40020470
 800684c:	40020488 	.word	0x40020488
 8006850:	400204a0 	.word	0x400204a0
 8006854:	400204b8 	.word	0x400204b8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8087 	beq.w	8006980 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2220      	movs	r2, #32
 800687c:	409a      	lsls	r2, r3
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b04      	cmp	r3, #4
 800688c:	d139      	bne.n	8006902 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0216 	bic.w	r2, r2, #22
 800689c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <HAL_DMA_IRQHandler+0x736>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0208 	bic.w	r2, r2, #8
 80068cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	223f      	movs	r2, #63	; 0x3f
 80068d8:	409a      	lsls	r2, r3
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 834a 	beq.w	8006f8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
          }
          return;
 8006900:	e344      	b.n	8006f8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d018      	beq.n	8006942 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d108      	bne.n	8006930 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	2b00      	cmp	r3, #0
 8006924:	d02c      	beq.n	8006980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
 800692e:	e027      	b.n	8006980 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d023      	beq.n	8006980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
 8006940:	e01e      	b.n	8006980 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10f      	bne.n	8006970 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0210 	bic.w	r2, r2, #16
 800695e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8306 	beq.w	8006f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8088 	beq.w	8006aa8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2204      	movs	r2, #4
 800699c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a7a      	ldr	r2, [pc, #488]	; (8006b90 <HAL_DMA_IRQHandler+0xa08>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d04a      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a79      	ldr	r2, [pc, #484]	; (8006b94 <HAL_DMA_IRQHandler+0xa0c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d045      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a77      	ldr	r2, [pc, #476]	; (8006b98 <HAL_DMA_IRQHandler+0xa10>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d040      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a76      	ldr	r2, [pc, #472]	; (8006b9c <HAL_DMA_IRQHandler+0xa14>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d03b      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a74      	ldr	r2, [pc, #464]	; (8006ba0 <HAL_DMA_IRQHandler+0xa18>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d036      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a73      	ldr	r2, [pc, #460]	; (8006ba4 <HAL_DMA_IRQHandler+0xa1c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d031      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a71      	ldr	r2, [pc, #452]	; (8006ba8 <HAL_DMA_IRQHandler+0xa20>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d02c      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a70      	ldr	r2, [pc, #448]	; (8006bac <HAL_DMA_IRQHandler+0xa24>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d027      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a6e      	ldr	r2, [pc, #440]	; (8006bb0 <HAL_DMA_IRQHandler+0xa28>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d022      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a6d      	ldr	r2, [pc, #436]	; (8006bb4 <HAL_DMA_IRQHandler+0xa2c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d01d      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a6b      	ldr	r2, [pc, #428]	; (8006bb8 <HAL_DMA_IRQHandler+0xa30>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d018      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a6a      	ldr	r2, [pc, #424]	; (8006bbc <HAL_DMA_IRQHandler+0xa34>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d013      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a68      	ldr	r2, [pc, #416]	; (8006bc0 <HAL_DMA_IRQHandler+0xa38>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00e      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a67      	ldr	r2, [pc, #412]	; (8006bc4 <HAL_DMA_IRQHandler+0xa3c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a65      	ldr	r2, [pc, #404]	; (8006bc8 <HAL_DMA_IRQHandler+0xa40>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x8b8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a64      	ldr	r2, [pc, #400]	; (8006bcc <HAL_DMA_IRQHandler+0xa44>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d108      	bne.n	8006a52 <HAL_DMA_IRQHandler+0x8ca>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0201 	bic.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	e007      	b.n	8006a62 <HAL_DMA_IRQHandler+0x8da>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d307      	bcc.n	8006a7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f2      	bne.n	8006a62 <HAL_DMA_IRQHandler+0x8da>
 8006a7c:	e000      	b.n	8006a80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a96:	e003      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8272 	beq.w	8006f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	e26c      	b.n	8006f96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a43      	ldr	r2, [pc, #268]	; (8006bd0 <HAL_DMA_IRQHandler+0xa48>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x984>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a42      	ldr	r2, [pc, #264]	; (8006bd4 <HAL_DMA_IRQHandler+0xa4c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x984>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a40      	ldr	r2, [pc, #256]	; (8006bd8 <HAL_DMA_IRQHandler+0xa50>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x984>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a3f      	ldr	r2, [pc, #252]	; (8006bdc <HAL_DMA_IRQHandler+0xa54>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x984>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a3d      	ldr	r2, [pc, #244]	; (8006be0 <HAL_DMA_IRQHandler+0xa58>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x984>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a3c      	ldr	r2, [pc, #240]	; (8006be4 <HAL_DMA_IRQHandler+0xa5c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x984>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a3a      	ldr	r2, [pc, #232]	; (8006be8 <HAL_DMA_IRQHandler+0xa60>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x984>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a39      	ldr	r2, [pc, #228]	; (8006bec <HAL_DMA_IRQHandler+0xa64>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d101      	bne.n	8006b10 <HAL_DMA_IRQHandler+0x988>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <HAL_DMA_IRQHandler+0x98a>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 823f 	beq.w	8006f96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	2204      	movs	r2, #4
 8006b2a:	409a      	lsls	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80cd 	beq.w	8006cd0 <HAL_DMA_IRQHandler+0xb48>
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80c7 	beq.w	8006cd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d049      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 8210 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b78:	e20a      	b.n	8006f90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8206 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b8c:	e200      	b.n	8006f90 <HAL_DMA_IRQHandler+0xe08>
 8006b8e:	bf00      	nop
 8006b90:	40020010 	.word	0x40020010
 8006b94:	40020028 	.word	0x40020028
 8006b98:	40020040 	.word	0x40020040
 8006b9c:	40020058 	.word	0x40020058
 8006ba0:	40020070 	.word	0x40020070
 8006ba4:	40020088 	.word	0x40020088
 8006ba8:	400200a0 	.word	0x400200a0
 8006bac:	400200b8 	.word	0x400200b8
 8006bb0:	40020410 	.word	0x40020410
 8006bb4:	40020428 	.word	0x40020428
 8006bb8:	40020440 	.word	0x40020440
 8006bbc:	40020458 	.word	0x40020458
 8006bc0:	40020470 	.word	0x40020470
 8006bc4:	40020488 	.word	0x40020488
 8006bc8:	400204a0 	.word	0x400204a0
 8006bcc:	400204b8 	.word	0x400204b8
 8006bd0:	58025408 	.word	0x58025408
 8006bd4:	5802541c 	.word	0x5802541c
 8006bd8:	58025430 	.word	0x58025430
 8006bdc:	58025444 	.word	0x58025444
 8006be0:	58025458 	.word	0x58025458
 8006be4:	5802546c 	.word	0x5802546c
 8006be8:	58025480 	.word	0x58025480
 8006bec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d160      	bne.n	8006cbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a7f      	ldr	r2, [pc, #508]	; (8006dfc <HAL_DMA_IRQHandler+0xc74>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d04a      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a7d      	ldr	r2, [pc, #500]	; (8006e00 <HAL_DMA_IRQHandler+0xc78>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d045      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a7c      	ldr	r2, [pc, #496]	; (8006e04 <HAL_DMA_IRQHandler+0xc7c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d040      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a7a      	ldr	r2, [pc, #488]	; (8006e08 <HAL_DMA_IRQHandler+0xc80>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d03b      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a79      	ldr	r2, [pc, #484]	; (8006e0c <HAL_DMA_IRQHandler+0xc84>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d036      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a77      	ldr	r2, [pc, #476]	; (8006e10 <HAL_DMA_IRQHandler+0xc88>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d031      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a76      	ldr	r2, [pc, #472]	; (8006e14 <HAL_DMA_IRQHandler+0xc8c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d02c      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a74      	ldr	r2, [pc, #464]	; (8006e18 <HAL_DMA_IRQHandler+0xc90>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d027      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a73      	ldr	r2, [pc, #460]	; (8006e1c <HAL_DMA_IRQHandler+0xc94>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d022      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a71      	ldr	r2, [pc, #452]	; (8006e20 <HAL_DMA_IRQHandler+0xc98>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d01d      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a70      	ldr	r2, [pc, #448]	; (8006e24 <HAL_DMA_IRQHandler+0xc9c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d018      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a6e      	ldr	r2, [pc, #440]	; (8006e28 <HAL_DMA_IRQHandler+0xca0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a6d      	ldr	r2, [pc, #436]	; (8006e2c <HAL_DMA_IRQHandler+0xca4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00e      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a6b      	ldr	r2, [pc, #428]	; (8006e30 <HAL_DMA_IRQHandler+0xca8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d009      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a6a      	ldr	r2, [pc, #424]	; (8006e34 <HAL_DMA_IRQHandler+0xcac>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_DMA_IRQHandler+0xb12>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a68      	ldr	r2, [pc, #416]	; (8006e38 <HAL_DMA_IRQHandler+0xcb0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d108      	bne.n	8006cac <HAL_DMA_IRQHandler+0xb24>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0208 	bic.w	r2, r2, #8
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e007      	b.n	8006cbc <HAL_DMA_IRQHandler+0xb34>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0204 	bic.w	r2, r2, #4
 8006cba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 8165 	beq.w	8006f90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cce:	e15f      	b.n	8006f90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2202      	movs	r2, #2
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 80c5 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xce8>
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80bf 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	409a      	lsls	r2, r3
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d018      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 813a 	beq.w	8006f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d28:	e134      	b.n	8006f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8130 	beq.w	8006f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d3c:	e12a      	b.n	8006f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 8089 	bne.w	8006e5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a2b      	ldr	r2, [pc, #172]	; (8006dfc <HAL_DMA_IRQHandler+0xc74>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d04a      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <HAL_DMA_IRQHandler+0xc78>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d045      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a28      	ldr	r2, [pc, #160]	; (8006e04 <HAL_DMA_IRQHandler+0xc7c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d040      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <HAL_DMA_IRQHandler+0xc80>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d03b      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <HAL_DMA_IRQHandler+0xc84>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d036      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <HAL_DMA_IRQHandler+0xc88>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d031      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a22      	ldr	r2, [pc, #136]	; (8006e14 <HAL_DMA_IRQHandler+0xc8c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d02c      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <HAL_DMA_IRQHandler+0xc90>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d027      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1f      	ldr	r2, [pc, #124]	; (8006e1c <HAL_DMA_IRQHandler+0xc94>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d022      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_DMA_IRQHandler+0xc98>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01d      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1c      	ldr	r2, [pc, #112]	; (8006e24 <HAL_DMA_IRQHandler+0xc9c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d018      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1a      	ldr	r2, [pc, #104]	; (8006e28 <HAL_DMA_IRQHandler+0xca0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <HAL_DMA_IRQHandler+0xca4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00e      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <HAL_DMA_IRQHandler+0xca8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d009      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_DMA_IRQHandler+0xcac>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d004      	beq.n	8006dea <HAL_DMA_IRQHandler+0xc62>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a14      	ldr	r2, [pc, #80]	; (8006e38 <HAL_DMA_IRQHandler+0xcb0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d128      	bne.n	8006e3c <HAL_DMA_IRQHandler+0xcb4>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0214 	bic.w	r2, r2, #20
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e027      	b.n	8006e4c <HAL_DMA_IRQHandler+0xcc4>
 8006dfc:	40020010 	.word	0x40020010
 8006e00:	40020028 	.word	0x40020028
 8006e04:	40020040 	.word	0x40020040
 8006e08:	40020058 	.word	0x40020058
 8006e0c:	40020070 	.word	0x40020070
 8006e10:	40020088 	.word	0x40020088
 8006e14:	400200a0 	.word	0x400200a0
 8006e18:	400200b8 	.word	0x400200b8
 8006e1c:	40020410 	.word	0x40020410
 8006e20:	40020428 	.word	0x40020428
 8006e24:	40020440 	.word	0x40020440
 8006e28:	40020458 	.word	0x40020458
 8006e2c:	40020470 	.word	0x40020470
 8006e30:	40020488 	.word	0x40020488
 8006e34:	400204a0 	.word	0x400204a0
 8006e38:	400204b8 	.word	0x400204b8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 020a 	bic.w	r2, r2, #10
 8006e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8097 	beq.w	8006f94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e6e:	e091      	b.n	8006f94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	2208      	movs	r2, #8
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8088 	beq.w	8006f96 <HAL_DMA_IRQHandler+0xe0e>
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8082 	beq.w	8006f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a41      	ldr	r2, [pc, #260]	; (8006f9c <HAL_DMA_IRQHandler+0xe14>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d04a      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a3f      	ldr	r2, [pc, #252]	; (8006fa0 <HAL_DMA_IRQHandler+0xe18>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d045      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a3e      	ldr	r2, [pc, #248]	; (8006fa4 <HAL_DMA_IRQHandler+0xe1c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d040      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a3c      	ldr	r2, [pc, #240]	; (8006fa8 <HAL_DMA_IRQHandler+0xe20>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d03b      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a3b      	ldr	r2, [pc, #236]	; (8006fac <HAL_DMA_IRQHandler+0xe24>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d036      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a39      	ldr	r2, [pc, #228]	; (8006fb0 <HAL_DMA_IRQHandler+0xe28>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d031      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a38      	ldr	r2, [pc, #224]	; (8006fb4 <HAL_DMA_IRQHandler+0xe2c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d02c      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a36      	ldr	r2, [pc, #216]	; (8006fb8 <HAL_DMA_IRQHandler+0xe30>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d027      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a35      	ldr	r2, [pc, #212]	; (8006fbc <HAL_DMA_IRQHandler+0xe34>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d022      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a33      	ldr	r2, [pc, #204]	; (8006fc0 <HAL_DMA_IRQHandler+0xe38>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d01d      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a32      	ldr	r2, [pc, #200]	; (8006fc4 <HAL_DMA_IRQHandler+0xe3c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d018      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a30      	ldr	r2, [pc, #192]	; (8006fc8 <HAL_DMA_IRQHandler+0xe40>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a2f      	ldr	r2, [pc, #188]	; (8006fcc <HAL_DMA_IRQHandler+0xe44>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_DMA_IRQHandler+0xe48>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a2c      	ldr	r2, [pc, #176]	; (8006fd4 <HAL_DMA_IRQHandler+0xe4c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xdaa>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <HAL_DMA_IRQHandler+0xe50>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <HAL_DMA_IRQHandler+0xdbc>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 021c 	bic.w	r2, r2, #28
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e007      	b.n	8006f54 <HAL_DMA_IRQHandler+0xdcc>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 020e 	bic.w	r2, r2, #14
 8006f52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	409a      	lsls	r2, r3
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
 8006f8a:	e004      	b.n	8006f96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f8c:	bf00      	nop
 8006f8e:	e002      	b.n	8006f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f90:	bf00      	nop
 8006f92:	e000      	b.n	8006f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f96:	3728      	adds	r7, #40	; 0x28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40020010 	.word	0x40020010
 8006fa0:	40020028 	.word	0x40020028
 8006fa4:	40020040 	.word	0x40020040
 8006fa8:	40020058 	.word	0x40020058
 8006fac:	40020070 	.word	0x40020070
 8006fb0:	40020088 	.word	0x40020088
 8006fb4:	400200a0 	.word	0x400200a0
 8006fb8:	400200b8 	.word	0x400200b8
 8006fbc:	40020410 	.word	0x40020410
 8006fc0:	40020428 	.word	0x40020428
 8006fc4:	40020440 	.word	0x40020440
 8006fc8:	40020458 	.word	0x40020458
 8006fcc:	40020470 	.word	0x40020470
 8006fd0:	40020488 	.word	0x40020488
 8006fd4:	400204a0 	.word	0x400204a0
 8006fd8:	400204b8 	.word	0x400204b8

08006fdc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7f      	ldr	r2, [pc, #508]	; (80071f8 <DMA_SetConfig+0x21c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d072      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a7d      	ldr	r2, [pc, #500]	; (80071fc <DMA_SetConfig+0x220>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d06d      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a7c      	ldr	r2, [pc, #496]	; (8007200 <DMA_SetConfig+0x224>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d068      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a7a      	ldr	r2, [pc, #488]	; (8007204 <DMA_SetConfig+0x228>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d063      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a79      	ldr	r2, [pc, #484]	; (8007208 <DMA_SetConfig+0x22c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d05e      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a77      	ldr	r2, [pc, #476]	; (800720c <DMA_SetConfig+0x230>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d059      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a76      	ldr	r2, [pc, #472]	; (8007210 <DMA_SetConfig+0x234>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d054      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a74      	ldr	r2, [pc, #464]	; (8007214 <DMA_SetConfig+0x238>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d04f      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a73      	ldr	r2, [pc, #460]	; (8007218 <DMA_SetConfig+0x23c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d04a      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a71      	ldr	r2, [pc, #452]	; (800721c <DMA_SetConfig+0x240>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d045      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a70      	ldr	r2, [pc, #448]	; (8007220 <DMA_SetConfig+0x244>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d040      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a6e      	ldr	r2, [pc, #440]	; (8007224 <DMA_SetConfig+0x248>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d03b      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6d      	ldr	r2, [pc, #436]	; (8007228 <DMA_SetConfig+0x24c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d036      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a6b      	ldr	r2, [pc, #428]	; (800722c <DMA_SetConfig+0x250>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d031      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6a      	ldr	r2, [pc, #424]	; (8007230 <DMA_SetConfig+0x254>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d02c      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a68      	ldr	r2, [pc, #416]	; (8007234 <DMA_SetConfig+0x258>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d027      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a67      	ldr	r2, [pc, #412]	; (8007238 <DMA_SetConfig+0x25c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d022      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a65      	ldr	r2, [pc, #404]	; (800723c <DMA_SetConfig+0x260>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01d      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a64      	ldr	r2, [pc, #400]	; (8007240 <DMA_SetConfig+0x264>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a62      	ldr	r2, [pc, #392]	; (8007244 <DMA_SetConfig+0x268>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a61      	ldr	r2, [pc, #388]	; (8007248 <DMA_SetConfig+0x26c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a5f      	ldr	r2, [pc, #380]	; (800724c <DMA_SetConfig+0x270>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a5e      	ldr	r2, [pc, #376]	; (8007250 <DMA_SetConfig+0x274>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <DMA_SetConfig+0x10a>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a5c      	ldr	r2, [pc, #368]	; (8007254 <DMA_SetConfig+0x278>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d101      	bne.n	80070ea <DMA_SetConfig+0x10e>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <DMA_SetConfig+0x110>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00d      	beq.n	800710c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800710a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a39      	ldr	r2, [pc, #228]	; (80071f8 <DMA_SetConfig+0x21c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d04a      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a38      	ldr	r2, [pc, #224]	; (80071fc <DMA_SetConfig+0x220>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d045      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a36      	ldr	r2, [pc, #216]	; (8007200 <DMA_SetConfig+0x224>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d040      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a35      	ldr	r2, [pc, #212]	; (8007204 <DMA_SetConfig+0x228>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d03b      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a33      	ldr	r2, [pc, #204]	; (8007208 <DMA_SetConfig+0x22c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d036      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a32      	ldr	r2, [pc, #200]	; (800720c <DMA_SetConfig+0x230>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d031      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a30      	ldr	r2, [pc, #192]	; (8007210 <DMA_SetConfig+0x234>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d02c      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2f      	ldr	r2, [pc, #188]	; (8007214 <DMA_SetConfig+0x238>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d027      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2d      	ldr	r2, [pc, #180]	; (8007218 <DMA_SetConfig+0x23c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d022      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2c      	ldr	r2, [pc, #176]	; (800721c <DMA_SetConfig+0x240>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d01d      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2a      	ldr	r2, [pc, #168]	; (8007220 <DMA_SetConfig+0x244>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d018      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a29      	ldr	r2, [pc, #164]	; (8007224 <DMA_SetConfig+0x248>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d013      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a27      	ldr	r2, [pc, #156]	; (8007228 <DMA_SetConfig+0x24c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00e      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a26      	ldr	r2, [pc, #152]	; (800722c <DMA_SetConfig+0x250>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d009      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a24      	ldr	r2, [pc, #144]	; (8007230 <DMA_SetConfig+0x254>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <DMA_SetConfig+0x1d0>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a23      	ldr	r2, [pc, #140]	; (8007234 <DMA_SetConfig+0x258>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d101      	bne.n	80071b0 <DMA_SetConfig+0x1d4>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <DMA_SetConfig+0x1d6>
 80071b0:	2300      	movs	r3, #0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d059      	beq.n	800726a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	223f      	movs	r2, #63	; 0x3f
 80071c0:	409a      	lsls	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d138      	bne.n	8007258 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071f6:	e086      	b.n	8007306 <DMA_SetConfig+0x32a>
 80071f8:	40020010 	.word	0x40020010
 80071fc:	40020028 	.word	0x40020028
 8007200:	40020040 	.word	0x40020040
 8007204:	40020058 	.word	0x40020058
 8007208:	40020070 	.word	0x40020070
 800720c:	40020088 	.word	0x40020088
 8007210:	400200a0 	.word	0x400200a0
 8007214:	400200b8 	.word	0x400200b8
 8007218:	40020410 	.word	0x40020410
 800721c:	40020428 	.word	0x40020428
 8007220:	40020440 	.word	0x40020440
 8007224:	40020458 	.word	0x40020458
 8007228:	40020470 	.word	0x40020470
 800722c:	40020488 	.word	0x40020488
 8007230:	400204a0 	.word	0x400204a0
 8007234:	400204b8 	.word	0x400204b8
 8007238:	58025408 	.word	0x58025408
 800723c:	5802541c 	.word	0x5802541c
 8007240:	58025430 	.word	0x58025430
 8007244:	58025444 	.word	0x58025444
 8007248:	58025458 	.word	0x58025458
 800724c:	5802546c 	.word	0x5802546c
 8007250:	58025480 	.word	0x58025480
 8007254:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	60da      	str	r2, [r3, #12]
}
 8007268:	e04d      	b.n	8007306 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a29      	ldr	r2, [pc, #164]	; (8007314 <DMA_SetConfig+0x338>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d022      	beq.n	80072ba <DMA_SetConfig+0x2de>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a27      	ldr	r2, [pc, #156]	; (8007318 <DMA_SetConfig+0x33c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d01d      	beq.n	80072ba <DMA_SetConfig+0x2de>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a26      	ldr	r2, [pc, #152]	; (800731c <DMA_SetConfig+0x340>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d018      	beq.n	80072ba <DMA_SetConfig+0x2de>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a24      	ldr	r2, [pc, #144]	; (8007320 <DMA_SetConfig+0x344>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <DMA_SetConfig+0x2de>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a23      	ldr	r2, [pc, #140]	; (8007324 <DMA_SetConfig+0x348>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <DMA_SetConfig+0x2de>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a21      	ldr	r2, [pc, #132]	; (8007328 <DMA_SetConfig+0x34c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <DMA_SetConfig+0x2de>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a20      	ldr	r2, [pc, #128]	; (800732c <DMA_SetConfig+0x350>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <DMA_SetConfig+0x2de>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <DMA_SetConfig+0x354>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <DMA_SetConfig+0x2e2>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <DMA_SetConfig+0x2e4>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d020      	beq.n	8007306 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	2201      	movs	r2, #1
 80072ce:	409a      	lsls	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d108      	bne.n	80072f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	60da      	str	r2, [r3, #12]
}
 80072f4:	e007      	b.n	8007306 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	60da      	str	r2, [r3, #12]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	58025408 	.word	0x58025408
 8007318:	5802541c 	.word	0x5802541c
 800731c:	58025430 	.word	0x58025430
 8007320:	58025444 	.word	0x58025444
 8007324:	58025458 	.word	0x58025458
 8007328:	5802546c 	.word	0x5802546c
 800732c:	58025480 	.word	0x58025480
 8007330:	58025494 	.word	0x58025494

08007334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a42      	ldr	r2, [pc, #264]	; (800744c <DMA_CalcBaseAndBitshift+0x118>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d04a      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a41      	ldr	r2, [pc, #260]	; (8007450 <DMA_CalcBaseAndBitshift+0x11c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d045      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a3f      	ldr	r2, [pc, #252]	; (8007454 <DMA_CalcBaseAndBitshift+0x120>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d040      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a3e      	ldr	r2, [pc, #248]	; (8007458 <DMA_CalcBaseAndBitshift+0x124>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d03b      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a3c      	ldr	r2, [pc, #240]	; (800745c <DMA_CalcBaseAndBitshift+0x128>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d036      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a3b      	ldr	r2, [pc, #236]	; (8007460 <DMA_CalcBaseAndBitshift+0x12c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d031      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a39      	ldr	r2, [pc, #228]	; (8007464 <DMA_CalcBaseAndBitshift+0x130>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d02c      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a38      	ldr	r2, [pc, #224]	; (8007468 <DMA_CalcBaseAndBitshift+0x134>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d027      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a36      	ldr	r2, [pc, #216]	; (800746c <DMA_CalcBaseAndBitshift+0x138>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d022      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a35      	ldr	r2, [pc, #212]	; (8007470 <DMA_CalcBaseAndBitshift+0x13c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d01d      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a33      	ldr	r2, [pc, #204]	; (8007474 <DMA_CalcBaseAndBitshift+0x140>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a32      	ldr	r2, [pc, #200]	; (8007478 <DMA_CalcBaseAndBitshift+0x144>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a30      	ldr	r2, [pc, #192]	; (800747c <DMA_CalcBaseAndBitshift+0x148>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <DMA_CalcBaseAndBitshift+0x14c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a2d      	ldr	r2, [pc, #180]	; (8007484 <DMA_CalcBaseAndBitshift+0x150>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2c      	ldr	r2, [pc, #176]	; (8007488 <DMA_CalcBaseAndBitshift+0x154>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d101      	bne.n	80073e0 <DMA_CalcBaseAndBitshift+0xac>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <DMA_CalcBaseAndBitshift+0xae>
 80073e0:	2300      	movs	r3, #0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d024      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	3b10      	subs	r3, #16
 80073ee:	4a27      	ldr	r2, [pc, #156]	; (800748c <DMA_CalcBaseAndBitshift+0x158>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	091b      	lsrs	r3, r3, #4
 80073f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	4a24      	ldr	r2, [pc, #144]	; (8007490 <DMA_CalcBaseAndBitshift+0x15c>)
 8007400:	5cd3      	ldrb	r3, [r2, r3]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d908      	bls.n	8007420 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	4b1f      	ldr	r3, [pc, #124]	; (8007494 <DMA_CalcBaseAndBitshift+0x160>)
 8007416:	4013      	ands	r3, r2
 8007418:	1d1a      	adds	r2, r3, #4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	659a      	str	r2, [r3, #88]	; 0x58
 800741e:	e00d      	b.n	800743c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <DMA_CalcBaseAndBitshift+0x160>)
 8007428:	4013      	ands	r3, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6593      	str	r3, [r2, #88]	; 0x58
 800742e:	e005      	b.n	800743c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	aaaaaaab 	.word	0xaaaaaaab
 8007490:	08018b6c 	.word	0x08018b6c
 8007494:	fffffc00 	.word	0xfffffc00

08007498 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d120      	bne.n	80074ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d858      	bhi.n	8007566 <DMA_CheckFifoParam+0xce>
 80074b4:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <DMA_CheckFifoParam+0x24>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074df 	.word	0x080074df
 80074c4:	080074cd 	.word	0x080074cd
 80074c8:	08007567 	.word	0x08007567
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d048      	beq.n	800756a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074dc:	e045      	b.n	800756a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074e6:	d142      	bne.n	800756e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074ec:	e03f      	b.n	800756e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f6:	d123      	bne.n	8007540 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d838      	bhi.n	8007572 <DMA_CheckFifoParam+0xda>
 8007500:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <DMA_CheckFifoParam+0x70>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	08007519 	.word	0x08007519
 800750c:	0800751f 	.word	0x0800751f
 8007510:	08007519 	.word	0x08007519
 8007514:	08007531 	.word	0x08007531
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
        break;
 800751c:	e030      	b.n	8007580 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d025      	beq.n	8007576 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800752e:	e022      	b.n	8007576 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007538:	d11f      	bne.n	800757a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800753e:	e01c      	b.n	800757a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	2b02      	cmp	r3, #2
 8007546:	d902      	bls.n	800754e <DMA_CheckFifoParam+0xb6>
 8007548:	2b03      	cmp	r3, #3
 800754a:	d003      	beq.n	8007554 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800754c:	e018      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	73fb      	strb	r3, [r7, #15]
        break;
 8007552:	e015      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00e      	beq.n	800757e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
    break;
 8007564:	e00b      	b.n	800757e <DMA_CheckFifoParam+0xe6>
        break;
 8007566:	bf00      	nop
 8007568:	e00a      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 800756a:	bf00      	nop
 800756c:	e008      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 800756e:	bf00      	nop
 8007570:	e006      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 8007572:	bf00      	nop
 8007574:	e004      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 8007576:	bf00      	nop
 8007578:	e002      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 800757a:	bf00      	nop
 800757c:	e000      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
    break;
 800757e:	bf00      	nop
    }
  }

  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop

08007590 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a38      	ldr	r2, [pc, #224]	; (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d022      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a36      	ldr	r2, [pc, #216]	; (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01d      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a35      	ldr	r2, [pc, #212]	; (800768c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d018      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a33      	ldr	r2, [pc, #204]	; (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d013      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a32      	ldr	r2, [pc, #200]	; (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00e      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a30      	ldr	r2, [pc, #192]	; (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d009      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2f      	ldr	r2, [pc, #188]	; (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d004      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2d      	ldr	r2, [pc, #180]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d101      	bne.n	80075f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01a      	beq.n	800762e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	3b08      	subs	r3, #8
 8007600:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4b26      	ldr	r3, [pc, #152]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a24      	ldr	r2, [pc, #144]	; (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800761c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2201      	movs	r2, #1
 8007626:	409a      	lsls	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800762c:	e024      	b.n	8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	3b10      	subs	r3, #16
 8007636:	4a1e      	ldr	r2, [pc, #120]	; (80076b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	091b      	lsrs	r3, r3, #4
 800763e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d806      	bhi.n	8007656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d902      	bls.n	8007656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3308      	adds	r3, #8
 8007654:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4b18      	ldr	r3, [pc, #96]	; (80076bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007668:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2201      	movs	r2, #1
 8007672:	409a      	lsls	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	58025408 	.word	0x58025408
 8007688:	5802541c 	.word	0x5802541c
 800768c:	58025430 	.word	0x58025430
 8007690:	58025444 	.word	0x58025444
 8007694:	58025458 	.word	0x58025458
 8007698:	5802546c 	.word	0x5802546c
 800769c:	58025480 	.word	0x58025480
 80076a0:	58025494 	.word	0x58025494
 80076a4:	cccccccd 	.word	0xcccccccd
 80076a8:	16009600 	.word	0x16009600
 80076ac:	58025880 	.word	0x58025880
 80076b0:	aaaaaaab 	.word	0xaaaaaaab
 80076b4:	400204b8 	.word	0x400204b8
 80076b8:	4002040f 	.word	0x4002040f
 80076bc:	10008200 	.word	0x10008200
 80076c0:	40020880 	.word	0x40020880

080076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04a      	beq.n	8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d847      	bhi.n	8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a25      	ldr	r2, [pc, #148]	; (800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d022      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a24      	ldr	r2, [pc, #144]	; (8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d01d      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a22      	ldr	r2, [pc, #136]	; (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d018      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a21      	ldr	r2, [pc, #132]	; (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00e      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1c      	ldr	r2, [pc, #112]	; (8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d101      	bne.n	8007734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4b17      	ldr	r3, [pc, #92]	; (800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800774c:	671a      	str	r2, [r3, #112]	; 0x70
 800774e:	e009      	b.n	8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007762:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3b01      	subs	r3, #1
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007770:	bf00      	nop
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	58025408 	.word	0x58025408
 8007780:	5802541c 	.word	0x5802541c
 8007784:	58025430 	.word	0x58025430
 8007788:	58025444 	.word	0x58025444
 800778c:	58025458 	.word	0x58025458
 8007790:	5802546c 	.word	0x5802546c
 8007794:	58025480 	.word	0x58025480
 8007798:	58025494 	.word	0x58025494
 800779c:	1600963f 	.word	0x1600963f
 80077a0:	58025940 	.word	0x58025940
 80077a4:	1000823f 	.word	0x1000823f
 80077a8:	40020940 	.word	0x40020940

080077ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b098      	sub	sp, #96	; 0x60
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80077b4:	4a84      	ldr	r2, [pc, #528]	; (80079c8 <HAL_FDCAN_Init+0x21c>)
 80077b6:	f107 030c 	add.w	r3, r7, #12
 80077ba:	4611      	mov	r1, r2
 80077bc:	224c      	movs	r2, #76	; 0x4c
 80077be:	4618      	mov	r0, r3
 80077c0:	f00f ffc2 	bl	8017748 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e1c6      	b.n	8007b5c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a7e      	ldr	r2, [pc, #504]	; (80079cc <HAL_FDCAN_Init+0x220>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d106      	bne.n	80077e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fb fa6a 	bl	8002cd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0210 	bic.w	r2, r2, #16
 800780e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007810:	f7fc fa32 	bl	8003c78 <HAL_GetTick>
 8007814:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007816:	e014      	b.n	8007842 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007818:	f7fc fa2e 	bl	8003c78 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b0a      	cmp	r3, #10
 8007824:	d90d      	bls.n	8007842 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800782c:	f043 0201 	orr.w	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2203      	movs	r2, #3
 800783a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e18c      	b.n	8007b5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b08      	cmp	r3, #8
 800784e:	d0e3      	beq.n	8007818 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0201 	orr.w	r2, r2, #1
 800785e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007860:	f7fc fa0a 	bl	8003c78 <HAL_GetTick>
 8007864:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007866:	e014      	b.n	8007892 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007868:	f7fc fa06 	bl	8003c78 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b0a      	cmp	r3, #10
 8007874:	d90d      	bls.n	8007892 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800787c:	f043 0201 	orr.w	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2203      	movs	r2, #3
 800788a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e164      	b.n	8007b5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0e3      	beq.n	8007868 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0202 	orr.w	r2, r2, #2
 80078ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	7c1b      	ldrb	r3, [r3, #16]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d108      	bne.n	80078ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c6:	619a      	str	r2, [r3, #24]
 80078c8:	e007      	b.n	80078da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c5b      	ldrb	r3, [r3, #17]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d108      	bne.n	80078f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078f0:	619a      	str	r2, [r3, #24]
 80078f2:	e007      	b.n	8007904 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007902:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7c9b      	ldrb	r3, [r3, #18]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d108      	bne.n	800791e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800791a:	619a      	str	r2, [r3, #24]
 800791c:	e007      	b.n	800792e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699a      	ldr	r2, [r3, #24]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800792c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007952:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0210 	bic.w	r2, r2, #16
 8007962:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d108      	bne.n	800797e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0204 	orr.w	r2, r2, #4
 800797a:	619a      	str	r2, [r3, #24]
 800797c:	e030      	b.n	80079e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02c      	beq.n	80079e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d020      	beq.n	80079d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800799c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0210 	orr.w	r2, r2, #16
 80079ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d114      	bne.n	80079e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0220 	orr.w	r2, r2, #32
 80079c4:	619a      	str	r2, [r3, #24]
 80079c6:	e00b      	b.n	80079e0 <HAL_FDCAN_Init+0x234>
 80079c8:	08018a58 	.word	0x08018a58
 80079cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0220 	orr.w	r2, r2, #32
 80079de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80079f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a08:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a0a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a14:	d115      	bne.n	8007a42 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	3b01      	subs	r3, #1
 8007a22:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007a24:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007a2e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	3b01      	subs	r3, #1
 8007a38:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007a3e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007a40:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a68:	4413      	add	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d011      	beq.n	8007a92 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007a76:	f023 0107 	bic.w	r1, r3, #7
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	3360      	adds	r3, #96	; 0x60
 8007a82:	443b      	add	r3, r7
 8007a84:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d011      	beq.n	8007abe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007aa2:	f023 0107 	bic.w	r1, r3, #7
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	3360      	adds	r3, #96	; 0x60
 8007aae:	443b      	add	r3, r7
 8007ab0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d012      	beq.n	8007aec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007ace:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	3360      	adds	r3, #96	; 0x60
 8007ada:	443b      	add	r3, r7
 8007adc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007ae0:	011a      	lsls	r2, r3, #4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d012      	beq.n	8007b1a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007afc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	3360      	adds	r3, #96	; 0x60
 8007b08:	443b      	add	r3, r7
 8007b0a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b0e:	021a      	lsls	r2, r3, #8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a11      	ldr	r2, [pc, #68]	; (8007b64 <HAL_FDCAN_Init+0x3b8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d107      	bne.n	8007b34 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f022 0203 	bic.w	r2, r2, #3
 8007b32:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f80b 	bl	8007b68 <FDCAN_CalcultateRamBlockAddresses>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007b58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3760      	adds	r7, #96	; 0x60
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	4000a000 	.word	0x4000a000

08007b68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b74:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b7e:	4ba7      	ldr	r3, [pc, #668]	; (8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	0091      	lsls	r1, r2, #2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b98:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	041a      	lsls	r2, r3, #16
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bbe:	4b97      	ldr	r3, [pc, #604]	; (8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	0091      	lsls	r1, r2, #2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	041a      	lsls	r2, r3, #16
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007c00:	4b86      	ldr	r3, [pc, #536]	; (8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	0091      	lsls	r1, r2, #2
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	041a      	lsls	r2, r3, #16
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007c48:	4b74      	ldr	r3, [pc, #464]	; (8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	0091      	lsls	r1, r2, #2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	430b      	orrs	r3, r1
 8007c56:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6a:	041a      	lsls	r2, r3, #16
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	4413      	add	r3, r2
 8007c86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007c90:	4b62      	ldr	r3, [pc, #392]	; (8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	0091      	lsls	r1, r2, #2
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007caa:	fb02 f303 	mul.w	r3, r2, r3
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007cbc:	4b57      	ldr	r3, [pc, #348]	; (8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	0091      	lsls	r1, r2, #2
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cd6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cde:	041a      	lsls	r2, r3, #16
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007cfe:	4b47      	ldr	r3, [pc, #284]	; (8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	0091      	lsls	r1, r2, #2
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007d18:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d20:	041a      	lsls	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007d34:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3c:	061a      	lsls	r2, r3, #24
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4c:	4b34      	ldr	r3, [pc, #208]	; (8007e20 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007d4e:	4413      	add	r3, r2
 8007d50:	009a      	lsls	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	441a      	add	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	441a      	add	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007d9a:	fb01 f303 	mul.w	r3, r1, r3
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	441a      	add	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007db2:	fb01 f303 	mul.w	r3, r1, r3
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	441a      	add	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	441a      	add	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007de2:	fb01 f303 	mul.w	r3, r1, r3
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	441a      	add	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e12:	4a04      	ldr	r2, [pc, #16]	; (8007e24 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d915      	bls.n	8007e44 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007e18:	e006      	b.n	8007e28 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007e1a:	bf00      	nop
 8007e1c:	ffff0003 	.word	0xffff0003
 8007e20:	10002b00 	.word	0x10002b00
 8007e24:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e2e:	f043 0220 	orr.w	r2, r3, #32
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e010      	b.n	8007e66 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e005      	b.n	8007e58 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3304      	adds	r3, #4
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d3f3      	bcc.n	8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop

08007e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b089      	sub	sp, #36	; 0x24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e82:	4b86      	ldr	r3, [pc, #536]	; (800809c <HAL_GPIO_Init+0x228>)
 8007e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e86:	e18c      	b.n	80081a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	fa01 f303 	lsl.w	r3, r1, r3
 8007e94:	4013      	ands	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 817e 	beq.w	800819c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d005      	beq.n	8007eb8 <HAL_GPIO_Init+0x44>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d130      	bne.n	8007f1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007eee:	2201      	movs	r2, #1
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	4013      	ands	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	091b      	lsrs	r3, r3, #4
 8007f04:	f003 0201 	and.w	r2, r3, #1
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d017      	beq.n	8007f56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	2203      	movs	r2, #3
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	43db      	mvns	r3, r3
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d123      	bne.n	8007faa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	08da      	lsrs	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3208      	adds	r2, #8
 8007f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	220f      	movs	r2, #15
 8007f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7e:	43db      	mvns	r3, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4013      	ands	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	fa02 f303 	lsl.w	r3, r2, r3
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	08da      	lsrs	r2, r3, #3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3208      	adds	r2, #8
 8007fa4:	69b9      	ldr	r1, [r7, #24]
 8007fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f003 0203 	and.w	r2, r3, #3
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80d8 	beq.w	800819c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fec:	4b2c      	ldr	r3, [pc, #176]	; (80080a0 <HAL_GPIO_Init+0x22c>)
 8007fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ff2:	4a2b      	ldr	r2, [pc, #172]	; (80080a0 <HAL_GPIO_Init+0x22c>)
 8007ff4:	f043 0302 	orr.w	r3, r3, #2
 8007ff8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ffc:	4b28      	ldr	r3, [pc, #160]	; (80080a0 <HAL_GPIO_Init+0x22c>)
 8007ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800800a:	4a26      	ldr	r2, [pc, #152]	; (80080a4 <HAL_GPIO_Init+0x230>)
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	089b      	lsrs	r3, r3, #2
 8008010:	3302      	adds	r3, #2
 8008012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	220f      	movs	r2, #15
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	43db      	mvns	r3, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4013      	ands	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a1d      	ldr	r2, [pc, #116]	; (80080a8 <HAL_GPIO_Init+0x234>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d04a      	beq.n	80080cc <HAL_GPIO_Init+0x258>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a1c      	ldr	r2, [pc, #112]	; (80080ac <HAL_GPIO_Init+0x238>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d02b      	beq.n	8008096 <HAL_GPIO_Init+0x222>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a1b      	ldr	r2, [pc, #108]	; (80080b0 <HAL_GPIO_Init+0x23c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d025      	beq.n	8008092 <HAL_GPIO_Init+0x21e>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <HAL_GPIO_Init+0x240>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d01f      	beq.n	800808e <HAL_GPIO_Init+0x21a>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a19      	ldr	r2, [pc, #100]	; (80080b8 <HAL_GPIO_Init+0x244>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d019      	beq.n	800808a <HAL_GPIO_Init+0x216>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a18      	ldr	r2, [pc, #96]	; (80080bc <HAL_GPIO_Init+0x248>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d013      	beq.n	8008086 <HAL_GPIO_Init+0x212>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a17      	ldr	r2, [pc, #92]	; (80080c0 <HAL_GPIO_Init+0x24c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00d      	beq.n	8008082 <HAL_GPIO_Init+0x20e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a16      	ldr	r2, [pc, #88]	; (80080c4 <HAL_GPIO_Init+0x250>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d007      	beq.n	800807e <HAL_GPIO_Init+0x20a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a15      	ldr	r2, [pc, #84]	; (80080c8 <HAL_GPIO_Init+0x254>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d101      	bne.n	800807a <HAL_GPIO_Init+0x206>
 8008076:	2309      	movs	r3, #9
 8008078:	e029      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 800807a:	230a      	movs	r3, #10
 800807c:	e027      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 800807e:	2307      	movs	r3, #7
 8008080:	e025      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 8008082:	2306      	movs	r3, #6
 8008084:	e023      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 8008086:	2305      	movs	r3, #5
 8008088:	e021      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 800808a:	2304      	movs	r3, #4
 800808c:	e01f      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 800808e:	2303      	movs	r3, #3
 8008090:	e01d      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 8008092:	2302      	movs	r3, #2
 8008094:	e01b      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 8008096:	2301      	movs	r3, #1
 8008098:	e019      	b.n	80080ce <HAL_GPIO_Init+0x25a>
 800809a:	bf00      	nop
 800809c:	58000080 	.word	0x58000080
 80080a0:	58024400 	.word	0x58024400
 80080a4:	58000400 	.word	0x58000400
 80080a8:	58020000 	.word	0x58020000
 80080ac:	58020400 	.word	0x58020400
 80080b0:	58020800 	.word	0x58020800
 80080b4:	58020c00 	.word	0x58020c00
 80080b8:	58021000 	.word	0x58021000
 80080bc:	58021400 	.word	0x58021400
 80080c0:	58021800 	.word	0x58021800
 80080c4:	58021c00 	.word	0x58021c00
 80080c8:	58022400 	.word	0x58022400
 80080cc:	2300      	movs	r3, #0
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	f002 0203 	and.w	r2, r2, #3
 80080d4:	0092      	lsls	r2, r2, #2
 80080d6:	4093      	lsls	r3, r2
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	4313      	orrs	r3, r2
 80080dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080de:	4938      	ldr	r1, [pc, #224]	; (80081c0 <HAL_GPIO_Init+0x34c>)
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	089b      	lsrs	r3, r3, #2
 80080e4:	3302      	adds	r3, #2
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	43db      	mvns	r3, r3
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	4013      	ands	r3, r2
 80080fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800811a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	43db      	mvns	r3, r3
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	4013      	ands	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	43db      	mvns	r3, r3
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	4013      	ands	r3, r2
 8008156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	43db      	mvns	r3, r3
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	4013      	ands	r3, r2
 8008180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	3301      	adds	r3, #1
 80081a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f47f ae6b 	bne.w	8007e88 <HAL_GPIO_Init+0x14>
  }
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	3724      	adds	r7, #36	; 0x24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	58000400 	.word	0x58000400

080081c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	887b      	ldrh	r3, [r7, #2]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
 80081e0:	e001      	b.n	80081e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
 8008200:	4613      	mov	r3, r2
 8008202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008204:	787b      	ldrb	r3, [r7, #1]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800820a:	887a      	ldrh	r2, [r7, #2]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008210:	e003      	b.n	800821a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008212:	887b      	ldrh	r3, [r7, #2]
 8008214:	041a      	lsls	r2, r3, #16
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	619a      	str	r2, [r3, #24]
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e07f      	b.n	800833a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7fa fda8 	bl	8002da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2224      	movs	r2, #36	; 0x24
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008278:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008288:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d107      	bne.n	80082a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	e006      	b.n	80082b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80082ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d104      	bne.n	80082c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6859      	ldr	r1, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <HAL_I2C_Init+0x11c>)
 80082ce:	430b      	orrs	r3, r1
 80082d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69d9      	ldr	r1, [r3, #28]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	02008000 	.word	0x02008000

08008348 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	68f9      	ldr	r1, [r7, #12]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
  }
}
 8008374:	bf00      	nop
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b20      	cmp	r3, #32
 8008390:	d138      	bne.n	8008404 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008398:	2b01      	cmp	r3, #1
 800839a:	d101      	bne.n	80083a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800839c:	2302      	movs	r3, #2
 800839e:	e032      	b.n	8008406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2224      	movs	r2, #36	; 0x24
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e000      	b.n	8008406 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008404:	2302      	movs	r3, #2
  }
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b20      	cmp	r3, #32
 8008426:	d139      	bne.n	800849c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008432:	2302      	movs	r3, #2
 8008434:	e033      	b.n	800849e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2224      	movs	r2, #36	; 0x24
 8008442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008464:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0201 	orr.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	e000      	b.n	800849e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800849c:	2302      	movs	r3, #2
  }
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80084aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ac:	b08f      	sub	sp, #60	; 0x3c
 80084ae:	af0a      	add	r7, sp, #40	; 0x28
 80084b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e116      	b.n	80086ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f00e fda0 	bl	801701c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2203      	movs	r2, #3
 80084e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f00a fea5 	bl	801324a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	687e      	ldr	r6, [r7, #4]
 8008508:	466d      	mov	r5, sp
 800850a:	f106 0410 	add.w	r4, r6, #16
 800850e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800851a:	e885 0003 	stmia.w	r5, {r0, r1}
 800851e:	1d33      	adds	r3, r6, #4
 8008520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008522:	6838      	ldr	r0, [r7, #0]
 8008524:	f00a fd70 	bl	8013008 <USB_CoreInit>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e0d7      	b.n	80086ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f00a fe93 	bl	801326c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
 800854a:	e04a      	b.n	80085e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800854c:	7bfa      	ldrb	r2, [r7, #15]
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	333d      	adds	r3, #61	; 0x3d
 800855c:	2201      	movs	r2, #1
 800855e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008560:	7bfa      	ldrb	r2, [r7, #15]
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	333c      	adds	r3, #60	; 0x3c
 8008570:	7bfa      	ldrb	r2, [r7, #15]
 8008572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008574:	7bfa      	ldrb	r2, [r7, #15]
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	b298      	uxth	r0, r3
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	3356      	adds	r3, #86	; 0x56
 8008588:	4602      	mov	r2, r0
 800858a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800858c:	7bfa      	ldrb	r2, [r7, #15]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	3340      	adds	r3, #64	; 0x40
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80085a0:	7bfa      	ldrb	r2, [r7, #15]
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	4613      	mov	r3, r2
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	3344      	adds	r3, #68	; 0x44
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80085b4:	7bfa      	ldrb	r2, [r7, #15]
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4613      	mov	r3, r2
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	3348      	adds	r3, #72	; 0x48
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80085c8:	7bfa      	ldrb	r2, [r7, #15]
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	4613      	mov	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	334c      	adds	r3, #76	; 0x4c
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	3301      	adds	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
 80085e2:	7bfa      	ldrb	r2, [r7, #15]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3af      	bcc.n	800854c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e044      	b.n	800867c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80085f2:	7bfa      	ldrb	r2, [r7, #15]
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	4613      	mov	r3, r2
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	440b      	add	r3, r1
 8008600:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008608:	7bfa      	ldrb	r2, [r7, #15]
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800861a:	7bfa      	ldrb	r2, [r7, #15]
 800861c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800861e:	7bfa      	ldrb	r2, [r7, #15]
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008634:	7bfa      	ldrb	r2, [r7, #15]
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800864a:	7bfa      	ldrb	r2, [r7, #15]
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	3301      	adds	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]
 800867c:	7bfa      	ldrb	r2, [r7, #15]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d3b5      	bcc.n	80085f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	687e      	ldr	r6, [r7, #4]
 800868e:	466d      	mov	r5, sp
 8008690:	f106 0410 	add.w	r4, r6, #16
 8008694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800869a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800869c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80086a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80086a4:	1d33      	adds	r3, r6, #4
 80086a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086a8:	6838      	ldr	r0, [r7, #0]
 80086aa:	f00a fe2b 	bl	8013304 <USB_DevInit>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e014      	b.n	80086ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d102      	bne.n	80086de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 f96f 	bl	80099bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f00b fe6d 	bl	80143c2 <USB_DevDisconnect>

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_PCD_Start+0x1c>
 800870a:	2302      	movs	r3, #2
 800870c:	e022      	b.n	8008754 <HAL_PCD_Start+0x62>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008726:	2b01      	cmp	r3, #1
 8008728:	d105      	bne.n	8008736 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f00a fd74 	bl	8013228 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4618      	mov	r0, r3
 8008746:	f00b fe1b 	bl	8014380 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800875c:	b590      	push	{r4, r7, lr}
 800875e:	b08d      	sub	sp, #52	; 0x34
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	f00b fed9 	bl	801452a <USB_GetMode>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	f040 84b7 	bne.w	80090ee <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4618      	mov	r0, r3
 8008786:	f00b fe3d 	bl	8014404 <USB_ReadInterrupts>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 84ad 	beq.w	80090ec <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	0a1b      	lsrs	r3, r3, #8
 800879c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f00b fe2a 	bl	8014404 <USB_ReadInterrupts>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d107      	bne.n	80087ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695a      	ldr	r2, [r3, #20]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f002 0202 	and.w	r2, r2, #2
 80087c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f00b fe18 	bl	8014404 <USB_ReadInterrupts>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d161      	bne.n	80088a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0210 	bic.w	r2, r2, #16
 80087ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	f003 020f 	and.w	r2, r3, #15
 80087fa:	4613      	mov	r3, r2
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	4413      	add	r3, r2
 800880a:	3304      	adds	r3, #4
 800880c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	0c5b      	lsrs	r3, r3, #17
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	2b02      	cmp	r3, #2
 8008818:	d124      	bne.n	8008864 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008820:	4013      	ands	r3, r2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d035      	beq.n	8008892 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	091b      	lsrs	r3, r3, #4
 800882e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008834:	b29b      	uxth	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	6a38      	ldr	r0, [r7, #32]
 800883a:	f00b fc4f 	bl	80140dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	091b      	lsrs	r3, r3, #4
 8008846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800884a:	441a      	add	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	695a      	ldr	r2, [r3, #20]
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	091b      	lsrs	r3, r3, #4
 8008858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800885c:	441a      	add	r2, r3
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	615a      	str	r2, [r3, #20]
 8008862:	e016      	b.n	8008892 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	0c5b      	lsrs	r3, r3, #17
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	2b06      	cmp	r3, #6
 800886e:	d110      	bne.n	8008892 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008876:	2208      	movs	r2, #8
 8008878:	4619      	mov	r1, r3
 800887a:	6a38      	ldr	r0, [r7, #32]
 800887c:	f00b fc2e 	bl	80140dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	695a      	ldr	r2, [r3, #20]
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	091b      	lsrs	r3, r3, #4
 8008888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800888c:	441a      	add	r2, r3
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0210 	orr.w	r2, r2, #16
 80088a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f00b fdac 	bl	8014404 <USB_ReadInterrupts>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088b6:	f040 80a7 	bne.w	8008a08 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f00b fdb1 	bl	801442a <USB_ReadDevAllOutEpInterrupt>
 80088c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80088ca:	e099      	b.n	8008a00 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 808e 	beq.w	80089f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f00b fdd5 	bl	8014492 <USB_ReadDevOutEPInterrupt>
 80088e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00c      	beq.n	800890e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	461a      	mov	r2, r3
 8008902:	2301      	movs	r3, #1
 8008904:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fed1 	bl	80096b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008924:	461a      	mov	r2, r3
 8008926:	2308      	movs	r3, #8
 8008928:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800892a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 ffa7 	bl	8009880 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f003 0310 	and.w	r3, r3, #16
 8008938:	2b00      	cmp	r3, #0
 800893a:	d008      	beq.n	800894e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008948:	461a      	mov	r2, r3
 800894a:	2310      	movs	r3, #16
 800894c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d030      	beq.n	80089ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008960:	2b80      	cmp	r3, #128	; 0x80
 8008962:	d109      	bne.n	8008978 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008976:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897a:	4613      	mov	r3, r2
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	4413      	add	r3, r2
 800898a:	3304      	adds	r3, #4
 800898c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	78db      	ldrb	r3, [r3, #3]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d108      	bne.n	80089a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2200      	movs	r2, #0
 800899a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f00e fc32 	bl	801720c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	461a      	mov	r2, r3
 80089b6:	2302      	movs	r3, #2
 80089b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d008      	beq.n	80089d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d0:	461a      	mov	r2, r3
 80089d2:	2320      	movs	r3, #32
 80089d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	461a      	mov	r2, r3
 80089ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	3301      	adds	r3, #1
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	085b      	lsrs	r3, r3, #1
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f47f af62 	bne.w	80088cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f00b fcf9 	bl	8014404 <USB_ReadInterrupts>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a1c:	f040 80db 	bne.w	8008bd6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f00b fd1a 	bl	801445e <USB_ReadDevAllInEpInterrupt>
 8008a2a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008a30:	e0cd      	b.n	8008bce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80c2 	beq.w	8008bc2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f00b fd40 	bl	80144ce <USB_ReadDevInEPInterrupt>
 8008a4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d057      	beq.n	8008b0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	2201      	movs	r2, #1
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	43db      	mvns	r3, r3
 8008a74:	69f9      	ldr	r1, [r7, #28]
 8008a76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d132      	bne.n	8008afe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	3348      	adds	r3, #72	; 0x48
 8008aa8:	6819      	ldr	r1, [r3, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	4613      	mov	r3, r2
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4403      	add	r3, r0
 8008ab8:	3344      	adds	r3, #68	; 0x44
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4419      	add	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4403      	add	r3, r0
 8008acc:	3348      	adds	r3, #72	; 0x48
 8008ace:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d113      	bne.n	8008afe <HAL_PCD_IRQHandler+0x3a2>
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ada:	4613      	mov	r3, r2
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	440b      	add	r3, r1
 8008ae4:	334c      	adds	r3, #76	; 0x4c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d108      	bne.n	8008afe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008af6:	461a      	mov	r2, r3
 8008af8:	2101      	movs	r1, #1
 8008afa:	f00b fd49 	bl	8014590 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f00e fafc 	bl	8017102 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d008      	beq.n	8008b26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	461a      	mov	r2, r3
 8008b22:	2308      	movs	r3, #8
 8008b24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d008      	beq.n	8008b42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	2310      	movs	r3, #16
 8008b40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d008      	beq.n	8008b5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b58:	461a      	mov	r2, r3
 8008b5a:	2340      	movs	r3, #64	; 0x40
 8008b5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d023      	beq.n	8008bb0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b6a:	6a38      	ldr	r0, [r7, #32]
 8008b6c:	f00a fd28 	bl	80135c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	4613      	mov	r3, r2
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	3338      	adds	r3, #56	; 0x38
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	4413      	add	r3, r2
 8008b80:	3304      	adds	r3, #4
 8008b82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	78db      	ldrb	r3, [r3, #3]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d108      	bne.n	8008b9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f00e fb49 	bl	8017230 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008baa:	461a      	mov	r2, r3
 8008bac:	2302      	movs	r3, #2
 8008bae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fcea 	bl	8009596 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f47f af2e 	bne.w	8008a32 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f00b fc12 	bl	8014404 <USB_ReadInterrupts>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bea:	d122      	bne.n	8008c32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bfa:	f023 0301 	bic.w	r3, r3, #1
 8008bfe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d108      	bne.n	8008c1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008c12:	2100      	movs	r1, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fef5 	bl	8009a04 <HAL_PCDEx_LPM_Callback>
 8008c1a:	e002      	b.n	8008c22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f00e fae7 	bl	80171f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695a      	ldr	r2, [r3, #20]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f00b fbe4 	bl	8014404 <USB_ReadInterrupts>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c46:	d112      	bne.n	8008c6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d102      	bne.n	8008c5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f00e faa3 	bl	80171a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695a      	ldr	r2, [r3, #20]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f00b fbc6 	bl	8014404 <USB_ReadInterrupts>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c82:	d121      	bne.n	8008cc8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	695a      	ldr	r2, [r3, #20]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008c92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d111      	bne.n	8008cc2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cac:	089b      	lsrs	r3, r3, #2
 8008cae:	f003 020f 	and.w	r2, r3, #15
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008cb8:	2101      	movs	r1, #1
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fea2 	bl	8009a04 <HAL_PCDEx_LPM_Callback>
 8008cc0:	e002      	b.n	8008cc8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f00e fa6e 	bl	80171a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f00b fb99 	bl	8014404 <USB_ReadInterrupts>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cdc:	f040 80b7 	bne.w	8008e4e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2110      	movs	r1, #16
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f00a fc60 	bl	80135c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d00:	2300      	movs	r3, #0
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d04:	e046      	b.n	8008d94 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d12:	461a      	mov	r2, r3
 8008d14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d46:	461a      	mov	r2, r3
 8008d48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5e:	0151      	lsls	r1, r2, #5
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	440a      	add	r2, r1
 8008d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	3301      	adds	r3, #1
 8008d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d3b3      	bcc.n	8008d06 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008db0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d016      	beq.n	8008de8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc4:	69fa      	ldr	r2, [r7, #28]
 8008dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dca:	f043 030b 	orr.w	r3, r3, #11
 8008dce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008de0:	f043 030b 	orr.w	r3, r3, #11
 8008de4:	6453      	str	r3, [r2, #68]	; 0x44
 8008de6:	e015      	b.n	8008e14 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dee:	695a      	ldr	r2, [r3, #20]
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df6:	4619      	mov	r1, r3
 8008df8:	f242 032b 	movw	r3, #8235	; 0x202b
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e0e:	f043 030b 	orr.w	r3, r3, #11
 8008e12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f00b fba9 	bl	8014590 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695a      	ldr	r2, [r3, #20]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f00b fad6 	bl	8014404 <USB_ReadInterrupts>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e62:	d124      	bne.n	8008eae <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f00b fb6d 	bl	8014548 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f00a fc21 	bl	80136ba <USB_GetDevSpeed>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681c      	ldr	r4, [r3, #0]
 8008e84:	f001 fd88 	bl	800a998 <HAL_RCC_GetHCLKFreq>
 8008e88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	461a      	mov	r2, r3
 8008e92:	4620      	mov	r0, r4
 8008e94:	f00a f926 	bl	80130e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f00e f95a 	bl	8017152 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695a      	ldr	r2, [r3, #20]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f00b faa6 	bl	8014404 <USB_ReadInterrupts>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b08      	cmp	r3, #8
 8008ec0:	d10a      	bne.n	8008ed8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f00e f937 	bl	8017136 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695a      	ldr	r2, [r3, #20]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f002 0208 	and.w	r2, r2, #8
 8008ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f00b fa91 	bl	8014404 <USB_ReadInterrupts>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee8:	2b80      	cmp	r3, #128	; 0x80
 8008eea:	d122      	bne.n	8008f32 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ef8:	2301      	movs	r3, #1
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
 8008efc:	e014      	b.n	8008f28 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f02:	4613      	mov	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d105      	bne.n	8008f22 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fb09 	bl	8009534 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	3301      	adds	r3, #1
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d3e5      	bcc.n	8008efe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f00b fa64 	bl	8014404 <USB_ReadInterrupts>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f46:	d13b      	bne.n	8008fc0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f48:	2301      	movs	r3, #1
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f4c:	e02b      	b.n	8008fa6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f62:	4613      	mov	r3, r2
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	3340      	adds	r3, #64	; 0x40
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d115      	bne.n	8008fa0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008f74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da12      	bge.n	8008fa0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7e:	4613      	mov	r3, r2
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	440b      	add	r3, r1
 8008f88:	333f      	adds	r3, #63	; 0x3f
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 faca 	bl	8009534 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d3ce      	bcc.n	8008f4e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695a      	ldr	r2, [r3, #20]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f00b fa1d 	bl	8014404 <USB_ReadInterrupts>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fd4:	d155      	bne.n	8009082 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fda:	e045      	b.n	8009068 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	4413      	add	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d12e      	bne.n	8009062 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009004:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009006:	2b00      	cmp	r3, #0
 8009008:	da2b      	bge.n	8009062 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009016:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800901a:	429a      	cmp	r2, r3
 800901c:	d121      	bne.n	8009062 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009022:	4613      	mov	r3, r2
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009030:	2201      	movs	r2, #1
 8009032:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800905e:	6053      	str	r3, [r2, #4]
            break;
 8009060:	e007      	b.n	8009072 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	3301      	adds	r3, #1
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906e:	429a      	cmp	r2, r3
 8009070:	d3b4      	bcc.n	8008fdc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	695a      	ldr	r2, [r3, #20]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f00b f9bc 	bl	8014404 <USB_ReadInterrupts>
 800908c:	4603      	mov	r3, r0
 800908e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009096:	d10a      	bne.n	80090ae <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f00e f8db 	bl	8017254 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695a      	ldr	r2, [r3, #20]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80090ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f00b f9a6 	bl	8014404 <USB_ReadInterrupts>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d115      	bne.n	80090ee <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f00e f8cb 	bl	8017270 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6859      	ldr	r1, [r3, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	605a      	str	r2, [r3, #4]
 80090ea:	e000      	b.n	80090ee <HAL_PCD_IRQHandler+0x992>
      return;
 80090ec:	bf00      	nop
    }
  }
}
 80090ee:	3734      	adds	r7, #52	; 0x34
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd90      	pop	{r4, r7, pc}

080090f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_PCD_SetAddress+0x1a>
 800910a:	2302      	movs	r3, #2
 800910c:	e013      	b.n	8009136 <HAL_PCD_SetAddress+0x42>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	78fa      	ldrb	r2, [r7, #3]
 800911a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f00b f904 	bl	8014334 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	461a      	mov	r2, r3
 800914c:	4603      	mov	r3, r0
 800914e:	70fb      	strb	r3, [r7, #3]
 8009150:	460b      	mov	r3, r1
 8009152:	803b      	strh	r3, [r7, #0]
 8009154:	4613      	mov	r3, r2
 8009156:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800915c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009160:	2b00      	cmp	r3, #0
 8009162:	da0f      	bge.n	8009184 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	f003 020f 	and.w	r2, r3, #15
 800916a:	4613      	mov	r3, r2
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	3338      	adds	r3, #56	; 0x38
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	705a      	strb	r2, [r3, #1]
 8009182:	e00f      	b.n	80091a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	f003 020f 	and.w	r2, r3, #15
 800918a:	4613      	mov	r3, r2
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	3304      	adds	r3, #4
 800919c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80091b0:	883a      	ldrh	r2, [r7, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	78ba      	ldrb	r2, [r7, #2]
 80091ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80091ce:	78bb      	ldrb	r3, [r7, #2]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d102      	bne.n	80091da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <HAL_PCD_EP_Open+0xaa>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e00e      	b.n	8009206 <HAL_PCD_EP_Open+0xc8>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68f9      	ldr	r1, [r7, #12]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f00a fa84 	bl	8013704 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009204:	7afb      	ldrb	r3, [r7, #11]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800921a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800921e:	2b00      	cmp	r3, #0
 8009220:	da0f      	bge.n	8009242 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	f003 020f 	and.w	r2, r3, #15
 8009228:	4613      	mov	r3, r2
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	3338      	adds	r3, #56	; 0x38
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	3304      	adds	r3, #4
 8009238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	705a      	strb	r2, [r3, #1]
 8009240:	e00f      	b.n	8009262 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	f003 020f 	and.w	r2, r3, #15
 8009248:	4613      	mov	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	4413      	add	r3, r2
 8009258:	3304      	adds	r3, #4
 800925a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	b2da      	uxtb	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_PCD_EP_Close+0x6e>
 8009278:	2302      	movs	r3, #2
 800927a:	e00e      	b.n	800929a <HAL_PCD_EP_Close+0x8c>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68f9      	ldr	r1, [r7, #12]
 800928a:	4618      	mov	r0, r3
 800928c:	f00a fac2 	bl	8013814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
 80092ae:	460b      	mov	r3, r1
 80092b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092b2:	7afb      	ldrb	r3, [r7, #11]
 80092b4:	f003 020f 	and.w	r2, r3, #15
 80092b8:	4613      	mov	r3, r2
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	3304      	adds	r3, #4
 80092ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2200      	movs	r2, #0
 80092dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2200      	movs	r2, #0
 80092e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	f003 030f 	and.w	r3, r3, #15
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d102      	bne.n	80092fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	461a      	mov	r2, r3
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	f00a fb5e 	bl	80139cc <USB_EPStartXfer>

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	f003 020f 	and.w	r2, r3, #15
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800933c:	681b      	ldr	r3, [r3, #0]
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
 8009356:	460b      	mov	r3, r1
 8009358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	f003 020f 	and.w	r2, r3, #15
 8009360:	4613      	mov	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	3338      	adds	r3, #56	; 0x38
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	3304      	adds	r3, #4
 8009370:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2200      	movs	r2, #0
 8009382:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2201      	movs	r2, #1
 8009388:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	f003 030f 	and.w	r3, r3, #15
 8009390:	b2da      	uxtb	r2, r3
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d102      	bne.n	80093a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	461a      	mov	r2, r3
 80093b0:	6979      	ldr	r1, [r7, #20]
 80093b2:	f00a fb0b 	bl	80139cc <USB_EPStartXfer>

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3718      	adds	r7, #24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	f003 020f 	and.w	r2, r3, #15
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d901      	bls.n	80093de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e050      	b.n	8009480 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80093de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	da0f      	bge.n	8009406 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	f003 020f 	and.w	r2, r3, #15
 80093ec:	4613      	mov	r3, r2
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	3338      	adds	r3, #56	; 0x38
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	4413      	add	r3, r2
 80093fa:	3304      	adds	r3, #4
 80093fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	705a      	strb	r2, [r3, #1]
 8009404:	e00d      	b.n	8009422 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009406:	78fa      	ldrb	r2, [r7, #3]
 8009408:	4613      	mov	r3, r2
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	3304      	adds	r3, #4
 800941a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	f003 030f 	and.w	r3, r3, #15
 800942e:	b2da      	uxtb	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800943a:	2b01      	cmp	r3, #1
 800943c:	d101      	bne.n	8009442 <HAL_PCD_EP_SetStall+0x82>
 800943e:	2302      	movs	r3, #2
 8009440:	e01e      	b.n	8009480 <HAL_PCD_EP_SetStall+0xc0>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	4618      	mov	r0, r3
 8009452:	f00a fe9b 	bl	801418c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6818      	ldr	r0, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	b2d9      	uxtb	r1, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009470:	461a      	mov	r2, r3
 8009472:	f00b f88d 	bl	8014590 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	f003 020f 	and.w	r2, r3, #15
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d901      	bls.n	80094a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e042      	b.n	800952c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80094a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da0f      	bge.n	80094ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094ae:	78fb      	ldrb	r3, [r7, #3]
 80094b0:	f003 020f 	and.w	r2, r3, #15
 80094b4:	4613      	mov	r3, r2
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	3338      	adds	r3, #56	; 0x38
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	705a      	strb	r2, [r3, #1]
 80094cc:	e00f      	b.n	80094ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	f003 020f 	and.w	r2, r3, #15
 80094d4:	4613      	mov	r3, r2
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	4413      	add	r3, r2
 80094e4:	3304      	adds	r3, #4
 80094e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <HAL_PCD_EP_ClrStall+0x86>
 800950a:	2302      	movs	r3, #2
 800950c:	e00e      	b.n	800952c <HAL_PCD_EP_ClrStall+0xa4>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68f9      	ldr	r1, [r7, #12]
 800951c:	4618      	mov	r0, r3
 800951e:	f00a fea3 	bl	8014268 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009544:	2b00      	cmp	r3, #0
 8009546:	da0c      	bge.n	8009562 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009548:	78fb      	ldrb	r3, [r7, #3]
 800954a:	f003 020f 	and.w	r2, r3, #15
 800954e:	4613      	mov	r3, r2
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	3338      	adds	r3, #56	; 0x38
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4413      	add	r3, r2
 800955c:	3304      	adds	r3, #4
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	e00c      	b.n	800957c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	f003 020f 	and.w	r2, r3, #15
 8009568:	4613      	mov	r3, r2
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	3304      	adds	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68f9      	ldr	r1, [r7, #12]
 8009582:	4618      	mov	r0, r3
 8009584:	f00a fcc2 	bl	8013f0c <USB_EPStopXfer>
 8009588:	4603      	mov	r3, r0
 800958a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800958c:	7afb      	ldrb	r3, [r7, #11]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b08a      	sub	sp, #40	; 0x28
 800959a:	af02      	add	r7, sp, #8
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4613      	mov	r3, r2
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	3338      	adds	r3, #56	; 0x38
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4413      	add	r3, r2
 80095ba:	3304      	adds	r3, #4
 80095bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	695a      	ldr	r2, [r3, #20]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d901      	bls.n	80095ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e06c      	b.n	80096a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d902      	bls.n	80095ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	3303      	adds	r3, #3
 80095ee:	089b      	lsrs	r3, r3, #2
 80095f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80095f2:	e02b      	b.n	800964c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	69fa      	ldr	r2, [r7, #28]
 8009606:	429a      	cmp	r2, r3
 8009608:	d902      	bls.n	8009610 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	3303      	adds	r3, #3
 8009614:	089b      	lsrs	r3, r3, #2
 8009616:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68d9      	ldr	r1, [r3, #12]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	b2da      	uxtb	r2, r3
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009628:	b2db      	uxtb	r3, r3
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4603      	mov	r3, r0
 800962e:	6978      	ldr	r0, [r7, #20]
 8009630:	f00a fd16 	bl	8014060 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	441a      	add	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	441a      	add	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	429a      	cmp	r2, r3
 8009660:	d809      	bhi.n	8009676 <PCD_WriteEmptyTxFifo+0xe0>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	695a      	ldr	r2, [r3, #20]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800966a:	429a      	cmp	r2, r3
 800966c:	d203      	bcs.n	8009676 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1be      	bne.n	80095f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	429a      	cmp	r2, r3
 8009680:	d811      	bhi.n	80096a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	2201      	movs	r2, #1
 800968a:	fa02 f303 	lsl.w	r3, r2, r3
 800968e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	43db      	mvns	r3, r3
 800969c:	6939      	ldr	r1, [r7, #16]
 800969e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096a2:	4013      	ands	r3, r2
 80096a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3720      	adds	r7, #32
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	333c      	adds	r3, #60	; 0x3c
 80096c8:	3304      	adds	r3, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d17b      	bne.n	80097de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d015      	beq.n	800971c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	4a61      	ldr	r2, [pc, #388]	; (8009878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	f240 80b9 	bls.w	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80b3 	beq.w	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009712:	461a      	mov	r2, r3
 8009714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009718:	6093      	str	r3, [r2, #8]
 800971a:	e0a7      	b.n	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f003 0320 	and.w	r3, r3, #32
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009732:	461a      	mov	r2, r3
 8009734:	2320      	movs	r3, #32
 8009736:	6093      	str	r3, [r2, #8]
 8009738:	e098      	b.n	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	f040 8093 	bne.w	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	4a4b      	ldr	r2, [pc, #300]	; (8009878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d90f      	bls.n	800976e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00a      	beq.n	800976e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009764:	461a      	mov	r2, r3
 8009766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800976a:	6093      	str	r3, [r2, #8]
 800976c:	e07e      	b.n	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	4413      	add	r3, r2
 8009780:	3304      	adds	r3, #4
 8009782:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a1a      	ldr	r2, [r3, #32]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	0159      	lsls	r1, r3, #5
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	440b      	add	r3, r1
 8009790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800979a:	1ad2      	subs	r2, r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d114      	bne.n	80097d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d109      	bne.n	80097c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097b8:	461a      	mov	r2, r3
 80097ba:	2101      	movs	r1, #1
 80097bc:	f00a fee8 	bl	8014590 <USB_EP0_OutStart>
 80097c0:	e006      	b.n	80097d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	441a      	add	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f00d fc78 	bl	80170cc <HAL_PCD_DataOutStageCallback>
 80097dc:	e046      	b.n	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	4a26      	ldr	r2, [pc, #152]	; (800987c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d124      	bne.n	8009830 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	461a      	mov	r2, r3
 80097fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009802:	6093      	str	r3, [r2, #8]
 8009804:	e032      	b.n	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	461a      	mov	r2, r3
 800981e:	2320      	movs	r3, #32
 8009820:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f00d fc4f 	bl	80170cc <HAL_PCD_DataOutStageCallback>
 800982e:	e01d      	b.n	800986c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d114      	bne.n	8009860 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	4613      	mov	r3, r2
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d108      	bne.n	8009860 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009858:	461a      	mov	r2, r3
 800985a:	2100      	movs	r1, #0
 800985c:	f00a fe98 	bl	8014590 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f00d fc30 	bl	80170cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3720      	adds	r7, #32
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	4f54300a 	.word	0x4f54300a
 800987c:	4f54310a 	.word	0x4f54310a

08009880 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	333c      	adds	r3, #60	; 0x3c
 8009898:	3304      	adds	r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4a15      	ldr	r2, [pc, #84]	; (8009908 <PCD_EP_OutSetupPacket_int+0x88>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d90e      	bls.n	80098d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d009      	beq.n	80098d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098cc:	461a      	mov	r2, r3
 80098ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f00d fbe7 	bl	80170a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4a0a      	ldr	r2, [pc, #40]	; (8009908 <PCD_EP_OutSetupPacket_int+0x88>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d90c      	bls.n	80098fc <PCD_EP_OutSetupPacket_int+0x7c>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d108      	bne.n	80098fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098f4:	461a      	mov	r2, r3
 80098f6:	2101      	movs	r1, #1
 80098f8:	f00a fe4a 	bl	8014590 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	4f54300a 	.word	0x4f54300a

0800990c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
 8009918:	4613      	mov	r3, r2
 800991a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d107      	bne.n	800993a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800992a:	883b      	ldrh	r3, [r7, #0]
 800992c:	0419      	lsls	r1, r3, #16
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	430a      	orrs	r2, r1
 8009936:	629a      	str	r2, [r3, #40]	; 0x28
 8009938:	e028      	b.n	800998c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009940:	0c1b      	lsrs	r3, r3, #16
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	4413      	add	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
 800994c:	e00d      	b.n	800996a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	3340      	adds	r3, #64	; 0x40
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	0c1b      	lsrs	r3, r3, #16
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	3301      	adds	r3, #1
 8009968:	73fb      	strb	r3, [r7, #15]
 800996a:	7bfa      	ldrb	r2, [r7, #15]
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	3b01      	subs	r3, #1
 8009970:	429a      	cmp	r2, r3
 8009972:	d3ec      	bcc.n	800994e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009974:	883b      	ldrh	r3, [r7, #0]
 8009976:	0418      	lsls	r0, r3, #16
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6819      	ldr	r1, [r3, #0]
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	3b01      	subs	r3, #1
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	4302      	orrs	r2, r0
 8009984:	3340      	adds	r3, #64	; 0x40
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	440b      	add	r3, r1
 800998a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	887a      	ldrh	r2, [r7, #2]
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099ea:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <HAL_PCDEx_ActivateLPM+0x44>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	10000003 	.word	0x10000003

08009a04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009a24:	4b19      	ldr	r3, [pc, #100]	; (8009a8c <HAL_PWREx_ConfigSupply+0x70>)
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	f003 0304 	and.w	r3, r3, #4
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d00a      	beq.n	8009a46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a30:	4b16      	ldr	r3, [pc, #88]	; (8009a8c <HAL_PWREx_ConfigSupply+0x70>)
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f003 0307 	and.w	r3, r3, #7
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d001      	beq.n	8009a42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e01f      	b.n	8009a82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	e01d      	b.n	8009a82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a46:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <HAL_PWREx_ConfigSupply+0x70>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f023 0207 	bic.w	r2, r3, #7
 8009a4e:	490f      	ldr	r1, [pc, #60]	; (8009a8c <HAL_PWREx_ConfigSupply+0x70>)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a56:	f7fa f90f 	bl	8003c78 <HAL_GetTick>
 8009a5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a5c:	e009      	b.n	8009a72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a5e:	f7fa f90b 	bl	8003c78 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a6c:	d901      	bls.n	8009a72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e007      	b.n	8009a82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <HAL_PWREx_ConfigSupply+0x70>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a7e:	d1ee      	bne.n	8009a5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	58024800 	.word	0x58024800

08009a90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009a94:	4b05      	ldr	r3, [pc, #20]	; (8009aac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	4a04      	ldr	r2, [pc, #16]	; (8009aac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a9e:	60d3      	str	r3, [r2, #12]
}
 8009aa0:	bf00      	nop
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	58024800 	.word	0x58024800

08009ab0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08c      	sub	sp, #48	; 0x30
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e3c8      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 8087 	beq.w	8009bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ad0:	4b88      	ldr	r3, [pc, #544]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ada:	4b86      	ldr	r3, [pc, #536]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ade:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	2b10      	cmp	r3, #16
 8009ae4:	d007      	beq.n	8009af6 <HAL_RCC_OscConfig+0x46>
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	2b18      	cmp	r3, #24
 8009aea:	d110      	bne.n	8009b0e <HAL_RCC_OscConfig+0x5e>
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d10b      	bne.n	8009b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009af6:	4b7f      	ldr	r3, [pc, #508]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d06c      	beq.n	8009bdc <HAL_RCC_OscConfig+0x12c>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d168      	bne.n	8009bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e3a2      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b16:	d106      	bne.n	8009b26 <HAL_RCC_OscConfig+0x76>
 8009b18:	4b76      	ldr	r3, [pc, #472]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a75      	ldr	r2, [pc, #468]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	e02e      	b.n	8009b84 <HAL_RCC_OscConfig+0xd4>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10c      	bne.n	8009b48 <HAL_RCC_OscConfig+0x98>
 8009b2e:	4b71      	ldr	r3, [pc, #452]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a70      	ldr	r2, [pc, #448]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	4b6e      	ldr	r3, [pc, #440]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a6d      	ldr	r2, [pc, #436]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	e01d      	b.n	8009b84 <HAL_RCC_OscConfig+0xd4>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b50:	d10c      	bne.n	8009b6c <HAL_RCC_OscConfig+0xbc>
 8009b52:	4b68      	ldr	r3, [pc, #416]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a67      	ldr	r2, [pc, #412]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	4b65      	ldr	r3, [pc, #404]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a64      	ldr	r2, [pc, #400]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	e00b      	b.n	8009b84 <HAL_RCC_OscConfig+0xd4>
 8009b6c:	4b61      	ldr	r3, [pc, #388]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a60      	ldr	r2, [pc, #384]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	4b5e      	ldr	r3, [pc, #376]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a5d      	ldr	r2, [pc, #372]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d013      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b8c:	f7fa f874 	bl	8003c78 <HAL_GetTick>
 8009b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b94:	f7fa f870 	bl	8003c78 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b64      	cmp	r3, #100	; 0x64
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e356      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ba6:	4b53      	ldr	r3, [pc, #332]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <HAL_RCC_OscConfig+0xe4>
 8009bb2:	e014      	b.n	8009bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb4:	f7fa f860 	bl	8003c78 <HAL_GetTick>
 8009bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bba:	e008      	b.n	8009bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bbc:	f7fa f85c 	bl	8003c78 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b64      	cmp	r3, #100	; 0x64
 8009bc8:	d901      	bls.n	8009bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e342      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bce:	4b49      	ldr	r3, [pc, #292]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1f0      	bne.n	8009bbc <HAL_RCC_OscConfig+0x10c>
 8009bda:	e000      	b.n	8009bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0302 	and.w	r3, r3, #2
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 808c 	beq.w	8009d04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bec:	4b41      	ldr	r3, [pc, #260]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bf6:	4b3f      	ldr	r3, [pc, #252]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d007      	beq.n	8009c12 <HAL_RCC_OscConfig+0x162>
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	2b18      	cmp	r3, #24
 8009c06:	d137      	bne.n	8009c78 <HAL_RCC_OscConfig+0x1c8>
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f003 0303 	and.w	r3, r3, #3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d132      	bne.n	8009c78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c12:	4b38      	ldr	r3, [pc, #224]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 0304 	and.w	r3, r3, #4
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <HAL_RCC_OscConfig+0x17a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e314      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c2a:	4b32      	ldr	r3, [pc, #200]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f023 0219 	bic.w	r2, r3, #25
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	492f      	ldr	r1, [pc, #188]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c3c:	f7fa f81c 	bl	8003c78 <HAL_GetTick>
 8009c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c42:	e008      	b.n	8009c56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c44:	f7fa f818 	bl	8003c78 <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d901      	bls.n	8009c56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e2fe      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c56:	4b27      	ldr	r3, [pc, #156]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0304 	and.w	r3, r3, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0f0      	beq.n	8009c44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	061b      	lsls	r3, r3, #24
 8009c70:	4920      	ldr	r1, [pc, #128]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c76:	e045      	b.n	8009d04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d026      	beq.n	8009cce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c80:	4b1c      	ldr	r3, [pc, #112]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f023 0219 	bic.w	r2, r3, #25
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	4919      	ldr	r1, [pc, #100]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c92:	f7f9 fff1 	bl	8003c78 <HAL_GetTick>
 8009c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c98:	e008      	b.n	8009cac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c9a:	f7f9 ffed 	bl	8003c78 <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d901      	bls.n	8009cac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e2d3      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cac:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0f0      	beq.n	8009c9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cb8:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	061b      	lsls	r3, r3, #24
 8009cc6:	490b      	ldr	r1, [pc, #44]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	604b      	str	r3, [r1, #4]
 8009ccc:	e01a      	b.n	8009d04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <HAL_RCC_OscConfig+0x244>)
 8009cd4:	f023 0301 	bic.w	r3, r3, #1
 8009cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cda:	f7f9 ffcd 	bl	8003c78 <HAL_GetTick>
 8009cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ce0:	e00a      	b.n	8009cf8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ce2:	f7f9 ffc9 	bl	8003c78 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d903      	bls.n	8009cf8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e2af      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
 8009cf4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cf8:	4b96      	ldr	r3, [pc, #600]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1ee      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0310 	and.w	r3, r3, #16
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d06a      	beq.n	8009de6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d10:	4b90      	ldr	r3, [pc, #576]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d1a:	4b8e      	ldr	r3, [pc, #568]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	2b08      	cmp	r3, #8
 8009d24:	d007      	beq.n	8009d36 <HAL_RCC_OscConfig+0x286>
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	2b18      	cmp	r3, #24
 8009d2a:	d11b      	bne.n	8009d64 <HAL_RCC_OscConfig+0x2b4>
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d116      	bne.n	8009d64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d36:	4b87      	ldr	r3, [pc, #540]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_RCC_OscConfig+0x29e>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	2b80      	cmp	r3, #128	; 0x80
 8009d48:	d001      	beq.n	8009d4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e282      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d4e:	4b81      	ldr	r3, [pc, #516]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	061b      	lsls	r3, r3, #24
 8009d5c:	497d      	ldr	r1, [pc, #500]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d62:	e040      	b.n	8009de6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d023      	beq.n	8009db4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009d6c:	4b79      	ldr	r3, [pc, #484]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a78      	ldr	r2, [pc, #480]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d78:	f7f9 ff7e 	bl	8003c78 <HAL_GetTick>
 8009d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d80:	f7f9 ff7a 	bl	8003c78 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e260      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d92:	4b70      	ldr	r3, [pc, #448]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0f0      	beq.n	8009d80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d9e:	4b6d      	ldr	r3, [pc, #436]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	061b      	lsls	r3, r3, #24
 8009dac:	4969      	ldr	r1, [pc, #420]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60cb      	str	r3, [r1, #12]
 8009db2:	e018      	b.n	8009de6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009db4:	4b67      	ldr	r3, [pc, #412]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a66      	ldr	r2, [pc, #408]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc0:	f7f9 ff5a 	bl	8003c78 <HAL_GetTick>
 8009dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009dc6:	e008      	b.n	8009dda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009dc8:	f7f9 ff56 	bl	8003c78 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d901      	bls.n	8009dda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e23c      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009dda:	4b5e      	ldr	r3, [pc, #376]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1f0      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0308 	and.w	r3, r3, #8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d036      	beq.n	8009e60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d019      	beq.n	8009e2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dfa:	4b56      	ldr	r3, [pc, #344]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dfe:	4a55      	ldr	r2, [pc, #340]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e00:	f043 0301 	orr.w	r3, r3, #1
 8009e04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e06:	f7f9 ff37 	bl	8003c78 <HAL_GetTick>
 8009e0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e0c:	e008      	b.n	8009e20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e0e:	f7f9 ff33 	bl	8003c78 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d901      	bls.n	8009e20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e219      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e20:	4b4c      	ldr	r3, [pc, #304]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0f0      	beq.n	8009e0e <HAL_RCC_OscConfig+0x35e>
 8009e2c:	e018      	b.n	8009e60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e2e:	4b49      	ldr	r3, [pc, #292]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e32:	4a48      	ldr	r2, [pc, #288]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e34:	f023 0301 	bic.w	r3, r3, #1
 8009e38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e3a:	f7f9 ff1d 	bl	8003c78 <HAL_GetTick>
 8009e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e40:	e008      	b.n	8009e54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e42:	f7f9 ff19 	bl	8003c78 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d901      	bls.n	8009e54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e1ff      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e54:	4b3f      	ldr	r3, [pc, #252]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1f0      	bne.n	8009e42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0320 	and.w	r3, r3, #32
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d036      	beq.n	8009eda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d019      	beq.n	8009ea8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e74:	4b37      	ldr	r3, [pc, #220]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a36      	ldr	r2, [pc, #216]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e80:	f7f9 fefa 	bl	8003c78 <HAL_GetTick>
 8009e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e86:	e008      	b.n	8009e9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e88:	f7f9 fef6 	bl	8003c78 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d901      	bls.n	8009e9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e1dc      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e9a:	4b2e      	ldr	r3, [pc, #184]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f0      	beq.n	8009e88 <HAL_RCC_OscConfig+0x3d8>
 8009ea6:	e018      	b.n	8009eda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ea8:	4b2a      	ldr	r3, [pc, #168]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a29      	ldr	r2, [pc, #164]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009eb4:	f7f9 fee0 	bl	8003c78 <HAL_GetTick>
 8009eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009eba:	e008      	b.n	8009ece <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ebc:	f7f9 fedc 	bl	8003c78 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d901      	bls.n	8009ece <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e1c2      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ece:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1f0      	bne.n	8009ebc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0304 	and.w	r3, r3, #4
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 8086 	beq.w	8009ff4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009ee8:	4b1b      	ldr	r3, [pc, #108]	; (8009f58 <HAL_RCC_OscConfig+0x4a8>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a1a      	ldr	r2, [pc, #104]	; (8009f58 <HAL_RCC_OscConfig+0x4a8>)
 8009eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ef4:	f7f9 fec0 	bl	8003c78 <HAL_GetTick>
 8009ef8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009efa:	e008      	b.n	8009f0e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009efc:	f7f9 febc 	bl	8003c78 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	2b64      	cmp	r3, #100	; 0x64
 8009f08:	d901      	bls.n	8009f0e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e1a2      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f0e:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <HAL_RCC_OscConfig+0x4a8>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0f0      	beq.n	8009efc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d106      	bne.n	8009f30 <HAL_RCC_OscConfig+0x480>
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f26:	4a0b      	ldr	r2, [pc, #44]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009f28:	f043 0301 	orr.w	r3, r3, #1
 8009f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009f2e:	e032      	b.n	8009f96 <HAL_RCC_OscConfig+0x4e6>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d111      	bne.n	8009f5c <HAL_RCC_OscConfig+0x4ac>
 8009f38:	4b06      	ldr	r3, [pc, #24]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3c:	4a05      	ldr	r2, [pc, #20]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009f3e:	f023 0301 	bic.w	r3, r3, #1
 8009f42:	6713      	str	r3, [r2, #112]	; 0x70
 8009f44:	4b03      	ldr	r3, [pc, #12]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f48:	4a02      	ldr	r2, [pc, #8]	; (8009f54 <HAL_RCC_OscConfig+0x4a4>)
 8009f4a:	f023 0304 	bic.w	r3, r3, #4
 8009f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009f50:	e021      	b.n	8009f96 <HAL_RCC_OscConfig+0x4e6>
 8009f52:	bf00      	nop
 8009f54:	58024400 	.word	0x58024400
 8009f58:	58024800 	.word	0x58024800
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	d10c      	bne.n	8009f7e <HAL_RCC_OscConfig+0x4ce>
 8009f64:	4b83      	ldr	r3, [pc, #524]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f68:	4a82      	ldr	r2, [pc, #520]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f6a:	f043 0304 	orr.w	r3, r3, #4
 8009f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009f70:	4b80      	ldr	r3, [pc, #512]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f74:	4a7f      	ldr	r2, [pc, #508]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f76:	f043 0301 	orr.w	r3, r3, #1
 8009f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8009f7c:	e00b      	b.n	8009f96 <HAL_RCC_OscConfig+0x4e6>
 8009f7e:	4b7d      	ldr	r3, [pc, #500]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f82:	4a7c      	ldr	r2, [pc, #496]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f84:	f023 0301 	bic.w	r3, r3, #1
 8009f88:	6713      	str	r3, [r2, #112]	; 0x70
 8009f8a:	4b7a      	ldr	r3, [pc, #488]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8e:	4a79      	ldr	r2, [pc, #484]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009f90:	f023 0304 	bic.w	r3, r3, #4
 8009f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d015      	beq.n	8009fca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f9e:	f7f9 fe6b 	bl	8003c78 <HAL_GetTick>
 8009fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fa4:	e00a      	b.n	8009fbc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fa6:	f7f9 fe67 	bl	8003c78 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d901      	bls.n	8009fbc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e14b      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fbc:	4b6d      	ldr	r3, [pc, #436]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0ee      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x4f6>
 8009fc8:	e014      	b.n	8009ff4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fca:	f7f9 fe55 	bl	8003c78 <HAL_GetTick>
 8009fce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009fd0:	e00a      	b.n	8009fe8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fd2:	f7f9 fe51 	bl	8003c78 <HAL_GetTick>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d901      	bls.n	8009fe8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e135      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009fe8:	4b62      	ldr	r3, [pc, #392]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 8009fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fec:	f003 0302 	and.w	r3, r3, #2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1ee      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 812a 	beq.w	800a252 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ffe:	4b5d      	ldr	r3, [pc, #372]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a006:	2b18      	cmp	r3, #24
 800a008:	f000 80ba 	beq.w	800a180 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	2b02      	cmp	r3, #2
 800a012:	f040 8095 	bne.w	800a140 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a016:	4b57      	ldr	r3, [pc, #348]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a56      	ldr	r2, [pc, #344]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a01c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a022:	f7f9 fe29 	bl	8003c78 <HAL_GetTick>
 800a026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a028:	e008      	b.n	800a03c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a02a:	f7f9 fe25 	bl	8003c78 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e10b      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a03c:	4b4d      	ldr	r3, [pc, #308]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1f0      	bne.n	800a02a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a048:	4b4a      	ldr	r3, [pc, #296]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a04a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a04c:	4b4a      	ldr	r3, [pc, #296]	; (800a178 <HAL_RCC_OscConfig+0x6c8>)
 800a04e:	4013      	ands	r3, r2
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a058:	0112      	lsls	r2, r2, #4
 800a05a:	430a      	orrs	r2, r1
 800a05c:	4945      	ldr	r1, [pc, #276]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	628b      	str	r3, [r1, #40]	; 0x28
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a066:	3b01      	subs	r3, #1
 800a068:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	3b01      	subs	r3, #1
 800a072:	025b      	lsls	r3, r3, #9
 800a074:	b29b      	uxth	r3, r3
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07c:	3b01      	subs	r3, #1
 800a07e:	041b      	lsls	r3, r3, #16
 800a080:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	3b01      	subs	r3, #1
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a092:	4938      	ldr	r1, [pc, #224]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a094:	4313      	orrs	r3, r2
 800a096:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a098:	4b36      	ldr	r3, [pc, #216]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	4a35      	ldr	r2, [pc, #212]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a09e:	f023 0301 	bic.w	r3, r3, #1
 800a0a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a0a4:	4b33      	ldr	r3, [pc, #204]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0a8:	4b34      	ldr	r3, [pc, #208]	; (800a17c <HAL_RCC_OscConfig+0x6cc>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a0b0:	00d2      	lsls	r2, r2, #3
 800a0b2:	4930      	ldr	r1, [pc, #192]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a0b8:	4b2e      	ldr	r3, [pc, #184]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	f023 020c 	bic.w	r2, r3, #12
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	492b      	ldr	r1, [pc, #172]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a0ca:	4b2a      	ldr	r3, [pc, #168]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	f023 0202 	bic.w	r2, r3, #2
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d6:	4927      	ldr	r1, [pc, #156]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a0dc:	4b25      	ldr	r3, [pc, #148]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	4a24      	ldr	r2, [pc, #144]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e8:	4b22      	ldr	r3, [pc, #136]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	4a21      	ldr	r2, [pc, #132]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a0f4:	4b1f      	ldr	r3, [pc, #124]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	4a1e      	ldr	r2, [pc, #120]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a0fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a100:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	4a1b      	ldr	r2, [pc, #108]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a106:	f043 0301 	orr.w	r3, r3, #1
 800a10a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a10c:	4b19      	ldr	r3, [pc, #100]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a18      	ldr	r2, [pc, #96]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a118:	f7f9 fdae 	bl	8003c78 <HAL_GetTick>
 800a11c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a11e:	e008      	b.n	800a132 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a120:	f7f9 fdaa 	bl	8003c78 <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d901      	bls.n	800a132 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e090      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a132:	4b10      	ldr	r3, [pc, #64]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0f0      	beq.n	800a120 <HAL_RCC_OscConfig+0x670>
 800a13e:	e088      	b.n	800a252 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a0b      	ldr	r2, [pc, #44]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a14a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a14c:	f7f9 fd94 	bl	8003c78 <HAL_GetTick>
 800a150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a152:	e008      	b.n	800a166 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a154:	f7f9 fd90 	bl	8003c78 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e076      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a166:	4b03      	ldr	r3, [pc, #12]	; (800a174 <HAL_RCC_OscConfig+0x6c4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1f0      	bne.n	800a154 <HAL_RCC_OscConfig+0x6a4>
 800a172:	e06e      	b.n	800a252 <HAL_RCC_OscConfig+0x7a2>
 800a174:	58024400 	.word	0x58024400
 800a178:	fffffc0c 	.word	0xfffffc0c
 800a17c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a180:	4b36      	ldr	r3, [pc, #216]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a186:	4b35      	ldr	r3, [pc, #212]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	2b01      	cmp	r3, #1
 800a192:	d031      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f003 0203 	and.w	r2, r3, #3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d12a      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	091b      	lsrs	r3, r3, #4
 800a1a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d122      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d11a      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	0a5b      	lsrs	r3, r3, #9
 800a1c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d111      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	0c1b      	lsrs	r3, r3, #16
 800a1d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d108      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	0e1b      	lsrs	r3, r3, #24
 800a1ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d001      	beq.n	800a1fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e02b      	b.n	800a254 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a1fc:	4b17      	ldr	r3, [pc, #92]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a200:	08db      	lsrs	r3, r3, #3
 800a202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a206:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d01f      	beq.n	800a252 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a216:	4a11      	ldr	r2, [pc, #68]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a218:	f023 0301 	bic.w	r3, r3, #1
 800a21c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a21e:	f7f9 fd2b 	bl	8003c78 <HAL_GetTick>
 800a222:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a224:	bf00      	nop
 800a226:	f7f9 fd27 	bl	8003c78 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	4293      	cmp	r3, r2
 800a230:	d0f9      	beq.n	800a226 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a232:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a236:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <HAL_RCC_OscConfig+0x7b0>)
 800a238:	4013      	ands	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a23e:	00d2      	lsls	r2, r2, #3
 800a240:	4906      	ldr	r1, [pc, #24]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a242:	4313      	orrs	r3, r2
 800a244:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	4a04      	ldr	r2, [pc, #16]	; (800a25c <HAL_RCC_OscConfig+0x7ac>)
 800a24c:	f043 0301 	orr.w	r3, r3, #1
 800a250:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3730      	adds	r7, #48	; 0x30
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	58024400 	.word	0x58024400
 800a260:	ffff0007 	.word	0xffff0007

0800a264 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e19c      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a278:	4b8a      	ldr	r3, [pc, #552]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 030f 	and.w	r3, r3, #15
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d910      	bls.n	800a2a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a286:	4b87      	ldr	r3, [pc, #540]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f023 020f 	bic.w	r2, r3, #15
 800a28e:	4985      	ldr	r1, [pc, #532]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	4313      	orrs	r3, r2
 800a294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a296:	4b83      	ldr	r3, [pc, #524]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d001      	beq.n	800a2a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e184      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0304 	and.w	r3, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d010      	beq.n	800a2d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691a      	ldr	r2, [r3, #16]
 800a2b8:	4b7b      	ldr	r3, [pc, #492]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d908      	bls.n	800a2d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2c4:	4b78      	ldr	r3, [pc, #480]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	4975      	ldr	r1, [pc, #468]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d010      	beq.n	800a304 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	695a      	ldr	r2, [r3, #20]
 800a2e6:	4b70      	ldr	r3, [pc, #448]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d908      	bls.n	800a304 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2f2:	4b6d      	ldr	r3, [pc, #436]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	496a      	ldr	r1, [pc, #424]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a300:	4313      	orrs	r3, r2
 800a302:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0310 	and.w	r3, r3, #16
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d010      	beq.n	800a332 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	699a      	ldr	r2, [r3, #24]
 800a314:	4b64      	ldr	r3, [pc, #400]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d908      	bls.n	800a332 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a320:	4b61      	ldr	r3, [pc, #388]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	495e      	ldr	r1, [pc, #376]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d010      	beq.n	800a360 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69da      	ldr	r2, [r3, #28]
 800a342:	4b59      	ldr	r3, [pc, #356]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d908      	bls.n	800a360 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a34e:	4b56      	ldr	r3, [pc, #344]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	4953      	ldr	r1, [pc, #332]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d010      	beq.n	800a38e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68da      	ldr	r2, [r3, #12]
 800a370:	4b4d      	ldr	r3, [pc, #308]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	f003 030f 	and.w	r3, r3, #15
 800a378:	429a      	cmp	r2, r3
 800a37a:	d908      	bls.n	800a38e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a37c:	4b4a      	ldr	r3, [pc, #296]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	f023 020f 	bic.w	r2, r3, #15
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	4947      	ldr	r1, [pc, #284]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d055      	beq.n	800a446 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a39a:	4b43      	ldr	r3, [pc, #268]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	4940      	ldr	r1, [pc, #256]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d107      	bne.n	800a3c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3b4:	4b3c      	ldr	r3, [pc, #240]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d121      	bne.n	800a404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e0f6      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d107      	bne.n	800a3dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3cc:	4b36      	ldr	r3, [pc, #216]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d115      	bne.n	800a404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e0ea      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d107      	bne.n	800a3f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3e4:	4b30      	ldr	r3, [pc, #192]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d109      	bne.n	800a404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e0de      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3f4:	4b2c      	ldr	r3, [pc, #176]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e0d6      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a404:	4b28      	ldr	r3, [pc, #160]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	f023 0207 	bic.w	r2, r3, #7
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4925      	ldr	r1, [pc, #148]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a412:	4313      	orrs	r3, r2
 800a414:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a416:	f7f9 fc2f 	bl	8003c78 <HAL_GetTick>
 800a41a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a41c:	e00a      	b.n	800a434 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a41e:	f7f9 fc2b 	bl	8003c78 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	f241 3288 	movw	r2, #5000	; 0x1388
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d901      	bls.n	800a434 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e0be      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a434:	4b1c      	ldr	r3, [pc, #112]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	429a      	cmp	r2, r3
 800a444:	d1eb      	bne.n	800a41e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d010      	beq.n	800a474 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68da      	ldr	r2, [r3, #12]
 800a456:	4b14      	ldr	r3, [pc, #80]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f003 030f 	and.w	r3, r3, #15
 800a45e:	429a      	cmp	r2, r3
 800a460:	d208      	bcs.n	800a474 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a462:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	f023 020f 	bic.w	r2, r3, #15
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	490e      	ldr	r1, [pc, #56]	; (800a4a8 <HAL_RCC_ClockConfig+0x244>)
 800a470:	4313      	orrs	r3, r2
 800a472:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 030f 	and.w	r3, r3, #15
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d214      	bcs.n	800a4ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a482:	4b08      	ldr	r3, [pc, #32]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f023 020f 	bic.w	r2, r3, #15
 800a48a:	4906      	ldr	r1, [pc, #24]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	4313      	orrs	r3, r2
 800a490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a492:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <HAL_RCC_ClockConfig+0x240>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 030f 	and.w	r3, r3, #15
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d005      	beq.n	800a4ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e086      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x34e>
 800a4a4:	52002000 	.word	0x52002000
 800a4a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0304 	and.w	r3, r3, #4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d010      	beq.n	800a4da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	4b3f      	ldr	r3, [pc, #252]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d208      	bcs.n	800a4da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4c8:	4b3c      	ldr	r3, [pc, #240]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	4939      	ldr	r1, [pc, #228]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0308 	and.w	r3, r3, #8
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d010      	beq.n	800a508 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	695a      	ldr	r2, [r3, #20]
 800a4ea:	4b34      	ldr	r3, [pc, #208]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d208      	bcs.n	800a508 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4f6:	4b31      	ldr	r3, [pc, #196]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	492e      	ldr	r1, [pc, #184]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a504:	4313      	orrs	r3, r2
 800a506:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0310 	and.w	r3, r3, #16
 800a510:	2b00      	cmp	r3, #0
 800a512:	d010      	beq.n	800a536 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	699a      	ldr	r2, [r3, #24]
 800a518:	4b28      	ldr	r3, [pc, #160]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a520:	429a      	cmp	r2, r3
 800a522:	d208      	bcs.n	800a536 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	4922      	ldr	r1, [pc, #136]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a532:	4313      	orrs	r3, r2
 800a534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d010      	beq.n	800a564 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	69da      	ldr	r2, [r3, #28]
 800a546:	4b1d      	ldr	r3, [pc, #116]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a54e:	429a      	cmp	r2, r3
 800a550:	d208      	bcs.n	800a564 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a552:	4b1a      	ldr	r3, [pc, #104]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	4917      	ldr	r1, [pc, #92]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a560:	4313      	orrs	r3, r2
 800a562:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a564:	f000 f89e 	bl	800a6a4 <HAL_RCC_GetSysClockFreq>
 800a568:	4602      	mov	r2, r0
 800a56a:	4b14      	ldr	r3, [pc, #80]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	0a1b      	lsrs	r3, r3, #8
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	4912      	ldr	r1, [pc, #72]	; (800a5c0 <HAL_RCC_ClockConfig+0x35c>)
 800a576:	5ccb      	ldrb	r3, [r1, r3]
 800a578:	f003 031f 	and.w	r3, r3, #31
 800a57c:	fa22 f303 	lsr.w	r3, r2, r3
 800a580:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a582:	4b0e      	ldr	r3, [pc, #56]	; (800a5bc <HAL_RCC_ClockConfig+0x358>)
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	f003 030f 	and.w	r3, r3, #15
 800a58a:	4a0d      	ldr	r2, [pc, #52]	; (800a5c0 <HAL_RCC_ClockConfig+0x35c>)
 800a58c:	5cd3      	ldrb	r3, [r2, r3]
 800a58e:	f003 031f 	and.w	r3, r3, #31
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	fa22 f303 	lsr.w	r3, r2, r3
 800a598:	4a0a      	ldr	r2, [pc, #40]	; (800a5c4 <HAL_RCC_ClockConfig+0x360>)
 800a59a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a59c:	4a0a      	ldr	r2, [pc, #40]	; (800a5c8 <HAL_RCC_ClockConfig+0x364>)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a5a2:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <HAL_RCC_ClockConfig+0x368>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7f9 fb1c 	bl	8003be4 <HAL_InitTick>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	58024400 	.word	0x58024400
 800a5c0:	08018b5c 	.word	0x08018b5c
 800a5c4:	24000004 	.word	0x24000004
 800a5c8:	24000000 	.word	0x24000000
 800a5cc:	24000008 	.word	0x24000008

0800a5d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08c      	sub	sp, #48	; 0x30
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d12a      	bne.n	800a638 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a5e2:	4b2d      	ldr	r3, [pc, #180]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a5e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5e8:	4a2b      	ldr	r2, [pc, #172]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5f2:	4b29      	ldr	r3, [pc, #164]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a5f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	61bb      	str	r3, [r7, #24]
 800a5fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a600:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a606:	2302      	movs	r3, #2
 800a608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a60a:	2303      	movs	r3, #3
 800a60c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a60e:	2300      	movs	r3, #0
 800a610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a612:	2300      	movs	r3, #0
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a616:	f107 031c 	add.w	r3, r7, #28
 800a61a:	4619      	mov	r1, r3
 800a61c:	481f      	ldr	r0, [pc, #124]	; (800a69c <HAL_RCC_MCOConfig+0xcc>)
 800a61e:	f7fd fc29 	bl	8007e74 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	430b      	orrs	r3, r1
 800a630:	4919      	ldr	r1, [pc, #100]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a632:	4313      	orrs	r3, r2
 800a634:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a636:	e02a      	b.n	800a68e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a638:	4b17      	ldr	r3, [pc, #92]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a63a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a63e:	4a16      	ldr	r2, [pc, #88]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a640:	f043 0304 	orr.w	r3, r3, #4
 800a644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a648:	4b13      	ldr	r3, [pc, #76]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a64a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a65a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a65c:	2302      	movs	r3, #2
 800a65e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a660:	2303      	movs	r3, #3
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a664:	2300      	movs	r3, #0
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a668:	2300      	movs	r3, #0
 800a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a66c:	f107 031c 	add.w	r3, r7, #28
 800a670:	4619      	mov	r1, r3
 800a672:	480b      	ldr	r0, [pc, #44]	; (800a6a0 <HAL_RCC_MCOConfig+0xd0>)
 800a674:	f7fd fbfe 	bl	8007e74 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a678:	4b07      	ldr	r3, [pc, #28]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	01d9      	lsls	r1, r3, #7
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	430b      	orrs	r3, r1
 800a688:	4903      	ldr	r1, [pc, #12]	; (800a698 <HAL_RCC_MCOConfig+0xc8>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	610b      	str	r3, [r1, #16]
}
 800a68e:	bf00      	nop
 800a690:	3730      	adds	r7, #48	; 0x30
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	58024400 	.word	0x58024400
 800a69c:	58020000 	.word	0x58020000
 800a6a0:	58020800 	.word	0x58020800

0800a6a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b089      	sub	sp, #36	; 0x24
 800a6a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6aa:	4bb3      	ldr	r3, [pc, #716]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6b2:	2b18      	cmp	r3, #24
 800a6b4:	f200 8155 	bhi.w	800a962 <HAL_RCC_GetSysClockFreq+0x2be>
 800a6b8:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6be:	bf00      	nop
 800a6c0:	0800a725 	.word	0x0800a725
 800a6c4:	0800a963 	.word	0x0800a963
 800a6c8:	0800a963 	.word	0x0800a963
 800a6cc:	0800a963 	.word	0x0800a963
 800a6d0:	0800a963 	.word	0x0800a963
 800a6d4:	0800a963 	.word	0x0800a963
 800a6d8:	0800a963 	.word	0x0800a963
 800a6dc:	0800a963 	.word	0x0800a963
 800a6e0:	0800a74b 	.word	0x0800a74b
 800a6e4:	0800a963 	.word	0x0800a963
 800a6e8:	0800a963 	.word	0x0800a963
 800a6ec:	0800a963 	.word	0x0800a963
 800a6f0:	0800a963 	.word	0x0800a963
 800a6f4:	0800a963 	.word	0x0800a963
 800a6f8:	0800a963 	.word	0x0800a963
 800a6fc:	0800a963 	.word	0x0800a963
 800a700:	0800a751 	.word	0x0800a751
 800a704:	0800a963 	.word	0x0800a963
 800a708:	0800a963 	.word	0x0800a963
 800a70c:	0800a963 	.word	0x0800a963
 800a710:	0800a963 	.word	0x0800a963
 800a714:	0800a963 	.word	0x0800a963
 800a718:	0800a963 	.word	0x0800a963
 800a71c:	0800a963 	.word	0x0800a963
 800a720:	0800a757 	.word	0x0800a757
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a724:	4b94      	ldr	r3, [pc, #592]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0320 	and.w	r3, r3, #32
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d009      	beq.n	800a744 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a730:	4b91      	ldr	r3, [pc, #580]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	08db      	lsrs	r3, r3, #3
 800a736:	f003 0303 	and.w	r3, r3, #3
 800a73a:	4a90      	ldr	r2, [pc, #576]	; (800a97c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a73c:	fa22 f303 	lsr.w	r3, r2, r3
 800a740:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a742:	e111      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a744:	4b8d      	ldr	r3, [pc, #564]	; (800a97c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a746:	61bb      	str	r3, [r7, #24]
      break;
 800a748:	e10e      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a74a:	4b8d      	ldr	r3, [pc, #564]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a74c:	61bb      	str	r3, [r7, #24]
      break;
 800a74e:	e10b      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a750:	4b8c      	ldr	r3, [pc, #560]	; (800a984 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a752:	61bb      	str	r3, [r7, #24]
      break;
 800a754:	e108      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a756:	4b88      	ldr	r3, [pc, #544]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a760:	4b85      	ldr	r3, [pc, #532]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	091b      	lsrs	r3, r3, #4
 800a766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a76a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a76c:	4b82      	ldr	r3, [pc, #520]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a776:	4b80      	ldr	r3, [pc, #512]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77a:	08db      	lsrs	r3, r3, #3
 800a77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 80e1 	beq.w	800a95c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	f000 8083 	beq.w	800a8a8 <HAL_RCC_GetSysClockFreq+0x204>
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	f200 80a1 	bhi.w	800a8ec <HAL_RCC_GetSysClockFreq+0x248>
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x114>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d056      	beq.n	800a864 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a7b6:	e099      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7b8:	4b6f      	ldr	r3, [pc, #444]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0320 	and.w	r3, r3, #32
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d02d      	beq.n	800a820 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7c4:	4b6c      	ldr	r3, [pc, #432]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	08db      	lsrs	r3, r3, #3
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	4a6b      	ldr	r2, [pc, #428]	; (800a97c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	ee07 3a90 	vmov	s15, r3
 800a7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	ee07 3a90 	vmov	s15, r3
 800a7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ee:	4b62      	ldr	r3, [pc, #392]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a802:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a81a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a81e:	e087      	b.n	800a930 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a98c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a832:	4b51      	ldr	r3, [pc, #324]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a842:	ed97 6a02 	vldr	s12, [r7, #8]
 800a846:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a862:	e065      	b.n	800a930 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	ee07 3a90 	vmov	s15, r3
 800a86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a990 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a876:	4b40      	ldr	r3, [pc, #256]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87e:	ee07 3a90 	vmov	s15, r3
 800a882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a886:	ed97 6a02 	vldr	s12, [r7, #8]
 800a88a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8a6:	e043      	b.n	800a930 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a994 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ba:	4b2f      	ldr	r3, [pc, #188]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8ea:	e021      	b.n	800a930 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	ee07 3a90 	vmov	s15, r3
 800a8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a990 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8fe:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a912:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a91e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a92a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a92e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a930:	4b11      	ldr	r3, [pc, #68]	; (800a978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a934:	0a5b      	lsrs	r3, r3, #9
 800a936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93a:	3301      	adds	r3, #1
 800a93c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	ee07 3a90 	vmov	s15, r3
 800a944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a948:	edd7 6a07 	vldr	s13, [r7, #28]
 800a94c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a954:	ee17 3a90 	vmov	r3, s15
 800a958:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a95a:	e005      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	61bb      	str	r3, [r7, #24]
      break;
 800a960:	e002      	b.n	800a968 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a962:	4b07      	ldr	r3, [pc, #28]	; (800a980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a964:	61bb      	str	r3, [r7, #24]
      break;
 800a966:	bf00      	nop
  }

  return sysclockfreq;
 800a968:	69bb      	ldr	r3, [r7, #24]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3724      	adds	r7, #36	; 0x24
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	58024400 	.word	0x58024400
 800a97c:	03d09000 	.word	0x03d09000
 800a980:	003d0900 	.word	0x003d0900
 800a984:	02faf080 	.word	0x02faf080
 800a988:	46000000 	.word	0x46000000
 800a98c:	4c742400 	.word	0x4c742400
 800a990:	4a742400 	.word	0x4a742400
 800a994:	4c3ebc20 	.word	0x4c3ebc20

0800a998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a99e:	f7ff fe81 	bl	800a6a4 <HAL_RCC_GetSysClockFreq>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	4b10      	ldr	r3, [pc, #64]	; (800a9e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	0a1b      	lsrs	r3, r3, #8
 800a9aa:	f003 030f 	and.w	r3, r3, #15
 800a9ae:	490f      	ldr	r1, [pc, #60]	; (800a9ec <HAL_RCC_GetHCLKFreq+0x54>)
 800a9b0:	5ccb      	ldrb	r3, [r1, r3]
 800a9b2:	f003 031f 	and.w	r3, r3, #31
 800a9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f003 030f 	and.w	r3, r3, #15
 800a9c4:	4a09      	ldr	r2, [pc, #36]	; (800a9ec <HAL_RCC_GetHCLKFreq+0x54>)
 800a9c6:	5cd3      	ldrb	r3, [r2, r3]
 800a9c8:	f003 031f 	and.w	r3, r3, #31
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d2:	4a07      	ldr	r2, [pc, #28]	; (800a9f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9d6:	4a07      	ldr	r2, [pc, #28]	; (800a9f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a9dc:	4b04      	ldr	r3, [pc, #16]	; (800a9f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9de:	681b      	ldr	r3, [r3, #0]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	58024400 	.word	0x58024400
 800a9ec:	08018b5c 	.word	0x08018b5c
 800a9f0:	24000004 	.word	0x24000004
 800a9f4:	24000000 	.word	0x24000000

0800a9f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a9fc:	f7ff ffcc 	bl	800a998 <HAL_RCC_GetHCLKFreq>
 800aa00:	4602      	mov	r2, r0
 800aa02:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	4904      	ldr	r1, [pc, #16]	; (800aa20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aa0e:	5ccb      	ldrb	r3, [r1, r3]
 800aa10:	f003 031f 	and.w	r3, r3, #31
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	58024400 	.word	0x58024400
 800aa20:	08018b5c 	.word	0x08018b5c

0800aa24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aa28:	f7ff ffb6 	bl	800a998 <HAL_RCC_GetHCLKFreq>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	4b06      	ldr	r3, [pc, #24]	; (800aa48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	0a1b      	lsrs	r3, r3, #8
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	4904      	ldr	r1, [pc, #16]	; (800aa4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa3a:	5ccb      	ldrb	r3, [r1, r3]
 800aa3c:	f003 031f 	and.w	r3, r3, #31
 800aa40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	58024400 	.word	0x58024400
 800aa4c:	08018b5c 	.word	0x08018b5c

0800aa50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa54:	b0c6      	sub	sp, #280	; 0x118
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa62:	2300      	movs	r3, #0
 800aa64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800aa74:	2500      	movs	r5, #0
 800aa76:	ea54 0305 	orrs.w	r3, r4, r5
 800aa7a:	d049      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa86:	d02f      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aa88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa8c:	d828      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa92:	d01a      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aa94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa98:	d822      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aa9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaa2:	d007      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aaa4:	e01c      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa6:	4bab      	ldr	r3, [pc, #684]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	4aaa      	ldr	r2, [pc, #680]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aab2:	e01a      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	3308      	adds	r3, #8
 800aaba:	2102      	movs	r1, #2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f002 fa49 	bl	800cf54 <RCCEx_PLL2_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aac8:	e00f      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aace:	3328      	adds	r3, #40	; 0x28
 800aad0:	2102      	movs	r1, #2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f002 faf0 	bl	800d0b8 <RCCEx_PLL3_Config>
 800aad8:	4603      	mov	r3, r0
 800aada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aade:	e004      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aae6:	e000      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aaf2:	4b98      	ldr	r3, [pc, #608]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab00:	4a94      	ldr	r2, [pc, #592]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab02:	430b      	orrs	r3, r1
 800ab04:	6513      	str	r3, [r2, #80]	; 0x50
 800ab06:	e003      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ab1c:	f04f 0900 	mov.w	r9, #0
 800ab20:	ea58 0309 	orrs.w	r3, r8, r9
 800ab24:	d047      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d82a      	bhi.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ab30:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab4d 	.word	0x0800ab4d
 800ab3c:	0800ab5b 	.word	0x0800ab5b
 800ab40:	0800ab71 	.word	0x0800ab71
 800ab44:	0800ab8f 	.word	0x0800ab8f
 800ab48:	0800ab8f 	.word	0x0800ab8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab4c:	4b81      	ldr	r3, [pc, #516]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab50:	4a80      	ldr	r2, [pc, #512]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab58:	e01a      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5e:	3308      	adds	r3, #8
 800ab60:	2100      	movs	r1, #0
 800ab62:	4618      	mov	r0, r3
 800ab64:	f002 f9f6 	bl	800cf54 <RCCEx_PLL2_Config>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab6e:	e00f      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab74:	3328      	adds	r3, #40	; 0x28
 800ab76:	2100      	movs	r1, #0
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f002 fa9d 	bl	800d0b8 <RCCEx_PLL3_Config>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab84:	e004      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab8c:	e000      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ab8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab98:	4b6e      	ldr	r3, [pc, #440]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9c:	f023 0107 	bic.w	r1, r3, #7
 800aba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba6:	4a6b      	ldr	r2, [pc, #428]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aba8:	430b      	orrs	r3, r1
 800abaa:	6513      	str	r3, [r2, #80]	; 0x50
 800abac:	e003      	b.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800abb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800abc2:	f04f 0b00 	mov.w	fp, #0
 800abc6:	ea5a 030b 	orrs.w	r3, sl, fp
 800abca:	d05b      	beq.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800abcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800abd4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800abd8:	d03b      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800abda:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800abde:	d834      	bhi.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800abe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abe4:	d037      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800abe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abea:	d82e      	bhi.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800abec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abf0:	d033      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800abf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abf6:	d828      	bhi.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800abf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abfc:	d01a      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800abfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac02:	d822      	bhi.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d003      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ac08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac0c:	d007      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ac0e:	e01c      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac10:	4b50      	ldr	r3, [pc, #320]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	4a4f      	ldr	r2, [pc, #316]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac1c:	e01e      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac22:	3308      	adds	r3, #8
 800ac24:	2100      	movs	r1, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f002 f994 	bl	800cf54 <RCCEx_PLL2_Config>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac32:	e013      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac38:	3328      	adds	r3, #40	; 0x28
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 fa3b 	bl	800d0b8 <RCCEx_PLL3_Config>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac48:	e008      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac50:	e004      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ac52:	bf00      	nop
 800ac54:	e002      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ac56:	bf00      	nop
 800ac58:	e000      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ac5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10b      	bne.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac64:	4b3b      	ldr	r3, [pc, #236]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ac6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac74:	4a37      	ldr	r2, [pc, #220]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac76:	430b      	orrs	r3, r1
 800ac78:	6593      	str	r3, [r2, #88]	; 0x58
 800ac7a:	e003      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ac90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ac94:	2300      	movs	r3, #0
 800ac96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4313      	orrs	r3, r2
 800aca2:	d05d      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800acac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800acb0:	d03b      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800acb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800acb6:	d834      	bhi.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800acb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acbc:	d037      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800acbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acc2:	d82e      	bhi.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800acc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acc8:	d033      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800acca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acce:	d828      	bhi.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800acd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acd4:	d01a      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800acd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acda:	d822      	bhi.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d003      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ace0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ace4:	d007      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ace6:	e01c      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace8:	4b1a      	ldr	r3, [pc, #104]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	4a19      	ldr	r2, [pc, #100]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acf4:	e01e      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfa:	3308      	adds	r3, #8
 800acfc:	2100      	movs	r1, #0
 800acfe:	4618      	mov	r0, r3
 800ad00:	f002 f928 	bl	800cf54 <RCCEx_PLL2_Config>
 800ad04:	4603      	mov	r3, r0
 800ad06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad0a:	e013      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad10:	3328      	adds	r3, #40	; 0x28
 800ad12:	2100      	movs	r1, #0
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 f9cf 	bl	800d0b8 <RCCEx_PLL3_Config>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad20:	e008      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad28:	e004      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ad2a:	bf00      	nop
 800ad2c:	e002      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ad2e:	bf00      	nop
 800ad30:	e000      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ad32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10d      	bne.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad4c:	4a01      	ldr	r2, [pc, #4]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	6593      	str	r3, [r2, #88]	; 0x58
 800ad52:	e005      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ad54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ad6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad70:	2300      	movs	r3, #0
 800ad72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	d03a      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ad80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad86:	2b30      	cmp	r3, #48	; 0x30
 800ad88:	d01f      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ad8a:	2b30      	cmp	r3, #48	; 0x30
 800ad8c:	d819      	bhi.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ad8e:	2b20      	cmp	r3, #32
 800ad90:	d00c      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ad92:	2b20      	cmp	r3, #32
 800ad94:	d815      	bhi.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d019      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ad9a:	2b10      	cmp	r3, #16
 800ad9c:	d111      	bne.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad9e:	4baa      	ldr	r3, [pc, #680]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ada0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada2:	4aa9      	ldr	r2, [pc, #676]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ada4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ada8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800adaa:	e011      	b.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb0:	3308      	adds	r3, #8
 800adb2:	2102      	movs	r1, #2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f002 f8cd 	bl	800cf54 <RCCEx_PLL2_Config>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800adc0:	e006      	b.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adc8:	e002      	b.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800adca:	bf00      	nop
 800adcc:	e000      	b.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800adce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800add0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800add8:	4b9b      	ldr	r3, [pc, #620]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800addc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade6:	4a98      	ldr	r2, [pc, #608]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ade8:	430b      	orrs	r3, r1
 800adea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800adec:	e003      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adf2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ae02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae06:	2300      	movs	r3, #0
 800ae08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ae10:	460b      	mov	r3, r1
 800ae12:	4313      	orrs	r3, r2
 800ae14:	d051      	beq.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ae16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae20:	d035      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ae22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae26:	d82e      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ae28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae2c:	d031      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ae2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae32:	d828      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ae34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae38:	d01a      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ae3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae3e:	d822      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ae44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae48:	d007      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ae4a:	e01c      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae4c:	4b7e      	ldr	r3, [pc, #504]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae50:	4a7d      	ldr	r2, [pc, #500]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae58:	e01c      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5e:	3308      	adds	r3, #8
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f002 f876 	bl	800cf54 <RCCEx_PLL2_Config>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae6e:	e011      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae74:	3328      	adds	r3, #40	; 0x28
 800ae76:	2100      	movs	r1, #0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f002 f91d 	bl	800d0b8 <RCCEx_PLL3_Config>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae84:	e006      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae8c:	e002      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ae8e:	bf00      	nop
 800ae90:	e000      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ae92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ae9c:	4b6a      	ldr	r3, [pc, #424]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeaa:	4a67      	ldr	r2, [pc, #412]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aeac:	430b      	orrs	r3, r1
 800aeae:	6513      	str	r3, [r2, #80]	; 0x50
 800aeb0:	e003      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aeba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aeca:	2300      	movs	r3, #0
 800aecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aed0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4313      	orrs	r3, r2
 800aed8:	d053      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aee4:	d033      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800aee6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeea:	d82c      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aeec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aef0:	d02f      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800aef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aef6:	d826      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aef8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aefc:	d02b      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800aefe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af02:	d820      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800af04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af08:	d012      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800af0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af0e:	d81a      	bhi.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800af10:	2b00      	cmp	r3, #0
 800af12:	d022      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800af14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af18:	d115      	bne.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1e:	3308      	adds	r3, #8
 800af20:	2101      	movs	r1, #1
 800af22:	4618      	mov	r0, r3
 800af24:	f002 f816 	bl	800cf54 <RCCEx_PLL2_Config>
 800af28:	4603      	mov	r3, r0
 800af2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af2e:	e015      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af34:	3328      	adds	r3, #40	; 0x28
 800af36:	2101      	movs	r1, #1
 800af38:	4618      	mov	r0, r3
 800af3a:	f002 f8bd 	bl	800d0b8 <RCCEx_PLL3_Config>
 800af3e:	4603      	mov	r3, r0
 800af40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af44:	e00a      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af4c:	e006      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800af4e:	bf00      	nop
 800af50:	e004      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800af52:	bf00      	nop
 800af54:	e002      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800af56:	bf00      	nop
 800af58:	e000      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800af5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800af64:	4b38      	ldr	r3, [pc, #224]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800af6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af72:	4a35      	ldr	r2, [pc, #212]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af74:	430b      	orrs	r3, r1
 800af76:	6513      	str	r3, [r2, #80]	; 0x50
 800af78:	e003      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800af8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af92:	2300      	movs	r3, #0
 800af94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af9c:	460b      	mov	r3, r1
 800af9e:	4313      	orrs	r3, r2
 800afa0:	d058      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800afaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afae:	d033      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800afb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afb4:	d82c      	bhi.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800afb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afba:	d02f      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800afbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc0:	d826      	bhi.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800afc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afc6:	d02b      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800afc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afcc:	d820      	bhi.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800afce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afd2:	d012      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800afd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afd8:	d81a      	bhi.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d022      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800afde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afe2:	d115      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe8:	3308      	adds	r3, #8
 800afea:	2101      	movs	r1, #1
 800afec:	4618      	mov	r0, r3
 800afee:	f001 ffb1 	bl	800cf54 <RCCEx_PLL2_Config>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aff8:	e015      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800affa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affe:	3328      	adds	r3, #40	; 0x28
 800b000:	2101      	movs	r1, #1
 800b002:	4618      	mov	r0, r3
 800b004:	f002 f858 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b008:	4603      	mov	r3, r0
 800b00a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b00e:	e00a      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b016:	e006      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b018:	bf00      	nop
 800b01a:	e004      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b01c:	bf00      	nop
 800b01e:	e002      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b020:	bf00      	nop
 800b022:	e000      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b024:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b026:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10e      	bne.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b02e:	4b06      	ldr	r3, [pc, #24]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b032:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b03e:	4a02      	ldr	r2, [pc, #8]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b040:	430b      	orrs	r3, r1
 800b042:	6593      	str	r3, [r2, #88]	; 0x58
 800b044:	e006      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b046:	bf00      	nop
 800b048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b064:	2300      	movs	r3, #0
 800b066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b06a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b06e:	460b      	mov	r3, r1
 800b070:	4313      	orrs	r3, r2
 800b072:	d037      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b07a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b07e:	d00e      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b084:	d816      	bhi.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b086:	2b00      	cmp	r3, #0
 800b088:	d018      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b08a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b08e:	d111      	bne.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b090:	4bc4      	ldr	r3, [pc, #784]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	4ac3      	ldr	r2, [pc, #780]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b09a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b09c:	e00f      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f001 ff54 	bl	800cf54 <RCCEx_PLL2_Config>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b0b2:	e004      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0ba:	e000      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10a      	bne.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0c6:	4bb7      	ldr	r3, [pc, #732]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d4:	4ab3      	ldr	r2, [pc, #716]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	6513      	str	r3, [r2, #80]	; 0x50
 800b0da:	e003      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b0f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b0fe:	460b      	mov	r3, r1
 800b100:	4313      	orrs	r3, r2
 800b102:	d039      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d81c      	bhi.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b10e:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b151 	.word	0x0800b151
 800b118:	0800b125 	.word	0x0800b125
 800b11c:	0800b133 	.word	0x0800b133
 800b120:	0800b151 	.word	0x0800b151
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b124:	4b9f      	ldr	r3, [pc, #636]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b128:	4a9e      	ldr	r2, [pc, #632]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b12a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b12e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b130:	e00f      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b136:	3308      	adds	r3, #8
 800b138:	2102      	movs	r1, #2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 ff0a 	bl	800cf54 <RCCEx_PLL2_Config>
 800b140:	4603      	mov	r3, r0
 800b142:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b146:	e004      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b14e:	e000      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b150:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b152:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b15a:	4b92      	ldr	r3, [pc, #584]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b15e:	f023 0103 	bic.w	r1, r3, #3
 800b162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b168:	4a8e      	ldr	r2, [pc, #568]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b16a:	430b      	orrs	r3, r1
 800b16c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b16e:	e003      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b170:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b174:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b188:	2300      	movs	r3, #0
 800b18a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b18e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b192:	460b      	mov	r3, r1
 800b194:	4313      	orrs	r3, r2
 800b196:	f000 8099 	beq.w	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b19a:	4b83      	ldr	r3, [pc, #524]	; (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a82      	ldr	r2, [pc, #520]	; (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b1a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b1a6:	f7f8 fd67 	bl	8003c78 <HAL_GetTick>
 800b1aa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1ae:	e00b      	b.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1b0:	f7f8 fd62 	bl	8003c78 <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	2b64      	cmp	r3, #100	; 0x64
 800b1be:	d903      	bls.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1c6:	e005      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1c8:	4b77      	ldr	r3, [pc, #476]	; (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0ed      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d173      	bne.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b1dc:	4b71      	ldr	r3, [pc, #452]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b1e8:	4053      	eors	r3, r2
 800b1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d015      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b1f2:	4b6c      	ldr	r3, [pc, #432]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1fe:	4b69      	ldr	r3, [pc, #420]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b202:	4a68      	ldr	r2, [pc, #416]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b208:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b20a:	4b66      	ldr	r3, [pc, #408]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20e:	4a65      	ldr	r2, [pc, #404]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b214:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b216:	4a63      	ldr	r2, [pc, #396]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b21c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b22a:	d118      	bne.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b22c:	f7f8 fd24 	bl	8003c78 <HAL_GetTick>
 800b230:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b234:	e00d      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b236:	f7f8 fd1f 	bl	8003c78 <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b240:	1ad2      	subs	r2, r2, r3
 800b242:	f241 3388 	movw	r3, #5000	; 0x1388
 800b246:	429a      	cmp	r2, r3
 800b248:	d903      	bls.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b250:	e005      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b252:	4b54      	ldr	r3, [pc, #336]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0eb      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b25e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b262:	2b00      	cmp	r3, #0
 800b264:	d129      	bne.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b276:	d10e      	bne.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b278:	4b4a      	ldr	r3, [pc, #296]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b288:	091a      	lsrs	r2, r3, #4
 800b28a:	4b48      	ldr	r3, [pc, #288]	; (800b3ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b28c:	4013      	ands	r3, r2
 800b28e:	4a45      	ldr	r2, [pc, #276]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b290:	430b      	orrs	r3, r1
 800b292:	6113      	str	r3, [r2, #16]
 800b294:	e005      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b296:	4b43      	ldr	r3, [pc, #268]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	4a42      	ldr	r2, [pc, #264]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b29c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b2a0:	6113      	str	r3, [r2, #16]
 800b2a2:	4b40      	ldr	r3, [pc, #256]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2b2:	4a3c      	ldr	r2, [pc, #240]	; (800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2b4:	430b      	orrs	r3, r1
 800b2b6:	6713      	str	r3, [r2, #112]	; 0x70
 800b2b8:	e008      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b2c2:	e003      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	f002 0301 	and.w	r3, r2, #1
 800b2d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b2e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	f000 808f 	beq.w	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2f4:	2b28      	cmp	r3, #40	; 0x28
 800b2f6:	d871      	bhi.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b3e5 	.word	0x0800b3e5
 800b304:	0800b3dd 	.word	0x0800b3dd
 800b308:	0800b3dd 	.word	0x0800b3dd
 800b30c:	0800b3dd 	.word	0x0800b3dd
 800b310:	0800b3dd 	.word	0x0800b3dd
 800b314:	0800b3dd 	.word	0x0800b3dd
 800b318:	0800b3dd 	.word	0x0800b3dd
 800b31c:	0800b3dd 	.word	0x0800b3dd
 800b320:	0800b3b1 	.word	0x0800b3b1
 800b324:	0800b3dd 	.word	0x0800b3dd
 800b328:	0800b3dd 	.word	0x0800b3dd
 800b32c:	0800b3dd 	.word	0x0800b3dd
 800b330:	0800b3dd 	.word	0x0800b3dd
 800b334:	0800b3dd 	.word	0x0800b3dd
 800b338:	0800b3dd 	.word	0x0800b3dd
 800b33c:	0800b3dd 	.word	0x0800b3dd
 800b340:	0800b3c7 	.word	0x0800b3c7
 800b344:	0800b3dd 	.word	0x0800b3dd
 800b348:	0800b3dd 	.word	0x0800b3dd
 800b34c:	0800b3dd 	.word	0x0800b3dd
 800b350:	0800b3dd 	.word	0x0800b3dd
 800b354:	0800b3dd 	.word	0x0800b3dd
 800b358:	0800b3dd 	.word	0x0800b3dd
 800b35c:	0800b3dd 	.word	0x0800b3dd
 800b360:	0800b3e5 	.word	0x0800b3e5
 800b364:	0800b3dd 	.word	0x0800b3dd
 800b368:	0800b3dd 	.word	0x0800b3dd
 800b36c:	0800b3dd 	.word	0x0800b3dd
 800b370:	0800b3dd 	.word	0x0800b3dd
 800b374:	0800b3dd 	.word	0x0800b3dd
 800b378:	0800b3dd 	.word	0x0800b3dd
 800b37c:	0800b3dd 	.word	0x0800b3dd
 800b380:	0800b3e5 	.word	0x0800b3e5
 800b384:	0800b3dd 	.word	0x0800b3dd
 800b388:	0800b3dd 	.word	0x0800b3dd
 800b38c:	0800b3dd 	.word	0x0800b3dd
 800b390:	0800b3dd 	.word	0x0800b3dd
 800b394:	0800b3dd 	.word	0x0800b3dd
 800b398:	0800b3dd 	.word	0x0800b3dd
 800b39c:	0800b3dd 	.word	0x0800b3dd
 800b3a0:	0800b3e5 	.word	0x0800b3e5
 800b3a4:	58024400 	.word	0x58024400
 800b3a8:	58024800 	.word	0x58024800
 800b3ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f001 fdcb 	bl	800cf54 <RCCEx_PLL2_Config>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3c4:	e00f      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ca:	3328      	adds	r3, #40	; 0x28
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f001 fe72 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3da:	e004      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3e2:	e000      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b3ee:	4bbf      	ldr	r3, [pc, #764]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3fc:	4abb      	ldr	r2, [pc, #748]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3fe:	430b      	orrs	r3, r1
 800b400:	6553      	str	r3, [r2, #84]	; 0x54
 800b402:	e003      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b404:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b408:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f002 0302 	and.w	r3, r2, #2
 800b418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b422:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b426:	460b      	mov	r3, r1
 800b428:	4313      	orrs	r3, r2
 800b42a:	d041      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b432:	2b05      	cmp	r3, #5
 800b434:	d824      	bhi.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b436:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b489 	.word	0x0800b489
 800b440:	0800b455 	.word	0x0800b455
 800b444:	0800b46b 	.word	0x0800b46b
 800b448:	0800b489 	.word	0x0800b489
 800b44c:	0800b489 	.word	0x0800b489
 800b450:	0800b489 	.word	0x0800b489
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b458:	3308      	adds	r3, #8
 800b45a:	2101      	movs	r1, #1
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 fd79 	bl	800cf54 <RCCEx_PLL2_Config>
 800b462:	4603      	mov	r3, r0
 800b464:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b468:	e00f      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	3328      	adds	r3, #40	; 0x28
 800b470:	2101      	movs	r1, #1
 800b472:	4618      	mov	r0, r3
 800b474:	f001 fe20 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b47e:	e004      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b486:	e000      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b48a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b492:	4b96      	ldr	r3, [pc, #600]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b496:	f023 0107 	bic.w	r1, r3, #7
 800b49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4a0:	4a92      	ldr	r2, [pc, #584]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	6553      	str	r3, [r2, #84]	; 0x54
 800b4a6:	e003      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f002 0304 	and.w	r3, r2, #4
 800b4bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d044      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d8:	2b05      	cmp	r3, #5
 800b4da:	d825      	bhi.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b4dc:	a201      	add	r2, pc, #4	; (adr r2, 800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e2:	bf00      	nop
 800b4e4:	0800b531 	.word	0x0800b531
 800b4e8:	0800b4fd 	.word	0x0800b4fd
 800b4ec:	0800b513 	.word	0x0800b513
 800b4f0:	0800b531 	.word	0x0800b531
 800b4f4:	0800b531 	.word	0x0800b531
 800b4f8:	0800b531 	.word	0x0800b531
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b500:	3308      	adds	r3, #8
 800b502:	2101      	movs	r1, #1
 800b504:	4618      	mov	r0, r3
 800b506:	f001 fd25 	bl	800cf54 <RCCEx_PLL2_Config>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b510:	e00f      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b516:	3328      	adds	r3, #40	; 0x28
 800b518:	2101      	movs	r1, #1
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fdcc 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b520:	4603      	mov	r3, r0
 800b522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b526:	e004      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b52e:	e000      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b530:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b532:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10b      	bne.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b53a:	4b6c      	ldr	r3, [pc, #432]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b53e:	f023 0107 	bic.w	r1, r3, #7
 800b542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54a:	4a68      	ldr	r2, [pc, #416]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b54c:	430b      	orrs	r3, r1
 800b54e:	6593      	str	r3, [r2, #88]	; 0x58
 800b550:	e003      	b.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b552:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b556:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f002 0320 	and.w	r3, r2, #32
 800b566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b56a:	2300      	movs	r3, #0
 800b56c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b570:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b574:	460b      	mov	r3, r1
 800b576:	4313      	orrs	r3, r2
 800b578:	d055      	beq.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b586:	d033      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b58c:	d82c      	bhi.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b592:	d02f      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b598:	d826      	bhi.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b59a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b59e:	d02b      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b5a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5a4:	d820      	bhi.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5aa:	d012      	beq.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b0:	d81a      	bhi.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d022      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b5b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5ba:	d115      	bne.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f001 fcc5 	bl	800cf54 <RCCEx_PLL2_Config>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5d0:	e015      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d6:	3328      	adds	r3, #40	; 0x28
 800b5d8:	2102      	movs	r1, #2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f001 fd6c 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5e6:	e00a      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5ee:	e006      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b5f0:	bf00      	nop
 800b5f2:	e004      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b5f4:	bf00      	nop
 800b5f6:	e002      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b5f8:	bf00      	nop
 800b5fa:	e000      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10b      	bne.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b606:	4b39      	ldr	r3, [pc, #228]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b60a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b616:	4a35      	ldr	r2, [pc, #212]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b618:	430b      	orrs	r3, r1
 800b61a:	6553      	str	r3, [r2, #84]	; 0x54
 800b61c:	e003      	b.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b61e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b622:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b636:	2300      	movs	r3, #0
 800b638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b63c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b640:	460b      	mov	r3, r1
 800b642:	4313      	orrs	r3, r2
 800b644:	d058      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b64e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b652:	d033      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b654:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b658:	d82c      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b65a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b65e:	d02f      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b664:	d826      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b66a:	d02b      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b66c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b670:	d820      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b676:	d012      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b67c:	d81a      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d022      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b686:	d115      	bne.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68c:	3308      	adds	r3, #8
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f001 fc5f 	bl	800cf54 <RCCEx_PLL2_Config>
 800b696:	4603      	mov	r3, r0
 800b698:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b69c:	e015      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a2:	3328      	adds	r3, #40	; 0x28
 800b6a4:	2102      	movs	r1, #2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 fd06 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b6b2:	e00a      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6ba:	e006      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b6bc:	bf00      	nop
 800b6be:	e004      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b6c0:	bf00      	nop
 800b6c2:	e002      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b6c4:	bf00      	nop
 800b6c6:	e000      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b6c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10e      	bne.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6d2:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6e2:	4a02      	ldr	r2, [pc, #8]	; (800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6e8:	e006      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b6ea:	bf00      	nop
 800b6ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b708:	2300      	movs	r3, #0
 800b70a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b70e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b712:	460b      	mov	r3, r1
 800b714:	4313      	orrs	r3, r2
 800b716:	d055      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b720:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b724:	d033      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b726:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b72a:	d82c      	bhi.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b72c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b730:	d02f      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b736:	d826      	bhi.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b738:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b73c:	d02b      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b73e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b742:	d820      	bhi.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b748:	d012      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b74a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b74e:	d81a      	bhi.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b750:	2b00      	cmp	r3, #0
 800b752:	d022      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b758:	d115      	bne.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75e:	3308      	adds	r3, #8
 800b760:	2100      	movs	r1, #0
 800b762:	4618      	mov	r0, r3
 800b764:	f001 fbf6 	bl	800cf54 <RCCEx_PLL2_Config>
 800b768:	4603      	mov	r3, r0
 800b76a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b76e:	e015      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b774:	3328      	adds	r3, #40	; 0x28
 800b776:	2102      	movs	r1, #2
 800b778:	4618      	mov	r0, r3
 800b77a:	f001 fc9d 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b77e:	4603      	mov	r3, r0
 800b780:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b784:	e00a      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b78c:	e006      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b78e:	bf00      	nop
 800b790:	e004      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b792:	bf00      	nop
 800b794:	e002      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b796:	bf00      	nop
 800b798:	e000      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b79a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b79c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10b      	bne.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7a4:	4ba0      	ldr	r3, [pc, #640]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7b4:	4a9c      	ldr	r2, [pc, #624]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7b6:	430b      	orrs	r3, r1
 800b7b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b7ba:	e003      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f002 0308 	and.w	r3, r2, #8
 800b7d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	d01e      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f0:	d10c      	bne.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f6:	3328      	adds	r3, #40	; 0x28
 800b7f8:	2102      	movs	r1, #2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f001 fc5c 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b80c:	4b86      	ldr	r3, [pc, #536]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b80e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b810:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b81c:	4a82      	ldr	r2, [pc, #520]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b81e:	430b      	orrs	r3, r1
 800b820:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	f002 0310 	and.w	r3, r2, #16
 800b82e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b832:	2300      	movs	r3, #0
 800b834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b838:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b83c:	460b      	mov	r3, r1
 800b83e:	4313      	orrs	r3, r2
 800b840:	d01e      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b84a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b84e:	d10c      	bne.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b854:	3328      	adds	r3, #40	; 0x28
 800b856:	2102      	movs	r1, #2
 800b858:	4618      	mov	r0, r3
 800b85a:	f001 fc2d 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b86a:	4b6f      	ldr	r3, [pc, #444]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b87a:	4a6b      	ldr	r2, [pc, #428]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b87c:	430b      	orrs	r3, r1
 800b87e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b88c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b88e:	2300      	movs	r3, #0
 800b890:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b892:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b896:	460b      	mov	r3, r1
 800b898:	4313      	orrs	r3, r2
 800b89a:	d03e      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b8a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8a8:	d022      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b8aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ae:	d81b      	bhi.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b8b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8b8:	d00b      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b8ba:	e015      	b.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f001 fb45 	bl	800cf54 <RCCEx_PLL2_Config>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8d0:	e00f      	b.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d6:	3328      	adds	r3, #40	; 0x28
 800b8d8:	2102      	movs	r1, #2
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f001 fbec 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8e6:	e004      	b.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8ee:	e000      	b.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b8f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8fa:	4b4b      	ldr	r3, [pc, #300]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b90a:	4a47      	ldr	r2, [pc, #284]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b90c:	430b      	orrs	r3, r1
 800b90e:	6593      	str	r3, [r2, #88]	; 0x58
 800b910:	e003      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b912:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b916:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b926:	673b      	str	r3, [r7, #112]	; 0x70
 800b928:	2300      	movs	r3, #0
 800b92a:	677b      	str	r3, [r7, #116]	; 0x74
 800b92c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b930:	460b      	mov	r3, r1
 800b932:	4313      	orrs	r3, r2
 800b934:	d03b      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b93e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b942:	d01f      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b944:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b948:	d818      	bhi.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b94a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b94e:	d003      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b954:	d007      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b956:	e011      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b958:	4b33      	ldr	r3, [pc, #204]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	4a32      	ldr	r2, [pc, #200]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b95e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b964:	e00f      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96a:	3328      	adds	r3, #40	; 0x28
 800b96c:	2101      	movs	r1, #1
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 fba2 	bl	800d0b8 <RCCEx_PLL3_Config>
 800b974:	4603      	mov	r3, r0
 800b976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b97a:	e004      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b982:	e000      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b984:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b986:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10b      	bne.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b98e:	4b26      	ldr	r3, [pc, #152]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b992:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b99e:	4a22      	ldr	r2, [pc, #136]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	6553      	str	r3, [r2, #84]	; 0x54
 800b9a4:	e003      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b9ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9bc:	2300      	movs	r3, #0
 800b9be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	d034      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b9d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9d8:	d007      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b9da:	e011      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9dc:	4b12      	ldr	r3, [pc, #72]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	4a11      	ldr	r2, [pc, #68]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9e8:	e00e      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	2102      	movs	r1, #2
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f001 faae 	bl	800cf54 <RCCEx_PLL2_Config>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9fe:	e003      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10d      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ba10:	4b05      	ldr	r3, [pc, #20]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba1e:	4a02      	ldr	r2, [pc, #8]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba20:	430b      	orrs	r3, r1
 800ba22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba24:	e006      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ba26:	bf00      	nop
 800ba28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ba40:	663b      	str	r3, [r7, #96]	; 0x60
 800ba42:	2300      	movs	r3, #0
 800ba44:	667b      	str	r3, [r7, #100]	; 0x64
 800ba46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	d00c      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba54:	3328      	adds	r3, #40	; 0x28
 800ba56:	2102      	movs	r1, #2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f001 fb2d 	bl	800d0b8 <RCCEx_PLL3_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ba76:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba78:	2300      	movs	r3, #0
 800ba7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ba80:	460b      	mov	r3, r1
 800ba82:	4313      	orrs	r3, r2
 800ba84:	d036      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ba86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba90:	d018      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ba92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba96:	d811      	bhi.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ba98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba9c:	d014      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ba9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baa2:	d80b      	bhi.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d011      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800baa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baac:	d106      	bne.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baae:	4bb7      	ldr	r3, [pc, #732]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab2:	4ab6      	ldr	r2, [pc, #728]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800baba:	e008      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bac2:	e004      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bac4:	bf00      	nop
 800bac6:	e002      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bac8:	bf00      	nop
 800baca:	e000      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bacc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bace:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d10a      	bne.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bad6:	4bad      	ldr	r3, [pc, #692]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bae4:	4aa9      	ldr	r2, [pc, #676]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bae6:	430b      	orrs	r3, r1
 800bae8:	6553      	str	r3, [r2, #84]	; 0x54
 800baea:	e003      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800baf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bb00:	653b      	str	r3, [r7, #80]	; 0x50
 800bb02:	2300      	movs	r3, #0
 800bb04:	657b      	str	r3, [r7, #84]	; 0x54
 800bb06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	d009      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bb10:	4b9e      	ldr	r3, [pc, #632]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1e:	4a9b      	ldr	r2, [pc, #620]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb20:	430b      	orrs	r3, r1
 800bb22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bb30:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb32:	2300      	movs	r3, #0
 800bb34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	d009      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb40:	4b92      	ldr	r3, [pc, #584]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb4e:	4a8f      	ldr	r2, [pc, #572]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb50:	430b      	orrs	r3, r1
 800bb52:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bb54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bb60:	643b      	str	r3, [r7, #64]	; 0x40
 800bb62:	2300      	movs	r3, #0
 800bb64:	647b      	str	r3, [r7, #68]	; 0x44
 800bb66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	d00e      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb70:	4b86      	ldr	r3, [pc, #536]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	4a85      	ldr	r2, [pc, #532]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb7a:	6113      	str	r3, [r2, #16]
 800bb7c:	4b83      	ldr	r3, [pc, #524]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb7e:	6919      	ldr	r1, [r3, #16]
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb88:	4a80      	ldr	r2, [pc, #512]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb8a:	430b      	orrs	r3, r1
 800bb8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bb8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bb9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bba4:	460b      	mov	r3, r1
 800bba6:	4313      	orrs	r3, r2
 800bba8:	d009      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bbaa:	4b78      	ldr	r3, [pc, #480]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb8:	4a74      	ldr	r2, [pc, #464]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbba:	430b      	orrs	r3, r1
 800bbbc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bbca:	633b      	str	r3, [r7, #48]	; 0x30
 800bbcc:	2300      	movs	r3, #0
 800bbce:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	d00a      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bbda:	4b6c      	ldr	r3, [pc, #432]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbde:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbea:	4a68      	ldr	r2, [pc, #416]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbec:	430b      	orrs	r3, r1
 800bbee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	62b9      	str	r1, [r7, #40]	; 0x28
 800bbfc:	f003 0301 	and.w	r3, r3, #1
 800bc00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bc06:	460b      	mov	r3, r1
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	d011      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc10:	3308      	adds	r3, #8
 800bc12:	2100      	movs	r1, #0
 800bc14:	4618      	mov	r0, r3
 800bc16:	f001 f99d 	bl	800cf54 <RCCEx_PLL2_Config>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	2100      	movs	r1, #0
 800bc3a:	6239      	str	r1, [r7, #32]
 800bc3c:	f003 0302 	and.w	r3, r3, #2
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
 800bc42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bc46:	460b      	mov	r3, r1
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	d011      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc50:	3308      	adds	r3, #8
 800bc52:	2101      	movs	r1, #1
 800bc54:	4618      	mov	r0, r3
 800bc56:	f001 f97d 	bl	800cf54 <RCCEx_PLL2_Config>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	2100      	movs	r1, #0
 800bc7a:	61b9      	str	r1, [r7, #24]
 800bc7c:	f003 0304 	and.w	r3, r3, #4
 800bc80:	61fb      	str	r3, [r7, #28]
 800bc82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bc86:	460b      	mov	r3, r1
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	d011      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc90:	3308      	adds	r3, #8
 800bc92:	2102      	movs	r1, #2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f001 f95d 	bl	800cf54 <RCCEx_PLL2_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d003      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bcb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6139      	str	r1, [r7, #16]
 800bcbc:	f003 0308 	and.w	r3, r3, #8
 800bcc0:	617b      	str	r3, [r7, #20]
 800bcc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	d011      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd0:	3328      	adds	r3, #40	; 0x28
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f001 f9ef 	bl	800d0b8 <RCCEx_PLL3_Config>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	60b9      	str	r1, [r7, #8]
 800bcfc:	f003 0310 	and.w	r3, r3, #16
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd06:	460b      	mov	r3, r1
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	d011      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd10:	3328      	adds	r3, #40	; 0x28
 800bd12:	2101      	movs	r1, #1
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 f9cf 	bl	800d0b8 <RCCEx_PLL3_Config>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	6039      	str	r1, [r7, #0]
 800bd3c:	f003 0320 	and.w	r3, r3, #32
 800bd40:	607b      	str	r3, [r7, #4]
 800bd42:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bd46:	460b      	mov	r3, r1
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	d011      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd50:	3328      	adds	r3, #40	; 0x28
 800bd52:	2102      	movs	r1, #2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f9af 	bl	800d0b8 <RCCEx_PLL3_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d003      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bd70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e000      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bd84:	46bd      	mov	sp, r7
 800bd86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd8a:	bf00      	nop
 800bd8c:	58024400 	.word	0x58024400

0800bd90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b090      	sub	sp, #64	; 0x40
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bd9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bda2:	430b      	orrs	r3, r1
 800bda4:	f040 8094 	bne.w	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bda8:	4b9b      	ldr	r3, [pc, #620]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdac:	f003 0307 	and.w	r3, r3, #7
 800bdb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	f200 8087 	bhi.w	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bdba:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bdd5 	.word	0x0800bdd5
 800bdc4:	0800bdfd 	.word	0x0800bdfd
 800bdc8:	0800be25 	.word	0x0800be25
 800bdcc:	0800bec1 	.word	0x0800bec1
 800bdd0:	0800be4d 	.word	0x0800be4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdd4:	4b90      	ldr	r3, [pc, #576]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bde0:	d108      	bne.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bde2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 ff62 	bl	800ccb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdf0:	f000 bc93 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf8:	f000 bc8f 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdfc:	4b86      	ldr	r3, [pc, #536]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be08:	d108      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be0a:	f107 0318 	add.w	r3, r7, #24
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fca6 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be18:	f000 bc7f 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be20:	f000 bc7b 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be24:	4b7c      	ldr	r3, [pc, #496]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be30:	d108      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be32:	f107 030c 	add.w	r3, r7, #12
 800be36:	4618      	mov	r0, r3
 800be38:	f000 fde6 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be40:	f000 bc6b 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be48:	f000 bc67 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be4c:	4b72      	ldr	r3, [pc, #456]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be56:	4b70      	ldr	r3, [pc, #448]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	2b04      	cmp	r3, #4
 800be60:	d10c      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800be62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be64:	2b00      	cmp	r3, #0
 800be66:	d109      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be68:	4b6b      	ldr	r3, [pc, #428]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	08db      	lsrs	r3, r3, #3
 800be6e:	f003 0303 	and.w	r3, r3, #3
 800be72:	4a6a      	ldr	r2, [pc, #424]	; (800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800be74:	fa22 f303 	lsr.w	r3, r2, r3
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be7a:	e01f      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be7c:	4b66      	ldr	r3, [pc, #408]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be88:	d106      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be90:	d102      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be92:	4b63      	ldr	r3, [pc, #396]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be96:	e011      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be98:	4b5f      	ldr	r3, [pc, #380]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bea4:	d106      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beac:	d102      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800beae:	4b5d      	ldr	r3, [pc, #372]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb2:	e003      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800beb8:	f000 bc2f 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bebc:	f000 bc2d 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bec0:	4b59      	ldr	r3, [pc, #356]	; (800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec4:	f000 bc29 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800becc:	f000 bc25 	b.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bed4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bed8:	430b      	orrs	r3, r1
 800beda:	f040 80a7 	bne.w	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bede:	4b4e      	ldr	r3, [pc, #312]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bee6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800beee:	d054      	beq.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bef6:	f200 808b 	bhi.w	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf00:	f000 8083 	beq.w	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf0a:	f200 8081 	bhi.w	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf14:	d02f      	beq.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf1c:	d878      	bhi.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d004      	beq.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf2a:	d012      	beq.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bf2c:	e070      	b.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf2e:	4b3a      	ldr	r3, [pc, #232]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf3a:	d107      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 feb5 	bl	800ccb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf4a:	e3e6      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf50:	e3e3      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf52:	4b31      	ldr	r3, [pc, #196]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf5e:	d107      	bne.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf60:	f107 0318 	add.w	r3, r7, #24
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 fbfb 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf6e:	e3d4      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf74:	e3d1      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf76:	4b28      	ldr	r3, [pc, #160]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf82:	d107      	bne.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf84:	f107 030c 	add.w	r3, r7, #12
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 fd3d 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf92:	e3c2      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf94:	2300      	movs	r3, #0
 800bf96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf98:	e3bf      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf9a:	4b1f      	ldr	r3, [pc, #124]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfa2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfa4:	4b1c      	ldr	r3, [pc, #112]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d10c      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d109      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfb6:	4b18      	ldr	r3, [pc, #96]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	08db      	lsrs	r3, r3, #3
 800bfbc:	f003 0303 	and.w	r3, r3, #3
 800bfc0:	4a16      	ldr	r2, [pc, #88]	; (800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bfc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc8:	e01e      	b.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfca:	4b13      	ldr	r3, [pc, #76]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfd6:	d106      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfde:	d102      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfe0:	4b0f      	ldr	r3, [pc, #60]	; (800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe4:	e010      	b.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bff2:	d106      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bffc:	4b09      	ldr	r3, [pc, #36]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c000:	e002      	b.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c006:	e388      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c008:	e387      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c00a:	4b07      	ldr	r3, [pc, #28]	; (800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c00e:	e384      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c014:	e381      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c016:	bf00      	nop
 800c018:	58024400 	.word	0x58024400
 800c01c:	03d09000 	.word	0x03d09000
 800c020:	003d0900 	.word	0x003d0900
 800c024:	02faf080 	.word	0x02faf080
 800c028:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c02c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c030:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c034:	430b      	orrs	r3, r1
 800c036:	f040 809c 	bne.w	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c03a:	4b9e      	ldr	r3, [pc, #632]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c03c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c03e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c042:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c04a:	d054      	beq.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c052:	f200 808b 	bhi.w	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c05c:	f000 8083 	beq.w	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c066:	f200 8081 	bhi.w	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c070:	d02f      	beq.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c078:	d878      	bhi.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c086:	d012      	beq.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c088:	e070      	b.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c08a:	4b8a      	ldr	r3, [pc, #552]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c096:	d107      	bne.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fe07 	bl	800ccb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0a6:	e338      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ac:	e335      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0ae:	4b81      	ldr	r3, [pc, #516]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0ba:	d107      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0bc:	f107 0318 	add.w	r3, r7, #24
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f000 fb4d 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ca:	e326      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d0:	e323      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0d2:	4b78      	ldr	r3, [pc, #480]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0de:	d107      	bne.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0e0:	f107 030c 	add.w	r3, r7, #12
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f000 fc8f 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ee:	e314      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f4:	e311      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0f6:	4b6f      	ldr	r3, [pc, #444]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c100:	4b6c      	ldr	r3, [pc, #432]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 0304 	and.w	r3, r3, #4
 800c108:	2b04      	cmp	r3, #4
 800c10a:	d10c      	bne.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d109      	bne.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c112:	4b68      	ldr	r3, [pc, #416]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	08db      	lsrs	r3, r3, #3
 800c118:	f003 0303 	and.w	r3, r3, #3
 800c11c:	4a66      	ldr	r2, [pc, #408]	; (800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c11e:	fa22 f303 	lsr.w	r3, r2, r3
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c124:	e01e      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c126:	4b63      	ldr	r3, [pc, #396]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c132:	d106      	bne.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c13a:	d102      	bne.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c13c:	4b5f      	ldr	r3, [pc, #380]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c13e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c140:	e010      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c142:	4b5c      	ldr	r3, [pc, #368]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c14a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14e:	d106      	bne.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c156:	d102      	bne.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c158:	4b59      	ldr	r3, [pc, #356]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c15c:	e002      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c162:	e2da      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c164:	e2d9      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c166:	4b57      	ldr	r3, [pc, #348]	; (800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16a:	e2d6      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c170:	e2d3      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c172:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c176:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c17a:	430b      	orrs	r3, r1
 800c17c:	f040 80a7 	bne.w	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c180:	4b4c      	ldr	r3, [pc, #304]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c184:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c188:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c190:	d055      	beq.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c198:	f200 8096 	bhi.w	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c1a2:	f000 8084 	beq.w	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c1ac:	f200 808c 	bhi.w	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1b6:	d030      	beq.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1be:	f200 8083 	bhi.w	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ce:	d012      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c1d0:	e07a      	b.n	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1d2:	4b38      	ldr	r3, [pc, #224]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1de:	d107      	bne.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f000 fd63 	bl	800ccb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ee:	e294      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f4:	e291      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1f6:	4b2f      	ldr	r3, [pc, #188]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c202:	d107      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c204:	f107 0318 	add.w	r3, r7, #24
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 faa9 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c212:	e282      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c218:	e27f      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c21a:	4b26      	ldr	r3, [pc, #152]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c226:	d107      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c228:	f107 030c 	add.w	r3, r7, #12
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fbeb 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c236:	e270      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c238:	2300      	movs	r3, #0
 800c23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23c:	e26d      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c23e:	4b1d      	ldr	r3, [pc, #116]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c246:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c248:	4b1a      	ldr	r3, [pc, #104]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	2b04      	cmp	r3, #4
 800c252:	d10c      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c256:	2b00      	cmp	r3, #0
 800c258:	d109      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c25a:	4b16      	ldr	r3, [pc, #88]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	08db      	lsrs	r3, r3, #3
 800c260:	f003 0303 	and.w	r3, r3, #3
 800c264:	4a14      	ldr	r2, [pc, #80]	; (800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c266:	fa22 f303 	lsr.w	r3, r2, r3
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c26c:	e01e      	b.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c26e:	4b11      	ldr	r3, [pc, #68]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c27a:	d106      	bne.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c282:	d102      	bne.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c284:	4b0d      	ldr	r3, [pc, #52]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c288:	e010      	b.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c28a:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c296:	d106      	bne.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c29e:	d102      	bne.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2a0:	4b07      	ldr	r3, [pc, #28]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a4:	e002      	b.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2aa:	e236      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2ac:	e235      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b2:	e232      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2b4:	58024400 	.word	0x58024400
 800c2b8:	03d09000 	.word	0x03d09000
 800c2bc:	003d0900 	.word	0x003d0900
 800c2c0:	02faf080 	.word	0x02faf080
 800c2c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2cc:	e225      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2d2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c2d6:	430b      	orrs	r3, r1
 800c2d8:	f040 8085 	bne.w	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c2dc:	4b9c      	ldr	r3, [pc, #624]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c2e4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2ec:	d06b      	beq.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2f4:	d874      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c2fc:	d056      	beq.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c304:	d86c      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c30c:	d03b      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c314:	d864      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c31c:	d021      	beq.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c324:	d85c      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d004      	beq.n	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c332:	d004      	beq.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c334:	e054      	b.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c336:	f7fe fb5f 	bl	800a9f8 <HAL_RCC_GetPCLK1Freq>
 800c33a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c33c:	e1ed      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c33e:	4b84      	ldr	r3, [pc, #528]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c34a:	d107      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c34c:	f107 0318 	add.w	r3, r7, #24
 800c350:	4618      	mov	r0, r3
 800c352:	f000 fa05 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c35a:	e1de      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c360:	e1db      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c362:	4b7b      	ldr	r3, [pc, #492]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c36a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36e:	d107      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c370:	f107 030c 	add.w	r3, r7, #12
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fb47 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37e:	e1cc      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c384:	e1c9      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c386:	4b72      	ldr	r3, [pc, #456]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 0304 	and.w	r3, r3, #4
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d109      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c392:	4b6f      	ldr	r3, [pc, #444]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	f003 0303 	and.w	r3, r3, #3
 800c39c:	4a6d      	ldr	r2, [pc, #436]	; (800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c39e:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a4:	e1b9      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3aa:	e1b6      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c3ac:	4b68      	ldr	r3, [pc, #416]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b8:	d102      	bne.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c3ba:	4b67      	ldr	r3, [pc, #412]	; (800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3be:	e1ac      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c4:	e1a9      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3c6:	4b62      	ldr	r3, [pc, #392]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3d2:	d102      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c3d4:	4b61      	ldr	r3, [pc, #388]	; (800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3d8:	e19f      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3de:	e19c      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e4:	e199      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c3e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ea:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	d173      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c3f2:	4b57      	ldr	r3, [pc, #348]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c3fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c402:	d02f      	beq.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c40a:	d863      	bhi.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d004      	beq.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c418:	d012      	beq.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c41a:	e05b      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c41c:	4b4c      	ldr	r3, [pc, #304]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c428:	d107      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c42a:	f107 0318 	add.w	r3, r7, #24
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 f996 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c438:	e16f      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43e:	e16c      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c440:	4b43      	ldr	r3, [pc, #268]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c44c:	d107      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c44e:	f107 030c 	add.w	r3, r7, #12
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fad8 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45c:	e15d      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c462:	e15a      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c464:	4b3a      	ldr	r3, [pc, #232]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c46e:	4b38      	ldr	r3, [pc, #224]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0304 	and.w	r3, r3, #4
 800c476:	2b04      	cmp	r3, #4
 800c478:	d10c      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d109      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c480:	4b33      	ldr	r3, [pc, #204]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	08db      	lsrs	r3, r3, #3
 800c486:	f003 0303 	and.w	r3, r3, #3
 800c48a:	4a32      	ldr	r2, [pc, #200]	; (800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c48c:	fa22 f303 	lsr.w	r3, r2, r3
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c492:	e01e      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c494:	4b2e      	ldr	r3, [pc, #184]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c49c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a0:	d106      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4a8:	d102      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4aa:	4b2b      	ldr	r3, [pc, #172]	; (800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ae:	e010      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4b0:	4b27      	ldr	r3, [pc, #156]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4bc:	d106      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4c4:	d102      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4c6:	4b25      	ldr	r3, [pc, #148]	; (800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ca:	e002      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4d0:	e123      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4d2:	e122      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d8:	e11f      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4de:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	d13c      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c4e6:	4b1a      	ldr	r3, [pc, #104]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d004      	beq.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4fc:	d012      	beq.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c4fe:	e023      	b.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c500:	4b13      	ldr	r3, [pc, #76]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c50c:	d107      	bne.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c50e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c512:	4618      	mov	r0, r3
 800c514:	f000 fbcc 	bl	800ccb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51c:	e0fd      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c522:	e0fa      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c524:	4b0a      	ldr	r3, [pc, #40]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c52c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c530:	d107      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c532:	f107 0318 	add.w	r3, r7, #24
 800c536:	4618      	mov	r0, r3
 800c538:	f000 f912 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c540:	e0eb      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c546:	e0e8      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c54c:	e0e5      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c54e:	bf00      	nop
 800c550:	58024400 	.word	0x58024400
 800c554:	03d09000 	.word	0x03d09000
 800c558:	003d0900 	.word	0x003d0900
 800c55c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c564:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c568:	430b      	orrs	r3, r1
 800c56a:	f040 8085 	bne.w	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c56e:	4b6d      	ldr	r3, [pc, #436]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c572:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c576:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c57e:	d06b      	beq.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c586:	d874      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c58e:	d056      	beq.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c596:	d86c      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c59e:	d03b      	beq.n	800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c5a6:	d864      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5ae:	d021      	beq.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5b6:	d85c      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d004      	beq.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5c4:	d004      	beq.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c5c6:	e054      	b.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c5c8:	f000 f8b4 	bl	800c734 <HAL_RCCEx_GetD3PCLK1Freq>
 800c5cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5ce:	e0a4      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5d0:	4b54      	ldr	r3, [pc, #336]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5dc:	d107      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5de:	f107 0318 	add.w	r3, r7, #24
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 f8bc 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ec:	e095      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f2:	e092      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5f4:	4b4b      	ldr	r3, [pc, #300]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c600:	d107      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c602:	f107 030c 	add.w	r3, r7, #12
 800c606:	4618      	mov	r0, r3
 800c608:	f000 f9fe 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c610:	e083      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c616:	e080      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c618:	4b42      	ldr	r3, [pc, #264]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 0304 	and.w	r3, r3, #4
 800c620:	2b04      	cmp	r3, #4
 800c622:	d109      	bne.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c624:	4b3f      	ldr	r3, [pc, #252]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	08db      	lsrs	r3, r3, #3
 800c62a:	f003 0303 	and.w	r3, r3, #3
 800c62e:	4a3e      	ldr	r2, [pc, #248]	; (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c630:	fa22 f303 	lsr.w	r3, r2, r3
 800c634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c636:	e070      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63c:	e06d      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c63e:	4b39      	ldr	r3, [pc, #228]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c64a:	d102      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c64c:	4b37      	ldr	r3, [pc, #220]	; (800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c650:	e063      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c656:	e060      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c658:	4b32      	ldr	r3, [pc, #200]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c664:	d102      	bne.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c666:	4b32      	ldr	r3, [pc, #200]	; (800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c66a:	e056      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c670:	e053      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c676:	e050      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c67c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c680:	430b      	orrs	r3, r1
 800c682:	d148      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c684:	4b27      	ldr	r3, [pc, #156]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c68c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c694:	d02a      	beq.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c69c:	d838      	bhi.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6aa:	d00d      	beq.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c6ac:	e030      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c6ae:	4b1d      	ldr	r3, [pc, #116]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ba:	d102      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c6bc:	4b1c      	ldr	r3, [pc, #112]	; (800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6c0:	e02b      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c6:	e028      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6c8:	4b16      	ldr	r3, [pc, #88]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6d4:	d107      	bne.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fae8 	bl	800ccb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e4:	e019      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ea:	e016      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6ec:	4b0d      	ldr	r3, [pc, #52]	; (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6f8:	d107      	bne.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6fa:	f107 0318 	add.w	r3, r7, #24
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f82e 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c708:	e007      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70e:	e004      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c714:	e001      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3740      	adds	r7, #64	; 0x40
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	58024400 	.word	0x58024400
 800c728:	03d09000 	.word	0x03d09000
 800c72c:	003d0900 	.word	0x003d0900
 800c730:	02faf080 	.word	0x02faf080

0800c734 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c738:	f7fe f92e 	bl	800a998 <HAL_RCC_GetHCLKFreq>
 800c73c:	4602      	mov	r2, r0
 800c73e:	4b06      	ldr	r3, [pc, #24]	; (800c758 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	091b      	lsrs	r3, r3, #4
 800c744:	f003 0307 	and.w	r3, r3, #7
 800c748:	4904      	ldr	r1, [pc, #16]	; (800c75c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c74a:	5ccb      	ldrb	r3, [r1, r3]
 800c74c:	f003 031f 	and.w	r3, r3, #31
 800c750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c754:	4618      	mov	r0, r3
 800c756:	bd80      	pop	{r7, pc}
 800c758:	58024400 	.word	0x58024400
 800c75c:	08018b5c 	.word	0x08018b5c

0800c760 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c760:	b480      	push	{r7}
 800c762:	b089      	sub	sp, #36	; 0x24
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c768:	4ba1      	ldr	r3, [pc, #644]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76c:	f003 0303 	and.w	r3, r3, #3
 800c770:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c772:	4b9f      	ldr	r3, [pc, #636]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c776:	0b1b      	lsrs	r3, r3, #12
 800c778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c77c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c77e:	4b9c      	ldr	r3, [pc, #624]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c782:	091b      	lsrs	r3, r3, #4
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c78a:	4b99      	ldr	r3, [pc, #612]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	08db      	lsrs	r3, r3, #3
 800c790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	fb02 f303 	mul.w	r3, r2, r3
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 8111 	beq.w	800c9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	f000 8083 	beq.w	800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	f200 80a1 	bhi.w	800c900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d056      	beq.n	800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c7ca:	e099      	b.n	800c900 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7cc:	4b88      	ldr	r3, [pc, #544]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0320 	and.w	r3, r3, #32
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d02d      	beq.n	800c834 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7d8:	4b85      	ldr	r3, [pc, #532]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	08db      	lsrs	r3, r3, #3
 800c7de:	f003 0303 	and.w	r3, r3, #3
 800c7e2:	4a84      	ldr	r2, [pc, #528]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	ee07 3a90 	vmov	s15, r3
 800c7f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	ee07 3a90 	vmov	s15, r3
 800c7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c802:	4b7b      	ldr	r3, [pc, #492]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c812:	ed97 6a03 	vldr	s12, [r7, #12]
 800c816:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c832:	e087      	b.n	800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	ee07 3a90 	vmov	s15, r3
 800c83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c846:	4b6a      	ldr	r3, [pc, #424]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c856:	ed97 6a03 	vldr	s12, [r7, #12]
 800c85a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c876:	e065      	b.n	800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	ee07 3a90 	vmov	s15, r3
 800c87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c882:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c88a:	4b59      	ldr	r3, [pc, #356]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c892:	ee07 3a90 	vmov	s15, r3
 800c896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c89a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c89e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8ba:	e043      	b.n	800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	ee07 3a90 	vmov	s15, r3
 800c8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ce:	4b48      	ldr	r3, [pc, #288]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8fe:	e021      	b.n	800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	ee07 3a90 	vmov	s15, r3
 800c906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c912:	4b37      	ldr	r3, [pc, #220]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c91a:	ee07 3a90 	vmov	s15, r3
 800c91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c922:	ed97 6a03 	vldr	s12, [r7, #12]
 800c926:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c93e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c942:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c944:	4b2a      	ldr	r3, [pc, #168]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c948:	0a5b      	lsrs	r3, r3, #9
 800c94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c95a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c95e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c96a:	ee17 2a90 	vmov	r2, s15
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c972:	4b1f      	ldr	r3, [pc, #124]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	0c1b      	lsrs	r3, r3, #16
 800c978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c97c:	ee07 3a90 	vmov	s15, r3
 800c980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c98c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c998:	ee17 2a90 	vmov	r2, s15
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c9a0:	4b13      	ldr	r3, [pc, #76]	; (800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a4:	0e1b      	lsrs	r3, r3, #24
 800c9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9c6:	ee17 2a90 	vmov	r2, s15
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c9ce:	e008      	b.n	800c9e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	609a      	str	r2, [r3, #8]
}
 800c9e2:	bf00      	nop
 800c9e4:	3724      	adds	r7, #36	; 0x24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	58024400 	.word	0x58024400
 800c9f4:	03d09000 	.word	0x03d09000
 800c9f8:	46000000 	.word	0x46000000
 800c9fc:	4c742400 	.word	0x4c742400
 800ca00:	4a742400 	.word	0x4a742400
 800ca04:	4c3ebc20 	.word	0x4c3ebc20

0800ca08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b089      	sub	sp, #36	; 0x24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca10:	4ba1      	ldr	r3, [pc, #644]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	f003 0303 	and.w	r3, r3, #3
 800ca18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ca1a:	4b9f      	ldr	r3, [pc, #636]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1e:	0d1b      	lsrs	r3, r3, #20
 800ca20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ca26:	4b9c      	ldr	r3, [pc, #624]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2a:	0a1b      	lsrs	r3, r3, #8
 800ca2c:	f003 0301 	and.w	r3, r3, #1
 800ca30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ca32:	4b99      	ldr	r3, [pc, #612]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca36:	08db      	lsrs	r3, r3, #3
 800ca38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	fb02 f303 	mul.w	r3, r2, r3
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 8111 	beq.w	800cc78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	f000 8083 	beq.w	800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	f200 80a1 	bhi.w	800cba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d056      	beq.n	800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ca72:	e099      	b.n	800cba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca74:	4b88      	ldr	r3, [pc, #544]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 0320 	and.w	r3, r3, #32
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d02d      	beq.n	800cadc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca80:	4b85      	ldr	r3, [pc, #532]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	08db      	lsrs	r3, r3, #3
 800ca86:	f003 0303 	and.w	r3, r3, #3
 800ca8a:	4a84      	ldr	r2, [pc, #528]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ca8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	ee07 3a90 	vmov	s15, r3
 800ca98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caaa:	4b7b      	ldr	r3, [pc, #492]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caba:	ed97 6a03 	vldr	s12, [r7, #12]
 800cabe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cada:	e087      	b.n	800cbec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	ee07 3a90 	vmov	s15, r3
 800cae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cca4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800caea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caee:	4b6a      	ldr	r3, [pc, #424]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb02:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb1e:	e065      	b.n	800cbec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb32:	4b59      	ldr	r3, [pc, #356]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb46:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb62:	e043      	b.n	800cbec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	ee07 3a90 	vmov	s15, r3
 800cb6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ccac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cb72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb76:	4b48      	ldr	r3, [pc, #288]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb7e:	ee07 3a90 	vmov	s15, r3
 800cb82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cba6:	e021      	b.n	800cbec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbba:	4b37      	ldr	r3, [pc, #220]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cbec:	4b2a      	ldr	r3, [pc, #168]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf0:	0a5b      	lsrs	r3, r3, #9
 800cbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc06:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc12:	ee17 2a90 	vmov	r2, s15
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cc1a:	4b1f      	ldr	r3, [pc, #124]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1e:	0c1b      	lsrs	r3, r3, #16
 800cc20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc34:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc40:	ee17 2a90 	vmov	r2, s15
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cc48:	4b13      	ldr	r3, [pc, #76]	; (800cc98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4c:	0e1b      	lsrs	r3, r3, #24
 800cc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc62:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc6e:	ee17 2a90 	vmov	r2, s15
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cc76:	e008      	b.n	800cc8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	609a      	str	r2, [r3, #8]
}
 800cc8a:	bf00      	nop
 800cc8c:	3724      	adds	r7, #36	; 0x24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	58024400 	.word	0x58024400
 800cc9c:	03d09000 	.word	0x03d09000
 800cca0:	46000000 	.word	0x46000000
 800cca4:	4c742400 	.word	0x4c742400
 800cca8:	4a742400 	.word	0x4a742400
 800ccac:	4c3ebc20 	.word	0x4c3ebc20

0800ccb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b089      	sub	sp, #36	; 0x24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccb8:	4ba0      	ldr	r3, [pc, #640]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccbc:	f003 0303 	and.w	r3, r3, #3
 800ccc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ccc2:	4b9e      	ldr	r3, [pc, #632]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc6:	091b      	lsrs	r3, r3, #4
 800ccc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cccc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ccce:	4b9b      	ldr	r3, [pc, #620]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ccd8:	4b98      	ldr	r3, [pc, #608]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccdc:	08db      	lsrs	r3, r3, #3
 800ccde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	fb02 f303 	mul.w	r3, r2, r3
 800cce8:	ee07 3a90 	vmov	s15, r3
 800ccec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 8111 	beq.w	800cf1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	2b02      	cmp	r3, #2
 800cd00:	f000 8083 	beq.w	800ce0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	f200 80a1 	bhi.w	800ce4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d003      	beq.n	800cd1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d056      	beq.n	800cdc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cd18:	e099      	b.n	800ce4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd1a:	4b88      	ldr	r3, [pc, #544]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 0320 	and.w	r3, r3, #32
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d02d      	beq.n	800cd82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd26:	4b85      	ldr	r3, [pc, #532]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	08db      	lsrs	r3, r3, #3
 800cd2c:	f003 0303 	and.w	r3, r3, #3
 800cd30:	4a83      	ldr	r2, [pc, #524]	; (800cf40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cd32:	fa22 f303 	lsr.w	r3, r2, r3
 800cd36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	ee07 3a90 	vmov	s15, r3
 800cd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	ee07 3a90 	vmov	s15, r3
 800cd48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd50:	4b7a      	ldr	r3, [pc, #488]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd58:	ee07 3a90 	vmov	s15, r3
 800cd5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd60:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd64:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cf44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd80:	e087      	b.n	800ce92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	ee07 3a90 	vmov	s15, r3
 800cd88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cf48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd94:	4b69      	ldr	r3, [pc, #420]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd9c:	ee07 3a90 	vmov	s15, r3
 800cda0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cda4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cda8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cf44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cdac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdc4:	e065      	b.n	800ce92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	ee07 3a90 	vmov	s15, r3
 800cdcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cf4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cdd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdd8:	4b58      	ldr	r3, [pc, #352]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde0:	ee07 3a90 	vmov	s15, r3
 800cde4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cf44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cdf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce08:	e043      	b.n	800ce92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	ee07 3a90 	vmov	s15, r3
 800ce10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cf50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ce18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce1c:	4b47      	ldr	r3, [pc, #284]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce24:	ee07 3a90 	vmov	s15, r3
 800ce28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce30:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cf44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce4c:	e021      	b.n	800ce92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	ee07 3a90 	vmov	s15, r3
 800ce54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cf48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce60:	4b36      	ldr	r3, [pc, #216]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce68:	ee07 3a90 	vmov	s15, r3
 800ce6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce74:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cf44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ce92:	4b2a      	ldr	r3, [pc, #168]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce96:	0a5b      	lsrs	r3, r3, #9
 800ce98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce9c:	ee07 3a90 	vmov	s15, r3
 800cea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceac:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb8:	ee17 2a90 	vmov	r2, s15
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cec0:	4b1e      	ldr	r3, [pc, #120]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec4:	0c1b      	lsrs	r3, r3, #16
 800cec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceca:	ee07 3a90 	vmov	s15, r3
 800cece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ced6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceda:	edd7 6a07 	vldr	s13, [r7, #28]
 800cede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cee6:	ee17 2a90 	vmov	r2, s15
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ceee:	4b13      	ldr	r3, [pc, #76]	; (800cf3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef2:	0e1b      	lsrs	r3, r3, #24
 800cef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf08:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf14:	ee17 2a90 	vmov	r2, s15
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cf1c:	e008      	b.n	800cf30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	609a      	str	r2, [r3, #8]
}
 800cf30:	bf00      	nop
 800cf32:	3724      	adds	r7, #36	; 0x24
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	58024400 	.word	0x58024400
 800cf40:	03d09000 	.word	0x03d09000
 800cf44:	46000000 	.word	0x46000000
 800cf48:	4c742400 	.word	0x4c742400
 800cf4c:	4a742400 	.word	0x4a742400
 800cf50:	4c3ebc20 	.word	0x4c3ebc20

0800cf54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf62:	4b53      	ldr	r3, [pc, #332]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf66:	f003 0303 	and.w	r3, r3, #3
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d101      	bne.n	800cf72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e099      	b.n	800d0a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cf72:	4b4f      	ldr	r3, [pc, #316]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a4e      	ldr	r2, [pc, #312]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cf78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf7e:	f7f6 fe7b 	bl	8003c78 <HAL_GetTick>
 800cf82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf84:	e008      	b.n	800cf98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf86:	f7f6 fe77 	bl	8003c78 <HAL_GetTick>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	d901      	bls.n	800cf98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf94:	2303      	movs	r3, #3
 800cf96:	e086      	b.n	800d0a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf98:	4b45      	ldr	r3, [pc, #276]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1f0      	bne.n	800cf86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cfa4:	4b42      	ldr	r3, [pc, #264]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	031b      	lsls	r3, r3, #12
 800cfb2:	493f      	ldr	r1, [pc, #252]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	628b      	str	r3, [r1, #40]	; 0x28
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	025b      	lsls	r3, r3, #9
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	041b      	lsls	r3, r3, #16
 800cfd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	061b      	lsls	r3, r3, #24
 800cfe4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cfe8:	4931      	ldr	r1, [pc, #196]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cfea:	4313      	orrs	r3, r2
 800cfec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cfee:	4b30      	ldr	r3, [pc, #192]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	695b      	ldr	r3, [r3, #20]
 800cffa:	492d      	ldr	r1, [pc, #180]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d000:	4b2b      	ldr	r3, [pc, #172]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d004:	f023 0220 	bic.w	r2, r3, #32
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	4928      	ldr	r1, [pc, #160]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d012:	4b27      	ldr	r3, [pc, #156]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d016:	4a26      	ldr	r2, [pc, #152]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d018:	f023 0310 	bic.w	r3, r3, #16
 800d01c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d01e:	4b24      	ldr	r3, [pc, #144]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d022:	4b24      	ldr	r3, [pc, #144]	; (800d0b4 <RCCEx_PLL2_Config+0x160>)
 800d024:	4013      	ands	r3, r2
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	69d2      	ldr	r2, [r2, #28]
 800d02a:	00d2      	lsls	r2, r2, #3
 800d02c:	4920      	ldr	r1, [pc, #128]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d02e:	4313      	orrs	r3, r2
 800d030:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d032:	4b1f      	ldr	r3, [pc, #124]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d036:	4a1e      	ldr	r2, [pc, #120]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d038:	f043 0310 	orr.w	r3, r3, #16
 800d03c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d106      	bne.n	800d052 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d044:	4b1a      	ldr	r3, [pc, #104]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d048:	4a19      	ldr	r2, [pc, #100]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d04a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d04e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d050:	e00f      	b.n	800d072 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d106      	bne.n	800d066 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d058:	4b15      	ldr	r3, [pc, #84]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	4a14      	ldr	r2, [pc, #80]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d05e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d062:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d064:	e005      	b.n	800d072 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d066:	4b12      	ldr	r3, [pc, #72]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06a:	4a11      	ldr	r2, [pc, #68]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d06c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d070:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d072:	4b0f      	ldr	r3, [pc, #60]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a0e      	ldr	r2, [pc, #56]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d07e:	f7f6 fdfb 	bl	8003c78 <HAL_GetTick>
 800d082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d084:	e008      	b.n	800d098 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d086:	f7f6 fdf7 	bl	8003c78 <HAL_GetTick>
 800d08a:	4602      	mov	r2, r0
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	2b02      	cmp	r3, #2
 800d092:	d901      	bls.n	800d098 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d094:	2303      	movs	r3, #3
 800d096:	e006      	b.n	800d0a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d098:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <RCCEx_PLL2_Config+0x15c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0f0      	beq.n	800d086 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	58024400 	.word	0x58024400
 800d0b4:	ffff0007 	.word	0xffff0007

0800d0b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0c6:	4b53      	ldr	r3, [pc, #332]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	f003 0303 	and.w	r3, r3, #3
 800d0ce:	2b03      	cmp	r3, #3
 800d0d0:	d101      	bne.n	800d0d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e099      	b.n	800d20a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d0d6:	4b4f      	ldr	r3, [pc, #316]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a4e      	ldr	r2, [pc, #312]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d0dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0e2:	f7f6 fdc9 	bl	8003c78 <HAL_GetTick>
 800d0e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d0e8:	e008      	b.n	800d0fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0ea:	f7f6 fdc5 	bl	8003c78 <HAL_GetTick>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d901      	bls.n	800d0fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	e086      	b.n	800d20a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d0fc:	4b45      	ldr	r3, [pc, #276]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1f0      	bne.n	800d0ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d108:	4b42      	ldr	r3, [pc, #264]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	051b      	lsls	r3, r3, #20
 800d116:	493f      	ldr	r1, [pc, #252]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d118:	4313      	orrs	r3, r2
 800d11a:	628b      	str	r3, [r1, #40]	; 0x28
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	3b01      	subs	r3, #1
 800d122:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	025b      	lsls	r3, r3, #9
 800d12e:	b29b      	uxth	r3, r3
 800d130:	431a      	orrs	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	3b01      	subs	r3, #1
 800d138:	041b      	lsls	r3, r3, #16
 800d13a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d13e:	431a      	orrs	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	3b01      	subs	r3, #1
 800d146:	061b      	lsls	r3, r3, #24
 800d148:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d14c:	4931      	ldr	r1, [pc, #196]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d14e:	4313      	orrs	r3, r2
 800d150:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d152:	4b30      	ldr	r3, [pc, #192]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d156:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	492d      	ldr	r1, [pc, #180]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d160:	4313      	orrs	r3, r2
 800d162:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d164:	4b2b      	ldr	r3, [pc, #172]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d168:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	699b      	ldr	r3, [r3, #24]
 800d170:	4928      	ldr	r1, [pc, #160]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d172:	4313      	orrs	r3, r2
 800d174:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d176:	4b27      	ldr	r3, [pc, #156]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	4a26      	ldr	r2, [pc, #152]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d17c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d182:	4b24      	ldr	r3, [pc, #144]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d186:	4b24      	ldr	r3, [pc, #144]	; (800d218 <RCCEx_PLL3_Config+0x160>)
 800d188:	4013      	ands	r3, r2
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	69d2      	ldr	r2, [r2, #28]
 800d18e:	00d2      	lsls	r2, r2, #3
 800d190:	4920      	ldr	r1, [pc, #128]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d192:	4313      	orrs	r3, r2
 800d194:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d196:	4b1f      	ldr	r3, [pc, #124]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19a:	4a1e      	ldr	r2, [pc, #120]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d19c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d106      	bne.n	800d1b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d1a8:	4b1a      	ldr	r3, [pc, #104]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ac:	4a19      	ldr	r2, [pc, #100]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d1b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1b4:	e00f      	b.n	800d1d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d106      	bne.n	800d1ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d1bc:	4b15      	ldr	r3, [pc, #84]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	4a14      	ldr	r2, [pc, #80]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d1c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1c8:	e005      	b.n	800d1d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d1ca:	4b12      	ldr	r3, [pc, #72]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ce:	4a11      	ldr	r2, [pc, #68]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d1d6:	4b0f      	ldr	r3, [pc, #60]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a0e      	ldr	r2, [pc, #56]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1e2:	f7f6 fd49 	bl	8003c78 <HAL_GetTick>
 800d1e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d1e8:	e008      	b.n	800d1fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d1ea:	f7f6 fd45 	bl	8003c78 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d901      	bls.n	800d1fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e006      	b.n	800d20a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d1fc:	4b05      	ldr	r3, [pc, #20]	; (800d214 <RCCEx_PLL3_Config+0x15c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d0f0      	beq.n	800d1ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d208:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	58024400 	.word	0x58024400
 800d218:	ffff0007 	.word	0xffff0007

0800d21c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e092      	b.n	800d354 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	7a5b      	ldrb	r3, [r3, #9]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b00      	cmp	r3, #0
 800d236:	d105      	bne.n	800d244 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7f5 fe20 	bl	8002e84 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2202      	movs	r2, #2
 800d248:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f022 0204 	bic.w	r2, r2, #4
 800d258:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	4b3e      	ldr	r3, [pc, #248]	; (800d35c <HAL_RNG_Init+0x140>)
 800d262:	4013      	ands	r3, r2
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	6852      	ldr	r2, [r2, #4]
 800d268:	431a      	orrs	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d272:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a39      	ldr	r2, [pc, #228]	; (800d360 <HAL_RNG_Init+0x144>)
 800d27a:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f247 2274 	movw	r2, #29300	; 0x7274
 800d284:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d294:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d296:	f7f6 fcef 	bl	8003c78 <HAL_GetTick>
 800d29a:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d29c:	e016      	b.n	800d2cc <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d29e:	f7f6 fceb 	bl	8003c78 <HAL_GetTick>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d90f      	bls.n	800d2cc <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ba:	d107      	bne.n	800d2cc <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e043      	b.n	800d354 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2da:	d0e0      	beq.n	800d29e <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f042 0204 	orr.w	r2, r2, #4
 800d2ea:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f6:	2b40      	cmp	r3, #64	; 0x40
 800d2f8:	d104      	bne.n	800d304 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2204      	movs	r2, #4
 800d2fe:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	e027      	b.n	800d354 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d304:	f7f6 fcb8 	bl	8003c78 <HAL_GetTick>
 800d308:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d30a:	e015      	b.n	800d338 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d30c:	f7f6 fcb4 	bl	8003c78 <HAL_GetTick>
 800d310:	4602      	mov	r2, r0
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	2b02      	cmp	r3, #2
 800d318:	d90e      	bls.n	800d338 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	f003 0304 	and.w	r3, r3, #4
 800d324:	2b04      	cmp	r3, #4
 800d326:	d107      	bne.n	800d338 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2204      	movs	r2, #4
 800d32c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2202      	movs	r2, #2
 800d332:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e00d      	b.n	800d354 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f003 0304 	and.w	r3, r3, #4
 800d342:	2b04      	cmp	r3, #4
 800d344:	d0e2      	beq.n	800d30c <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	bfffffdf 	.word	0xbfffffdf
 800d360:	17590abc 	.word	0x17590abc

0800d364 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	7a1b      	ldrb	r3, [r3, #8]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d101      	bne.n	800d37e <HAL_RNG_GenerateRandomNumber+0x1a>
 800d37a:	2302      	movs	r3, #2
 800d37c:	e06d      	b.n	800d45a <HAL_RNG_GenerateRandomNumber+0xf6>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2201      	movs	r2, #1
 800d382:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7a5b      	ldrb	r3, [r3, #9]
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d15c      	bne.n	800d448 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2202      	movs	r2, #2
 800d392:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39e:	2b40      	cmp	r3, #64	; 0x40
 800d3a0:	d10c      	bne.n	800d3bc <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2208      	movs	r2, #8
 800d3a6:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f864 	bl	800d476 <RNG_RecoverSeedError>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d101      	bne.n	800d3bc <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ba:	e04e      	b.n	800d45a <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800d3bc:	f7f6 fc5c 	bl	8003c78 <HAL_GetTick>
 800d3c0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d3c2:	e018      	b.n	800d3f6 <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d3c4:	f7f6 fc58 	bl	8003c78 <HAL_GetTick>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d911      	bls.n	800d3f6 <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d00a      	beq.n	800d3f6 <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2202      	movs	r2, #2
 800d3ea:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e031      	b.n	800d45a <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b01      	cmp	r3, #1
 800d402:	d1df      	bne.n	800d3c4 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689a      	ldr	r2, [r3, #8]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d418:	2b40      	cmp	r3, #64	; 0x40
 800d41a:	d10d      	bne.n	800d438 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2208      	movs	r2, #8
 800d420:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f022 0201 	bic.w	r2, r2, #1
 800d434:	605a      	str	r2, [r3, #4]
 800d436:	e003      	b.n	800d440 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	691a      	ldr	r2, [r3, #16]
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	725a      	strb	r2, [r3, #9]
 800d446:	e004      	b.n	800d452 <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2204      	movs	r2, #4
 800d44c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	721a      	strb	r2, [r3, #8]

  return status;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800d462:	b480      	push	{r7}
 800d464:	b083      	sub	sp, #12
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800d46a:	bf00      	nop
 800d46c:	370c      	adds	r7, #12
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr

0800d476 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	f003 0304 	and.w	r3, r3, #4
 800d48c:	2b04      	cmp	r3, #4
 800d48e:	d008      	beq.n	800d4a2 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	685a      	ldr	r2, [r3, #4]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d49e:	605a      	str	r2, [r3, #4]
 800d4a0:	e05f      	b.n	800d562 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d4b0:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d4c0:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d110      	bne.n	800d4f4 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	f043 0202 	orr.w	r2, r3, #2
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff ffb9 	bl	800d462 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e03d      	b.n	800d570 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d502:	d0e0      	beq.n	800d4c6 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50e:	2b40      	cmp	r3, #64	; 0x40
 800d510:	d107      	bne.n	800d522 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d520:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800d522:	2302      	movs	r3, #2
 800d524:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3b01      	subs	r3, #1
 800d52a:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d110      	bne.n	800d554 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2201      	movs	r2, #1
 800d536:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	f043 0202 	orr.w	r2, r3, #2
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff ff89 	bl	800d462 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	e00d      	b.n	800d570 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f003 0304 	and.w	r3, r3, #4
 800d55e:	2b04      	cmp	r3, #4
 800d560:	d0e1      	beq.n	800d526 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	f023 0208 	bic.w	r2, r3, #8
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08a      	sub	sp, #40	; 0x28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e075      	b.n	800d676 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d105      	bne.n	800d5a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7f5 fcab 	bl	8002ef8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2204      	movs	r2, #4
 800d5a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f868 	bl	800d680 <HAL_SD_InitCard>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e05d      	b.n	800d676 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d5ba:	f107 0308 	add.w	r3, r7, #8
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fdaf 	bl	800e124 <HAL_SD_GetCardStatus>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d001      	beq.n	800d5d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e052      	b.n	800d676 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d5d0:	7e3b      	ldrb	r3, [r7, #24]
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d5d6:	7e7b      	ldrb	r3, [r7, #25]
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d10a      	bne.n	800d5fa <HAL_SD_Init+0x82>
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d102      	bne.n	800d5f0 <HAL_SD_Init+0x78>
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d004      	beq.n	800d5fa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5f6:	659a      	str	r2, [r3, #88]	; 0x58
 800d5f8:	e00b      	b.n	800d612 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d104      	bne.n	800d60c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d608:	659a      	str	r2, [r3, #88]	; 0x58
 800d60a:	e002      	b.n	800d612 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fe6d 	bl	800e2f8 <HAL_SD_ConfigWideBusOperation>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	e026      	b.n	800d676 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d628:	f7f6 fb26 	bl	8003c78 <HAL_GetTick>
 800d62c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d62e:	e011      	b.n	800d654 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d630:	f7f6 fb22 	bl	8003c78 <HAL_GetTick>
 800d634:	4602      	mov	r2, r0
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63e:	d109      	bne.n	800d654 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d646:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d650:	2303      	movs	r3, #3
 800d652:	e010      	b.n	800d676 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 ff61 	bl	800e51c <HAL_SD_GetCardState>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b04      	cmp	r3, #4
 800d65e:	d1e7      	bne.n	800d630 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3728      	adds	r7, #40	; 0x28
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
	...

0800d680 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d680:	b590      	push	{r4, r7, lr}
 800d682:	b08d      	sub	sp, #52	; 0x34
 800d684:	af02      	add	r7, sp, #8
 800d686:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d688:	2300      	movs	r3, #0
 800d68a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d68c:	2300      	movs	r3, #0
 800d68e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d690:	2300      	movs	r3, #0
 800d692:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d694:	2300      	movs	r3, #0
 800d696:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d698:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d69c:	f04f 0100 	mov.w	r1, #0
 800d6a0:	f7fe fb76 	bl	800bd90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d6a4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d109      	bne.n	800d6c0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d6ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e070      	b.n	800d7a2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	0a1b      	lsrs	r3, r3, #8
 800d6c4:	4a39      	ldr	r2, [pc, #228]	; (800d7ac <HAL_SD_InitCard+0x12c>)
 800d6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ca:	091b      	lsrs	r3, r3, #4
 800d6cc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681c      	ldr	r4, [r3, #0]
 800d6d2:	466a      	mov	r2, sp
 800d6d4:	f107 0318 	add.w	r3, r7, #24
 800d6d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800d6e0:	f107 030c 	add.w	r3, r7, #12
 800d6e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f004 fec4 	bl	8012474 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f004 ff07 	bl	8012504 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d005      	beq.n	800d708 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d702:	fbb2 f3f3 	udiv	r3, r2, r3
 800d706:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d007      	beq.n	800d71e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d70e:	4a28      	ldr	r2, [pc, #160]	; (800d7b0 <HAL_SD_InitCard+0x130>)
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	fbb2 f3f3 	udiv	r3, r2, r3
 800d716:	3301      	adds	r3, #1
 800d718:	4618      	mov	r0, r3
 800d71a:	f7f6 fab9 	bl	8003c90 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 ffea 	bl	800e6f8 <SD_PowerON>
 800d724:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00b      	beq.n	800d744 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d738:	6a3b      	ldr	r3, [r7, #32]
 800d73a:	431a      	orrs	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e02e      	b.n	800d7a2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 ff09 	bl	800e55c <SD_InitCard>
 800d74a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00b      	beq.n	800d76a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	431a      	orrs	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d766:	2301      	movs	r3, #1
 800d768:	e01b      	b.n	800d7a2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d772:	4618      	mov	r0, r3
 800d774:	f004 ff5c 	bl	8012630 <SDMMC_CmdBlockLength>
 800d778:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d77a:	6a3b      	ldr	r3, [r7, #32]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00f      	beq.n	800d7a0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a0b      	ldr	r2, [pc, #44]	; (800d7b4 <HAL_SD_InitCard+0x134>)
 800d786:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	431a      	orrs	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e000      	b.n	800d7a2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	372c      	adds	r7, #44	; 0x2c
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd90      	pop	{r4, r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	014f8b59 	.word	0x014f8b59
 800d7b0:	00012110 	.word	0x00012110
 800d7b4:	1fe00fff 	.word	0x1fe00fff

0800d7b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b08c      	sub	sp, #48	; 0x30
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e08d      	b.n	800d8fc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	f040 8086 	bne.w	800d8fa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	441a      	add	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d907      	bls.n	800d812 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d806:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e074      	b.n	800d8fc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2203      	movs	r2, #3
 800d816:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2200      	movs	r2, #0
 800d820:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	025a      	lsls	r2, r3, #9
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	2b01      	cmp	r3, #1
 800d836:	d002      	beq.n	800d83e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	025b      	lsls	r3, r3, #9
 800d83c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d83e:	f04f 33ff 	mov.w	r3, #4294967295
 800d842:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	025b      	lsls	r3, r3, #9
 800d848:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d84a:	2390      	movs	r3, #144	; 0x90
 800d84c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d84e:	2302      	movs	r3, #2
 800d850:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d852:	2300      	movs	r3, #0
 800d854:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d856:	2300      	movs	r3, #0
 800d858:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f107 0210 	add.w	r2, r7, #16
 800d862:	4611      	mov	r1, r2
 800d864:	4618      	mov	r0, r3
 800d866:	f004 feb7 	bl	80125d8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68da      	ldr	r2, [r3, #12]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d878:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2201      	movs	r2, #1
 800d888:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d90a      	bls.n	800d8a6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2282      	movs	r2, #130	; 0x82
 800d894:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d89c:	4618      	mov	r0, r3
 800d89e:	f004 ff0d 	bl	80126bc <SDMMC_CmdReadMultiBlock>
 800d8a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d8a4:	e009      	b.n	800d8ba <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2281      	movs	r2, #129	; 0x81
 800d8aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f004 fedf 	bl	8012676 <SDMMC_CmdReadSingleBlock>
 800d8b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d012      	beq.n	800d8e6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a0f      	ldr	r2, [pc, #60]	; (800d904 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d8c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e00a      	b.n	800d8fc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d8f4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	e000      	b.n	800d8fc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d8fa:	2302      	movs	r3, #2
  }
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3730      	adds	r7, #48	; 0x30
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	1fe00fff 	.word	0x1fe00fff

0800d908 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08c      	sub	sp, #48	; 0x30
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d107      	bne.n	800d930 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d924:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e08d      	b.n	800da4c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b01      	cmp	r3, #1
 800d93a:	f040 8086 	bne.w	800da4a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	441a      	add	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d94e:	429a      	cmp	r2, r3
 800d950:	d907      	bls.n	800d962 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d956:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	e074      	b.n	800da4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2203      	movs	r2, #3
 800d966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2200      	movs	r2, #0
 800d970:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	025a      	lsls	r2, r3, #9
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	2b01      	cmp	r3, #1
 800d986:	d002      	beq.n	800d98e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98a:	025b      	lsls	r3, r3, #9
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d98e:	f04f 33ff 	mov.w	r3, #4294967295
 800d992:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	025b      	lsls	r3, r3, #9
 800d998:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d99a:	2390      	movs	r3, #144	; 0x90
 800d99c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f107 0210 	add.w	r2, r7, #16
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f004 fe0f 	bl	80125d8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68da      	ldr	r2, [r3, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9c8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d90a      	bls.n	800d9f6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	22a0      	movs	r2, #160	; 0xa0
 800d9e4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f004 feab 	bl	8012748 <SDMMC_CmdWriteMultiBlock>
 800d9f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d9f4:	e009      	b.n	800da0a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2290      	movs	r2, #144	; 0x90
 800d9fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da02:	4618      	mov	r0, r3
 800da04:	f004 fe7d 	bl	8012702 <SDMMC_CmdWriteSingleBlock>
 800da08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d012      	beq.n	800da36 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a0f      	ldr	r2, [pc, #60]	; (800da54 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800da16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	431a      	orrs	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e00a      	b.n	800da4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800da44:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800da46:	2300      	movs	r3, #0
 800da48:	e000      	b.n	800da4c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800da4a:	2302      	movs	r3, #2
  }
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3730      	adds	r7, #48	; 0x30
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	1fe00fff 	.word	0x1fe00fff

0800da58 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da64:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d008      	beq.n	800da86 <HAL_SD_IRQHandler+0x2e>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f003 0308 	and.w	r3, r3, #8
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d003      	beq.n	800da86 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f001 f926 	bl	800ecd0 <SD_Read_IT>
 800da84:	e19a      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 80ac 	beq.w	800dbee <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da9e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	4b59      	ldr	r3, [pc, #356]	; (800dc10 <HAL_SD_IRQHandler+0x1b8>)
 800daac:	400b      	ands	r3, r1
 800daae:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dabe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68da      	ldr	r2, [r3, #12]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dace:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f003 0308 	and.w	r3, r3, #8
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d038      	beq.n	800db4c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f003 0302 	and.w	r3, r3, #2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d104      	bne.n	800daee <HAL_SD_IRQHandler+0x96>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f003 0320 	and.w	r3, r3, #32
 800daea:	2b00      	cmp	r3, #0
 800daec:	d011      	beq.n	800db12 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f004 fe4c 	bl	8012790 <SDMMC_CmdStopTransfer>
 800daf8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d008      	beq.n	800db12 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	431a      	orrs	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f95b 	bl	800ddc8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a3f      	ldr	r2, [pc, #252]	; (800dc14 <HAL_SD_IRQHandler+0x1bc>)
 800db18:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d104      	bne.n	800db3c <HAL_SD_IRQHandler+0xe4>
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d003      	beq.n	800db44 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f006 fe4d 	bl	80147dc <HAL_SD_RxCpltCallback>
 800db42:	e13b      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f006 fe3f 	bl	80147c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800db4a:	e137      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db52:	2b00      	cmp	r3, #0
 800db54:	f000 8132 	beq.w	800ddbc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2200      	movs	r2, #0
 800db5e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2200      	movs	r2, #0
 800db66:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2200      	movs	r2, #0
 800db6e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f003 0302 	and.w	r3, r3, #2
 800db76:	2b00      	cmp	r3, #0
 800db78:	d104      	bne.n	800db84 <HAL_SD_IRQHandler+0x12c>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f003 0320 	and.w	r3, r3, #32
 800db80:	2b00      	cmp	r3, #0
 800db82:	d011      	beq.n	800dba8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4618      	mov	r0, r3
 800db8a:	f004 fe01 	bl	8012790 <SDMMC_CmdStopTransfer>
 800db8e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d008      	beq.n	800dba8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	431a      	orrs	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f910 	bl	800ddc8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f003 0310 	and.w	r3, r3, #16
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d104      	bne.n	800dbca <HAL_SD_IRQHandler+0x172>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f003 0320 	and.w	r3, r3, #32
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f006 fdfc 	bl	80147c8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f003 0301 	and.w	r3, r3, #1
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d105      	bne.n	800dbe6 <HAL_SD_IRQHandler+0x18e>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 80eb 	beq.w	800ddbc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f006 fdf8 	bl	80147dc <HAL_SD_RxCpltCallback>
}
 800dbec:	e0e6      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00d      	beq.n	800dc18 <HAL_SD_IRQHandler+0x1c0>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f003 0308 	and.w	r3, r3, #8
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d008      	beq.n	800dc18 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f001 f8a8 	bl	800ed5c <SD_Write_IT>
 800dc0c:	e0d6      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
 800dc0e:	bf00      	nop
 800dc10:	ffff3ec5 	.word	0xffff3ec5
 800dc14:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc1e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 809d 	beq.w	800dd62 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d005      	beq.n	800dc42 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc3a:	f043 0202 	orr.w	r2, r3, #2
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc48:	f003 0308 	and.w	r3, r3, #8
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d005      	beq.n	800dc5c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc54:	f043 0208 	orr.w	r2, r3, #8
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc62:	f003 0320 	and.w	r3, r3, #32
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d005      	beq.n	800dc76 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6e:	f043 0220 	orr.w	r2, r3, #32
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc7c:	f003 0310 	and.w	r3, r3, #16
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc88:	f043 0210 	orr.w	r2, r3, #16
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a4b      	ldr	r2, [pc, #300]	; (800ddc4 <HAL_SD_IRQHandler+0x36c>)
 800dc96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dca6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68da      	ldr	r2, [r3, #12]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcb6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dcc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dcd6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f004 fd57 	bl	8012790 <SDMMC_CmdStopTransfer>
 800dce2:	4602      	mov	r2, r0
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce8:	431a      	orrs	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68da      	ldr	r2, [r3, #12]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcfc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd06:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f003 0308 	and.w	r3, r3, #8
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d00a      	beq.n	800dd28 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2201      	movs	r2, #1
 800dd16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f851 	bl	800ddc8 <HAL_SD_ErrorCallback>
}
 800dd26:	e049      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d044      	beq.n	800ddbc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d040      	beq.n	800ddbc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dd48:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2201      	movs	r2, #1
 800dd56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f834 	bl	800ddc8 <HAL_SD_ErrorCallback>
}
 800dd60:	e02c      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d025      	beq.n	800ddbc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd78:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd80:	f003 0304 	and.w	r3, r3, #4
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10c      	bne.n	800dda2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f003 0320 	and.w	r3, r3, #32
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d003      	beq.n	800dd9a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f001 f84a 	bl	800ee2c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dd98:	e010      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f001 f832 	bl	800ee04 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dda0:	e00c      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f003 0320 	and.w	r3, r3, #32
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d003      	beq.n	800ddb4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f001 f833 	bl	800ee18 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ddb2:	e003      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f001 f81b 	bl	800edf0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ddba:	e7ff      	b.n	800ddbc <HAL_SD_IRQHandler+0x364>
 800ddbc:	bf00      	nop
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	18000f3a 	.word	0x18000f3a

0800ddc8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ddd0:	bf00      	nop
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddea:	0f9b      	lsrs	r3, r3, #30
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddf6:	0e9b      	lsrs	r3, r3, #26
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	f003 030f 	and.w	r3, r3, #15
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de08:	0e1b      	lsrs	r3, r3, #24
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	f003 0303 	and.w	r3, r3, #3
 800de10:	b2da      	uxtb	r2, r3
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de1a:	0c1b      	lsrs	r3, r3, #16
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de26:	0a1b      	lsrs	r3, r3, #8
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de32:	b2da      	uxtb	r2, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de3c:	0d1b      	lsrs	r3, r3, #20
 800de3e:	b29a      	uxth	r2, r3
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de48:	0c1b      	lsrs	r3, r3, #16
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	f003 030f 	and.w	r3, r3, #15
 800de50:	b2da      	uxtb	r2, r3
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de5a:	0bdb      	lsrs	r3, r3, #15
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	f003 0301 	and.w	r3, r3, #1
 800de62:	b2da      	uxtb	r2, r3
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de6c:	0b9b      	lsrs	r3, r3, #14
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	b2da      	uxtb	r2, r3
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de7e:	0b5b      	lsrs	r3, r3, #13
 800de80:	b2db      	uxtb	r3, r3
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	b2da      	uxtb	r2, r3
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de90:	0b1b      	lsrs	r3, r3, #12
 800de92:	b2db      	uxtb	r3, r3
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2200      	movs	r2, #0
 800dea2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d163      	bne.n	800df74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800deb0:	009a      	lsls	r2, r3, #2
 800deb2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800deb6:	4013      	ands	r3, r2
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800debc:	0f92      	lsrs	r2, r2, #30
 800debe:	431a      	orrs	r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec8:	0edb      	lsrs	r3, r3, #27
 800deca:	b2db      	uxtb	r3, r3
 800decc:	f003 0307 	and.w	r3, r3, #7
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deda:	0e1b      	lsrs	r3, r3, #24
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	f003 0307 	and.w	r3, r3, #7
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deec:	0d5b      	lsrs	r3, r3, #21
 800deee:	b2db      	uxtb	r3, r3
 800def0:	f003 0307 	and.w	r3, r3, #7
 800def4:	b2da      	uxtb	r2, r3
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800defe:	0c9b      	lsrs	r3, r3, #18
 800df00:	b2db      	uxtb	r3, r3
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	b2da      	uxtb	r2, r3
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df10:	0bdb      	lsrs	r3, r3, #15
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f003 0307 	and.w	r3, r3, #7
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	1c5a      	adds	r2, r3, #1
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	7e1b      	ldrb	r3, [r3, #24]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	3302      	adds	r3, #2
 800df34:	2201      	movs	r2, #1
 800df36:	fa02 f303 	lsl.w	r3, r2, r3
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800df3e:	fb03 f202 	mul.w	r2, r3, r2
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	7a1b      	ldrb	r3, [r3, #8]
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	f003 030f 	and.w	r3, r3, #15
 800df50:	2201      	movs	r2, #1
 800df52:	409a      	lsls	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800df60:	0a52      	lsrs	r2, r2, #9
 800df62:	fb03 f202 	mul.w	r2, r3, r2
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df70:	655a      	str	r2, [r3, #84]	; 0x54
 800df72:	e031      	b.n	800dfd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d11d      	bne.n	800dfb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df80:	041b      	lsls	r3, r3, #16
 800df82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df8a:	0c1b      	lsrs	r3, r3, #16
 800df8c:	431a      	orrs	r2, r3
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	3301      	adds	r3, #1
 800df98:	029a      	lsls	r2, r3, #10
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	655a      	str	r2, [r3, #84]	; 0x54
 800dfb6:	e00f      	b.n	800dfd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a58      	ldr	r2, [pc, #352]	; (800e120 <HAL_SD_GetCardCSD+0x344>)
 800dfbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e09d      	b.n	800e114 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfdc:	0b9b      	lsrs	r3, r3, #14
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f003 0301 	and.w	r3, r3, #1
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfee:	09db      	lsrs	r3, r3, #7
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e000:	b2db      	uxtb	r3, r3
 800e002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e006:	b2da      	uxtb	r2, r3
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e010:	0fdb      	lsrs	r3, r3, #31
 800e012:	b2da      	uxtb	r2, r3
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e01c:	0f5b      	lsrs	r3, r3, #29
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	f003 0303 	and.w	r3, r3, #3
 800e024:	b2da      	uxtb	r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e02e:	0e9b      	lsrs	r3, r3, #26
 800e030:	b2db      	uxtb	r3, r3
 800e032:	f003 0307 	and.w	r3, r3, #7
 800e036:	b2da      	uxtb	r2, r3
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e040:	0d9b      	lsrs	r3, r3, #22
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f003 030f 	and.w	r3, r3, #15
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e052:	0d5b      	lsrs	r3, r3, #21
 800e054:	b2db      	uxtb	r3, r3
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e06e:	0c1b      	lsrs	r3, r3, #16
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	b2da      	uxtb	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e082:	0bdb      	lsrs	r3, r3, #15
 800e084:	b2db      	uxtb	r3, r3
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e096:	0b9b      	lsrs	r3, r3, #14
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0aa:	0b5b      	lsrs	r3, r3, #13
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0be:	0b1b      	lsrs	r3, r3, #12
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f003 0301 	and.w	r3, r3, #1
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0d2:	0a9b      	lsrs	r3, r3, #10
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	f003 0303 	and.w	r3, r3, #3
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e6:	0a1b      	lsrs	r3, r3, #8
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	f003 0303 	and.w	r3, r3, #3
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0fa:	085b      	lsrs	r3, r3, #1
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e102:	b2da      	uxtb	r2, r3
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr
 800e120:	1fe00fff 	.word	0x1fe00fff

0800e124 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b094      	sub	sp, #80	; 0x50
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d101      	bne.n	800e144 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	e0a7      	b.n	800e294 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e144:	f107 0308 	add.w	r3, r7, #8
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fb62 	bl	800e814 <SD_SendSDStatus>
 800e150:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e154:	2b00      	cmp	r3, #0
 800e156:	d011      	beq.n	800e17c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a4f      	ldr	r2, [pc, #316]	; (800e29c <HAL_SD_GetCardStatus+0x178>)
 800e15e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e166:	431a      	orrs	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e17a:	e070      	b.n	800e25e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	099b      	lsrs	r3, r3, #6
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	b2da      	uxtb	r2, r3
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	095b      	lsrs	r3, r3, #5
 800e190:	b2db      	uxtb	r3, r3
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	b2da      	uxtb	r2, r3
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	0a1b      	lsrs	r3, r3, #8
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1a6:	b29a      	uxth	r2, r3
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	0e1b      	lsrs	r3, r3, #24
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	061a      	lsls	r2, r3, #24
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	021b      	lsls	r3, r3, #8
 800e1be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1c2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	0a1b      	lsrs	r3, r3, #8
 800e1c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1cc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	0e1b      	lsrs	r3, r3, #24
 800e1d2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	0a1b      	lsrs	r3, r3, #8
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	0d1b      	lsrs	r3, r3, #20
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	f003 030f 	and.w	r3, r3, #15
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	0c1b      	lsrs	r3, r3, #16
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e204:	b29a      	uxth	r2, r3
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	4313      	orrs	r3, r2
 800e210:	b29a      	uxth	r2, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	0a9b      	lsrs	r3, r3, #10
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e220:	b2da      	uxtb	r2, r3
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	0a1b      	lsrs	r3, r3, #8
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	f003 0303 	and.w	r3, r3, #3
 800e230:	b2da      	uxtb	r2, r3
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	091b      	lsrs	r3, r3, #4
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	f003 030f 	and.w	r3, r3, #15
 800e240:	b2da      	uxtb	r2, r3
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	f003 030f 	and.w	r3, r3, #15
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	0e1b      	lsrs	r3, r3, #24
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e266:	4618      	mov	r0, r3
 800e268:	f004 f9e2 	bl	8012630 <SDMMC_CmdBlockLength>
 800e26c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00d      	beq.n	800e290 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a08      	ldr	r2, [pc, #32]	; (800e29c <HAL_SD_GetCardStatus+0x178>)
 800e27a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e280:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e290:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e294:	4618      	mov	r0, r3
 800e296:	3750      	adds	r7, #80	; 0x50
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	1fe00fff 	.word	0x1fe00fff

0800e2a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e2f8:	b590      	push	{r4, r7, lr}
 800e2fa:	b08d      	sub	sp, #52	; 0x34
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e302:	2300      	movs	r3, #0
 800e304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2203      	movs	r2, #3
 800e30c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e314:	2b03      	cmp	r3, #3
 800e316:	d02e      	beq.n	800e376 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e31e:	d106      	bne.n	800e32e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e324:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	635a      	str	r2, [r3, #52]	; 0x34
 800e32c:	e029      	b.n	800e382 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e334:	d10a      	bne.n	800e34c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fb64 	bl	800ea04 <SD_WideBus_Enable>
 800e33c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	431a      	orrs	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	635a      	str	r2, [r3, #52]	; 0x34
 800e34a:	e01a      	b.n	800e382 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10a      	bne.n	800e368 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 fba1 	bl	800ea9a <SD_WideBus_Disable>
 800e358:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e35e:	6a3b      	ldr	r3, [r7, #32]
 800e360:	431a      	orrs	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	635a      	str	r2, [r3, #52]	; 0x34
 800e366:	e00c      	b.n	800e382 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	635a      	str	r2, [r3, #52]	; 0x34
 800e374:	e005      	b.n	800e382 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e386:	2b00      	cmp	r3, #0
 800e388:	d007      	beq.n	800e39a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a5f      	ldr	r2, [pc, #380]	; (800e50c <HAL_SD_ConfigWideBusOperation+0x214>)
 800e390:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e398:	e096      	b.n	800e4c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e39a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e39e:	f04f 0100 	mov.w	r1, #0
 800e3a2:	f7fd fcf5 	bl	800bd90 <HAL_RCCEx_GetPeriphCLKFreq>
 800e3a6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 8083 	beq.w	800e4b6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	695a      	ldr	r2, [r3, #20]
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	4950      	ldr	r1, [pc, #320]	; (800e510 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e3ce:	fba1 1303 	umull	r1, r3, r1, r3
 800e3d2:	0e1b      	lsrs	r3, r3, #24
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d303      	bcc.n	800e3e0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	695b      	ldr	r3, [r3, #20]
 800e3dc:	61bb      	str	r3, [r7, #24]
 800e3de:	e05a      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e8:	d103      	bne.n	800e3f2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	61bb      	str	r3, [r7, #24]
 800e3f0:	e051      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3fa:	d126      	bne.n	800e44a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	695b      	ldr	r3, [r3, #20]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10e      	bne.n	800e422 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	4a43      	ldr	r2, [pc, #268]	; (800e514 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d906      	bls.n	800e41a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	4a40      	ldr	r2, [pc, #256]	; (800e510 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e410:	fba2 2303 	umull	r2, r3, r2, r3
 800e414:	0e5b      	lsrs	r3, r3, #25
 800e416:	61bb      	str	r3, [r7, #24]
 800e418:	e03d      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	695b      	ldr	r3, [r3, #20]
 800e41e:	61bb      	str	r3, [r7, #24]
 800e420:	e039      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	695b      	ldr	r3, [r3, #20]
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	69fa      	ldr	r2, [r7, #28]
 800e42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e42e:	4a39      	ldr	r2, [pc, #228]	; (800e514 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e430:	4293      	cmp	r3, r2
 800e432:	d906      	bls.n	800e442 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	4a36      	ldr	r2, [pc, #216]	; (800e510 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e438:	fba2 2303 	umull	r2, r3, r2, r3
 800e43c:	0e5b      	lsrs	r3, r3, #25
 800e43e:	61bb      	str	r3, [r7, #24]
 800e440:	e029      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	61bb      	str	r3, [r7, #24]
 800e448:	e025      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	695b      	ldr	r3, [r3, #20]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10e      	bne.n	800e470 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	4a30      	ldr	r2, [pc, #192]	; (800e518 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d906      	bls.n	800e468 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	4a2c      	ldr	r2, [pc, #176]	; (800e510 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e45e:	fba2 2303 	umull	r2, r3, r2, r3
 800e462:	0e1b      	lsrs	r3, r3, #24
 800e464:	61bb      	str	r3, [r7, #24]
 800e466:	e016      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	695b      	ldr	r3, [r3, #20]
 800e46c:	61bb      	str	r3, [r7, #24]
 800e46e:	e012      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	695b      	ldr	r3, [r3, #20]
 800e474:	005b      	lsls	r3, r3, #1
 800e476:	69fa      	ldr	r2, [r7, #28]
 800e478:	fbb2 f3f3 	udiv	r3, r2, r3
 800e47c:	4a26      	ldr	r2, [pc, #152]	; (800e518 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e47e:	4293      	cmp	r3, r2
 800e480:	d906      	bls.n	800e490 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	4a22      	ldr	r2, [pc, #136]	; (800e510 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e486:	fba2 2303 	umull	r2, r3, r2, r3
 800e48a:	0e1b      	lsrs	r3, r3, #24
 800e48c:	61bb      	str	r3, [r7, #24]
 800e48e:	e002      	b.n	800e496 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681c      	ldr	r4, [r3, #0]
 800e49a:	466a      	mov	r2, sp
 800e49c:	f107 0314 	add.w	r3, r7, #20
 800e4a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4a4:	e882 0003 	stmia.w	r2, {r0, r1}
 800e4a8:	f107 0308 	add.w	r3, r7, #8
 800e4ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f003 ffe0 	bl	8012474 <SDMMC_Init>
 800e4b4:	e008      	b.n	800e4c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f004 f8ad 	bl	8012630 <SDMMC_CmdBlockLength>
 800e4d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00c      	beq.n	800e4f8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a0a      	ldr	r2, [pc, #40]	; (800e50c <HAL_SD_ConfigWideBusOperation+0x214>)
 800e4e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4ea:	6a3b      	ldr	r3, [r7, #32]
 800e4ec:	431a      	orrs	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e504:	4618      	mov	r0, r3
 800e506:	372c      	adds	r7, #44	; 0x2c
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd90      	pop	{r4, r7, pc}
 800e50c:	1fe00fff 	.word	0x1fe00fff
 800e510:	55e63b89 	.word	0x55e63b89
 800e514:	02faf080 	.word	0x02faf080
 800e518:	017d7840 	.word	0x017d7840

0800e51c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e528:	f107 030c 	add.w	r3, r7, #12
 800e52c:	4619      	mov	r1, r3
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fa40 	bl	800e9b4 <SD_SendStatus>
 800e534:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d005      	beq.n	800e548 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	431a      	orrs	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	0a5b      	lsrs	r3, r3, #9
 800e54c:	f003 030f 	and.w	r3, r3, #15
 800e550:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e552:	693b      	ldr	r3, [r7, #16]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3718      	adds	r7, #24
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b090      	sub	sp, #64	; 0x40
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e564:	2300      	movs	r3, #0
 800e566:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e568:	f7f5 fb86 	bl	8003c78 <HAL_GetTick>
 800e56c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4618      	mov	r0, r3
 800e574:	f003 ffd7 	bl	8012526 <SDMMC_GetPowerState>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e57e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e582:	e0b5      	b.n	800e6f0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e588:	2b03      	cmp	r3, #3
 800e58a:	d02e      	beq.n	800e5ea <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4618      	mov	r0, r3
 800e592:	f004 fa22 	bl	80129da <SDMMC_CmdSendCID>
 800e596:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <SD_InitCard+0x46>
    {
      return errorstate;
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	e0a6      	b.n	800e6f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f004 f802 	bl	80125b2 <SDMMC_GetResponse>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2104      	movs	r1, #4
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f003 fff9 	bl	80125b2 <SDMMC_GetResponse>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2108      	movs	r1, #8
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f003 fff0 	bl	80125b2 <SDMMC_GetResponse>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	210c      	movs	r1, #12
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f003 ffe7 	bl	80125b2 <SDMMC_GetResponse>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d01d      	beq.n	800e62e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e5f2:	e019      	b.n	800e628 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f107 020a 	add.w	r2, r7, #10
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f004 fa2a 	bl	8012a58 <SDMMC_CmdSetRelAdd>
 800e604:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60e:	e06f      	b.n	800e6f0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e610:	f7f5 fb32 	bl	8003c78 <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	f241 3287 	movw	r2, #4999	; 0x1387
 800e61e:	4293      	cmp	r3, r2
 800e620:	d902      	bls.n	800e628 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e622:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e626:	e063      	b.n	800e6f0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e628:	897b      	ldrh	r3, [r7, #10]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d0e2      	beq.n	800e5f4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e632:	2b03      	cmp	r3, #3
 800e634:	d036      	beq.n	800e6a4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e636:	897b      	ldrh	r3, [r7, #10]
 800e638:	461a      	mov	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e646:	041b      	lsls	r3, r3, #16
 800e648:	4619      	mov	r1, r3
 800e64a:	4610      	mov	r0, r2
 800e64c:	f004 f9e4 	bl	8012a18 <SDMMC_CmdSendCSD>
 800e650:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <SD_InitCard+0x100>
    {
      return errorstate;
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	e049      	b.n	800e6f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2100      	movs	r1, #0
 800e662:	4618      	mov	r0, r3
 800e664:	f003 ffa5 	bl	80125b2 <SDMMC_GetResponse>
 800e668:	4602      	mov	r2, r0
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2104      	movs	r1, #4
 800e674:	4618      	mov	r0, r3
 800e676:	f003 ff9c 	bl	80125b2 <SDMMC_GetResponse>
 800e67a:	4602      	mov	r2, r0
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2108      	movs	r1, #8
 800e686:	4618      	mov	r0, r3
 800e688:	f003 ff93 	bl	80125b2 <SDMMC_GetResponse>
 800e68c:	4602      	mov	r2, r0
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	210c      	movs	r1, #12
 800e698:	4618      	mov	r0, r3
 800e69a:	f003 ff8a 	bl	80125b2 <SDMMC_GetResponse>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2104      	movs	r1, #4
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f003 ff81 	bl	80125b2 <SDMMC_GetResponse>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	0d1a      	lsrs	r2, r3, #20
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e6b8:	f107 030c 	add.w	r3, r7, #12
 800e6bc:	4619      	mov	r1, r3
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7ff fb8c 	bl	800dddc <HAL_SD_GetCardCSD>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e6ce:	e00f      	b.n	800e6f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d8:	041b      	lsls	r3, r3, #16
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4610      	mov	r0, r2
 800e6de:	f004 f893 	bl	8012808 <SDMMC_CmdSelDesel>
 800e6e2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <SD_InitCard+0x192>
  {
    return errorstate;
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ec:	e000      	b.n	800e6f0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3740      	adds	r7, #64	; 0x40
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b086      	sub	sp, #24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e700:	2300      	movs	r3, #0
 800e702:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e704:	2300      	movs	r3, #0
 800e706:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e708:	2300      	movs	r3, #0
 800e70a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4618      	mov	r0, r3
 800e712:	f004 f89c 	bl	801284e <SDMMC_CmdGoIdleState>
 800e716:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d001      	beq.n	800e722 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	e072      	b.n	800e808 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4618      	mov	r0, r3
 800e728:	f004 f8af 	bl	801288a <SDMMC_CmdOperCond>
 800e72c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e734:	d10d      	bne.n	800e752 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4618      	mov	r0, r3
 800e742:	f004 f884 	bl	801284e <SDMMC_CmdGoIdleState>
 800e746:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d004      	beq.n	800e758 <SD_PowerON+0x60>
    {
      return errorstate;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	e05a      	b.n	800e808 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2201      	movs	r2, #1
 800e756:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d137      	bne.n	800e7d0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2100      	movs	r1, #0
 800e766:	4618      	mov	r0, r3
 800e768:	f004 f8af 	bl	80128ca <SDMMC_CmdAppCommand>
 800e76c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d02d      	beq.n	800e7d0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e778:	e046      	b.n	800e808 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2100      	movs	r1, #0
 800e780:	4618      	mov	r0, r3
 800e782:	f004 f8a2 	bl	80128ca <SDMMC_CmdAppCommand>
 800e786:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d001      	beq.n	800e792 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	e03a      	b.n	800e808 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	491e      	ldr	r1, [pc, #120]	; (800e810 <SD_PowerON+0x118>)
 800e798:	4618      	mov	r0, r3
 800e79a:	f004 f8b9 	bl	8012910 <SDMMC_CmdAppOperCommand>
 800e79e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7aa:	e02d      	b.n	800e808 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f003 fefd 	bl	80125b2 <SDMMC_GetResponse>
 800e7b8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	0fdb      	lsrs	r3, r3, #31
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d101      	bne.n	800e7c6 <SD_PowerON+0xce>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e000      	b.n	800e7c8 <SD_PowerON+0xd0>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	613b      	str	r3, [r7, #16]

    count++;
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d802      	bhi.n	800e7e0 <SD_PowerON+0xe8>
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d0cc      	beq.n	800e77a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d902      	bls.n	800e7f0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e7ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e7ee:	e00b      	b.n	800e808 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	c1100000 	.word	0xc1100000

0800e814 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b08c      	sub	sp, #48	; 0x30
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e81e:	f7f5 fa2b 	bl	8003c78 <HAL_GetTick>
 800e822:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2100      	movs	r1, #0
 800e82e:	4618      	mov	r0, r3
 800e830:	f003 febf 	bl	80125b2 <SDMMC_GetResponse>
 800e834:	4603      	mov	r3, r0
 800e836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e83a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e83e:	d102      	bne.n	800e846 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e844:	e0b0      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2140      	movs	r1, #64	; 0x40
 800e84c:	4618      	mov	r0, r3
 800e84e:	f003 feef 	bl	8012630 <SDMMC_CmdBlockLength>
 800e852:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e854:	6a3b      	ldr	r3, [r7, #32]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d005      	beq.n	800e866 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	e0a0      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e86e:	041b      	lsls	r3, r3, #16
 800e870:	4619      	mov	r1, r3
 800e872:	4610      	mov	r0, r2
 800e874:	f004 f829 	bl	80128ca <SDMMC_CmdAppCommand>
 800e878:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d005      	beq.n	800e88c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e888:	6a3b      	ldr	r3, [r7, #32]
 800e88a:	e08d      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e892:	2340      	movs	r3, #64	; 0x40
 800e894:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e896:	2360      	movs	r3, #96	; 0x60
 800e898:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e89a:	2302      	movs	r3, #2
 800e89c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f107 0208 	add.w	r2, r7, #8
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f003 fe91 	bl	80125d8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f004 f911 	bl	8012ae2 <SDMMC_CmdStatusRegister>
 800e8c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d02b      	beq.n	800e920 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	e069      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d013      	beq.n	800e90a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8e6:	e00d      	b.n	800e904 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f003 fdeb 	bl	80124c8 <SDMMC_ReadFIFO>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f6:	601a      	str	r2, [r3, #0]
        pData++;
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e900:	3301      	adds	r3, #1
 800e902:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e906:	2b07      	cmp	r3, #7
 800e908:	d9ee      	bls.n	800e8e8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e90a:	f7f5 f9b5 	bl	8003c78 <HAL_GetTick>
 800e90e:	4602      	mov	r2, r0
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e918:	d102      	bne.n	800e920 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e91a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e91e:	e043      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e926:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d0d2      	beq.n	800e8d4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e934:	f003 0308 	and.w	r3, r3, #8
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e93c:	2308      	movs	r3, #8
 800e93e:	e033      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e946:	f003 0302 	and.w	r3, r3, #2
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e94e:	2302      	movs	r3, #2
 800e950:	e02a      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e958:	f003 0320 	and.w	r3, r3, #32
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d017      	beq.n	800e990 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e960:	2320      	movs	r3, #32
 800e962:	e021      	b.n	800e9a8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4618      	mov	r0, r3
 800e96a:	f003 fdad 	bl	80124c8 <SDMMC_ReadFIFO>
 800e96e:	4602      	mov	r2, r0
 800e970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e972:	601a      	str	r2, [r3, #0]
    pData++;
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	3304      	adds	r3, #4
 800e978:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e97a:	f7f5 f97d 	bl	8003c78 <HAL_GetTick>
 800e97e:	4602      	mov	r2, r0
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e988:	d102      	bne.n	800e990 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e98a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e98e:	e00b      	b.n	800e9a8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1e2      	bne.n	800e964 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a03      	ldr	r2, [pc, #12]	; (800e9b0 <SD_SendSDStatus+0x19c>)
 800e9a4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3730      	adds	r7, #48	; 0x30
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	18000f3a 	.word	0x18000f3a

0800e9b4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d102      	bne.n	800e9ca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9c8:	e018      	b.n	800e9fc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d2:	041b      	lsls	r3, r3, #16
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	f004 f860 	bl	8012a9c <SDMMC_CmdSendStatus>
 800e9dc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	e009      	b.n	800e9fc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f003 fddf 	bl	80125b2 <SDMMC_GetResponse>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e9fa:	2300      	movs	r3, #0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3710      	adds	r7, #16
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	2300      	movs	r3, #0
 800ea12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2100      	movs	r1, #0
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f003 fdc9 	bl	80125b2 <SDMMC_GetResponse>
 800ea20:	4603      	mov	r3, r0
 800ea22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea2a:	d102      	bne.n	800ea32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea30:	e02f      	b.n	800ea92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea32:	f107 030c 	add.w	r3, r7, #12
 800ea36:	4619      	mov	r1, r3
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 f879 	bl	800eb30 <SD_FindSCR>
 800ea3e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d001      	beq.n	800ea4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	e023      	b.n	800ea92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d01c      	beq.n	800ea8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea5c:	041b      	lsls	r3, r3, #16
 800ea5e:	4619      	mov	r1, r3
 800ea60:	4610      	mov	r0, r2
 800ea62:	f003 ff32 	bl	80128ca <SDMMC_CmdAppCommand>
 800ea66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d001      	beq.n	800ea72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	e00f      	b.n	800ea92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2102      	movs	r1, #2
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f003 ff69 	bl	8012950 <SDMMC_CmdBusWidth>
 800ea7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	e003      	b.n	800ea92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	e001      	b.n	800ea92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3718      	adds	r7, #24
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b086      	sub	sp, #24
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	60fb      	str	r3, [r7, #12]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2100      	movs	r1, #0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f003 fd7e 	bl	80125b2 <SDMMC_GetResponse>
 800eab6:	4603      	mov	r3, r0
 800eab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eabc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eac0:	d102      	bne.n	800eac8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eac2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eac6:	e02f      	b.n	800eb28 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eac8:	f107 030c 	add.w	r3, r7, #12
 800eacc:	4619      	mov	r1, r3
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f82e 	bl	800eb30 <SD_FindSCR>
 800ead4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	e023      	b.n	800eb28 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d01c      	beq.n	800eb24 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaf2:	041b      	lsls	r3, r3, #16
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f003 fee7 	bl	80128ca <SDMMC_CmdAppCommand>
 800eafc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	e00f      	b.n	800eb28 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f003 ff1e 	bl	8012950 <SDMMC_CmdBusWidth>
 800eb14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d001      	beq.n	800eb20 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	e003      	b.n	800eb28 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb20:	2300      	movs	r3, #0
 800eb22:	e001      	b.n	800eb28 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3718      	adds	r7, #24
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08e      	sub	sp, #56	; 0x38
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb3a:	f7f5 f89d 	bl	8003c78 <HAL_GetTick>
 800eb3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eb40:	2300      	movs	r3, #0
 800eb42:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eb44:	2300      	movs	r3, #0
 800eb46:	60bb      	str	r3, [r7, #8]
 800eb48:	2300      	movs	r3, #0
 800eb4a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2108      	movs	r1, #8
 800eb56:	4618      	mov	r0, r3
 800eb58:	f003 fd6a 	bl	8012630 <SDMMC_CmdBlockLength>
 800eb5c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	e0ad      	b.n	800ecc4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb70:	041b      	lsls	r3, r3, #16
 800eb72:	4619      	mov	r1, r3
 800eb74:	4610      	mov	r0, r2
 800eb76:	f003 fea8 	bl	80128ca <SDMMC_CmdAppCommand>
 800eb7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <SD_FindSCR+0x56>
  {
    return errorstate;
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	e09e      	b.n	800ecc4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb86:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eb8c:	2308      	movs	r3, #8
 800eb8e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800eb90:	2330      	movs	r3, #48	; 0x30
 800eb92:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb94:	2302      	movs	r3, #2
 800eb96:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f107 0210 	add.w	r2, r7, #16
 800eba8:	4611      	mov	r1, r2
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f003 fd14 	bl	80125d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f003 feee 	bl	8012996 <SDMMC_CmdSendSCR>
 800ebba:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d027      	beq.n	800ec12 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	e07e      	b.n	800ecc4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d113      	bne.n	800ebfc <SD_FindSCR+0xcc>
 800ebd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d110      	bne.n	800ebfc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f003 fc72 	bl	80124c8 <SDMMC_ReadFIFO>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f003 fc6b 	bl	80124c8 <SDMMC_ReadFIFO>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	60fb      	str	r3, [r7, #12]
      index++;
 800ebf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ebfc:	f7f5 f83c 	bl	8003c78 <HAL_GetTick>
 800ec00:	4602      	mov	r2, r0
 800ec02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0a:	d102      	bne.n	800ec12 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec10:	e058      	b.n	800ecc4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec18:	f240 532a 	movw	r3, #1322	; 0x52a
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0d1      	beq.n	800ebc6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec28:	f003 0308 	and.w	r3, r3, #8
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d005      	beq.n	800ec3c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2208      	movs	r2, #8
 800ec36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec38:	2308      	movs	r3, #8
 800ec3a:	e043      	b.n	800ecc4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec42:	f003 0302 	and.w	r3, r3, #2
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d005      	beq.n	800ec56 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2202      	movs	r2, #2
 800ec50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec52:	2302      	movs	r3, #2
 800ec54:	e036      	b.n	800ecc4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec5c:	f003 0320 	and.w	r3, r3, #32
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d005      	beq.n	800ec70 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2220      	movs	r2, #32
 800ec6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec6c:	2320      	movs	r3, #32
 800ec6e:	e029      	b.n	800ecc4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a15      	ldr	r2, [pc, #84]	; (800eccc <SD_FindSCR+0x19c>)
 800ec76:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	061a      	lsls	r2, r3, #24
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	021b      	lsls	r3, r3, #8
 800ec80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	0a1b      	lsrs	r3, r3, #8
 800ec8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	0e1b      	lsrs	r3, r3, #24
 800ec94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec98:	601a      	str	r2, [r3, #0]
    scr++;
 800ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	061a      	lsls	r2, r3, #24
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	021b      	lsls	r3, r3, #8
 800eca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	0a1b      	lsrs	r3, r3, #8
 800ecb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	0e1b      	lsrs	r3, r3, #24
 800ecbc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3738      	adds	r7, #56	; 0x38
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	18000f3a 	.word	0x18000f3a

0800ecd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecdc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece2:	2b1f      	cmp	r3, #31
 800ece4:	d936      	bls.n	800ed54 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ece6:	2300      	movs	r3, #0
 800ece8:	617b      	str	r3, [r7, #20]
 800ecea:	e027      	b.n	800ed3c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f003 fbe9 	bl	80124c8 <SDMMC_ReadFIFO>
 800ecf6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	3301      	adds	r3, #1
 800ed04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	0a1b      	lsrs	r3, r3, #8
 800ed0a:	b2da      	uxtb	r2, r3
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	3301      	adds	r3, #1
 800ed14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	0c1b      	lsrs	r3, r3, #16
 800ed1a:	b2da      	uxtb	r2, r3
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	3301      	adds	r3, #1
 800ed24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	0e1b      	lsrs	r3, r3, #24
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	3301      	adds	r3, #1
 800ed34:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	617b      	str	r3, [r7, #20]
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b07      	cmp	r3, #7
 800ed40:	d9d4      	bls.n	800ecec <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	693a      	ldr	r2, [r7, #16]
 800ed46:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed4c:	f1a3 0220 	sub.w	r2, r3, #32
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ed54:	bf00      	nop
 800ed56:	3718      	adds	r7, #24
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b086      	sub	sp, #24
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	69db      	ldr	r3, [r3, #28]
 800ed68:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a1b      	ldr	r3, [r3, #32]
 800ed6e:	2b1f      	cmp	r3, #31
 800ed70:	d93a      	bls.n	800ede8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed72:	2300      	movs	r3, #0
 800ed74:	617b      	str	r3, [r7, #20]
 800ed76:	e02b      	b.n	800edd0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	3301      	adds	r3, #1
 800ed82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	021a      	lsls	r2, r3, #8
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	3301      	adds	r3, #1
 800ed94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	041a      	lsls	r2, r3, #16
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	3301      	adds	r3, #1
 800eda6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	061a      	lsls	r2, r3, #24
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	3301      	adds	r3, #1
 800edb8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f107 020c 	add.w	r2, r7, #12
 800edc2:	4611      	mov	r1, r2
 800edc4:	4618      	mov	r0, r3
 800edc6:	f003 fb8c 	bl	80124e2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	3301      	adds	r3, #1
 800edce:	617b      	str	r3, [r7, #20]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2b07      	cmp	r3, #7
 800edd4:	d9d0      	bls.n	800ed78 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6a1b      	ldr	r3, [r3, #32]
 800ede0:	f1a3 0220 	sub.w	r2, r3, #32
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	621a      	str	r2, [r3, #32]
  }
}
 800ede8:	bf00      	nop
 800edea:	3718      	adds	r7, #24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800edf8:	bf00      	nop
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee0c:	bf00      	nop
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ee20:	bf00      	nop
 800ee22:	370c      	adds	r7, #12
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee34:	bf00      	nop
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d101      	bne.n	800ee52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e10f      	b.n	800f072 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a87      	ldr	r2, [pc, #540]	; (800f07c <HAL_SPI_Init+0x23c>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d00f      	beq.n	800ee82 <HAL_SPI_Init+0x42>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a86      	ldr	r2, [pc, #536]	; (800f080 <HAL_SPI_Init+0x240>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d00a      	beq.n	800ee82 <HAL_SPI_Init+0x42>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a84      	ldr	r2, [pc, #528]	; (800f084 <HAL_SPI_Init+0x244>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d005      	beq.n	800ee82 <HAL_SPI_Init+0x42>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	2b0f      	cmp	r3, #15
 800ee7c:	d901      	bls.n	800ee82 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e0f7      	b.n	800f072 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 fd5a 	bl	800f93c <SPI_GetPacketSize>
 800ee88:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a7b      	ldr	r2, [pc, #492]	; (800f07c <HAL_SPI_Init+0x23c>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d00c      	beq.n	800eeae <HAL_SPI_Init+0x6e>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a79      	ldr	r2, [pc, #484]	; (800f080 <HAL_SPI_Init+0x240>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d007      	beq.n	800eeae <HAL_SPI_Init+0x6e>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a78      	ldr	r2, [pc, #480]	; (800f084 <HAL_SPI_Init+0x244>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d002      	beq.n	800eeae <HAL_SPI_Init+0x6e>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b08      	cmp	r3, #8
 800eeac:	d811      	bhi.n	800eed2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eeb2:	4a72      	ldr	r2, [pc, #456]	; (800f07c <HAL_SPI_Init+0x23c>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d009      	beq.n	800eecc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a70      	ldr	r2, [pc, #448]	; (800f080 <HAL_SPI_Init+0x240>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d004      	beq.n	800eecc <HAL_SPI_Init+0x8c>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a6f      	ldr	r2, [pc, #444]	; (800f084 <HAL_SPI_Init+0x244>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d104      	bne.n	800eed6 <HAL_SPI_Init+0x96>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b10      	cmp	r3, #16
 800eed0:	d901      	bls.n	800eed6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	e0cd      	b.n	800f072 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d106      	bne.n	800eef0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7f4 f8dc 	bl	80030a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2202      	movs	r2, #2
 800eef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f022 0201 	bic.w	r2, r2, #1
 800ef06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ef12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef1c:	d119      	bne.n	800ef52 <HAL_SPI_Init+0x112>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef26:	d103      	bne.n	800ef30 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d008      	beq.n	800ef42 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10c      	bne.n	800ef52 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef40:	d107      	bne.n	800ef52 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00f      	beq.n	800ef7e <HAL_SPI_Init+0x13e>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	2b06      	cmp	r3, #6
 800ef64:	d90b      	bls.n	800ef7e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	430a      	orrs	r2, r1
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	e007      	b.n	800ef8e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ef8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	69da      	ldr	r2, [r3, #28]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef96:	431a      	orrs	r2, r3
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	431a      	orrs	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa0:	ea42 0103 	orr.w	r1, r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	68da      	ldr	r2, [r3, #12]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	430a      	orrs	r2, r1
 800efae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb8:	431a      	orrs	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efbe:	431a      	orrs	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	431a      	orrs	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	691b      	ldr	r3, [r3, #16]
 800efca:	431a      	orrs	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	695b      	ldr	r3, [r3, #20]
 800efd0:	431a      	orrs	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a1b      	ldr	r3, [r3, #32]
 800efd6:	431a      	orrs	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	431a      	orrs	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efe2:	431a      	orrs	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	431a      	orrs	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efee:	ea42 0103 	orr.w	r1, r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	430a      	orrs	r2, r1
 800effc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d113      	bne.n	800f02e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f018:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f02c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f022 0201 	bic.w	r2, r2, #1
 800f03c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00a      	beq.n	800f060 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	430a      	orrs	r2, r1
 800f05e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	40013000 	.word	0x40013000
 800f080:	40003800 	.word	0x40003800
 800f084:	40003c00 	.word	0x40003c00

0800f088 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08a      	sub	sp, #40	; 0x28
 800f08c:	af02      	add	r7, sp, #8
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	603b      	str	r3, [r7, #0]
 800f094:	4613      	mov	r3, r2
 800f096:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3320      	adds	r3, #32
 800f09e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d101      	bne.n	800f0b2 <HAL_SPI_Transmit+0x2a>
 800f0ae:	2302      	movs	r3, #2
 800f0b0:	e1e1      	b.n	800f476 <HAL_SPI_Transmit+0x3ee>
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0ba:	f7f4 fddd 	bl	8003c78 <HAL_GetTick>
 800f0be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d007      	beq.n	800f0dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f0cc:	2302      	movs	r3, #2
 800f0ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0d8:	7efb      	ldrb	r3, [r7, #27]
 800f0da:	e1cc      	b.n	800f476 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d002      	beq.n	800f0e8 <HAL_SPI_Transmit+0x60>
 800f0e2:	88fb      	ldrh	r3, [r7, #6]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d107      	bne.n	800f0f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0f4:	7efb      	ldrb	r3, [r7, #27]
 800f0f6:	e1be      	b.n	800f476 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2203      	movs	r2, #3
 800f0fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2200      	movs	r2, #0
 800f104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	88fa      	ldrh	r2, [r7, #6]
 800f112:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	88fa      	ldrh	r2, [r7, #6]
 800f11a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f148:	d108      	bne.n	800f15c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	e009      	b.n	800f170 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f16e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	685a      	ldr	r2, [r3, #4]
 800f176:	4b96      	ldr	r3, [pc, #600]	; (800f3d0 <HAL_SPI_Transmit+0x348>)
 800f178:	4013      	ands	r3, r2
 800f17a:	88f9      	ldrh	r1, [r7, #6]
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	6812      	ldr	r2, [r2, #0]
 800f180:	430b      	orrs	r3, r1
 800f182:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f042 0201 	orr.w	r2, r2, #1
 800f192:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f19c:	d107      	bne.n	800f1ae <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f1ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	2b0f      	cmp	r3, #15
 800f1b4:	d947      	bls.n	800f246 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f1b6:	e03f      	b.n	800f238 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	695b      	ldr	r3, [r3, #20]
 800f1be:	f003 0302 	and.w	r3, r3, #2
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d114      	bne.n	800f1f0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	6812      	ldr	r2, [r2, #0]
 800f1d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1d6:	1d1a      	adds	r2, r3, #4
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f1ee:	e023      	b.n	800f238 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1f0:	f7f4 fd42 	bl	8003c78 <HAL_GetTick>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d803      	bhi.n	800f208 <HAL_SPI_Transmit+0x180>
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f206:	d102      	bne.n	800f20e <HAL_SPI_Transmit+0x186>
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d114      	bne.n	800f238 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f000 fac6 	bl	800f7a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f222:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f234:	2303      	movs	r3, #3
 800f236:	e11e      	b.n	800f476 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f23e:	b29b      	uxth	r3, r3
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1b9      	bne.n	800f1b8 <HAL_SPI_Transmit+0x130>
 800f244:	e0f1      	b.n	800f42a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b07      	cmp	r3, #7
 800f24c:	f240 80e6 	bls.w	800f41c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f250:	e05d      	b.n	800f30e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	695b      	ldr	r3, [r3, #20]
 800f258:	f003 0302 	and.w	r3, r3, #2
 800f25c:	2b02      	cmp	r3, #2
 800f25e:	d132      	bne.n	800f2c6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f266:	b29b      	uxth	r3, r3
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d918      	bls.n	800f29e <HAL_SPI_Transmit+0x216>
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f270:	2b00      	cmp	r3, #0
 800f272:	d014      	beq.n	800f29e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6812      	ldr	r2, [r2, #0]
 800f27e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f284:	1d1a      	adds	r2, r3, #4
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f290:	b29b      	uxth	r3, r3
 800f292:	3b02      	subs	r3, #2
 800f294:	b29a      	uxth	r2, r3
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f29c:	e037      	b.n	800f30e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2a2:	881a      	ldrh	r2, [r3, #0]
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2ac:	1c9a      	adds	r2, r3, #2
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f2c4:	e023      	b.n	800f30e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2c6:	f7f4 fcd7 	bl	8003c78 <HAL_GetTick>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	683a      	ldr	r2, [r7, #0]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d803      	bhi.n	800f2de <HAL_SPI_Transmit+0x256>
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2dc:	d102      	bne.n	800f2e4 <HAL_SPI_Transmit+0x25c>
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d114      	bne.n	800f30e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f000 fa5b 	bl	800f7a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2201      	movs	r2, #1
 800f306:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f30a:	2303      	movs	r3, #3
 800f30c:	e0b3      	b.n	800f476 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f314:	b29b      	uxth	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d19b      	bne.n	800f252 <HAL_SPI_Transmit+0x1ca>
 800f31a:	e086      	b.n	800f42a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	695b      	ldr	r3, [r3, #20]
 800f322:	f003 0302 	and.w	r3, r3, #2
 800f326:	2b02      	cmp	r3, #2
 800f328:	d154      	bne.n	800f3d4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f330:	b29b      	uxth	r3, r3
 800f332:	2b03      	cmp	r3, #3
 800f334:	d918      	bls.n	800f368 <HAL_SPI_Transmit+0x2e0>
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f33a:	2b40      	cmp	r3, #64	; 0x40
 800f33c:	d914      	bls.n	800f368 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	6812      	ldr	r2, [r2, #0]
 800f348:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f34e:	1d1a      	adds	r2, r3, #4
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	3b04      	subs	r3, #4
 800f35e:	b29a      	uxth	r2, r3
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f366:	e059      	b.n	800f41c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f36e:	b29b      	uxth	r3, r3
 800f370:	2b01      	cmp	r3, #1
 800f372:	d917      	bls.n	800f3a4 <HAL_SPI_Transmit+0x31c>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d013      	beq.n	800f3a4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f380:	881a      	ldrh	r2, [r3, #0]
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f38a:	1c9a      	adds	r2, r3, #2
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f396:	b29b      	uxth	r3, r3
 800f398:	3b02      	subs	r3, #2
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f3a2:	e03b      	b.n	800f41c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	3320      	adds	r3, #32
 800f3ae:	7812      	ldrb	r2, [r2, #0]
 800f3b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3b6:	1c5a      	adds	r2, r3, #1
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	b29a      	uxth	r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f3ce:	e025      	b.n	800f41c <HAL_SPI_Transmit+0x394>
 800f3d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3d4:	f7f4 fc50 	bl	8003c78 <HAL_GetTick>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d803      	bhi.n	800f3ec <HAL_SPI_Transmit+0x364>
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ea:	d102      	bne.n	800f3f2 <HAL_SPI_Transmit+0x36a>
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d114      	bne.n	800f41c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f000 f9d4 	bl	800f7a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f406:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2201      	movs	r2, #1
 800f414:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f418:	2303      	movs	r3, #3
 800f41a:	e02c      	b.n	800f476 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f422:	b29b      	uxth	r3, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	f47f af79 	bne.w	800f31c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	9300      	str	r3, [sp, #0]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	2200      	movs	r2, #0
 800f432:	2108      	movs	r1, #8
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f000 fa53 	bl	800f8e0 <SPI_WaitOnFlagUntilTimeout>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d007      	beq.n	800f450 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f446:	f043 0220 	orr.w	r2, r3, #32
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f000 f9a5 	bl	800f7a0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2201      	movs	r2, #1
 800f462:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d001      	beq.n	800f474 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f470:	2301      	movs	r3, #1
 800f472:	e000      	b.n	800f476 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f474:	7efb      	ldrb	r3, [r7, #27]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3720      	adds	r7, #32
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop

0800f480 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b088      	sub	sp, #32
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	4613      	mov	r3, r2
 800f48e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	3330      	adds	r3, #48	; 0x30
 800f49a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d101      	bne.n	800f4aa <HAL_SPI_Receive+0x2a>
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	e173      	b.n	800f792 <HAL_SPI_Receive+0x312>
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f4b2:	f7f4 fbe1 	bl	8003c78 <HAL_GetTick>
 800f4b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d007      	beq.n	800f4d4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f4c4:	2302      	movs	r3, #2
 800f4c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4d0:	7ffb      	ldrb	r3, [r7, #31]
 800f4d2:	e15e      	b.n	800f792 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <HAL_SPI_Receive+0x60>
 800f4da:	88fb      	ldrh	r3, [r7, #6]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d107      	bne.n	800f4f0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4ec:	7ffb      	ldrb	r3, [r7, #31]
 800f4ee:	e150      	b.n	800f792 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2204      	movs	r2, #4
 800f4f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	88fa      	ldrh	r2, [r7, #6]
 800f50a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	88fa      	ldrh	r2, [r7, #6]
 800f512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2200      	movs	r2, #0
 800f51a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2200      	movs	r2, #0
 800f528:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2200      	movs	r2, #0
 800f530:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f540:	d108      	bne.n	800f554 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	e009      	b.n	800f568 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f566:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	685a      	ldr	r2, [r3, #4]
 800f56e:	4b8b      	ldr	r3, [pc, #556]	; (800f79c <HAL_SPI_Receive+0x31c>)
 800f570:	4013      	ands	r3, r2
 800f572:	88f9      	ldrh	r1, [r7, #6]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	6812      	ldr	r2, [r2, #0]
 800f578:	430b      	orrs	r3, r1
 800f57a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f042 0201 	orr.w	r2, r2, #1
 800f58a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f594:	d107      	bne.n	800f5a6 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	2b0f      	cmp	r3, #15
 800f5ac:	d948      	bls.n	800f640 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f5ae:	e040      	b.n	800f632 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	695a      	ldr	r2, [r3, #20]
 800f5b6:	f248 0308 	movw	r3, #32776	; 0x8008
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d014      	beq.n	800f5ea <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f5ca:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5d0:	1d1a      	adds	r2, r3, #4
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	3b01      	subs	r3, #1
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5e8:	e023      	b.n	800f632 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5ea:	f7f4 fb45 	bl	8003c78 <HAL_GetTick>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d803      	bhi.n	800f602 <HAL_SPI_Receive+0x182>
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f600:	d102      	bne.n	800f608 <HAL_SPI_Receive+0x188>
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d114      	bne.n	800f632 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f000 f8c9 	bl	800f7a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2200      	movs	r2, #0
 800f612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f61c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2201      	movs	r2, #1
 800f62a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f62e:	2303      	movs	r3, #3
 800f630:	e0af      	b.n	800f792 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f638:	b29b      	uxth	r3, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d1b8      	bne.n	800f5b0 <HAL_SPI_Receive+0x130>
 800f63e:	e095      	b.n	800f76c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	2b07      	cmp	r3, #7
 800f646:	f240 808b 	bls.w	800f760 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f64a:	e03f      	b.n	800f6cc <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	695b      	ldr	r3, [r3, #20]
 800f652:	f003 0301 	and.w	r3, r3, #1
 800f656:	2b01      	cmp	r3, #1
 800f658:	d114      	bne.n	800f684 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f65e:	69ba      	ldr	r2, [r7, #24]
 800f660:	8812      	ldrh	r2, [r2, #0]
 800f662:	b292      	uxth	r2, r2
 800f664:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f66a:	1c9a      	adds	r2, r3, #2
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f676:	b29b      	uxth	r3, r3
 800f678:	3b01      	subs	r3, #1
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f682:	e023      	b.n	800f6cc <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f684:	f7f4 faf8 	bl	8003c78 <HAL_GetTick>
 800f688:	4602      	mov	r2, r0
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	429a      	cmp	r2, r3
 800f692:	d803      	bhi.n	800f69c <HAL_SPI_Receive+0x21c>
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69a:	d102      	bne.n	800f6a2 <HAL_SPI_Receive+0x222>
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d114      	bne.n	800f6cc <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6a2:	68f8      	ldr	r0, [r7, #12]
 800f6a4:	f000 f87c 	bl	800f7a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	e062      	b.n	800f792 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1b9      	bne.n	800f64c <HAL_SPI_Receive+0x1cc>
 800f6d8:	e048      	b.n	800f76c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	695b      	ldr	r3, [r3, #20]
 800f6e0:	f003 0301 	and.w	r3, r3, #1
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d117      	bne.n	800f718 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6f4:	7812      	ldrb	r2, [r2, #0]
 800f6f6:	b2d2      	uxtb	r2, r2
 800f6f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6fe:	1c5a      	adds	r2, r3, #1
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	3b01      	subs	r3, #1
 800f70e:	b29a      	uxth	r2, r3
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f716:	e023      	b.n	800f760 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f718:	f7f4 faae 	bl	8003c78 <HAL_GetTick>
 800f71c:	4602      	mov	r2, r0
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	429a      	cmp	r2, r3
 800f726:	d803      	bhi.n	800f730 <HAL_SPI_Receive+0x2b0>
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f72e:	d102      	bne.n	800f736 <HAL_SPI_Receive+0x2b6>
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d114      	bne.n	800f760 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f000 f832 	bl	800f7a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f74a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2201      	movs	r2, #1
 800f758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f75c:	2303      	movs	r3, #3
 800f75e:	e018      	b.n	800f792 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f766:	b29b      	uxth	r3, r3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1b6      	bne.n	800f6da <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f000 f817 	bl	800f7a0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2201      	movs	r2, #1
 800f77e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e000      	b.n	800f792 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f790:	7ffb      	ldrb	r3, [r7, #31]
}
 800f792:	4618      	mov	r0, r3
 800f794:	3720      	adds	r7, #32
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	ffff0000 	.word	0xffff0000

0800f7a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	695b      	ldr	r3, [r3, #20]
 800f7ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	699a      	ldr	r2, [r3, #24]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f042 0208 	orr.w	r2, r2, #8
 800f7be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	699a      	ldr	r2, [r3, #24]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f042 0210 	orr.w	r2, r2, #16
 800f7ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f022 0201 	bic.w	r2, r2, #1
 800f7de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	6919      	ldr	r1, [r3, #16]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	4b3c      	ldr	r3, [pc, #240]	; (800f8dc <SPI_CloseTransfer+0x13c>)
 800f7ec:	400b      	ands	r3, r1
 800f7ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	689a      	ldr	r2, [r3, #8]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f7fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f806:	b2db      	uxtb	r3, r3
 800f808:	2b04      	cmp	r3, #4
 800f80a:	d014      	beq.n	800f836 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f003 0320 	and.w	r3, r3, #32
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00f      	beq.n	800f836 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f81c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	699a      	ldr	r2, [r3, #24]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f042 0220 	orr.w	r2, r2, #32
 800f834:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b03      	cmp	r3, #3
 800f840:	d014      	beq.n	800f86c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00f      	beq.n	800f86c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f852:	f043 0204 	orr.w	r2, r3, #4
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	699a      	ldr	r2, [r3, #24]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f86a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00f      	beq.n	800f896 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f87c:	f043 0201 	orr.w	r2, r3, #1
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	699a      	ldr	r2, [r3, #24]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f894:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00f      	beq.n	800f8c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8a6:	f043 0208 	orr.w	r2, r3, #8
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	699a      	ldr	r2, [r3, #24]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f8d0:	bf00      	nop
 800f8d2:	3714      	adds	r7, #20
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr
 800f8dc:	fffffc90 	.word	0xfffffc90

0800f8e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	603b      	str	r3, [r7, #0]
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f8f0:	e010      	b.n	800f914 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8f2:	f7f4 f9c1 	bl	8003c78 <HAL_GetTick>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	1ad3      	subs	r3, r2, r3
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d803      	bhi.n	800f90a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f908:	d102      	bne.n	800f910 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d101      	bne.n	800f914 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f910:	2303      	movs	r3, #3
 800f912:	e00f      	b.n	800f934 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	695a      	ldr	r2, [r3, #20]
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	4013      	ands	r3, r2
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	429a      	cmp	r2, r3
 800f922:	bf0c      	ite	eq
 800f924:	2301      	moveq	r3, #1
 800f926:	2300      	movne	r3, #0
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	461a      	mov	r2, r3
 800f92c:	79fb      	ldrb	r3, [r7, #7]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d0df      	beq.n	800f8f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b085      	sub	sp, #20
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f948:	095b      	lsrs	r3, r3, #5
 800f94a:	3301      	adds	r3, #1
 800f94c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	3301      	adds	r3, #1
 800f954:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	3307      	adds	r3, #7
 800f95a:	08db      	lsrs	r3, r3, #3
 800f95c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	fb02 f303 	mul.w	r3, r2, r3
}
 800f966:	4618      	mov	r0, r3
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b082      	sub	sp, #8
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d101      	bne.n	800f984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f980:	2301      	movs	r3, #1
 800f982:	e049      	b.n	800fa18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d106      	bne.n	800f99e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f7f3 fdd7 	bl	800354c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2202      	movs	r2, #2
 800f9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	3304      	adds	r3, #4
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	4610      	mov	r0, r2
 800f9b2:	f000 ff29 	bl	8010808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2201      	movs	r2, #1
 800fa02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2201      	movs	r2, #1
 800fa12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	e049      	b.n	800fac6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d106      	bne.n	800fa4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f7f3 fbea 	bl	8003220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2202      	movs	r2, #2
 800fa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3304      	adds	r3, #4
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	4610      	mov	r0, r2
 800fa60:	f000 fed2 	bl	8010808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2201      	movs	r2, #1
 800fa68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2201      	movs	r2, #1
 800fa78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2201      	movs	r2, #1
 800fa98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2201      	movs	r2, #1
 800faa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
	...

0800fad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d109      	bne.n	800faf4 <HAL_TIM_PWM_Start+0x24>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	2b01      	cmp	r3, #1
 800faea:	bf14      	ite	ne
 800faec:	2301      	movne	r3, #1
 800faee:	2300      	moveq	r3, #0
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	e03c      	b.n	800fb6e <HAL_TIM_PWM_Start+0x9e>
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	2b04      	cmp	r3, #4
 800faf8:	d109      	bne.n	800fb0e <HAL_TIM_PWM_Start+0x3e>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	bf14      	ite	ne
 800fb06:	2301      	movne	r3, #1
 800fb08:	2300      	moveq	r3, #0
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	e02f      	b.n	800fb6e <HAL_TIM_PWM_Start+0x9e>
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	2b08      	cmp	r3, #8
 800fb12:	d109      	bne.n	800fb28 <HAL_TIM_PWM_Start+0x58>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	bf14      	ite	ne
 800fb20:	2301      	movne	r3, #1
 800fb22:	2300      	moveq	r3, #0
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	e022      	b.n	800fb6e <HAL_TIM_PWM_Start+0x9e>
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	2b0c      	cmp	r3, #12
 800fb2c:	d109      	bne.n	800fb42 <HAL_TIM_PWM_Start+0x72>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	bf14      	ite	ne
 800fb3a:	2301      	movne	r3, #1
 800fb3c:	2300      	moveq	r3, #0
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	e015      	b.n	800fb6e <HAL_TIM_PWM_Start+0x9e>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	2b10      	cmp	r3, #16
 800fb46:	d109      	bne.n	800fb5c <HAL_TIM_PWM_Start+0x8c>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	bf14      	ite	ne
 800fb54:	2301      	movne	r3, #1
 800fb56:	2300      	moveq	r3, #0
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	e008      	b.n	800fb6e <HAL_TIM_PWM_Start+0x9e>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	bf14      	ite	ne
 800fb68:	2301      	movne	r3, #1
 800fb6a:	2300      	moveq	r3, #0
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fb72:	2301      	movs	r3, #1
 800fb74:	e0ab      	b.n	800fcce <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d104      	bne.n	800fb86 <HAL_TIM_PWM_Start+0xb6>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2202      	movs	r2, #2
 800fb80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb84:	e023      	b.n	800fbce <HAL_TIM_PWM_Start+0xfe>
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	2b04      	cmp	r3, #4
 800fb8a:	d104      	bne.n	800fb96 <HAL_TIM_PWM_Start+0xc6>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2202      	movs	r2, #2
 800fb90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb94:	e01b      	b.n	800fbce <HAL_TIM_PWM_Start+0xfe>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b08      	cmp	r3, #8
 800fb9a:	d104      	bne.n	800fba6 <HAL_TIM_PWM_Start+0xd6>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2202      	movs	r2, #2
 800fba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fba4:	e013      	b.n	800fbce <HAL_TIM_PWM_Start+0xfe>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	2b0c      	cmp	r3, #12
 800fbaa:	d104      	bne.n	800fbb6 <HAL_TIM_PWM_Start+0xe6>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2202      	movs	r2, #2
 800fbb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbb4:	e00b      	b.n	800fbce <HAL_TIM_PWM_Start+0xfe>
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	2b10      	cmp	r3, #16
 800fbba:	d104      	bne.n	800fbc6 <HAL_TIM_PWM_Start+0xf6>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbc4:	e003      	b.n	800fbce <HAL_TIM_PWM_Start+0xfe>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2202      	movs	r2, #2
 800fbca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	6839      	ldr	r1, [r7, #0]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f001 f992 	bl	8010f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a3d      	ldr	r2, [pc, #244]	; (800fcd8 <HAL_TIM_PWM_Start+0x208>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d013      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x13e>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a3c      	ldr	r2, [pc, #240]	; (800fcdc <HAL_TIM_PWM_Start+0x20c>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d00e      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x13e>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a3a      	ldr	r2, [pc, #232]	; (800fce0 <HAL_TIM_PWM_Start+0x210>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d009      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x13e>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a39      	ldr	r2, [pc, #228]	; (800fce4 <HAL_TIM_PWM_Start+0x214>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d004      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x13e>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a37      	ldr	r2, [pc, #220]	; (800fce8 <HAL_TIM_PWM_Start+0x218>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d101      	bne.n	800fc12 <HAL_TIM_PWM_Start+0x142>
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e000      	b.n	800fc14 <HAL_TIM_PWM_Start+0x144>
 800fc12:	2300      	movs	r3, #0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d007      	beq.n	800fc28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fc26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a2a      	ldr	r2, [pc, #168]	; (800fcd8 <HAL_TIM_PWM_Start+0x208>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d02c      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc3a:	d027      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a2a      	ldr	r2, [pc, #168]	; (800fcec <HAL_TIM_PWM_Start+0x21c>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d022      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4a29      	ldr	r2, [pc, #164]	; (800fcf0 <HAL_TIM_PWM_Start+0x220>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d01d      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4a27      	ldr	r2, [pc, #156]	; (800fcf4 <HAL_TIM_PWM_Start+0x224>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d018      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4a1f      	ldr	r2, [pc, #124]	; (800fcdc <HAL_TIM_PWM_Start+0x20c>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d013      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a23      	ldr	r2, [pc, #140]	; (800fcf8 <HAL_TIM_PWM_Start+0x228>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d00e      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4a1b      	ldr	r2, [pc, #108]	; (800fce0 <HAL_TIM_PWM_Start+0x210>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d009      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a1f      	ldr	r2, [pc, #124]	; (800fcfc <HAL_TIM_PWM_Start+0x22c>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d004      	beq.n	800fc8c <HAL_TIM_PWM_Start+0x1bc>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4a1e      	ldr	r2, [pc, #120]	; (800fd00 <HAL_TIM_PWM_Start+0x230>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d115      	bne.n	800fcb8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	689a      	ldr	r2, [r3, #8]
 800fc92:	4b1c      	ldr	r3, [pc, #112]	; (800fd04 <HAL_TIM_PWM_Start+0x234>)
 800fc94:	4013      	ands	r3, r2
 800fc96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b06      	cmp	r3, #6
 800fc9c:	d015      	beq.n	800fcca <HAL_TIM_PWM_Start+0x1fa>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fca4:	d011      	beq.n	800fcca <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f042 0201 	orr.w	r2, r2, #1
 800fcb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcb6:	e008      	b.n	800fcca <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f042 0201 	orr.w	r2, r2, #1
 800fcc6:	601a      	str	r2, [r3, #0]
 800fcc8:	e000      	b.n	800fccc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	40010000 	.word	0x40010000
 800fcdc:	40010400 	.word	0x40010400
 800fce0:	40014000 	.word	0x40014000
 800fce4:	40014400 	.word	0x40014400
 800fce8:	40014800 	.word	0x40014800
 800fcec:	40000400 	.word	0x40000400
 800fcf0:	40000800 	.word	0x40000800
 800fcf4:	40000c00 	.word	0x40000c00
 800fcf8:	40001800 	.word	0x40001800
 800fcfc:	4000e000 	.word	0x4000e000
 800fd00:	4000e400 	.word	0x4000e400
 800fd04:	00010007 	.word	0x00010007

0800fd08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b086      	sub	sp, #24
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]
 800fd14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d109      	bne.n	800fd34 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b02      	cmp	r3, #2
 800fd2a:	bf0c      	ite	eq
 800fd2c:	2301      	moveq	r3, #1
 800fd2e:	2300      	movne	r3, #0
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	e03c      	b.n	800fdae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	2b04      	cmp	r3, #4
 800fd38:	d109      	bne.n	800fd4e <HAL_TIM_PWM_Start_DMA+0x46>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	bf0c      	ite	eq
 800fd46:	2301      	moveq	r3, #1
 800fd48:	2300      	movne	r3, #0
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	e02f      	b.n	800fdae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2b08      	cmp	r3, #8
 800fd52:	d109      	bne.n	800fd68 <HAL_TIM_PWM_Start_DMA+0x60>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	bf0c      	ite	eq
 800fd60:	2301      	moveq	r3, #1
 800fd62:	2300      	movne	r3, #0
 800fd64:	b2db      	uxtb	r3, r3
 800fd66:	e022      	b.n	800fdae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	2b0c      	cmp	r3, #12
 800fd6c:	d109      	bne.n	800fd82 <HAL_TIM_PWM_Start_DMA+0x7a>
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	bf0c      	ite	eq
 800fd7a:	2301      	moveq	r3, #1
 800fd7c:	2300      	movne	r3, #0
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	e015      	b.n	800fdae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b10      	cmp	r3, #16
 800fd86:	d109      	bne.n	800fd9c <HAL_TIM_PWM_Start_DMA+0x94>
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	2b02      	cmp	r3, #2
 800fd92:	bf0c      	ite	eq
 800fd94:	2301      	moveq	r3, #1
 800fd96:	2300      	movne	r3, #0
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	e008      	b.n	800fdae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	2b02      	cmp	r3, #2
 800fda6:	bf0c      	ite	eq
 800fda8:	2301      	moveq	r3, #1
 800fdaa:	2300      	movne	r3, #0
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	e1ba      	b.n	801012c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d109      	bne.n	800fdd0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	bf0c      	ite	eq
 800fdc8:	2301      	moveq	r3, #1
 800fdca:	2300      	movne	r3, #0
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	e03c      	b.n	800fe4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	2b04      	cmp	r3, #4
 800fdd4:	d109      	bne.n	800fdea <HAL_TIM_PWM_Start_DMA+0xe2>
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	bf0c      	ite	eq
 800fde2:	2301      	moveq	r3, #1
 800fde4:	2300      	movne	r3, #0
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	e02f      	b.n	800fe4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	2b08      	cmp	r3, #8
 800fdee:	d109      	bne.n	800fe04 <HAL_TIM_PWM_Start_DMA+0xfc>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	bf0c      	ite	eq
 800fdfc:	2301      	moveq	r3, #1
 800fdfe:	2300      	movne	r3, #0
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	e022      	b.n	800fe4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	2b0c      	cmp	r3, #12
 800fe08:	d109      	bne.n	800fe1e <HAL_TIM_PWM_Start_DMA+0x116>
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	bf0c      	ite	eq
 800fe16:	2301      	moveq	r3, #1
 800fe18:	2300      	movne	r3, #0
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	e015      	b.n	800fe4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b10      	cmp	r3, #16
 800fe22:	d109      	bne.n	800fe38 <HAL_TIM_PWM_Start_DMA+0x130>
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	bf0c      	ite	eq
 800fe30:	2301      	moveq	r3, #1
 800fe32:	2300      	movne	r3, #0
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	e008      	b.n	800fe4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	bf0c      	ite	eq
 800fe44:	2301      	moveq	r3, #1
 800fe46:	2300      	movne	r3, #0
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d034      	beq.n	800feb8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <HAL_TIM_PWM_Start_DMA+0x152>
 800fe54:	887b      	ldrh	r3, [r7, #2]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d101      	bne.n	800fe5e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e166      	b.n	801012c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d104      	bne.n	800fe6e <HAL_TIM_PWM_Start_DMA+0x166>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2202      	movs	r2, #2
 800fe68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fe6c:	e026      	b.n	800febc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	2b04      	cmp	r3, #4
 800fe72:	d104      	bne.n	800fe7e <HAL_TIM_PWM_Start_DMA+0x176>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2202      	movs	r2, #2
 800fe78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fe7c:	e01e      	b.n	800febc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	2b08      	cmp	r3, #8
 800fe82:	d104      	bne.n	800fe8e <HAL_TIM_PWM_Start_DMA+0x186>
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2202      	movs	r2, #2
 800fe88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fe8c:	e016      	b.n	800febc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	2b0c      	cmp	r3, #12
 800fe92:	d104      	bne.n	800fe9e <HAL_TIM_PWM_Start_DMA+0x196>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2202      	movs	r2, #2
 800fe98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fe9c:	e00e      	b.n	800febc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	2b10      	cmp	r3, #16
 800fea2:	d104      	bne.n	800feae <HAL_TIM_PWM_Start_DMA+0x1a6>
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2202      	movs	r2, #2
 800fea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800feac:	e006      	b.n	800febc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2202      	movs	r2, #2
 800feb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800feb6:	e001      	b.n	800febc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800feb8:	2301      	movs	r3, #1
 800feba:	e137      	b.n	801012c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	2b0c      	cmp	r3, #12
 800fec0:	f200 80ae 	bhi.w	8010020 <HAL_TIM_PWM_Start_DMA+0x318>
 800fec4:	a201      	add	r2, pc, #4	; (adr r2, 800fecc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800fec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feca:	bf00      	nop
 800fecc:	0800ff01 	.word	0x0800ff01
 800fed0:	08010021 	.word	0x08010021
 800fed4:	08010021 	.word	0x08010021
 800fed8:	08010021 	.word	0x08010021
 800fedc:	0800ff49 	.word	0x0800ff49
 800fee0:	08010021 	.word	0x08010021
 800fee4:	08010021 	.word	0x08010021
 800fee8:	08010021 	.word	0x08010021
 800feec:	0800ff91 	.word	0x0800ff91
 800fef0:	08010021 	.word	0x08010021
 800fef4:	08010021 	.word	0x08010021
 800fef8:	08010021 	.word	0x08010021
 800fefc:	0800ffd9 	.word	0x0800ffd9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff04:	4a8b      	ldr	r2, [pc, #556]	; (8010134 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ff06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0c:	4a8a      	ldr	r2, [pc, #552]	; (8010138 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ff0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff14:	4a89      	ldr	r2, [pc, #548]	; (801013c <HAL_TIM_PWM_Start_DMA+0x434>)
 800ff16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ff1c:	6879      	ldr	r1, [r7, #4]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3334      	adds	r3, #52	; 0x34
 800ff24:	461a      	mov	r2, r3
 800ff26:	887b      	ldrh	r3, [r7, #2]
 800ff28:	f7f5 fec4 	bl	8005cb4 <HAL_DMA_Start_IT>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ff32:	2301      	movs	r3, #1
 800ff34:	e0fa      	b.n	801012c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	68da      	ldr	r2, [r3, #12]
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ff44:	60da      	str	r2, [r3, #12]
      break;
 800ff46:	e06e      	b.n	8010026 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4c:	4a79      	ldr	r2, [pc, #484]	; (8010134 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ff4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff54:	4a78      	ldr	r2, [pc, #480]	; (8010138 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ff56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff5c:	4a77      	ldr	r2, [pc, #476]	; (801013c <HAL_TIM_PWM_Start_DMA+0x434>)
 800ff5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ff64:	6879      	ldr	r1, [r7, #4]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	3338      	adds	r3, #56	; 0x38
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	887b      	ldrh	r3, [r7, #2]
 800ff70:	f7f5 fea0 	bl	8005cb4 <HAL_DMA_Start_IT>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d001      	beq.n	800ff7e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e0d6      	b.n	801012c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68da      	ldr	r2, [r3, #12]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff8c:	60da      	str	r2, [r3, #12]
      break;
 800ff8e:	e04a      	b.n	8010026 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff94:	4a67      	ldr	r2, [pc, #412]	; (8010134 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ff96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9c:	4a66      	ldr	r2, [pc, #408]	; (8010138 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ff9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa4:	4a65      	ldr	r2, [pc, #404]	; (801013c <HAL_TIM_PWM_Start_DMA+0x434>)
 800ffa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ffac:	6879      	ldr	r1, [r7, #4]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	333c      	adds	r3, #60	; 0x3c
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	887b      	ldrh	r3, [r7, #2]
 800ffb8:	f7f5 fe7c 	bl	8005cb4 <HAL_DMA_Start_IT>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e0b2      	b.n	801012c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	68da      	ldr	r2, [r3, #12]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffd4:	60da      	str	r2, [r3, #12]
      break;
 800ffd6:	e026      	b.n	8010026 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffdc:	4a55      	ldr	r2, [pc, #340]	; (8010134 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ffde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffe4:	4a54      	ldr	r2, [pc, #336]	; (8010138 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ffe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffec:	4a53      	ldr	r2, [pc, #332]	; (801013c <HAL_TIM_PWM_Start_DMA+0x434>)
 800ffee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fff4:	6879      	ldr	r1, [r7, #4]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	3340      	adds	r3, #64	; 0x40
 800fffc:	461a      	mov	r2, r3
 800fffe:	887b      	ldrh	r3, [r7, #2]
 8010000:	f7f5 fe58 	bl	8005cb4 <HAL_DMA_Start_IT>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d001      	beq.n	801000e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801000a:	2301      	movs	r3, #1
 801000c:	e08e      	b.n	801012c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	68da      	ldr	r2, [r3, #12]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801001c:	60da      	str	r2, [r3, #12]
      break;
 801001e:	e002      	b.n	8010026 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010020:	2301      	movs	r3, #1
 8010022:	75fb      	strb	r3, [r7, #23]
      break;
 8010024:	bf00      	nop
  }

  if (status == HAL_OK)
 8010026:	7dfb      	ldrb	r3, [r7, #23]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d17e      	bne.n	801012a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2201      	movs	r2, #1
 8010032:	68b9      	ldr	r1, [r7, #8]
 8010034:	4618      	mov	r0, r3
 8010036:	f000 ff63 	bl	8010f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a40      	ldr	r2, [pc, #256]	; (8010140 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d013      	beq.n	801006c <HAL_TIM_PWM_Start_DMA+0x364>
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a3e      	ldr	r2, [pc, #248]	; (8010144 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d00e      	beq.n	801006c <HAL_TIM_PWM_Start_DMA+0x364>
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a3d      	ldr	r2, [pc, #244]	; (8010148 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d009      	beq.n	801006c <HAL_TIM_PWM_Start_DMA+0x364>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a3b      	ldr	r2, [pc, #236]	; (801014c <HAL_TIM_PWM_Start_DMA+0x444>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d004      	beq.n	801006c <HAL_TIM_PWM_Start_DMA+0x364>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4a3a      	ldr	r2, [pc, #232]	; (8010150 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010068:	4293      	cmp	r3, r2
 801006a:	d101      	bne.n	8010070 <HAL_TIM_PWM_Start_DMA+0x368>
 801006c:	2301      	movs	r3, #1
 801006e:	e000      	b.n	8010072 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010070:	2300      	movs	r3, #0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d007      	beq.n	8010086 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4a2d      	ldr	r2, [pc, #180]	; (8010140 <HAL_TIM_PWM_Start_DMA+0x438>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d02c      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010098:	d027      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a2d      	ldr	r2, [pc, #180]	; (8010154 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d022      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4a2b      	ldr	r2, [pc, #172]	; (8010158 <HAL_TIM_PWM_Start_DMA+0x450>)
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d01d      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4a2a      	ldr	r2, [pc, #168]	; (801015c <HAL_TIM_PWM_Start_DMA+0x454>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d018      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4a21      	ldr	r2, [pc, #132]	; (8010144 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d013      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a26      	ldr	r2, [pc, #152]	; (8010160 <HAL_TIM_PWM_Start_DMA+0x458>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d00e      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4a1d      	ldr	r2, [pc, #116]	; (8010148 <HAL_TIM_PWM_Start_DMA+0x440>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d009      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a22      	ldr	r2, [pc, #136]	; (8010164 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d004      	beq.n	80100ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a20      	ldr	r2, [pc, #128]	; (8010168 <HAL_TIM_PWM_Start_DMA+0x460>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d115      	bne.n	8010116 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	689a      	ldr	r2, [r3, #8]
 80100f0:	4b1e      	ldr	r3, [pc, #120]	; (801016c <HAL_TIM_PWM_Start_DMA+0x464>)
 80100f2:	4013      	ands	r3, r2
 80100f4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	2b06      	cmp	r3, #6
 80100fa:	d015      	beq.n	8010128 <HAL_TIM_PWM_Start_DMA+0x420>
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010102:	d011      	beq.n	8010128 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f042 0201 	orr.w	r2, r2, #1
 8010112:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010114:	e008      	b.n	8010128 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f042 0201 	orr.w	r2, r2, #1
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	e000      	b.n	801012a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010128:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801012a:	7dfb      	ldrb	r3, [r7, #23]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3718      	adds	r7, #24
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	080106f7 	.word	0x080106f7
 8010138:	0801079f 	.word	0x0801079f
 801013c:	08010665 	.word	0x08010665
 8010140:	40010000 	.word	0x40010000
 8010144:	40010400 	.word	0x40010400
 8010148:	40014000 	.word	0x40014000
 801014c:	40014400 	.word	0x40014400
 8010150:	40014800 	.word	0x40014800
 8010154:	40000400 	.word	0x40000400
 8010158:	40000800 	.word	0x40000800
 801015c:	40000c00 	.word	0x40000c00
 8010160:	40001800 	.word	0x40001800
 8010164:	4000e000 	.word	0x4000e000
 8010168:	4000e400 	.word	0x4000e400
 801016c:	00010007 	.word	0x00010007

08010170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	f003 0302 	and.w	r3, r3, #2
 8010182:	2b02      	cmp	r3, #2
 8010184:	d122      	bne.n	80101cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f003 0302 	and.w	r3, r3, #2
 8010190:	2b02      	cmp	r3, #2
 8010192:	d11b      	bne.n	80101cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f06f 0202 	mvn.w	r2, #2
 801019c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2201      	movs	r2, #1
 80101a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	699b      	ldr	r3, [r3, #24]
 80101aa:	f003 0303 	and.w	r3, r3, #3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d003      	beq.n	80101ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 fa24 	bl	8010600 <HAL_TIM_IC_CaptureCallback>
 80101b8:	e005      	b.n	80101c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 fa16 	bl	80105ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 fa27 	bl	8010614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	691b      	ldr	r3, [r3, #16]
 80101d2:	f003 0304 	and.w	r3, r3, #4
 80101d6:	2b04      	cmp	r3, #4
 80101d8:	d122      	bne.n	8010220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	f003 0304 	and.w	r3, r3, #4
 80101e4:	2b04      	cmp	r3, #4
 80101e6:	d11b      	bne.n	8010220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f06f 0204 	mvn.w	r2, #4
 80101f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2202      	movs	r2, #2
 80101f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	699b      	ldr	r3, [r3, #24]
 80101fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010202:	2b00      	cmp	r3, #0
 8010204:	d003      	beq.n	801020e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f9fa 	bl	8010600 <HAL_TIM_IC_CaptureCallback>
 801020c:	e005      	b.n	801021a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 f9ec 	bl	80105ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 f9fd 	bl	8010614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2200      	movs	r2, #0
 801021e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	691b      	ldr	r3, [r3, #16]
 8010226:	f003 0308 	and.w	r3, r3, #8
 801022a:	2b08      	cmp	r3, #8
 801022c:	d122      	bne.n	8010274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	f003 0308 	and.w	r3, r3, #8
 8010238:	2b08      	cmp	r3, #8
 801023a:	d11b      	bne.n	8010274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f06f 0208 	mvn.w	r2, #8
 8010244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2204      	movs	r2, #4
 801024a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	69db      	ldr	r3, [r3, #28]
 8010252:	f003 0303 	and.w	r3, r3, #3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 f9d0 	bl	8010600 <HAL_TIM_IC_CaptureCallback>
 8010260:	e005      	b.n	801026e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f9c2 	bl	80105ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 f9d3 	bl	8010614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2200      	movs	r2, #0
 8010272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	f003 0310 	and.w	r3, r3, #16
 801027e:	2b10      	cmp	r3, #16
 8010280:	d122      	bne.n	80102c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	f003 0310 	and.w	r3, r3, #16
 801028c:	2b10      	cmp	r3, #16
 801028e:	d11b      	bne.n	80102c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f06f 0210 	mvn.w	r2, #16
 8010298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2208      	movs	r2, #8
 801029e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	69db      	ldr	r3, [r3, #28]
 80102a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d003      	beq.n	80102b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f9a6 	bl	8010600 <HAL_TIM_IC_CaptureCallback>
 80102b4:	e005      	b.n	80102c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 f998 	bl	80105ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 f9a9 	bl	8010614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	f003 0301 	and.w	r3, r3, #1
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d10e      	bne.n	80102f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	f003 0301 	and.w	r3, r3, #1
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d107      	bne.n	80102f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f06f 0201 	mvn.w	r2, #1
 80102ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 f972 	bl	80105d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102fe:	2b80      	cmp	r3, #128	; 0x80
 8010300:	d10e      	bne.n	8010320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801030c:	2b80      	cmp	r3, #128	; 0x80
 801030e:	d107      	bne.n	8010320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 febc 	bl	8011098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801032a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801032e:	d10e      	bne.n	801034e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801033a:	2b80      	cmp	r3, #128	; 0x80
 801033c:	d107      	bne.n	801034e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 feaf 	bl	80110ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	691b      	ldr	r3, [r3, #16]
 8010354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010358:	2b40      	cmp	r3, #64	; 0x40
 801035a:	d10e      	bne.n	801037a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010366:	2b40      	cmp	r3, #64	; 0x40
 8010368:	d107      	bne.n	801037a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f961 	bl	801063c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	f003 0320 	and.w	r3, r3, #32
 8010384:	2b20      	cmp	r3, #32
 8010386:	d10e      	bne.n	80103a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	f003 0320 	and.w	r3, r3, #32
 8010392:	2b20      	cmp	r3, #32
 8010394:	d107      	bne.n	80103a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f06f 0220 	mvn.w	r2, #32
 801039e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 fe6f 	bl	8011084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80103a6:	bf00      	nop
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
	...

080103b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80103bc:	2300      	movs	r3, #0
 80103be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d101      	bne.n	80103ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80103ca:	2302      	movs	r3, #2
 80103cc:	e0ff      	b.n	80105ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2201      	movs	r2, #1
 80103d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2b14      	cmp	r3, #20
 80103da:	f200 80f0 	bhi.w	80105be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80103de:	a201      	add	r2, pc, #4	; (adr r2, 80103e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80103e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e4:	08010439 	.word	0x08010439
 80103e8:	080105bf 	.word	0x080105bf
 80103ec:	080105bf 	.word	0x080105bf
 80103f0:	080105bf 	.word	0x080105bf
 80103f4:	08010479 	.word	0x08010479
 80103f8:	080105bf 	.word	0x080105bf
 80103fc:	080105bf 	.word	0x080105bf
 8010400:	080105bf 	.word	0x080105bf
 8010404:	080104bb 	.word	0x080104bb
 8010408:	080105bf 	.word	0x080105bf
 801040c:	080105bf 	.word	0x080105bf
 8010410:	080105bf 	.word	0x080105bf
 8010414:	080104fb 	.word	0x080104fb
 8010418:	080105bf 	.word	0x080105bf
 801041c:	080105bf 	.word	0x080105bf
 8010420:	080105bf 	.word	0x080105bf
 8010424:	0801053d 	.word	0x0801053d
 8010428:	080105bf 	.word	0x080105bf
 801042c:	080105bf 	.word	0x080105bf
 8010430:	080105bf 	.word	0x080105bf
 8010434:	0801057d 	.word	0x0801057d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	68b9      	ldr	r1, [r7, #8]
 801043e:	4618      	mov	r0, r3
 8010440:	f000 fa88 	bl	8010954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	699a      	ldr	r2, [r3, #24]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f042 0208 	orr.w	r2, r2, #8
 8010452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	699a      	ldr	r2, [r3, #24]
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f022 0204 	bic.w	r2, r2, #4
 8010462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	6999      	ldr	r1, [r3, #24]
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	691a      	ldr	r2, [r3, #16]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	430a      	orrs	r2, r1
 8010474:	619a      	str	r2, [r3, #24]
      break;
 8010476:	e0a5      	b.n	80105c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68b9      	ldr	r1, [r7, #8]
 801047e:	4618      	mov	r0, r3
 8010480:	f000 faf8 	bl	8010a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	699a      	ldr	r2, [r3, #24]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	699a      	ldr	r2, [r3, #24]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80104a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	6999      	ldr	r1, [r3, #24]
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	021a      	lsls	r2, r3, #8
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	430a      	orrs	r2, r1
 80104b6:	619a      	str	r2, [r3, #24]
      break;
 80104b8:	e084      	b.n	80105c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68b9      	ldr	r1, [r7, #8]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 fb61 	bl	8010b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	69da      	ldr	r2, [r3, #28]
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f042 0208 	orr.w	r2, r2, #8
 80104d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	69da      	ldr	r2, [r3, #28]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f022 0204 	bic.w	r2, r2, #4
 80104e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	69d9      	ldr	r1, [r3, #28]
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	691a      	ldr	r2, [r3, #16]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	430a      	orrs	r2, r1
 80104f6:	61da      	str	r2, [r3, #28]
      break;
 80104f8:	e064      	b.n	80105c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	68b9      	ldr	r1, [r7, #8]
 8010500:	4618      	mov	r0, r3
 8010502:	f000 fbc9 	bl	8010c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	69da      	ldr	r2, [r3, #28]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	69da      	ldr	r2, [r3, #28]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	69d9      	ldr	r1, [r3, #28]
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	021a      	lsls	r2, r3, #8
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	430a      	orrs	r2, r1
 8010538:	61da      	str	r2, [r3, #28]
      break;
 801053a:	e043      	b.n	80105c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68b9      	ldr	r1, [r7, #8]
 8010542:	4618      	mov	r0, r3
 8010544:	f000 fc12 	bl	8010d6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f042 0208 	orr.w	r2, r2, #8
 8010556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f022 0204 	bic.w	r2, r2, #4
 8010566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	691a      	ldr	r2, [r3, #16]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	430a      	orrs	r2, r1
 8010578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801057a:	e023      	b.n	80105c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	68b9      	ldr	r1, [r7, #8]
 8010582:	4618      	mov	r0, r3
 8010584:	f000 fc56 	bl	8010e34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	691b      	ldr	r3, [r3, #16]
 80105b2:	021a      	lsls	r2, r3, #8
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	430a      	orrs	r2, r1
 80105ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80105bc:	e002      	b.n	80105c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80105be:	2301      	movs	r3, #1
 80105c0:	75fb      	strb	r3, [r7, #23]
      break;
 80105c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80105cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3718      	adds	r7, #24
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop

080105d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr

080105ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80105f4:	bf00      	nop
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801061c:	bf00      	nop
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010630:	bf00      	nop
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010644:	bf00      	nop
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010658:	bf00      	nop
 801065a:	370c      	adds	r7, #12
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr

08010664 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010670:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010676:	687a      	ldr	r2, [r7, #4]
 8010678:	429a      	cmp	r2, r3
 801067a:	d107      	bne.n	801068c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2201      	movs	r2, #1
 8010680:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2201      	movs	r2, #1
 8010686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801068a:	e02a      	b.n	80106e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	429a      	cmp	r2, r3
 8010694:	d107      	bne.n	80106a6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2202      	movs	r2, #2
 801069a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2201      	movs	r2, #1
 80106a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106a4:	e01d      	b.n	80106e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d107      	bne.n	80106c0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2204      	movs	r2, #4
 80106b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2201      	movs	r2, #1
 80106ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106be:	e010      	b.n	80106e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d107      	bne.n	80106da <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2208      	movs	r2, #8
 80106ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2201      	movs	r2, #1
 80106d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106d8:	e003      	b.n	80106e2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2201      	movs	r2, #1
 80106de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f7ff ffb4 	bl	8010650 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2200      	movs	r2, #0
 80106ec:	771a      	strb	r2, [r3, #28]
}
 80106ee:	bf00      	nop
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010702:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	429a      	cmp	r2, r3
 801070c:	d10b      	bne.n	8010726 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2201      	movs	r2, #1
 8010712:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	69db      	ldr	r3, [r3, #28]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d136      	bne.n	801078a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010724:	e031      	b.n	801078a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	429a      	cmp	r2, r3
 801072e:	d10b      	bne.n	8010748 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2202      	movs	r2, #2
 8010734:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	69db      	ldr	r3, [r3, #28]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d125      	bne.n	801078a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2201      	movs	r2, #1
 8010742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010746:	e020      	b.n	801078a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	429a      	cmp	r2, r3
 8010750:	d10b      	bne.n	801076a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	2204      	movs	r2, #4
 8010756:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	69db      	ldr	r3, [r3, #28]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d114      	bne.n	801078a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2201      	movs	r2, #1
 8010764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010768:	e00f      	b.n	801078a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	d10a      	bne.n	801078a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2208      	movs	r2, #8
 8010778:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	69db      	ldr	r3, [r3, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d103      	bne.n	801078a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2201      	movs	r2, #1
 8010786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801078a:	68f8      	ldr	r0, [r7, #12]
 801078c:	f7ff ff42 	bl	8010614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	771a      	strb	r2, [r3, #28]
}
 8010796:	bf00      	nop
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b084      	sub	sp, #16
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d103      	bne.n	80107be <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2201      	movs	r2, #1
 80107ba:	771a      	strb	r2, [r3, #28]
 80107bc:	e019      	b.n	80107f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d103      	bne.n	80107d0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2202      	movs	r2, #2
 80107cc:	771a      	strb	r2, [r3, #28]
 80107ce:	e010      	b.n	80107f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d103      	bne.n	80107e2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2204      	movs	r2, #4
 80107de:	771a      	strb	r2, [r3, #28]
 80107e0:	e007      	b.n	80107f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d102      	bne.n	80107f2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2208      	movs	r2, #8
 80107f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f7ff ff18 	bl	8010628 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2200      	movs	r2, #0
 80107fc:	771a      	strb	r2, [r3, #28]
}
 80107fe:	bf00      	nop
 8010800:	3710      	adds	r7, #16
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
	...

08010808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4a44      	ldr	r2, [pc, #272]	; (801092c <TIM_Base_SetConfig+0x124>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d013      	beq.n	8010848 <TIM_Base_SetConfig+0x40>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010826:	d00f      	beq.n	8010848 <TIM_Base_SetConfig+0x40>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	4a41      	ldr	r2, [pc, #260]	; (8010930 <TIM_Base_SetConfig+0x128>)
 801082c:	4293      	cmp	r3, r2
 801082e:	d00b      	beq.n	8010848 <TIM_Base_SetConfig+0x40>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4a40      	ldr	r2, [pc, #256]	; (8010934 <TIM_Base_SetConfig+0x12c>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d007      	beq.n	8010848 <TIM_Base_SetConfig+0x40>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4a3f      	ldr	r2, [pc, #252]	; (8010938 <TIM_Base_SetConfig+0x130>)
 801083c:	4293      	cmp	r3, r2
 801083e:	d003      	beq.n	8010848 <TIM_Base_SetConfig+0x40>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	4a3e      	ldr	r2, [pc, #248]	; (801093c <TIM_Base_SetConfig+0x134>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d108      	bne.n	801085a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801084e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	4313      	orrs	r3, r2
 8010858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4a33      	ldr	r2, [pc, #204]	; (801092c <TIM_Base_SetConfig+0x124>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d027      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010868:	d023      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4a30      	ldr	r2, [pc, #192]	; (8010930 <TIM_Base_SetConfig+0x128>)
 801086e:	4293      	cmp	r3, r2
 8010870:	d01f      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4a2f      	ldr	r2, [pc, #188]	; (8010934 <TIM_Base_SetConfig+0x12c>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d01b      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4a2e      	ldr	r2, [pc, #184]	; (8010938 <TIM_Base_SetConfig+0x130>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d017      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4a2d      	ldr	r2, [pc, #180]	; (801093c <TIM_Base_SetConfig+0x134>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d013      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4a2c      	ldr	r2, [pc, #176]	; (8010940 <TIM_Base_SetConfig+0x138>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d00f      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4a2b      	ldr	r2, [pc, #172]	; (8010944 <TIM_Base_SetConfig+0x13c>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d00b      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a2a      	ldr	r2, [pc, #168]	; (8010948 <TIM_Base_SetConfig+0x140>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d007      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4a29      	ldr	r2, [pc, #164]	; (801094c <TIM_Base_SetConfig+0x144>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d003      	beq.n	80108b2 <TIM_Base_SetConfig+0xaa>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a28      	ldr	r2, [pc, #160]	; (8010950 <TIM_Base_SetConfig+0x148>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d108      	bne.n	80108c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	4313      	orrs	r3, r2
 80108c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	695b      	ldr	r3, [r3, #20]
 80108ce:	4313      	orrs	r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	689a      	ldr	r2, [r3, #8]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4a10      	ldr	r2, [pc, #64]	; (801092c <TIM_Base_SetConfig+0x124>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d00f      	beq.n	8010910 <TIM_Base_SetConfig+0x108>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4a12      	ldr	r2, [pc, #72]	; (801093c <TIM_Base_SetConfig+0x134>)
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d00b      	beq.n	8010910 <TIM_Base_SetConfig+0x108>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	4a11      	ldr	r2, [pc, #68]	; (8010940 <TIM_Base_SetConfig+0x138>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d007      	beq.n	8010910 <TIM_Base_SetConfig+0x108>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4a10      	ldr	r2, [pc, #64]	; (8010944 <TIM_Base_SetConfig+0x13c>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d003      	beq.n	8010910 <TIM_Base_SetConfig+0x108>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a0f      	ldr	r2, [pc, #60]	; (8010948 <TIM_Base_SetConfig+0x140>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d103      	bne.n	8010918 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	691a      	ldr	r2, [r3, #16]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2201      	movs	r2, #1
 801091c:	615a      	str	r2, [r3, #20]
}
 801091e:	bf00      	nop
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop
 801092c:	40010000 	.word	0x40010000
 8010930:	40000400 	.word	0x40000400
 8010934:	40000800 	.word	0x40000800
 8010938:	40000c00 	.word	0x40000c00
 801093c:	40010400 	.word	0x40010400
 8010940:	40014000 	.word	0x40014000
 8010944:	40014400 	.word	0x40014400
 8010948:	40014800 	.word	0x40014800
 801094c:	4000e000 	.word	0x4000e000
 8010950:	4000e400 	.word	0x4000e400

08010954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010954:	b480      	push	{r7}
 8010956:	b087      	sub	sp, #28
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6a1b      	ldr	r3, [r3, #32]
 8010962:	f023 0201 	bic.w	r2, r3, #1
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	699b      	ldr	r3, [r3, #24]
 801097a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	4b37      	ldr	r3, [pc, #220]	; (8010a5c <TIM_OC1_SetConfig+0x108>)
 8010980:	4013      	ands	r3, r2
 8010982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f023 0303 	bic.w	r3, r3, #3
 801098a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	4313      	orrs	r3, r2
 8010994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	f023 0302 	bic.w	r3, r3, #2
 801099c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	697a      	ldr	r2, [r7, #20]
 80109a4:	4313      	orrs	r3, r2
 80109a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4a2d      	ldr	r2, [pc, #180]	; (8010a60 <TIM_OC1_SetConfig+0x10c>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d00f      	beq.n	80109d0 <TIM_OC1_SetConfig+0x7c>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	4a2c      	ldr	r2, [pc, #176]	; (8010a64 <TIM_OC1_SetConfig+0x110>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d00b      	beq.n	80109d0 <TIM_OC1_SetConfig+0x7c>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4a2b      	ldr	r2, [pc, #172]	; (8010a68 <TIM_OC1_SetConfig+0x114>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d007      	beq.n	80109d0 <TIM_OC1_SetConfig+0x7c>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	4a2a      	ldr	r2, [pc, #168]	; (8010a6c <TIM_OC1_SetConfig+0x118>)
 80109c4:	4293      	cmp	r3, r2
 80109c6:	d003      	beq.n	80109d0 <TIM_OC1_SetConfig+0x7c>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4a29      	ldr	r2, [pc, #164]	; (8010a70 <TIM_OC1_SetConfig+0x11c>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d10c      	bne.n	80109ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	f023 0308 	bic.w	r3, r3, #8
 80109d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	697a      	ldr	r2, [r7, #20]
 80109de:	4313      	orrs	r3, r2
 80109e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f023 0304 	bic.w	r3, r3, #4
 80109e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4a1c      	ldr	r2, [pc, #112]	; (8010a60 <TIM_OC1_SetConfig+0x10c>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d00f      	beq.n	8010a12 <TIM_OC1_SetConfig+0xbe>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4a1b      	ldr	r2, [pc, #108]	; (8010a64 <TIM_OC1_SetConfig+0x110>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d00b      	beq.n	8010a12 <TIM_OC1_SetConfig+0xbe>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4a1a      	ldr	r2, [pc, #104]	; (8010a68 <TIM_OC1_SetConfig+0x114>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d007      	beq.n	8010a12 <TIM_OC1_SetConfig+0xbe>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4a19      	ldr	r2, [pc, #100]	; (8010a6c <TIM_OC1_SetConfig+0x118>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d003      	beq.n	8010a12 <TIM_OC1_SetConfig+0xbe>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4a18      	ldr	r2, [pc, #96]	; (8010a70 <TIM_OC1_SetConfig+0x11c>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d111      	bne.n	8010a36 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	695b      	ldr	r3, [r3, #20]
 8010a26:	693a      	ldr	r2, [r7, #16]
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	699b      	ldr	r3, [r3, #24]
 8010a30:	693a      	ldr	r2, [r7, #16]
 8010a32:	4313      	orrs	r3, r2
 8010a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	693a      	ldr	r2, [r7, #16]
 8010a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	68fa      	ldr	r2, [r7, #12]
 8010a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	697a      	ldr	r2, [r7, #20]
 8010a4e:	621a      	str	r2, [r3, #32]
}
 8010a50:	bf00      	nop
 8010a52:	371c      	adds	r7, #28
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr
 8010a5c:	fffeff8f 	.word	0xfffeff8f
 8010a60:	40010000 	.word	0x40010000
 8010a64:	40010400 	.word	0x40010400
 8010a68:	40014000 	.word	0x40014000
 8010a6c:	40014400 	.word	0x40014400
 8010a70:	40014800 	.word	0x40014800

08010a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b087      	sub	sp, #28
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6a1b      	ldr	r3, [r3, #32]
 8010a82:	f023 0210 	bic.w	r2, r3, #16
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6a1b      	ldr	r3, [r3, #32]
 8010a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	699b      	ldr	r3, [r3, #24]
 8010a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010a9c:	68fa      	ldr	r2, [r7, #12]
 8010a9e:	4b34      	ldr	r3, [pc, #208]	; (8010b70 <TIM_OC2_SetConfig+0xfc>)
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	021b      	lsls	r3, r3, #8
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	f023 0320 	bic.w	r3, r3, #32
 8010abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	011b      	lsls	r3, r3, #4
 8010ac6:	697a      	ldr	r2, [r7, #20]
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4a29      	ldr	r2, [pc, #164]	; (8010b74 <TIM_OC2_SetConfig+0x100>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d003      	beq.n	8010adc <TIM_OC2_SetConfig+0x68>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4a28      	ldr	r2, [pc, #160]	; (8010b78 <TIM_OC2_SetConfig+0x104>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d10d      	bne.n	8010af8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	68db      	ldr	r3, [r3, #12]
 8010ae8:	011b      	lsls	r3, r3, #4
 8010aea:	697a      	ldr	r2, [r7, #20]
 8010aec:	4313      	orrs	r3, r2
 8010aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	4a1e      	ldr	r2, [pc, #120]	; (8010b74 <TIM_OC2_SetConfig+0x100>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d00f      	beq.n	8010b20 <TIM_OC2_SetConfig+0xac>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4a1d      	ldr	r2, [pc, #116]	; (8010b78 <TIM_OC2_SetConfig+0x104>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d00b      	beq.n	8010b20 <TIM_OC2_SetConfig+0xac>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	4a1c      	ldr	r2, [pc, #112]	; (8010b7c <TIM_OC2_SetConfig+0x108>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d007      	beq.n	8010b20 <TIM_OC2_SetConfig+0xac>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4a1b      	ldr	r2, [pc, #108]	; (8010b80 <TIM_OC2_SetConfig+0x10c>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d003      	beq.n	8010b20 <TIM_OC2_SetConfig+0xac>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4a1a      	ldr	r2, [pc, #104]	; (8010b84 <TIM_OC2_SetConfig+0x110>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d113      	bne.n	8010b48 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	695b      	ldr	r3, [r3, #20]
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	699b      	ldr	r3, [r3, #24]
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	693a      	ldr	r2, [r7, #16]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	693a      	ldr	r2, [r7, #16]
 8010b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	685a      	ldr	r2, [r3, #4]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	697a      	ldr	r2, [r7, #20]
 8010b60:	621a      	str	r2, [r3, #32]
}
 8010b62:	bf00      	nop
 8010b64:	371c      	adds	r7, #28
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr
 8010b6e:	bf00      	nop
 8010b70:	feff8fff 	.word	0xfeff8fff
 8010b74:	40010000 	.word	0x40010000
 8010b78:	40010400 	.word	0x40010400
 8010b7c:	40014000 	.word	0x40014000
 8010b80:	40014400 	.word	0x40014400
 8010b84:	40014800 	.word	0x40014800

08010b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b087      	sub	sp, #28
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6a1b      	ldr	r3, [r3, #32]
 8010b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6a1b      	ldr	r3, [r3, #32]
 8010ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	69db      	ldr	r3, [r3, #28]
 8010bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	4b33      	ldr	r3, [pc, #204]	; (8010c80 <TIM_OC3_SetConfig+0xf8>)
 8010bb4:	4013      	ands	r3, r2
 8010bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f023 0303 	bic.w	r3, r3, #3
 8010bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	689b      	ldr	r3, [r3, #8]
 8010bd6:	021b      	lsls	r3, r3, #8
 8010bd8:	697a      	ldr	r2, [r7, #20]
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4a28      	ldr	r2, [pc, #160]	; (8010c84 <TIM_OC3_SetConfig+0xfc>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d003      	beq.n	8010bee <TIM_OC3_SetConfig+0x66>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	4a27      	ldr	r2, [pc, #156]	; (8010c88 <TIM_OC3_SetConfig+0x100>)
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d10d      	bne.n	8010c0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	021b      	lsls	r3, r3, #8
 8010bfc:	697a      	ldr	r2, [r7, #20]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4a1d      	ldr	r2, [pc, #116]	; (8010c84 <TIM_OC3_SetConfig+0xfc>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d00f      	beq.n	8010c32 <TIM_OC3_SetConfig+0xaa>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	4a1c      	ldr	r2, [pc, #112]	; (8010c88 <TIM_OC3_SetConfig+0x100>)
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d00b      	beq.n	8010c32 <TIM_OC3_SetConfig+0xaa>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4a1b      	ldr	r2, [pc, #108]	; (8010c8c <TIM_OC3_SetConfig+0x104>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d007      	beq.n	8010c32 <TIM_OC3_SetConfig+0xaa>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4a1a      	ldr	r2, [pc, #104]	; (8010c90 <TIM_OC3_SetConfig+0x108>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d003      	beq.n	8010c32 <TIM_OC3_SetConfig+0xaa>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4a19      	ldr	r2, [pc, #100]	; (8010c94 <TIM_OC3_SetConfig+0x10c>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d113      	bne.n	8010c5a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	695b      	ldr	r3, [r3, #20]
 8010c46:	011b      	lsls	r3, r3, #4
 8010c48:	693a      	ldr	r2, [r7, #16]
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	699b      	ldr	r3, [r3, #24]
 8010c52:	011b      	lsls	r3, r3, #4
 8010c54:	693a      	ldr	r2, [r7, #16]
 8010c56:	4313      	orrs	r3, r2
 8010c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	685a      	ldr	r2, [r3, #4]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	697a      	ldr	r2, [r7, #20]
 8010c72:	621a      	str	r2, [r3, #32]
}
 8010c74:	bf00      	nop
 8010c76:	371c      	adds	r7, #28
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr
 8010c80:	fffeff8f 	.word	0xfffeff8f
 8010c84:	40010000 	.word	0x40010000
 8010c88:	40010400 	.word	0x40010400
 8010c8c:	40014000 	.word	0x40014000
 8010c90:	40014400 	.word	0x40014400
 8010c94:	40014800 	.word	0x40014800

08010c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b087      	sub	sp, #28
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a1b      	ldr	r3, [r3, #32]
 8010ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a1b      	ldr	r3, [r3, #32]
 8010cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	69db      	ldr	r3, [r3, #28]
 8010cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	4b24      	ldr	r3, [pc, #144]	; (8010d54 <TIM_OC4_SetConfig+0xbc>)
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	021b      	lsls	r3, r3, #8
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	4313      	orrs	r3, r2
 8010cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	031b      	lsls	r3, r3, #12
 8010cea:	693a      	ldr	r2, [r7, #16]
 8010cec:	4313      	orrs	r3, r2
 8010cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	4a19      	ldr	r2, [pc, #100]	; (8010d58 <TIM_OC4_SetConfig+0xc0>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d00f      	beq.n	8010d18 <TIM_OC4_SetConfig+0x80>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4a18      	ldr	r2, [pc, #96]	; (8010d5c <TIM_OC4_SetConfig+0xc4>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d00b      	beq.n	8010d18 <TIM_OC4_SetConfig+0x80>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	4a17      	ldr	r2, [pc, #92]	; (8010d60 <TIM_OC4_SetConfig+0xc8>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d007      	beq.n	8010d18 <TIM_OC4_SetConfig+0x80>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	4a16      	ldr	r2, [pc, #88]	; (8010d64 <TIM_OC4_SetConfig+0xcc>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d003      	beq.n	8010d18 <TIM_OC4_SetConfig+0x80>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	4a15      	ldr	r2, [pc, #84]	; (8010d68 <TIM_OC4_SetConfig+0xd0>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d109      	bne.n	8010d2c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	695b      	ldr	r3, [r3, #20]
 8010d24:	019b      	lsls	r3, r3, #6
 8010d26:	697a      	ldr	r2, [r7, #20]
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	697a      	ldr	r2, [r7, #20]
 8010d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	685a      	ldr	r2, [r3, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	693a      	ldr	r2, [r7, #16]
 8010d44:	621a      	str	r2, [r3, #32]
}
 8010d46:	bf00      	nop
 8010d48:	371c      	adds	r7, #28
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop
 8010d54:	feff8fff 	.word	0xfeff8fff
 8010d58:	40010000 	.word	0x40010000
 8010d5c:	40010400 	.word	0x40010400
 8010d60:	40014000 	.word	0x40014000
 8010d64:	40014400 	.word	0x40014400
 8010d68:	40014800 	.word	0x40014800

08010d6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b087      	sub	sp, #28
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6a1b      	ldr	r3, [r3, #32]
 8010d7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010d94:	68fa      	ldr	r2, [r7, #12]
 8010d96:	4b21      	ldr	r3, [pc, #132]	; (8010e1c <TIM_OC5_SetConfig+0xb0>)
 8010d98:	4013      	ands	r3, r2
 8010d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	4313      	orrs	r3, r2
 8010da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010dac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	041b      	lsls	r3, r3, #16
 8010db4:	693a      	ldr	r2, [r7, #16]
 8010db6:	4313      	orrs	r3, r2
 8010db8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4a18      	ldr	r2, [pc, #96]	; (8010e20 <TIM_OC5_SetConfig+0xb4>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d00f      	beq.n	8010de2 <TIM_OC5_SetConfig+0x76>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4a17      	ldr	r2, [pc, #92]	; (8010e24 <TIM_OC5_SetConfig+0xb8>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d00b      	beq.n	8010de2 <TIM_OC5_SetConfig+0x76>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4a16      	ldr	r2, [pc, #88]	; (8010e28 <TIM_OC5_SetConfig+0xbc>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d007      	beq.n	8010de2 <TIM_OC5_SetConfig+0x76>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4a15      	ldr	r2, [pc, #84]	; (8010e2c <TIM_OC5_SetConfig+0xc0>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d003      	beq.n	8010de2 <TIM_OC5_SetConfig+0x76>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4a14      	ldr	r2, [pc, #80]	; (8010e30 <TIM_OC5_SetConfig+0xc4>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d109      	bne.n	8010df6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	695b      	ldr	r3, [r3, #20]
 8010dee:	021b      	lsls	r3, r3, #8
 8010df0:	697a      	ldr	r2, [r7, #20]
 8010df2:	4313      	orrs	r3, r2
 8010df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	685a      	ldr	r2, [r3, #4]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	693a      	ldr	r2, [r7, #16]
 8010e0e:	621a      	str	r2, [r3, #32]
}
 8010e10:	bf00      	nop
 8010e12:	371c      	adds	r7, #28
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr
 8010e1c:	fffeff8f 	.word	0xfffeff8f
 8010e20:	40010000 	.word	0x40010000
 8010e24:	40010400 	.word	0x40010400
 8010e28:	40014000 	.word	0x40014000
 8010e2c:	40014400 	.word	0x40014400
 8010e30:	40014800 	.word	0x40014800

08010e34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b087      	sub	sp, #28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6a1b      	ldr	r3, [r3, #32]
 8010e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a1b      	ldr	r3, [r3, #32]
 8010e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	4b22      	ldr	r3, [pc, #136]	; (8010ee8 <TIM_OC6_SetConfig+0xb4>)
 8010e60:	4013      	ands	r3, r2
 8010e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	021b      	lsls	r3, r3, #8
 8010e6a:	68fa      	ldr	r2, [r7, #12]
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	689b      	ldr	r3, [r3, #8]
 8010e7c:	051b      	lsls	r3, r3, #20
 8010e7e:	693a      	ldr	r2, [r7, #16]
 8010e80:	4313      	orrs	r3, r2
 8010e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	4a19      	ldr	r2, [pc, #100]	; (8010eec <TIM_OC6_SetConfig+0xb8>)
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d00f      	beq.n	8010eac <TIM_OC6_SetConfig+0x78>
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	4a18      	ldr	r2, [pc, #96]	; (8010ef0 <TIM_OC6_SetConfig+0xbc>)
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d00b      	beq.n	8010eac <TIM_OC6_SetConfig+0x78>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	4a17      	ldr	r2, [pc, #92]	; (8010ef4 <TIM_OC6_SetConfig+0xc0>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d007      	beq.n	8010eac <TIM_OC6_SetConfig+0x78>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	4a16      	ldr	r2, [pc, #88]	; (8010ef8 <TIM_OC6_SetConfig+0xc4>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d003      	beq.n	8010eac <TIM_OC6_SetConfig+0x78>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4a15      	ldr	r2, [pc, #84]	; (8010efc <TIM_OC6_SetConfig+0xc8>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d109      	bne.n	8010ec0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	029b      	lsls	r3, r3, #10
 8010eba:	697a      	ldr	r2, [r7, #20]
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	697a      	ldr	r2, [r7, #20]
 8010ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	685a      	ldr	r2, [r3, #4]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	693a      	ldr	r2, [r7, #16]
 8010ed8:	621a      	str	r2, [r3, #32]
}
 8010eda:	bf00      	nop
 8010edc:	371c      	adds	r7, #28
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr
 8010ee6:	bf00      	nop
 8010ee8:	feff8fff 	.word	0xfeff8fff
 8010eec:	40010000 	.word	0x40010000
 8010ef0:	40010400 	.word	0x40010400
 8010ef4:	40014000 	.word	0x40014000
 8010ef8:	40014400 	.word	0x40014400
 8010efc:	40014800 	.word	0x40014800

08010f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b087      	sub	sp, #28
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	f003 031f 	and.w	r3, r3, #31
 8010f12:	2201      	movs	r2, #1
 8010f14:	fa02 f303 	lsl.w	r3, r2, r3
 8010f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	6a1a      	ldr	r2, [r3, #32]
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	43db      	mvns	r3, r3
 8010f22:	401a      	ands	r2, r3
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	6a1a      	ldr	r2, [r3, #32]
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	f003 031f 	and.w	r3, r3, #31
 8010f32:	6879      	ldr	r1, [r7, #4]
 8010f34:	fa01 f303 	lsl.w	r3, r1, r3
 8010f38:	431a      	orrs	r2, r3
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	621a      	str	r2, [r3, #32]
}
 8010f3e:	bf00      	nop
 8010f40:	371c      	adds	r7, #28
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr
	...

08010f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d101      	bne.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010f60:	2302      	movs	r3, #2
 8010f62:	e077      	b.n	8011054 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2201      	movs	r2, #1
 8010f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2202      	movs	r2, #2
 8010f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4a35      	ldr	r2, [pc, #212]	; (8011060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d004      	beq.n	8010f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	4a34      	ldr	r2, [pc, #208]	; (8011064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010f94:	4293      	cmp	r3, r2
 8010f96:	d108      	bne.n	8010faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68fa      	ldr	r2, [r7, #12]
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4a25      	ldr	r2, [pc, #148]	; (8011060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d02c      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fd6:	d027      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4a22      	ldr	r2, [pc, #136]	; (8011068 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d022      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	4a21      	ldr	r2, [pc, #132]	; (801106c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d01d      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4a1f      	ldr	r2, [pc, #124]	; (8011070 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d018      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	4a1a      	ldr	r2, [pc, #104]	; (8011064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d013      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4a1b      	ldr	r2, [pc, #108]	; (8011074 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d00e      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4a1a      	ldr	r2, [pc, #104]	; (8011078 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d009      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4a18      	ldr	r2, [pc, #96]	; (801107c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d004      	beq.n	8011028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4a17      	ldr	r2, [pc, #92]	; (8011080 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011024:	4293      	cmp	r3, r2
 8011026:	d10c      	bne.n	8011042 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801102e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	689b      	ldr	r3, [r3, #8]
 8011034:	68ba      	ldr	r2, [r7, #8]
 8011036:	4313      	orrs	r3, r2
 8011038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2201      	movs	r2, #1
 8011046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2200      	movs	r2, #0
 801104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3714      	adds	r7, #20
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	40010000 	.word	0x40010000
 8011064:	40010400 	.word	0x40010400
 8011068:	40000400 	.word	0x40000400
 801106c:	40000800 	.word	0x40000800
 8011070:	40000c00 	.word	0x40000c00
 8011074:	40001800 	.word	0x40001800
 8011078:	40014000 	.word	0x40014000
 801107c:	4000e000 	.word	0x4000e000
 8011080:	4000e400 	.word	0x4000e400

08011084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801108c:	bf00      	nop
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80110a0:	bf00      	nop
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d101      	bne.n	80110d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80110ce:	2301      	movs	r3, #1
 80110d0:	e042      	b.n	8011158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d106      	bne.n	80110ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2200      	movs	r2, #0
 80110e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7f2 fb17 	bl	8003718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2224      	movs	r2, #36	; 0x24
 80110ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f022 0201 	bic.w	r2, r2, #1
 8011100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f000 f82c 	bl	8011160 <UART_SetConfig>
 8011108:	4603      	mov	r3, r0
 801110a:	2b01      	cmp	r3, #1
 801110c:	d101      	bne.n	8011112 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801110e:	2301      	movs	r3, #1
 8011110:	e022      	b.n	8011158 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011116:	2b00      	cmp	r3, #0
 8011118:	d002      	beq.n	8011120 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fe8c 	bl	8011e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	685a      	ldr	r2, [r3, #4]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801112e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	689a      	ldr	r2, [r3, #8]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801113e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f042 0201 	orr.w	r2, r2, #1
 801114e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 ff13 	bl	8011f7c <UART_CheckIdleState>
 8011156:	4603      	mov	r3, r0
}
 8011158:	4618      	mov	r0, r3
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011164:	b092      	sub	sp, #72	; 0x48
 8011166:	af00      	add	r7, sp, #0
 8011168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801116a:	2300      	movs	r3, #0
 801116c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	689a      	ldr	r2, [r3, #8]
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	691b      	ldr	r3, [r3, #16]
 8011178:	431a      	orrs	r2, r3
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	431a      	orrs	r2, r3
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	69db      	ldr	r3, [r3, #28]
 8011184:	4313      	orrs	r3, r2
 8011186:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	4bbe      	ldr	r3, [pc, #760]	; (8011488 <UART_SetConfig+0x328>)
 8011190:	4013      	ands	r3, r2
 8011192:	697a      	ldr	r2, [r7, #20]
 8011194:	6812      	ldr	r2, [r2, #0]
 8011196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011198:	430b      	orrs	r3, r1
 801119a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	68da      	ldr	r2, [r3, #12]
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	430a      	orrs	r2, r1
 80111b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	699b      	ldr	r3, [r3, #24]
 80111b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4ab3      	ldr	r2, [pc, #716]	; (801148c <UART_SetConfig+0x32c>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d004      	beq.n	80111cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	6a1b      	ldr	r3, [r3, #32]
 80111c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111c8:	4313      	orrs	r3, r2
 80111ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	689a      	ldr	r2, [r3, #8]
 80111d2:	4baf      	ldr	r3, [pc, #700]	; (8011490 <UART_SetConfig+0x330>)
 80111d4:	4013      	ands	r3, r2
 80111d6:	697a      	ldr	r2, [r7, #20]
 80111d8:	6812      	ldr	r2, [r2, #0]
 80111da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80111dc:	430b      	orrs	r3, r1
 80111de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111e6:	f023 010f 	bic.w	r1, r3, #15
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	430a      	orrs	r2, r1
 80111f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4aa6      	ldr	r2, [pc, #664]	; (8011494 <UART_SetConfig+0x334>)
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d177      	bne.n	80112f0 <UART_SetConfig+0x190>
 8011200:	4ba5      	ldr	r3, [pc, #660]	; (8011498 <UART_SetConfig+0x338>)
 8011202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011208:	2b28      	cmp	r3, #40	; 0x28
 801120a:	d86d      	bhi.n	80112e8 <UART_SetConfig+0x188>
 801120c:	a201      	add	r2, pc, #4	; (adr r2, 8011214 <UART_SetConfig+0xb4>)
 801120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011212:	bf00      	nop
 8011214:	080112b9 	.word	0x080112b9
 8011218:	080112e9 	.word	0x080112e9
 801121c:	080112e9 	.word	0x080112e9
 8011220:	080112e9 	.word	0x080112e9
 8011224:	080112e9 	.word	0x080112e9
 8011228:	080112e9 	.word	0x080112e9
 801122c:	080112e9 	.word	0x080112e9
 8011230:	080112e9 	.word	0x080112e9
 8011234:	080112c1 	.word	0x080112c1
 8011238:	080112e9 	.word	0x080112e9
 801123c:	080112e9 	.word	0x080112e9
 8011240:	080112e9 	.word	0x080112e9
 8011244:	080112e9 	.word	0x080112e9
 8011248:	080112e9 	.word	0x080112e9
 801124c:	080112e9 	.word	0x080112e9
 8011250:	080112e9 	.word	0x080112e9
 8011254:	080112c9 	.word	0x080112c9
 8011258:	080112e9 	.word	0x080112e9
 801125c:	080112e9 	.word	0x080112e9
 8011260:	080112e9 	.word	0x080112e9
 8011264:	080112e9 	.word	0x080112e9
 8011268:	080112e9 	.word	0x080112e9
 801126c:	080112e9 	.word	0x080112e9
 8011270:	080112e9 	.word	0x080112e9
 8011274:	080112d1 	.word	0x080112d1
 8011278:	080112e9 	.word	0x080112e9
 801127c:	080112e9 	.word	0x080112e9
 8011280:	080112e9 	.word	0x080112e9
 8011284:	080112e9 	.word	0x080112e9
 8011288:	080112e9 	.word	0x080112e9
 801128c:	080112e9 	.word	0x080112e9
 8011290:	080112e9 	.word	0x080112e9
 8011294:	080112d9 	.word	0x080112d9
 8011298:	080112e9 	.word	0x080112e9
 801129c:	080112e9 	.word	0x080112e9
 80112a0:	080112e9 	.word	0x080112e9
 80112a4:	080112e9 	.word	0x080112e9
 80112a8:	080112e9 	.word	0x080112e9
 80112ac:	080112e9 	.word	0x080112e9
 80112b0:	080112e9 	.word	0x080112e9
 80112b4:	080112e1 	.word	0x080112e1
 80112b8:	2301      	movs	r3, #1
 80112ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112be:	e326      	b.n	801190e <UART_SetConfig+0x7ae>
 80112c0:	2304      	movs	r3, #4
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c6:	e322      	b.n	801190e <UART_SetConfig+0x7ae>
 80112c8:	2308      	movs	r3, #8
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e31e      	b.n	801190e <UART_SetConfig+0x7ae>
 80112d0:	2310      	movs	r3, #16
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e31a      	b.n	801190e <UART_SetConfig+0x7ae>
 80112d8:	2320      	movs	r3, #32
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e316      	b.n	801190e <UART_SetConfig+0x7ae>
 80112e0:	2340      	movs	r3, #64	; 0x40
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e312      	b.n	801190e <UART_SetConfig+0x7ae>
 80112e8:	2380      	movs	r3, #128	; 0x80
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e30e      	b.n	801190e <UART_SetConfig+0x7ae>
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4a69      	ldr	r2, [pc, #420]	; (801149c <UART_SetConfig+0x33c>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d130      	bne.n	801135c <UART_SetConfig+0x1fc>
 80112fa:	4b67      	ldr	r3, [pc, #412]	; (8011498 <UART_SetConfig+0x338>)
 80112fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112fe:	f003 0307 	and.w	r3, r3, #7
 8011302:	2b05      	cmp	r3, #5
 8011304:	d826      	bhi.n	8011354 <UART_SetConfig+0x1f4>
 8011306:	a201      	add	r2, pc, #4	; (adr r2, 801130c <UART_SetConfig+0x1ac>)
 8011308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801130c:	08011325 	.word	0x08011325
 8011310:	0801132d 	.word	0x0801132d
 8011314:	08011335 	.word	0x08011335
 8011318:	0801133d 	.word	0x0801133d
 801131c:	08011345 	.word	0x08011345
 8011320:	0801134d 	.word	0x0801134d
 8011324:	2300      	movs	r3, #0
 8011326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132a:	e2f0      	b.n	801190e <UART_SetConfig+0x7ae>
 801132c:	2304      	movs	r3, #4
 801132e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011332:	e2ec      	b.n	801190e <UART_SetConfig+0x7ae>
 8011334:	2308      	movs	r3, #8
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e2e8      	b.n	801190e <UART_SetConfig+0x7ae>
 801133c:	2310      	movs	r3, #16
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e2e4      	b.n	801190e <UART_SetConfig+0x7ae>
 8011344:	2320      	movs	r3, #32
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e2e0      	b.n	801190e <UART_SetConfig+0x7ae>
 801134c:	2340      	movs	r3, #64	; 0x40
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e2dc      	b.n	801190e <UART_SetConfig+0x7ae>
 8011354:	2380      	movs	r3, #128	; 0x80
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e2d8      	b.n	801190e <UART_SetConfig+0x7ae>
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a4f      	ldr	r2, [pc, #316]	; (80114a0 <UART_SetConfig+0x340>)
 8011362:	4293      	cmp	r3, r2
 8011364:	d130      	bne.n	80113c8 <UART_SetConfig+0x268>
 8011366:	4b4c      	ldr	r3, [pc, #304]	; (8011498 <UART_SetConfig+0x338>)
 8011368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801136a:	f003 0307 	and.w	r3, r3, #7
 801136e:	2b05      	cmp	r3, #5
 8011370:	d826      	bhi.n	80113c0 <UART_SetConfig+0x260>
 8011372:	a201      	add	r2, pc, #4	; (adr r2, 8011378 <UART_SetConfig+0x218>)
 8011374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011378:	08011391 	.word	0x08011391
 801137c:	08011399 	.word	0x08011399
 8011380:	080113a1 	.word	0x080113a1
 8011384:	080113a9 	.word	0x080113a9
 8011388:	080113b1 	.word	0x080113b1
 801138c:	080113b9 	.word	0x080113b9
 8011390:	2300      	movs	r3, #0
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e2ba      	b.n	801190e <UART_SetConfig+0x7ae>
 8011398:	2304      	movs	r3, #4
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e2b6      	b.n	801190e <UART_SetConfig+0x7ae>
 80113a0:	2308      	movs	r3, #8
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e2b2      	b.n	801190e <UART_SetConfig+0x7ae>
 80113a8:	2310      	movs	r3, #16
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e2ae      	b.n	801190e <UART_SetConfig+0x7ae>
 80113b0:	2320      	movs	r3, #32
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e2aa      	b.n	801190e <UART_SetConfig+0x7ae>
 80113b8:	2340      	movs	r3, #64	; 0x40
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e2a6      	b.n	801190e <UART_SetConfig+0x7ae>
 80113c0:	2380      	movs	r3, #128	; 0x80
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e2a2      	b.n	801190e <UART_SetConfig+0x7ae>
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a35      	ldr	r2, [pc, #212]	; (80114a4 <UART_SetConfig+0x344>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d130      	bne.n	8011434 <UART_SetConfig+0x2d4>
 80113d2:	4b31      	ldr	r3, [pc, #196]	; (8011498 <UART_SetConfig+0x338>)
 80113d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113d6:	f003 0307 	and.w	r3, r3, #7
 80113da:	2b05      	cmp	r3, #5
 80113dc:	d826      	bhi.n	801142c <UART_SetConfig+0x2cc>
 80113de:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <UART_SetConfig+0x284>)
 80113e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e4:	080113fd 	.word	0x080113fd
 80113e8:	08011405 	.word	0x08011405
 80113ec:	0801140d 	.word	0x0801140d
 80113f0:	08011415 	.word	0x08011415
 80113f4:	0801141d 	.word	0x0801141d
 80113f8:	08011425 	.word	0x08011425
 80113fc:	2300      	movs	r3, #0
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011402:	e284      	b.n	801190e <UART_SetConfig+0x7ae>
 8011404:	2304      	movs	r3, #4
 8011406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140a:	e280      	b.n	801190e <UART_SetConfig+0x7ae>
 801140c:	2308      	movs	r3, #8
 801140e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011412:	e27c      	b.n	801190e <UART_SetConfig+0x7ae>
 8011414:	2310      	movs	r3, #16
 8011416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141a:	e278      	b.n	801190e <UART_SetConfig+0x7ae>
 801141c:	2320      	movs	r3, #32
 801141e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011422:	e274      	b.n	801190e <UART_SetConfig+0x7ae>
 8011424:	2340      	movs	r3, #64	; 0x40
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e270      	b.n	801190e <UART_SetConfig+0x7ae>
 801142c:	2380      	movs	r3, #128	; 0x80
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e26c      	b.n	801190e <UART_SetConfig+0x7ae>
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a1b      	ldr	r2, [pc, #108]	; (80114a8 <UART_SetConfig+0x348>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d142      	bne.n	80114c4 <UART_SetConfig+0x364>
 801143e:	4b16      	ldr	r3, [pc, #88]	; (8011498 <UART_SetConfig+0x338>)
 8011440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011442:	f003 0307 	and.w	r3, r3, #7
 8011446:	2b05      	cmp	r3, #5
 8011448:	d838      	bhi.n	80114bc <UART_SetConfig+0x35c>
 801144a:	a201      	add	r2, pc, #4	; (adr r2, 8011450 <UART_SetConfig+0x2f0>)
 801144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011450:	08011469 	.word	0x08011469
 8011454:	08011471 	.word	0x08011471
 8011458:	08011479 	.word	0x08011479
 801145c:	08011481 	.word	0x08011481
 8011460:	080114ad 	.word	0x080114ad
 8011464:	080114b5 	.word	0x080114b5
 8011468:	2300      	movs	r3, #0
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e24e      	b.n	801190e <UART_SetConfig+0x7ae>
 8011470:	2304      	movs	r3, #4
 8011472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011476:	e24a      	b.n	801190e <UART_SetConfig+0x7ae>
 8011478:	2308      	movs	r3, #8
 801147a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147e:	e246      	b.n	801190e <UART_SetConfig+0x7ae>
 8011480:	2310      	movs	r3, #16
 8011482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011486:	e242      	b.n	801190e <UART_SetConfig+0x7ae>
 8011488:	cfff69f3 	.word	0xcfff69f3
 801148c:	58000c00 	.word	0x58000c00
 8011490:	11fff4ff 	.word	0x11fff4ff
 8011494:	40011000 	.word	0x40011000
 8011498:	58024400 	.word	0x58024400
 801149c:	40004400 	.word	0x40004400
 80114a0:	40004800 	.word	0x40004800
 80114a4:	40004c00 	.word	0x40004c00
 80114a8:	40005000 	.word	0x40005000
 80114ac:	2320      	movs	r3, #32
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b2:	e22c      	b.n	801190e <UART_SetConfig+0x7ae>
 80114b4:	2340      	movs	r3, #64	; 0x40
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ba:	e228      	b.n	801190e <UART_SetConfig+0x7ae>
 80114bc:	2380      	movs	r3, #128	; 0x80
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c2:	e224      	b.n	801190e <UART_SetConfig+0x7ae>
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4ab1      	ldr	r2, [pc, #708]	; (8011790 <UART_SetConfig+0x630>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d176      	bne.n	80115bc <UART_SetConfig+0x45c>
 80114ce:	4bb1      	ldr	r3, [pc, #708]	; (8011794 <UART_SetConfig+0x634>)
 80114d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80114d6:	2b28      	cmp	r3, #40	; 0x28
 80114d8:	d86c      	bhi.n	80115b4 <UART_SetConfig+0x454>
 80114da:	a201      	add	r2, pc, #4	; (adr r2, 80114e0 <UART_SetConfig+0x380>)
 80114dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e0:	08011585 	.word	0x08011585
 80114e4:	080115b5 	.word	0x080115b5
 80114e8:	080115b5 	.word	0x080115b5
 80114ec:	080115b5 	.word	0x080115b5
 80114f0:	080115b5 	.word	0x080115b5
 80114f4:	080115b5 	.word	0x080115b5
 80114f8:	080115b5 	.word	0x080115b5
 80114fc:	080115b5 	.word	0x080115b5
 8011500:	0801158d 	.word	0x0801158d
 8011504:	080115b5 	.word	0x080115b5
 8011508:	080115b5 	.word	0x080115b5
 801150c:	080115b5 	.word	0x080115b5
 8011510:	080115b5 	.word	0x080115b5
 8011514:	080115b5 	.word	0x080115b5
 8011518:	080115b5 	.word	0x080115b5
 801151c:	080115b5 	.word	0x080115b5
 8011520:	08011595 	.word	0x08011595
 8011524:	080115b5 	.word	0x080115b5
 8011528:	080115b5 	.word	0x080115b5
 801152c:	080115b5 	.word	0x080115b5
 8011530:	080115b5 	.word	0x080115b5
 8011534:	080115b5 	.word	0x080115b5
 8011538:	080115b5 	.word	0x080115b5
 801153c:	080115b5 	.word	0x080115b5
 8011540:	0801159d 	.word	0x0801159d
 8011544:	080115b5 	.word	0x080115b5
 8011548:	080115b5 	.word	0x080115b5
 801154c:	080115b5 	.word	0x080115b5
 8011550:	080115b5 	.word	0x080115b5
 8011554:	080115b5 	.word	0x080115b5
 8011558:	080115b5 	.word	0x080115b5
 801155c:	080115b5 	.word	0x080115b5
 8011560:	080115a5 	.word	0x080115a5
 8011564:	080115b5 	.word	0x080115b5
 8011568:	080115b5 	.word	0x080115b5
 801156c:	080115b5 	.word	0x080115b5
 8011570:	080115b5 	.word	0x080115b5
 8011574:	080115b5 	.word	0x080115b5
 8011578:	080115b5 	.word	0x080115b5
 801157c:	080115b5 	.word	0x080115b5
 8011580:	080115ad 	.word	0x080115ad
 8011584:	2301      	movs	r3, #1
 8011586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158a:	e1c0      	b.n	801190e <UART_SetConfig+0x7ae>
 801158c:	2304      	movs	r3, #4
 801158e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011592:	e1bc      	b.n	801190e <UART_SetConfig+0x7ae>
 8011594:	2308      	movs	r3, #8
 8011596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801159a:	e1b8      	b.n	801190e <UART_SetConfig+0x7ae>
 801159c:	2310      	movs	r3, #16
 801159e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a2:	e1b4      	b.n	801190e <UART_SetConfig+0x7ae>
 80115a4:	2320      	movs	r3, #32
 80115a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115aa:	e1b0      	b.n	801190e <UART_SetConfig+0x7ae>
 80115ac:	2340      	movs	r3, #64	; 0x40
 80115ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b2:	e1ac      	b.n	801190e <UART_SetConfig+0x7ae>
 80115b4:	2380      	movs	r3, #128	; 0x80
 80115b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ba:	e1a8      	b.n	801190e <UART_SetConfig+0x7ae>
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4a75      	ldr	r2, [pc, #468]	; (8011798 <UART_SetConfig+0x638>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d130      	bne.n	8011628 <UART_SetConfig+0x4c8>
 80115c6:	4b73      	ldr	r3, [pc, #460]	; (8011794 <UART_SetConfig+0x634>)
 80115c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115ca:	f003 0307 	and.w	r3, r3, #7
 80115ce:	2b05      	cmp	r3, #5
 80115d0:	d826      	bhi.n	8011620 <UART_SetConfig+0x4c0>
 80115d2:	a201      	add	r2, pc, #4	; (adr r2, 80115d8 <UART_SetConfig+0x478>)
 80115d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d8:	080115f1 	.word	0x080115f1
 80115dc:	080115f9 	.word	0x080115f9
 80115e0:	08011601 	.word	0x08011601
 80115e4:	08011609 	.word	0x08011609
 80115e8:	08011611 	.word	0x08011611
 80115ec:	08011619 	.word	0x08011619
 80115f0:	2300      	movs	r3, #0
 80115f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115f6:	e18a      	b.n	801190e <UART_SetConfig+0x7ae>
 80115f8:	2304      	movs	r3, #4
 80115fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fe:	e186      	b.n	801190e <UART_SetConfig+0x7ae>
 8011600:	2308      	movs	r3, #8
 8011602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011606:	e182      	b.n	801190e <UART_SetConfig+0x7ae>
 8011608:	2310      	movs	r3, #16
 801160a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160e:	e17e      	b.n	801190e <UART_SetConfig+0x7ae>
 8011610:	2320      	movs	r3, #32
 8011612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011616:	e17a      	b.n	801190e <UART_SetConfig+0x7ae>
 8011618:	2340      	movs	r3, #64	; 0x40
 801161a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161e:	e176      	b.n	801190e <UART_SetConfig+0x7ae>
 8011620:	2380      	movs	r3, #128	; 0x80
 8011622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011626:	e172      	b.n	801190e <UART_SetConfig+0x7ae>
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4a5b      	ldr	r2, [pc, #364]	; (801179c <UART_SetConfig+0x63c>)
 801162e:	4293      	cmp	r3, r2
 8011630:	d130      	bne.n	8011694 <UART_SetConfig+0x534>
 8011632:	4b58      	ldr	r3, [pc, #352]	; (8011794 <UART_SetConfig+0x634>)
 8011634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011636:	f003 0307 	and.w	r3, r3, #7
 801163a:	2b05      	cmp	r3, #5
 801163c:	d826      	bhi.n	801168c <UART_SetConfig+0x52c>
 801163e:	a201      	add	r2, pc, #4	; (adr r2, 8011644 <UART_SetConfig+0x4e4>)
 8011640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011644:	0801165d 	.word	0x0801165d
 8011648:	08011665 	.word	0x08011665
 801164c:	0801166d 	.word	0x0801166d
 8011650:	08011675 	.word	0x08011675
 8011654:	0801167d 	.word	0x0801167d
 8011658:	08011685 	.word	0x08011685
 801165c:	2300      	movs	r3, #0
 801165e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011662:	e154      	b.n	801190e <UART_SetConfig+0x7ae>
 8011664:	2304      	movs	r3, #4
 8011666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166a:	e150      	b.n	801190e <UART_SetConfig+0x7ae>
 801166c:	2308      	movs	r3, #8
 801166e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011672:	e14c      	b.n	801190e <UART_SetConfig+0x7ae>
 8011674:	2310      	movs	r3, #16
 8011676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801167a:	e148      	b.n	801190e <UART_SetConfig+0x7ae>
 801167c:	2320      	movs	r3, #32
 801167e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011682:	e144      	b.n	801190e <UART_SetConfig+0x7ae>
 8011684:	2340      	movs	r3, #64	; 0x40
 8011686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168a:	e140      	b.n	801190e <UART_SetConfig+0x7ae>
 801168c:	2380      	movs	r3, #128	; 0x80
 801168e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011692:	e13c      	b.n	801190e <UART_SetConfig+0x7ae>
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4a41      	ldr	r2, [pc, #260]	; (80117a0 <UART_SetConfig+0x640>)
 801169a:	4293      	cmp	r3, r2
 801169c:	f040 8082 	bne.w	80117a4 <UART_SetConfig+0x644>
 80116a0:	4b3c      	ldr	r3, [pc, #240]	; (8011794 <UART_SetConfig+0x634>)
 80116a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80116a8:	2b28      	cmp	r3, #40	; 0x28
 80116aa:	d86d      	bhi.n	8011788 <UART_SetConfig+0x628>
 80116ac:	a201      	add	r2, pc, #4	; (adr r2, 80116b4 <UART_SetConfig+0x554>)
 80116ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b2:	bf00      	nop
 80116b4:	08011759 	.word	0x08011759
 80116b8:	08011789 	.word	0x08011789
 80116bc:	08011789 	.word	0x08011789
 80116c0:	08011789 	.word	0x08011789
 80116c4:	08011789 	.word	0x08011789
 80116c8:	08011789 	.word	0x08011789
 80116cc:	08011789 	.word	0x08011789
 80116d0:	08011789 	.word	0x08011789
 80116d4:	08011761 	.word	0x08011761
 80116d8:	08011789 	.word	0x08011789
 80116dc:	08011789 	.word	0x08011789
 80116e0:	08011789 	.word	0x08011789
 80116e4:	08011789 	.word	0x08011789
 80116e8:	08011789 	.word	0x08011789
 80116ec:	08011789 	.word	0x08011789
 80116f0:	08011789 	.word	0x08011789
 80116f4:	08011769 	.word	0x08011769
 80116f8:	08011789 	.word	0x08011789
 80116fc:	08011789 	.word	0x08011789
 8011700:	08011789 	.word	0x08011789
 8011704:	08011789 	.word	0x08011789
 8011708:	08011789 	.word	0x08011789
 801170c:	08011789 	.word	0x08011789
 8011710:	08011789 	.word	0x08011789
 8011714:	08011771 	.word	0x08011771
 8011718:	08011789 	.word	0x08011789
 801171c:	08011789 	.word	0x08011789
 8011720:	08011789 	.word	0x08011789
 8011724:	08011789 	.word	0x08011789
 8011728:	08011789 	.word	0x08011789
 801172c:	08011789 	.word	0x08011789
 8011730:	08011789 	.word	0x08011789
 8011734:	08011779 	.word	0x08011779
 8011738:	08011789 	.word	0x08011789
 801173c:	08011789 	.word	0x08011789
 8011740:	08011789 	.word	0x08011789
 8011744:	08011789 	.word	0x08011789
 8011748:	08011789 	.word	0x08011789
 801174c:	08011789 	.word	0x08011789
 8011750:	08011789 	.word	0x08011789
 8011754:	08011781 	.word	0x08011781
 8011758:	2301      	movs	r3, #1
 801175a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801175e:	e0d6      	b.n	801190e <UART_SetConfig+0x7ae>
 8011760:	2304      	movs	r3, #4
 8011762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011766:	e0d2      	b.n	801190e <UART_SetConfig+0x7ae>
 8011768:	2308      	movs	r3, #8
 801176a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176e:	e0ce      	b.n	801190e <UART_SetConfig+0x7ae>
 8011770:	2310      	movs	r3, #16
 8011772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011776:	e0ca      	b.n	801190e <UART_SetConfig+0x7ae>
 8011778:	2320      	movs	r3, #32
 801177a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177e:	e0c6      	b.n	801190e <UART_SetConfig+0x7ae>
 8011780:	2340      	movs	r3, #64	; 0x40
 8011782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011786:	e0c2      	b.n	801190e <UART_SetConfig+0x7ae>
 8011788:	2380      	movs	r3, #128	; 0x80
 801178a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801178e:	e0be      	b.n	801190e <UART_SetConfig+0x7ae>
 8011790:	40011400 	.word	0x40011400
 8011794:	58024400 	.word	0x58024400
 8011798:	40007800 	.word	0x40007800
 801179c:	40007c00 	.word	0x40007c00
 80117a0:	40011800 	.word	0x40011800
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4aad      	ldr	r2, [pc, #692]	; (8011a60 <UART_SetConfig+0x900>)
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d176      	bne.n	801189c <UART_SetConfig+0x73c>
 80117ae:	4bad      	ldr	r3, [pc, #692]	; (8011a64 <UART_SetConfig+0x904>)
 80117b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80117b6:	2b28      	cmp	r3, #40	; 0x28
 80117b8:	d86c      	bhi.n	8011894 <UART_SetConfig+0x734>
 80117ba:	a201      	add	r2, pc, #4	; (adr r2, 80117c0 <UART_SetConfig+0x660>)
 80117bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c0:	08011865 	.word	0x08011865
 80117c4:	08011895 	.word	0x08011895
 80117c8:	08011895 	.word	0x08011895
 80117cc:	08011895 	.word	0x08011895
 80117d0:	08011895 	.word	0x08011895
 80117d4:	08011895 	.word	0x08011895
 80117d8:	08011895 	.word	0x08011895
 80117dc:	08011895 	.word	0x08011895
 80117e0:	0801186d 	.word	0x0801186d
 80117e4:	08011895 	.word	0x08011895
 80117e8:	08011895 	.word	0x08011895
 80117ec:	08011895 	.word	0x08011895
 80117f0:	08011895 	.word	0x08011895
 80117f4:	08011895 	.word	0x08011895
 80117f8:	08011895 	.word	0x08011895
 80117fc:	08011895 	.word	0x08011895
 8011800:	08011875 	.word	0x08011875
 8011804:	08011895 	.word	0x08011895
 8011808:	08011895 	.word	0x08011895
 801180c:	08011895 	.word	0x08011895
 8011810:	08011895 	.word	0x08011895
 8011814:	08011895 	.word	0x08011895
 8011818:	08011895 	.word	0x08011895
 801181c:	08011895 	.word	0x08011895
 8011820:	0801187d 	.word	0x0801187d
 8011824:	08011895 	.word	0x08011895
 8011828:	08011895 	.word	0x08011895
 801182c:	08011895 	.word	0x08011895
 8011830:	08011895 	.word	0x08011895
 8011834:	08011895 	.word	0x08011895
 8011838:	08011895 	.word	0x08011895
 801183c:	08011895 	.word	0x08011895
 8011840:	08011885 	.word	0x08011885
 8011844:	08011895 	.word	0x08011895
 8011848:	08011895 	.word	0x08011895
 801184c:	08011895 	.word	0x08011895
 8011850:	08011895 	.word	0x08011895
 8011854:	08011895 	.word	0x08011895
 8011858:	08011895 	.word	0x08011895
 801185c:	08011895 	.word	0x08011895
 8011860:	0801188d 	.word	0x0801188d
 8011864:	2301      	movs	r3, #1
 8011866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186a:	e050      	b.n	801190e <UART_SetConfig+0x7ae>
 801186c:	2304      	movs	r3, #4
 801186e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011872:	e04c      	b.n	801190e <UART_SetConfig+0x7ae>
 8011874:	2308      	movs	r3, #8
 8011876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801187a:	e048      	b.n	801190e <UART_SetConfig+0x7ae>
 801187c:	2310      	movs	r3, #16
 801187e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011882:	e044      	b.n	801190e <UART_SetConfig+0x7ae>
 8011884:	2320      	movs	r3, #32
 8011886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801188a:	e040      	b.n	801190e <UART_SetConfig+0x7ae>
 801188c:	2340      	movs	r3, #64	; 0x40
 801188e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011892:	e03c      	b.n	801190e <UART_SetConfig+0x7ae>
 8011894:	2380      	movs	r3, #128	; 0x80
 8011896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801189a:	e038      	b.n	801190e <UART_SetConfig+0x7ae>
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4a71      	ldr	r2, [pc, #452]	; (8011a68 <UART_SetConfig+0x908>)
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d130      	bne.n	8011908 <UART_SetConfig+0x7a8>
 80118a6:	4b6f      	ldr	r3, [pc, #444]	; (8011a64 <UART_SetConfig+0x904>)
 80118a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118aa:	f003 0307 	and.w	r3, r3, #7
 80118ae:	2b05      	cmp	r3, #5
 80118b0:	d826      	bhi.n	8011900 <UART_SetConfig+0x7a0>
 80118b2:	a201      	add	r2, pc, #4	; (adr r2, 80118b8 <UART_SetConfig+0x758>)
 80118b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b8:	080118d1 	.word	0x080118d1
 80118bc:	080118d9 	.word	0x080118d9
 80118c0:	080118e1 	.word	0x080118e1
 80118c4:	080118e9 	.word	0x080118e9
 80118c8:	080118f1 	.word	0x080118f1
 80118cc:	080118f9 	.word	0x080118f9
 80118d0:	2302      	movs	r3, #2
 80118d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d6:	e01a      	b.n	801190e <UART_SetConfig+0x7ae>
 80118d8:	2304      	movs	r3, #4
 80118da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118de:	e016      	b.n	801190e <UART_SetConfig+0x7ae>
 80118e0:	2308      	movs	r3, #8
 80118e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118e6:	e012      	b.n	801190e <UART_SetConfig+0x7ae>
 80118e8:	2310      	movs	r3, #16
 80118ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ee:	e00e      	b.n	801190e <UART_SetConfig+0x7ae>
 80118f0:	2320      	movs	r3, #32
 80118f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118f6:	e00a      	b.n	801190e <UART_SetConfig+0x7ae>
 80118f8:	2340      	movs	r3, #64	; 0x40
 80118fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118fe:	e006      	b.n	801190e <UART_SetConfig+0x7ae>
 8011900:	2380      	movs	r3, #128	; 0x80
 8011902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011906:	e002      	b.n	801190e <UART_SetConfig+0x7ae>
 8011908:	2380      	movs	r3, #128	; 0x80
 801190a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a55      	ldr	r2, [pc, #340]	; (8011a68 <UART_SetConfig+0x908>)
 8011914:	4293      	cmp	r3, r2
 8011916:	f040 80f8 	bne.w	8011b0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801191a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801191e:	2b20      	cmp	r3, #32
 8011920:	dc46      	bgt.n	80119b0 <UART_SetConfig+0x850>
 8011922:	2b02      	cmp	r3, #2
 8011924:	db75      	blt.n	8011a12 <UART_SetConfig+0x8b2>
 8011926:	3b02      	subs	r3, #2
 8011928:	2b1e      	cmp	r3, #30
 801192a:	d872      	bhi.n	8011a12 <UART_SetConfig+0x8b2>
 801192c:	a201      	add	r2, pc, #4	; (adr r2, 8011934 <UART_SetConfig+0x7d4>)
 801192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011932:	bf00      	nop
 8011934:	080119b7 	.word	0x080119b7
 8011938:	08011a13 	.word	0x08011a13
 801193c:	080119bf 	.word	0x080119bf
 8011940:	08011a13 	.word	0x08011a13
 8011944:	08011a13 	.word	0x08011a13
 8011948:	08011a13 	.word	0x08011a13
 801194c:	080119cf 	.word	0x080119cf
 8011950:	08011a13 	.word	0x08011a13
 8011954:	08011a13 	.word	0x08011a13
 8011958:	08011a13 	.word	0x08011a13
 801195c:	08011a13 	.word	0x08011a13
 8011960:	08011a13 	.word	0x08011a13
 8011964:	08011a13 	.word	0x08011a13
 8011968:	08011a13 	.word	0x08011a13
 801196c:	080119df 	.word	0x080119df
 8011970:	08011a13 	.word	0x08011a13
 8011974:	08011a13 	.word	0x08011a13
 8011978:	08011a13 	.word	0x08011a13
 801197c:	08011a13 	.word	0x08011a13
 8011980:	08011a13 	.word	0x08011a13
 8011984:	08011a13 	.word	0x08011a13
 8011988:	08011a13 	.word	0x08011a13
 801198c:	08011a13 	.word	0x08011a13
 8011990:	08011a13 	.word	0x08011a13
 8011994:	08011a13 	.word	0x08011a13
 8011998:	08011a13 	.word	0x08011a13
 801199c:	08011a13 	.word	0x08011a13
 80119a0:	08011a13 	.word	0x08011a13
 80119a4:	08011a13 	.word	0x08011a13
 80119a8:	08011a13 	.word	0x08011a13
 80119ac:	08011a05 	.word	0x08011a05
 80119b0:	2b40      	cmp	r3, #64	; 0x40
 80119b2:	d02a      	beq.n	8011a0a <UART_SetConfig+0x8aa>
 80119b4:	e02d      	b.n	8011a12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80119b6:	f7fa febd 	bl	800c734 <HAL_RCCEx_GetD3PCLK1Freq>
 80119ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80119bc:	e02f      	b.n	8011a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fa fecc 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80119c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119cc:	e027      	b.n	8011a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119ce:	f107 0318 	add.w	r3, r7, #24
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fb f818 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119dc:	e01f      	b.n	8011a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119de:	4b21      	ldr	r3, [pc, #132]	; (8011a64 <UART_SetConfig+0x904>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f003 0320 	and.w	r3, r3, #32
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d009      	beq.n	80119fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119ea:	4b1e      	ldr	r3, [pc, #120]	; (8011a64 <UART_SetConfig+0x904>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	08db      	lsrs	r3, r3, #3
 80119f0:	f003 0303 	and.w	r3, r3, #3
 80119f4:	4a1d      	ldr	r2, [pc, #116]	; (8011a6c <UART_SetConfig+0x90c>)
 80119f6:	fa22 f303 	lsr.w	r3, r2, r3
 80119fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119fc:	e00f      	b.n	8011a1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80119fe:	4b1b      	ldr	r3, [pc, #108]	; (8011a6c <UART_SetConfig+0x90c>)
 8011a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a02:	e00c      	b.n	8011a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a04:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <UART_SetConfig+0x910>)
 8011a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a08:	e009      	b.n	8011a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a10:	e005      	b.n	8011a1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011a12:	2300      	movs	r3, #0
 8011a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011a16:	2301      	movs	r3, #1
 8011a18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f000 81ee 	beq.w	8011e02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2a:	4a12      	ldr	r2, [pc, #72]	; (8011a74 <UART_SetConfig+0x914>)
 8011a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a30:	461a      	mov	r2, r3
 8011a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	685a      	ldr	r2, [r3, #4]
 8011a3e:	4613      	mov	r3, r2
 8011a40:	005b      	lsls	r3, r3, #1
 8011a42:	4413      	add	r3, r2
 8011a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d305      	bcc.n	8011a56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d910      	bls.n	8011a78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011a56:	2301      	movs	r3, #1
 8011a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a5c:	e1d1      	b.n	8011e02 <UART_SetConfig+0xca2>
 8011a5e:	bf00      	nop
 8011a60:	40011c00 	.word	0x40011c00
 8011a64:	58024400 	.word	0x58024400
 8011a68:	58000c00 	.word	0x58000c00
 8011a6c:	03d09000 	.word	0x03d09000
 8011a70:	003d0900 	.word	0x003d0900
 8011a74:	08018b74 	.word	0x08018b74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	60bb      	str	r3, [r7, #8]
 8011a7e:	60fa      	str	r2, [r7, #12]
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a84:	4ac0      	ldr	r2, [pc, #768]	; (8011d88 <UART_SetConfig+0xc28>)
 8011a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	603b      	str	r3, [r7, #0]
 8011a90:	607a      	str	r2, [r7, #4]
 8011a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011a9a:	f7ee fca1 	bl	80003e0 <__aeabi_uldivmod>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	f04f 0200 	mov.w	r2, #0
 8011aaa:	f04f 0300 	mov.w	r3, #0
 8011aae:	020b      	lsls	r3, r1, #8
 8011ab0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011ab4:	0202      	lsls	r2, r0, #8
 8011ab6:	6979      	ldr	r1, [r7, #20]
 8011ab8:	6849      	ldr	r1, [r1, #4]
 8011aba:	0849      	lsrs	r1, r1, #1
 8011abc:	2000      	movs	r0, #0
 8011abe:	460c      	mov	r4, r1
 8011ac0:	4605      	mov	r5, r0
 8011ac2:	eb12 0804 	adds.w	r8, r2, r4
 8011ac6:	eb43 0905 	adc.w	r9, r3, r5
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	469a      	mov	sl, r3
 8011ad2:	4693      	mov	fp, r2
 8011ad4:	4652      	mov	r2, sl
 8011ad6:	465b      	mov	r3, fp
 8011ad8:	4640      	mov	r0, r8
 8011ada:	4649      	mov	r1, r9
 8011adc:	f7ee fc80 	bl	80003e0 <__aeabi_uldivmod>
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011aee:	d308      	bcc.n	8011b02 <UART_SetConfig+0x9a2>
 8011af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011af6:	d204      	bcs.n	8011b02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011afe:	60da      	str	r2, [r3, #12]
 8011b00:	e17f      	b.n	8011e02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011b02:	2301      	movs	r3, #1
 8011b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011b08:	e17b      	b.n	8011e02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	69db      	ldr	r3, [r3, #28]
 8011b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b12:	f040 80bd 	bne.w	8011c90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011b16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011b1a:	2b20      	cmp	r3, #32
 8011b1c:	dc48      	bgt.n	8011bb0 <UART_SetConfig+0xa50>
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	db7b      	blt.n	8011c1a <UART_SetConfig+0xaba>
 8011b22:	2b20      	cmp	r3, #32
 8011b24:	d879      	bhi.n	8011c1a <UART_SetConfig+0xaba>
 8011b26:	a201      	add	r2, pc, #4	; (adr r2, 8011b2c <UART_SetConfig+0x9cc>)
 8011b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b2c:	08011bb7 	.word	0x08011bb7
 8011b30:	08011bbf 	.word	0x08011bbf
 8011b34:	08011c1b 	.word	0x08011c1b
 8011b38:	08011c1b 	.word	0x08011c1b
 8011b3c:	08011bc7 	.word	0x08011bc7
 8011b40:	08011c1b 	.word	0x08011c1b
 8011b44:	08011c1b 	.word	0x08011c1b
 8011b48:	08011c1b 	.word	0x08011c1b
 8011b4c:	08011bd7 	.word	0x08011bd7
 8011b50:	08011c1b 	.word	0x08011c1b
 8011b54:	08011c1b 	.word	0x08011c1b
 8011b58:	08011c1b 	.word	0x08011c1b
 8011b5c:	08011c1b 	.word	0x08011c1b
 8011b60:	08011c1b 	.word	0x08011c1b
 8011b64:	08011c1b 	.word	0x08011c1b
 8011b68:	08011c1b 	.word	0x08011c1b
 8011b6c:	08011be7 	.word	0x08011be7
 8011b70:	08011c1b 	.word	0x08011c1b
 8011b74:	08011c1b 	.word	0x08011c1b
 8011b78:	08011c1b 	.word	0x08011c1b
 8011b7c:	08011c1b 	.word	0x08011c1b
 8011b80:	08011c1b 	.word	0x08011c1b
 8011b84:	08011c1b 	.word	0x08011c1b
 8011b88:	08011c1b 	.word	0x08011c1b
 8011b8c:	08011c1b 	.word	0x08011c1b
 8011b90:	08011c1b 	.word	0x08011c1b
 8011b94:	08011c1b 	.word	0x08011c1b
 8011b98:	08011c1b 	.word	0x08011c1b
 8011b9c:	08011c1b 	.word	0x08011c1b
 8011ba0:	08011c1b 	.word	0x08011c1b
 8011ba4:	08011c1b 	.word	0x08011c1b
 8011ba8:	08011c1b 	.word	0x08011c1b
 8011bac:	08011c0d 	.word	0x08011c0d
 8011bb0:	2b40      	cmp	r3, #64	; 0x40
 8011bb2:	d02e      	beq.n	8011c12 <UART_SetConfig+0xab2>
 8011bb4:	e031      	b.n	8011c1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bb6:	f7f8 ff1f 	bl	800a9f8 <HAL_RCC_GetPCLK1Freq>
 8011bba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011bbc:	e033      	b.n	8011c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bbe:	f7f8 ff31 	bl	800aa24 <HAL_RCC_GetPCLK2Freq>
 8011bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011bc4:	e02f      	b.n	8011c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fa fdc8 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bd4:	e027      	b.n	8011c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011bd6:	f107 0318 	add.w	r3, r7, #24
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fa ff14 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011be4:	e01f      	b.n	8011c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011be6:	4b69      	ldr	r3, [pc, #420]	; (8011d8c <UART_SetConfig+0xc2c>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f003 0320 	and.w	r3, r3, #32
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d009      	beq.n	8011c06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011bf2:	4b66      	ldr	r3, [pc, #408]	; (8011d8c <UART_SetConfig+0xc2c>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	08db      	lsrs	r3, r3, #3
 8011bf8:	f003 0303 	and.w	r3, r3, #3
 8011bfc:	4a64      	ldr	r2, [pc, #400]	; (8011d90 <UART_SetConfig+0xc30>)
 8011bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8011c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c04:	e00f      	b.n	8011c26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011c06:	4b62      	ldr	r3, [pc, #392]	; (8011d90 <UART_SetConfig+0xc30>)
 8011c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c0a:	e00c      	b.n	8011c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c0c:	4b61      	ldr	r3, [pc, #388]	; (8011d94 <UART_SetConfig+0xc34>)
 8011c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c10:	e009      	b.n	8011c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c18:	e005      	b.n	8011c26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f000 80ea 	beq.w	8011e02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c32:	4a55      	ldr	r2, [pc, #340]	; (8011d88 <UART_SetConfig+0xc28>)
 8011c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c38:	461a      	mov	r2, r3
 8011c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c40:	005a      	lsls	r2, r3, #1
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	085b      	lsrs	r3, r3, #1
 8011c48:	441a      	add	r2, r3
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	2b0f      	cmp	r3, #15
 8011c58:	d916      	bls.n	8011c88 <UART_SetConfig+0xb28>
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c60:	d212      	bcs.n	8011c88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	f023 030f 	bic.w	r3, r3, #15
 8011c6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6e:	085b      	lsrs	r3, r3, #1
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	f003 0307 	and.w	r3, r3, #7
 8011c76:	b29a      	uxth	r2, r3
 8011c78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011c84:	60da      	str	r2, [r3, #12]
 8011c86:	e0bc      	b.n	8011e02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011c88:	2301      	movs	r3, #1
 8011c8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c8e:	e0b8      	b.n	8011e02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c94:	2b20      	cmp	r3, #32
 8011c96:	dc4b      	bgt.n	8011d30 <UART_SetConfig+0xbd0>
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	f2c0 8087 	blt.w	8011dac <UART_SetConfig+0xc4c>
 8011c9e:	2b20      	cmp	r3, #32
 8011ca0:	f200 8084 	bhi.w	8011dac <UART_SetConfig+0xc4c>
 8011ca4:	a201      	add	r2, pc, #4	; (adr r2, 8011cac <UART_SetConfig+0xb4c>)
 8011ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011caa:	bf00      	nop
 8011cac:	08011d37 	.word	0x08011d37
 8011cb0:	08011d3f 	.word	0x08011d3f
 8011cb4:	08011dad 	.word	0x08011dad
 8011cb8:	08011dad 	.word	0x08011dad
 8011cbc:	08011d47 	.word	0x08011d47
 8011cc0:	08011dad 	.word	0x08011dad
 8011cc4:	08011dad 	.word	0x08011dad
 8011cc8:	08011dad 	.word	0x08011dad
 8011ccc:	08011d57 	.word	0x08011d57
 8011cd0:	08011dad 	.word	0x08011dad
 8011cd4:	08011dad 	.word	0x08011dad
 8011cd8:	08011dad 	.word	0x08011dad
 8011cdc:	08011dad 	.word	0x08011dad
 8011ce0:	08011dad 	.word	0x08011dad
 8011ce4:	08011dad 	.word	0x08011dad
 8011ce8:	08011dad 	.word	0x08011dad
 8011cec:	08011d67 	.word	0x08011d67
 8011cf0:	08011dad 	.word	0x08011dad
 8011cf4:	08011dad 	.word	0x08011dad
 8011cf8:	08011dad 	.word	0x08011dad
 8011cfc:	08011dad 	.word	0x08011dad
 8011d00:	08011dad 	.word	0x08011dad
 8011d04:	08011dad 	.word	0x08011dad
 8011d08:	08011dad 	.word	0x08011dad
 8011d0c:	08011dad 	.word	0x08011dad
 8011d10:	08011dad 	.word	0x08011dad
 8011d14:	08011dad 	.word	0x08011dad
 8011d18:	08011dad 	.word	0x08011dad
 8011d1c:	08011dad 	.word	0x08011dad
 8011d20:	08011dad 	.word	0x08011dad
 8011d24:	08011dad 	.word	0x08011dad
 8011d28:	08011dad 	.word	0x08011dad
 8011d2c:	08011d9f 	.word	0x08011d9f
 8011d30:	2b40      	cmp	r3, #64	; 0x40
 8011d32:	d037      	beq.n	8011da4 <UART_SetConfig+0xc44>
 8011d34:	e03a      	b.n	8011dac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d36:	f7f8 fe5f 	bl	800a9f8 <HAL_RCC_GetPCLK1Freq>
 8011d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d3c:	e03c      	b.n	8011db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d3e:	f7f8 fe71 	bl	800aa24 <HAL_RCC_GetPCLK2Freq>
 8011d42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d44:	e038      	b.n	8011db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fa fd08 	bl	800c760 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d54:	e030      	b.n	8011db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d56:	f107 0318 	add.w	r3, r7, #24
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fa fe54 	bl	800ca08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d64:	e028      	b.n	8011db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d66:	4b09      	ldr	r3, [pc, #36]	; (8011d8c <UART_SetConfig+0xc2c>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f003 0320 	and.w	r3, r3, #32
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d012      	beq.n	8011d98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d72:	4b06      	ldr	r3, [pc, #24]	; (8011d8c <UART_SetConfig+0xc2c>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	08db      	lsrs	r3, r3, #3
 8011d78:	f003 0303 	and.w	r3, r3, #3
 8011d7c:	4a04      	ldr	r2, [pc, #16]	; (8011d90 <UART_SetConfig+0xc30>)
 8011d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8011d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d84:	e018      	b.n	8011db8 <UART_SetConfig+0xc58>
 8011d86:	bf00      	nop
 8011d88:	08018b74 	.word	0x08018b74
 8011d8c:	58024400 	.word	0x58024400
 8011d90:	03d09000 	.word	0x03d09000
 8011d94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011d98:	4b24      	ldr	r3, [pc, #144]	; (8011e2c <UART_SetConfig+0xccc>)
 8011d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d9c:	e00c      	b.n	8011db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d9e:	4b24      	ldr	r3, [pc, #144]	; (8011e30 <UART_SetConfig+0xcd0>)
 8011da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011da2:	e009      	b.n	8011db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011daa:	e005      	b.n	8011db8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011dac:	2300      	movs	r3, #0
 8011dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011db6:	bf00      	nop
    }

    if (pclk != 0U)
 8011db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d021      	beq.n	8011e02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc2:	4a1c      	ldr	r2, [pc, #112]	; (8011e34 <UART_SetConfig+0xcd4>)
 8011dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	085b      	lsrs	r3, r3, #1
 8011dd6:	441a      	add	r2, r3
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011de0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de4:	2b0f      	cmp	r3, #15
 8011de6:	d909      	bls.n	8011dfc <UART_SetConfig+0xc9c>
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011dee:	d205      	bcs.n	8011dfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	60da      	str	r2, [r3, #12]
 8011dfa:	e002      	b.n	8011e02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	2201      	movs	r2, #1
 8011e06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	2200      	movs	r2, #0
 8011e16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011e1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3748      	adds	r7, #72	; 0x48
 8011e26:	46bd      	mov	sp, r7
 8011e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e2c:	03d09000 	.word	0x03d09000
 8011e30:	003d0900 	.word	0x003d0900
 8011e34:	08018b74 	.word	0x08018b74

08011e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e44:	f003 0301 	and.w	r3, r3, #1
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00a      	beq.n	8011e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	430a      	orrs	r2, r1
 8011e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e66:	f003 0302 	and.w	r3, r3, #2
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00a      	beq.n	8011e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	430a      	orrs	r2, r1
 8011e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e88:	f003 0304 	and.w	r3, r3, #4
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00a      	beq.n	8011ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	430a      	orrs	r2, r1
 8011ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eaa:	f003 0308 	and.w	r3, r3, #8
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d00a      	beq.n	8011ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	430a      	orrs	r2, r1
 8011ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ecc:	f003 0310 	and.w	r3, r3, #16
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00a      	beq.n	8011eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	430a      	orrs	r2, r1
 8011ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eee:	f003 0320 	and.w	r3, r3, #32
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d00a      	beq.n	8011f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	689b      	ldr	r3, [r3, #8]
 8011efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	430a      	orrs	r2, r1
 8011f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d01a      	beq.n	8011f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	430a      	orrs	r2, r1
 8011f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f36:	d10a      	bne.n	8011f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	430a      	orrs	r2, r1
 8011f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d00a      	beq.n	8011f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	430a      	orrs	r2, r1
 8011f6e:	605a      	str	r2, [r3, #4]
  }
}
 8011f70:	bf00      	nop
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr

08011f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b098      	sub	sp, #96	; 0x60
 8011f80:	af02      	add	r7, sp, #8
 8011f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2200      	movs	r2, #0
 8011f88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011f8c:	f7f1 fe74 	bl	8003c78 <HAL_GetTick>
 8011f90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f003 0308 	and.w	r3, r3, #8
 8011f9c:	2b08      	cmp	r3, #8
 8011f9e:	d12f      	bne.n	8012000 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011fa4:	9300      	str	r3, [sp, #0]
 8011fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fa8:	2200      	movs	r2, #0
 8011faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 f88e 	bl	80120d0 <UART_WaitOnFlagUntilTimeout>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d022      	beq.n	8012000 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc2:	e853 3f00 	ldrex	r3, [r3]
 8011fc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011fce:	653b      	str	r3, [r7, #80]	; 0x50
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8011fda:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fe0:	e841 2300 	strex	r3, r2, [r1]
 8011fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d1e6      	bne.n	8011fba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2220      	movs	r2, #32
 8011ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ffc:	2303      	movs	r3, #3
 8011ffe:	e063      	b.n	80120c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f003 0304 	and.w	r3, r3, #4
 801200a:	2b04      	cmp	r3, #4
 801200c:	d149      	bne.n	80120a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801200e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012016:	2200      	movs	r2, #0
 8012018:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 f857 	bl	80120d0 <UART_WaitOnFlagUntilTimeout>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d03c      	beq.n	80120a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012030:	e853 3f00 	ldrex	r3, [r3]
 8012034:	623b      	str	r3, [r7, #32]
   return(result);
 8012036:	6a3b      	ldr	r3, [r7, #32]
 8012038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801203c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	461a      	mov	r2, r3
 8012044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012046:	633b      	str	r3, [r7, #48]	; 0x30
 8012048:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801204a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801204c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801204e:	e841 2300 	strex	r3, r2, [r1]
 8012052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1e6      	bne.n	8012028 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	3308      	adds	r3, #8
 8012060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	e853 3f00 	ldrex	r3, [r3]
 8012068:	60fb      	str	r3, [r7, #12]
   return(result);
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f023 0301 	bic.w	r3, r3, #1
 8012070:	64bb      	str	r3, [r7, #72]	; 0x48
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	3308      	adds	r3, #8
 8012078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801207a:	61fa      	str	r2, [r7, #28]
 801207c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801207e:	69b9      	ldr	r1, [r7, #24]
 8012080:	69fa      	ldr	r2, [r7, #28]
 8012082:	e841 2300 	strex	r3, r2, [r1]
 8012086:	617b      	str	r3, [r7, #20]
   return(result);
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d1e5      	bne.n	801205a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2220      	movs	r2, #32
 8012092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2200      	movs	r2, #0
 801209a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801209e:	2303      	movs	r3, #3
 80120a0:	e012      	b.n	80120c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2220      	movs	r2, #32
 80120a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2220      	movs	r2, #32
 80120ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80120c6:	2300      	movs	r3, #0
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3758      	adds	r7, #88	; 0x58
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	60b9      	str	r1, [r7, #8]
 80120da:	603b      	str	r3, [r7, #0]
 80120dc:	4613      	mov	r3, r2
 80120de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80120e0:	e049      	b.n	8012176 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80120e2:	69bb      	ldr	r3, [r7, #24]
 80120e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e8:	d045      	beq.n	8012176 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80120ea:	f7f1 fdc5 	bl	8003c78 <HAL_GetTick>
 80120ee:	4602      	mov	r2, r0
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	1ad3      	subs	r3, r2, r3
 80120f4:	69ba      	ldr	r2, [r7, #24]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d302      	bcc.n	8012100 <UART_WaitOnFlagUntilTimeout+0x30>
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d101      	bne.n	8012104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012100:	2303      	movs	r3, #3
 8012102:	e048      	b.n	8012196 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f003 0304 	and.w	r3, r3, #4
 801210e:	2b00      	cmp	r3, #0
 8012110:	d031      	beq.n	8012176 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	69db      	ldr	r3, [r3, #28]
 8012118:	f003 0308 	and.w	r3, r3, #8
 801211c:	2b08      	cmp	r3, #8
 801211e:	d110      	bne.n	8012142 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	2208      	movs	r2, #8
 8012126:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	f000 f839 	bl	80121a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2208      	movs	r2, #8
 8012132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2200      	movs	r2, #0
 801213a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801213e:	2301      	movs	r3, #1
 8012140:	e029      	b.n	8012196 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	69db      	ldr	r3, [r3, #28]
 8012148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801214c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012150:	d111      	bne.n	8012176 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801215a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f000 f81f 	bl	80121a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2220      	movs	r2, #32
 8012166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2200      	movs	r2, #0
 801216e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012172:	2303      	movs	r3, #3
 8012174:	e00f      	b.n	8012196 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	69da      	ldr	r2, [r3, #28]
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	4013      	ands	r3, r2
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	429a      	cmp	r2, r3
 8012184:	bf0c      	ite	eq
 8012186:	2301      	moveq	r3, #1
 8012188:	2300      	movne	r3, #0
 801218a:	b2db      	uxtb	r3, r3
 801218c:	461a      	mov	r2, r3
 801218e:	79fb      	ldrb	r3, [r7, #7]
 8012190:	429a      	cmp	r2, r3
 8012192:	d0a6      	beq.n	80120e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012194:	2300      	movs	r3, #0
}
 8012196:	4618      	mov	r0, r3
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
	...

080121a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80121a0:	b480      	push	{r7}
 80121a2:	b095      	sub	sp, #84	; 0x54
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b0:	e853 3f00 	ldrex	r3, [r3]
 80121b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80121b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80121bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	461a      	mov	r2, r3
 80121c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c6:	643b      	str	r3, [r7, #64]	; 0x40
 80121c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80121ce:	e841 2300 	strex	r3, r2, [r1]
 80121d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80121d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d1e6      	bne.n	80121a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	3308      	adds	r3, #8
 80121e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e2:	6a3b      	ldr	r3, [r7, #32]
 80121e4:	e853 3f00 	ldrex	r3, [r3]
 80121e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80121ea:	69fa      	ldr	r2, [r7, #28]
 80121ec:	4b1e      	ldr	r3, [pc, #120]	; (8012268 <UART_EndRxTransfer+0xc8>)
 80121ee:	4013      	ands	r3, r2
 80121f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	3308      	adds	r3, #8
 80121f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012202:	e841 2300 	strex	r3, r2, [r1]
 8012206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220a:	2b00      	cmp	r3, #0
 801220c:	d1e5      	bne.n	80121da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012212:	2b01      	cmp	r3, #1
 8012214:	d118      	bne.n	8012248 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	e853 3f00 	ldrex	r3, [r3]
 8012222:	60bb      	str	r3, [r7, #8]
   return(result);
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	f023 0310 	bic.w	r3, r3, #16
 801222a:	647b      	str	r3, [r7, #68]	; 0x44
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	461a      	mov	r2, r3
 8012232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012234:	61bb      	str	r3, [r7, #24]
 8012236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012238:	6979      	ldr	r1, [r7, #20]
 801223a:	69ba      	ldr	r2, [r7, #24]
 801223c:	e841 2300 	strex	r3, r2, [r1]
 8012240:	613b      	str	r3, [r7, #16]
   return(result);
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d1e6      	bne.n	8012216 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2220      	movs	r2, #32
 801224c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2200      	movs	r2, #0
 8012254:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801225c:	bf00      	nop
 801225e:	3754      	adds	r7, #84	; 0x54
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr
 8012268:	effffffe 	.word	0xeffffffe

0801226c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801226c:	b480      	push	{r7}
 801226e:	b085      	sub	sp, #20
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801227a:	2b01      	cmp	r3, #1
 801227c:	d101      	bne.n	8012282 <HAL_UARTEx_DisableFifoMode+0x16>
 801227e:	2302      	movs	r3, #2
 8012280:	e027      	b.n	80122d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2201      	movs	r2, #1
 8012286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2224      	movs	r2, #36	; 0x24
 801228e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f022 0201 	bic.w	r2, r2, #1
 80122a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80122b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2200      	movs	r2, #0
 80122b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	68fa      	ldr	r2, [r7, #12]
 80122be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2220      	movs	r2, #32
 80122c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80122d0:	2300      	movs	r3, #0
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3714      	adds	r7, #20
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b084      	sub	sp, #16
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	d101      	bne.n	80122f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80122f2:	2302      	movs	r3, #2
 80122f4:	e02d      	b.n	8012352 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2201      	movs	r2, #1
 80122fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2224      	movs	r2, #36	; 0x24
 8012302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f022 0201 	bic.w	r2, r2, #1
 801231c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	689b      	ldr	r3, [r3, #8]
 8012324:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	683a      	ldr	r2, [r7, #0]
 801232e:	430a      	orrs	r2, r1
 8012330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 f850 	bl	80123d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2220      	movs	r2, #32
 8012344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012350:	2300      	movs	r3, #0
}
 8012352:	4618      	mov	r0, r3
 8012354:	3710      	adds	r7, #16
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}

0801235a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801235a:	b580      	push	{r7, lr}
 801235c:	b084      	sub	sp, #16
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
 8012362:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801236a:	2b01      	cmp	r3, #1
 801236c:	d101      	bne.n	8012372 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801236e:	2302      	movs	r3, #2
 8012370:	e02d      	b.n	80123ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2201      	movs	r2, #1
 8012376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2224      	movs	r2, #36	; 0x24
 801237e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	f022 0201 	bic.w	r2, r2, #1
 8012398:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	689b      	ldr	r3, [r3, #8]
 80123a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	683a      	ldr	r2, [r7, #0]
 80123aa:	430a      	orrs	r2, r1
 80123ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 f812 	bl	80123d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2220      	movs	r2, #32
 80123c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3710      	adds	r7, #16
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80123d8:	b480      	push	{r7}
 80123da:	b085      	sub	sp, #20
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d108      	bne.n	80123fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2201      	movs	r2, #1
 80123ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2201      	movs	r2, #1
 80123f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80123f8:	e031      	b.n	801245e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80123fa:	2310      	movs	r3, #16
 80123fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80123fe:	2310      	movs	r3, #16
 8012400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	0e5b      	lsrs	r3, r3, #25
 801240a:	b2db      	uxtb	r3, r3
 801240c:	f003 0307 	and.w	r3, r3, #7
 8012410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	689b      	ldr	r3, [r3, #8]
 8012418:	0f5b      	lsrs	r3, r3, #29
 801241a:	b2db      	uxtb	r3, r3
 801241c:	f003 0307 	and.w	r3, r3, #7
 8012420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012422:	7bbb      	ldrb	r3, [r7, #14]
 8012424:	7b3a      	ldrb	r2, [r7, #12]
 8012426:	4911      	ldr	r1, [pc, #68]	; (801246c <UARTEx_SetNbDataToProcess+0x94>)
 8012428:	5c8a      	ldrb	r2, [r1, r2]
 801242a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801242e:	7b3a      	ldrb	r2, [r7, #12]
 8012430:	490f      	ldr	r1, [pc, #60]	; (8012470 <UARTEx_SetNbDataToProcess+0x98>)
 8012432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012434:	fb93 f3f2 	sdiv	r3, r3, r2
 8012438:	b29a      	uxth	r2, r3
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012440:	7bfb      	ldrb	r3, [r7, #15]
 8012442:	7b7a      	ldrb	r2, [r7, #13]
 8012444:	4909      	ldr	r1, [pc, #36]	; (801246c <UARTEx_SetNbDataToProcess+0x94>)
 8012446:	5c8a      	ldrb	r2, [r1, r2]
 8012448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801244c:	7b7a      	ldrb	r2, [r7, #13]
 801244e:	4908      	ldr	r1, [pc, #32]	; (8012470 <UARTEx_SetNbDataToProcess+0x98>)
 8012450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012452:	fb93 f3f2 	sdiv	r3, r3, r2
 8012456:	b29a      	uxth	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801245e:	bf00      	nop
 8012460:	3714      	adds	r7, #20
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr
 801246a:	bf00      	nop
 801246c:	08018b8c 	.word	0x08018b8c
 8012470:	08018b94 	.word	0x08018b94

08012474 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012474:	b084      	sub	sp, #16
 8012476:	b480      	push	{r7}
 8012478:	b085      	sub	sp, #20
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
 801247e:	f107 001c 	add.w	r0, r7, #28
 8012482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801248a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801248c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801248e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012492:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012494:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012496:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801249a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801249c:	68fa      	ldr	r2, [r7, #12]
 801249e:	4313      	orrs	r3, r2
 80124a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	685a      	ldr	r2, [r3, #4]
 80124a6:	4b07      	ldr	r3, [pc, #28]	; (80124c4 <SDMMC_Init+0x50>)
 80124a8:	4013      	ands	r3, r2
 80124aa:	68fa      	ldr	r2, [r7, #12]
 80124ac:	431a      	orrs	r2, r3
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80124b2:	2300      	movs	r3, #0
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3714      	adds	r7, #20
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	b004      	add	sp, #16
 80124c0:	4770      	bx	lr
 80124c2:	bf00      	nop
 80124c4:	ffc02c00 	.word	0xffc02c00

080124c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b083      	sub	sp, #12
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr

080124e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80124e2:	b480      	push	{r7}
 80124e4:	b083      	sub	sp, #12
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
 80124ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80124f6:	2300      	movs	r3, #0
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	370c      	adds	r7, #12
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f043 0203 	orr.w	r2, r3, #3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012518:	2300      	movs	r3, #0
}
 801251a:	4618      	mov	r0, r3
 801251c:	370c      	adds	r7, #12
 801251e:	46bd      	mov	sp, r7
 8012520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012524:	4770      	bx	lr

08012526 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012526:	b480      	push	{r7}
 8012528:	b083      	sub	sp, #12
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f003 0303 	and.w	r3, r3, #3
}
 8012536:	4618      	mov	r0, r3
 8012538:	370c      	adds	r7, #12
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
	...

08012544 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801254e:	2300      	movs	r3, #0
 8012550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012562:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012568:	431a      	orrs	r2, r3
                       Command->CPSM);
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801256e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012570:	68fa      	ldr	r2, [r7, #12]
 8012572:	4313      	orrs	r3, r2
 8012574:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	68da      	ldr	r2, [r3, #12]
 801257a:	4b06      	ldr	r3, [pc, #24]	; (8012594 <SDMMC_SendCommand+0x50>)
 801257c:	4013      	ands	r3, r2
 801257e:	68fa      	ldr	r2, [r7, #12]
 8012580:	431a      	orrs	r2, r3
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012586:	2300      	movs	r3, #0
}
 8012588:	4618      	mov	r0, r3
 801258a:	3714      	adds	r7, #20
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr
 8012594:	fffee0c0 	.word	0xfffee0c0

08012598 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	691b      	ldr	r3, [r3, #16]
 80125a4:	b2db      	uxtb	r3, r3
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	370c      	adds	r7, #12
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr

080125b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80125b2:	b480      	push	{r7}
 80125b4:	b085      	sub	sp, #20
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
 80125ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	3314      	adds	r3, #20
 80125c0:	461a      	mov	r2, r3
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	4413      	add	r3, r2
 80125c6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3714      	adds	r7, #20
 80125d0:	46bd      	mov	sp, r7
 80125d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d6:	4770      	bx	lr

080125d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80125d8:	b480      	push	{r7}
 80125da:	b085      	sub	sp, #20
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80125e2:	2300      	movs	r3, #0
 80125e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	685a      	ldr	r2, [r3, #4]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80125fe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012604:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801260a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	4313      	orrs	r3, r2
 8012610:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012616:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	431a      	orrs	r2, r3
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012622:	2300      	movs	r3, #0

}
 8012624:	4618      	mov	r0, r3
 8012626:	3714      	adds	r7, #20
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b088      	sub	sp, #32
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801263e:	2310      	movs	r3, #16
 8012640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012648:	2300      	movs	r3, #0
 801264a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801264c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012650:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012652:	f107 0308 	add.w	r3, r7, #8
 8012656:	4619      	mov	r1, r3
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f7ff ff73 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012662:	2110      	movs	r1, #16
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 fa5f 	bl	8012b28 <SDMMC_GetCmdResp1>
 801266a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801266c:	69fb      	ldr	r3, [r7, #28]
}
 801266e:	4618      	mov	r0, r3
 8012670:	3720      	adds	r7, #32
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}

08012676 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012676:	b580      	push	{r7, lr}
 8012678:	b088      	sub	sp, #32
 801267a:	af00      	add	r7, sp, #0
 801267c:	6078      	str	r0, [r7, #4]
 801267e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012684:	2311      	movs	r3, #17
 8012686:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012688:	f44f 7380 	mov.w	r3, #256	; 0x100
 801268c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801268e:	2300      	movs	r3, #0
 8012690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012696:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012698:	f107 0308 	add.w	r3, r7, #8
 801269c:	4619      	mov	r1, r3
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ff ff50 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80126a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80126a8:	2111      	movs	r1, #17
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f000 fa3c 	bl	8012b28 <SDMMC_GetCmdResp1>
 80126b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126b2:	69fb      	ldr	r3, [r7, #28]
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3720      	adds	r7, #32
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b088      	sub	sp, #32
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80126ca:	2312      	movs	r3, #18
 80126cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126d4:	2300      	movs	r3, #0
 80126d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126de:	f107 0308 	add.w	r3, r7, #8
 80126e2:	4619      	mov	r1, r3
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff ff2d 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80126ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80126ee:	2112      	movs	r1, #18
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 fa19 	bl	8012b28 <SDMMC_GetCmdResp1>
 80126f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126f8:	69fb      	ldr	r3, [r7, #28]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3720      	adds	r7, #32
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b088      	sub	sp, #32
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
 801270a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012710:	2318      	movs	r3, #24
 8012712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801271a:	2300      	movs	r3, #0
 801271c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012722:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012724:	f107 0308 	add.w	r3, r7, #8
 8012728:	4619      	mov	r1, r3
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f7ff ff0a 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012730:	f241 3288 	movw	r2, #5000	; 0x1388
 8012734:	2118      	movs	r1, #24
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f000 f9f6 	bl	8012b28 <SDMMC_GetCmdResp1>
 801273c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801273e:	69fb      	ldr	r3, [r7, #28]
}
 8012740:	4618      	mov	r0, r3
 8012742:	3720      	adds	r7, #32
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b088      	sub	sp, #32
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012756:	2319      	movs	r3, #25
 8012758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801275a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801275e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012760:	2300      	movs	r3, #0
 8012762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801276a:	f107 0308 	add.w	r3, r7, #8
 801276e:	4619      	mov	r1, r3
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7ff fee7 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012776:	f241 3288 	movw	r2, #5000	; 0x1388
 801277a:	2119      	movs	r1, #25
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 f9d3 	bl	8012b28 <SDMMC_GetCmdResp1>
 8012782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012784:	69fb      	ldr	r3, [r7, #28]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3720      	adds	r7, #32
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
	...

08012790 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b088      	sub	sp, #32
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012798:	2300      	movs	r3, #0
 801279a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801279c:	230c      	movs	r3, #12
 801279e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127a6:	2300      	movs	r3, #0
 80127a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127ae:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	68db      	ldr	r3, [r3, #12]
 80127b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127c8:	f107 0308 	add.w	r3, r7, #8
 80127cc:	4619      	mov	r1, r3
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f7ff feb8 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80127d4:	4a0b      	ldr	r2, [pc, #44]	; (8012804 <SDMMC_CmdStopTransfer+0x74>)
 80127d6:	210c      	movs	r1, #12
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 f9a5 	bl	8012b28 <SDMMC_GetCmdResp1>
 80127de:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80127ec:	69fb      	ldr	r3, [r7, #28]
 80127ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80127f2:	d101      	bne.n	80127f8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80127f4:	2300      	movs	r3, #0
 80127f6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80127f8:	69fb      	ldr	r3, [r7, #28]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3720      	adds	r7, #32
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	05f5e100 	.word	0x05f5e100

08012808 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b088      	sub	sp, #32
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012816:	2307      	movs	r3, #7
 8012818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801281a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801281e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012820:	2300      	movs	r3, #0
 8012822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801282a:	f107 0308 	add.w	r3, r7, #8
 801282e:	4619      	mov	r1, r3
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f7ff fe87 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012836:	f241 3288 	movw	r2, #5000	; 0x1388
 801283a:	2107      	movs	r1, #7
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 f973 	bl	8012b28 <SDMMC_GetCmdResp1>
 8012842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012844:	69fb      	ldr	r3, [r7, #28]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3720      	adds	r7, #32
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801284e:	b580      	push	{r7, lr}
 8012850:	b088      	sub	sp, #32
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012856:	2300      	movs	r3, #0
 8012858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801285a:	2300      	movs	r3, #0
 801285c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801285e:	2300      	movs	r3, #0
 8012860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012862:	2300      	movs	r3, #0
 8012864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801286a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801286c:	f107 0308 	add.w	r3, r7, #8
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff fe66 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 fb97 	bl	8012fac <SDMMC_GetCmdError>
 801287e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012880:	69fb      	ldr	r3, [r7, #28]
}
 8012882:	4618      	mov	r0, r3
 8012884:	3720      	adds	r7, #32
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b088      	sub	sp, #32
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012892:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012898:	2308      	movs	r3, #8
 801289a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801289c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128a2:	2300      	movs	r3, #0
 80128a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128ac:	f107 0308 	add.w	r3, r7, #8
 80128b0:	4619      	mov	r1, r3
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7ff fe46 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 fb29 	bl	8012f10 <SDMMC_GetCmdResp7>
 80128be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128c0:	69fb      	ldr	r3, [r7, #28]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3720      	adds	r7, #32
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}

080128ca <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80128ca:	b580      	push	{r7, lr}
 80128cc:	b088      	sub	sp, #32
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	6078      	str	r0, [r7, #4]
 80128d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80128d8:	2337      	movs	r3, #55	; 0x37
 80128da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128e2:	2300      	movs	r3, #0
 80128e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128ec:	f107 0308 	add.w	r3, r7, #8
 80128f0:	4619      	mov	r1, r3
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f7ff fe26 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80128f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80128fc:	2137      	movs	r1, #55	; 0x37
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f000 f912 	bl	8012b28 <SDMMC_GetCmdResp1>
 8012904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012906:	69fb      	ldr	r3, [r7, #28]
}
 8012908:	4618      	mov	r0, r3
 801290a:	3720      	adds	r7, #32
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b088      	sub	sp, #32
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801291e:	2329      	movs	r3, #41	; 0x29
 8012920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012928:	2300      	movs	r3, #0
 801292a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012932:	f107 0308 	add.w	r3, r7, #8
 8012936:	4619      	mov	r1, r3
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f7ff fe03 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f000 fa2e 	bl	8012da0 <SDMMC_GetCmdResp3>
 8012944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012946:	69fb      	ldr	r3, [r7, #28]
}
 8012948:	4618      	mov	r0, r3
 801294a:	3720      	adds	r7, #32
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b088      	sub	sp, #32
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801295e:	2306      	movs	r3, #6
 8012960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012968:	2300      	movs	r3, #0
 801296a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012970:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012972:	f107 0308 	add.w	r3, r7, #8
 8012976:	4619      	mov	r1, r3
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f7ff fde3 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012982:	2106      	movs	r1, #6
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f000 f8cf 	bl	8012b28 <SDMMC_GetCmdResp1>
 801298a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801298c:	69fb      	ldr	r3, [r7, #28]
}
 801298e:	4618      	mov	r0, r3
 8012990:	3720      	adds	r7, #32
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012996:	b580      	push	{r7, lr}
 8012998:	b088      	sub	sp, #32
 801299a:	af00      	add	r7, sp, #0
 801299c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801299e:	2300      	movs	r3, #0
 80129a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80129a2:	2333      	movs	r3, #51	; 0x33
 80129a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129ac:	2300      	movs	r3, #0
 80129ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129b6:	f107 0308 	add.w	r3, r7, #8
 80129ba:	4619      	mov	r1, r3
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7ff fdc1 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80129c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80129c6:	2133      	movs	r1, #51	; 0x33
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 f8ad 	bl	8012b28 <SDMMC_GetCmdResp1>
 80129ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129d0:	69fb      	ldr	r3, [r7, #28]
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	3720      	adds	r7, #32
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}

080129da <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80129da:	b580      	push	{r7, lr}
 80129dc:	b088      	sub	sp, #32
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80129e2:	2300      	movs	r3, #0
 80129e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80129e6:	2302      	movs	r3, #2
 80129e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80129ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80129ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129f0:	2300      	movs	r3, #0
 80129f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129fa:	f107 0308 	add.w	r3, r7, #8
 80129fe:	4619      	mov	r1, r3
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f7ff fd9f 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 f980 	bl	8012d0c <SDMMC_GetCmdResp2>
 8012a0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a0e:	69fb      	ldr	r3, [r7, #28]
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3720      	adds	r7, #32
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b088      	sub	sp, #32
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012a26:	2309      	movs	r3, #9
 8012a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a30:	2300      	movs	r3, #0
 8012a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a3a:	f107 0308 	add.w	r3, r7, #8
 8012a3e:	4619      	mov	r1, r3
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff fd7f 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 f960 	bl	8012d0c <SDMMC_GetCmdResp2>
 8012a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a4e:	69fb      	ldr	r3, [r7, #28]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3720      	adds	r7, #32
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b088      	sub	sp, #32
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012a62:	2300      	movs	r3, #0
 8012a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012a66:	2303      	movs	r3, #3
 8012a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a70:	2300      	movs	r3, #0
 8012a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a7a:	f107 0308 	add.w	r3, r7, #8
 8012a7e:	4619      	mov	r1, r3
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7ff fd5f 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012a86:	683a      	ldr	r2, [r7, #0]
 8012a88:	2103      	movs	r1, #3
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f000 f9c8 	bl	8012e20 <SDMMC_GetCmdResp6>
 8012a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a92:	69fb      	ldr	r3, [r7, #28]
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3720      	adds	r7, #32
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b088      	sub	sp, #32
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012aaa:	230d      	movs	r3, #13
 8012aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012abc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012abe:	f107 0308 	add.w	r3, r7, #8
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f7ff fd3d 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ace:	210d      	movs	r1, #13
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 f829 	bl	8012b28 <SDMMC_GetCmdResp1>
 8012ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ad8:	69fb      	ldr	r3, [r7, #28]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3720      	adds	r7, #32
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012ae2:	b580      	push	{r7, lr}
 8012ae4:	b088      	sub	sp, #32
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012aea:	2300      	movs	r3, #0
 8012aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012aee:	230d      	movs	r3, #13
 8012af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012af8:	2300      	movs	r3, #0
 8012afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b02:	f107 0308 	add.w	r3, r7, #8
 8012b06:	4619      	mov	r1, r3
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f7ff fd1b 	bl	8012544 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b12:	210d      	movs	r1, #13
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f000 f807 	bl	8012b28 <SDMMC_GetCmdResp1>
 8012b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b1c:	69fb      	ldr	r3, [r7, #28]
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3720      	adds	r7, #32
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
	...

08012b28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b088      	sub	sp, #32
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	460b      	mov	r3, r1
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012b36:	4b70      	ldr	r3, [pc, #448]	; (8012cf8 <SDMMC_GetCmdResp1+0x1d0>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4a70      	ldr	r2, [pc, #448]	; (8012cfc <SDMMC_GetCmdResp1+0x1d4>)
 8012b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8012b40:	0a5a      	lsrs	r2, r3, #9
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	fb02 f303 	mul.w	r3, r2, r3
 8012b48:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	1e5a      	subs	r2, r3, #1
 8012b4e:	61fa      	str	r2, [r7, #28]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d102      	bne.n	8012b5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b58:	e0c9      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b5e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012b60:	69ba      	ldr	r2, [r7, #24]
 8012b62:	4b67      	ldr	r3, [pc, #412]	; (8012d00 <SDMMC_GetCmdResp1+0x1d8>)
 8012b64:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d0ef      	beq.n	8012b4a <SDMMC_GetCmdResp1+0x22>
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d1ea      	bne.n	8012b4a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b78:	f003 0304 	and.w	r3, r3, #4
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d004      	beq.n	8012b8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2204      	movs	r2, #4
 8012b84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b86:	2304      	movs	r3, #4
 8012b88:	e0b1      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b8e:	f003 0301 	and.w	r3, r3, #1
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d004      	beq.n	8012ba0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2201      	movs	r2, #1
 8012b9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	e0a6      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	4a58      	ldr	r2, [pc, #352]	; (8012d04 <SDMMC_GetCmdResp1+0x1dc>)
 8012ba4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012ba6:	68f8      	ldr	r0, [r7, #12]
 8012ba8:	f7ff fcf6 	bl	8012598 <SDMMC_GetCommandResponse>
 8012bac:	4603      	mov	r3, r0
 8012bae:	461a      	mov	r2, r3
 8012bb0:	7afb      	ldrb	r3, [r7, #11]
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d001      	beq.n	8012bba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e099      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012bba:	2100      	movs	r1, #0
 8012bbc:	68f8      	ldr	r0, [r7, #12]
 8012bbe:	f7ff fcf8 	bl	80125b2 <SDMMC_GetResponse>
 8012bc2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012bc4:	697a      	ldr	r2, [r7, #20]
 8012bc6:	4b50      	ldr	r3, [pc, #320]	; (8012d08 <SDMMC_GetCmdResp1+0x1e0>)
 8012bc8:	4013      	ands	r3, r2
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d101      	bne.n	8012bd2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	e08d      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	da02      	bge.n	8012bde <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012bd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012bdc:	e087      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d001      	beq.n	8012bec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012be8:	2340      	movs	r3, #64	; 0x40
 8012bea:	e080      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d001      	beq.n	8012bfa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012bf6:	2380      	movs	r3, #128	; 0x80
 8012bf8:	e079      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d002      	beq.n	8012c0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c08:	e071      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d002      	beq.n	8012c1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c18:	e069      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d002      	beq.n	8012c2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c28:	e061      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d002      	beq.n	8012c3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c38:	e059      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d002      	beq.n	8012c4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c48:	e051      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d002      	beq.n	8012c5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c58:	e049      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d002      	beq.n	8012c6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012c68:	e041      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012c78:	e039      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d002      	beq.n	8012c8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012c88:	e031      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012c94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012c98:	e029      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d002      	beq.n	8012caa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012ca4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012ca8:	e021      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d002      	beq.n	8012cba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012cb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012cb8:	e019      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d002      	beq.n	8012cca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012cc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012cc8:	e011      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d002      	beq.n	8012cda <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012cd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012cd8:	e009      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	f003 0308 	and.w	r3, r3, #8
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d002      	beq.n	8012cea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012ce4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012ce8:	e001      	b.n	8012cee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3720      	adds	r7, #32
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	24000000 	.word	0x24000000
 8012cfc:	10624dd3 	.word	0x10624dd3
 8012d00:	00200045 	.word	0x00200045
 8012d04:	002000c5 	.word	0x002000c5
 8012d08:	fdffe008 	.word	0xfdffe008

08012d0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b085      	sub	sp, #20
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012d14:	4b1f      	ldr	r3, [pc, #124]	; (8012d94 <SDMMC_GetCmdResp2+0x88>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4a1f      	ldr	r2, [pc, #124]	; (8012d98 <SDMMC_GetCmdResp2+0x8c>)
 8012d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8012d1e:	0a5b      	lsrs	r3, r3, #9
 8012d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d24:	fb02 f303 	mul.w	r3, r2, r3
 8012d28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	1e5a      	subs	r2, r3, #1
 8012d2e:	60fa      	str	r2, [r7, #12]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d102      	bne.n	8012d3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d38:	e026      	b.n	8012d88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d3e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d0ef      	beq.n	8012d2a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d1ea      	bne.n	8012d2a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d58:	f003 0304 	and.w	r3, r3, #4
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d004      	beq.n	8012d6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2204      	movs	r2, #4
 8012d64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d66:	2304      	movs	r3, #4
 8012d68:	e00e      	b.n	8012d88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d6e:	f003 0301 	and.w	r3, r3, #1
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d004      	beq.n	8012d80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2201      	movs	r2, #1
 8012d7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e003      	b.n	8012d88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4a06      	ldr	r2, [pc, #24]	; (8012d9c <SDMMC_GetCmdResp2+0x90>)
 8012d84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3714      	adds	r7, #20
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr
 8012d94:	24000000 	.word	0x24000000
 8012d98:	10624dd3 	.word	0x10624dd3
 8012d9c:	002000c5 	.word	0x002000c5

08012da0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012da8:	4b1a      	ldr	r3, [pc, #104]	; (8012e14 <SDMMC_GetCmdResp3+0x74>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4a1a      	ldr	r2, [pc, #104]	; (8012e18 <SDMMC_GetCmdResp3+0x78>)
 8012dae:	fba2 2303 	umull	r2, r3, r2, r3
 8012db2:	0a5b      	lsrs	r3, r3, #9
 8012db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012db8:	fb02 f303 	mul.w	r3, r2, r3
 8012dbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	1e5a      	subs	r2, r3, #1
 8012dc2:	60fa      	str	r2, [r7, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d102      	bne.n	8012dce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012dcc:	e01b      	b.n	8012e06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dd2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d0ef      	beq.n	8012dbe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1ea      	bne.n	8012dbe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dec:	f003 0304 	and.w	r3, r3, #4
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d004      	beq.n	8012dfe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2204      	movs	r2, #4
 8012df8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012dfa:	2304      	movs	r3, #4
 8012dfc:	e003      	b.n	8012e06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	4a06      	ldr	r2, [pc, #24]	; (8012e1c <SDMMC_GetCmdResp3+0x7c>)
 8012e02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3714      	adds	r7, #20
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	24000000 	.word	0x24000000
 8012e18:	10624dd3 	.word	0x10624dd3
 8012e1c:	002000c5 	.word	0x002000c5

08012e20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b088      	sub	sp, #32
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	460b      	mov	r3, r1
 8012e2a:	607a      	str	r2, [r7, #4]
 8012e2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012e2e:	4b35      	ldr	r3, [pc, #212]	; (8012f04 <SDMMC_GetCmdResp6+0xe4>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4a35      	ldr	r2, [pc, #212]	; (8012f08 <SDMMC_GetCmdResp6+0xe8>)
 8012e34:	fba2 2303 	umull	r2, r3, r2, r3
 8012e38:	0a5b      	lsrs	r3, r3, #9
 8012e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e3e:	fb02 f303 	mul.w	r3, r2, r3
 8012e42:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	1e5a      	subs	r2, r3, #1
 8012e48:	61fa      	str	r2, [r7, #28]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d102      	bne.n	8012e54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e52:	e052      	b.n	8012efa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e58:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d0ef      	beq.n	8012e44 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d1ea      	bne.n	8012e44 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e72:	f003 0304 	and.w	r3, r3, #4
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d004      	beq.n	8012e84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2204      	movs	r2, #4
 8012e7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e80:	2304      	movs	r3, #4
 8012e82:	e03a      	b.n	8012efa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e88:	f003 0301 	and.w	r3, r3, #1
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d004      	beq.n	8012e9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2201      	movs	r2, #1
 8012e94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e96:	2301      	movs	r3, #1
 8012e98:	e02f      	b.n	8012efa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012e9a:	68f8      	ldr	r0, [r7, #12]
 8012e9c:	f7ff fb7c 	bl	8012598 <SDMMC_GetCommandResponse>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	7afb      	ldrb	r3, [r7, #11]
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d001      	beq.n	8012eae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e025      	b.n	8012efa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	4a16      	ldr	r2, [pc, #88]	; (8012f0c <SDMMC_GetCmdResp6+0xec>)
 8012eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f7ff fb7b 	bl	80125b2 <SDMMC_GetResponse>
 8012ebc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	0c1b      	lsrs	r3, r3, #16
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	e011      	b.n	8012efa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d002      	beq.n	8012ee6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ee4:	e009      	b.n	8012efa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d002      	beq.n	8012ef6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ef4:	e001      	b.n	8012efa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3720      	adds	r7, #32
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	24000000 	.word	0x24000000
 8012f08:	10624dd3 	.word	0x10624dd3
 8012f0c:	002000c5 	.word	0x002000c5

08012f10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012f18:	4b22      	ldr	r3, [pc, #136]	; (8012fa4 <SDMMC_GetCmdResp7+0x94>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a22      	ldr	r2, [pc, #136]	; (8012fa8 <SDMMC_GetCmdResp7+0x98>)
 8012f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8012f22:	0a5b      	lsrs	r3, r3, #9
 8012f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f28:	fb02 f303 	mul.w	r3, r2, r3
 8012f2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	1e5a      	subs	r2, r3, #1
 8012f32:	60fa      	str	r2, [r7, #12]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d102      	bne.n	8012f3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f3c:	e02c      	b.n	8012f98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f42:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d0ef      	beq.n	8012f2e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d1ea      	bne.n	8012f2e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f5c:	f003 0304 	and.w	r3, r3, #4
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d004      	beq.n	8012f6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2204      	movs	r2, #4
 8012f68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f6a:	2304      	movs	r3, #4
 8012f6c:	e014      	b.n	8012f98 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f72:	f003 0301 	and.w	r3, r3, #1
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d004      	beq.n	8012f84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f80:	2301      	movs	r3, #1
 8012f82:	e009      	b.n	8012f98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d002      	beq.n	8012f96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2240      	movs	r2, #64	; 0x40
 8012f94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012f96:	2300      	movs	r3, #0

}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3714      	adds	r7, #20
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa2:	4770      	bx	lr
 8012fa4:	24000000 	.word	0x24000000
 8012fa8:	10624dd3 	.word	0x10624dd3

08012fac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b085      	sub	sp, #20
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012fb4:	4b11      	ldr	r3, [pc, #68]	; (8012ffc <SDMMC_GetCmdError+0x50>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4a11      	ldr	r2, [pc, #68]	; (8013000 <SDMMC_GetCmdError+0x54>)
 8012fba:	fba2 2303 	umull	r2, r3, r2, r3
 8012fbe:	0a5b      	lsrs	r3, r3, #9
 8012fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fc4:	fb02 f303 	mul.w	r3, r2, r3
 8012fc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	1e5a      	subs	r2, r3, #1
 8012fce:	60fa      	str	r2, [r7, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d102      	bne.n	8012fda <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012fd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012fd8:	e009      	b.n	8012fee <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d0f1      	beq.n	8012fca <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	4a06      	ldr	r2, [pc, #24]	; (8013004 <SDMMC_GetCmdError+0x58>)
 8012fea:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012fec:	2300      	movs	r3, #0
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3714      	adds	r7, #20
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	24000000 	.word	0x24000000
 8013000:	10624dd3 	.word	0x10624dd3
 8013004:	002000c5 	.word	0x002000c5

08013008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013008:	b084      	sub	sp, #16
 801300a:	b580      	push	{r7, lr}
 801300c:	b084      	sub	sp, #16
 801300e:	af00      	add	r7, sp, #0
 8013010:	6078      	str	r0, [r7, #4]
 8013012:	f107 001c 	add.w	r0, r7, #28
 8013016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801301c:	2b01      	cmp	r3, #1
 801301e:	d120      	bne.n	8013062 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	68da      	ldr	r2, [r3, #12]
 8013030:	4b2a      	ldr	r3, [pc, #168]	; (80130dc <USB_CoreInit+0xd4>)
 8013032:	4013      	ands	r3, r2
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	68db      	ldr	r3, [r3, #12]
 801303c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013046:	2b01      	cmp	r3, #1
 8013048:	d105      	bne.n	8013056 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	68db      	ldr	r3, [r3, #12]
 801304e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f001 faf8 	bl	801464c <USB_CoreReset>
 801305c:	4603      	mov	r3, r0
 801305e:	73fb      	strb	r3, [r7, #15]
 8013060:	e01a      	b.n	8013098 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f001 faec 	bl	801464c <USB_CoreReset>
 8013074:	4603      	mov	r3, r0
 8013076:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	639a      	str	r2, [r3, #56]	; 0x38
 801308a:	e005      	b.n	8013098 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013090:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	2b01      	cmp	r3, #1
 801309c:	d116      	bne.n	80130cc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80130ac:	4b0c      	ldr	r3, [pc, #48]	; (80130e0 <USB_CoreInit+0xd8>)
 80130ae:	4313      	orrs	r3, r2
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	689b      	ldr	r3, [r3, #8]
 80130b8:	f043 0206 	orr.w	r2, r3, #6
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	689b      	ldr	r3, [r3, #8]
 80130c4:	f043 0220 	orr.w	r2, r3, #32
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80130cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80130d8:	b004      	add	sp, #16
 80130da:	4770      	bx	lr
 80130dc:	ffbdffbf 	.word	0xffbdffbf
 80130e0:	03ee0000 	.word	0x03ee0000

080130e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b087      	sub	sp, #28
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	60b9      	str	r1, [r7, #8]
 80130ee:	4613      	mov	r3, r2
 80130f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80130f2:	79fb      	ldrb	r3, [r7, #7]
 80130f4:	2b02      	cmp	r3, #2
 80130f6:	d165      	bne.n	80131c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	4a41      	ldr	r2, [pc, #260]	; (8013200 <USB_SetTurnaroundTime+0x11c>)
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d906      	bls.n	801310e <USB_SetTurnaroundTime+0x2a>
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	4a40      	ldr	r2, [pc, #256]	; (8013204 <USB_SetTurnaroundTime+0x120>)
 8013104:	4293      	cmp	r3, r2
 8013106:	d202      	bcs.n	801310e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013108:	230f      	movs	r3, #15
 801310a:	617b      	str	r3, [r7, #20]
 801310c:	e062      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	4a3c      	ldr	r2, [pc, #240]	; (8013204 <USB_SetTurnaroundTime+0x120>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d306      	bcc.n	8013124 <USB_SetTurnaroundTime+0x40>
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	4a3b      	ldr	r2, [pc, #236]	; (8013208 <USB_SetTurnaroundTime+0x124>)
 801311a:	4293      	cmp	r3, r2
 801311c:	d202      	bcs.n	8013124 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801311e:	230e      	movs	r3, #14
 8013120:	617b      	str	r3, [r7, #20]
 8013122:	e057      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	4a38      	ldr	r2, [pc, #224]	; (8013208 <USB_SetTurnaroundTime+0x124>)
 8013128:	4293      	cmp	r3, r2
 801312a:	d306      	bcc.n	801313a <USB_SetTurnaroundTime+0x56>
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	4a37      	ldr	r2, [pc, #220]	; (801320c <USB_SetTurnaroundTime+0x128>)
 8013130:	4293      	cmp	r3, r2
 8013132:	d202      	bcs.n	801313a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013134:	230d      	movs	r3, #13
 8013136:	617b      	str	r3, [r7, #20]
 8013138:	e04c      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	4a33      	ldr	r2, [pc, #204]	; (801320c <USB_SetTurnaroundTime+0x128>)
 801313e:	4293      	cmp	r3, r2
 8013140:	d306      	bcc.n	8013150 <USB_SetTurnaroundTime+0x6c>
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	4a32      	ldr	r2, [pc, #200]	; (8013210 <USB_SetTurnaroundTime+0x12c>)
 8013146:	4293      	cmp	r3, r2
 8013148:	d802      	bhi.n	8013150 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801314a:	230c      	movs	r3, #12
 801314c:	617b      	str	r3, [r7, #20]
 801314e:	e041      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	4a2f      	ldr	r2, [pc, #188]	; (8013210 <USB_SetTurnaroundTime+0x12c>)
 8013154:	4293      	cmp	r3, r2
 8013156:	d906      	bls.n	8013166 <USB_SetTurnaroundTime+0x82>
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	4a2e      	ldr	r2, [pc, #184]	; (8013214 <USB_SetTurnaroundTime+0x130>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d802      	bhi.n	8013166 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013160:	230b      	movs	r3, #11
 8013162:	617b      	str	r3, [r7, #20]
 8013164:	e036      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	4a2a      	ldr	r2, [pc, #168]	; (8013214 <USB_SetTurnaroundTime+0x130>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d906      	bls.n	801317c <USB_SetTurnaroundTime+0x98>
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	4a29      	ldr	r2, [pc, #164]	; (8013218 <USB_SetTurnaroundTime+0x134>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d802      	bhi.n	801317c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013176:	230a      	movs	r3, #10
 8013178:	617b      	str	r3, [r7, #20]
 801317a:	e02b      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	4a26      	ldr	r2, [pc, #152]	; (8013218 <USB_SetTurnaroundTime+0x134>)
 8013180:	4293      	cmp	r3, r2
 8013182:	d906      	bls.n	8013192 <USB_SetTurnaroundTime+0xae>
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	4a25      	ldr	r2, [pc, #148]	; (801321c <USB_SetTurnaroundTime+0x138>)
 8013188:	4293      	cmp	r3, r2
 801318a:	d202      	bcs.n	8013192 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801318c:	2309      	movs	r3, #9
 801318e:	617b      	str	r3, [r7, #20]
 8013190:	e020      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	4a21      	ldr	r2, [pc, #132]	; (801321c <USB_SetTurnaroundTime+0x138>)
 8013196:	4293      	cmp	r3, r2
 8013198:	d306      	bcc.n	80131a8 <USB_SetTurnaroundTime+0xc4>
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	4a20      	ldr	r2, [pc, #128]	; (8013220 <USB_SetTurnaroundTime+0x13c>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d802      	bhi.n	80131a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80131a2:	2308      	movs	r3, #8
 80131a4:	617b      	str	r3, [r7, #20]
 80131a6:	e015      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	4a1d      	ldr	r2, [pc, #116]	; (8013220 <USB_SetTurnaroundTime+0x13c>)
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d906      	bls.n	80131be <USB_SetTurnaroundTime+0xda>
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	4a1c      	ldr	r2, [pc, #112]	; (8013224 <USB_SetTurnaroundTime+0x140>)
 80131b4:	4293      	cmp	r3, r2
 80131b6:	d202      	bcs.n	80131be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80131b8:	2307      	movs	r3, #7
 80131ba:	617b      	str	r3, [r7, #20]
 80131bc:	e00a      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80131be:	2306      	movs	r3, #6
 80131c0:	617b      	str	r3, [r7, #20]
 80131c2:	e007      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80131c4:	79fb      	ldrb	r3, [r7, #7]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d102      	bne.n	80131d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80131ca:	2309      	movs	r3, #9
 80131cc:	617b      	str	r3, [r7, #20]
 80131ce:	e001      	b.n	80131d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80131d0:	2309      	movs	r3, #9
 80131d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	68db      	ldr	r3, [r3, #12]
 80131d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	68da      	ldr	r2, [r3, #12]
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	029b      	lsls	r3, r3, #10
 80131e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80131ec:	431a      	orrs	r2, r3
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80131f2:	2300      	movs	r3, #0
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	371c      	adds	r7, #28
 80131f8:	46bd      	mov	sp, r7
 80131fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fe:	4770      	bx	lr
 8013200:	00d8acbf 	.word	0x00d8acbf
 8013204:	00e4e1c0 	.word	0x00e4e1c0
 8013208:	00f42400 	.word	0x00f42400
 801320c:	01067380 	.word	0x01067380
 8013210:	011a499f 	.word	0x011a499f
 8013214:	01312cff 	.word	0x01312cff
 8013218:	014ca43f 	.word	0x014ca43f
 801321c:	016e3600 	.word	0x016e3600
 8013220:	01a6ab1f 	.word	0x01a6ab1f
 8013224:	01e84800 	.word	0x01e84800

08013228 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	689b      	ldr	r3, [r3, #8]
 8013234:	f043 0201 	orr.w	r2, r3, #1
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801323c:	2300      	movs	r3, #0
}
 801323e:	4618      	mov	r0, r3
 8013240:	370c      	adds	r7, #12
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr

0801324a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801324a:	b480      	push	{r7}
 801324c:	b083      	sub	sp, #12
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	f023 0201 	bic.w	r2, r3, #1
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801325e:	2300      	movs	r3, #0
}
 8013260:	4618      	mov	r0, r3
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	460b      	mov	r3, r1
 8013276:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013278:	2300      	movs	r3, #0
 801327a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013288:	78fb      	ldrb	r3, [r7, #3]
 801328a:	2b01      	cmp	r3, #1
 801328c:	d115      	bne.n	80132ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	68db      	ldr	r3, [r3, #12]
 8013292:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801329a:	2001      	movs	r0, #1
 801329c:	f7f0 fcf8 	bl	8003c90 <HAL_Delay>
      ms++;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	3301      	adds	r3, #1
 80132a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f001 f93f 	bl	801452a <USB_GetMode>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d01e      	beq.n	80132f0 <USB_SetCurrentMode+0x84>
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2b31      	cmp	r3, #49	; 0x31
 80132b6:	d9f0      	bls.n	801329a <USB_SetCurrentMode+0x2e>
 80132b8:	e01a      	b.n	80132f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80132ba:	78fb      	ldrb	r3, [r7, #3]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d115      	bne.n	80132ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80132cc:	2001      	movs	r0, #1
 80132ce:	f7f0 fcdf 	bl	8003c90 <HAL_Delay>
      ms++;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	3301      	adds	r3, #1
 80132d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f001 f926 	bl	801452a <USB_GetMode>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d005      	beq.n	80132f0 <USB_SetCurrentMode+0x84>
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b31      	cmp	r3, #49	; 0x31
 80132e8:	d9f0      	bls.n	80132cc <USB_SetCurrentMode+0x60>
 80132ea:	e001      	b.n	80132f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80132ec:	2301      	movs	r3, #1
 80132ee:	e005      	b.n	80132fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2b32      	cmp	r3, #50	; 0x32
 80132f4:	d101      	bne.n	80132fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80132f6:	2301      	movs	r3, #1
 80132f8:	e000      	b.n	80132fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80132fa:	2300      	movs	r3, #0
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3710      	adds	r7, #16
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013304:	b084      	sub	sp, #16
 8013306:	b580      	push	{r7, lr}
 8013308:	b086      	sub	sp, #24
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
 801330e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013316:	2300      	movs	r3, #0
 8013318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801331e:	2300      	movs	r3, #0
 8013320:	613b      	str	r3, [r7, #16]
 8013322:	e009      	b.n	8013338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	3340      	adds	r3, #64	; 0x40
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	4413      	add	r3, r2
 801332e:	2200      	movs	r2, #0
 8013330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	3301      	adds	r3, #1
 8013336:	613b      	str	r3, [r7, #16]
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	2b0e      	cmp	r3, #14
 801333c:	d9f2      	bls.n	8013324 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801333e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013340:	2b00      	cmp	r3, #0
 8013342:	d11c      	bne.n	801337e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	68fa      	ldr	r2, [r7, #12]
 801334e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013352:	f043 0302 	orr.w	r3, r3, #2
 8013356:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801335c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	601a      	str	r2, [r3, #0]
 801337c:	e005      	b.n	801338a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013382:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013390:	461a      	mov	r2, r3
 8013392:	2300      	movs	r3, #0
 8013394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801339c:	4619      	mov	r1, r3
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133a4:	461a      	mov	r2, r3
 80133a6:	680b      	ldr	r3, [r1, #0]
 80133a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80133aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d10c      	bne.n	80133ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80133b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d104      	bne.n	80133c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80133b6:	2100      	movs	r1, #0
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f000 f965 	bl	8013688 <USB_SetDevSpeed>
 80133be:	e008      	b.n	80133d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80133c0:	2101      	movs	r1, #1
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f000 f960 	bl	8013688 <USB_SetDevSpeed>
 80133c8:	e003      	b.n	80133d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80133ca:	2103      	movs	r1, #3
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f000 f95b 	bl	8013688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80133d2:	2110      	movs	r1, #16
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 f8f3 	bl	80135c0 <USB_FlushTxFifo>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80133e0:	2301      	movs	r3, #1
 80133e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f000 f91f 	bl	8013628 <USB_FlushRxFifo>
 80133ea:	4603      	mov	r3, r0
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d001      	beq.n	80133f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80133f0:	2301      	movs	r3, #1
 80133f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133fa:	461a      	mov	r2, r3
 80133fc:	2300      	movs	r3, #0
 80133fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013406:	461a      	mov	r2, r3
 8013408:	2300      	movs	r3, #0
 801340a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013412:	461a      	mov	r2, r3
 8013414:	2300      	movs	r3, #0
 8013416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013418:	2300      	movs	r3, #0
 801341a:	613b      	str	r3, [r7, #16]
 801341c:	e043      	b.n	80134a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	015a      	lsls	r2, r3, #5
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	4413      	add	r3, r2
 8013426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013434:	d118      	bne.n	8013468 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d10a      	bne.n	8013452 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	015a      	lsls	r2, r3, #5
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	4413      	add	r3, r2
 8013444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013448:	461a      	mov	r2, r3
 801344a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801344e:	6013      	str	r3, [r2, #0]
 8013450:	e013      	b.n	801347a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	015a      	lsls	r2, r3, #5
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	4413      	add	r3, r2
 801345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801345e:	461a      	mov	r2, r3
 8013460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013464:	6013      	str	r3, [r2, #0]
 8013466:	e008      	b.n	801347a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	015a      	lsls	r2, r3, #5
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	4413      	add	r3, r2
 8013470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013474:	461a      	mov	r2, r3
 8013476:	2300      	movs	r3, #0
 8013478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801347a:	693b      	ldr	r3, [r7, #16]
 801347c:	015a      	lsls	r2, r3, #5
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	4413      	add	r3, r2
 8013482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013486:	461a      	mov	r2, r3
 8013488:	2300      	movs	r3, #0
 801348a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	015a      	lsls	r2, r3, #5
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	4413      	add	r3, r2
 8013494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013498:	461a      	mov	r2, r3
 801349a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801349e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	3301      	adds	r3, #1
 80134a4:	613b      	str	r3, [r7, #16]
 80134a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a8:	693a      	ldr	r2, [r7, #16]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d3b7      	bcc.n	801341e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80134ae:	2300      	movs	r3, #0
 80134b0:	613b      	str	r3, [r7, #16]
 80134b2:	e043      	b.n	801353c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	015a      	lsls	r2, r3, #5
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	4413      	add	r3, r2
 80134bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134ca:	d118      	bne.n	80134fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d10a      	bne.n	80134e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	015a      	lsls	r2, r3, #5
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	4413      	add	r3, r2
 80134da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134de:	461a      	mov	r2, r3
 80134e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80134e4:	6013      	str	r3, [r2, #0]
 80134e6:	e013      	b.n	8013510 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	015a      	lsls	r2, r3, #5
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	4413      	add	r3, r2
 80134f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f4:	461a      	mov	r2, r3
 80134f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80134fa:	6013      	str	r3, [r2, #0]
 80134fc:	e008      	b.n	8013510 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	015a      	lsls	r2, r3, #5
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	4413      	add	r3, r2
 8013506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801350a:	461a      	mov	r2, r3
 801350c:	2300      	movs	r3, #0
 801350e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	015a      	lsls	r2, r3, #5
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	4413      	add	r3, r2
 8013518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801351c:	461a      	mov	r2, r3
 801351e:	2300      	movs	r3, #0
 8013520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	015a      	lsls	r2, r3, #5
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	4413      	add	r3, r2
 801352a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801352e:	461a      	mov	r2, r3
 8013530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	3301      	adds	r3, #1
 801353a:	613b      	str	r3, [r7, #16]
 801353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353e:	693a      	ldr	r2, [r7, #16]
 8013540:	429a      	cmp	r2, r3
 8013542:	d3b7      	bcc.n	80134b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801354a:	691b      	ldr	r3, [r3, #16]
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2200      	movs	r2, #0
 801355c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013568:	2b00      	cmp	r3, #0
 801356a:	d105      	bne.n	8013578 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	699b      	ldr	r3, [r3, #24]
 8013570:	f043 0210 	orr.w	r2, r3, #16
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	699a      	ldr	r2, [r3, #24]
 801357c:	4b0e      	ldr	r3, [pc, #56]	; (80135b8 <USB_DevInit+0x2b4>)
 801357e:	4313      	orrs	r3, r2
 8013580:	687a      	ldr	r2, [r7, #4]
 8013582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013586:	2b00      	cmp	r3, #0
 8013588:	d005      	beq.n	8013596 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	699b      	ldr	r3, [r3, #24]
 801358e:	f043 0208 	orr.w	r2, r3, #8
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013598:	2b01      	cmp	r3, #1
 801359a:	d105      	bne.n	80135a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	699a      	ldr	r2, [r3, #24]
 80135a0:	4b06      	ldr	r3, [pc, #24]	; (80135bc <USB_DevInit+0x2b8>)
 80135a2:	4313      	orrs	r3, r2
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80135a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3718      	adds	r7, #24
 80135ae:	46bd      	mov	sp, r7
 80135b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80135b4:	b004      	add	sp, #16
 80135b6:	4770      	bx	lr
 80135b8:	803c3800 	.word	0x803c3800
 80135bc:	40000004 	.word	0x40000004

080135c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80135c0:	b480      	push	{r7}
 80135c2:	b085      	sub	sp, #20
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80135ca:	2300      	movs	r3, #0
 80135cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	3301      	adds	r3, #1
 80135d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	4a13      	ldr	r2, [pc, #76]	; (8013624 <USB_FlushTxFifo+0x64>)
 80135d8:	4293      	cmp	r3, r2
 80135da:	d901      	bls.n	80135e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80135dc:	2303      	movs	r3, #3
 80135de:	e01b      	b.n	8013618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	daf2      	bge.n	80135ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80135e8:	2300      	movs	r3, #0
 80135ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	019b      	lsls	r3, r3, #6
 80135f0:	f043 0220 	orr.w	r2, r3, #32
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	3301      	adds	r3, #1
 80135fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	4a08      	ldr	r2, [pc, #32]	; (8013624 <USB_FlushTxFifo+0x64>)
 8013602:	4293      	cmp	r3, r2
 8013604:	d901      	bls.n	801360a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013606:	2303      	movs	r3, #3
 8013608:	e006      	b.n	8013618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	691b      	ldr	r3, [r3, #16]
 801360e:	f003 0320 	and.w	r3, r3, #32
 8013612:	2b20      	cmp	r3, #32
 8013614:	d0f0      	beq.n	80135f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013616:	2300      	movs	r3, #0
}
 8013618:	4618      	mov	r0, r3
 801361a:	3714      	adds	r7, #20
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr
 8013624:	00030d40 	.word	0x00030d40

08013628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013628:	b480      	push	{r7}
 801362a:	b085      	sub	sp, #20
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013630:	2300      	movs	r3, #0
 8013632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	3301      	adds	r3, #1
 8013638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	4a11      	ldr	r2, [pc, #68]	; (8013684 <USB_FlushRxFifo+0x5c>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d901      	bls.n	8013646 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013642:	2303      	movs	r3, #3
 8013644:	e018      	b.n	8013678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	691b      	ldr	r3, [r3, #16]
 801364a:	2b00      	cmp	r3, #0
 801364c:	daf2      	bge.n	8013634 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801364e:	2300      	movs	r3, #0
 8013650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2210      	movs	r2, #16
 8013656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	3301      	adds	r3, #1
 801365c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	4a08      	ldr	r2, [pc, #32]	; (8013684 <USB_FlushRxFifo+0x5c>)
 8013662:	4293      	cmp	r3, r2
 8013664:	d901      	bls.n	801366a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013666:	2303      	movs	r3, #3
 8013668:	e006      	b.n	8013678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	691b      	ldr	r3, [r3, #16]
 801366e:	f003 0310 	and.w	r3, r3, #16
 8013672:	2b10      	cmp	r3, #16
 8013674:	d0f0      	beq.n	8013658 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013676:	2300      	movs	r3, #0
}
 8013678:	4618      	mov	r0, r3
 801367a:	3714      	adds	r7, #20
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr
 8013684:	00030d40 	.word	0x00030d40

08013688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013688:	b480      	push	{r7}
 801368a:	b085      	sub	sp, #20
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	460b      	mov	r3, r1
 8013692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	78fb      	ldrb	r3, [r7, #3]
 80136a2:	68f9      	ldr	r1, [r7, #12]
 80136a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136a8:	4313      	orrs	r3, r2
 80136aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80136ac:	2300      	movs	r3, #0
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3714      	adds	r7, #20
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr

080136ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80136ba:	b480      	push	{r7}
 80136bc:	b087      	sub	sp, #28
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	f003 0306 	and.w	r3, r3, #6
 80136d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d102      	bne.n	80136e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80136da:	2300      	movs	r3, #0
 80136dc:	75fb      	strb	r3, [r7, #23]
 80136de:	e00a      	b.n	80136f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2b02      	cmp	r3, #2
 80136e4:	d002      	beq.n	80136ec <USB_GetDevSpeed+0x32>
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2b06      	cmp	r3, #6
 80136ea:	d102      	bne.n	80136f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80136ec:	2302      	movs	r3, #2
 80136ee:	75fb      	strb	r3, [r7, #23]
 80136f0:	e001      	b.n	80136f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80136f2:	230f      	movs	r3, #15
 80136f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80136f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	371c      	adds	r7, #28
 80136fc:	46bd      	mov	sp, r7
 80136fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013702:	4770      	bx	lr

08013704 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013704:	b480      	push	{r7}
 8013706:	b085      	sub	sp, #20
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	785b      	ldrb	r3, [r3, #1]
 801371c:	2b01      	cmp	r3, #1
 801371e:	d139      	bne.n	8013794 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013726:	69da      	ldr	r2, [r3, #28]
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	f003 030f 	and.w	r3, r3, #15
 8013730:	2101      	movs	r1, #1
 8013732:	fa01 f303 	lsl.w	r3, r1, r3
 8013736:	b29b      	uxth	r3, r3
 8013738:	68f9      	ldr	r1, [r7, #12]
 801373a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801373e:	4313      	orrs	r3, r2
 8013740:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	015a      	lsls	r2, r3, #5
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	4413      	add	r3, r2
 801374a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013754:	2b00      	cmp	r3, #0
 8013756:	d153      	bne.n	8013800 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	015a      	lsls	r2, r3, #5
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	4413      	add	r3, r2
 8013760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	689b      	ldr	r3, [r3, #8]
 801376a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	791b      	ldrb	r3, [r3, #4]
 8013772:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013774:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	059b      	lsls	r3, r3, #22
 801377a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801377c:	431a      	orrs	r2, r3
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	0159      	lsls	r1, r3, #5
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	440b      	add	r3, r1
 8013786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801378a:	4619      	mov	r1, r3
 801378c:	4b20      	ldr	r3, [pc, #128]	; (8013810 <USB_ActivateEndpoint+0x10c>)
 801378e:	4313      	orrs	r3, r2
 8013790:	600b      	str	r3, [r1, #0]
 8013792:	e035      	b.n	8013800 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801379a:	69da      	ldr	r2, [r3, #28]
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	781b      	ldrb	r3, [r3, #0]
 80137a0:	f003 030f 	and.w	r3, r3, #15
 80137a4:	2101      	movs	r1, #1
 80137a6:	fa01 f303 	lsl.w	r3, r1, r3
 80137aa:	041b      	lsls	r3, r3, #16
 80137ac:	68f9      	ldr	r1, [r7, #12]
 80137ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80137b2:	4313      	orrs	r3, r2
 80137b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	015a      	lsls	r2, r3, #5
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	4413      	add	r3, r2
 80137be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d119      	bne.n	8013800 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	015a      	lsls	r2, r3, #5
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	4413      	add	r3, r2
 80137d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	689b      	ldr	r3, [r3, #8]
 80137de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	791b      	ldrb	r3, [r3, #4]
 80137e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80137e8:	430b      	orrs	r3, r1
 80137ea:	431a      	orrs	r2, r3
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	0159      	lsls	r1, r3, #5
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	440b      	add	r3, r1
 80137f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137f8:	4619      	mov	r1, r3
 80137fa:	4b05      	ldr	r3, [pc, #20]	; (8013810 <USB_ActivateEndpoint+0x10c>)
 80137fc:	4313      	orrs	r3, r2
 80137fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	3714      	adds	r7, #20
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	10008000 	.word	0x10008000

08013814 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	785b      	ldrb	r3, [r3, #1]
 801382c:	2b01      	cmp	r3, #1
 801382e:	d161      	bne.n	80138f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	015a      	lsls	r2, r3, #5
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	4413      	add	r3, r2
 8013838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013846:	d11f      	bne.n	8013888 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	015a      	lsls	r2, r3, #5
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	4413      	add	r3, r2
 8013850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	68ba      	ldr	r2, [r7, #8]
 8013858:	0151      	lsls	r1, r2, #5
 801385a:	68fa      	ldr	r2, [r7, #12]
 801385c:	440a      	add	r2, r1
 801385e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013866:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	015a      	lsls	r2, r3, #5
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	4413      	add	r3, r2
 8013870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	68ba      	ldr	r2, [r7, #8]
 8013878:	0151      	lsls	r1, r2, #5
 801387a:	68fa      	ldr	r2, [r7, #12]
 801387c:	440a      	add	r2, r1
 801387e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	f003 030f 	and.w	r3, r3, #15
 8013898:	2101      	movs	r1, #1
 801389a:	fa01 f303 	lsl.w	r3, r1, r3
 801389e:	b29b      	uxth	r3, r3
 80138a0:	43db      	mvns	r3, r3
 80138a2:	68f9      	ldr	r1, [r7, #12]
 80138a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80138a8:	4013      	ands	r3, r2
 80138aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138b2:	69da      	ldr	r2, [r3, #28]
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	f003 030f 	and.w	r3, r3, #15
 80138bc:	2101      	movs	r1, #1
 80138be:	fa01 f303 	lsl.w	r3, r1, r3
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	43db      	mvns	r3, r3
 80138c6:	68f9      	ldr	r1, [r7, #12]
 80138c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80138cc:	4013      	ands	r3, r2
 80138ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	015a      	lsls	r2, r3, #5
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	4413      	add	r3, r2
 80138d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	0159      	lsls	r1, r3, #5
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	440b      	add	r3, r1
 80138e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ea:	4619      	mov	r1, r3
 80138ec:	4b35      	ldr	r3, [pc, #212]	; (80139c4 <USB_DeactivateEndpoint+0x1b0>)
 80138ee:	4013      	ands	r3, r2
 80138f0:	600b      	str	r3, [r1, #0]
 80138f2:	e060      	b.n	80139b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	015a      	lsls	r2, r3, #5
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	4413      	add	r3, r2
 80138fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801390a:	d11f      	bne.n	801394c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	015a      	lsls	r2, r3, #5
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	4413      	add	r3, r2
 8013914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	68ba      	ldr	r2, [r7, #8]
 801391c:	0151      	lsls	r1, r2, #5
 801391e:	68fa      	ldr	r2, [r7, #12]
 8013920:	440a      	add	r2, r1
 8013922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801392a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	015a      	lsls	r2, r3, #5
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	4413      	add	r3, r2
 8013934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	68ba      	ldr	r2, [r7, #8]
 801393c:	0151      	lsls	r1, r2, #5
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	440a      	add	r2, r1
 8013942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801394a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	f003 030f 	and.w	r3, r3, #15
 801395c:	2101      	movs	r1, #1
 801395e:	fa01 f303 	lsl.w	r3, r1, r3
 8013962:	041b      	lsls	r3, r3, #16
 8013964:	43db      	mvns	r3, r3
 8013966:	68f9      	ldr	r1, [r7, #12]
 8013968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801396c:	4013      	ands	r3, r2
 801396e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013976:	69da      	ldr	r2, [r3, #28]
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	f003 030f 	and.w	r3, r3, #15
 8013980:	2101      	movs	r1, #1
 8013982:	fa01 f303 	lsl.w	r3, r1, r3
 8013986:	041b      	lsls	r3, r3, #16
 8013988:	43db      	mvns	r3, r3
 801398a:	68f9      	ldr	r1, [r7, #12]
 801398c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013990:	4013      	ands	r3, r2
 8013992:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	015a      	lsls	r2, r3, #5
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	4413      	add	r3, r2
 801399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	0159      	lsls	r1, r3, #5
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	440b      	add	r3, r1
 80139aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139ae:	4619      	mov	r1, r3
 80139b0:	4b05      	ldr	r3, [pc, #20]	; (80139c8 <USB_DeactivateEndpoint+0x1b4>)
 80139b2:	4013      	ands	r3, r2
 80139b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80139b6:	2300      	movs	r3, #0
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3714      	adds	r7, #20
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr
 80139c4:	ec337800 	.word	0xec337800
 80139c8:	eff37800 	.word	0xeff37800

080139cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b08a      	sub	sp, #40	; 0x28
 80139d0:	af02      	add	r7, sp, #8
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	4613      	mov	r3, r2
 80139d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	785b      	ldrb	r3, [r3, #1]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	f040 8181 	bne.w	8013cf0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	691b      	ldr	r3, [r3, #16]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d132      	bne.n	8013a5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	015a      	lsls	r2, r3, #5
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	4413      	add	r3, r2
 80139fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a02:	691a      	ldr	r2, [r3, #16]
 8013a04:	69bb      	ldr	r3, [r7, #24]
 8013a06:	0159      	lsls	r1, r3, #5
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	440b      	add	r3, r1
 8013a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a10:	4619      	mov	r1, r3
 8013a12:	4ba5      	ldr	r3, [pc, #660]	; (8013ca8 <USB_EPStartXfer+0x2dc>)
 8013a14:	4013      	ands	r3, r2
 8013a16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	015a      	lsls	r2, r3, #5
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	4413      	add	r3, r2
 8013a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a24:	691b      	ldr	r3, [r3, #16]
 8013a26:	69ba      	ldr	r2, [r7, #24]
 8013a28:	0151      	lsls	r1, r2, #5
 8013a2a:	69fa      	ldr	r2, [r7, #28]
 8013a2c:	440a      	add	r2, r1
 8013a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013a36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	015a      	lsls	r2, r3, #5
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	4413      	add	r3, r2
 8013a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a44:	691a      	ldr	r2, [r3, #16]
 8013a46:	69bb      	ldr	r3, [r7, #24]
 8013a48:	0159      	lsls	r1, r3, #5
 8013a4a:	69fb      	ldr	r3, [r7, #28]
 8013a4c:	440b      	add	r3, r1
 8013a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a52:	4619      	mov	r1, r3
 8013a54:	4b95      	ldr	r3, [pc, #596]	; (8013cac <USB_EPStartXfer+0x2e0>)
 8013a56:	4013      	ands	r3, r2
 8013a58:	610b      	str	r3, [r1, #16]
 8013a5a:	e092      	b.n	8013b82 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013a5c:	69bb      	ldr	r3, [r7, #24]
 8013a5e:	015a      	lsls	r2, r3, #5
 8013a60:	69fb      	ldr	r3, [r7, #28]
 8013a62:	4413      	add	r3, r2
 8013a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a68:	691a      	ldr	r2, [r3, #16]
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	0159      	lsls	r1, r3, #5
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	440b      	add	r3, r1
 8013a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a76:	4619      	mov	r1, r3
 8013a78:	4b8c      	ldr	r3, [pc, #560]	; (8013cac <USB_EPStartXfer+0x2e0>)
 8013a7a:	4013      	ands	r3, r2
 8013a7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a7e:	69bb      	ldr	r3, [r7, #24]
 8013a80:	015a      	lsls	r2, r3, #5
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	4413      	add	r3, r2
 8013a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a8a:	691a      	ldr	r2, [r3, #16]
 8013a8c:	69bb      	ldr	r3, [r7, #24]
 8013a8e:	0159      	lsls	r1, r3, #5
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	440b      	add	r3, r1
 8013a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a98:	4619      	mov	r1, r3
 8013a9a:	4b83      	ldr	r3, [pc, #524]	; (8013ca8 <USB_EPStartXfer+0x2dc>)
 8013a9c:	4013      	ands	r3, r2
 8013a9e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013aa0:	69bb      	ldr	r3, [r7, #24]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d11a      	bne.n	8013adc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	691a      	ldr	r2, [r3, #16]
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	689b      	ldr	r3, [r3, #8]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d903      	bls.n	8013aba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	689a      	ldr	r2, [r3, #8]
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	015a      	lsls	r2, r3, #5
 8013abe:	69fb      	ldr	r3, [r7, #28]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ac6:	691b      	ldr	r3, [r3, #16]
 8013ac8:	69ba      	ldr	r2, [r7, #24]
 8013aca:	0151      	lsls	r1, r2, #5
 8013acc:	69fa      	ldr	r2, [r7, #28]
 8013ace:	440a      	add	r2, r1
 8013ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ad8:	6113      	str	r3, [r2, #16]
 8013ada:	e01b      	b.n	8013b14 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013adc:	69bb      	ldr	r3, [r7, #24]
 8013ade:	015a      	lsls	r2, r3, #5
 8013ae0:	69fb      	ldr	r3, [r7, #28]
 8013ae2:	4413      	add	r3, r2
 8013ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ae8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	6919      	ldr	r1, [r3, #16]
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	689b      	ldr	r3, [r3, #8]
 8013af2:	440b      	add	r3, r1
 8013af4:	1e59      	subs	r1, r3, #1
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	689b      	ldr	r3, [r3, #8]
 8013afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8013afe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013b00:	4b6b      	ldr	r3, [pc, #428]	; (8013cb0 <USB_EPStartXfer+0x2e4>)
 8013b02:	400b      	ands	r3, r1
 8013b04:	69b9      	ldr	r1, [r7, #24]
 8013b06:	0148      	lsls	r0, r1, #5
 8013b08:	69f9      	ldr	r1, [r7, #28]
 8013b0a:	4401      	add	r1, r0
 8013b0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013b10:	4313      	orrs	r3, r2
 8013b12:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	015a      	lsls	r2, r3, #5
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	4413      	add	r3, r2
 8013b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b20:	691a      	ldr	r2, [r3, #16]
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	691b      	ldr	r3, [r3, #16]
 8013b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b2a:	69b9      	ldr	r1, [r7, #24]
 8013b2c:	0148      	lsls	r0, r1, #5
 8013b2e:	69f9      	ldr	r1, [r7, #28]
 8013b30:	4401      	add	r1, r0
 8013b32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013b36:	4313      	orrs	r3, r2
 8013b38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	791b      	ldrb	r3, [r3, #4]
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d11f      	bne.n	8013b82 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	015a      	lsls	r2, r3, #5
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	4413      	add	r3, r2
 8013b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b4e:	691b      	ldr	r3, [r3, #16]
 8013b50:	69ba      	ldr	r2, [r7, #24]
 8013b52:	0151      	lsls	r1, r2, #5
 8013b54:	69fa      	ldr	r2, [r7, #28]
 8013b56:	440a      	add	r2, r1
 8013b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013b60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	015a      	lsls	r2, r3, #5
 8013b66:	69fb      	ldr	r3, [r7, #28]
 8013b68:	4413      	add	r3, r2
 8013b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b6e:	691b      	ldr	r3, [r3, #16]
 8013b70:	69ba      	ldr	r2, [r7, #24]
 8013b72:	0151      	lsls	r1, r2, #5
 8013b74:	69fa      	ldr	r2, [r7, #28]
 8013b76:	440a      	add	r2, r1
 8013b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013b80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013b82:	79fb      	ldrb	r3, [r7, #7]
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d14b      	bne.n	8013c20 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	69db      	ldr	r3, [r3, #28]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d009      	beq.n	8013ba4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013b90:	69bb      	ldr	r3, [r7, #24]
 8013b92:	015a      	lsls	r2, r3, #5
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	4413      	add	r3, r2
 8013b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	69db      	ldr	r3, [r3, #28]
 8013ba2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	791b      	ldrb	r3, [r3, #4]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d128      	bne.n	8013bfe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bb2:	689b      	ldr	r3, [r3, #8]
 8013bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d110      	bne.n	8013bde <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	015a      	lsls	r2, r3, #5
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	4413      	add	r3, r2
 8013bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	69ba      	ldr	r2, [r7, #24]
 8013bcc:	0151      	lsls	r1, r2, #5
 8013bce:	69fa      	ldr	r2, [r7, #28]
 8013bd0:	440a      	add	r2, r1
 8013bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013bda:	6013      	str	r3, [r2, #0]
 8013bdc:	e00f      	b.n	8013bfe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	015a      	lsls	r2, r3, #5
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	4413      	add	r3, r2
 8013be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	69ba      	ldr	r2, [r7, #24]
 8013bee:	0151      	lsls	r1, r2, #5
 8013bf0:	69fa      	ldr	r2, [r7, #28]
 8013bf2:	440a      	add	r2, r1
 8013bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013bfe:	69bb      	ldr	r3, [r7, #24]
 8013c00:	015a      	lsls	r2, r3, #5
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	4413      	add	r3, r2
 8013c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	69ba      	ldr	r2, [r7, #24]
 8013c0e:	0151      	lsls	r1, r2, #5
 8013c10:	69fa      	ldr	r2, [r7, #28]
 8013c12:	440a      	add	r2, r1
 8013c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013c1c:	6013      	str	r3, [r2, #0]
 8013c1e:	e16a      	b.n	8013ef6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	015a      	lsls	r2, r3, #5
 8013c24:	69fb      	ldr	r3, [r7, #28]
 8013c26:	4413      	add	r3, r2
 8013c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	69ba      	ldr	r2, [r7, #24]
 8013c30:	0151      	lsls	r1, r2, #5
 8013c32:	69fa      	ldr	r2, [r7, #28]
 8013c34:	440a      	add	r2, r1
 8013c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013c3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	791b      	ldrb	r3, [r3, #4]
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d015      	beq.n	8013c74 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	691b      	ldr	r3, [r3, #16]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	f000 8152 	beq.w	8013ef6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	f003 030f 	and.w	r3, r3, #15
 8013c62:	2101      	movs	r1, #1
 8013c64:	fa01 f303 	lsl.w	r3, r1, r3
 8013c68:	69f9      	ldr	r1, [r7, #28]
 8013c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c6e:	4313      	orrs	r3, r2
 8013c70:	634b      	str	r3, [r1, #52]	; 0x34
 8013c72:	e140      	b.n	8013ef6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d117      	bne.n	8013cb4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	015a      	lsls	r2, r3, #5
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	4413      	add	r3, r2
 8013c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	69ba      	ldr	r2, [r7, #24]
 8013c94:	0151      	lsls	r1, r2, #5
 8013c96:	69fa      	ldr	r2, [r7, #28]
 8013c98:	440a      	add	r2, r1
 8013c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013ca2:	6013      	str	r3, [r2, #0]
 8013ca4:	e016      	b.n	8013cd4 <USB_EPStartXfer+0x308>
 8013ca6:	bf00      	nop
 8013ca8:	e007ffff 	.word	0xe007ffff
 8013cac:	fff80000 	.word	0xfff80000
 8013cb0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013cb4:	69bb      	ldr	r3, [r7, #24]
 8013cb6:	015a      	lsls	r2, r3, #5
 8013cb8:	69fb      	ldr	r3, [r7, #28]
 8013cba:	4413      	add	r3, r2
 8013cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	69ba      	ldr	r2, [r7, #24]
 8013cc4:	0151      	lsls	r1, r2, #5
 8013cc6:	69fa      	ldr	r2, [r7, #28]
 8013cc8:	440a      	add	r2, r1
 8013cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cd2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	68d9      	ldr	r1, [r3, #12]
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	781a      	ldrb	r2, [r3, #0]
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	691b      	ldr	r3, [r3, #16]
 8013ce0:	b298      	uxth	r0, r3
 8013ce2:	79fb      	ldrb	r3, [r7, #7]
 8013ce4:	9300      	str	r3, [sp, #0]
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	68f8      	ldr	r0, [r7, #12]
 8013cea:	f000 f9b9 	bl	8014060 <USB_WritePacket>
 8013cee:	e102      	b.n	8013ef6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	015a      	lsls	r2, r3, #5
 8013cf4:	69fb      	ldr	r3, [r7, #28]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfc:	691a      	ldr	r2, [r3, #16]
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	0159      	lsls	r1, r3, #5
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	440b      	add	r3, r1
 8013d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	4b7c      	ldr	r3, [pc, #496]	; (8013f00 <USB_EPStartXfer+0x534>)
 8013d0e:	4013      	ands	r3, r2
 8013d10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013d12:	69bb      	ldr	r3, [r7, #24]
 8013d14:	015a      	lsls	r2, r3, #5
 8013d16:	69fb      	ldr	r3, [r7, #28]
 8013d18:	4413      	add	r3, r2
 8013d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d1e:	691a      	ldr	r2, [r3, #16]
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	0159      	lsls	r1, r3, #5
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	440b      	add	r3, r1
 8013d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	4b75      	ldr	r3, [pc, #468]	; (8013f04 <USB_EPStartXfer+0x538>)
 8013d30:	4013      	ands	r3, r2
 8013d32:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d12f      	bne.n	8013d9a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	691b      	ldr	r3, [r3, #16]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d003      	beq.n	8013d4a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	689a      	ldr	r2, [r3, #8]
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	689a      	ldr	r2, [r3, #8]
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	015a      	lsls	r2, r3, #5
 8013d56:	69fb      	ldr	r3, [r7, #28]
 8013d58:	4413      	add	r3, r2
 8013d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d5e:	691a      	ldr	r2, [r3, #16]
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	6a1b      	ldr	r3, [r3, #32]
 8013d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013d68:	69b9      	ldr	r1, [r7, #24]
 8013d6a:	0148      	lsls	r0, r1, #5
 8013d6c:	69f9      	ldr	r1, [r7, #28]
 8013d6e:	4401      	add	r1, r0
 8013d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013d74:	4313      	orrs	r3, r2
 8013d76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d78:	69bb      	ldr	r3, [r7, #24]
 8013d7a:	015a      	lsls	r2, r3, #5
 8013d7c:	69fb      	ldr	r3, [r7, #28]
 8013d7e:	4413      	add	r3, r2
 8013d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d84:	691b      	ldr	r3, [r3, #16]
 8013d86:	69ba      	ldr	r2, [r7, #24]
 8013d88:	0151      	lsls	r1, r2, #5
 8013d8a:	69fa      	ldr	r2, [r7, #28]
 8013d8c:	440a      	add	r2, r1
 8013d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013d96:	6113      	str	r3, [r2, #16]
 8013d98:	e05f      	b.n	8013e5a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	691b      	ldr	r3, [r3, #16]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d123      	bne.n	8013dea <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013da2:	69bb      	ldr	r3, [r7, #24]
 8013da4:	015a      	lsls	r2, r3, #5
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	4413      	add	r3, r2
 8013daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dae:	691a      	ldr	r2, [r3, #16]
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	689b      	ldr	r3, [r3, #8]
 8013db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013db8:	69b9      	ldr	r1, [r7, #24]
 8013dba:	0148      	lsls	r0, r1, #5
 8013dbc:	69f9      	ldr	r1, [r7, #28]
 8013dbe:	4401      	add	r1, r0
 8013dc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013dc4:	4313      	orrs	r3, r2
 8013dc6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	015a      	lsls	r2, r3, #5
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	4413      	add	r3, r2
 8013dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd4:	691b      	ldr	r3, [r3, #16]
 8013dd6:	69ba      	ldr	r2, [r7, #24]
 8013dd8:	0151      	lsls	r1, r2, #5
 8013dda:	69fa      	ldr	r2, [r7, #28]
 8013ddc:	440a      	add	r2, r1
 8013dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013de2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013de6:	6113      	str	r3, [r2, #16]
 8013de8:	e037      	b.n	8013e5a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	691a      	ldr	r2, [r3, #16]
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	689b      	ldr	r3, [r3, #8]
 8013df2:	4413      	add	r3, r2
 8013df4:	1e5a      	subs	r2, r3, #1
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	689b      	ldr	r3, [r3, #8]
 8013dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8013dfe:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	689b      	ldr	r3, [r3, #8]
 8013e04:	8afa      	ldrh	r2, [r7, #22]
 8013e06:	fb03 f202 	mul.w	r2, r3, r2
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	015a      	lsls	r2, r3, #5
 8013e12:	69fb      	ldr	r3, [r7, #28]
 8013e14:	4413      	add	r3, r2
 8013e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e1a:	691a      	ldr	r2, [r3, #16]
 8013e1c:	8afb      	ldrh	r3, [r7, #22]
 8013e1e:	04d9      	lsls	r1, r3, #19
 8013e20:	4b39      	ldr	r3, [pc, #228]	; (8013f08 <USB_EPStartXfer+0x53c>)
 8013e22:	400b      	ands	r3, r1
 8013e24:	69b9      	ldr	r1, [r7, #24]
 8013e26:	0148      	lsls	r0, r1, #5
 8013e28:	69f9      	ldr	r1, [r7, #28]
 8013e2a:	4401      	add	r1, r0
 8013e2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e30:	4313      	orrs	r3, r2
 8013e32:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	015a      	lsls	r2, r3, #5
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	4413      	add	r3, r2
 8013e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e40:	691a      	ldr	r2, [r3, #16]
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	6a1b      	ldr	r3, [r3, #32]
 8013e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e4a:	69b9      	ldr	r1, [r7, #24]
 8013e4c:	0148      	lsls	r0, r1, #5
 8013e4e:	69f9      	ldr	r1, [r7, #28]
 8013e50:	4401      	add	r1, r0
 8013e52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e56:	4313      	orrs	r3, r2
 8013e58:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013e5a:	79fb      	ldrb	r3, [r7, #7]
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	d10d      	bne.n	8013e7c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d009      	beq.n	8013e7c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	68d9      	ldr	r1, [r3, #12]
 8013e6c:	69bb      	ldr	r3, [r7, #24]
 8013e6e:	015a      	lsls	r2, r3, #5
 8013e70:	69fb      	ldr	r3, [r7, #28]
 8013e72:	4413      	add	r3, r2
 8013e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e78:	460a      	mov	r2, r1
 8013e7a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	791b      	ldrb	r3, [r3, #4]
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	d128      	bne.n	8013ed6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013e84:	69fb      	ldr	r3, [r7, #28]
 8013e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e8a:	689b      	ldr	r3, [r3, #8]
 8013e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d110      	bne.n	8013eb6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013e94:	69bb      	ldr	r3, [r7, #24]
 8013e96:	015a      	lsls	r2, r3, #5
 8013e98:	69fb      	ldr	r3, [r7, #28]
 8013e9a:	4413      	add	r3, r2
 8013e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	69ba      	ldr	r2, [r7, #24]
 8013ea4:	0151      	lsls	r1, r2, #5
 8013ea6:	69fa      	ldr	r2, [r7, #28]
 8013ea8:	440a      	add	r2, r1
 8013eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013eae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013eb2:	6013      	str	r3, [r2, #0]
 8013eb4:	e00f      	b.n	8013ed6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013eb6:	69bb      	ldr	r3, [r7, #24]
 8013eb8:	015a      	lsls	r2, r3, #5
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	69ba      	ldr	r2, [r7, #24]
 8013ec6:	0151      	lsls	r1, r2, #5
 8013ec8:	69fa      	ldr	r2, [r7, #28]
 8013eca:	440a      	add	r2, r1
 8013ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ed4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013ed6:	69bb      	ldr	r3, [r7, #24]
 8013ed8:	015a      	lsls	r2, r3, #5
 8013eda:	69fb      	ldr	r3, [r7, #28]
 8013edc:	4413      	add	r3, r2
 8013ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	69ba      	ldr	r2, [r7, #24]
 8013ee6:	0151      	lsls	r1, r2, #5
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	440a      	add	r2, r1
 8013eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013ef4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3720      	adds	r7, #32
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	fff80000 	.word	0xfff80000
 8013f04:	e007ffff 	.word	0xe007ffff
 8013f08:	1ff80000 	.word	0x1ff80000

08013f0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b087      	sub	sp, #28
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013f16:	2300      	movs	r3, #0
 8013f18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	785b      	ldrb	r3, [r3, #1]
 8013f26:	2b01      	cmp	r3, #1
 8013f28:	d14a      	bne.n	8013fc0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	015a      	lsls	r2, r3, #5
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	4413      	add	r3, r2
 8013f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f42:	f040 8086 	bne.w	8014052 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	015a      	lsls	r2, r3, #5
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	4413      	add	r3, r2
 8013f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	683a      	ldr	r2, [r7, #0]
 8013f58:	7812      	ldrb	r2, [r2, #0]
 8013f5a:	0151      	lsls	r1, r2, #5
 8013f5c:	693a      	ldr	r2, [r7, #16]
 8013f5e:	440a      	add	r2, r1
 8013f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013f68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	015a      	lsls	r2, r3, #5
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	4413      	add	r3, r2
 8013f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	7812      	ldrb	r2, [r2, #0]
 8013f7e:	0151      	lsls	r1, r2, #5
 8013f80:	693a      	ldr	r2, [r7, #16]
 8013f82:	440a      	add	r2, r1
 8013f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	3301      	adds	r3, #1
 8013f92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	f242 7210 	movw	r2, #10000	; 0x2710
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d902      	bls.n	8013fa4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8013fa2:	e056      	b.n	8014052 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	015a      	lsls	r2, r3, #5
 8013faa:	693b      	ldr	r3, [r7, #16]
 8013fac:	4413      	add	r3, r2
 8013fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fbc:	d0e7      	beq.n	8013f8e <USB_EPStopXfer+0x82>
 8013fbe:	e048      	b.n	8014052 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	015a      	lsls	r2, r3, #5
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	4413      	add	r3, r2
 8013fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fd8:	d13b      	bne.n	8014052 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	015a      	lsls	r2, r3, #5
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	4413      	add	r3, r2
 8013fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	683a      	ldr	r2, [r7, #0]
 8013fec:	7812      	ldrb	r2, [r2, #0]
 8013fee:	0151      	lsls	r1, r2, #5
 8013ff0:	693a      	ldr	r2, [r7, #16]
 8013ff2:	440a      	add	r2, r1
 8013ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ff8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013ffc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	015a      	lsls	r2, r3, #5
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	4413      	add	r3, r2
 8014008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	683a      	ldr	r2, [r7, #0]
 8014010:	7812      	ldrb	r2, [r2, #0]
 8014012:	0151      	lsls	r1, r2, #5
 8014014:	693a      	ldr	r2, [r7, #16]
 8014016:	440a      	add	r2, r1
 8014018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801401c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014020:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	3301      	adds	r3, #1
 8014026:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	f242 7210 	movw	r2, #10000	; 0x2710
 801402e:	4293      	cmp	r3, r2
 8014030:	d902      	bls.n	8014038 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014032:	2301      	movs	r3, #1
 8014034:	75fb      	strb	r3, [r7, #23]
          break;
 8014036:	e00c      	b.n	8014052 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	015a      	lsls	r2, r3, #5
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	4413      	add	r3, r2
 8014042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801404c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014050:	d0e7      	beq.n	8014022 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014052:	7dfb      	ldrb	r3, [r7, #23]
}
 8014054:	4618      	mov	r0, r3
 8014056:	371c      	adds	r7, #28
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr

08014060 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014060:	b480      	push	{r7}
 8014062:	b089      	sub	sp, #36	; 0x24
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	4611      	mov	r1, r2
 801406c:	461a      	mov	r2, r3
 801406e:	460b      	mov	r3, r1
 8014070:	71fb      	strb	r3, [r7, #7]
 8014072:	4613      	mov	r3, r2
 8014074:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801407e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014082:	2b00      	cmp	r3, #0
 8014084:	d123      	bne.n	80140ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014086:	88bb      	ldrh	r3, [r7, #4]
 8014088:	3303      	adds	r3, #3
 801408a:	089b      	lsrs	r3, r3, #2
 801408c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801408e:	2300      	movs	r3, #0
 8014090:	61bb      	str	r3, [r7, #24]
 8014092:	e018      	b.n	80140c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014094:	79fb      	ldrb	r3, [r7, #7]
 8014096:	031a      	lsls	r2, r3, #12
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	4413      	add	r3, r2
 801409c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140a0:	461a      	mov	r2, r3
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	3301      	adds	r3, #1
 80140ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	3301      	adds	r3, #1
 80140b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80140b4:	69fb      	ldr	r3, [r7, #28]
 80140b6:	3301      	adds	r3, #1
 80140b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	3301      	adds	r3, #1
 80140be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	3301      	adds	r3, #1
 80140c4:	61bb      	str	r3, [r7, #24]
 80140c6:	69ba      	ldr	r2, [r7, #24]
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d3e2      	bcc.n	8014094 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80140ce:	2300      	movs	r3, #0
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3724      	adds	r7, #36	; 0x24
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr

080140dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80140dc:	b480      	push	{r7}
 80140de:	b08b      	sub	sp, #44	; 0x2c
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	4613      	mov	r3, r2
 80140e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80140f2:	88fb      	ldrh	r3, [r7, #6]
 80140f4:	089b      	lsrs	r3, r3, #2
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80140fa:	88fb      	ldrh	r3, [r7, #6]
 80140fc:	f003 0303 	and.w	r3, r3, #3
 8014100:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014102:	2300      	movs	r3, #0
 8014104:	623b      	str	r3, [r7, #32]
 8014106:	e014      	b.n	8014132 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014108:	69bb      	ldr	r3, [r7, #24]
 801410a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014112:	601a      	str	r2, [r3, #0]
    pDest++;
 8014114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014116:	3301      	adds	r3, #1
 8014118:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411c:	3301      	adds	r3, #1
 801411e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	3301      	adds	r3, #1
 8014124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	3301      	adds	r3, #1
 801412a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801412c:	6a3b      	ldr	r3, [r7, #32]
 801412e:	3301      	adds	r3, #1
 8014130:	623b      	str	r3, [r7, #32]
 8014132:	6a3a      	ldr	r2, [r7, #32]
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	429a      	cmp	r2, r3
 8014138:	d3e6      	bcc.n	8014108 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801413a:	8bfb      	ldrh	r3, [r7, #30]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d01e      	beq.n	801417e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014140:	2300      	movs	r3, #0
 8014142:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801414a:	461a      	mov	r2, r3
 801414c:	f107 0310 	add.w	r3, r7, #16
 8014150:	6812      	ldr	r2, [r2, #0]
 8014152:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014154:	693a      	ldr	r2, [r7, #16]
 8014156:	6a3b      	ldr	r3, [r7, #32]
 8014158:	b2db      	uxtb	r3, r3
 801415a:	00db      	lsls	r3, r3, #3
 801415c:	fa22 f303 	lsr.w	r3, r2, r3
 8014160:	b2da      	uxtb	r2, r3
 8014162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014164:	701a      	strb	r2, [r3, #0]
      i++;
 8014166:	6a3b      	ldr	r3, [r7, #32]
 8014168:	3301      	adds	r3, #1
 801416a:	623b      	str	r3, [r7, #32]
      pDest++;
 801416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416e:	3301      	adds	r3, #1
 8014170:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014172:	8bfb      	ldrh	r3, [r7, #30]
 8014174:	3b01      	subs	r3, #1
 8014176:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014178:	8bfb      	ldrh	r3, [r7, #30]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d1ea      	bne.n	8014154 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014180:	4618      	mov	r0, r3
 8014182:	372c      	adds	r7, #44	; 0x2c
 8014184:	46bd      	mov	sp, r7
 8014186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418a:	4770      	bx	lr

0801418c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801418c:	b480      	push	{r7}
 801418e:	b085      	sub	sp, #20
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	785b      	ldrb	r3, [r3, #1]
 80141a4:	2b01      	cmp	r3, #1
 80141a6:	d12c      	bne.n	8014202 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	015a      	lsls	r2, r3, #5
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	4413      	add	r3, r2
 80141b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	db12      	blt.n	80141e0 <USB_EPSetStall+0x54>
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00f      	beq.n	80141e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	015a      	lsls	r2, r3, #5
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	4413      	add	r3, r2
 80141c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	68ba      	ldr	r2, [r7, #8]
 80141d0:	0151      	lsls	r1, r2, #5
 80141d2:	68fa      	ldr	r2, [r7, #12]
 80141d4:	440a      	add	r2, r1
 80141d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80141de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	015a      	lsls	r2, r3, #5
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	4413      	add	r3, r2
 80141e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	68ba      	ldr	r2, [r7, #8]
 80141f0:	0151      	lsls	r1, r2, #5
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	440a      	add	r2, r1
 80141f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80141fe:	6013      	str	r3, [r2, #0]
 8014200:	e02b      	b.n	801425a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	015a      	lsls	r2, r3, #5
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	4413      	add	r3, r2
 801420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	db12      	blt.n	801423a <USB_EPSetStall+0xae>
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d00f      	beq.n	801423a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	015a      	lsls	r2, r3, #5
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	4413      	add	r3, r2
 8014222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	68ba      	ldr	r2, [r7, #8]
 801422a:	0151      	lsls	r1, r2, #5
 801422c:	68fa      	ldr	r2, [r7, #12]
 801422e:	440a      	add	r2, r1
 8014230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014238:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	015a      	lsls	r2, r3, #5
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	4413      	add	r3, r2
 8014242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	68ba      	ldr	r2, [r7, #8]
 801424a:	0151      	lsls	r1, r2, #5
 801424c:	68fa      	ldr	r2, [r7, #12]
 801424e:	440a      	add	r2, r1
 8014250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014258:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801425a:	2300      	movs	r3, #0
}
 801425c:	4618      	mov	r0, r3
 801425e:	3714      	adds	r7, #20
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr

08014268 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014268:	b480      	push	{r7}
 801426a:	b085      	sub	sp, #20
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	785b      	ldrb	r3, [r3, #1]
 8014280:	2b01      	cmp	r3, #1
 8014282:	d128      	bne.n	80142d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	015a      	lsls	r2, r3, #5
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	4413      	add	r3, r2
 801428c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	68ba      	ldr	r2, [r7, #8]
 8014294:	0151      	lsls	r1, r2, #5
 8014296:	68fa      	ldr	r2, [r7, #12]
 8014298:	440a      	add	r2, r1
 801429a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801429e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80142a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	791b      	ldrb	r3, [r3, #4]
 80142a8:	2b03      	cmp	r3, #3
 80142aa:	d003      	beq.n	80142b4 <USB_EPClearStall+0x4c>
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	791b      	ldrb	r3, [r3, #4]
 80142b0:	2b02      	cmp	r3, #2
 80142b2:	d138      	bne.n	8014326 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	015a      	lsls	r2, r3, #5
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	4413      	add	r3, r2
 80142bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	0151      	lsls	r1, r2, #5
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	440a      	add	r2, r1
 80142ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142d2:	6013      	str	r3, [r2, #0]
 80142d4:	e027      	b.n	8014326 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	015a      	lsls	r2, r3, #5
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	4413      	add	r3, r2
 80142de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	68ba      	ldr	r2, [r7, #8]
 80142e6:	0151      	lsls	r1, r2, #5
 80142e8:	68fa      	ldr	r2, [r7, #12]
 80142ea:	440a      	add	r2, r1
 80142ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80142f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	791b      	ldrb	r3, [r3, #4]
 80142fa:	2b03      	cmp	r3, #3
 80142fc:	d003      	beq.n	8014306 <USB_EPClearStall+0x9e>
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	791b      	ldrb	r3, [r3, #4]
 8014302:	2b02      	cmp	r3, #2
 8014304:	d10f      	bne.n	8014326 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	015a      	lsls	r2, r3, #5
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	4413      	add	r3, r2
 801430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	68ba      	ldr	r2, [r7, #8]
 8014316:	0151      	lsls	r1, r2, #5
 8014318:	68fa      	ldr	r2, [r7, #12]
 801431a:	440a      	add	r2, r1
 801431c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014324:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014326:	2300      	movs	r3, #0
}
 8014328:	4618      	mov	r0, r3
 801432a:	3714      	adds	r7, #20
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014334:	b480      	push	{r7}
 8014336:	b085      	sub	sp, #20
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	460b      	mov	r3, r1
 801433e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	68fa      	ldr	r2, [r7, #12]
 801434e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014352:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014356:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	78fb      	ldrb	r3, [r7, #3]
 8014362:	011b      	lsls	r3, r3, #4
 8014364:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014368:	68f9      	ldr	r1, [r7, #12]
 801436a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801436e:	4313      	orrs	r3, r2
 8014370:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014372:	2300      	movs	r3, #0
}
 8014374:	4618      	mov	r0, r3
 8014376:	3714      	adds	r7, #20
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014380:	b480      	push	{r7}
 8014382:	b085      	sub	sp, #20
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	68fa      	ldr	r2, [r7, #12]
 8014396:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801439a:	f023 0303 	bic.w	r3, r3, #3
 801439e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	68fa      	ldr	r2, [r7, #12]
 80143aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80143ae:	f023 0302 	bic.w	r3, r3, #2
 80143b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80143b4:	2300      	movs	r3, #0
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3714      	adds	r7, #20
 80143ba:	46bd      	mov	sp, r7
 80143bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c0:	4770      	bx	lr

080143c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80143c2:	b480      	push	{r7}
 80143c4:	b085      	sub	sp, #20
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	68fa      	ldr	r2, [r7, #12]
 80143d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80143dc:	f023 0303 	bic.w	r3, r3, #3
 80143e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	68fa      	ldr	r2, [r7, #12]
 80143ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80143f0:	f043 0302 	orr.w	r3, r3, #2
 80143f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80143f6:	2300      	movs	r3, #0
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3714      	adds	r7, #20
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr

08014404 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014404:	b480      	push	{r7}
 8014406:	b085      	sub	sp, #20
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	695b      	ldr	r3, [r3, #20]
 8014410:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	699b      	ldr	r3, [r3, #24]
 8014416:	68fa      	ldr	r2, [r7, #12]
 8014418:	4013      	ands	r3, r2
 801441a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801441c:	68fb      	ldr	r3, [r7, #12]
}
 801441e:	4618      	mov	r0, r3
 8014420:	3714      	adds	r7, #20
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr

0801442a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801442a:	b480      	push	{r7}
 801442c:	b085      	sub	sp, #20
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801443c:	699b      	ldr	r3, [r3, #24]
 801443e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014446:	69db      	ldr	r3, [r3, #28]
 8014448:	68ba      	ldr	r2, [r7, #8]
 801444a:	4013      	ands	r3, r2
 801444c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	0c1b      	lsrs	r3, r3, #16
}
 8014452:	4618      	mov	r0, r3
 8014454:	3714      	adds	r7, #20
 8014456:	46bd      	mov	sp, r7
 8014458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445c:	4770      	bx	lr

0801445e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801445e:	b480      	push	{r7}
 8014460:	b085      	sub	sp, #20
 8014462:	af00      	add	r7, sp, #0
 8014464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014470:	699b      	ldr	r3, [r3, #24]
 8014472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801447a:	69db      	ldr	r3, [r3, #28]
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	4013      	ands	r3, r2
 8014480:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	b29b      	uxth	r3, r3
}
 8014486:	4618      	mov	r0, r3
 8014488:	3714      	adds	r7, #20
 801448a:	46bd      	mov	sp, r7
 801448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014490:	4770      	bx	lr

08014492 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014492:	b480      	push	{r7}
 8014494:	b085      	sub	sp, #20
 8014496:	af00      	add	r7, sp, #0
 8014498:	6078      	str	r0, [r7, #4]
 801449a:	460b      	mov	r3, r1
 801449c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80144a2:	78fb      	ldrb	r3, [r7, #3]
 80144a4:	015a      	lsls	r2, r3, #5
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	4413      	add	r3, r2
 80144aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144ae:	689b      	ldr	r3, [r3, #8]
 80144b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144b8:	695b      	ldr	r3, [r3, #20]
 80144ba:	68ba      	ldr	r2, [r7, #8]
 80144bc:	4013      	ands	r3, r2
 80144be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80144c0:	68bb      	ldr	r3, [r7, #8]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3714      	adds	r7, #20
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80144ce:	b480      	push	{r7}
 80144d0:	b087      	sub	sp, #28
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	460b      	mov	r3, r1
 80144d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144e4:	691b      	ldr	r3, [r3, #16]
 80144e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80144f2:	78fb      	ldrb	r3, [r7, #3]
 80144f4:	f003 030f 	and.w	r3, r3, #15
 80144f8:	68fa      	ldr	r2, [r7, #12]
 80144fa:	fa22 f303 	lsr.w	r3, r2, r3
 80144fe:	01db      	lsls	r3, r3, #7
 8014500:	b2db      	uxtb	r3, r3
 8014502:	693a      	ldr	r2, [r7, #16]
 8014504:	4313      	orrs	r3, r2
 8014506:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014508:	78fb      	ldrb	r3, [r7, #3]
 801450a:	015a      	lsls	r2, r3, #5
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	4413      	add	r3, r2
 8014510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014514:	689b      	ldr	r3, [r3, #8]
 8014516:	693a      	ldr	r2, [r7, #16]
 8014518:	4013      	ands	r3, r2
 801451a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801451c:	68bb      	ldr	r3, [r7, #8]
}
 801451e:	4618      	mov	r0, r3
 8014520:	371c      	adds	r7, #28
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr

0801452a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801452a:	b480      	push	{r7}
 801452c:	b083      	sub	sp, #12
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	695b      	ldr	r3, [r3, #20]
 8014536:	f003 0301 	and.w	r3, r3, #1
}
 801453a:	4618      	mov	r0, r3
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr
	...

08014548 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014548:	b480      	push	{r7}
 801454a:	b085      	sub	sp, #20
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014562:	4619      	mov	r1, r3
 8014564:	4b09      	ldr	r3, [pc, #36]	; (801458c <USB_ActivateSetup+0x44>)
 8014566:	4013      	ands	r3, r2
 8014568:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014570:	685b      	ldr	r3, [r3, #4]
 8014572:	68fa      	ldr	r2, [r7, #12]
 8014574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801457c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801457e:	2300      	movs	r3, #0
}
 8014580:	4618      	mov	r0, r3
 8014582:	3714      	adds	r7, #20
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr
 801458c:	fffff800 	.word	0xfffff800

08014590 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014590:	b480      	push	{r7}
 8014592:	b087      	sub	sp, #28
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	460b      	mov	r3, r1
 801459a:	607a      	str	r2, [r7, #4]
 801459c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	333c      	adds	r3, #60	; 0x3c
 80145a6:	3304      	adds	r3, #4
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	4a26      	ldr	r2, [pc, #152]	; (8014648 <USB_EP0_OutStart+0xb8>)
 80145b0:	4293      	cmp	r3, r2
 80145b2:	d90a      	bls.n	80145ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80145c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80145c4:	d101      	bne.n	80145ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80145c6:	2300      	movs	r3, #0
 80145c8:	e037      	b.n	801463a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145d0:	461a      	mov	r2, r3
 80145d2:	2300      	movs	r3, #0
 80145d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145dc:	691b      	ldr	r3, [r3, #16]
 80145de:	697a      	ldr	r2, [r7, #20]
 80145e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80145e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f0:	691b      	ldr	r3, [r3, #16]
 80145f2:	697a      	ldr	r2, [r7, #20]
 80145f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145f8:	f043 0318 	orr.w	r3, r3, #24
 80145fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014604:	691b      	ldr	r3, [r3, #16]
 8014606:	697a      	ldr	r2, [r7, #20]
 8014608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801460c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014610:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014612:	7afb      	ldrb	r3, [r7, #11]
 8014614:	2b01      	cmp	r3, #1
 8014616:	d10f      	bne.n	8014638 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801461e:	461a      	mov	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	697a      	ldr	r2, [r7, #20]
 801462e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014632:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014636:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014638:	2300      	movs	r3, #0
}
 801463a:	4618      	mov	r0, r3
 801463c:	371c      	adds	r7, #28
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	4f54300a 	.word	0x4f54300a

0801464c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801464c:	b480      	push	{r7}
 801464e:	b085      	sub	sp, #20
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014654:	2300      	movs	r3, #0
 8014656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	3301      	adds	r3, #1
 801465c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	4a13      	ldr	r2, [pc, #76]	; (80146b0 <USB_CoreReset+0x64>)
 8014662:	4293      	cmp	r3, r2
 8014664:	d901      	bls.n	801466a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014666:	2303      	movs	r3, #3
 8014668:	e01b      	b.n	80146a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	2b00      	cmp	r3, #0
 8014670:	daf2      	bge.n	8014658 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014672:	2300      	movs	r3, #0
 8014674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	691b      	ldr	r3, [r3, #16]
 801467a:	f043 0201 	orr.w	r2, r3, #1
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	3301      	adds	r3, #1
 8014686:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	4a09      	ldr	r2, [pc, #36]	; (80146b0 <USB_CoreReset+0x64>)
 801468c:	4293      	cmp	r3, r2
 801468e:	d901      	bls.n	8014694 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014690:	2303      	movs	r3, #3
 8014692:	e006      	b.n	80146a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	691b      	ldr	r3, [r3, #16]
 8014698:	f003 0301 	and.w	r3, r3, #1
 801469c:	2b01      	cmp	r3, #1
 801469e:	d0f0      	beq.n	8014682 <USB_CoreReset+0x36>

  return HAL_OK;
 80146a0:	2300      	movs	r3, #0
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3714      	adds	r7, #20
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr
 80146ae:	bf00      	nop
 80146b0:	00030d40 	.word	0x00030d40

080146b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80146b8:	4904      	ldr	r1, [pc, #16]	; (80146cc <MX_FATFS_Init+0x18>)
 80146ba:	4805      	ldr	r0, [pc, #20]	; (80146d0 <MX_FATFS_Init+0x1c>)
 80146bc:	f002 fa80 	bl	8016bc0 <FATFS_LinkDriver>
 80146c0:	4603      	mov	r3, r0
 80146c2:	461a      	mov	r2, r3
 80146c4:	4b03      	ldr	r3, [pc, #12]	; (80146d4 <MX_FATFS_Init+0x20>)
 80146c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80146c8:	bf00      	nop
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	240015f0 	.word	0x240015f0
 80146d0:	08018b9c 	.word	0x08018b9c
 80146d4:	240015ec 	.word	0x240015ec

080146d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80146de:	2300      	movs	r3, #0
 80146e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80146e2:	f000 f885 	bl	80147f0 <BSP_SD_IsDetected>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d001      	beq.n	80146f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80146ec:	2302      	movs	r3, #2
 80146ee:	e012      	b.n	8014716 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80146f0:	480b      	ldr	r0, [pc, #44]	; (8014720 <BSP_SD_Init+0x48>)
 80146f2:	f7f8 ff41 	bl	800d578 <HAL_SD_Init>
 80146f6:	4603      	mov	r3, r0
 80146f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80146fa:	79fb      	ldrb	r3, [r7, #7]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d109      	bne.n	8014714 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014704:	4806      	ldr	r0, [pc, #24]	; (8014720 <BSP_SD_Init+0x48>)
 8014706:	f7f9 fdf7 	bl	800e2f8 <HAL_SD_ConfigWideBusOperation>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d001      	beq.n	8014714 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014710:	2301      	movs	r3, #1
 8014712:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014714:	79fb      	ldrb	r3, [r7, #7]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3708      	adds	r7, #8
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}
 801471e:	bf00      	nop
 8014720:	24000ed4 	.word	0x24000ed4

08014724 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	68ba      	ldr	r2, [r7, #8]
 8014738:	68f9      	ldr	r1, [r7, #12]
 801473a:	4806      	ldr	r0, [pc, #24]	; (8014754 <BSP_SD_ReadBlocks_DMA+0x30>)
 801473c:	f7f9 f83c 	bl	800d7b8 <HAL_SD_ReadBlocks_DMA>
 8014740:	4603      	mov	r3, r0
 8014742:	2b00      	cmp	r3, #0
 8014744:	d001      	beq.n	801474a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014746:	2301      	movs	r3, #1
 8014748:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801474a:	7dfb      	ldrb	r3, [r7, #23]
}
 801474c:	4618      	mov	r0, r3
 801474e:	3718      	adds	r7, #24
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	24000ed4 	.word	0x24000ed4

08014758 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b086      	sub	sp, #24
 801475c:	af00      	add	r7, sp, #0
 801475e:	60f8      	str	r0, [r7, #12]
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014764:	2300      	movs	r3, #0
 8014766:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	68f9      	ldr	r1, [r7, #12]
 801476e:	4806      	ldr	r0, [pc, #24]	; (8014788 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014770:	f7f9 f8ca 	bl	800d908 <HAL_SD_WriteBlocks_DMA>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d001      	beq.n	801477e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801477a:	2301      	movs	r3, #1
 801477c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801477e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014780:	4618      	mov	r0, r3
 8014782:	3718      	adds	r7, #24
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}
 8014788:	24000ed4 	.word	0x24000ed4

0801478c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014790:	4805      	ldr	r0, [pc, #20]	; (80147a8 <BSP_SD_GetCardState+0x1c>)
 8014792:	f7f9 fec3 	bl	800e51c <HAL_SD_GetCardState>
 8014796:	4603      	mov	r3, r0
 8014798:	2b04      	cmp	r3, #4
 801479a:	bf14      	ite	ne
 801479c:	2301      	movne	r3, #1
 801479e:	2300      	moveq	r3, #0
 80147a0:	b2db      	uxtb	r3, r3
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	24000ed4 	.word	0x24000ed4

080147ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80147b4:	6879      	ldr	r1, [r7, #4]
 80147b6:	4803      	ldr	r0, [pc, #12]	; (80147c4 <BSP_SD_GetCardInfo+0x18>)
 80147b8:	f7f9 fd72 	bl	800e2a0 <HAL_SD_GetCardInfo>
}
 80147bc:	bf00      	nop
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	24000ed4 	.word	0x24000ed4

080147c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80147d0:	f000 f9a0 	bl	8014b14 <BSP_SD_WriteCpltCallback>
}
 80147d4:	bf00      	nop
 80147d6:	3708      	adds	r7, #8
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80147e4:	f000 f9a2 	bl	8014b2c <BSP_SD_ReadCpltCallback>
}
 80147e8:	bf00      	nop
 80147ea:	3708      	adds	r7, #8
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80147f6:	2301      	movs	r3, #1
 80147f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80147fa:	f000 f80b 	bl	8014814 <BSP_PlatformIsDetected>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d101      	bne.n	8014808 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014804:	2300      	movs	r3, #0
 8014806:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014808:	79fb      	ldrb	r3, [r7, #7]
 801480a:	b2db      	uxtb	r3, r3
}
 801480c:	4618      	mov	r0, r3
 801480e:	3708      	adds	r7, #8
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801481a:	2301      	movs	r3, #1
 801481c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801481e:	2104      	movs	r1, #4
 8014820:	4806      	ldr	r0, [pc, #24]	; (801483c <BSP_PlatformIsDetected+0x28>)
 8014822:	f7f3 fccf 	bl	80081c4 <HAL_GPIO_ReadPin>
 8014826:	4603      	mov	r3, r0
 8014828:	2b00      	cmp	r3, #0
 801482a:	d001      	beq.n	8014830 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801482c:	2300      	movs	r3, #0
 801482e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014830:	79fb      	ldrb	r3, [r7, #7]
}
 8014832:	4618      	mov	r0, r3
 8014834:	3708      	adds	r7, #8
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	58020400 	.word	0x58020400

08014840 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014848:	f7ef fa16 	bl	8003c78 <HAL_GetTick>
 801484c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801484e:	e006      	b.n	801485e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014850:	f7ff ff9c 	bl	801478c <BSP_SD_GetCardState>
 8014854:	4603      	mov	r3, r0
 8014856:	2b00      	cmp	r3, #0
 8014858:	d101      	bne.n	801485e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801485a:	2300      	movs	r3, #0
 801485c:	e009      	b.n	8014872 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801485e:	f7ef fa0b 	bl	8003c78 <HAL_GetTick>
 8014862:	4602      	mov	r2, r0
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	687a      	ldr	r2, [r7, #4]
 801486a:	429a      	cmp	r2, r3
 801486c:	d8f0      	bhi.n	8014850 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801486e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014872:	4618      	mov	r0, r3
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
	...

0801487c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	4603      	mov	r3, r0
 8014884:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014886:	4b0b      	ldr	r3, [pc, #44]	; (80148b4 <SD_CheckStatus+0x38>)
 8014888:	2201      	movs	r2, #1
 801488a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801488c:	f7ff ff7e 	bl	801478c <BSP_SD_GetCardState>
 8014890:	4603      	mov	r3, r0
 8014892:	2b00      	cmp	r3, #0
 8014894:	d107      	bne.n	80148a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014896:	4b07      	ldr	r3, [pc, #28]	; (80148b4 <SD_CheckStatus+0x38>)
 8014898:	781b      	ldrb	r3, [r3, #0]
 801489a:	b2db      	uxtb	r3, r3
 801489c:	f023 0301 	bic.w	r3, r3, #1
 80148a0:	b2da      	uxtb	r2, r3
 80148a2:	4b04      	ldr	r3, [pc, #16]	; (80148b4 <SD_CheckStatus+0x38>)
 80148a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80148a6:	4b03      	ldr	r3, [pc, #12]	; (80148b4 <SD_CheckStatus+0x38>)
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	b2db      	uxtb	r3, r3
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	2400000d 	.word	0x2400000d

080148b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	4603      	mov	r3, r0
 80148c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80148c2:	f7ff ff09 	bl	80146d8 <BSP_SD_Init>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d107      	bne.n	80148dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80148cc:	79fb      	ldrb	r3, [r7, #7]
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7ff ffd4 	bl	801487c <SD_CheckStatus>
 80148d4:	4603      	mov	r3, r0
 80148d6:	461a      	mov	r2, r3
 80148d8:	4b04      	ldr	r3, [pc, #16]	; (80148ec <SD_initialize+0x34>)
 80148da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80148dc:	4b03      	ldr	r3, [pc, #12]	; (80148ec <SD_initialize+0x34>)
 80148de:	781b      	ldrb	r3, [r3, #0]
 80148e0:	b2db      	uxtb	r3, r3
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	2400000d 	.word	0x2400000d

080148f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	4603      	mov	r3, r0
 80148f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80148fa:	79fb      	ldrb	r3, [r7, #7]
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7ff ffbd 	bl	801487c <SD_CheckStatus>
 8014902:	4603      	mov	r3, r0
}
 8014904:	4618      	mov	r0, r3
 8014906:	3708      	adds	r7, #8
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}

0801490c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b086      	sub	sp, #24
 8014910:	af00      	add	r7, sp, #0
 8014912:	60b9      	str	r1, [r7, #8]
 8014914:	607a      	str	r2, [r7, #4]
 8014916:	603b      	str	r3, [r7, #0]
 8014918:	4603      	mov	r3, r0
 801491a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801491c:	2301      	movs	r3, #1
 801491e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014920:	f247 5030 	movw	r0, #30000	; 0x7530
 8014924:	f7ff ff8c 	bl	8014840 <SD_CheckStatusWithTimeout>
 8014928:	4603      	mov	r3, r0
 801492a:	2b00      	cmp	r3, #0
 801492c:	da01      	bge.n	8014932 <SD_read+0x26>
  {
    return res;
 801492e:	7dfb      	ldrb	r3, [r7, #23]
 8014930:	e03b      	b.n	80149aa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014932:	683a      	ldr	r2, [r7, #0]
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	68b8      	ldr	r0, [r7, #8]
 8014938:	f7ff fef4 	bl	8014724 <BSP_SD_ReadBlocks_DMA>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d132      	bne.n	80149a8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014942:	4b1c      	ldr	r3, [pc, #112]	; (80149b4 <SD_read+0xa8>)
 8014944:	2200      	movs	r2, #0
 8014946:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014948:	f7ef f996 	bl	8003c78 <HAL_GetTick>
 801494c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801494e:	bf00      	nop
 8014950:	4b18      	ldr	r3, [pc, #96]	; (80149b4 <SD_read+0xa8>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d108      	bne.n	801496a <SD_read+0x5e>
 8014958:	f7ef f98e 	bl	8003c78 <HAL_GetTick>
 801495c:	4602      	mov	r2, r0
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	f247 522f 	movw	r2, #29999	; 0x752f
 8014966:	4293      	cmp	r3, r2
 8014968:	d9f2      	bls.n	8014950 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801496a:	4b12      	ldr	r3, [pc, #72]	; (80149b4 <SD_read+0xa8>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d102      	bne.n	8014978 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014972:	2301      	movs	r3, #1
 8014974:	75fb      	strb	r3, [r7, #23]
 8014976:	e017      	b.n	80149a8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014978:	4b0e      	ldr	r3, [pc, #56]	; (80149b4 <SD_read+0xa8>)
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801497e:	f7ef f97b 	bl	8003c78 <HAL_GetTick>
 8014982:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014984:	e007      	b.n	8014996 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014986:	f7ff ff01 	bl	801478c <BSP_SD_GetCardState>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d102      	bne.n	8014996 <SD_read+0x8a>
          {
            res = RES_OK;
 8014990:	2300      	movs	r3, #0
 8014992:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014994:	e008      	b.n	80149a8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014996:	f7ef f96f 	bl	8003c78 <HAL_GetTick>
 801499a:	4602      	mov	r2, r0
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	1ad3      	subs	r3, r2, r3
 80149a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80149a4:	4293      	cmp	r3, r2
 80149a6:	d9ee      	bls.n	8014986 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80149a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3718      	adds	r7, #24
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	240015f8 	.word	0x240015f8

080149b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b086      	sub	sp, #24
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60b9      	str	r1, [r7, #8]
 80149c0:	607a      	str	r2, [r7, #4]
 80149c2:	603b      	str	r3, [r7, #0]
 80149c4:	4603      	mov	r3, r0
 80149c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80149c8:	2301      	movs	r3, #1
 80149ca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80149cc:	4b24      	ldr	r3, [pc, #144]	; (8014a60 <SD_write+0xa8>)
 80149ce:	2200      	movs	r2, #0
 80149d0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80149d2:	f247 5030 	movw	r0, #30000	; 0x7530
 80149d6:	f7ff ff33 	bl	8014840 <SD_CheckStatusWithTimeout>
 80149da:	4603      	mov	r3, r0
 80149dc:	2b00      	cmp	r3, #0
 80149de:	da01      	bge.n	80149e4 <SD_write+0x2c>
  {
    return res;
 80149e0:	7dfb      	ldrb	r3, [r7, #23]
 80149e2:	e038      	b.n	8014a56 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80149e4:	683a      	ldr	r2, [r7, #0]
 80149e6:	6879      	ldr	r1, [r7, #4]
 80149e8:	68b8      	ldr	r0, [r7, #8]
 80149ea:	f7ff feb5 	bl	8014758 <BSP_SD_WriteBlocks_DMA>
 80149ee:	4603      	mov	r3, r0
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d12f      	bne.n	8014a54 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80149f4:	f7ef f940 	bl	8003c78 <HAL_GetTick>
 80149f8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80149fa:	bf00      	nop
 80149fc:	4b18      	ldr	r3, [pc, #96]	; (8014a60 <SD_write+0xa8>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d108      	bne.n	8014a16 <SD_write+0x5e>
 8014a04:	f7ef f938 	bl	8003c78 <HAL_GetTick>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014a12:	4293      	cmp	r3, r2
 8014a14:	d9f2      	bls.n	80149fc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014a16:	4b12      	ldr	r3, [pc, #72]	; (8014a60 <SD_write+0xa8>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d102      	bne.n	8014a24 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	75fb      	strb	r3, [r7, #23]
 8014a22:	e017      	b.n	8014a54 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014a24:	4b0e      	ldr	r3, [pc, #56]	; (8014a60 <SD_write+0xa8>)
 8014a26:	2200      	movs	r2, #0
 8014a28:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014a2a:	f7ef f925 	bl	8003c78 <HAL_GetTick>
 8014a2e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a30:	e007      	b.n	8014a42 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014a32:	f7ff feab 	bl	801478c <BSP_SD_GetCardState>
 8014a36:	4603      	mov	r3, r0
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d102      	bne.n	8014a42 <SD_write+0x8a>
          {
            res = RES_OK;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8014a40:	e008      	b.n	8014a54 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a42:	f7ef f919 	bl	8003c78 <HAL_GetTick>
 8014a46:	4602      	mov	r2, r0
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	1ad3      	subs	r3, r2, r3
 8014a4c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014a50:	4293      	cmp	r3, r2
 8014a52:	d9ee      	bls.n	8014a32 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3718      	adds	r7, #24
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	240015f4 	.word	0x240015f4

08014a64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b08c      	sub	sp, #48	; 0x30
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	603a      	str	r2, [r7, #0]
 8014a6e:	71fb      	strb	r3, [r7, #7]
 8014a70:	460b      	mov	r3, r1
 8014a72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014a74:	2301      	movs	r3, #1
 8014a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014a7a:	4b25      	ldr	r3, [pc, #148]	; (8014b10 <SD_ioctl+0xac>)
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	f003 0301 	and.w	r3, r3, #1
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d001      	beq.n	8014a8c <SD_ioctl+0x28>
 8014a88:	2303      	movs	r3, #3
 8014a8a:	e03c      	b.n	8014b06 <SD_ioctl+0xa2>

  switch (cmd)
 8014a8c:	79bb      	ldrb	r3, [r7, #6]
 8014a8e:	2b03      	cmp	r3, #3
 8014a90:	d834      	bhi.n	8014afc <SD_ioctl+0x98>
 8014a92:	a201      	add	r2, pc, #4	; (adr r2, 8014a98 <SD_ioctl+0x34>)
 8014a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a98:	08014aa9 	.word	0x08014aa9
 8014a9c:	08014ab1 	.word	0x08014ab1
 8014aa0:	08014ac9 	.word	0x08014ac9
 8014aa4:	08014ae3 	.word	0x08014ae3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014aae:	e028      	b.n	8014b02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014ab0:	f107 0308 	add.w	r3, r7, #8
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7ff fe79 	bl	80147ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014aba:	6a3a      	ldr	r2, [r7, #32]
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014ac6:	e01c      	b.n	8014b02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014ac8:	f107 0308 	add.w	r3, r7, #8
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7ff fe6d 	bl	80147ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014ae0:	e00f      	b.n	8014b02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014ae2:	f107 0308 	add.w	r3, r7, #8
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7ff fe60 	bl	80147ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aee:	0a5a      	lsrs	r2, r3, #9
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014af4:	2300      	movs	r3, #0
 8014af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014afa:	e002      	b.n	8014b02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014afc:	2304      	movs	r3, #4
 8014afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3730      	adds	r7, #48	; 0x30
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}
 8014b0e:	bf00      	nop
 8014b10:	2400000d 	.word	0x2400000d

08014b14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014b14:	b480      	push	{r7}
 8014b16:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014b18:	4b03      	ldr	r3, [pc, #12]	; (8014b28 <BSP_SD_WriteCpltCallback+0x14>)
 8014b1a:	2201      	movs	r2, #1
 8014b1c:	601a      	str	r2, [r3, #0]
}
 8014b1e:	bf00      	nop
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr
 8014b28:	240015f4 	.word	0x240015f4

08014b2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014b30:	4b03      	ldr	r3, [pc, #12]	; (8014b40 <BSP_SD_ReadCpltCallback+0x14>)
 8014b32:	2201      	movs	r2, #1
 8014b34:	601a      	str	r2, [r3, #0]
}
 8014b36:	bf00      	nop
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3e:	4770      	bx	lr
 8014b40:	240015f8 	.word	0x240015f8

08014b44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b084      	sub	sp, #16
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	460b      	mov	r3, r1
 8014b4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014b50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014b54:	f002 fd2a 	bl	80175ac <USBD_static_malloc>
 8014b58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d109      	bne.n	8014b74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	32b0      	adds	r2, #176	; 0xb0
 8014b6a:	2100      	movs	r1, #0
 8014b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014b70:	2302      	movs	r3, #2
 8014b72:	e0d4      	b.n	8014d1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014b74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014b78:	2100      	movs	r1, #0
 8014b7a:	68f8      	ldr	r0, [r7, #12]
 8014b7c:	f002 fda8 	bl	80176d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	32b0      	adds	r2, #176	; 0xb0
 8014b8a:	68f9      	ldr	r1, [r7, #12]
 8014b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	32b0      	adds	r2, #176	; 0xb0
 8014b9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	7c1b      	ldrb	r3, [r3, #16]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d138      	bne.n	8014c1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014bac:	4b5e      	ldr	r3, [pc, #376]	; (8014d28 <USBD_CDC_Init+0x1e4>)
 8014bae:	7819      	ldrb	r1, [r3, #0]
 8014bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014bb4:	2202      	movs	r2, #2
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f002 fbd5 	bl	8017366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014bbc:	4b5a      	ldr	r3, [pc, #360]	; (8014d28 <USBD_CDC_Init+0x1e4>)
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	f003 020f 	and.w	r2, r3, #15
 8014bc4:	6879      	ldr	r1, [r7, #4]
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	009b      	lsls	r3, r3, #2
 8014bca:	4413      	add	r3, r2
 8014bcc:	009b      	lsls	r3, r3, #2
 8014bce:	440b      	add	r3, r1
 8014bd0:	3324      	adds	r3, #36	; 0x24
 8014bd2:	2201      	movs	r2, #1
 8014bd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014bd6:	4b55      	ldr	r3, [pc, #340]	; (8014d2c <USBD_CDC_Init+0x1e8>)
 8014bd8:	7819      	ldrb	r1, [r3, #0]
 8014bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014bde:	2202      	movs	r2, #2
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f002 fbc0 	bl	8017366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014be6:	4b51      	ldr	r3, [pc, #324]	; (8014d2c <USBD_CDC_Init+0x1e8>)
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	f003 020f 	and.w	r2, r3, #15
 8014bee:	6879      	ldr	r1, [r7, #4]
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	009b      	lsls	r3, r3, #2
 8014bf4:	4413      	add	r3, r2
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	440b      	add	r3, r1
 8014bfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014bfe:	2201      	movs	r2, #1
 8014c00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014c02:	4b4b      	ldr	r3, [pc, #300]	; (8014d30 <USBD_CDC_Init+0x1ec>)
 8014c04:	781b      	ldrb	r3, [r3, #0]
 8014c06:	f003 020f 	and.w	r2, r3, #15
 8014c0a:	6879      	ldr	r1, [r7, #4]
 8014c0c:	4613      	mov	r3, r2
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	4413      	add	r3, r2
 8014c12:	009b      	lsls	r3, r3, #2
 8014c14:	440b      	add	r3, r1
 8014c16:	3326      	adds	r3, #38	; 0x26
 8014c18:	2210      	movs	r2, #16
 8014c1a:	801a      	strh	r2, [r3, #0]
 8014c1c:	e035      	b.n	8014c8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014c1e:	4b42      	ldr	r3, [pc, #264]	; (8014d28 <USBD_CDC_Init+0x1e4>)
 8014c20:	7819      	ldrb	r1, [r3, #0]
 8014c22:	2340      	movs	r3, #64	; 0x40
 8014c24:	2202      	movs	r2, #2
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f002 fb9d 	bl	8017366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014c2c:	4b3e      	ldr	r3, [pc, #248]	; (8014d28 <USBD_CDC_Init+0x1e4>)
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	f003 020f 	and.w	r2, r3, #15
 8014c34:	6879      	ldr	r1, [r7, #4]
 8014c36:	4613      	mov	r3, r2
 8014c38:	009b      	lsls	r3, r3, #2
 8014c3a:	4413      	add	r3, r2
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	440b      	add	r3, r1
 8014c40:	3324      	adds	r3, #36	; 0x24
 8014c42:	2201      	movs	r2, #1
 8014c44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014c46:	4b39      	ldr	r3, [pc, #228]	; (8014d2c <USBD_CDC_Init+0x1e8>)
 8014c48:	7819      	ldrb	r1, [r3, #0]
 8014c4a:	2340      	movs	r3, #64	; 0x40
 8014c4c:	2202      	movs	r2, #2
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f002 fb89 	bl	8017366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014c54:	4b35      	ldr	r3, [pc, #212]	; (8014d2c <USBD_CDC_Init+0x1e8>)
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	f003 020f 	and.w	r2, r3, #15
 8014c5c:	6879      	ldr	r1, [r7, #4]
 8014c5e:	4613      	mov	r3, r2
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	4413      	add	r3, r2
 8014c64:	009b      	lsls	r3, r3, #2
 8014c66:	440b      	add	r3, r1
 8014c68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014c70:	4b2f      	ldr	r3, [pc, #188]	; (8014d30 <USBD_CDC_Init+0x1ec>)
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	f003 020f 	and.w	r2, r3, #15
 8014c78:	6879      	ldr	r1, [r7, #4]
 8014c7a:	4613      	mov	r3, r2
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	4413      	add	r3, r2
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	440b      	add	r3, r1
 8014c84:	3326      	adds	r3, #38	; 0x26
 8014c86:	2210      	movs	r2, #16
 8014c88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014c8a:	4b29      	ldr	r3, [pc, #164]	; (8014d30 <USBD_CDC_Init+0x1ec>)
 8014c8c:	7819      	ldrb	r1, [r3, #0]
 8014c8e:	2308      	movs	r3, #8
 8014c90:	2203      	movs	r2, #3
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f002 fb67 	bl	8017366 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014c98:	4b25      	ldr	r3, [pc, #148]	; (8014d30 <USBD_CDC_Init+0x1ec>)
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	f003 020f 	and.w	r2, r3, #15
 8014ca0:	6879      	ldr	r1, [r7, #4]
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	4413      	add	r3, r2
 8014ca8:	009b      	lsls	r3, r3, #2
 8014caa:	440b      	add	r3, r1
 8014cac:	3324      	adds	r3, #36	; 0x24
 8014cae:	2201      	movs	r2, #1
 8014cb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cc0:	687a      	ldr	r2, [r7, #4]
 8014cc2:	33b0      	adds	r3, #176	; 0xb0
 8014cc4:	009b      	lsls	r3, r3, #2
 8014cc6:	4413      	add	r3, r2
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d101      	bne.n	8014cec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014ce8:	2302      	movs	r3, #2
 8014cea:	e018      	b.n	8014d1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	7c1b      	ldrb	r3, [r3, #16]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d10a      	bne.n	8014d0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014cf4:	4b0d      	ldr	r3, [pc, #52]	; (8014d2c <USBD_CDC_Init+0x1e8>)
 8014cf6:	7819      	ldrb	r1, [r3, #0]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f002 fc1e 	bl	8017544 <USBD_LL_PrepareReceive>
 8014d08:	e008      	b.n	8014d1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d0a:	4b08      	ldr	r3, [pc, #32]	; (8014d2c <USBD_CDC_Init+0x1e8>)
 8014d0c:	7819      	ldrb	r1, [r3, #0]
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d14:	2340      	movs	r3, #64	; 0x40
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f002 fc14 	bl	8017544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014d1c:	2300      	movs	r3, #0
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3710      	adds	r7, #16
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	24000097 	.word	0x24000097
 8014d2c:	24000098 	.word	0x24000098
 8014d30:	24000099 	.word	0x24000099

08014d34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014d40:	4b3a      	ldr	r3, [pc, #232]	; (8014e2c <USBD_CDC_DeInit+0xf8>)
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	4619      	mov	r1, r3
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f002 fb33 	bl	80173b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014d4c:	4b37      	ldr	r3, [pc, #220]	; (8014e2c <USBD_CDC_DeInit+0xf8>)
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	f003 020f 	and.w	r2, r3, #15
 8014d54:	6879      	ldr	r1, [r7, #4]
 8014d56:	4613      	mov	r3, r2
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	4413      	add	r3, r2
 8014d5c:	009b      	lsls	r3, r3, #2
 8014d5e:	440b      	add	r3, r1
 8014d60:	3324      	adds	r3, #36	; 0x24
 8014d62:	2200      	movs	r2, #0
 8014d64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014d66:	4b32      	ldr	r3, [pc, #200]	; (8014e30 <USBD_CDC_DeInit+0xfc>)
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f002 fb20 	bl	80173b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014d72:	4b2f      	ldr	r3, [pc, #188]	; (8014e30 <USBD_CDC_DeInit+0xfc>)
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	f003 020f 	and.w	r2, r3, #15
 8014d7a:	6879      	ldr	r1, [r7, #4]
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	4413      	add	r3, r2
 8014d82:	009b      	lsls	r3, r3, #2
 8014d84:	440b      	add	r3, r1
 8014d86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014d8e:	4b29      	ldr	r3, [pc, #164]	; (8014e34 <USBD_CDC_DeInit+0x100>)
 8014d90:	781b      	ldrb	r3, [r3, #0]
 8014d92:	4619      	mov	r1, r3
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f002 fb0c 	bl	80173b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014d9a:	4b26      	ldr	r3, [pc, #152]	; (8014e34 <USBD_CDC_DeInit+0x100>)
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	f003 020f 	and.w	r2, r3, #15
 8014da2:	6879      	ldr	r1, [r7, #4]
 8014da4:	4613      	mov	r3, r2
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	4413      	add	r3, r2
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	440b      	add	r3, r1
 8014dae:	3324      	adds	r3, #36	; 0x24
 8014db0:	2200      	movs	r2, #0
 8014db2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014db4:	4b1f      	ldr	r3, [pc, #124]	; (8014e34 <USBD_CDC_DeInit+0x100>)
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	f003 020f 	and.w	r2, r3, #15
 8014dbc:	6879      	ldr	r1, [r7, #4]
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	4413      	add	r3, r2
 8014dc4:	009b      	lsls	r3, r3, #2
 8014dc6:	440b      	add	r3, r1
 8014dc8:	3326      	adds	r3, #38	; 0x26
 8014dca:	2200      	movs	r2, #0
 8014dcc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	32b0      	adds	r2, #176	; 0xb0
 8014dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d01f      	beq.n	8014e20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014de6:	687a      	ldr	r2, [r7, #4]
 8014de8:	33b0      	adds	r3, #176	; 0xb0
 8014dea:	009b      	lsls	r3, r3, #2
 8014dec:	4413      	add	r3, r2
 8014dee:	685b      	ldr	r3, [r3, #4]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	32b0      	adds	r2, #176	; 0xb0
 8014dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e02:	4618      	mov	r0, r3
 8014e04:	f002 fbe0 	bl	80175c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	32b0      	adds	r2, #176	; 0xb0
 8014e12:	2100      	movs	r1, #0
 8014e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014e20:	2300      	movs	r3, #0
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3708      	adds	r7, #8
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	24000097 	.word	0x24000097
 8014e30:	24000098 	.word	0x24000098
 8014e34:	24000099 	.word	0x24000099

08014e38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b086      	sub	sp, #24
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	32b0      	adds	r2, #176	; 0xb0
 8014e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014e52:	2300      	movs	r3, #0
 8014e54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014e56:	2300      	movs	r3, #0
 8014e58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014e5e:	693b      	ldr	r3, [r7, #16]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d101      	bne.n	8014e68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014e64:	2303      	movs	r3, #3
 8014e66:	e0bf      	b.n	8014fe8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d050      	beq.n	8014f16 <USBD_CDC_Setup+0xde>
 8014e74:	2b20      	cmp	r3, #32
 8014e76:	f040 80af 	bne.w	8014fd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	88db      	ldrh	r3, [r3, #6]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d03a      	beq.n	8014ef8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	b25b      	sxtb	r3, r3
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	da1b      	bge.n	8014ec4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	33b0      	adds	r3, #176	; 0xb0
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	4413      	add	r3, r2
 8014e9a:	685b      	ldr	r3, [r3, #4]
 8014e9c:	689b      	ldr	r3, [r3, #8]
 8014e9e:	683a      	ldr	r2, [r7, #0]
 8014ea0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014ea2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014ea4:	683a      	ldr	r2, [r7, #0]
 8014ea6:	88d2      	ldrh	r2, [r2, #6]
 8014ea8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	88db      	ldrh	r3, [r3, #6]
 8014eae:	2b07      	cmp	r3, #7
 8014eb0:	bf28      	it	cs
 8014eb2:	2307      	movcs	r3, #7
 8014eb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	89fa      	ldrh	r2, [r7, #14]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f001 fdb3 	bl	8016a28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014ec2:	e090      	b.n	8014fe6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	785a      	ldrb	r2, [r3, #1]
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	88db      	ldrh	r3, [r3, #6]
 8014ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8014ed4:	d803      	bhi.n	8014ede <USBD_CDC_Setup+0xa6>
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	88db      	ldrh	r3, [r3, #6]
 8014eda:	b2da      	uxtb	r2, r3
 8014edc:	e000      	b.n	8014ee0 <USBD_CDC_Setup+0xa8>
 8014ede:	2240      	movs	r2, #64	; 0x40
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014ee6:	6939      	ldr	r1, [r7, #16]
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014eee:	461a      	mov	r2, r3
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f001 fdc5 	bl	8016a80 <USBD_CtlPrepareRx>
      break;
 8014ef6:	e076      	b.n	8014fe6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	33b0      	adds	r3, #176	; 0xb0
 8014f02:	009b      	lsls	r3, r3, #2
 8014f04:	4413      	add	r3, r2
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	689b      	ldr	r3, [r3, #8]
 8014f0a:	683a      	ldr	r2, [r7, #0]
 8014f0c:	7850      	ldrb	r0, [r2, #1]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	6839      	ldr	r1, [r7, #0]
 8014f12:	4798      	blx	r3
      break;
 8014f14:	e067      	b.n	8014fe6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	785b      	ldrb	r3, [r3, #1]
 8014f1a:	2b0b      	cmp	r3, #11
 8014f1c:	d851      	bhi.n	8014fc2 <USBD_CDC_Setup+0x18a>
 8014f1e:	a201      	add	r2, pc, #4	; (adr r2, 8014f24 <USBD_CDC_Setup+0xec>)
 8014f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f24:	08014f55 	.word	0x08014f55
 8014f28:	08014fd1 	.word	0x08014fd1
 8014f2c:	08014fc3 	.word	0x08014fc3
 8014f30:	08014fc3 	.word	0x08014fc3
 8014f34:	08014fc3 	.word	0x08014fc3
 8014f38:	08014fc3 	.word	0x08014fc3
 8014f3c:	08014fc3 	.word	0x08014fc3
 8014f40:	08014fc3 	.word	0x08014fc3
 8014f44:	08014fc3 	.word	0x08014fc3
 8014f48:	08014fc3 	.word	0x08014fc3
 8014f4c:	08014f7f 	.word	0x08014f7f
 8014f50:	08014fa9 	.word	0x08014fa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	2b03      	cmp	r3, #3
 8014f5e:	d107      	bne.n	8014f70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014f60:	f107 030a 	add.w	r3, r7, #10
 8014f64:	2202      	movs	r2, #2
 8014f66:	4619      	mov	r1, r3
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f001 fd5d 	bl	8016a28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f6e:	e032      	b.n	8014fd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014f70:	6839      	ldr	r1, [r7, #0]
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f001 fce7 	bl	8016946 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f78:	2303      	movs	r3, #3
 8014f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8014f7c:	e02b      	b.n	8014fd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	2b03      	cmp	r3, #3
 8014f88:	d107      	bne.n	8014f9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014f8a:	f107 030d 	add.w	r3, r7, #13
 8014f8e:	2201      	movs	r2, #1
 8014f90:	4619      	mov	r1, r3
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f001 fd48 	bl	8016a28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f98:	e01d      	b.n	8014fd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014f9a:	6839      	ldr	r1, [r7, #0]
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f001 fcd2 	bl	8016946 <USBD_CtlError>
            ret = USBD_FAIL;
 8014fa2:	2303      	movs	r3, #3
 8014fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8014fa6:	e016      	b.n	8014fd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	2b03      	cmp	r3, #3
 8014fb2:	d00f      	beq.n	8014fd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014fb4:	6839      	ldr	r1, [r7, #0]
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f001 fcc5 	bl	8016946 <USBD_CtlError>
            ret = USBD_FAIL;
 8014fbc:	2303      	movs	r3, #3
 8014fbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014fc0:	e008      	b.n	8014fd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014fc2:	6839      	ldr	r1, [r7, #0]
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f001 fcbe 	bl	8016946 <USBD_CtlError>
          ret = USBD_FAIL;
 8014fca:	2303      	movs	r3, #3
 8014fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8014fce:	e002      	b.n	8014fd6 <USBD_CDC_Setup+0x19e>
          break;
 8014fd0:	bf00      	nop
 8014fd2:	e008      	b.n	8014fe6 <USBD_CDC_Setup+0x1ae>
          break;
 8014fd4:	bf00      	nop
      }
      break;
 8014fd6:	e006      	b.n	8014fe6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014fd8:	6839      	ldr	r1, [r7, #0]
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f001 fcb3 	bl	8016946 <USBD_CtlError>
      ret = USBD_FAIL;
 8014fe0:	2303      	movs	r3, #3
 8014fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8014fe4:	bf00      	nop
  }

  return (uint8_t)ret;
 8014fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3718      	adds	r7, #24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b084      	sub	sp, #16
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	32b0      	adds	r2, #176	; 0xb0
 801500e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d101      	bne.n	801501a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015016:	2303      	movs	r3, #3
 8015018:	e065      	b.n	80150e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	32b0      	adds	r2, #176	; 0xb0
 8015024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015028:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801502a:	78fb      	ldrb	r3, [r7, #3]
 801502c:	f003 020f 	and.w	r2, r3, #15
 8015030:	6879      	ldr	r1, [r7, #4]
 8015032:	4613      	mov	r3, r2
 8015034:	009b      	lsls	r3, r3, #2
 8015036:	4413      	add	r3, r2
 8015038:	009b      	lsls	r3, r3, #2
 801503a:	440b      	add	r3, r1
 801503c:	3318      	adds	r3, #24
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d02f      	beq.n	80150a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015044:	78fb      	ldrb	r3, [r7, #3]
 8015046:	f003 020f 	and.w	r2, r3, #15
 801504a:	6879      	ldr	r1, [r7, #4]
 801504c:	4613      	mov	r3, r2
 801504e:	009b      	lsls	r3, r3, #2
 8015050:	4413      	add	r3, r2
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	440b      	add	r3, r1
 8015056:	3318      	adds	r3, #24
 8015058:	681a      	ldr	r2, [r3, #0]
 801505a:	78fb      	ldrb	r3, [r7, #3]
 801505c:	f003 010f 	and.w	r1, r3, #15
 8015060:	68f8      	ldr	r0, [r7, #12]
 8015062:	460b      	mov	r3, r1
 8015064:	00db      	lsls	r3, r3, #3
 8015066:	440b      	add	r3, r1
 8015068:	009b      	lsls	r3, r3, #2
 801506a:	4403      	add	r3, r0
 801506c:	3344      	adds	r3, #68	; 0x44
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	fbb2 f1f3 	udiv	r1, r2, r3
 8015074:	fb01 f303 	mul.w	r3, r1, r3
 8015078:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801507a:	2b00      	cmp	r3, #0
 801507c:	d112      	bne.n	80150a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801507e:	78fb      	ldrb	r3, [r7, #3]
 8015080:	f003 020f 	and.w	r2, r3, #15
 8015084:	6879      	ldr	r1, [r7, #4]
 8015086:	4613      	mov	r3, r2
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	4413      	add	r3, r2
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	440b      	add	r3, r1
 8015090:	3318      	adds	r3, #24
 8015092:	2200      	movs	r2, #0
 8015094:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015096:	78f9      	ldrb	r1, [r7, #3]
 8015098:	2300      	movs	r3, #0
 801509a:	2200      	movs	r2, #0
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f002 fa30 	bl	8017502 <USBD_LL_Transmit>
 80150a2:	e01f      	b.n	80150e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	2200      	movs	r2, #0
 80150a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80150b2:	687a      	ldr	r2, [r7, #4]
 80150b4:	33b0      	adds	r3, #176	; 0xb0
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	4413      	add	r3, r2
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	691b      	ldr	r3, [r3, #16]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d010      	beq.n	80150e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	33b0      	adds	r3, #176	; 0xb0
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	4413      	add	r3, r2
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	691b      	ldr	r3, [r3, #16]
 80150d4:	68ba      	ldr	r2, [r7, #8]
 80150d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80150da:	68ba      	ldr	r2, [r7, #8]
 80150dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80150e0:	78fa      	ldrb	r2, [r7, #3]
 80150e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80150e4:	2300      	movs	r3, #0
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3710      	adds	r7, #16
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}

080150ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80150ee:	b580      	push	{r7, lr}
 80150f0:	b084      	sub	sp, #16
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
 80150f6:	460b      	mov	r3, r1
 80150f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	32b0      	adds	r2, #176	; 0xb0
 8015104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015108:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	32b0      	adds	r2, #176	; 0xb0
 8015114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d101      	bne.n	8015120 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801511c:	2303      	movs	r3, #3
 801511e:	e01a      	b.n	8015156 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015120:	78fb      	ldrb	r3, [r7, #3]
 8015122:	4619      	mov	r1, r3
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f002 fa2e 	bl	8017586 <USBD_LL_GetRxDataSize>
 801512a:	4602      	mov	r2, r0
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015138:	687a      	ldr	r2, [r7, #4]
 801513a:	33b0      	adds	r3, #176	; 0xb0
 801513c:	009b      	lsls	r3, r3, #2
 801513e:	4413      	add	r3, r2
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	68db      	ldr	r3, [r3, #12]
 8015144:	68fa      	ldr	r2, [r7, #12]
 8015146:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801514a:	68fa      	ldr	r2, [r7, #12]
 801514c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015150:	4611      	mov	r1, r2
 8015152:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015154:	2300      	movs	r3, #0
}
 8015156:	4618      	mov	r0, r3
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}

0801515e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b084      	sub	sp, #16
 8015162:	af00      	add	r7, sp, #0
 8015164:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	32b0      	adds	r2, #176	; 0xb0
 8015170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015174:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d101      	bne.n	8015180 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801517c:	2303      	movs	r3, #3
 801517e:	e025      	b.n	80151cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015186:	687a      	ldr	r2, [r7, #4]
 8015188:	33b0      	adds	r3, #176	; 0xb0
 801518a:	009b      	lsls	r3, r3, #2
 801518c:	4413      	add	r3, r2
 801518e:	685b      	ldr	r3, [r3, #4]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d01a      	beq.n	80151ca <USBD_CDC_EP0_RxReady+0x6c>
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801519a:	2bff      	cmp	r3, #255	; 0xff
 801519c:	d015      	beq.n	80151ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	33b0      	adds	r3, #176	; 0xb0
 80151a8:	009b      	lsls	r3, r3, #2
 80151aa:	4413      	add	r3, r2
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	689b      	ldr	r3, [r3, #8]
 80151b0:	68fa      	ldr	r2, [r7, #12]
 80151b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80151b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80151b8:	68fa      	ldr	r2, [r7, #12]
 80151ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80151be:	b292      	uxth	r2, r2
 80151c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	22ff      	movs	r2, #255	; 0xff
 80151c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80151ca:	2300      	movs	r3, #0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3710      	adds	r7, #16
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80151dc:	2182      	movs	r1, #130	; 0x82
 80151de:	4818      	ldr	r0, [pc, #96]	; (8015240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80151e0:	f000 fd4f 	bl	8015c82 <USBD_GetEpDesc>
 80151e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80151e6:	2101      	movs	r1, #1
 80151e8:	4815      	ldr	r0, [pc, #84]	; (8015240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80151ea:	f000 fd4a 	bl	8015c82 <USBD_GetEpDesc>
 80151ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80151f0:	2181      	movs	r1, #129	; 0x81
 80151f2:	4813      	ldr	r0, [pc, #76]	; (8015240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80151f4:	f000 fd45 	bl	8015c82 <USBD_GetEpDesc>
 80151f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d002      	beq.n	8015206 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	2210      	movs	r2, #16
 8015204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d006      	beq.n	801521a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	2200      	movs	r2, #0
 8015210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015214:	711a      	strb	r2, [r3, #4]
 8015216:	2200      	movs	r2, #0
 8015218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d006      	beq.n	801522e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	2200      	movs	r2, #0
 8015224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015228:	711a      	strb	r2, [r3, #4]
 801522a:	2200      	movs	r2, #0
 801522c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2243      	movs	r2, #67	; 0x43
 8015232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015234:	4b02      	ldr	r3, [pc, #8]	; (8015240 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015236:	4618      	mov	r0, r3
 8015238:	3718      	adds	r7, #24
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}
 801523e:	bf00      	nop
 8015240:	24000054 	.word	0x24000054

08015244 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801524c:	2182      	movs	r1, #130	; 0x82
 801524e:	4818      	ldr	r0, [pc, #96]	; (80152b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015250:	f000 fd17 	bl	8015c82 <USBD_GetEpDesc>
 8015254:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015256:	2101      	movs	r1, #1
 8015258:	4815      	ldr	r0, [pc, #84]	; (80152b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801525a:	f000 fd12 	bl	8015c82 <USBD_GetEpDesc>
 801525e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015260:	2181      	movs	r1, #129	; 0x81
 8015262:	4813      	ldr	r0, [pc, #76]	; (80152b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015264:	f000 fd0d 	bl	8015c82 <USBD_GetEpDesc>
 8015268:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d002      	beq.n	8015276 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	2210      	movs	r2, #16
 8015274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d006      	beq.n	801528a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	2200      	movs	r2, #0
 8015280:	711a      	strb	r2, [r3, #4]
 8015282:	2200      	movs	r2, #0
 8015284:	f042 0202 	orr.w	r2, r2, #2
 8015288:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d006      	beq.n	801529e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	2200      	movs	r2, #0
 8015294:	711a      	strb	r2, [r3, #4]
 8015296:	2200      	movs	r2, #0
 8015298:	f042 0202 	orr.w	r2, r2, #2
 801529c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2243      	movs	r2, #67	; 0x43
 80152a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80152a4:	4b02      	ldr	r3, [pc, #8]	; (80152b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3718      	adds	r7, #24
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
 80152ae:	bf00      	nop
 80152b0:	24000054 	.word	0x24000054

080152b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b086      	sub	sp, #24
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80152bc:	2182      	movs	r1, #130	; 0x82
 80152be:	4818      	ldr	r0, [pc, #96]	; (8015320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80152c0:	f000 fcdf 	bl	8015c82 <USBD_GetEpDesc>
 80152c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80152c6:	2101      	movs	r1, #1
 80152c8:	4815      	ldr	r0, [pc, #84]	; (8015320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80152ca:	f000 fcda 	bl	8015c82 <USBD_GetEpDesc>
 80152ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80152d0:	2181      	movs	r1, #129	; 0x81
 80152d2:	4813      	ldr	r0, [pc, #76]	; (8015320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80152d4:	f000 fcd5 	bl	8015c82 <USBD_GetEpDesc>
 80152d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d002      	beq.n	80152e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	2210      	movs	r2, #16
 80152e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d006      	beq.n	80152fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	2200      	movs	r2, #0
 80152f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80152f4:	711a      	strb	r2, [r3, #4]
 80152f6:	2200      	movs	r2, #0
 80152f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d006      	beq.n	801530e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2200      	movs	r2, #0
 8015304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015308:	711a      	strb	r2, [r3, #4]
 801530a:	2200      	movs	r2, #0
 801530c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2243      	movs	r2, #67	; 0x43
 8015312:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015314:	4b02      	ldr	r3, [pc, #8]	; (8015320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015316:	4618      	mov	r0, r3
 8015318:	3718      	adds	r7, #24
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	24000054 	.word	0x24000054

08015324 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015324:	b480      	push	{r7}
 8015326:	b083      	sub	sp, #12
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	220a      	movs	r2, #10
 8015330:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015332:	4b03      	ldr	r3, [pc, #12]	; (8015340 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015334:	4618      	mov	r0, r3
 8015336:	370c      	adds	r7, #12
 8015338:	46bd      	mov	sp, r7
 801533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533e:	4770      	bx	lr
 8015340:	24000010 	.word	0x24000010

08015344 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
 801534c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d101      	bne.n	8015358 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015354:	2303      	movs	r3, #3
 8015356:	e009      	b.n	801536c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	33b0      	adds	r3, #176	; 0xb0
 8015362:	009b      	lsls	r3, r3, #2
 8015364:	4413      	add	r3, r2
 8015366:	683a      	ldr	r2, [r7, #0]
 8015368:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801536a:	2300      	movs	r3, #0
}
 801536c:	4618      	mov	r0, r3
 801536e:	370c      	adds	r7, #12
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr

08015378 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015378:	b480      	push	{r7}
 801537a:	b087      	sub	sp, #28
 801537c:	af00      	add	r7, sp, #0
 801537e:	60f8      	str	r0, [r7, #12]
 8015380:	60b9      	str	r1, [r7, #8]
 8015382:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	32b0      	adds	r2, #176	; 0xb0
 801538e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015392:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d101      	bne.n	801539e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801539a:	2303      	movs	r3, #3
 801539c:	e008      	b.n	80153b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	68ba      	ldr	r2, [r7, #8]
 80153a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80153ae:	2300      	movs	r3, #0
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	371c      	adds	r7, #28
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr

080153bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80153bc:	b480      	push	{r7}
 80153be:	b085      	sub	sp, #20
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	32b0      	adds	r2, #176	; 0xb0
 80153d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d101      	bne.n	80153e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80153dc:	2303      	movs	r3, #3
 80153de:	e004      	b.n	80153ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	683a      	ldr	r2, [r7, #0]
 80153e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80153e8:	2300      	movs	r3, #0
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	3714      	adds	r7, #20
 80153ee:	46bd      	mov	sp, r7
 80153f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f4:	4770      	bx	lr
	...

080153f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	32b0      	adds	r2, #176	; 0xb0
 801540a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801540e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015410:	2301      	movs	r3, #1
 8015412:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d101      	bne.n	801541e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801541a:	2303      	movs	r3, #3
 801541c:	e025      	b.n	801546a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015424:	2b00      	cmp	r3, #0
 8015426:	d11f      	bne.n	8015468 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	2201      	movs	r2, #1
 801542c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015430:	4b10      	ldr	r3, [pc, #64]	; (8015474 <USBD_CDC_TransmitPacket+0x7c>)
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	f003 020f 	and.w	r2, r3, #15
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	4613      	mov	r3, r2
 8015442:	009b      	lsls	r3, r3, #2
 8015444:	4413      	add	r3, r2
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	4403      	add	r3, r0
 801544a:	3318      	adds	r3, #24
 801544c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801544e:	4b09      	ldr	r3, [pc, #36]	; (8015474 <USBD_CDC_TransmitPacket+0x7c>)
 8015450:	7819      	ldrb	r1, [r3, #0]
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f002 f84f 	bl	8017502 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015464:	2300      	movs	r3, #0
 8015466:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015468:	7bfb      	ldrb	r3, [r7, #15]
}
 801546a:	4618      	mov	r0, r3
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	24000097 	.word	0x24000097

08015478 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	32b0      	adds	r2, #176	; 0xb0
 801548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801548e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	32b0      	adds	r2, #176	; 0xb0
 801549a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d101      	bne.n	80154a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80154a2:	2303      	movs	r3, #3
 80154a4:	e018      	b.n	80154d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	7c1b      	ldrb	r3, [r3, #16]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d10a      	bne.n	80154c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80154ae:	4b0c      	ldr	r3, [pc, #48]	; (80154e0 <USBD_CDC_ReceivePacket+0x68>)
 80154b0:	7819      	ldrb	r1, [r3, #0]
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80154b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f002 f841 	bl	8017544 <USBD_LL_PrepareReceive>
 80154c2:	e008      	b.n	80154d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80154c4:	4b06      	ldr	r3, [pc, #24]	; (80154e0 <USBD_CDC_ReceivePacket+0x68>)
 80154c6:	7819      	ldrb	r1, [r3, #0]
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80154ce:	2340      	movs	r3, #64	; 0x40
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f002 f837 	bl	8017544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80154d6:	2300      	movs	r3, #0
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3710      	adds	r7, #16
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	24000098 	.word	0x24000098

080154e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	4613      	mov	r3, r2
 80154f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d101      	bne.n	80154fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80154f8:	2303      	movs	r3, #3
 80154fa:	e01f      	b.n	801553c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	2200      	movs	r2, #0
 8015500:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	2200      	movs	r2, #0
 8015508:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2200      	movs	r2, #0
 8015510:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d003      	beq.n	8015522 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	68ba      	ldr	r2, [r7, #8]
 801551e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	2201      	movs	r2, #1
 8015526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	79fa      	ldrb	r2, [r7, #7]
 801552e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	f001 feab 	bl	801728c <USBD_LL_Init>
 8015536:	4603      	mov	r3, r0
 8015538:	75fb      	strb	r3, [r7, #23]

  return ret;
 801553a:	7dfb      	ldrb	r3, [r7, #23]
}
 801553c:	4618      	mov	r0, r3
 801553e:	3718      	adds	r7, #24
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}

08015544 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b084      	sub	sp, #16
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
 801554c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801554e:	2300      	movs	r3, #0
 8015550:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d101      	bne.n	801555c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015558:	2303      	movs	r3, #3
 801555a:	e025      	b.n	80155a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	683a      	ldr	r2, [r7, #0]
 8015560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	32ae      	adds	r2, #174	; 0xae
 801556e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015574:	2b00      	cmp	r3, #0
 8015576:	d00f      	beq.n	8015598 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	32ae      	adds	r2, #174	; 0xae
 8015582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015588:	f107 020e 	add.w	r2, r7, #14
 801558c:	4610      	mov	r0, r2
 801558e:	4798      	blx	r3
 8015590:	4602      	mov	r2, r0
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801559e:	1c5a      	adds	r2, r3, #1
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3710      	adds	r7, #16
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f001 feb9 	bl	8017330 <USBD_LL_Start>
 80155be:	4603      	mov	r3, r0
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3708      	adds	r7, #8
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b083      	sub	sp, #12
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80155d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr

080155de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80155de:	b580      	push	{r7, lr}
 80155e0:	b084      	sub	sp, #16
 80155e2:	af00      	add	r7, sp, #0
 80155e4:	6078      	str	r0, [r7, #4]
 80155e6:	460b      	mov	r3, r1
 80155e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80155ea:	2300      	movs	r3, #0
 80155ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d009      	beq.n	801560c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	78fa      	ldrb	r2, [r7, #3]
 8015602:	4611      	mov	r1, r2
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	4798      	blx	r3
 8015608:	4603      	mov	r3, r0
 801560a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801560c:	7bfb      	ldrb	r3, [r7, #15]
}
 801560e:	4618      	mov	r0, r3
 8015610:	3710      	adds	r7, #16
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b084      	sub	sp, #16
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	460b      	mov	r3, r1
 8015620:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015622:	2300      	movs	r3, #0
 8015624:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	78fa      	ldrb	r2, [r7, #3]
 8015630:	4611      	mov	r1, r2
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	4798      	blx	r3
 8015636:	4603      	mov	r3, r0
 8015638:	2b00      	cmp	r3, #0
 801563a:	d001      	beq.n	8015640 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801563c:	2303      	movs	r3, #3
 801563e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015640:	7bfb      	ldrb	r3, [r7, #15]
}
 8015642:	4618      	mov	r0, r3
 8015644:	3710      	adds	r7, #16
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}

0801564a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b084      	sub	sp, #16
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
 8015652:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801565a:	6839      	ldr	r1, [r7, #0]
 801565c:	4618      	mov	r0, r3
 801565e:	f001 f938 	bl	80168d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2201      	movs	r2, #1
 8015666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015670:	461a      	mov	r2, r3
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801567e:	f003 031f 	and.w	r3, r3, #31
 8015682:	2b02      	cmp	r3, #2
 8015684:	d01a      	beq.n	80156bc <USBD_LL_SetupStage+0x72>
 8015686:	2b02      	cmp	r3, #2
 8015688:	d822      	bhi.n	80156d0 <USBD_LL_SetupStage+0x86>
 801568a:	2b00      	cmp	r3, #0
 801568c:	d002      	beq.n	8015694 <USBD_LL_SetupStage+0x4a>
 801568e:	2b01      	cmp	r3, #1
 8015690:	d00a      	beq.n	80156a8 <USBD_LL_SetupStage+0x5e>
 8015692:	e01d      	b.n	80156d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801569a:	4619      	mov	r1, r3
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f000 fb65 	bl	8015d6c <USBD_StdDevReq>
 80156a2:	4603      	mov	r3, r0
 80156a4:	73fb      	strb	r3, [r7, #15]
      break;
 80156a6:	e020      	b.n	80156ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80156ae:	4619      	mov	r1, r3
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f000 fbcd 	bl	8015e50 <USBD_StdItfReq>
 80156b6:	4603      	mov	r3, r0
 80156b8:	73fb      	strb	r3, [r7, #15]
      break;
 80156ba:	e016      	b.n	80156ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80156c2:	4619      	mov	r1, r3
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 fc2f 	bl	8015f28 <USBD_StdEPReq>
 80156ca:	4603      	mov	r3, r0
 80156cc:	73fb      	strb	r3, [r7, #15]
      break;
 80156ce:	e00c      	b.n	80156ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80156d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	4619      	mov	r1, r3
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f001 fe86 	bl	80173f0 <USBD_LL_StallEP>
 80156e4:	4603      	mov	r3, r0
 80156e6:	73fb      	strb	r3, [r7, #15]
      break;
 80156e8:	bf00      	nop
  }

  return ret;
 80156ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3710      	adds	r7, #16
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b086      	sub	sp, #24
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	460b      	mov	r3, r1
 80156fe:	607a      	str	r2, [r7, #4]
 8015700:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015702:	2300      	movs	r3, #0
 8015704:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015706:	7afb      	ldrb	r3, [r7, #11]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d16e      	bne.n	80157ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015712:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801571a:	2b03      	cmp	r3, #3
 801571c:	f040 8098 	bne.w	8015850 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	689a      	ldr	r2, [r3, #8]
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	68db      	ldr	r3, [r3, #12]
 8015728:	429a      	cmp	r2, r3
 801572a:	d913      	bls.n	8015754 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801572c:	693b      	ldr	r3, [r7, #16]
 801572e:	689a      	ldr	r2, [r3, #8]
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	1ad2      	subs	r2, r2, r3
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	68da      	ldr	r2, [r3, #12]
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	689b      	ldr	r3, [r3, #8]
 8015742:	4293      	cmp	r3, r2
 8015744:	bf28      	it	cs
 8015746:	4613      	movcs	r3, r2
 8015748:	461a      	mov	r2, r3
 801574a:	6879      	ldr	r1, [r7, #4]
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f001 f9b4 	bl	8016aba <USBD_CtlContinueRx>
 8015752:	e07d      	b.n	8015850 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801575a:	f003 031f 	and.w	r3, r3, #31
 801575e:	2b02      	cmp	r3, #2
 8015760:	d014      	beq.n	801578c <USBD_LL_DataOutStage+0x98>
 8015762:	2b02      	cmp	r3, #2
 8015764:	d81d      	bhi.n	80157a2 <USBD_LL_DataOutStage+0xae>
 8015766:	2b00      	cmp	r3, #0
 8015768:	d002      	beq.n	8015770 <USBD_LL_DataOutStage+0x7c>
 801576a:	2b01      	cmp	r3, #1
 801576c:	d003      	beq.n	8015776 <USBD_LL_DataOutStage+0x82>
 801576e:	e018      	b.n	80157a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015770:	2300      	movs	r3, #0
 8015772:	75bb      	strb	r3, [r7, #22]
            break;
 8015774:	e018      	b.n	80157a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801577c:	b2db      	uxtb	r3, r3
 801577e:	4619      	mov	r1, r3
 8015780:	68f8      	ldr	r0, [r7, #12]
 8015782:	f000 fa64 	bl	8015c4e <USBD_CoreFindIF>
 8015786:	4603      	mov	r3, r0
 8015788:	75bb      	strb	r3, [r7, #22]
            break;
 801578a:	e00d      	b.n	80157a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015792:	b2db      	uxtb	r3, r3
 8015794:	4619      	mov	r1, r3
 8015796:	68f8      	ldr	r0, [r7, #12]
 8015798:	f000 fa66 	bl	8015c68 <USBD_CoreFindEP>
 801579c:	4603      	mov	r3, r0
 801579e:	75bb      	strb	r3, [r7, #22]
            break;
 80157a0:	e002      	b.n	80157a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80157a2:	2300      	movs	r3, #0
 80157a4:	75bb      	strb	r3, [r7, #22]
            break;
 80157a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80157a8:	7dbb      	ldrb	r3, [r7, #22]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d119      	bne.n	80157e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	2b03      	cmp	r3, #3
 80157b8:	d113      	bne.n	80157e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80157ba:	7dba      	ldrb	r2, [r7, #22]
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	32ae      	adds	r2, #174	; 0xae
 80157c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157c4:	691b      	ldr	r3, [r3, #16]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d00b      	beq.n	80157e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80157ca:	7dba      	ldrb	r2, [r7, #22]
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80157d2:	7dba      	ldrb	r2, [r7, #22]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	32ae      	adds	r2, #174	; 0xae
 80157d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157dc:	691b      	ldr	r3, [r3, #16]
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80157e2:	68f8      	ldr	r0, [r7, #12]
 80157e4:	f001 f97a 	bl	8016adc <USBD_CtlSendStatus>
 80157e8:	e032      	b.n	8015850 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80157ea:	7afb      	ldrb	r3, [r7, #11]
 80157ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	4619      	mov	r1, r3
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f000 fa37 	bl	8015c68 <USBD_CoreFindEP>
 80157fa:	4603      	mov	r3, r0
 80157fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157fe:	7dbb      	ldrb	r3, [r7, #22]
 8015800:	2bff      	cmp	r3, #255	; 0xff
 8015802:	d025      	beq.n	8015850 <USBD_LL_DataOutStage+0x15c>
 8015804:	7dbb      	ldrb	r3, [r7, #22]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d122      	bne.n	8015850 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015810:	b2db      	uxtb	r3, r3
 8015812:	2b03      	cmp	r3, #3
 8015814:	d117      	bne.n	8015846 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015816:	7dba      	ldrb	r2, [r7, #22]
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	32ae      	adds	r2, #174	; 0xae
 801581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015820:	699b      	ldr	r3, [r3, #24]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d00f      	beq.n	8015846 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015826:	7dba      	ldrb	r2, [r7, #22]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801582e:	7dba      	ldrb	r2, [r7, #22]
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	32ae      	adds	r2, #174	; 0xae
 8015834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015838:	699b      	ldr	r3, [r3, #24]
 801583a:	7afa      	ldrb	r2, [r7, #11]
 801583c:	4611      	mov	r1, r2
 801583e:	68f8      	ldr	r0, [r7, #12]
 8015840:	4798      	blx	r3
 8015842:	4603      	mov	r3, r0
 8015844:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015846:	7dfb      	ldrb	r3, [r7, #23]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d001      	beq.n	8015850 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801584c:	7dfb      	ldrb	r3, [r7, #23]
 801584e:	e000      	b.n	8015852 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015850:	2300      	movs	r3, #0
}
 8015852:	4618      	mov	r0, r3
 8015854:	3718      	adds	r7, #24
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b086      	sub	sp, #24
 801585e:	af00      	add	r7, sp, #0
 8015860:	60f8      	str	r0, [r7, #12]
 8015862:	460b      	mov	r3, r1
 8015864:	607a      	str	r2, [r7, #4]
 8015866:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015868:	7afb      	ldrb	r3, [r7, #11]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d16f      	bne.n	801594e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	3314      	adds	r3, #20
 8015872:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801587a:	2b02      	cmp	r3, #2
 801587c:	d15a      	bne.n	8015934 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	689a      	ldr	r2, [r3, #8]
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	429a      	cmp	r2, r3
 8015888:	d914      	bls.n	80158b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801588a:	693b      	ldr	r3, [r7, #16]
 801588c:	689a      	ldr	r2, [r3, #8]
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	68db      	ldr	r3, [r3, #12]
 8015892:	1ad2      	subs	r2, r2, r3
 8015894:	693b      	ldr	r3, [r7, #16]
 8015896:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	461a      	mov	r2, r3
 801589e:	6879      	ldr	r1, [r7, #4]
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f001 f8dc 	bl	8016a5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80158a6:	2300      	movs	r3, #0
 80158a8:	2200      	movs	r2, #0
 80158aa:	2100      	movs	r1, #0
 80158ac:	68f8      	ldr	r0, [r7, #12]
 80158ae:	f001 fe49 	bl	8017544 <USBD_LL_PrepareReceive>
 80158b2:	e03f      	b.n	8015934 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	68da      	ldr	r2, [r3, #12]
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	689b      	ldr	r3, [r3, #8]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d11c      	bne.n	80158fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	685a      	ldr	r2, [r3, #4]
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d316      	bcc.n	80158fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	685a      	ldr	r2, [r3, #4]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d20f      	bcs.n	80158fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80158da:	2200      	movs	r2, #0
 80158dc:	2100      	movs	r1, #0
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f001 f8bd 	bl	8016a5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	2200      	movs	r2, #0
 80158e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80158ec:	2300      	movs	r3, #0
 80158ee:	2200      	movs	r2, #0
 80158f0:	2100      	movs	r1, #0
 80158f2:	68f8      	ldr	r0, [r7, #12]
 80158f4:	f001 fe26 	bl	8017544 <USBD_LL_PrepareReceive>
 80158f8:	e01c      	b.n	8015934 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015900:	b2db      	uxtb	r3, r3
 8015902:	2b03      	cmp	r3, #3
 8015904:	d10f      	bne.n	8015926 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801590c:	68db      	ldr	r3, [r3, #12]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d009      	beq.n	8015926 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2200      	movs	r2, #0
 8015916:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015920:	68db      	ldr	r3, [r3, #12]
 8015922:	68f8      	ldr	r0, [r7, #12]
 8015924:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015926:	2180      	movs	r1, #128	; 0x80
 8015928:	68f8      	ldr	r0, [r7, #12]
 801592a:	f001 fd61 	bl	80173f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801592e:	68f8      	ldr	r0, [r7, #12]
 8015930:	f001 f8e7 	bl	8016b02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801593a:	2b00      	cmp	r3, #0
 801593c:	d03a      	beq.n	80159b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801593e:	68f8      	ldr	r0, [r7, #12]
 8015940:	f7ff fe42 	bl	80155c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2200      	movs	r2, #0
 8015948:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801594c:	e032      	b.n	80159b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801594e:	7afb      	ldrb	r3, [r7, #11]
 8015950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015954:	b2db      	uxtb	r3, r3
 8015956:	4619      	mov	r1, r3
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f000 f985 	bl	8015c68 <USBD_CoreFindEP>
 801595e:	4603      	mov	r3, r0
 8015960:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015962:	7dfb      	ldrb	r3, [r7, #23]
 8015964:	2bff      	cmp	r3, #255	; 0xff
 8015966:	d025      	beq.n	80159b4 <USBD_LL_DataInStage+0x15a>
 8015968:	7dfb      	ldrb	r3, [r7, #23]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d122      	bne.n	80159b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015974:	b2db      	uxtb	r3, r3
 8015976:	2b03      	cmp	r3, #3
 8015978:	d11c      	bne.n	80159b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801597a:	7dfa      	ldrb	r2, [r7, #23]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	32ae      	adds	r2, #174	; 0xae
 8015980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015984:	695b      	ldr	r3, [r3, #20]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d014      	beq.n	80159b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801598a:	7dfa      	ldrb	r2, [r7, #23]
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015992:	7dfa      	ldrb	r2, [r7, #23]
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	32ae      	adds	r2, #174	; 0xae
 8015998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801599c:	695b      	ldr	r3, [r3, #20]
 801599e:	7afa      	ldrb	r2, [r7, #11]
 80159a0:	4611      	mov	r1, r2
 80159a2:	68f8      	ldr	r0, [r7, #12]
 80159a4:	4798      	blx	r3
 80159a6:	4603      	mov	r3, r0
 80159a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80159aa:	7dbb      	ldrb	r3, [r7, #22]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d001      	beq.n	80159b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80159b0:	7dbb      	ldrb	r3, [r7, #22]
 80159b2:	e000      	b.n	80159b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80159b4:	2300      	movs	r3, #0
}
 80159b6:	4618      	mov	r0, r3
 80159b8:	3718      	adds	r7, #24
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bd80      	pop	{r7, pc}

080159be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80159be:	b580      	push	{r7, lr}
 80159c0:	b084      	sub	sp, #16
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80159c6:	2300      	movs	r3, #0
 80159c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	2201      	movs	r2, #1
 80159ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	2200      	movs	r2, #0
 80159d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2200      	movs	r2, #0
 80159de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2200      	movs	r2, #0
 80159e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2200      	movs	r2, #0
 80159ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d014      	beq.n	8015a24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d00e      	beq.n	8015a24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	6852      	ldr	r2, [r2, #4]
 8015a12:	b2d2      	uxtb	r2, r2
 8015a14:	4611      	mov	r1, r2
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	4798      	blx	r3
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d001      	beq.n	8015a24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015a20:	2303      	movs	r3, #3
 8015a22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015a24:	2340      	movs	r3, #64	; 0x40
 8015a26:	2200      	movs	r2, #0
 8015a28:	2100      	movs	r1, #0
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f001 fc9b 	bl	8017366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2201      	movs	r2, #1
 8015a34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2240      	movs	r2, #64	; 0x40
 8015a3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015a40:	2340      	movs	r3, #64	; 0x40
 8015a42:	2200      	movs	r2, #0
 8015a44:	2180      	movs	r1, #128	; 0x80
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f001 fc8d 	bl	8017366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2201      	movs	r2, #1
 8015a50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2240      	movs	r2, #64	; 0x40
 8015a56:	621a      	str	r2, [r3, #32]

  return ret;
 8015a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3710      	adds	r7, #16
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015a62:	b480      	push	{r7}
 8015a64:	b083      	sub	sp, #12
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	78fa      	ldrb	r2, [r7, #3]
 8015a72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	370c      	adds	r7, #12
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a80:	4770      	bx	lr

08015a82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015a82:	b480      	push	{r7}
 8015a84:	b083      	sub	sp, #12
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b04      	cmp	r3, #4
 8015a94:	d006      	beq.n	8015aa4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a9c:	b2da      	uxtb	r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2204      	movs	r2, #4
 8015aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015aac:	2300      	movs	r3, #0
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	370c      	adds	r7, #12
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab8:	4770      	bx	lr

08015aba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015aba:	b480      	push	{r7}
 8015abc:	b083      	sub	sp, #12
 8015abe:	af00      	add	r7, sp, #0
 8015ac0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	2b04      	cmp	r3, #4
 8015acc:	d106      	bne.n	8015adc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015ad4:	b2da      	uxtb	r2, r3
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015adc:	2300      	movs	r3, #0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	370c      	adds	r7, #12
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae8:	4770      	bx	lr

08015aea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015aea:	b580      	push	{r7, lr}
 8015aec:	b082      	sub	sp, #8
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015af8:	b2db      	uxtb	r3, r3
 8015afa:	2b03      	cmp	r3, #3
 8015afc:	d110      	bne.n	8015b20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d00b      	beq.n	8015b20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b0e:	69db      	ldr	r3, [r3, #28]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d005      	beq.n	8015b20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b1a:	69db      	ldr	r3, [r3, #28]
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015b20:	2300      	movs	r3, #0
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3708      	adds	r7, #8
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}

08015b2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015b2a:	b580      	push	{r7, lr}
 8015b2c:	b082      	sub	sp, #8
 8015b2e:	af00      	add	r7, sp, #0
 8015b30:	6078      	str	r0, [r7, #4]
 8015b32:	460b      	mov	r3, r1
 8015b34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	32ae      	adds	r2, #174	; 0xae
 8015b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d101      	bne.n	8015b4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015b48:	2303      	movs	r3, #3
 8015b4a:	e01c      	b.n	8015b86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	2b03      	cmp	r3, #3
 8015b56:	d115      	bne.n	8015b84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	32ae      	adds	r2, #174	; 0xae
 8015b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b66:	6a1b      	ldr	r3, [r3, #32]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d00b      	beq.n	8015b84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	32ae      	adds	r2, #174	; 0xae
 8015b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b7a:	6a1b      	ldr	r3, [r3, #32]
 8015b7c:	78fa      	ldrb	r2, [r7, #3]
 8015b7e:	4611      	mov	r1, r2
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015b84:	2300      	movs	r3, #0
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3708      	adds	r7, #8
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}

08015b8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015b8e:	b580      	push	{r7, lr}
 8015b90:	b082      	sub	sp, #8
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
 8015b96:	460b      	mov	r3, r1
 8015b98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	32ae      	adds	r2, #174	; 0xae
 8015ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d101      	bne.n	8015bb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015bac:	2303      	movs	r3, #3
 8015bae:	e01c      	b.n	8015bea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bb6:	b2db      	uxtb	r3, r3
 8015bb8:	2b03      	cmp	r3, #3
 8015bba:	d115      	bne.n	8015be8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	32ae      	adds	r2, #174	; 0xae
 8015bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d00b      	beq.n	8015be8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	32ae      	adds	r2, #174	; 0xae
 8015bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be0:	78fa      	ldrb	r2, [r7, #3]
 8015be2:	4611      	mov	r1, r2
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015be8:	2300      	movs	r3, #0
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3708      	adds	r7, #8
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}

08015bf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015bf2:	b480      	push	{r7}
 8015bf4:	b083      	sub	sp, #12
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015bfa:	2300      	movs	r3, #0
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr

08015c08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015c10:	2300      	movs	r3, #0
 8015c12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	2201      	movs	r2, #1
 8015c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d00e      	beq.n	8015c44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c2c:	685b      	ldr	r3, [r3, #4]
 8015c2e:	687a      	ldr	r2, [r7, #4]
 8015c30:	6852      	ldr	r2, [r2, #4]
 8015c32:	b2d2      	uxtb	r2, r2
 8015c34:	4611      	mov	r1, r2
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	4798      	blx	r3
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d001      	beq.n	8015c44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015c40:	2303      	movs	r3, #3
 8015c42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}

08015c4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015c4e:	b480      	push	{r7}
 8015c50:	b083      	sub	sp, #12
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
 8015c56:	460b      	mov	r3, r1
 8015c58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015c5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	370c      	adds	r7, #12
 8015c60:	46bd      	mov	sp, r7
 8015c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c66:	4770      	bx	lr

08015c68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015c68:	b480      	push	{r7}
 8015c6a:	b083      	sub	sp, #12
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	460b      	mov	r3, r1
 8015c72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015c74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	370c      	adds	r7, #12
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c80:	4770      	bx	lr

08015c82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015c82:	b580      	push	{r7, lr}
 8015c84:	b086      	sub	sp, #24
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
 8015c8a:	460b      	mov	r3, r1
 8015c8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015c96:	2300      	movs	r3, #0
 8015c98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	885b      	ldrh	r3, [r3, #2]
 8015c9e:	b29a      	uxth	r2, r3
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	b29b      	uxth	r3, r3
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d920      	bls.n	8015cec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015cb2:	e013      	b.n	8015cdc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015cb4:	f107 030a 	add.w	r3, r7, #10
 8015cb8:	4619      	mov	r1, r3
 8015cba:	6978      	ldr	r0, [r7, #20]
 8015cbc:	f000 f81b 	bl	8015cf6 <USBD_GetNextDesc>
 8015cc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	785b      	ldrb	r3, [r3, #1]
 8015cc6:	2b05      	cmp	r3, #5
 8015cc8:	d108      	bne.n	8015cdc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	789b      	ldrb	r3, [r3, #2]
 8015cd2:	78fa      	ldrb	r2, [r7, #3]
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d008      	beq.n	8015cea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015cd8:	2300      	movs	r3, #0
 8015cda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	885b      	ldrh	r3, [r3, #2]
 8015ce0:	b29a      	uxth	r2, r3
 8015ce2:	897b      	ldrh	r3, [r7, #10]
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d8e5      	bhi.n	8015cb4 <USBD_GetEpDesc+0x32>
 8015ce8:	e000      	b.n	8015cec <USBD_GetEpDesc+0x6a>
          break;
 8015cea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015cec:	693b      	ldr	r3, [r7, #16]
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3718      	adds	r7, #24
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}

08015cf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015cf6:	b480      	push	{r7}
 8015cf8:	b085      	sub	sp, #20
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	6078      	str	r0, [r7, #4]
 8015cfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	881a      	ldrh	r2, [r3, #0]
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	4413      	add	r3, r2
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	781b      	ldrb	r3, [r3, #0]
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	4413      	add	r3, r2
 8015d20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015d22:	68fb      	ldr	r3, [r7, #12]
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	3714      	adds	r7, #20
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr

08015d30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015d30:	b480      	push	{r7}
 8015d32:	b087      	sub	sp, #28
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	3301      	adds	r3, #1
 8015d46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015d4e:	8a3b      	ldrh	r3, [r7, #16]
 8015d50:	021b      	lsls	r3, r3, #8
 8015d52:	b21a      	sxth	r2, r3
 8015d54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015d58:	4313      	orrs	r3, r2
 8015d5a:	b21b      	sxth	r3, r3
 8015d5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	371c      	adds	r7, #28
 8015d64:	46bd      	mov	sp, r7
 8015d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6a:	4770      	bx	lr

08015d6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b084      	sub	sp, #16
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d76:	2300      	movs	r3, #0
 8015d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	781b      	ldrb	r3, [r3, #0]
 8015d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d82:	2b40      	cmp	r3, #64	; 0x40
 8015d84:	d005      	beq.n	8015d92 <USBD_StdDevReq+0x26>
 8015d86:	2b40      	cmp	r3, #64	; 0x40
 8015d88:	d857      	bhi.n	8015e3a <USBD_StdDevReq+0xce>
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d00f      	beq.n	8015dae <USBD_StdDevReq+0x42>
 8015d8e:	2b20      	cmp	r3, #32
 8015d90:	d153      	bne.n	8015e3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	32ae      	adds	r2, #174	; 0xae
 8015d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015da0:	689b      	ldr	r3, [r3, #8]
 8015da2:	6839      	ldr	r1, [r7, #0]
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	4798      	blx	r3
 8015da8:	4603      	mov	r3, r0
 8015daa:	73fb      	strb	r3, [r7, #15]
      break;
 8015dac:	e04a      	b.n	8015e44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	785b      	ldrb	r3, [r3, #1]
 8015db2:	2b09      	cmp	r3, #9
 8015db4:	d83b      	bhi.n	8015e2e <USBD_StdDevReq+0xc2>
 8015db6:	a201      	add	r2, pc, #4	; (adr r2, 8015dbc <USBD_StdDevReq+0x50>)
 8015db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dbc:	08015e11 	.word	0x08015e11
 8015dc0:	08015e25 	.word	0x08015e25
 8015dc4:	08015e2f 	.word	0x08015e2f
 8015dc8:	08015e1b 	.word	0x08015e1b
 8015dcc:	08015e2f 	.word	0x08015e2f
 8015dd0:	08015def 	.word	0x08015def
 8015dd4:	08015de5 	.word	0x08015de5
 8015dd8:	08015e2f 	.word	0x08015e2f
 8015ddc:	08015e07 	.word	0x08015e07
 8015de0:	08015df9 	.word	0x08015df9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015de4:	6839      	ldr	r1, [r7, #0]
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f000 fa3c 	bl	8016264 <USBD_GetDescriptor>
          break;
 8015dec:	e024      	b.n	8015e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015dee:	6839      	ldr	r1, [r7, #0]
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f000 fbcb 	bl	801658c <USBD_SetAddress>
          break;
 8015df6:	e01f      	b.n	8015e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015df8:	6839      	ldr	r1, [r7, #0]
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 fc0a 	bl	8016614 <USBD_SetConfig>
 8015e00:	4603      	mov	r3, r0
 8015e02:	73fb      	strb	r3, [r7, #15]
          break;
 8015e04:	e018      	b.n	8015e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015e06:	6839      	ldr	r1, [r7, #0]
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 fcad 	bl	8016768 <USBD_GetConfig>
          break;
 8015e0e:	e013      	b.n	8015e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015e10:	6839      	ldr	r1, [r7, #0]
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 fcde 	bl	80167d4 <USBD_GetStatus>
          break;
 8015e18:	e00e      	b.n	8015e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015e1a:	6839      	ldr	r1, [r7, #0]
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f000 fd0d 	bl	801683c <USBD_SetFeature>
          break;
 8015e22:	e009      	b.n	8015e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015e24:	6839      	ldr	r1, [r7, #0]
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f000 fd31 	bl	801688e <USBD_ClrFeature>
          break;
 8015e2c:	e004      	b.n	8015e38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015e2e:	6839      	ldr	r1, [r7, #0]
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 fd88 	bl	8016946 <USBD_CtlError>
          break;
 8015e36:	bf00      	nop
      }
      break;
 8015e38:	e004      	b.n	8015e44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015e3a:	6839      	ldr	r1, [r7, #0]
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f000 fd82 	bl	8016946 <USBD_CtlError>
      break;
 8015e42:	bf00      	nop
  }

  return ret;
 8015e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop

08015e50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e66:	2b40      	cmp	r3, #64	; 0x40
 8015e68:	d005      	beq.n	8015e76 <USBD_StdItfReq+0x26>
 8015e6a:	2b40      	cmp	r3, #64	; 0x40
 8015e6c:	d852      	bhi.n	8015f14 <USBD_StdItfReq+0xc4>
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d001      	beq.n	8015e76 <USBD_StdItfReq+0x26>
 8015e72:	2b20      	cmp	r3, #32
 8015e74:	d14e      	bne.n	8015f14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e7c:	b2db      	uxtb	r3, r3
 8015e7e:	3b01      	subs	r3, #1
 8015e80:	2b02      	cmp	r3, #2
 8015e82:	d840      	bhi.n	8015f06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	889b      	ldrh	r3, [r3, #4]
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	2b01      	cmp	r3, #1
 8015e8c:	d836      	bhi.n	8015efc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	889b      	ldrh	r3, [r3, #4]
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	4619      	mov	r1, r3
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f7ff fed9 	bl	8015c4e <USBD_CoreFindIF>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ea0:	7bbb      	ldrb	r3, [r7, #14]
 8015ea2:	2bff      	cmp	r3, #255	; 0xff
 8015ea4:	d01d      	beq.n	8015ee2 <USBD_StdItfReq+0x92>
 8015ea6:	7bbb      	ldrb	r3, [r7, #14]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d11a      	bne.n	8015ee2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015eac:	7bba      	ldrb	r2, [r7, #14]
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	32ae      	adds	r2, #174	; 0xae
 8015eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eb6:	689b      	ldr	r3, [r3, #8]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d00f      	beq.n	8015edc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015ebc:	7bba      	ldrb	r2, [r7, #14]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ec4:	7bba      	ldrb	r2, [r7, #14]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	32ae      	adds	r2, #174	; 0xae
 8015eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ece:	689b      	ldr	r3, [r3, #8]
 8015ed0:	6839      	ldr	r1, [r7, #0]
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	4798      	blx	r3
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015eda:	e004      	b.n	8015ee6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015edc:	2303      	movs	r3, #3
 8015ede:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ee0:	e001      	b.n	8015ee6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015ee2:	2303      	movs	r3, #3
 8015ee4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	88db      	ldrh	r3, [r3, #6]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d110      	bne.n	8015f10 <USBD_StdItfReq+0xc0>
 8015eee:	7bfb      	ldrb	r3, [r7, #15]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d10d      	bne.n	8015f10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f000 fdf1 	bl	8016adc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015efa:	e009      	b.n	8015f10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015efc:	6839      	ldr	r1, [r7, #0]
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 fd21 	bl	8016946 <USBD_CtlError>
          break;
 8015f04:	e004      	b.n	8015f10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015f06:	6839      	ldr	r1, [r7, #0]
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f000 fd1c 	bl	8016946 <USBD_CtlError>
          break;
 8015f0e:	e000      	b.n	8015f12 <USBD_StdItfReq+0xc2>
          break;
 8015f10:	bf00      	nop
      }
      break;
 8015f12:	e004      	b.n	8015f1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 fd15 	bl	8016946 <USBD_CtlError>
      break;
 8015f1c:	bf00      	nop
  }

  return ret;
 8015f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	3710      	adds	r7, #16
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}

08015f28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015f32:	2300      	movs	r3, #0
 8015f34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	889b      	ldrh	r3, [r3, #4]
 8015f3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015f44:	2b40      	cmp	r3, #64	; 0x40
 8015f46:	d007      	beq.n	8015f58 <USBD_StdEPReq+0x30>
 8015f48:	2b40      	cmp	r3, #64	; 0x40
 8015f4a:	f200 817f 	bhi.w	801624c <USBD_StdEPReq+0x324>
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d02a      	beq.n	8015fa8 <USBD_StdEPReq+0x80>
 8015f52:	2b20      	cmp	r3, #32
 8015f54:	f040 817a 	bne.w	801624c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015f58:	7bbb      	ldrb	r3, [r7, #14]
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	6878      	ldr	r0, [r7, #4]
 8015f5e:	f7ff fe83 	bl	8015c68 <USBD_CoreFindEP>
 8015f62:	4603      	mov	r3, r0
 8015f64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f66:	7b7b      	ldrb	r3, [r7, #13]
 8015f68:	2bff      	cmp	r3, #255	; 0xff
 8015f6a:	f000 8174 	beq.w	8016256 <USBD_StdEPReq+0x32e>
 8015f6e:	7b7b      	ldrb	r3, [r7, #13]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	f040 8170 	bne.w	8016256 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015f76:	7b7a      	ldrb	r2, [r7, #13]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015f7e:	7b7a      	ldrb	r2, [r7, #13]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	32ae      	adds	r2, #174	; 0xae
 8015f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f88:	689b      	ldr	r3, [r3, #8]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	f000 8163 	beq.w	8016256 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015f90:	7b7a      	ldrb	r2, [r7, #13]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	32ae      	adds	r2, #174	; 0xae
 8015f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f9a:	689b      	ldr	r3, [r3, #8]
 8015f9c:	6839      	ldr	r1, [r7, #0]
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	4798      	blx	r3
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015fa6:	e156      	b.n	8016256 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	785b      	ldrb	r3, [r3, #1]
 8015fac:	2b03      	cmp	r3, #3
 8015fae:	d008      	beq.n	8015fc2 <USBD_StdEPReq+0x9a>
 8015fb0:	2b03      	cmp	r3, #3
 8015fb2:	f300 8145 	bgt.w	8016240 <USBD_StdEPReq+0x318>
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	f000 809b 	beq.w	80160f2 <USBD_StdEPReq+0x1ca>
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d03c      	beq.n	801603a <USBD_StdEPReq+0x112>
 8015fc0:	e13e      	b.n	8016240 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fc8:	b2db      	uxtb	r3, r3
 8015fca:	2b02      	cmp	r3, #2
 8015fcc:	d002      	beq.n	8015fd4 <USBD_StdEPReq+0xac>
 8015fce:	2b03      	cmp	r3, #3
 8015fd0:	d016      	beq.n	8016000 <USBD_StdEPReq+0xd8>
 8015fd2:	e02c      	b.n	801602e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015fd4:	7bbb      	ldrb	r3, [r7, #14]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d00d      	beq.n	8015ff6 <USBD_StdEPReq+0xce>
 8015fda:	7bbb      	ldrb	r3, [r7, #14]
 8015fdc:	2b80      	cmp	r3, #128	; 0x80
 8015fde:	d00a      	beq.n	8015ff6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015fe0:	7bbb      	ldrb	r3, [r7, #14]
 8015fe2:	4619      	mov	r1, r3
 8015fe4:	6878      	ldr	r0, [r7, #4]
 8015fe6:	f001 fa03 	bl	80173f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015fea:	2180      	movs	r1, #128	; 0x80
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f001 f9ff 	bl	80173f0 <USBD_LL_StallEP>
 8015ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015ff4:	e020      	b.n	8016038 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015ff6:	6839      	ldr	r1, [r7, #0]
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 fca4 	bl	8016946 <USBD_CtlError>
              break;
 8015ffe:	e01b      	b.n	8016038 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	885b      	ldrh	r3, [r3, #2]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d10e      	bne.n	8016026 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016008:	7bbb      	ldrb	r3, [r7, #14]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00b      	beq.n	8016026 <USBD_StdEPReq+0xfe>
 801600e:	7bbb      	ldrb	r3, [r7, #14]
 8016010:	2b80      	cmp	r3, #128	; 0x80
 8016012:	d008      	beq.n	8016026 <USBD_StdEPReq+0xfe>
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	88db      	ldrh	r3, [r3, #6]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d104      	bne.n	8016026 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801601c:	7bbb      	ldrb	r3, [r7, #14]
 801601e:	4619      	mov	r1, r3
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f001 f9e5 	bl	80173f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f000 fd58 	bl	8016adc <USBD_CtlSendStatus>

              break;
 801602c:	e004      	b.n	8016038 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801602e:	6839      	ldr	r1, [r7, #0]
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f000 fc88 	bl	8016946 <USBD_CtlError>
              break;
 8016036:	bf00      	nop
          }
          break;
 8016038:	e107      	b.n	801624a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016040:	b2db      	uxtb	r3, r3
 8016042:	2b02      	cmp	r3, #2
 8016044:	d002      	beq.n	801604c <USBD_StdEPReq+0x124>
 8016046:	2b03      	cmp	r3, #3
 8016048:	d016      	beq.n	8016078 <USBD_StdEPReq+0x150>
 801604a:	e04b      	b.n	80160e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801604c:	7bbb      	ldrb	r3, [r7, #14]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d00d      	beq.n	801606e <USBD_StdEPReq+0x146>
 8016052:	7bbb      	ldrb	r3, [r7, #14]
 8016054:	2b80      	cmp	r3, #128	; 0x80
 8016056:	d00a      	beq.n	801606e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016058:	7bbb      	ldrb	r3, [r7, #14]
 801605a:	4619      	mov	r1, r3
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f001 f9c7 	bl	80173f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016062:	2180      	movs	r1, #128	; 0x80
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f001 f9c3 	bl	80173f0 <USBD_LL_StallEP>
 801606a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801606c:	e040      	b.n	80160f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801606e:	6839      	ldr	r1, [r7, #0]
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f000 fc68 	bl	8016946 <USBD_CtlError>
              break;
 8016076:	e03b      	b.n	80160f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	885b      	ldrh	r3, [r3, #2]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d136      	bne.n	80160ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016080:	7bbb      	ldrb	r3, [r7, #14]
 8016082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016086:	2b00      	cmp	r3, #0
 8016088:	d004      	beq.n	8016094 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801608a:	7bbb      	ldrb	r3, [r7, #14]
 801608c:	4619      	mov	r1, r3
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f001 f9cd 	bl	801742e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 fd21 	bl	8016adc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801609a:	7bbb      	ldrb	r3, [r7, #14]
 801609c:	4619      	mov	r1, r3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7ff fde2 	bl	8015c68 <USBD_CoreFindEP>
 80160a4:	4603      	mov	r3, r0
 80160a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160a8:	7b7b      	ldrb	r3, [r7, #13]
 80160aa:	2bff      	cmp	r3, #255	; 0xff
 80160ac:	d01f      	beq.n	80160ee <USBD_StdEPReq+0x1c6>
 80160ae:	7b7b      	ldrb	r3, [r7, #13]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d11c      	bne.n	80160ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80160b4:	7b7a      	ldrb	r2, [r7, #13]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80160bc:	7b7a      	ldrb	r2, [r7, #13]
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	32ae      	adds	r2, #174	; 0xae
 80160c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160c6:	689b      	ldr	r3, [r3, #8]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d010      	beq.n	80160ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80160cc:	7b7a      	ldrb	r2, [r7, #13]
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	32ae      	adds	r2, #174	; 0xae
 80160d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160d6:	689b      	ldr	r3, [r3, #8]
 80160d8:	6839      	ldr	r1, [r7, #0]
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	4798      	blx	r3
 80160de:	4603      	mov	r3, r0
 80160e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80160e2:	e004      	b.n	80160ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80160e4:	6839      	ldr	r1, [r7, #0]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f000 fc2d 	bl	8016946 <USBD_CtlError>
              break;
 80160ec:	e000      	b.n	80160f0 <USBD_StdEPReq+0x1c8>
              break;
 80160ee:	bf00      	nop
          }
          break;
 80160f0:	e0ab      	b.n	801624a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	2b02      	cmp	r3, #2
 80160fc:	d002      	beq.n	8016104 <USBD_StdEPReq+0x1dc>
 80160fe:	2b03      	cmp	r3, #3
 8016100:	d032      	beq.n	8016168 <USBD_StdEPReq+0x240>
 8016102:	e097      	b.n	8016234 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016104:	7bbb      	ldrb	r3, [r7, #14]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d007      	beq.n	801611a <USBD_StdEPReq+0x1f2>
 801610a:	7bbb      	ldrb	r3, [r7, #14]
 801610c:	2b80      	cmp	r3, #128	; 0x80
 801610e:	d004      	beq.n	801611a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016110:	6839      	ldr	r1, [r7, #0]
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f000 fc17 	bl	8016946 <USBD_CtlError>
                break;
 8016118:	e091      	b.n	801623e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801611a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801611e:	2b00      	cmp	r3, #0
 8016120:	da0b      	bge.n	801613a <USBD_StdEPReq+0x212>
 8016122:	7bbb      	ldrb	r3, [r7, #14]
 8016124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016128:	4613      	mov	r3, r2
 801612a:	009b      	lsls	r3, r3, #2
 801612c:	4413      	add	r3, r2
 801612e:	009b      	lsls	r3, r3, #2
 8016130:	3310      	adds	r3, #16
 8016132:	687a      	ldr	r2, [r7, #4]
 8016134:	4413      	add	r3, r2
 8016136:	3304      	adds	r3, #4
 8016138:	e00b      	b.n	8016152 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801613a:	7bbb      	ldrb	r3, [r7, #14]
 801613c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016140:	4613      	mov	r3, r2
 8016142:	009b      	lsls	r3, r3, #2
 8016144:	4413      	add	r3, r2
 8016146:	009b      	lsls	r3, r3, #2
 8016148:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	4413      	add	r3, r2
 8016150:	3304      	adds	r3, #4
 8016152:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	2200      	movs	r2, #0
 8016158:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	2202      	movs	r2, #2
 801615e:	4619      	mov	r1, r3
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f000 fc61 	bl	8016a28 <USBD_CtlSendData>
              break;
 8016166:	e06a      	b.n	801623e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801616c:	2b00      	cmp	r3, #0
 801616e:	da11      	bge.n	8016194 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016170:	7bbb      	ldrb	r3, [r7, #14]
 8016172:	f003 020f 	and.w	r2, r3, #15
 8016176:	6879      	ldr	r1, [r7, #4]
 8016178:	4613      	mov	r3, r2
 801617a:	009b      	lsls	r3, r3, #2
 801617c:	4413      	add	r3, r2
 801617e:	009b      	lsls	r3, r3, #2
 8016180:	440b      	add	r3, r1
 8016182:	3324      	adds	r3, #36	; 0x24
 8016184:	881b      	ldrh	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d117      	bne.n	80161ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 fbda 	bl	8016946 <USBD_CtlError>
                  break;
 8016192:	e054      	b.n	801623e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016194:	7bbb      	ldrb	r3, [r7, #14]
 8016196:	f003 020f 	and.w	r2, r3, #15
 801619a:	6879      	ldr	r1, [r7, #4]
 801619c:	4613      	mov	r3, r2
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	4413      	add	r3, r2
 80161a2:	009b      	lsls	r3, r3, #2
 80161a4:	440b      	add	r3, r1
 80161a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80161aa:	881b      	ldrh	r3, [r3, #0]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d104      	bne.n	80161ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80161b0:	6839      	ldr	r1, [r7, #0]
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f000 fbc7 	bl	8016946 <USBD_CtlError>
                  break;
 80161b8:	e041      	b.n	801623e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	da0b      	bge.n	80161da <USBD_StdEPReq+0x2b2>
 80161c2:	7bbb      	ldrb	r3, [r7, #14]
 80161c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161c8:	4613      	mov	r3, r2
 80161ca:	009b      	lsls	r3, r3, #2
 80161cc:	4413      	add	r3, r2
 80161ce:	009b      	lsls	r3, r3, #2
 80161d0:	3310      	adds	r3, #16
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	4413      	add	r3, r2
 80161d6:	3304      	adds	r3, #4
 80161d8:	e00b      	b.n	80161f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80161da:	7bbb      	ldrb	r3, [r7, #14]
 80161dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161e0:	4613      	mov	r3, r2
 80161e2:	009b      	lsls	r3, r3, #2
 80161e4:	4413      	add	r3, r2
 80161e6:	009b      	lsls	r3, r3, #2
 80161e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	4413      	add	r3, r2
 80161f0:	3304      	adds	r3, #4
 80161f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80161f4:	7bbb      	ldrb	r3, [r7, #14]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d002      	beq.n	8016200 <USBD_StdEPReq+0x2d8>
 80161fa:	7bbb      	ldrb	r3, [r7, #14]
 80161fc:	2b80      	cmp	r3, #128	; 0x80
 80161fe:	d103      	bne.n	8016208 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	2200      	movs	r2, #0
 8016204:	601a      	str	r2, [r3, #0]
 8016206:	e00e      	b.n	8016226 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016208:	7bbb      	ldrb	r3, [r7, #14]
 801620a:	4619      	mov	r1, r3
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f001 f92d 	bl	801746c <USBD_LL_IsStallEP>
 8016212:	4603      	mov	r3, r0
 8016214:	2b00      	cmp	r3, #0
 8016216:	d003      	beq.n	8016220 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	2201      	movs	r2, #1
 801621c:	601a      	str	r2, [r3, #0]
 801621e:	e002      	b.n	8016226 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	2200      	movs	r2, #0
 8016224:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	2202      	movs	r2, #2
 801622a:	4619      	mov	r1, r3
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 fbfb 	bl	8016a28 <USBD_CtlSendData>
              break;
 8016232:	e004      	b.n	801623e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016234:	6839      	ldr	r1, [r7, #0]
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f000 fb85 	bl	8016946 <USBD_CtlError>
              break;
 801623c:	bf00      	nop
          }
          break;
 801623e:	e004      	b.n	801624a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016240:	6839      	ldr	r1, [r7, #0]
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f000 fb7f 	bl	8016946 <USBD_CtlError>
          break;
 8016248:	bf00      	nop
      }
      break;
 801624a:	e005      	b.n	8016258 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801624c:	6839      	ldr	r1, [r7, #0]
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 fb79 	bl	8016946 <USBD_CtlError>
      break;
 8016254:	e000      	b.n	8016258 <USBD_StdEPReq+0x330>
      break;
 8016256:	bf00      	nop
  }

  return ret;
 8016258:	7bfb      	ldrb	r3, [r7, #15]
}
 801625a:	4618      	mov	r0, r3
 801625c:	3710      	adds	r7, #16
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
	...

08016264 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801626e:	2300      	movs	r3, #0
 8016270:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016272:	2300      	movs	r3, #0
 8016274:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016276:	2300      	movs	r3, #0
 8016278:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	885b      	ldrh	r3, [r3, #2]
 801627e:	0a1b      	lsrs	r3, r3, #8
 8016280:	b29b      	uxth	r3, r3
 8016282:	3b01      	subs	r3, #1
 8016284:	2b0e      	cmp	r3, #14
 8016286:	f200 8152 	bhi.w	801652e <USBD_GetDescriptor+0x2ca>
 801628a:	a201      	add	r2, pc, #4	; (adr r2, 8016290 <USBD_GetDescriptor+0x2c>)
 801628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016290:	08016301 	.word	0x08016301
 8016294:	08016319 	.word	0x08016319
 8016298:	08016359 	.word	0x08016359
 801629c:	0801652f 	.word	0x0801652f
 80162a0:	0801652f 	.word	0x0801652f
 80162a4:	080164cf 	.word	0x080164cf
 80162a8:	080164fb 	.word	0x080164fb
 80162ac:	0801652f 	.word	0x0801652f
 80162b0:	0801652f 	.word	0x0801652f
 80162b4:	0801652f 	.word	0x0801652f
 80162b8:	0801652f 	.word	0x0801652f
 80162bc:	0801652f 	.word	0x0801652f
 80162c0:	0801652f 	.word	0x0801652f
 80162c4:	0801652f 	.word	0x0801652f
 80162c8:	080162cd 	.word	0x080162cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162d2:	69db      	ldr	r3, [r3, #28]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d00b      	beq.n	80162f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162de:	69db      	ldr	r3, [r3, #28]
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	7c12      	ldrb	r2, [r2, #16]
 80162e4:	f107 0108 	add.w	r1, r7, #8
 80162e8:	4610      	mov	r0, r2
 80162ea:	4798      	blx	r3
 80162ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80162ee:	e126      	b.n	801653e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80162f0:	6839      	ldr	r1, [r7, #0]
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f000 fb27 	bl	8016946 <USBD_CtlError>
        err++;
 80162f8:	7afb      	ldrb	r3, [r7, #11]
 80162fa:	3301      	adds	r3, #1
 80162fc:	72fb      	strb	r3, [r7, #11]
      break;
 80162fe:	e11e      	b.n	801653e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	687a      	ldr	r2, [r7, #4]
 801630a:	7c12      	ldrb	r2, [r2, #16]
 801630c:	f107 0108 	add.w	r1, r7, #8
 8016310:	4610      	mov	r0, r2
 8016312:	4798      	blx	r3
 8016314:	60f8      	str	r0, [r7, #12]
      break;
 8016316:	e112      	b.n	801653e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	7c1b      	ldrb	r3, [r3, #16]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d10d      	bne.n	801633c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016328:	f107 0208 	add.w	r2, r7, #8
 801632c:	4610      	mov	r0, r2
 801632e:	4798      	blx	r3
 8016330:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	3301      	adds	r3, #1
 8016336:	2202      	movs	r2, #2
 8016338:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801633a:	e100      	b.n	801653e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016344:	f107 0208 	add.w	r2, r7, #8
 8016348:	4610      	mov	r0, r2
 801634a:	4798      	blx	r3
 801634c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	3301      	adds	r3, #1
 8016352:	2202      	movs	r2, #2
 8016354:	701a      	strb	r2, [r3, #0]
      break;
 8016356:	e0f2      	b.n	801653e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	885b      	ldrh	r3, [r3, #2]
 801635c:	b2db      	uxtb	r3, r3
 801635e:	2b05      	cmp	r3, #5
 8016360:	f200 80ac 	bhi.w	80164bc <USBD_GetDescriptor+0x258>
 8016364:	a201      	add	r2, pc, #4	; (adr r2, 801636c <USBD_GetDescriptor+0x108>)
 8016366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801636a:	bf00      	nop
 801636c:	08016385 	.word	0x08016385
 8016370:	080163b9 	.word	0x080163b9
 8016374:	080163ed 	.word	0x080163ed
 8016378:	08016421 	.word	0x08016421
 801637c:	08016455 	.word	0x08016455
 8016380:	08016489 	.word	0x08016489
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d00b      	beq.n	80163a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	687a      	ldr	r2, [r7, #4]
 801639a:	7c12      	ldrb	r2, [r2, #16]
 801639c:	f107 0108 	add.w	r1, r7, #8
 80163a0:	4610      	mov	r0, r2
 80163a2:	4798      	blx	r3
 80163a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80163a6:	e091      	b.n	80164cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80163a8:	6839      	ldr	r1, [r7, #0]
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f000 facb 	bl	8016946 <USBD_CtlError>
            err++;
 80163b0:	7afb      	ldrb	r3, [r7, #11]
 80163b2:	3301      	adds	r3, #1
 80163b4:	72fb      	strb	r3, [r7, #11]
          break;
 80163b6:	e089      	b.n	80164cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163be:	689b      	ldr	r3, [r3, #8]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d00b      	beq.n	80163dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163ca:	689b      	ldr	r3, [r3, #8]
 80163cc:	687a      	ldr	r2, [r7, #4]
 80163ce:	7c12      	ldrb	r2, [r2, #16]
 80163d0:	f107 0108 	add.w	r1, r7, #8
 80163d4:	4610      	mov	r0, r2
 80163d6:	4798      	blx	r3
 80163d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80163da:	e077      	b.n	80164cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80163dc:	6839      	ldr	r1, [r7, #0]
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f000 fab1 	bl	8016946 <USBD_CtlError>
            err++;
 80163e4:	7afb      	ldrb	r3, [r7, #11]
 80163e6:	3301      	adds	r3, #1
 80163e8:	72fb      	strb	r3, [r7, #11]
          break;
 80163ea:	e06f      	b.n	80164cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163f2:	68db      	ldr	r3, [r3, #12]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d00b      	beq.n	8016410 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	687a      	ldr	r2, [r7, #4]
 8016402:	7c12      	ldrb	r2, [r2, #16]
 8016404:	f107 0108 	add.w	r1, r7, #8
 8016408:	4610      	mov	r0, r2
 801640a:	4798      	blx	r3
 801640c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801640e:	e05d      	b.n	80164cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016410:	6839      	ldr	r1, [r7, #0]
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	f000 fa97 	bl	8016946 <USBD_CtlError>
            err++;
 8016418:	7afb      	ldrb	r3, [r7, #11]
 801641a:	3301      	adds	r3, #1
 801641c:	72fb      	strb	r3, [r7, #11]
          break;
 801641e:	e055      	b.n	80164cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016426:	691b      	ldr	r3, [r3, #16]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d00b      	beq.n	8016444 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016432:	691b      	ldr	r3, [r3, #16]
 8016434:	687a      	ldr	r2, [r7, #4]
 8016436:	7c12      	ldrb	r2, [r2, #16]
 8016438:	f107 0108 	add.w	r1, r7, #8
 801643c:	4610      	mov	r0, r2
 801643e:	4798      	blx	r3
 8016440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016442:	e043      	b.n	80164cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016444:	6839      	ldr	r1, [r7, #0]
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f000 fa7d 	bl	8016946 <USBD_CtlError>
            err++;
 801644c:	7afb      	ldrb	r3, [r7, #11]
 801644e:	3301      	adds	r3, #1
 8016450:	72fb      	strb	r3, [r7, #11]
          break;
 8016452:	e03b      	b.n	80164cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801645a:	695b      	ldr	r3, [r3, #20]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d00b      	beq.n	8016478 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016466:	695b      	ldr	r3, [r3, #20]
 8016468:	687a      	ldr	r2, [r7, #4]
 801646a:	7c12      	ldrb	r2, [r2, #16]
 801646c:	f107 0108 	add.w	r1, r7, #8
 8016470:	4610      	mov	r0, r2
 8016472:	4798      	blx	r3
 8016474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016476:	e029      	b.n	80164cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016478:	6839      	ldr	r1, [r7, #0]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f000 fa63 	bl	8016946 <USBD_CtlError>
            err++;
 8016480:	7afb      	ldrb	r3, [r7, #11]
 8016482:	3301      	adds	r3, #1
 8016484:	72fb      	strb	r3, [r7, #11]
          break;
 8016486:	e021      	b.n	80164cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801648e:	699b      	ldr	r3, [r3, #24]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d00b      	beq.n	80164ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801649a:	699b      	ldr	r3, [r3, #24]
 801649c:	687a      	ldr	r2, [r7, #4]
 801649e:	7c12      	ldrb	r2, [r2, #16]
 80164a0:	f107 0108 	add.w	r1, r7, #8
 80164a4:	4610      	mov	r0, r2
 80164a6:	4798      	blx	r3
 80164a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164aa:	e00f      	b.n	80164cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164ac:	6839      	ldr	r1, [r7, #0]
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f000 fa49 	bl	8016946 <USBD_CtlError>
            err++;
 80164b4:	7afb      	ldrb	r3, [r7, #11]
 80164b6:	3301      	adds	r3, #1
 80164b8:	72fb      	strb	r3, [r7, #11]
          break;
 80164ba:	e007      	b.n	80164cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80164bc:	6839      	ldr	r1, [r7, #0]
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f000 fa41 	bl	8016946 <USBD_CtlError>
          err++;
 80164c4:	7afb      	ldrb	r3, [r7, #11]
 80164c6:	3301      	adds	r3, #1
 80164c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80164ca:	bf00      	nop
      }
      break;
 80164cc:	e037      	b.n	801653e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	7c1b      	ldrb	r3, [r3, #16]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d109      	bne.n	80164ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164de:	f107 0208 	add.w	r2, r7, #8
 80164e2:	4610      	mov	r0, r2
 80164e4:	4798      	blx	r3
 80164e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80164e8:	e029      	b.n	801653e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80164ea:	6839      	ldr	r1, [r7, #0]
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f000 fa2a 	bl	8016946 <USBD_CtlError>
        err++;
 80164f2:	7afb      	ldrb	r3, [r7, #11]
 80164f4:	3301      	adds	r3, #1
 80164f6:	72fb      	strb	r3, [r7, #11]
      break;
 80164f8:	e021      	b.n	801653e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	7c1b      	ldrb	r3, [r3, #16]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d10d      	bne.n	801651e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801650a:	f107 0208 	add.w	r2, r7, #8
 801650e:	4610      	mov	r0, r2
 8016510:	4798      	blx	r3
 8016512:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	3301      	adds	r3, #1
 8016518:	2207      	movs	r2, #7
 801651a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801651c:	e00f      	b.n	801653e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801651e:	6839      	ldr	r1, [r7, #0]
 8016520:	6878      	ldr	r0, [r7, #4]
 8016522:	f000 fa10 	bl	8016946 <USBD_CtlError>
        err++;
 8016526:	7afb      	ldrb	r3, [r7, #11]
 8016528:	3301      	adds	r3, #1
 801652a:	72fb      	strb	r3, [r7, #11]
      break;
 801652c:	e007      	b.n	801653e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801652e:	6839      	ldr	r1, [r7, #0]
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f000 fa08 	bl	8016946 <USBD_CtlError>
      err++;
 8016536:	7afb      	ldrb	r3, [r7, #11]
 8016538:	3301      	adds	r3, #1
 801653a:	72fb      	strb	r3, [r7, #11]
      break;
 801653c:	bf00      	nop
  }

  if (err != 0U)
 801653e:	7afb      	ldrb	r3, [r7, #11]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d11e      	bne.n	8016582 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	88db      	ldrh	r3, [r3, #6]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d016      	beq.n	801657a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801654c:	893b      	ldrh	r3, [r7, #8]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00e      	beq.n	8016570 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8016552:	683b      	ldr	r3, [r7, #0]
 8016554:	88da      	ldrh	r2, [r3, #6]
 8016556:	893b      	ldrh	r3, [r7, #8]
 8016558:	4293      	cmp	r3, r2
 801655a:	bf28      	it	cs
 801655c:	4613      	movcs	r3, r2
 801655e:	b29b      	uxth	r3, r3
 8016560:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016562:	893b      	ldrh	r3, [r7, #8]
 8016564:	461a      	mov	r2, r3
 8016566:	68f9      	ldr	r1, [r7, #12]
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f000 fa5d 	bl	8016a28 <USBD_CtlSendData>
 801656e:	e009      	b.n	8016584 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016570:	6839      	ldr	r1, [r7, #0]
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f000 f9e7 	bl	8016946 <USBD_CtlError>
 8016578:	e004      	b.n	8016584 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f000 faae 	bl	8016adc <USBD_CtlSendStatus>
 8016580:	e000      	b.n	8016584 <USBD_GetDescriptor+0x320>
    return;
 8016582:	bf00      	nop
  }
}
 8016584:	3710      	adds	r7, #16
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop

0801658c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b084      	sub	sp, #16
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	889b      	ldrh	r3, [r3, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d131      	bne.n	8016602 <USBD_SetAddress+0x76>
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	88db      	ldrh	r3, [r3, #6]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d12d      	bne.n	8016602 <USBD_SetAddress+0x76>
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	885b      	ldrh	r3, [r3, #2]
 80165aa:	2b7f      	cmp	r3, #127	; 0x7f
 80165ac:	d829      	bhi.n	8016602 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	885b      	ldrh	r3, [r3, #2]
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165c0:	b2db      	uxtb	r3, r3
 80165c2:	2b03      	cmp	r3, #3
 80165c4:	d104      	bne.n	80165d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80165c6:	6839      	ldr	r1, [r7, #0]
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 f9bc 	bl	8016946 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165ce:	e01d      	b.n	801660c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	7bfa      	ldrb	r2, [r7, #15]
 80165d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80165d8:	7bfb      	ldrb	r3, [r7, #15]
 80165da:	4619      	mov	r1, r3
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f000 ff71 	bl	80174c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f000 fa7a 	bl	8016adc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80165e8:	7bfb      	ldrb	r3, [r7, #15]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d004      	beq.n	80165f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	2202      	movs	r2, #2
 80165f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165f6:	e009      	b.n	801660c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2201      	movs	r2, #1
 80165fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016600:	e004      	b.n	801660c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016602:	6839      	ldr	r1, [r7, #0]
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	f000 f99e 	bl	8016946 <USBD_CtlError>
  }
}
 801660a:	bf00      	nop
 801660c:	bf00      	nop
 801660e:	3710      	adds	r7, #16
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}

08016614 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b084      	sub	sp, #16
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801661e:	2300      	movs	r3, #0
 8016620:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	885b      	ldrh	r3, [r3, #2]
 8016626:	b2da      	uxtb	r2, r3
 8016628:	4b4e      	ldr	r3, [pc, #312]	; (8016764 <USBD_SetConfig+0x150>)
 801662a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801662c:	4b4d      	ldr	r3, [pc, #308]	; (8016764 <USBD_SetConfig+0x150>)
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	2b01      	cmp	r3, #1
 8016632:	d905      	bls.n	8016640 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016634:	6839      	ldr	r1, [r7, #0]
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f000 f985 	bl	8016946 <USBD_CtlError>
    return USBD_FAIL;
 801663c:	2303      	movs	r3, #3
 801663e:	e08c      	b.n	801675a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016646:	b2db      	uxtb	r3, r3
 8016648:	2b02      	cmp	r3, #2
 801664a:	d002      	beq.n	8016652 <USBD_SetConfig+0x3e>
 801664c:	2b03      	cmp	r3, #3
 801664e:	d029      	beq.n	80166a4 <USBD_SetConfig+0x90>
 8016650:	e075      	b.n	801673e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016652:	4b44      	ldr	r3, [pc, #272]	; (8016764 <USBD_SetConfig+0x150>)
 8016654:	781b      	ldrb	r3, [r3, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d020      	beq.n	801669c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801665a:	4b42      	ldr	r3, [pc, #264]	; (8016764 <USBD_SetConfig+0x150>)
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	461a      	mov	r2, r3
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016664:	4b3f      	ldr	r3, [pc, #252]	; (8016764 <USBD_SetConfig+0x150>)
 8016666:	781b      	ldrb	r3, [r3, #0]
 8016668:	4619      	mov	r1, r3
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f7fe ffb7 	bl	80155de <USBD_SetClassConfig>
 8016670:	4603      	mov	r3, r0
 8016672:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016674:	7bfb      	ldrb	r3, [r7, #15]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d008      	beq.n	801668c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801667a:	6839      	ldr	r1, [r7, #0]
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f000 f962 	bl	8016946 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2202      	movs	r2, #2
 8016686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801668a:	e065      	b.n	8016758 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f000 fa25 	bl	8016adc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2203      	movs	r2, #3
 8016696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801669a:	e05d      	b.n	8016758 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 fa1d 	bl	8016adc <USBD_CtlSendStatus>
      break;
 80166a2:	e059      	b.n	8016758 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80166a4:	4b2f      	ldr	r3, [pc, #188]	; (8016764 <USBD_SetConfig+0x150>)
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d112      	bne.n	80166d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2202      	movs	r2, #2
 80166b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80166b4:	4b2b      	ldr	r3, [pc, #172]	; (8016764 <USBD_SetConfig+0x150>)
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	461a      	mov	r2, r3
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80166be:	4b29      	ldr	r3, [pc, #164]	; (8016764 <USBD_SetConfig+0x150>)
 80166c0:	781b      	ldrb	r3, [r3, #0]
 80166c2:	4619      	mov	r1, r3
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f7fe ffa6 	bl	8015616 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f000 fa06 	bl	8016adc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80166d0:	e042      	b.n	8016758 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80166d2:	4b24      	ldr	r3, [pc, #144]	; (8016764 <USBD_SetConfig+0x150>)
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	461a      	mov	r2, r3
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	685b      	ldr	r3, [r3, #4]
 80166dc:	429a      	cmp	r2, r3
 80166de:	d02a      	beq.n	8016736 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	b2db      	uxtb	r3, r3
 80166e6:	4619      	mov	r1, r3
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7fe ff94 	bl	8015616 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80166ee:	4b1d      	ldr	r3, [pc, #116]	; (8016764 <USBD_SetConfig+0x150>)
 80166f0:	781b      	ldrb	r3, [r3, #0]
 80166f2:	461a      	mov	r2, r3
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80166f8:	4b1a      	ldr	r3, [pc, #104]	; (8016764 <USBD_SetConfig+0x150>)
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	4619      	mov	r1, r3
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f7fe ff6d 	bl	80155de <USBD_SetClassConfig>
 8016704:	4603      	mov	r3, r0
 8016706:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016708:	7bfb      	ldrb	r3, [r7, #15]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d00f      	beq.n	801672e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801670e:	6839      	ldr	r1, [r7, #0]
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f000 f918 	bl	8016946 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	b2db      	uxtb	r3, r3
 801671c:	4619      	mov	r1, r3
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f7fe ff79 	bl	8015616 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2202      	movs	r2, #2
 8016728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801672c:	e014      	b.n	8016758 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f000 f9d4 	bl	8016adc <USBD_CtlSendStatus>
      break;
 8016734:	e010      	b.n	8016758 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f000 f9d0 	bl	8016adc <USBD_CtlSendStatus>
      break;
 801673c:	e00c      	b.n	8016758 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801673e:	6839      	ldr	r1, [r7, #0]
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f000 f900 	bl	8016946 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016746:	4b07      	ldr	r3, [pc, #28]	; (8016764 <USBD_SetConfig+0x150>)
 8016748:	781b      	ldrb	r3, [r3, #0]
 801674a:	4619      	mov	r1, r3
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f7fe ff62 	bl	8015616 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016752:	2303      	movs	r3, #3
 8016754:	73fb      	strb	r3, [r7, #15]
      break;
 8016756:	bf00      	nop
  }

  return ret;
 8016758:	7bfb      	ldrb	r3, [r7, #15]
}
 801675a:	4618      	mov	r0, r3
 801675c:	3710      	adds	r7, #16
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}
 8016762:	bf00      	nop
 8016764:	240015fc 	.word	0x240015fc

08016768 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	88db      	ldrh	r3, [r3, #6]
 8016776:	2b01      	cmp	r3, #1
 8016778:	d004      	beq.n	8016784 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801677a:	6839      	ldr	r1, [r7, #0]
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 f8e2 	bl	8016946 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016782:	e023      	b.n	80167cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2b02      	cmp	r3, #2
 801678e:	dc02      	bgt.n	8016796 <USBD_GetConfig+0x2e>
 8016790:	2b00      	cmp	r3, #0
 8016792:	dc03      	bgt.n	801679c <USBD_GetConfig+0x34>
 8016794:	e015      	b.n	80167c2 <USBD_GetConfig+0x5a>
 8016796:	2b03      	cmp	r3, #3
 8016798:	d00b      	beq.n	80167b2 <USBD_GetConfig+0x4a>
 801679a:	e012      	b.n	80167c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2200      	movs	r2, #0
 80167a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	3308      	adds	r3, #8
 80167a6:	2201      	movs	r2, #1
 80167a8:	4619      	mov	r1, r3
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f000 f93c 	bl	8016a28 <USBD_CtlSendData>
        break;
 80167b0:	e00c      	b.n	80167cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	3304      	adds	r3, #4
 80167b6:	2201      	movs	r2, #1
 80167b8:	4619      	mov	r1, r3
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f000 f934 	bl	8016a28 <USBD_CtlSendData>
        break;
 80167c0:	e004      	b.n	80167cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80167c2:	6839      	ldr	r1, [r7, #0]
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f000 f8be 	bl	8016946 <USBD_CtlError>
        break;
 80167ca:	bf00      	nop
}
 80167cc:	bf00      	nop
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	3b01      	subs	r3, #1
 80167e8:	2b02      	cmp	r3, #2
 80167ea:	d81e      	bhi.n	801682a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	88db      	ldrh	r3, [r3, #6]
 80167f0:	2b02      	cmp	r3, #2
 80167f2:	d004      	beq.n	80167fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80167f4:	6839      	ldr	r1, [r7, #0]
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f000 f8a5 	bl	8016946 <USBD_CtlError>
        break;
 80167fc:	e01a      	b.n	8016834 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	2201      	movs	r2, #1
 8016802:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801680a:	2b00      	cmp	r3, #0
 801680c:	d005      	beq.n	801681a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	68db      	ldr	r3, [r3, #12]
 8016812:	f043 0202 	orr.w	r2, r3, #2
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	330c      	adds	r3, #12
 801681e:	2202      	movs	r2, #2
 8016820:	4619      	mov	r1, r3
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f000 f900 	bl	8016a28 <USBD_CtlSendData>
      break;
 8016828:	e004      	b.n	8016834 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801682a:	6839      	ldr	r1, [r7, #0]
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f000 f88a 	bl	8016946 <USBD_CtlError>
      break;
 8016832:	bf00      	nop
  }
}
 8016834:	bf00      	nop
 8016836:	3708      	adds	r7, #8
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}

0801683c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b082      	sub	sp, #8
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	885b      	ldrh	r3, [r3, #2]
 801684a:	2b01      	cmp	r3, #1
 801684c:	d107      	bne.n	801685e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	2201      	movs	r2, #1
 8016852:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	f000 f940 	bl	8016adc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801685c:	e013      	b.n	8016886 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	885b      	ldrh	r3, [r3, #2]
 8016862:	2b02      	cmp	r3, #2
 8016864:	d10b      	bne.n	801687e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	889b      	ldrh	r3, [r3, #4]
 801686a:	0a1b      	lsrs	r3, r3, #8
 801686c:	b29b      	uxth	r3, r3
 801686e:	b2da      	uxtb	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f000 f930 	bl	8016adc <USBD_CtlSendStatus>
}
 801687c:	e003      	b.n	8016886 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801687e:	6839      	ldr	r1, [r7, #0]
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f000 f860 	bl	8016946 <USBD_CtlError>
}
 8016886:	bf00      	nop
 8016888:	3708      	adds	r7, #8
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}

0801688e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801688e:	b580      	push	{r7, lr}
 8016890:	b082      	sub	sp, #8
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
 8016896:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	3b01      	subs	r3, #1
 80168a2:	2b02      	cmp	r3, #2
 80168a4:	d80b      	bhi.n	80168be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	885b      	ldrh	r3, [r3, #2]
 80168aa:	2b01      	cmp	r3, #1
 80168ac:	d10c      	bne.n	80168c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2200      	movs	r2, #0
 80168b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80168b6:	6878      	ldr	r0, [r7, #4]
 80168b8:	f000 f910 	bl	8016adc <USBD_CtlSendStatus>
      }
      break;
 80168bc:	e004      	b.n	80168c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80168be:	6839      	ldr	r1, [r7, #0]
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f000 f840 	bl	8016946 <USBD_CtlError>
      break;
 80168c6:	e000      	b.n	80168ca <USBD_ClrFeature+0x3c>
      break;
 80168c8:	bf00      	nop
  }
}
 80168ca:	bf00      	nop
 80168cc:	3708      	adds	r7, #8
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}

080168d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80168d2:	b580      	push	{r7, lr}
 80168d4:	b084      	sub	sp, #16
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	6078      	str	r0, [r7, #4]
 80168da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	781a      	ldrb	r2, [r3, #0]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	3301      	adds	r3, #1
 80168ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	781a      	ldrb	r2, [r3, #0]
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	3301      	adds	r3, #1
 80168fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80168fc:	68f8      	ldr	r0, [r7, #12]
 80168fe:	f7ff fa17 	bl	8015d30 <SWAPBYTE>
 8016902:	4603      	mov	r3, r0
 8016904:	461a      	mov	r2, r3
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	3301      	adds	r3, #1
 801690e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	3301      	adds	r3, #1
 8016914:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016916:	68f8      	ldr	r0, [r7, #12]
 8016918:	f7ff fa0a 	bl	8015d30 <SWAPBYTE>
 801691c:	4603      	mov	r3, r0
 801691e:	461a      	mov	r2, r3
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	3301      	adds	r3, #1
 8016928:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	3301      	adds	r3, #1
 801692e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016930:	68f8      	ldr	r0, [r7, #12]
 8016932:	f7ff f9fd 	bl	8015d30 <SWAPBYTE>
 8016936:	4603      	mov	r3, r0
 8016938:	461a      	mov	r2, r3
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	80da      	strh	r2, [r3, #6]
}
 801693e:	bf00      	nop
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b082      	sub	sp, #8
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
 801694e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016950:	2180      	movs	r1, #128	; 0x80
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f000 fd4c 	bl	80173f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016958:	2100      	movs	r1, #0
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	f000 fd48 	bl	80173f0 <USBD_LL_StallEP>
}
 8016960:	bf00      	nop
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b086      	sub	sp, #24
 801696c:	af00      	add	r7, sp, #0
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	60b9      	str	r1, [r7, #8]
 8016972:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016974:	2300      	movs	r3, #0
 8016976:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d036      	beq.n	80169ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016982:	6938      	ldr	r0, [r7, #16]
 8016984:	f000 f836 	bl	80169f4 <USBD_GetLen>
 8016988:	4603      	mov	r3, r0
 801698a:	3301      	adds	r3, #1
 801698c:	b29b      	uxth	r3, r3
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	b29a      	uxth	r2, r3
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016996:	7dfb      	ldrb	r3, [r7, #23]
 8016998:	68ba      	ldr	r2, [r7, #8]
 801699a:	4413      	add	r3, r2
 801699c:	687a      	ldr	r2, [r7, #4]
 801699e:	7812      	ldrb	r2, [r2, #0]
 80169a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80169a2:	7dfb      	ldrb	r3, [r7, #23]
 80169a4:	3301      	adds	r3, #1
 80169a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80169a8:	7dfb      	ldrb	r3, [r7, #23]
 80169aa:	68ba      	ldr	r2, [r7, #8]
 80169ac:	4413      	add	r3, r2
 80169ae:	2203      	movs	r2, #3
 80169b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80169b2:	7dfb      	ldrb	r3, [r7, #23]
 80169b4:	3301      	adds	r3, #1
 80169b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80169b8:	e013      	b.n	80169e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80169ba:	7dfb      	ldrb	r3, [r7, #23]
 80169bc:	68ba      	ldr	r2, [r7, #8]
 80169be:	4413      	add	r3, r2
 80169c0:	693a      	ldr	r2, [r7, #16]
 80169c2:	7812      	ldrb	r2, [r2, #0]
 80169c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	3301      	adds	r3, #1
 80169ca:	613b      	str	r3, [r7, #16]
    idx++;
 80169cc:	7dfb      	ldrb	r3, [r7, #23]
 80169ce:	3301      	adds	r3, #1
 80169d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80169d2:	7dfb      	ldrb	r3, [r7, #23]
 80169d4:	68ba      	ldr	r2, [r7, #8]
 80169d6:	4413      	add	r3, r2
 80169d8:	2200      	movs	r2, #0
 80169da:	701a      	strb	r2, [r3, #0]
    idx++;
 80169dc:	7dfb      	ldrb	r3, [r7, #23]
 80169de:	3301      	adds	r3, #1
 80169e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d1e7      	bne.n	80169ba <USBD_GetString+0x52>
 80169ea:	e000      	b.n	80169ee <USBD_GetString+0x86>
    return;
 80169ec:	bf00      	nop
  }
}
 80169ee:	3718      	adds	r7, #24
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}

080169f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80169f4:	b480      	push	{r7}
 80169f6:	b085      	sub	sp, #20
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80169fc:	2300      	movs	r3, #0
 80169fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016a04:	e005      	b.n	8016a12 <USBD_GetLen+0x1e>
  {
    len++;
 8016a06:	7bfb      	ldrb	r3, [r7, #15]
 8016a08:	3301      	adds	r3, #1
 8016a0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	3301      	adds	r3, #1
 8016a10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d1f5      	bne.n	8016a06 <USBD_GetLen+0x12>
  }

  return len;
 8016a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3714      	adds	r7, #20
 8016a20:	46bd      	mov	sp, r7
 8016a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a26:	4770      	bx	lr

08016a28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b084      	sub	sp, #16
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	60f8      	str	r0, [r7, #12]
 8016a30:	60b9      	str	r1, [r7, #8]
 8016a32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	2202      	movs	r2, #2
 8016a38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	687a      	ldr	r2, [r7, #4]
 8016a40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	687a      	ldr	r2, [r7, #4]
 8016a46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	68ba      	ldr	r2, [r7, #8]
 8016a4c:	2100      	movs	r1, #0
 8016a4e:	68f8      	ldr	r0, [r7, #12]
 8016a50:	f000 fd57 	bl	8017502 <USBD_LL_Transmit>

  return USBD_OK;
 8016a54:	2300      	movs	r3, #0
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3710      	adds	r7, #16
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}

08016a5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016a5e:	b580      	push	{r7, lr}
 8016a60:	b084      	sub	sp, #16
 8016a62:	af00      	add	r7, sp, #0
 8016a64:	60f8      	str	r0, [r7, #12]
 8016a66:	60b9      	str	r1, [r7, #8]
 8016a68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	68ba      	ldr	r2, [r7, #8]
 8016a6e:	2100      	movs	r1, #0
 8016a70:	68f8      	ldr	r0, [r7, #12]
 8016a72:	f000 fd46 	bl	8017502 <USBD_LL_Transmit>

  return USBD_OK;
 8016a76:	2300      	movs	r3, #0
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3710      	adds	r7, #16
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b084      	sub	sp, #16
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	60f8      	str	r0, [r7, #12]
 8016a88:	60b9      	str	r1, [r7, #8]
 8016a8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2203      	movs	r2, #3
 8016a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	687a      	ldr	r2, [r7, #4]
 8016aa0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	68ba      	ldr	r2, [r7, #8]
 8016aa8:	2100      	movs	r1, #0
 8016aaa:	68f8      	ldr	r0, [r7, #12]
 8016aac:	f000 fd4a 	bl	8017544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016ab0:	2300      	movs	r3, #0
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	3710      	adds	r7, #16
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b084      	sub	sp, #16
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	60f8      	str	r0, [r7, #12]
 8016ac2:	60b9      	str	r1, [r7, #8]
 8016ac4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	68ba      	ldr	r2, [r7, #8]
 8016aca:	2100      	movs	r1, #0
 8016acc:	68f8      	ldr	r0, [r7, #12]
 8016ace:	f000 fd39 	bl	8017544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016ad2:	2300      	movs	r3, #0
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3710      	adds	r7, #16
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}

08016adc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2204      	movs	r2, #4
 8016ae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016aec:	2300      	movs	r3, #0
 8016aee:	2200      	movs	r2, #0
 8016af0:	2100      	movs	r1, #0
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f000 fd05 	bl	8017502 <USBD_LL_Transmit>

  return USBD_OK;
 8016af8:	2300      	movs	r3, #0
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3708      	adds	r7, #8
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}

08016b02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016b02:	b580      	push	{r7, lr}
 8016b04:	b082      	sub	sp, #8
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2205      	movs	r2, #5
 8016b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016b12:	2300      	movs	r3, #0
 8016b14:	2200      	movs	r2, #0
 8016b16:	2100      	movs	r1, #0
 8016b18:	6878      	ldr	r0, [r7, #4]
 8016b1a:	f000 fd13 	bl	8017544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b1e:	2300      	movs	r3, #0
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3708      	adds	r7, #8
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016b28:	b480      	push	{r7}
 8016b2a:	b087      	sub	sp, #28
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	4613      	mov	r3, r2
 8016b34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016b36:	2301      	movs	r3, #1
 8016b38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016b3e:	4b1f      	ldr	r3, [pc, #124]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b40:	7a5b      	ldrb	r3, [r3, #9]
 8016b42:	b2db      	uxtb	r3, r3
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d131      	bne.n	8016bac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016b48:	4b1c      	ldr	r3, [pc, #112]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b4a:	7a5b      	ldrb	r3, [r3, #9]
 8016b4c:	b2db      	uxtb	r3, r3
 8016b4e:	461a      	mov	r2, r3
 8016b50:	4b1a      	ldr	r3, [pc, #104]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b52:	2100      	movs	r1, #0
 8016b54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016b56:	4b19      	ldr	r3, [pc, #100]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b58:	7a5b      	ldrb	r3, [r3, #9]
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	4a17      	ldr	r2, [pc, #92]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b5e:	009b      	lsls	r3, r3, #2
 8016b60:	4413      	add	r3, r2
 8016b62:	68fa      	ldr	r2, [r7, #12]
 8016b64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016b66:	4b15      	ldr	r3, [pc, #84]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b68:	7a5b      	ldrb	r3, [r3, #9]
 8016b6a:	b2db      	uxtb	r3, r3
 8016b6c:	461a      	mov	r2, r3
 8016b6e:	4b13      	ldr	r3, [pc, #76]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b70:	4413      	add	r3, r2
 8016b72:	79fa      	ldrb	r2, [r7, #7]
 8016b74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016b76:	4b11      	ldr	r3, [pc, #68]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b78:	7a5b      	ldrb	r3, [r3, #9]
 8016b7a:	b2db      	uxtb	r3, r3
 8016b7c:	1c5a      	adds	r2, r3, #1
 8016b7e:	b2d1      	uxtb	r1, r2
 8016b80:	4a0e      	ldr	r2, [pc, #56]	; (8016bbc <FATFS_LinkDriverEx+0x94>)
 8016b82:	7251      	strb	r1, [r2, #9]
 8016b84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016b86:	7dbb      	ldrb	r3, [r7, #22]
 8016b88:	3330      	adds	r3, #48	; 0x30
 8016b8a:	b2da      	uxtb	r2, r3
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	3301      	adds	r3, #1
 8016b94:	223a      	movs	r2, #58	; 0x3a
 8016b96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016b98:	68bb      	ldr	r3, [r7, #8]
 8016b9a:	3302      	adds	r3, #2
 8016b9c:	222f      	movs	r2, #47	; 0x2f
 8016b9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	3303      	adds	r3, #3
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016ba8:	2300      	movs	r3, #0
 8016baa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	371c      	adds	r7, #28
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb8:	4770      	bx	lr
 8016bba:	bf00      	nop
 8016bbc:	24001600 	.word	0x24001600

08016bc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016bca:	2200      	movs	r2, #0
 8016bcc:	6839      	ldr	r1, [r7, #0]
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f7ff ffaa 	bl	8016b28 <FATFS_LinkDriverEx>
 8016bd4:	4603      	mov	r3, r0
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3708      	adds	r7, #8
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}
	...

08016be0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016be4:	2201      	movs	r2, #1
 8016be6:	4913      	ldr	r1, [pc, #76]	; (8016c34 <MX_USB_DEVICE_Init+0x54>)
 8016be8:	4813      	ldr	r0, [pc, #76]	; (8016c38 <MX_USB_DEVICE_Init+0x58>)
 8016bea:	f7fe fc7b 	bl	80154e4 <USBD_Init>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d001      	beq.n	8016bf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016bf4:	f7eb ff74 	bl	8002ae0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016bf8:	4910      	ldr	r1, [pc, #64]	; (8016c3c <MX_USB_DEVICE_Init+0x5c>)
 8016bfa:	480f      	ldr	r0, [pc, #60]	; (8016c38 <MX_USB_DEVICE_Init+0x58>)
 8016bfc:	f7fe fca2 	bl	8015544 <USBD_RegisterClass>
 8016c00:	4603      	mov	r3, r0
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d001      	beq.n	8016c0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c06:	f7eb ff6b 	bl	8002ae0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016c0a:	490d      	ldr	r1, [pc, #52]	; (8016c40 <MX_USB_DEVICE_Init+0x60>)
 8016c0c:	480a      	ldr	r0, [pc, #40]	; (8016c38 <MX_USB_DEVICE_Init+0x58>)
 8016c0e:	f7fe fb99 	bl	8015344 <USBD_CDC_RegisterInterface>
 8016c12:	4603      	mov	r3, r0
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d001      	beq.n	8016c1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016c18:	f7eb ff62 	bl	8002ae0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016c1c:	4806      	ldr	r0, [pc, #24]	; (8016c38 <MX_USB_DEVICE_Init+0x58>)
 8016c1e:	f7fe fcc7 	bl	80155b0 <USBD_Start>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d001      	beq.n	8016c2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016c28:	f7eb ff5a 	bl	8002ae0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016c2c:	f7f2 ff30 	bl	8009a90 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016c30:	bf00      	nop
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	240000b0 	.word	0x240000b0
 8016c38:	2400160c 	.word	0x2400160c
 8016c3c:	2400001c 	.word	0x2400001c
 8016c40:	2400009c 	.word	0x2400009c

08016c44 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016c48:	2200      	movs	r2, #0
 8016c4a:	4905      	ldr	r1, [pc, #20]	; (8016c60 <CDC_Init_HS+0x1c>)
 8016c4c:	4805      	ldr	r0, [pc, #20]	; (8016c64 <CDC_Init_HS+0x20>)
 8016c4e:	f7fe fb93 	bl	8015378 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016c52:	4905      	ldr	r1, [pc, #20]	; (8016c68 <CDC_Init_HS+0x24>)
 8016c54:	4803      	ldr	r0, [pc, #12]	; (8016c64 <CDC_Init_HS+0x20>)
 8016c56:	f7fe fbb1 	bl	80153bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016c5a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	240020e8 	.word	0x240020e8
 8016c64:	2400160c 	.word	0x2400160c
 8016c68:	240018e8 	.word	0x240018e8

08016c6c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016c70:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	46bd      	mov	sp, r7
 8016c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7a:	4770      	bx	lr

08016c7c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b083      	sub	sp, #12
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	4603      	mov	r3, r0
 8016c84:	6039      	str	r1, [r7, #0]
 8016c86:	71fb      	strb	r3, [r7, #7]
 8016c88:	4613      	mov	r3, r2
 8016c8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016c8c:	79fb      	ldrb	r3, [r7, #7]
 8016c8e:	2b23      	cmp	r3, #35	; 0x23
 8016c90:	d84a      	bhi.n	8016d28 <CDC_Control_HS+0xac>
 8016c92:	a201      	add	r2, pc, #4	; (adr r2, 8016c98 <CDC_Control_HS+0x1c>)
 8016c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c98:	08016d29 	.word	0x08016d29
 8016c9c:	08016d29 	.word	0x08016d29
 8016ca0:	08016d29 	.word	0x08016d29
 8016ca4:	08016d29 	.word	0x08016d29
 8016ca8:	08016d29 	.word	0x08016d29
 8016cac:	08016d29 	.word	0x08016d29
 8016cb0:	08016d29 	.word	0x08016d29
 8016cb4:	08016d29 	.word	0x08016d29
 8016cb8:	08016d29 	.word	0x08016d29
 8016cbc:	08016d29 	.word	0x08016d29
 8016cc0:	08016d29 	.word	0x08016d29
 8016cc4:	08016d29 	.word	0x08016d29
 8016cc8:	08016d29 	.word	0x08016d29
 8016ccc:	08016d29 	.word	0x08016d29
 8016cd0:	08016d29 	.word	0x08016d29
 8016cd4:	08016d29 	.word	0x08016d29
 8016cd8:	08016d29 	.word	0x08016d29
 8016cdc:	08016d29 	.word	0x08016d29
 8016ce0:	08016d29 	.word	0x08016d29
 8016ce4:	08016d29 	.word	0x08016d29
 8016ce8:	08016d29 	.word	0x08016d29
 8016cec:	08016d29 	.word	0x08016d29
 8016cf0:	08016d29 	.word	0x08016d29
 8016cf4:	08016d29 	.word	0x08016d29
 8016cf8:	08016d29 	.word	0x08016d29
 8016cfc:	08016d29 	.word	0x08016d29
 8016d00:	08016d29 	.word	0x08016d29
 8016d04:	08016d29 	.word	0x08016d29
 8016d08:	08016d29 	.word	0x08016d29
 8016d0c:	08016d29 	.word	0x08016d29
 8016d10:	08016d29 	.word	0x08016d29
 8016d14:	08016d29 	.word	0x08016d29
 8016d18:	08016d29 	.word	0x08016d29
 8016d1c:	08016d29 	.word	0x08016d29
 8016d20:	08016d29 	.word	0x08016d29
 8016d24:	08016d29 	.word	0x08016d29
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016d28:	bf00      	nop
  }

  return (USBD_OK);
 8016d2a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	370c      	adds	r7, #12
 8016d30:	46bd      	mov	sp, r7
 8016d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d36:	4770      	bx	lr

08016d38 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b084      	sub	sp, #16
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
 8016d40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016d42:	6879      	ldr	r1, [r7, #4]
 8016d44:	480e      	ldr	r0, [pc, #56]	; (8016d80 <CDC_Receive_HS+0x48>)
 8016d46:	f7fe fb39 	bl	80153bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016d4a:	480d      	ldr	r0, [pc, #52]	; (8016d80 <CDC_Receive_HS+0x48>)
 8016d4c:	f7fe fb94 	bl	8015478 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016d56:	4b0b      	ldr	r3, [pc, #44]	; (8016d84 <CDC_Receive_HS+0x4c>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	4a0b      	ldr	r2, [pc, #44]	; (8016d88 <CDC_Receive_HS+0x50>)
 8016d5c:	4413      	add	r3, r2
 8016d5e:	68fa      	ldr	r2, [r7, #12]
 8016d60:	6879      	ldr	r1, [r7, #4]
 8016d62:	4618      	mov	r0, r3
 8016d64:	f000 fcf0 	bl	8017748 <memcpy>
  usbBytesReady += cpyLen;
 8016d68:	4b06      	ldr	r3, [pc, #24]	; (8016d84 <CDC_Receive_HS+0x4c>)
 8016d6a:	681a      	ldr	r2, [r3, #0]
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	4413      	add	r3, r2
 8016d70:	4a04      	ldr	r2, [pc, #16]	; (8016d84 <CDC_Receive_HS+0x4c>)
 8016d72:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016d74:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016d76:	4618      	mov	r0, r3
 8016d78:	3710      	adds	r7, #16
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
 8016d7e:	bf00      	nop
 8016d80:	2400160c 	.word	0x2400160c
 8016d84:	24000270 	.word	0x24000270
 8016d88:	24000170 	.word	0x24000170

08016d8c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b084      	sub	sp, #16
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
 8016d94:	460b      	mov	r3, r1
 8016d96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016d9c:	4b0d      	ldr	r3, [pc, #52]	; (8016dd4 <CDC_Transmit_HS+0x48>)
 8016d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016da2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d001      	beq.n	8016db2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016dae:	2301      	movs	r3, #1
 8016db0:	e00b      	b.n	8016dca <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016db2:	887b      	ldrh	r3, [r7, #2]
 8016db4:	461a      	mov	r2, r3
 8016db6:	6879      	ldr	r1, [r7, #4]
 8016db8:	4806      	ldr	r0, [pc, #24]	; (8016dd4 <CDC_Transmit_HS+0x48>)
 8016dba:	f7fe fadd 	bl	8015378 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016dbe:	4805      	ldr	r0, [pc, #20]	; (8016dd4 <CDC_Transmit_HS+0x48>)
 8016dc0:	f7fe fb1a 	bl	80153f8 <USBD_CDC_TransmitPacket>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3710      	adds	r7, #16
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}
 8016dd2:	bf00      	nop
 8016dd4:	2400160c 	.word	0x2400160c

08016dd8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016dd8:	b480      	push	{r7}
 8016dda:	b087      	sub	sp, #28
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	60f8      	str	r0, [r7, #12]
 8016de0:	60b9      	str	r1, [r7, #8]
 8016de2:	4613      	mov	r3, r2
 8016de4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016de6:	2300      	movs	r3, #0
 8016de8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	371c      	adds	r7, #28
 8016df2:	46bd      	mov	sp, r7
 8016df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df8:	4770      	bx	lr
	...

08016dfc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016dfc:	b480      	push	{r7}
 8016dfe:	b083      	sub	sp, #12
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	4603      	mov	r3, r0
 8016e04:	6039      	str	r1, [r7, #0]
 8016e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	2212      	movs	r2, #18
 8016e0c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016e0e:	4b03      	ldr	r3, [pc, #12]	; (8016e1c <USBD_HS_DeviceDescriptor+0x20>)
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	370c      	adds	r7, #12
 8016e14:	46bd      	mov	sp, r7
 8016e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1a:	4770      	bx	lr
 8016e1c:	240000d0 	.word	0x240000d0

08016e20 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e20:	b480      	push	{r7}
 8016e22:	b083      	sub	sp, #12
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	4603      	mov	r3, r0
 8016e28:	6039      	str	r1, [r7, #0]
 8016e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	2204      	movs	r2, #4
 8016e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016e32:	4b03      	ldr	r3, [pc, #12]	; (8016e40 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016e34:	4618      	mov	r0, r3
 8016e36:	370c      	adds	r7, #12
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3e:	4770      	bx	lr
 8016e40:	240000e4 	.word	0x240000e4

08016e44 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	6039      	str	r1, [r7, #0]
 8016e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016e50:	79fb      	ldrb	r3, [r7, #7]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d105      	bne.n	8016e62 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016e56:	683a      	ldr	r2, [r7, #0]
 8016e58:	4907      	ldr	r1, [pc, #28]	; (8016e78 <USBD_HS_ProductStrDescriptor+0x34>)
 8016e5a:	4808      	ldr	r0, [pc, #32]	; (8016e7c <USBD_HS_ProductStrDescriptor+0x38>)
 8016e5c:	f7ff fd84 	bl	8016968 <USBD_GetString>
 8016e60:	e004      	b.n	8016e6c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016e62:	683a      	ldr	r2, [r7, #0]
 8016e64:	4904      	ldr	r1, [pc, #16]	; (8016e78 <USBD_HS_ProductStrDescriptor+0x34>)
 8016e66:	4805      	ldr	r0, [pc, #20]	; (8016e7c <USBD_HS_ProductStrDescriptor+0x38>)
 8016e68:	f7ff fd7e 	bl	8016968 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e6c:	4b02      	ldr	r3, [pc, #8]	; (8016e78 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3708      	adds	r7, #8
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	240028e8 	.word	0x240028e8
 8016e7c:	08018aa4 	.word	0x08018aa4

08016e80 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b082      	sub	sp, #8
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	4603      	mov	r3, r0
 8016e88:	6039      	str	r1, [r7, #0]
 8016e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016e8c:	683a      	ldr	r2, [r7, #0]
 8016e8e:	4904      	ldr	r1, [pc, #16]	; (8016ea0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016e90:	4804      	ldr	r0, [pc, #16]	; (8016ea4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016e92:	f7ff fd69 	bl	8016968 <USBD_GetString>
  return USBD_StrDesc;
 8016e96:	4b02      	ldr	r3, [pc, #8]	; (8016ea0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3708      	adds	r7, #8
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}
 8016ea0:	240028e8 	.word	0x240028e8
 8016ea4:	08018ac0 	.word	0x08018ac0

08016ea8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	6039      	str	r1, [r7, #0]
 8016eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	221a      	movs	r2, #26
 8016eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016eba:	f000 f843 	bl	8016f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016ebe:	4b02      	ldr	r3, [pc, #8]	; (8016ec8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3708      	adds	r7, #8
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}
 8016ec8:	240000e8 	.word	0x240000e8

08016ecc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b082      	sub	sp, #8
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	6039      	str	r1, [r7, #0]
 8016ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016ed8:	79fb      	ldrb	r3, [r7, #7]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d105      	bne.n	8016eea <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016ede:	683a      	ldr	r2, [r7, #0]
 8016ee0:	4907      	ldr	r1, [pc, #28]	; (8016f00 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016ee2:	4808      	ldr	r0, [pc, #32]	; (8016f04 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016ee4:	f7ff fd40 	bl	8016968 <USBD_GetString>
 8016ee8:	e004      	b.n	8016ef4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016eea:	683a      	ldr	r2, [r7, #0]
 8016eec:	4904      	ldr	r1, [pc, #16]	; (8016f00 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016eee:	4805      	ldr	r0, [pc, #20]	; (8016f04 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016ef0:	f7ff fd3a 	bl	8016968 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ef4:	4b02      	ldr	r3, [pc, #8]	; (8016f00 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3708      	adds	r7, #8
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bd80      	pop	{r7, pc}
 8016efe:	bf00      	nop
 8016f00:	240028e8 	.word	0x240028e8
 8016f04:	08018ac4 	.word	0x08018ac4

08016f08 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b082      	sub	sp, #8
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	4603      	mov	r3, r0
 8016f10:	6039      	str	r1, [r7, #0]
 8016f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f14:	79fb      	ldrb	r3, [r7, #7]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d105      	bne.n	8016f26 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016f1a:	683a      	ldr	r2, [r7, #0]
 8016f1c:	4907      	ldr	r1, [pc, #28]	; (8016f3c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016f1e:	4808      	ldr	r0, [pc, #32]	; (8016f40 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016f20:	f7ff fd22 	bl	8016968 <USBD_GetString>
 8016f24:	e004      	b.n	8016f30 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016f26:	683a      	ldr	r2, [r7, #0]
 8016f28:	4904      	ldr	r1, [pc, #16]	; (8016f3c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016f2a:	4805      	ldr	r0, [pc, #20]	; (8016f40 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016f2c:	f7ff fd1c 	bl	8016968 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f30:	4b02      	ldr	r3, [pc, #8]	; (8016f3c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3708      	adds	r7, #8
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	240028e8 	.word	0x240028e8
 8016f40:	08018ad0 	.word	0x08018ad0

08016f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b084      	sub	sp, #16
 8016f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016f4a:	4b0f      	ldr	r3, [pc, #60]	; (8016f88 <Get_SerialNum+0x44>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016f50:	4b0e      	ldr	r3, [pc, #56]	; (8016f8c <Get_SerialNum+0x48>)
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016f56:	4b0e      	ldr	r3, [pc, #56]	; (8016f90 <Get_SerialNum+0x4c>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016f5c:	68fa      	ldr	r2, [r7, #12]
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	4413      	add	r3, r2
 8016f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d009      	beq.n	8016f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016f6a:	2208      	movs	r2, #8
 8016f6c:	4909      	ldr	r1, [pc, #36]	; (8016f94 <Get_SerialNum+0x50>)
 8016f6e:	68f8      	ldr	r0, [r7, #12]
 8016f70:	f000 f814 	bl	8016f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016f74:	2204      	movs	r2, #4
 8016f76:	4908      	ldr	r1, [pc, #32]	; (8016f98 <Get_SerialNum+0x54>)
 8016f78:	68b8      	ldr	r0, [r7, #8]
 8016f7a:	f000 f80f 	bl	8016f9c <IntToUnicode>
  }
}
 8016f7e:	bf00      	nop
 8016f80:	3710      	adds	r7, #16
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}
 8016f86:	bf00      	nop
 8016f88:	1ff1e800 	.word	0x1ff1e800
 8016f8c:	1ff1e804 	.word	0x1ff1e804
 8016f90:	1ff1e808 	.word	0x1ff1e808
 8016f94:	240000ea 	.word	0x240000ea
 8016f98:	240000fa 	.word	0x240000fa

08016f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016f9c:	b480      	push	{r7}
 8016f9e:	b087      	sub	sp, #28
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	60f8      	str	r0, [r7, #12]
 8016fa4:	60b9      	str	r1, [r7, #8]
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016faa:	2300      	movs	r3, #0
 8016fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016fae:	2300      	movs	r3, #0
 8016fb0:	75fb      	strb	r3, [r7, #23]
 8016fb2:	e027      	b.n	8017004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	0f1b      	lsrs	r3, r3, #28
 8016fb8:	2b09      	cmp	r3, #9
 8016fba:	d80b      	bhi.n	8016fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	0f1b      	lsrs	r3, r3, #28
 8016fc0:	b2da      	uxtb	r2, r3
 8016fc2:	7dfb      	ldrb	r3, [r7, #23]
 8016fc4:	005b      	lsls	r3, r3, #1
 8016fc6:	4619      	mov	r1, r3
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	440b      	add	r3, r1
 8016fcc:	3230      	adds	r2, #48	; 0x30
 8016fce:	b2d2      	uxtb	r2, r2
 8016fd0:	701a      	strb	r2, [r3, #0]
 8016fd2:	e00a      	b.n	8016fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	0f1b      	lsrs	r3, r3, #28
 8016fd8:	b2da      	uxtb	r2, r3
 8016fda:	7dfb      	ldrb	r3, [r7, #23]
 8016fdc:	005b      	lsls	r3, r3, #1
 8016fde:	4619      	mov	r1, r3
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	440b      	add	r3, r1
 8016fe4:	3237      	adds	r2, #55	; 0x37
 8016fe6:	b2d2      	uxtb	r2, r2
 8016fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	011b      	lsls	r3, r3, #4
 8016fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016ff0:	7dfb      	ldrb	r3, [r7, #23]
 8016ff2:	005b      	lsls	r3, r3, #1
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	68ba      	ldr	r2, [r7, #8]
 8016ff8:	4413      	add	r3, r2
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016ffe:	7dfb      	ldrb	r3, [r7, #23]
 8017000:	3301      	adds	r3, #1
 8017002:	75fb      	strb	r3, [r7, #23]
 8017004:	7dfa      	ldrb	r2, [r7, #23]
 8017006:	79fb      	ldrb	r3, [r7, #7]
 8017008:	429a      	cmp	r2, r3
 801700a:	d3d3      	bcc.n	8016fb4 <IntToUnicode+0x18>
  }
}
 801700c:	bf00      	nop
 801700e:	bf00      	nop
 8017010:	371c      	adds	r7, #28
 8017012:	46bd      	mov	sp, r7
 8017014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017018:	4770      	bx	lr
	...

0801701c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b0b2      	sub	sp, #200	; 0xc8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017024:	f107 0310 	add.w	r3, r7, #16
 8017028:	22b8      	movs	r2, #184	; 0xb8
 801702a:	2100      	movs	r1, #0
 801702c:	4618      	mov	r0, r3
 801702e:	f000 fb4f 	bl	80176d0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	4a1a      	ldr	r2, [pc, #104]	; (80170a0 <HAL_PCD_MspInit+0x84>)
 8017038:	4293      	cmp	r3, r2
 801703a:	d12c      	bne.n	8017096 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801703c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017040:	f04f 0300 	mov.w	r3, #0
 8017044:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017048:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801704c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017050:	f107 0310 	add.w	r3, r7, #16
 8017054:	4618      	mov	r0, r3
 8017056:	f7f3 fcfb 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 801705a:	4603      	mov	r3, r0
 801705c:	2b00      	cmp	r3, #0
 801705e:	d001      	beq.n	8017064 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017060:	f7eb fd3e 	bl	8002ae0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017064:	f7f2 fd14 	bl	8009a90 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017068:	4b0e      	ldr	r3, [pc, #56]	; (80170a4 <HAL_PCD_MspInit+0x88>)
 801706a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801706e:	4a0d      	ldr	r2, [pc, #52]	; (80170a4 <HAL_PCD_MspInit+0x88>)
 8017070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017074:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017078:	4b0a      	ldr	r3, [pc, #40]	; (80170a4 <HAL_PCD_MspInit+0x88>)
 801707a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801707e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017082:	60fb      	str	r3, [r7, #12]
 8017084:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017086:	2200      	movs	r2, #0
 8017088:	2100      	movs	r1, #0
 801708a:	204d      	movs	r0, #77	; 0x4d
 801708c:	f7ee fa85 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017090:	204d      	movs	r0, #77	; 0x4d
 8017092:	f7ee fa9c 	bl	80055ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017096:	bf00      	nop
 8017098:	37c8      	adds	r7, #200	; 0xc8
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
 801709e:	bf00      	nop
 80170a0:	40040000 	.word	0x40040000
 80170a4:	58024400 	.word	0x58024400

080170a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80170bc:	4619      	mov	r1, r3
 80170be:	4610      	mov	r0, r2
 80170c0:	f7fe fac3 	bl	801564a <USBD_LL_SetupStage>
}
 80170c4:	bf00      	nop
 80170c6:	3708      	adds	r7, #8
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}

080170cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	460b      	mov	r3, r1
 80170d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80170de:	78fa      	ldrb	r2, [r7, #3]
 80170e0:	6879      	ldr	r1, [r7, #4]
 80170e2:	4613      	mov	r3, r2
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	4413      	add	r3, r2
 80170e8:	009b      	lsls	r3, r3, #2
 80170ea:	440b      	add	r3, r1
 80170ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	78fb      	ldrb	r3, [r7, #3]
 80170f4:	4619      	mov	r1, r3
 80170f6:	f7fe fafd 	bl	80156f4 <USBD_LL_DataOutStage>
}
 80170fa:	bf00      	nop
 80170fc:	3708      	adds	r7, #8
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}

08017102 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017102:	b580      	push	{r7, lr}
 8017104:	b082      	sub	sp, #8
 8017106:	af00      	add	r7, sp, #0
 8017108:	6078      	str	r0, [r7, #4]
 801710a:	460b      	mov	r3, r1
 801710c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017114:	78fa      	ldrb	r2, [r7, #3]
 8017116:	6879      	ldr	r1, [r7, #4]
 8017118:	4613      	mov	r3, r2
 801711a:	00db      	lsls	r3, r3, #3
 801711c:	4413      	add	r3, r2
 801711e:	009b      	lsls	r3, r3, #2
 8017120:	440b      	add	r3, r1
 8017122:	3348      	adds	r3, #72	; 0x48
 8017124:	681a      	ldr	r2, [r3, #0]
 8017126:	78fb      	ldrb	r3, [r7, #3]
 8017128:	4619      	mov	r1, r3
 801712a:	f7fe fb96 	bl	801585a <USBD_LL_DataInStage>
}
 801712e:	bf00      	nop
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017136:	b580      	push	{r7, lr}
 8017138:	b082      	sub	sp, #8
 801713a:	af00      	add	r7, sp, #0
 801713c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017144:	4618      	mov	r0, r3
 8017146:	f7fe fcd0 	bl	8015aea <USBD_LL_SOF>
}
 801714a:	bf00      	nop
 801714c:	3708      	adds	r7, #8
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}

08017152 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017152:	b580      	push	{r7, lr}
 8017154:	b084      	sub	sp, #16
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801715a:	2301      	movs	r3, #1
 801715c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	691b      	ldr	r3, [r3, #16]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d102      	bne.n	801716c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017166:	2300      	movs	r3, #0
 8017168:	73fb      	strb	r3, [r7, #15]
 801716a:	e008      	b.n	801717e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	691b      	ldr	r3, [r3, #16]
 8017170:	2b02      	cmp	r3, #2
 8017172:	d102      	bne.n	801717a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017174:	2301      	movs	r3, #1
 8017176:	73fb      	strb	r3, [r7, #15]
 8017178:	e001      	b.n	801717e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801717a:	f7eb fcb1 	bl	8002ae0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017184:	7bfa      	ldrb	r2, [r7, #15]
 8017186:	4611      	mov	r1, r2
 8017188:	4618      	mov	r0, r3
 801718a:	f7fe fc6a 	bl	8015a62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017194:	4618      	mov	r0, r3
 8017196:	f7fe fc12 	bl	80159be <USBD_LL_Reset>
}
 801719a:	bf00      	nop
 801719c:	3710      	adds	r7, #16
 801719e:	46bd      	mov	sp, r7
 80171a0:	bd80      	pop	{r7, pc}
	...

080171a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b082      	sub	sp, #8
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171b2:	4618      	mov	r0, r3
 80171b4:	f7fe fc65 	bl	8015a82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	6812      	ldr	r2, [r2, #0]
 80171c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80171ca:	f043 0301 	orr.w	r3, r3, #1
 80171ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	6a1b      	ldr	r3, [r3, #32]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d005      	beq.n	80171e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80171d8:	4b04      	ldr	r3, [pc, #16]	; (80171ec <HAL_PCD_SuspendCallback+0x48>)
 80171da:	691b      	ldr	r3, [r3, #16]
 80171dc:	4a03      	ldr	r2, [pc, #12]	; (80171ec <HAL_PCD_SuspendCallback+0x48>)
 80171de:	f043 0306 	orr.w	r3, r3, #6
 80171e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80171e4:	bf00      	nop
 80171e6:	3708      	adds	r7, #8
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	e000ed00 	.word	0xe000ed00

080171f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b082      	sub	sp, #8
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171fe:	4618      	mov	r0, r3
 8017200:	f7fe fc5b 	bl	8015aba <USBD_LL_Resume>
}
 8017204:	bf00      	nop
 8017206:	3708      	adds	r7, #8
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}

0801720c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b082      	sub	sp, #8
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	460b      	mov	r3, r1
 8017216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801721e:	78fa      	ldrb	r2, [r7, #3]
 8017220:	4611      	mov	r1, r2
 8017222:	4618      	mov	r0, r3
 8017224:	f7fe fcb3 	bl	8015b8e <USBD_LL_IsoOUTIncomplete>
}
 8017228:	bf00      	nop
 801722a:	3708      	adds	r7, #8
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}

08017230 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b082      	sub	sp, #8
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	460b      	mov	r3, r1
 801723a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017242:	78fa      	ldrb	r2, [r7, #3]
 8017244:	4611      	mov	r1, r2
 8017246:	4618      	mov	r0, r3
 8017248:	f7fe fc6f 	bl	8015b2a <USBD_LL_IsoINIncomplete>
}
 801724c:	bf00      	nop
 801724e:	3708      	adds	r7, #8
 8017250:	46bd      	mov	sp, r7
 8017252:	bd80      	pop	{r7, pc}

08017254 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017262:	4618      	mov	r0, r3
 8017264:	f7fe fcc5 	bl	8015bf2 <USBD_LL_DevConnected>
}
 8017268:	bf00      	nop
 801726a:	3708      	adds	r7, #8
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}

08017270 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801727e:	4618      	mov	r0, r3
 8017280:	f7fe fcc2 	bl	8015c08 <USBD_LL_DevDisconnected>
}
 8017284:	bf00      	nop
 8017286:	3708      	adds	r7, #8
 8017288:	46bd      	mov	sp, r7
 801728a:	bd80      	pop	{r7, pc}

0801728c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	2b01      	cmp	r3, #1
 801729a:	d140      	bne.n	801731e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801729c:	4a22      	ldr	r2, [pc, #136]	; (8017328 <USBD_LL_Init+0x9c>)
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	4a20      	ldr	r2, [pc, #128]	; (8017328 <USBD_LL_Init+0x9c>)
 80172a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80172ac:	4b1e      	ldr	r3, [pc, #120]	; (8017328 <USBD_LL_Init+0x9c>)
 80172ae:	4a1f      	ldr	r2, [pc, #124]	; (801732c <USBD_LL_Init+0xa0>)
 80172b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80172b2:	4b1d      	ldr	r3, [pc, #116]	; (8017328 <USBD_LL_Init+0x9c>)
 80172b4:	2209      	movs	r2, #9
 80172b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80172b8:	4b1b      	ldr	r3, [pc, #108]	; (8017328 <USBD_LL_Init+0x9c>)
 80172ba:	2202      	movs	r2, #2
 80172bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80172be:	4b1a      	ldr	r3, [pc, #104]	; (8017328 <USBD_LL_Init+0x9c>)
 80172c0:	2200      	movs	r2, #0
 80172c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80172c4:	4b18      	ldr	r3, [pc, #96]	; (8017328 <USBD_LL_Init+0x9c>)
 80172c6:	2202      	movs	r2, #2
 80172c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80172ca:	4b17      	ldr	r3, [pc, #92]	; (8017328 <USBD_LL_Init+0x9c>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80172d0:	4b15      	ldr	r3, [pc, #84]	; (8017328 <USBD_LL_Init+0x9c>)
 80172d2:	2200      	movs	r2, #0
 80172d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80172d6:	4b14      	ldr	r3, [pc, #80]	; (8017328 <USBD_LL_Init+0x9c>)
 80172d8:	2200      	movs	r2, #0
 80172da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80172dc:	4b12      	ldr	r3, [pc, #72]	; (8017328 <USBD_LL_Init+0x9c>)
 80172de:	2200      	movs	r2, #0
 80172e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80172e2:	4b11      	ldr	r3, [pc, #68]	; (8017328 <USBD_LL_Init+0x9c>)
 80172e4:	2200      	movs	r2, #0
 80172e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80172e8:	4b0f      	ldr	r3, [pc, #60]	; (8017328 <USBD_LL_Init+0x9c>)
 80172ea:	2200      	movs	r2, #0
 80172ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80172ee:	480e      	ldr	r0, [pc, #56]	; (8017328 <USBD_LL_Init+0x9c>)
 80172f0:	f7f1 f8db 	bl	80084aa <HAL_PCD_Init>
 80172f4:	4603      	mov	r3, r0
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d001      	beq.n	80172fe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80172fa:	f7eb fbf1 	bl	8002ae0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80172fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017302:	4809      	ldr	r0, [pc, #36]	; (8017328 <USBD_LL_Init+0x9c>)
 8017304:	f7f2 fb49 	bl	800999a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017308:	2280      	movs	r2, #128	; 0x80
 801730a:	2100      	movs	r1, #0
 801730c:	4806      	ldr	r0, [pc, #24]	; (8017328 <USBD_LL_Init+0x9c>)
 801730e:	f7f2 fafd 	bl	800990c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017312:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017316:	2101      	movs	r1, #1
 8017318:	4803      	ldr	r0, [pc, #12]	; (8017328 <USBD_LL_Init+0x9c>)
 801731a:	f7f2 faf7 	bl	800990c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801731e:	2300      	movs	r3, #0
}
 8017320:	4618      	mov	r0, r3
 8017322:	3708      	adds	r7, #8
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}
 8017328:	24002ae8 	.word	0x24002ae8
 801732c:	40040000 	.word	0x40040000

08017330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b084      	sub	sp, #16
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017338:	2300      	movs	r3, #0
 801733a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801733c:	2300      	movs	r3, #0
 801733e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017346:	4618      	mov	r0, r3
 8017348:	f7f1 f9d3 	bl	80086f2 <HAL_PCD_Start>
 801734c:	4603      	mov	r3, r0
 801734e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017350:	7bfb      	ldrb	r3, [r7, #15]
 8017352:	4618      	mov	r0, r3
 8017354:	f000 f942 	bl	80175dc <USBD_Get_USB_Status>
 8017358:	4603      	mov	r3, r0
 801735a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801735c:	7bbb      	ldrb	r3, [r7, #14]
}
 801735e:	4618      	mov	r0, r3
 8017360:	3710      	adds	r7, #16
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}

08017366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017366:	b580      	push	{r7, lr}
 8017368:	b084      	sub	sp, #16
 801736a:	af00      	add	r7, sp, #0
 801736c:	6078      	str	r0, [r7, #4]
 801736e:	4608      	mov	r0, r1
 8017370:	4611      	mov	r1, r2
 8017372:	461a      	mov	r2, r3
 8017374:	4603      	mov	r3, r0
 8017376:	70fb      	strb	r3, [r7, #3]
 8017378:	460b      	mov	r3, r1
 801737a:	70bb      	strb	r3, [r7, #2]
 801737c:	4613      	mov	r3, r2
 801737e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017380:	2300      	movs	r3, #0
 8017382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017384:	2300      	movs	r3, #0
 8017386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801738e:	78bb      	ldrb	r3, [r7, #2]
 8017390:	883a      	ldrh	r2, [r7, #0]
 8017392:	78f9      	ldrb	r1, [r7, #3]
 8017394:	f7f1 fed3 	bl	800913e <HAL_PCD_EP_Open>
 8017398:	4603      	mov	r3, r0
 801739a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801739c:	7bfb      	ldrb	r3, [r7, #15]
 801739e:	4618      	mov	r0, r3
 80173a0:	f000 f91c 	bl	80175dc <USBD_Get_USB_Status>
 80173a4:	4603      	mov	r3, r0
 80173a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	3710      	adds	r7, #16
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}

080173b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80173b2:	b580      	push	{r7, lr}
 80173b4:	b084      	sub	sp, #16
 80173b6:	af00      	add	r7, sp, #0
 80173b8:	6078      	str	r0, [r7, #4]
 80173ba:	460b      	mov	r3, r1
 80173bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173be:	2300      	movs	r3, #0
 80173c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173c2:	2300      	movs	r3, #0
 80173c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80173cc:	78fa      	ldrb	r2, [r7, #3]
 80173ce:	4611      	mov	r1, r2
 80173d0:	4618      	mov	r0, r3
 80173d2:	f7f1 ff1c 	bl	800920e <HAL_PCD_EP_Close>
 80173d6:	4603      	mov	r3, r0
 80173d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173da:	7bfb      	ldrb	r3, [r7, #15]
 80173dc:	4618      	mov	r0, r3
 80173de:	f000 f8fd 	bl	80175dc <USBD_Get_USB_Status>
 80173e2:	4603      	mov	r3, r0
 80173e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3710      	adds	r7, #16
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}

080173f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	460b      	mov	r3, r1
 80173fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173fc:	2300      	movs	r3, #0
 80173fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017400:	2300      	movs	r3, #0
 8017402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801740a:	78fa      	ldrb	r2, [r7, #3]
 801740c:	4611      	mov	r1, r2
 801740e:	4618      	mov	r0, r3
 8017410:	f7f1 ffd6 	bl	80093c0 <HAL_PCD_EP_SetStall>
 8017414:	4603      	mov	r3, r0
 8017416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017418:	7bfb      	ldrb	r3, [r7, #15]
 801741a:	4618      	mov	r0, r3
 801741c:	f000 f8de 	bl	80175dc <USBD_Get_USB_Status>
 8017420:	4603      	mov	r3, r0
 8017422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017424:	7bbb      	ldrb	r3, [r7, #14]
}
 8017426:	4618      	mov	r0, r3
 8017428:	3710      	adds	r7, #16
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}

0801742e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801742e:	b580      	push	{r7, lr}
 8017430:	b084      	sub	sp, #16
 8017432:	af00      	add	r7, sp, #0
 8017434:	6078      	str	r0, [r7, #4]
 8017436:	460b      	mov	r3, r1
 8017438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801743a:	2300      	movs	r3, #0
 801743c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801743e:	2300      	movs	r3, #0
 8017440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017448:	78fa      	ldrb	r2, [r7, #3]
 801744a:	4611      	mov	r1, r2
 801744c:	4618      	mov	r0, r3
 801744e:	f7f2 f81b 	bl	8009488 <HAL_PCD_EP_ClrStall>
 8017452:	4603      	mov	r3, r0
 8017454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017456:	7bfb      	ldrb	r3, [r7, #15]
 8017458:	4618      	mov	r0, r3
 801745a:	f000 f8bf 	bl	80175dc <USBD_Get_USB_Status>
 801745e:	4603      	mov	r3, r0
 8017460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017462:	7bbb      	ldrb	r3, [r7, #14]
}
 8017464:	4618      	mov	r0, r3
 8017466:	3710      	adds	r7, #16
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}

0801746c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801746c:	b480      	push	{r7}
 801746e:	b085      	sub	sp, #20
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
 8017474:	460b      	mov	r3, r1
 8017476:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801747e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017484:	2b00      	cmp	r3, #0
 8017486:	da0b      	bge.n	80174a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017488:	78fb      	ldrb	r3, [r7, #3]
 801748a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801748e:	68f9      	ldr	r1, [r7, #12]
 8017490:	4613      	mov	r3, r2
 8017492:	00db      	lsls	r3, r3, #3
 8017494:	4413      	add	r3, r2
 8017496:	009b      	lsls	r3, r3, #2
 8017498:	440b      	add	r3, r1
 801749a:	333e      	adds	r3, #62	; 0x3e
 801749c:	781b      	ldrb	r3, [r3, #0]
 801749e:	e00b      	b.n	80174b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80174a0:	78fb      	ldrb	r3, [r7, #3]
 80174a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80174a6:	68f9      	ldr	r1, [r7, #12]
 80174a8:	4613      	mov	r3, r2
 80174aa:	00db      	lsls	r3, r3, #3
 80174ac:	4413      	add	r3, r2
 80174ae:	009b      	lsls	r3, r3, #2
 80174b0:	440b      	add	r3, r1
 80174b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80174b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80174b8:	4618      	mov	r0, r3
 80174ba:	3714      	adds	r7, #20
 80174bc:	46bd      	mov	sp, r7
 80174be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c2:	4770      	bx	lr

080174c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	460b      	mov	r3, r1
 80174ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174d0:	2300      	movs	r3, #0
 80174d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174d4:	2300      	movs	r3, #0
 80174d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174de:	78fa      	ldrb	r2, [r7, #3]
 80174e0:	4611      	mov	r1, r2
 80174e2:	4618      	mov	r0, r3
 80174e4:	f7f1 fe06 	bl	80090f4 <HAL_PCD_SetAddress>
 80174e8:	4603      	mov	r3, r0
 80174ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174ec:	7bfb      	ldrb	r3, [r7, #15]
 80174ee:	4618      	mov	r0, r3
 80174f0:	f000 f874 	bl	80175dc <USBD_Get_USB_Status>
 80174f4:	4603      	mov	r3, r0
 80174f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80174fa:	4618      	mov	r0, r3
 80174fc:	3710      	adds	r7, #16
 80174fe:	46bd      	mov	sp, r7
 8017500:	bd80      	pop	{r7, pc}

08017502 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017502:	b580      	push	{r7, lr}
 8017504:	b086      	sub	sp, #24
 8017506:	af00      	add	r7, sp, #0
 8017508:	60f8      	str	r0, [r7, #12]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	603b      	str	r3, [r7, #0]
 801750e:	460b      	mov	r3, r1
 8017510:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017512:	2300      	movs	r3, #0
 8017514:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017516:	2300      	movs	r3, #0
 8017518:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017520:	7af9      	ldrb	r1, [r7, #11]
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	687a      	ldr	r2, [r7, #4]
 8017526:	f7f1 ff10 	bl	800934a <HAL_PCD_EP_Transmit>
 801752a:	4603      	mov	r3, r0
 801752c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801752e:	7dfb      	ldrb	r3, [r7, #23]
 8017530:	4618      	mov	r0, r3
 8017532:	f000 f853 	bl	80175dc <USBD_Get_USB_Status>
 8017536:	4603      	mov	r3, r0
 8017538:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801753a:	7dbb      	ldrb	r3, [r7, #22]
}
 801753c:	4618      	mov	r0, r3
 801753e:	3718      	adds	r7, #24
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}

08017544 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	607a      	str	r2, [r7, #4]
 801754e:	603b      	str	r3, [r7, #0]
 8017550:	460b      	mov	r3, r1
 8017552:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017554:	2300      	movs	r3, #0
 8017556:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017558:	2300      	movs	r3, #0
 801755a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017562:	7af9      	ldrb	r1, [r7, #11]
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	687a      	ldr	r2, [r7, #4]
 8017568:	f7f1 fe9b 	bl	80092a2 <HAL_PCD_EP_Receive>
 801756c:	4603      	mov	r3, r0
 801756e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017570:	7dfb      	ldrb	r3, [r7, #23]
 8017572:	4618      	mov	r0, r3
 8017574:	f000 f832 	bl	80175dc <USBD_Get_USB_Status>
 8017578:	4603      	mov	r3, r0
 801757a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801757c:	7dbb      	ldrb	r3, [r7, #22]
}
 801757e:	4618      	mov	r0, r3
 8017580:	3718      	adds	r7, #24
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}

08017586 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017586:	b580      	push	{r7, lr}
 8017588:	b082      	sub	sp, #8
 801758a:	af00      	add	r7, sp, #0
 801758c:	6078      	str	r0, [r7, #4]
 801758e:	460b      	mov	r3, r1
 8017590:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017598:	78fa      	ldrb	r2, [r7, #3]
 801759a:	4611      	mov	r1, r2
 801759c:	4618      	mov	r0, r3
 801759e:	f7f1 febc 	bl	800931a <HAL_PCD_EP_GetRxCount>
 80175a2:	4603      	mov	r3, r0
}
 80175a4:	4618      	mov	r0, r3
 80175a6:	3708      	adds	r7, #8
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80175ac:	b480      	push	{r7}
 80175ae:	b083      	sub	sp, #12
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80175b4:	4b03      	ldr	r3, [pc, #12]	; (80175c4 <USBD_static_malloc+0x18>)
}
 80175b6:	4618      	mov	r0, r3
 80175b8:	370c      	adds	r7, #12
 80175ba:	46bd      	mov	sp, r7
 80175bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c0:	4770      	bx	lr
 80175c2:	bf00      	nop
 80175c4:	24002ff4 	.word	0x24002ff4

080175c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80175c8:	b480      	push	{r7}
 80175ca:	b083      	sub	sp, #12
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80175d0:	bf00      	nop
 80175d2:	370c      	adds	r7, #12
 80175d4:	46bd      	mov	sp, r7
 80175d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175da:	4770      	bx	lr

080175dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80175dc:	b480      	push	{r7}
 80175de:	b085      	sub	sp, #20
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	4603      	mov	r3, r0
 80175e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175e6:	2300      	movs	r3, #0
 80175e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80175ea:	79fb      	ldrb	r3, [r7, #7]
 80175ec:	2b03      	cmp	r3, #3
 80175ee:	d817      	bhi.n	8017620 <USBD_Get_USB_Status+0x44>
 80175f0:	a201      	add	r2, pc, #4	; (adr r2, 80175f8 <USBD_Get_USB_Status+0x1c>)
 80175f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175f6:	bf00      	nop
 80175f8:	08017609 	.word	0x08017609
 80175fc:	0801760f 	.word	0x0801760f
 8017600:	08017615 	.word	0x08017615
 8017604:	0801761b 	.word	0x0801761b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017608:	2300      	movs	r3, #0
 801760a:	73fb      	strb	r3, [r7, #15]
    break;
 801760c:	e00b      	b.n	8017626 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801760e:	2303      	movs	r3, #3
 8017610:	73fb      	strb	r3, [r7, #15]
    break;
 8017612:	e008      	b.n	8017626 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017614:	2301      	movs	r3, #1
 8017616:	73fb      	strb	r3, [r7, #15]
    break;
 8017618:	e005      	b.n	8017626 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801761a:	2303      	movs	r3, #3
 801761c:	73fb      	strb	r3, [r7, #15]
    break;
 801761e:	e002      	b.n	8017626 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017620:	2303      	movs	r3, #3
 8017622:	73fb      	strb	r3, [r7, #15]
    break;
 8017624:	bf00      	nop
  }
  return usb_status;
 8017626:	7bfb      	ldrb	r3, [r7, #15]
}
 8017628:	4618      	mov	r0, r3
 801762a:	3714      	adds	r7, #20
 801762c:	46bd      	mov	sp, r7
 801762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017632:	4770      	bx	lr

08017634 <siprintf>:
 8017634:	b40e      	push	{r1, r2, r3}
 8017636:	b500      	push	{lr}
 8017638:	b09c      	sub	sp, #112	; 0x70
 801763a:	ab1d      	add	r3, sp, #116	; 0x74
 801763c:	9002      	str	r0, [sp, #8]
 801763e:	9006      	str	r0, [sp, #24]
 8017640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017644:	4809      	ldr	r0, [pc, #36]	; (801766c <siprintf+0x38>)
 8017646:	9107      	str	r1, [sp, #28]
 8017648:	9104      	str	r1, [sp, #16]
 801764a:	4909      	ldr	r1, [pc, #36]	; (8017670 <siprintf+0x3c>)
 801764c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017650:	9105      	str	r1, [sp, #20]
 8017652:	6800      	ldr	r0, [r0, #0]
 8017654:	9301      	str	r3, [sp, #4]
 8017656:	a902      	add	r1, sp, #8
 8017658:	f000 f9d6 	bl	8017a08 <_svfiprintf_r>
 801765c:	9b02      	ldr	r3, [sp, #8]
 801765e:	2200      	movs	r2, #0
 8017660:	701a      	strb	r2, [r3, #0]
 8017662:	b01c      	add	sp, #112	; 0x70
 8017664:	f85d eb04 	ldr.w	lr, [sp], #4
 8017668:	b003      	add	sp, #12
 801766a:	4770      	bx	lr
 801766c:	24000150 	.word	0x24000150
 8017670:	ffff0208 	.word	0xffff0208

08017674 <siscanf>:
 8017674:	b40e      	push	{r1, r2, r3}
 8017676:	b510      	push	{r4, lr}
 8017678:	b09f      	sub	sp, #124	; 0x7c
 801767a:	ac21      	add	r4, sp, #132	; 0x84
 801767c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017680:	f854 2b04 	ldr.w	r2, [r4], #4
 8017684:	9201      	str	r2, [sp, #4]
 8017686:	f8ad 101c 	strh.w	r1, [sp, #28]
 801768a:	9004      	str	r0, [sp, #16]
 801768c:	9008      	str	r0, [sp, #32]
 801768e:	f7e8 fe49 	bl	8000324 <strlen>
 8017692:	4b0c      	ldr	r3, [pc, #48]	; (80176c4 <siscanf+0x50>)
 8017694:	9005      	str	r0, [sp, #20]
 8017696:	9009      	str	r0, [sp, #36]	; 0x24
 8017698:	930d      	str	r3, [sp, #52]	; 0x34
 801769a:	480b      	ldr	r0, [pc, #44]	; (80176c8 <siscanf+0x54>)
 801769c:	9a01      	ldr	r2, [sp, #4]
 801769e:	6800      	ldr	r0, [r0, #0]
 80176a0:	9403      	str	r4, [sp, #12]
 80176a2:	2300      	movs	r3, #0
 80176a4:	9311      	str	r3, [sp, #68]	; 0x44
 80176a6:	9316      	str	r3, [sp, #88]	; 0x58
 80176a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80176b0:	a904      	add	r1, sp, #16
 80176b2:	4623      	mov	r3, r4
 80176b4:	f000 fb00 	bl	8017cb8 <__ssvfiscanf_r>
 80176b8:	b01f      	add	sp, #124	; 0x7c
 80176ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176be:	b003      	add	sp, #12
 80176c0:	4770      	bx	lr
 80176c2:	bf00      	nop
 80176c4:	080176cd 	.word	0x080176cd
 80176c8:	24000150 	.word	0x24000150

080176cc <__seofread>:
 80176cc:	2000      	movs	r0, #0
 80176ce:	4770      	bx	lr

080176d0 <memset>:
 80176d0:	4402      	add	r2, r0
 80176d2:	4603      	mov	r3, r0
 80176d4:	4293      	cmp	r3, r2
 80176d6:	d100      	bne.n	80176da <memset+0xa>
 80176d8:	4770      	bx	lr
 80176da:	f803 1b01 	strb.w	r1, [r3], #1
 80176de:	e7f9      	b.n	80176d4 <memset+0x4>

080176e0 <__errno>:
 80176e0:	4b01      	ldr	r3, [pc, #4]	; (80176e8 <__errno+0x8>)
 80176e2:	6818      	ldr	r0, [r3, #0]
 80176e4:	4770      	bx	lr
 80176e6:	bf00      	nop
 80176e8:	24000150 	.word	0x24000150

080176ec <__libc_init_array>:
 80176ec:	b570      	push	{r4, r5, r6, lr}
 80176ee:	4d0d      	ldr	r5, [pc, #52]	; (8017724 <__libc_init_array+0x38>)
 80176f0:	4c0d      	ldr	r4, [pc, #52]	; (8017728 <__libc_init_array+0x3c>)
 80176f2:	1b64      	subs	r4, r4, r5
 80176f4:	10a4      	asrs	r4, r4, #2
 80176f6:	2600      	movs	r6, #0
 80176f8:	42a6      	cmp	r6, r4
 80176fa:	d109      	bne.n	8017710 <__libc_init_array+0x24>
 80176fc:	4d0b      	ldr	r5, [pc, #44]	; (801772c <__libc_init_array+0x40>)
 80176fe:	4c0c      	ldr	r4, [pc, #48]	; (8017730 <__libc_init_array+0x44>)
 8017700:	f001 f8fe 	bl	8018900 <_init>
 8017704:	1b64      	subs	r4, r4, r5
 8017706:	10a4      	asrs	r4, r4, #2
 8017708:	2600      	movs	r6, #0
 801770a:	42a6      	cmp	r6, r4
 801770c:	d105      	bne.n	801771a <__libc_init_array+0x2e>
 801770e:	bd70      	pop	{r4, r5, r6, pc}
 8017710:	f855 3b04 	ldr.w	r3, [r5], #4
 8017714:	4798      	blx	r3
 8017716:	3601      	adds	r6, #1
 8017718:	e7ee      	b.n	80176f8 <__libc_init_array+0xc>
 801771a:	f855 3b04 	ldr.w	r3, [r5], #4
 801771e:	4798      	blx	r3
 8017720:	3601      	adds	r6, #1
 8017722:	e7f2      	b.n	801770a <__libc_init_array+0x1e>
 8017724:	08018d08 	.word	0x08018d08
 8017728:	08018d08 	.word	0x08018d08
 801772c:	08018d08 	.word	0x08018d08
 8017730:	08018d0c 	.word	0x08018d0c

08017734 <__retarget_lock_acquire_recursive>:
 8017734:	4770      	bx	lr

08017736 <__retarget_lock_release_recursive>:
 8017736:	4770      	bx	lr

08017738 <strcpy>:
 8017738:	4603      	mov	r3, r0
 801773a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801773e:	f803 2b01 	strb.w	r2, [r3], #1
 8017742:	2a00      	cmp	r2, #0
 8017744:	d1f9      	bne.n	801773a <strcpy+0x2>
 8017746:	4770      	bx	lr

08017748 <memcpy>:
 8017748:	440a      	add	r2, r1
 801774a:	4291      	cmp	r1, r2
 801774c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017750:	d100      	bne.n	8017754 <memcpy+0xc>
 8017752:	4770      	bx	lr
 8017754:	b510      	push	{r4, lr}
 8017756:	f811 4b01 	ldrb.w	r4, [r1], #1
 801775a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801775e:	4291      	cmp	r1, r2
 8017760:	d1f9      	bne.n	8017756 <memcpy+0xe>
 8017762:	bd10      	pop	{r4, pc}

08017764 <_free_r>:
 8017764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017766:	2900      	cmp	r1, #0
 8017768:	d044      	beq.n	80177f4 <_free_r+0x90>
 801776a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801776e:	9001      	str	r0, [sp, #4]
 8017770:	2b00      	cmp	r3, #0
 8017772:	f1a1 0404 	sub.w	r4, r1, #4
 8017776:	bfb8      	it	lt
 8017778:	18e4      	addlt	r4, r4, r3
 801777a:	f000 f8df 	bl	801793c <__malloc_lock>
 801777e:	4a1e      	ldr	r2, [pc, #120]	; (80177f8 <_free_r+0x94>)
 8017780:	9801      	ldr	r0, [sp, #4]
 8017782:	6813      	ldr	r3, [r2, #0]
 8017784:	b933      	cbnz	r3, 8017794 <_free_r+0x30>
 8017786:	6063      	str	r3, [r4, #4]
 8017788:	6014      	str	r4, [r2, #0]
 801778a:	b003      	add	sp, #12
 801778c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017790:	f000 b8da 	b.w	8017948 <__malloc_unlock>
 8017794:	42a3      	cmp	r3, r4
 8017796:	d908      	bls.n	80177aa <_free_r+0x46>
 8017798:	6825      	ldr	r5, [r4, #0]
 801779a:	1961      	adds	r1, r4, r5
 801779c:	428b      	cmp	r3, r1
 801779e:	bf01      	itttt	eq
 80177a0:	6819      	ldreq	r1, [r3, #0]
 80177a2:	685b      	ldreq	r3, [r3, #4]
 80177a4:	1949      	addeq	r1, r1, r5
 80177a6:	6021      	streq	r1, [r4, #0]
 80177a8:	e7ed      	b.n	8017786 <_free_r+0x22>
 80177aa:	461a      	mov	r2, r3
 80177ac:	685b      	ldr	r3, [r3, #4]
 80177ae:	b10b      	cbz	r3, 80177b4 <_free_r+0x50>
 80177b0:	42a3      	cmp	r3, r4
 80177b2:	d9fa      	bls.n	80177aa <_free_r+0x46>
 80177b4:	6811      	ldr	r1, [r2, #0]
 80177b6:	1855      	adds	r5, r2, r1
 80177b8:	42a5      	cmp	r5, r4
 80177ba:	d10b      	bne.n	80177d4 <_free_r+0x70>
 80177bc:	6824      	ldr	r4, [r4, #0]
 80177be:	4421      	add	r1, r4
 80177c0:	1854      	adds	r4, r2, r1
 80177c2:	42a3      	cmp	r3, r4
 80177c4:	6011      	str	r1, [r2, #0]
 80177c6:	d1e0      	bne.n	801778a <_free_r+0x26>
 80177c8:	681c      	ldr	r4, [r3, #0]
 80177ca:	685b      	ldr	r3, [r3, #4]
 80177cc:	6053      	str	r3, [r2, #4]
 80177ce:	440c      	add	r4, r1
 80177d0:	6014      	str	r4, [r2, #0]
 80177d2:	e7da      	b.n	801778a <_free_r+0x26>
 80177d4:	d902      	bls.n	80177dc <_free_r+0x78>
 80177d6:	230c      	movs	r3, #12
 80177d8:	6003      	str	r3, [r0, #0]
 80177da:	e7d6      	b.n	801778a <_free_r+0x26>
 80177dc:	6825      	ldr	r5, [r4, #0]
 80177de:	1961      	adds	r1, r4, r5
 80177e0:	428b      	cmp	r3, r1
 80177e2:	bf04      	itt	eq
 80177e4:	6819      	ldreq	r1, [r3, #0]
 80177e6:	685b      	ldreq	r3, [r3, #4]
 80177e8:	6063      	str	r3, [r4, #4]
 80177ea:	bf04      	itt	eq
 80177ec:	1949      	addeq	r1, r1, r5
 80177ee:	6021      	streq	r1, [r4, #0]
 80177f0:	6054      	str	r4, [r2, #4]
 80177f2:	e7ca      	b.n	801778a <_free_r+0x26>
 80177f4:	b003      	add	sp, #12
 80177f6:	bd30      	pop	{r4, r5, pc}
 80177f8:	24003354 	.word	0x24003354

080177fc <sbrk_aligned>:
 80177fc:	b570      	push	{r4, r5, r6, lr}
 80177fe:	4e0e      	ldr	r6, [pc, #56]	; (8017838 <sbrk_aligned+0x3c>)
 8017800:	460c      	mov	r4, r1
 8017802:	6831      	ldr	r1, [r6, #0]
 8017804:	4605      	mov	r5, r0
 8017806:	b911      	cbnz	r1, 801780e <sbrk_aligned+0x12>
 8017808:	f000 ff3a 	bl	8018680 <_sbrk_r>
 801780c:	6030      	str	r0, [r6, #0]
 801780e:	4621      	mov	r1, r4
 8017810:	4628      	mov	r0, r5
 8017812:	f000 ff35 	bl	8018680 <_sbrk_r>
 8017816:	1c43      	adds	r3, r0, #1
 8017818:	d00a      	beq.n	8017830 <sbrk_aligned+0x34>
 801781a:	1cc4      	adds	r4, r0, #3
 801781c:	f024 0403 	bic.w	r4, r4, #3
 8017820:	42a0      	cmp	r0, r4
 8017822:	d007      	beq.n	8017834 <sbrk_aligned+0x38>
 8017824:	1a21      	subs	r1, r4, r0
 8017826:	4628      	mov	r0, r5
 8017828:	f000 ff2a 	bl	8018680 <_sbrk_r>
 801782c:	3001      	adds	r0, #1
 801782e:	d101      	bne.n	8017834 <sbrk_aligned+0x38>
 8017830:	f04f 34ff 	mov.w	r4, #4294967295
 8017834:	4620      	mov	r0, r4
 8017836:	bd70      	pop	{r4, r5, r6, pc}
 8017838:	24003358 	.word	0x24003358

0801783c <_malloc_r>:
 801783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017840:	1ccd      	adds	r5, r1, #3
 8017842:	f025 0503 	bic.w	r5, r5, #3
 8017846:	3508      	adds	r5, #8
 8017848:	2d0c      	cmp	r5, #12
 801784a:	bf38      	it	cc
 801784c:	250c      	movcc	r5, #12
 801784e:	2d00      	cmp	r5, #0
 8017850:	4607      	mov	r7, r0
 8017852:	db01      	blt.n	8017858 <_malloc_r+0x1c>
 8017854:	42a9      	cmp	r1, r5
 8017856:	d905      	bls.n	8017864 <_malloc_r+0x28>
 8017858:	230c      	movs	r3, #12
 801785a:	603b      	str	r3, [r7, #0]
 801785c:	2600      	movs	r6, #0
 801785e:	4630      	mov	r0, r6
 8017860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017938 <_malloc_r+0xfc>
 8017868:	f000 f868 	bl	801793c <__malloc_lock>
 801786c:	f8d8 3000 	ldr.w	r3, [r8]
 8017870:	461c      	mov	r4, r3
 8017872:	bb5c      	cbnz	r4, 80178cc <_malloc_r+0x90>
 8017874:	4629      	mov	r1, r5
 8017876:	4638      	mov	r0, r7
 8017878:	f7ff ffc0 	bl	80177fc <sbrk_aligned>
 801787c:	1c43      	adds	r3, r0, #1
 801787e:	4604      	mov	r4, r0
 8017880:	d155      	bne.n	801792e <_malloc_r+0xf2>
 8017882:	f8d8 4000 	ldr.w	r4, [r8]
 8017886:	4626      	mov	r6, r4
 8017888:	2e00      	cmp	r6, #0
 801788a:	d145      	bne.n	8017918 <_malloc_r+0xdc>
 801788c:	2c00      	cmp	r4, #0
 801788e:	d048      	beq.n	8017922 <_malloc_r+0xe6>
 8017890:	6823      	ldr	r3, [r4, #0]
 8017892:	4631      	mov	r1, r6
 8017894:	4638      	mov	r0, r7
 8017896:	eb04 0903 	add.w	r9, r4, r3
 801789a:	f000 fef1 	bl	8018680 <_sbrk_r>
 801789e:	4581      	cmp	r9, r0
 80178a0:	d13f      	bne.n	8017922 <_malloc_r+0xe6>
 80178a2:	6821      	ldr	r1, [r4, #0]
 80178a4:	1a6d      	subs	r5, r5, r1
 80178a6:	4629      	mov	r1, r5
 80178a8:	4638      	mov	r0, r7
 80178aa:	f7ff ffa7 	bl	80177fc <sbrk_aligned>
 80178ae:	3001      	adds	r0, #1
 80178b0:	d037      	beq.n	8017922 <_malloc_r+0xe6>
 80178b2:	6823      	ldr	r3, [r4, #0]
 80178b4:	442b      	add	r3, r5
 80178b6:	6023      	str	r3, [r4, #0]
 80178b8:	f8d8 3000 	ldr.w	r3, [r8]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d038      	beq.n	8017932 <_malloc_r+0xf6>
 80178c0:	685a      	ldr	r2, [r3, #4]
 80178c2:	42a2      	cmp	r2, r4
 80178c4:	d12b      	bne.n	801791e <_malloc_r+0xe2>
 80178c6:	2200      	movs	r2, #0
 80178c8:	605a      	str	r2, [r3, #4]
 80178ca:	e00f      	b.n	80178ec <_malloc_r+0xb0>
 80178cc:	6822      	ldr	r2, [r4, #0]
 80178ce:	1b52      	subs	r2, r2, r5
 80178d0:	d41f      	bmi.n	8017912 <_malloc_r+0xd6>
 80178d2:	2a0b      	cmp	r2, #11
 80178d4:	d917      	bls.n	8017906 <_malloc_r+0xca>
 80178d6:	1961      	adds	r1, r4, r5
 80178d8:	42a3      	cmp	r3, r4
 80178da:	6025      	str	r5, [r4, #0]
 80178dc:	bf18      	it	ne
 80178de:	6059      	strne	r1, [r3, #4]
 80178e0:	6863      	ldr	r3, [r4, #4]
 80178e2:	bf08      	it	eq
 80178e4:	f8c8 1000 	streq.w	r1, [r8]
 80178e8:	5162      	str	r2, [r4, r5]
 80178ea:	604b      	str	r3, [r1, #4]
 80178ec:	4638      	mov	r0, r7
 80178ee:	f104 060b 	add.w	r6, r4, #11
 80178f2:	f000 f829 	bl	8017948 <__malloc_unlock>
 80178f6:	f026 0607 	bic.w	r6, r6, #7
 80178fa:	1d23      	adds	r3, r4, #4
 80178fc:	1af2      	subs	r2, r6, r3
 80178fe:	d0ae      	beq.n	801785e <_malloc_r+0x22>
 8017900:	1b9b      	subs	r3, r3, r6
 8017902:	50a3      	str	r3, [r4, r2]
 8017904:	e7ab      	b.n	801785e <_malloc_r+0x22>
 8017906:	42a3      	cmp	r3, r4
 8017908:	6862      	ldr	r2, [r4, #4]
 801790a:	d1dd      	bne.n	80178c8 <_malloc_r+0x8c>
 801790c:	f8c8 2000 	str.w	r2, [r8]
 8017910:	e7ec      	b.n	80178ec <_malloc_r+0xb0>
 8017912:	4623      	mov	r3, r4
 8017914:	6864      	ldr	r4, [r4, #4]
 8017916:	e7ac      	b.n	8017872 <_malloc_r+0x36>
 8017918:	4634      	mov	r4, r6
 801791a:	6876      	ldr	r6, [r6, #4]
 801791c:	e7b4      	b.n	8017888 <_malloc_r+0x4c>
 801791e:	4613      	mov	r3, r2
 8017920:	e7cc      	b.n	80178bc <_malloc_r+0x80>
 8017922:	230c      	movs	r3, #12
 8017924:	603b      	str	r3, [r7, #0]
 8017926:	4638      	mov	r0, r7
 8017928:	f000 f80e 	bl	8017948 <__malloc_unlock>
 801792c:	e797      	b.n	801785e <_malloc_r+0x22>
 801792e:	6025      	str	r5, [r4, #0]
 8017930:	e7dc      	b.n	80178ec <_malloc_r+0xb0>
 8017932:	605b      	str	r3, [r3, #4]
 8017934:	deff      	udf	#255	; 0xff
 8017936:	bf00      	nop
 8017938:	24003354 	.word	0x24003354

0801793c <__malloc_lock>:
 801793c:	4801      	ldr	r0, [pc, #4]	; (8017944 <__malloc_lock+0x8>)
 801793e:	f7ff bef9 	b.w	8017734 <__retarget_lock_acquire_recursive>
 8017942:	bf00      	nop
 8017944:	24003350 	.word	0x24003350

08017948 <__malloc_unlock>:
 8017948:	4801      	ldr	r0, [pc, #4]	; (8017950 <__malloc_unlock+0x8>)
 801794a:	f7ff bef4 	b.w	8017736 <__retarget_lock_release_recursive>
 801794e:	bf00      	nop
 8017950:	24003350 	.word	0x24003350

08017954 <__ssputs_r>:
 8017954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017958:	688e      	ldr	r6, [r1, #8]
 801795a:	461f      	mov	r7, r3
 801795c:	42be      	cmp	r6, r7
 801795e:	680b      	ldr	r3, [r1, #0]
 8017960:	4682      	mov	sl, r0
 8017962:	460c      	mov	r4, r1
 8017964:	4690      	mov	r8, r2
 8017966:	d82c      	bhi.n	80179c2 <__ssputs_r+0x6e>
 8017968:	898a      	ldrh	r2, [r1, #12]
 801796a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801796e:	d026      	beq.n	80179be <__ssputs_r+0x6a>
 8017970:	6965      	ldr	r5, [r4, #20]
 8017972:	6909      	ldr	r1, [r1, #16]
 8017974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017978:	eba3 0901 	sub.w	r9, r3, r1
 801797c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017980:	1c7b      	adds	r3, r7, #1
 8017982:	444b      	add	r3, r9
 8017984:	106d      	asrs	r5, r5, #1
 8017986:	429d      	cmp	r5, r3
 8017988:	bf38      	it	cc
 801798a:	461d      	movcc	r5, r3
 801798c:	0553      	lsls	r3, r2, #21
 801798e:	d527      	bpl.n	80179e0 <__ssputs_r+0x8c>
 8017990:	4629      	mov	r1, r5
 8017992:	f7ff ff53 	bl	801783c <_malloc_r>
 8017996:	4606      	mov	r6, r0
 8017998:	b360      	cbz	r0, 80179f4 <__ssputs_r+0xa0>
 801799a:	6921      	ldr	r1, [r4, #16]
 801799c:	464a      	mov	r2, r9
 801799e:	f7ff fed3 	bl	8017748 <memcpy>
 80179a2:	89a3      	ldrh	r3, [r4, #12]
 80179a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80179a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179ac:	81a3      	strh	r3, [r4, #12]
 80179ae:	6126      	str	r6, [r4, #16]
 80179b0:	6165      	str	r5, [r4, #20]
 80179b2:	444e      	add	r6, r9
 80179b4:	eba5 0509 	sub.w	r5, r5, r9
 80179b8:	6026      	str	r6, [r4, #0]
 80179ba:	60a5      	str	r5, [r4, #8]
 80179bc:	463e      	mov	r6, r7
 80179be:	42be      	cmp	r6, r7
 80179c0:	d900      	bls.n	80179c4 <__ssputs_r+0x70>
 80179c2:	463e      	mov	r6, r7
 80179c4:	6820      	ldr	r0, [r4, #0]
 80179c6:	4632      	mov	r2, r6
 80179c8:	4641      	mov	r1, r8
 80179ca:	f000 fe3e 	bl	801864a <memmove>
 80179ce:	68a3      	ldr	r3, [r4, #8]
 80179d0:	1b9b      	subs	r3, r3, r6
 80179d2:	60a3      	str	r3, [r4, #8]
 80179d4:	6823      	ldr	r3, [r4, #0]
 80179d6:	4433      	add	r3, r6
 80179d8:	6023      	str	r3, [r4, #0]
 80179da:	2000      	movs	r0, #0
 80179dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179e0:	462a      	mov	r2, r5
 80179e2:	f000 fe5d 	bl	80186a0 <_realloc_r>
 80179e6:	4606      	mov	r6, r0
 80179e8:	2800      	cmp	r0, #0
 80179ea:	d1e0      	bne.n	80179ae <__ssputs_r+0x5a>
 80179ec:	6921      	ldr	r1, [r4, #16]
 80179ee:	4650      	mov	r0, sl
 80179f0:	f7ff feb8 	bl	8017764 <_free_r>
 80179f4:	230c      	movs	r3, #12
 80179f6:	f8ca 3000 	str.w	r3, [sl]
 80179fa:	89a3      	ldrh	r3, [r4, #12]
 80179fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a00:	81a3      	strh	r3, [r4, #12]
 8017a02:	f04f 30ff 	mov.w	r0, #4294967295
 8017a06:	e7e9      	b.n	80179dc <__ssputs_r+0x88>

08017a08 <_svfiprintf_r>:
 8017a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0c:	4698      	mov	r8, r3
 8017a0e:	898b      	ldrh	r3, [r1, #12]
 8017a10:	061b      	lsls	r3, r3, #24
 8017a12:	b09d      	sub	sp, #116	; 0x74
 8017a14:	4607      	mov	r7, r0
 8017a16:	460d      	mov	r5, r1
 8017a18:	4614      	mov	r4, r2
 8017a1a:	d50e      	bpl.n	8017a3a <_svfiprintf_r+0x32>
 8017a1c:	690b      	ldr	r3, [r1, #16]
 8017a1e:	b963      	cbnz	r3, 8017a3a <_svfiprintf_r+0x32>
 8017a20:	2140      	movs	r1, #64	; 0x40
 8017a22:	f7ff ff0b 	bl	801783c <_malloc_r>
 8017a26:	6028      	str	r0, [r5, #0]
 8017a28:	6128      	str	r0, [r5, #16]
 8017a2a:	b920      	cbnz	r0, 8017a36 <_svfiprintf_r+0x2e>
 8017a2c:	230c      	movs	r3, #12
 8017a2e:	603b      	str	r3, [r7, #0]
 8017a30:	f04f 30ff 	mov.w	r0, #4294967295
 8017a34:	e0d0      	b.n	8017bd8 <_svfiprintf_r+0x1d0>
 8017a36:	2340      	movs	r3, #64	; 0x40
 8017a38:	616b      	str	r3, [r5, #20]
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8017a3e:	2320      	movs	r3, #32
 8017a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a48:	2330      	movs	r3, #48	; 0x30
 8017a4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017bf0 <_svfiprintf_r+0x1e8>
 8017a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a52:	f04f 0901 	mov.w	r9, #1
 8017a56:	4623      	mov	r3, r4
 8017a58:	469a      	mov	sl, r3
 8017a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a5e:	b10a      	cbz	r2, 8017a64 <_svfiprintf_r+0x5c>
 8017a60:	2a25      	cmp	r2, #37	; 0x25
 8017a62:	d1f9      	bne.n	8017a58 <_svfiprintf_r+0x50>
 8017a64:	ebba 0b04 	subs.w	fp, sl, r4
 8017a68:	d00b      	beq.n	8017a82 <_svfiprintf_r+0x7a>
 8017a6a:	465b      	mov	r3, fp
 8017a6c:	4622      	mov	r2, r4
 8017a6e:	4629      	mov	r1, r5
 8017a70:	4638      	mov	r0, r7
 8017a72:	f7ff ff6f 	bl	8017954 <__ssputs_r>
 8017a76:	3001      	adds	r0, #1
 8017a78:	f000 80a9 	beq.w	8017bce <_svfiprintf_r+0x1c6>
 8017a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a7e:	445a      	add	r2, fp
 8017a80:	9209      	str	r2, [sp, #36]	; 0x24
 8017a82:	f89a 3000 	ldrb.w	r3, [sl]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	f000 80a1 	beq.w	8017bce <_svfiprintf_r+0x1c6>
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8017a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a96:	f10a 0a01 	add.w	sl, sl, #1
 8017a9a:	9304      	str	r3, [sp, #16]
 8017a9c:	9307      	str	r3, [sp, #28]
 8017a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8017aa4:	4654      	mov	r4, sl
 8017aa6:	2205      	movs	r2, #5
 8017aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017aac:	4850      	ldr	r0, [pc, #320]	; (8017bf0 <_svfiprintf_r+0x1e8>)
 8017aae:	f7e8 fc47 	bl	8000340 <memchr>
 8017ab2:	9a04      	ldr	r2, [sp, #16]
 8017ab4:	b9d8      	cbnz	r0, 8017aee <_svfiprintf_r+0xe6>
 8017ab6:	06d0      	lsls	r0, r2, #27
 8017ab8:	bf44      	itt	mi
 8017aba:	2320      	movmi	r3, #32
 8017abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ac0:	0711      	lsls	r1, r2, #28
 8017ac2:	bf44      	itt	mi
 8017ac4:	232b      	movmi	r3, #43	; 0x2b
 8017ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017aca:	f89a 3000 	ldrb.w	r3, [sl]
 8017ace:	2b2a      	cmp	r3, #42	; 0x2a
 8017ad0:	d015      	beq.n	8017afe <_svfiprintf_r+0xf6>
 8017ad2:	9a07      	ldr	r2, [sp, #28]
 8017ad4:	4654      	mov	r4, sl
 8017ad6:	2000      	movs	r0, #0
 8017ad8:	f04f 0c0a 	mov.w	ip, #10
 8017adc:	4621      	mov	r1, r4
 8017ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ae2:	3b30      	subs	r3, #48	; 0x30
 8017ae4:	2b09      	cmp	r3, #9
 8017ae6:	d94d      	bls.n	8017b84 <_svfiprintf_r+0x17c>
 8017ae8:	b1b0      	cbz	r0, 8017b18 <_svfiprintf_r+0x110>
 8017aea:	9207      	str	r2, [sp, #28]
 8017aec:	e014      	b.n	8017b18 <_svfiprintf_r+0x110>
 8017aee:	eba0 0308 	sub.w	r3, r0, r8
 8017af2:	fa09 f303 	lsl.w	r3, r9, r3
 8017af6:	4313      	orrs	r3, r2
 8017af8:	9304      	str	r3, [sp, #16]
 8017afa:	46a2      	mov	sl, r4
 8017afc:	e7d2      	b.n	8017aa4 <_svfiprintf_r+0x9c>
 8017afe:	9b03      	ldr	r3, [sp, #12]
 8017b00:	1d19      	adds	r1, r3, #4
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	9103      	str	r1, [sp, #12]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	bfbb      	ittet	lt
 8017b0a:	425b      	neglt	r3, r3
 8017b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8017b10:	9307      	strge	r3, [sp, #28]
 8017b12:	9307      	strlt	r3, [sp, #28]
 8017b14:	bfb8      	it	lt
 8017b16:	9204      	strlt	r2, [sp, #16]
 8017b18:	7823      	ldrb	r3, [r4, #0]
 8017b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8017b1c:	d10c      	bne.n	8017b38 <_svfiprintf_r+0x130>
 8017b1e:	7863      	ldrb	r3, [r4, #1]
 8017b20:	2b2a      	cmp	r3, #42	; 0x2a
 8017b22:	d134      	bne.n	8017b8e <_svfiprintf_r+0x186>
 8017b24:	9b03      	ldr	r3, [sp, #12]
 8017b26:	1d1a      	adds	r2, r3, #4
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	9203      	str	r2, [sp, #12]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	bfb8      	it	lt
 8017b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b34:	3402      	adds	r4, #2
 8017b36:	9305      	str	r3, [sp, #20]
 8017b38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017c00 <_svfiprintf_r+0x1f8>
 8017b3c:	7821      	ldrb	r1, [r4, #0]
 8017b3e:	2203      	movs	r2, #3
 8017b40:	4650      	mov	r0, sl
 8017b42:	f7e8 fbfd 	bl	8000340 <memchr>
 8017b46:	b138      	cbz	r0, 8017b58 <_svfiprintf_r+0x150>
 8017b48:	9b04      	ldr	r3, [sp, #16]
 8017b4a:	eba0 000a 	sub.w	r0, r0, sl
 8017b4e:	2240      	movs	r2, #64	; 0x40
 8017b50:	4082      	lsls	r2, r0
 8017b52:	4313      	orrs	r3, r2
 8017b54:	3401      	adds	r4, #1
 8017b56:	9304      	str	r3, [sp, #16]
 8017b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b5c:	4825      	ldr	r0, [pc, #148]	; (8017bf4 <_svfiprintf_r+0x1ec>)
 8017b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b62:	2206      	movs	r2, #6
 8017b64:	f7e8 fbec 	bl	8000340 <memchr>
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	d038      	beq.n	8017bde <_svfiprintf_r+0x1d6>
 8017b6c:	4b22      	ldr	r3, [pc, #136]	; (8017bf8 <_svfiprintf_r+0x1f0>)
 8017b6e:	bb1b      	cbnz	r3, 8017bb8 <_svfiprintf_r+0x1b0>
 8017b70:	9b03      	ldr	r3, [sp, #12]
 8017b72:	3307      	adds	r3, #7
 8017b74:	f023 0307 	bic.w	r3, r3, #7
 8017b78:	3308      	adds	r3, #8
 8017b7a:	9303      	str	r3, [sp, #12]
 8017b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b7e:	4433      	add	r3, r6
 8017b80:	9309      	str	r3, [sp, #36]	; 0x24
 8017b82:	e768      	b.n	8017a56 <_svfiprintf_r+0x4e>
 8017b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b88:	460c      	mov	r4, r1
 8017b8a:	2001      	movs	r0, #1
 8017b8c:	e7a6      	b.n	8017adc <_svfiprintf_r+0xd4>
 8017b8e:	2300      	movs	r3, #0
 8017b90:	3401      	adds	r4, #1
 8017b92:	9305      	str	r3, [sp, #20]
 8017b94:	4619      	mov	r1, r3
 8017b96:	f04f 0c0a 	mov.w	ip, #10
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ba0:	3a30      	subs	r2, #48	; 0x30
 8017ba2:	2a09      	cmp	r2, #9
 8017ba4:	d903      	bls.n	8017bae <_svfiprintf_r+0x1a6>
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d0c6      	beq.n	8017b38 <_svfiprintf_r+0x130>
 8017baa:	9105      	str	r1, [sp, #20]
 8017bac:	e7c4      	b.n	8017b38 <_svfiprintf_r+0x130>
 8017bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bb2:	4604      	mov	r4, r0
 8017bb4:	2301      	movs	r3, #1
 8017bb6:	e7f0      	b.n	8017b9a <_svfiprintf_r+0x192>
 8017bb8:	ab03      	add	r3, sp, #12
 8017bba:	9300      	str	r3, [sp, #0]
 8017bbc:	462a      	mov	r2, r5
 8017bbe:	4b0f      	ldr	r3, [pc, #60]	; (8017bfc <_svfiprintf_r+0x1f4>)
 8017bc0:	a904      	add	r1, sp, #16
 8017bc2:	4638      	mov	r0, r7
 8017bc4:	f3af 8000 	nop.w
 8017bc8:	1c42      	adds	r2, r0, #1
 8017bca:	4606      	mov	r6, r0
 8017bcc:	d1d6      	bne.n	8017b7c <_svfiprintf_r+0x174>
 8017bce:	89ab      	ldrh	r3, [r5, #12]
 8017bd0:	065b      	lsls	r3, r3, #25
 8017bd2:	f53f af2d 	bmi.w	8017a30 <_svfiprintf_r+0x28>
 8017bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bd8:	b01d      	add	sp, #116	; 0x74
 8017bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bde:	ab03      	add	r3, sp, #12
 8017be0:	9300      	str	r3, [sp, #0]
 8017be2:	462a      	mov	r2, r5
 8017be4:	4b05      	ldr	r3, [pc, #20]	; (8017bfc <_svfiprintf_r+0x1f4>)
 8017be6:	a904      	add	r1, sp, #16
 8017be8:	4638      	mov	r0, r7
 8017bea:	f000 fa4b 	bl	8018084 <_printf_i>
 8017bee:	e7eb      	b.n	8017bc8 <_svfiprintf_r+0x1c0>
 8017bf0:	08018bb0 	.word	0x08018bb0
 8017bf4:	08018bba 	.word	0x08018bba
 8017bf8:	00000000 	.word	0x00000000
 8017bfc:	08017955 	.word	0x08017955
 8017c00:	08018bb6 	.word	0x08018bb6

08017c04 <_sungetc_r>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	1c4b      	adds	r3, r1, #1
 8017c08:	4614      	mov	r4, r2
 8017c0a:	d103      	bne.n	8017c14 <_sungetc_r+0x10>
 8017c0c:	f04f 35ff 	mov.w	r5, #4294967295
 8017c10:	4628      	mov	r0, r5
 8017c12:	bd38      	pop	{r3, r4, r5, pc}
 8017c14:	8993      	ldrh	r3, [r2, #12]
 8017c16:	f023 0320 	bic.w	r3, r3, #32
 8017c1a:	8193      	strh	r3, [r2, #12]
 8017c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c1e:	6852      	ldr	r2, [r2, #4]
 8017c20:	b2cd      	uxtb	r5, r1
 8017c22:	b18b      	cbz	r3, 8017c48 <_sungetc_r+0x44>
 8017c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017c26:	4293      	cmp	r3, r2
 8017c28:	dd08      	ble.n	8017c3c <_sungetc_r+0x38>
 8017c2a:	6823      	ldr	r3, [r4, #0]
 8017c2c:	1e5a      	subs	r2, r3, #1
 8017c2e:	6022      	str	r2, [r4, #0]
 8017c30:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017c34:	6863      	ldr	r3, [r4, #4]
 8017c36:	3301      	adds	r3, #1
 8017c38:	6063      	str	r3, [r4, #4]
 8017c3a:	e7e9      	b.n	8017c10 <_sungetc_r+0xc>
 8017c3c:	4621      	mov	r1, r4
 8017c3e:	f000 fcca 	bl	80185d6 <__submore>
 8017c42:	2800      	cmp	r0, #0
 8017c44:	d0f1      	beq.n	8017c2a <_sungetc_r+0x26>
 8017c46:	e7e1      	b.n	8017c0c <_sungetc_r+0x8>
 8017c48:	6921      	ldr	r1, [r4, #16]
 8017c4a:	6823      	ldr	r3, [r4, #0]
 8017c4c:	b151      	cbz	r1, 8017c64 <_sungetc_r+0x60>
 8017c4e:	4299      	cmp	r1, r3
 8017c50:	d208      	bcs.n	8017c64 <_sungetc_r+0x60>
 8017c52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017c56:	42a9      	cmp	r1, r5
 8017c58:	d104      	bne.n	8017c64 <_sungetc_r+0x60>
 8017c5a:	3b01      	subs	r3, #1
 8017c5c:	3201      	adds	r2, #1
 8017c5e:	6023      	str	r3, [r4, #0]
 8017c60:	6062      	str	r2, [r4, #4]
 8017c62:	e7d5      	b.n	8017c10 <_sungetc_r+0xc>
 8017c64:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8017c6e:	2303      	movs	r3, #3
 8017c70:	63a3      	str	r3, [r4, #56]	; 0x38
 8017c72:	4623      	mov	r3, r4
 8017c74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017c78:	6023      	str	r3, [r4, #0]
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	e7dc      	b.n	8017c38 <_sungetc_r+0x34>

08017c7e <__ssrefill_r>:
 8017c7e:	b510      	push	{r4, lr}
 8017c80:	460c      	mov	r4, r1
 8017c82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017c84:	b169      	cbz	r1, 8017ca2 <__ssrefill_r+0x24>
 8017c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c8a:	4299      	cmp	r1, r3
 8017c8c:	d001      	beq.n	8017c92 <__ssrefill_r+0x14>
 8017c8e:	f7ff fd69 	bl	8017764 <_free_r>
 8017c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017c94:	6063      	str	r3, [r4, #4]
 8017c96:	2000      	movs	r0, #0
 8017c98:	6360      	str	r0, [r4, #52]	; 0x34
 8017c9a:	b113      	cbz	r3, 8017ca2 <__ssrefill_r+0x24>
 8017c9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017c9e:	6023      	str	r3, [r4, #0]
 8017ca0:	bd10      	pop	{r4, pc}
 8017ca2:	6923      	ldr	r3, [r4, #16]
 8017ca4:	6023      	str	r3, [r4, #0]
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	6063      	str	r3, [r4, #4]
 8017caa:	89a3      	ldrh	r3, [r4, #12]
 8017cac:	f043 0320 	orr.w	r3, r3, #32
 8017cb0:	81a3      	strh	r3, [r4, #12]
 8017cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8017cb6:	e7f3      	b.n	8017ca0 <__ssrefill_r+0x22>

08017cb8 <__ssvfiscanf_r>:
 8017cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cbc:	460c      	mov	r4, r1
 8017cbe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017cc2:	2100      	movs	r1, #0
 8017cc4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017cc8:	49a6      	ldr	r1, [pc, #664]	; (8017f64 <__ssvfiscanf_r+0x2ac>)
 8017cca:	91a0      	str	r1, [sp, #640]	; 0x280
 8017ccc:	f10d 0804 	add.w	r8, sp, #4
 8017cd0:	49a5      	ldr	r1, [pc, #660]	; (8017f68 <__ssvfiscanf_r+0x2b0>)
 8017cd2:	4fa6      	ldr	r7, [pc, #664]	; (8017f6c <__ssvfiscanf_r+0x2b4>)
 8017cd4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017f70 <__ssvfiscanf_r+0x2b8>
 8017cd8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017cdc:	4606      	mov	r6, r0
 8017cde:	91a1      	str	r1, [sp, #644]	; 0x284
 8017ce0:	9300      	str	r3, [sp, #0]
 8017ce2:	7813      	ldrb	r3, [r2, #0]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	f000 815a 	beq.w	8017f9e <__ssvfiscanf_r+0x2e6>
 8017cea:	5cf9      	ldrb	r1, [r7, r3]
 8017cec:	f011 0108 	ands.w	r1, r1, #8
 8017cf0:	f102 0501 	add.w	r5, r2, #1
 8017cf4:	d019      	beq.n	8017d2a <__ssvfiscanf_r+0x72>
 8017cf6:	6863      	ldr	r3, [r4, #4]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	dd0f      	ble.n	8017d1c <__ssvfiscanf_r+0x64>
 8017cfc:	6823      	ldr	r3, [r4, #0]
 8017cfe:	781a      	ldrb	r2, [r3, #0]
 8017d00:	5cba      	ldrb	r2, [r7, r2]
 8017d02:	0712      	lsls	r2, r2, #28
 8017d04:	d401      	bmi.n	8017d0a <__ssvfiscanf_r+0x52>
 8017d06:	462a      	mov	r2, r5
 8017d08:	e7eb      	b.n	8017ce2 <__ssvfiscanf_r+0x2a>
 8017d0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017d0c:	3201      	adds	r2, #1
 8017d0e:	9245      	str	r2, [sp, #276]	; 0x114
 8017d10:	6862      	ldr	r2, [r4, #4]
 8017d12:	3301      	adds	r3, #1
 8017d14:	3a01      	subs	r2, #1
 8017d16:	6062      	str	r2, [r4, #4]
 8017d18:	6023      	str	r3, [r4, #0]
 8017d1a:	e7ec      	b.n	8017cf6 <__ssvfiscanf_r+0x3e>
 8017d1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017d1e:	4621      	mov	r1, r4
 8017d20:	4630      	mov	r0, r6
 8017d22:	4798      	blx	r3
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d0e9      	beq.n	8017cfc <__ssvfiscanf_r+0x44>
 8017d28:	e7ed      	b.n	8017d06 <__ssvfiscanf_r+0x4e>
 8017d2a:	2b25      	cmp	r3, #37	; 0x25
 8017d2c:	d012      	beq.n	8017d54 <__ssvfiscanf_r+0x9c>
 8017d2e:	469a      	mov	sl, r3
 8017d30:	6863      	ldr	r3, [r4, #4]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	f340 8091 	ble.w	8017e5a <__ssvfiscanf_r+0x1a2>
 8017d38:	6822      	ldr	r2, [r4, #0]
 8017d3a:	7813      	ldrb	r3, [r2, #0]
 8017d3c:	4553      	cmp	r3, sl
 8017d3e:	f040 812e 	bne.w	8017f9e <__ssvfiscanf_r+0x2e6>
 8017d42:	6863      	ldr	r3, [r4, #4]
 8017d44:	3b01      	subs	r3, #1
 8017d46:	6063      	str	r3, [r4, #4]
 8017d48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017d4a:	3201      	adds	r2, #1
 8017d4c:	3301      	adds	r3, #1
 8017d4e:	6022      	str	r2, [r4, #0]
 8017d50:	9345      	str	r3, [sp, #276]	; 0x114
 8017d52:	e7d8      	b.n	8017d06 <__ssvfiscanf_r+0x4e>
 8017d54:	9141      	str	r1, [sp, #260]	; 0x104
 8017d56:	9143      	str	r1, [sp, #268]	; 0x10c
 8017d58:	7853      	ldrb	r3, [r2, #1]
 8017d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8017d5c:	bf02      	ittt	eq
 8017d5e:	2310      	moveq	r3, #16
 8017d60:	1c95      	addeq	r5, r2, #2
 8017d62:	9341      	streq	r3, [sp, #260]	; 0x104
 8017d64:	220a      	movs	r2, #10
 8017d66:	46aa      	mov	sl, r5
 8017d68:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017d6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017d70:	2b09      	cmp	r3, #9
 8017d72:	d91c      	bls.n	8017dae <__ssvfiscanf_r+0xf6>
 8017d74:	487e      	ldr	r0, [pc, #504]	; (8017f70 <__ssvfiscanf_r+0x2b8>)
 8017d76:	2203      	movs	r2, #3
 8017d78:	f7e8 fae2 	bl	8000340 <memchr>
 8017d7c:	b138      	cbz	r0, 8017d8e <__ssvfiscanf_r+0xd6>
 8017d7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017d80:	eba0 0009 	sub.w	r0, r0, r9
 8017d84:	2301      	movs	r3, #1
 8017d86:	4083      	lsls	r3, r0
 8017d88:	4313      	orrs	r3, r2
 8017d8a:	9341      	str	r3, [sp, #260]	; 0x104
 8017d8c:	4655      	mov	r5, sl
 8017d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017d92:	2b78      	cmp	r3, #120	; 0x78
 8017d94:	d806      	bhi.n	8017da4 <__ssvfiscanf_r+0xec>
 8017d96:	2b57      	cmp	r3, #87	; 0x57
 8017d98:	d810      	bhi.n	8017dbc <__ssvfiscanf_r+0x104>
 8017d9a:	2b25      	cmp	r3, #37	; 0x25
 8017d9c:	d0c7      	beq.n	8017d2e <__ssvfiscanf_r+0x76>
 8017d9e:	d857      	bhi.n	8017e50 <__ssvfiscanf_r+0x198>
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d065      	beq.n	8017e70 <__ssvfiscanf_r+0x1b8>
 8017da4:	2303      	movs	r3, #3
 8017da6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017da8:	230a      	movs	r3, #10
 8017daa:	9342      	str	r3, [sp, #264]	; 0x108
 8017dac:	e076      	b.n	8017e9c <__ssvfiscanf_r+0x1e4>
 8017dae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017db0:	fb02 1103 	mla	r1, r2, r3, r1
 8017db4:	3930      	subs	r1, #48	; 0x30
 8017db6:	9143      	str	r1, [sp, #268]	; 0x10c
 8017db8:	4655      	mov	r5, sl
 8017dba:	e7d4      	b.n	8017d66 <__ssvfiscanf_r+0xae>
 8017dbc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017dc0:	2a20      	cmp	r2, #32
 8017dc2:	d8ef      	bhi.n	8017da4 <__ssvfiscanf_r+0xec>
 8017dc4:	a101      	add	r1, pc, #4	; (adr r1, 8017dcc <__ssvfiscanf_r+0x114>)
 8017dc6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017dca:	bf00      	nop
 8017dcc:	08017e7f 	.word	0x08017e7f
 8017dd0:	08017da5 	.word	0x08017da5
 8017dd4:	08017da5 	.word	0x08017da5
 8017dd8:	08017edd 	.word	0x08017edd
 8017ddc:	08017da5 	.word	0x08017da5
 8017de0:	08017da5 	.word	0x08017da5
 8017de4:	08017da5 	.word	0x08017da5
 8017de8:	08017da5 	.word	0x08017da5
 8017dec:	08017da5 	.word	0x08017da5
 8017df0:	08017da5 	.word	0x08017da5
 8017df4:	08017da5 	.word	0x08017da5
 8017df8:	08017ef3 	.word	0x08017ef3
 8017dfc:	08017ed9 	.word	0x08017ed9
 8017e00:	08017e57 	.word	0x08017e57
 8017e04:	08017e57 	.word	0x08017e57
 8017e08:	08017e57 	.word	0x08017e57
 8017e0c:	08017da5 	.word	0x08017da5
 8017e10:	08017e95 	.word	0x08017e95
 8017e14:	08017da5 	.word	0x08017da5
 8017e18:	08017da5 	.word	0x08017da5
 8017e1c:	08017da5 	.word	0x08017da5
 8017e20:	08017da5 	.word	0x08017da5
 8017e24:	08017f03 	.word	0x08017f03
 8017e28:	08017ed1 	.word	0x08017ed1
 8017e2c:	08017e77 	.word	0x08017e77
 8017e30:	08017da5 	.word	0x08017da5
 8017e34:	08017da5 	.word	0x08017da5
 8017e38:	08017eff 	.word	0x08017eff
 8017e3c:	08017da5 	.word	0x08017da5
 8017e40:	08017ed9 	.word	0x08017ed9
 8017e44:	08017da5 	.word	0x08017da5
 8017e48:	08017da5 	.word	0x08017da5
 8017e4c:	08017e7f 	.word	0x08017e7f
 8017e50:	3b45      	subs	r3, #69	; 0x45
 8017e52:	2b02      	cmp	r3, #2
 8017e54:	d8a6      	bhi.n	8017da4 <__ssvfiscanf_r+0xec>
 8017e56:	2305      	movs	r3, #5
 8017e58:	e01f      	b.n	8017e9a <__ssvfiscanf_r+0x1e2>
 8017e5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017e5c:	4621      	mov	r1, r4
 8017e5e:	4630      	mov	r0, r6
 8017e60:	4798      	blx	r3
 8017e62:	2800      	cmp	r0, #0
 8017e64:	f43f af68 	beq.w	8017d38 <__ssvfiscanf_r+0x80>
 8017e68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	f040 808d 	bne.w	8017f8a <__ssvfiscanf_r+0x2d2>
 8017e70:	f04f 30ff 	mov.w	r0, #4294967295
 8017e74:	e08f      	b.n	8017f96 <__ssvfiscanf_r+0x2de>
 8017e76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017e78:	f042 0220 	orr.w	r2, r2, #32
 8017e7c:	9241      	str	r2, [sp, #260]	; 0x104
 8017e7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e84:	9241      	str	r2, [sp, #260]	; 0x104
 8017e86:	2210      	movs	r2, #16
 8017e88:	2b6f      	cmp	r3, #111	; 0x6f
 8017e8a:	9242      	str	r2, [sp, #264]	; 0x108
 8017e8c:	bf34      	ite	cc
 8017e8e:	2303      	movcc	r3, #3
 8017e90:	2304      	movcs	r3, #4
 8017e92:	e002      	b.n	8017e9a <__ssvfiscanf_r+0x1e2>
 8017e94:	2300      	movs	r3, #0
 8017e96:	9342      	str	r3, [sp, #264]	; 0x108
 8017e98:	2303      	movs	r3, #3
 8017e9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8017e9c:	6863      	ldr	r3, [r4, #4]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	dd3d      	ble.n	8017f1e <__ssvfiscanf_r+0x266>
 8017ea2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017ea4:	0659      	lsls	r1, r3, #25
 8017ea6:	d404      	bmi.n	8017eb2 <__ssvfiscanf_r+0x1fa>
 8017ea8:	6823      	ldr	r3, [r4, #0]
 8017eaa:	781a      	ldrb	r2, [r3, #0]
 8017eac:	5cba      	ldrb	r2, [r7, r2]
 8017eae:	0712      	lsls	r2, r2, #28
 8017eb0:	d43c      	bmi.n	8017f2c <__ssvfiscanf_r+0x274>
 8017eb2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017eb4:	2b02      	cmp	r3, #2
 8017eb6:	dc4b      	bgt.n	8017f50 <__ssvfiscanf_r+0x298>
 8017eb8:	466b      	mov	r3, sp
 8017eba:	4622      	mov	r2, r4
 8017ebc:	a941      	add	r1, sp, #260	; 0x104
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f000 fa02 	bl	80182c8 <_scanf_chars>
 8017ec4:	2801      	cmp	r0, #1
 8017ec6:	d06a      	beq.n	8017f9e <__ssvfiscanf_r+0x2e6>
 8017ec8:	2802      	cmp	r0, #2
 8017eca:	f47f af1c 	bne.w	8017d06 <__ssvfiscanf_r+0x4e>
 8017ece:	e7cb      	b.n	8017e68 <__ssvfiscanf_r+0x1b0>
 8017ed0:	2308      	movs	r3, #8
 8017ed2:	9342      	str	r3, [sp, #264]	; 0x108
 8017ed4:	2304      	movs	r3, #4
 8017ed6:	e7e0      	b.n	8017e9a <__ssvfiscanf_r+0x1e2>
 8017ed8:	220a      	movs	r2, #10
 8017eda:	e7d5      	b.n	8017e88 <__ssvfiscanf_r+0x1d0>
 8017edc:	4629      	mov	r1, r5
 8017ede:	4640      	mov	r0, r8
 8017ee0:	f000 fb40 	bl	8018564 <__sccl>
 8017ee4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017eea:	9341      	str	r3, [sp, #260]	; 0x104
 8017eec:	4605      	mov	r5, r0
 8017eee:	2301      	movs	r3, #1
 8017ef0:	e7d3      	b.n	8017e9a <__ssvfiscanf_r+0x1e2>
 8017ef2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ef8:	9341      	str	r3, [sp, #260]	; 0x104
 8017efa:	2300      	movs	r3, #0
 8017efc:	e7cd      	b.n	8017e9a <__ssvfiscanf_r+0x1e2>
 8017efe:	2302      	movs	r3, #2
 8017f00:	e7cb      	b.n	8017e9a <__ssvfiscanf_r+0x1e2>
 8017f02:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017f04:	06c3      	lsls	r3, r0, #27
 8017f06:	f53f aefe 	bmi.w	8017d06 <__ssvfiscanf_r+0x4e>
 8017f0a:	9b00      	ldr	r3, [sp, #0]
 8017f0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017f0e:	1d19      	adds	r1, r3, #4
 8017f10:	9100      	str	r1, [sp, #0]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	07c0      	lsls	r0, r0, #31
 8017f16:	bf4c      	ite	mi
 8017f18:	801a      	strhmi	r2, [r3, #0]
 8017f1a:	601a      	strpl	r2, [r3, #0]
 8017f1c:	e6f3      	b.n	8017d06 <__ssvfiscanf_r+0x4e>
 8017f1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f20:	4621      	mov	r1, r4
 8017f22:	4630      	mov	r0, r6
 8017f24:	4798      	blx	r3
 8017f26:	2800      	cmp	r0, #0
 8017f28:	d0bb      	beq.n	8017ea2 <__ssvfiscanf_r+0x1ea>
 8017f2a:	e79d      	b.n	8017e68 <__ssvfiscanf_r+0x1b0>
 8017f2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017f2e:	3201      	adds	r2, #1
 8017f30:	9245      	str	r2, [sp, #276]	; 0x114
 8017f32:	6862      	ldr	r2, [r4, #4]
 8017f34:	3a01      	subs	r2, #1
 8017f36:	2a00      	cmp	r2, #0
 8017f38:	6062      	str	r2, [r4, #4]
 8017f3a:	dd02      	ble.n	8017f42 <__ssvfiscanf_r+0x28a>
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	6023      	str	r3, [r4, #0]
 8017f40:	e7b2      	b.n	8017ea8 <__ssvfiscanf_r+0x1f0>
 8017f42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f44:	4621      	mov	r1, r4
 8017f46:	4630      	mov	r0, r6
 8017f48:	4798      	blx	r3
 8017f4a:	2800      	cmp	r0, #0
 8017f4c:	d0ac      	beq.n	8017ea8 <__ssvfiscanf_r+0x1f0>
 8017f4e:	e78b      	b.n	8017e68 <__ssvfiscanf_r+0x1b0>
 8017f50:	2b04      	cmp	r3, #4
 8017f52:	dc0f      	bgt.n	8017f74 <__ssvfiscanf_r+0x2bc>
 8017f54:	466b      	mov	r3, sp
 8017f56:	4622      	mov	r2, r4
 8017f58:	a941      	add	r1, sp, #260	; 0x104
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	f000 fa0e 	bl	801837c <_scanf_i>
 8017f60:	e7b0      	b.n	8017ec4 <__ssvfiscanf_r+0x20c>
 8017f62:	bf00      	nop
 8017f64:	08017c05 	.word	0x08017c05
 8017f68:	08017c7f 	.word	0x08017c7f
 8017f6c:	08018bff 	.word	0x08018bff
 8017f70:	08018bb6 	.word	0x08018bb6
 8017f74:	4b0b      	ldr	r3, [pc, #44]	; (8017fa4 <__ssvfiscanf_r+0x2ec>)
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	f43f aec5 	beq.w	8017d06 <__ssvfiscanf_r+0x4e>
 8017f7c:	466b      	mov	r3, sp
 8017f7e:	4622      	mov	r2, r4
 8017f80:	a941      	add	r1, sp, #260	; 0x104
 8017f82:	4630      	mov	r0, r6
 8017f84:	f3af 8000 	nop.w
 8017f88:	e79c      	b.n	8017ec4 <__ssvfiscanf_r+0x20c>
 8017f8a:	89a3      	ldrh	r3, [r4, #12]
 8017f8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017f90:	bf18      	it	ne
 8017f92:	f04f 30ff 	movne.w	r0, #4294967295
 8017f96:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f9e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017fa0:	e7f9      	b.n	8017f96 <__ssvfiscanf_r+0x2de>
 8017fa2:	bf00      	nop
 8017fa4:	00000000 	.word	0x00000000

08017fa8 <_printf_common>:
 8017fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fac:	4616      	mov	r6, r2
 8017fae:	4699      	mov	r9, r3
 8017fb0:	688a      	ldr	r2, [r1, #8]
 8017fb2:	690b      	ldr	r3, [r1, #16]
 8017fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017fb8:	4293      	cmp	r3, r2
 8017fba:	bfb8      	it	lt
 8017fbc:	4613      	movlt	r3, r2
 8017fbe:	6033      	str	r3, [r6, #0]
 8017fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017fc4:	4607      	mov	r7, r0
 8017fc6:	460c      	mov	r4, r1
 8017fc8:	b10a      	cbz	r2, 8017fce <_printf_common+0x26>
 8017fca:	3301      	adds	r3, #1
 8017fcc:	6033      	str	r3, [r6, #0]
 8017fce:	6823      	ldr	r3, [r4, #0]
 8017fd0:	0699      	lsls	r1, r3, #26
 8017fd2:	bf42      	ittt	mi
 8017fd4:	6833      	ldrmi	r3, [r6, #0]
 8017fd6:	3302      	addmi	r3, #2
 8017fd8:	6033      	strmi	r3, [r6, #0]
 8017fda:	6825      	ldr	r5, [r4, #0]
 8017fdc:	f015 0506 	ands.w	r5, r5, #6
 8017fe0:	d106      	bne.n	8017ff0 <_printf_common+0x48>
 8017fe2:	f104 0a19 	add.w	sl, r4, #25
 8017fe6:	68e3      	ldr	r3, [r4, #12]
 8017fe8:	6832      	ldr	r2, [r6, #0]
 8017fea:	1a9b      	subs	r3, r3, r2
 8017fec:	42ab      	cmp	r3, r5
 8017fee:	dc26      	bgt.n	801803e <_printf_common+0x96>
 8017ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ff4:	1e13      	subs	r3, r2, #0
 8017ff6:	6822      	ldr	r2, [r4, #0]
 8017ff8:	bf18      	it	ne
 8017ffa:	2301      	movne	r3, #1
 8017ffc:	0692      	lsls	r2, r2, #26
 8017ffe:	d42b      	bmi.n	8018058 <_printf_common+0xb0>
 8018000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018004:	4649      	mov	r1, r9
 8018006:	4638      	mov	r0, r7
 8018008:	47c0      	blx	r8
 801800a:	3001      	adds	r0, #1
 801800c:	d01e      	beq.n	801804c <_printf_common+0xa4>
 801800e:	6823      	ldr	r3, [r4, #0]
 8018010:	6922      	ldr	r2, [r4, #16]
 8018012:	f003 0306 	and.w	r3, r3, #6
 8018016:	2b04      	cmp	r3, #4
 8018018:	bf02      	ittt	eq
 801801a:	68e5      	ldreq	r5, [r4, #12]
 801801c:	6833      	ldreq	r3, [r6, #0]
 801801e:	1aed      	subeq	r5, r5, r3
 8018020:	68a3      	ldr	r3, [r4, #8]
 8018022:	bf0c      	ite	eq
 8018024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018028:	2500      	movne	r5, #0
 801802a:	4293      	cmp	r3, r2
 801802c:	bfc4      	itt	gt
 801802e:	1a9b      	subgt	r3, r3, r2
 8018030:	18ed      	addgt	r5, r5, r3
 8018032:	2600      	movs	r6, #0
 8018034:	341a      	adds	r4, #26
 8018036:	42b5      	cmp	r5, r6
 8018038:	d11a      	bne.n	8018070 <_printf_common+0xc8>
 801803a:	2000      	movs	r0, #0
 801803c:	e008      	b.n	8018050 <_printf_common+0xa8>
 801803e:	2301      	movs	r3, #1
 8018040:	4652      	mov	r2, sl
 8018042:	4649      	mov	r1, r9
 8018044:	4638      	mov	r0, r7
 8018046:	47c0      	blx	r8
 8018048:	3001      	adds	r0, #1
 801804a:	d103      	bne.n	8018054 <_printf_common+0xac>
 801804c:	f04f 30ff 	mov.w	r0, #4294967295
 8018050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018054:	3501      	adds	r5, #1
 8018056:	e7c6      	b.n	8017fe6 <_printf_common+0x3e>
 8018058:	18e1      	adds	r1, r4, r3
 801805a:	1c5a      	adds	r2, r3, #1
 801805c:	2030      	movs	r0, #48	; 0x30
 801805e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018062:	4422      	add	r2, r4
 8018064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801806c:	3302      	adds	r3, #2
 801806e:	e7c7      	b.n	8018000 <_printf_common+0x58>
 8018070:	2301      	movs	r3, #1
 8018072:	4622      	mov	r2, r4
 8018074:	4649      	mov	r1, r9
 8018076:	4638      	mov	r0, r7
 8018078:	47c0      	blx	r8
 801807a:	3001      	adds	r0, #1
 801807c:	d0e6      	beq.n	801804c <_printf_common+0xa4>
 801807e:	3601      	adds	r6, #1
 8018080:	e7d9      	b.n	8018036 <_printf_common+0x8e>
	...

08018084 <_printf_i>:
 8018084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018088:	7e0f      	ldrb	r7, [r1, #24]
 801808a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801808c:	2f78      	cmp	r7, #120	; 0x78
 801808e:	4691      	mov	r9, r2
 8018090:	4680      	mov	r8, r0
 8018092:	460c      	mov	r4, r1
 8018094:	469a      	mov	sl, r3
 8018096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801809a:	d807      	bhi.n	80180ac <_printf_i+0x28>
 801809c:	2f62      	cmp	r7, #98	; 0x62
 801809e:	d80a      	bhi.n	80180b6 <_printf_i+0x32>
 80180a0:	2f00      	cmp	r7, #0
 80180a2:	f000 80d4 	beq.w	801824e <_printf_i+0x1ca>
 80180a6:	2f58      	cmp	r7, #88	; 0x58
 80180a8:	f000 80c0 	beq.w	801822c <_printf_i+0x1a8>
 80180ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80180b4:	e03a      	b.n	801812c <_printf_i+0xa8>
 80180b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80180ba:	2b15      	cmp	r3, #21
 80180bc:	d8f6      	bhi.n	80180ac <_printf_i+0x28>
 80180be:	a101      	add	r1, pc, #4	; (adr r1, 80180c4 <_printf_i+0x40>)
 80180c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180c4:	0801811d 	.word	0x0801811d
 80180c8:	08018131 	.word	0x08018131
 80180cc:	080180ad 	.word	0x080180ad
 80180d0:	080180ad 	.word	0x080180ad
 80180d4:	080180ad 	.word	0x080180ad
 80180d8:	080180ad 	.word	0x080180ad
 80180dc:	08018131 	.word	0x08018131
 80180e0:	080180ad 	.word	0x080180ad
 80180e4:	080180ad 	.word	0x080180ad
 80180e8:	080180ad 	.word	0x080180ad
 80180ec:	080180ad 	.word	0x080180ad
 80180f0:	08018235 	.word	0x08018235
 80180f4:	0801815d 	.word	0x0801815d
 80180f8:	080181ef 	.word	0x080181ef
 80180fc:	080180ad 	.word	0x080180ad
 8018100:	080180ad 	.word	0x080180ad
 8018104:	08018257 	.word	0x08018257
 8018108:	080180ad 	.word	0x080180ad
 801810c:	0801815d 	.word	0x0801815d
 8018110:	080180ad 	.word	0x080180ad
 8018114:	080180ad 	.word	0x080180ad
 8018118:	080181f7 	.word	0x080181f7
 801811c:	682b      	ldr	r3, [r5, #0]
 801811e:	1d1a      	adds	r2, r3, #4
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	602a      	str	r2, [r5, #0]
 8018124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801812c:	2301      	movs	r3, #1
 801812e:	e09f      	b.n	8018270 <_printf_i+0x1ec>
 8018130:	6820      	ldr	r0, [r4, #0]
 8018132:	682b      	ldr	r3, [r5, #0]
 8018134:	0607      	lsls	r7, r0, #24
 8018136:	f103 0104 	add.w	r1, r3, #4
 801813a:	6029      	str	r1, [r5, #0]
 801813c:	d501      	bpl.n	8018142 <_printf_i+0xbe>
 801813e:	681e      	ldr	r6, [r3, #0]
 8018140:	e003      	b.n	801814a <_printf_i+0xc6>
 8018142:	0646      	lsls	r6, r0, #25
 8018144:	d5fb      	bpl.n	801813e <_printf_i+0xba>
 8018146:	f9b3 6000 	ldrsh.w	r6, [r3]
 801814a:	2e00      	cmp	r6, #0
 801814c:	da03      	bge.n	8018156 <_printf_i+0xd2>
 801814e:	232d      	movs	r3, #45	; 0x2d
 8018150:	4276      	negs	r6, r6
 8018152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018156:	485a      	ldr	r0, [pc, #360]	; (80182c0 <_printf_i+0x23c>)
 8018158:	230a      	movs	r3, #10
 801815a:	e012      	b.n	8018182 <_printf_i+0xfe>
 801815c:	682b      	ldr	r3, [r5, #0]
 801815e:	6820      	ldr	r0, [r4, #0]
 8018160:	1d19      	adds	r1, r3, #4
 8018162:	6029      	str	r1, [r5, #0]
 8018164:	0605      	lsls	r5, r0, #24
 8018166:	d501      	bpl.n	801816c <_printf_i+0xe8>
 8018168:	681e      	ldr	r6, [r3, #0]
 801816a:	e002      	b.n	8018172 <_printf_i+0xee>
 801816c:	0641      	lsls	r1, r0, #25
 801816e:	d5fb      	bpl.n	8018168 <_printf_i+0xe4>
 8018170:	881e      	ldrh	r6, [r3, #0]
 8018172:	4853      	ldr	r0, [pc, #332]	; (80182c0 <_printf_i+0x23c>)
 8018174:	2f6f      	cmp	r7, #111	; 0x6f
 8018176:	bf0c      	ite	eq
 8018178:	2308      	moveq	r3, #8
 801817a:	230a      	movne	r3, #10
 801817c:	2100      	movs	r1, #0
 801817e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018182:	6865      	ldr	r5, [r4, #4]
 8018184:	60a5      	str	r5, [r4, #8]
 8018186:	2d00      	cmp	r5, #0
 8018188:	bfa2      	ittt	ge
 801818a:	6821      	ldrge	r1, [r4, #0]
 801818c:	f021 0104 	bicge.w	r1, r1, #4
 8018190:	6021      	strge	r1, [r4, #0]
 8018192:	b90e      	cbnz	r6, 8018198 <_printf_i+0x114>
 8018194:	2d00      	cmp	r5, #0
 8018196:	d04b      	beq.n	8018230 <_printf_i+0x1ac>
 8018198:	4615      	mov	r5, r2
 801819a:	fbb6 f1f3 	udiv	r1, r6, r3
 801819e:	fb03 6711 	mls	r7, r3, r1, r6
 80181a2:	5dc7      	ldrb	r7, [r0, r7]
 80181a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80181a8:	4637      	mov	r7, r6
 80181aa:	42bb      	cmp	r3, r7
 80181ac:	460e      	mov	r6, r1
 80181ae:	d9f4      	bls.n	801819a <_printf_i+0x116>
 80181b0:	2b08      	cmp	r3, #8
 80181b2:	d10b      	bne.n	80181cc <_printf_i+0x148>
 80181b4:	6823      	ldr	r3, [r4, #0]
 80181b6:	07de      	lsls	r6, r3, #31
 80181b8:	d508      	bpl.n	80181cc <_printf_i+0x148>
 80181ba:	6923      	ldr	r3, [r4, #16]
 80181bc:	6861      	ldr	r1, [r4, #4]
 80181be:	4299      	cmp	r1, r3
 80181c0:	bfde      	ittt	le
 80181c2:	2330      	movle	r3, #48	; 0x30
 80181c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80181c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80181cc:	1b52      	subs	r2, r2, r5
 80181ce:	6122      	str	r2, [r4, #16]
 80181d0:	f8cd a000 	str.w	sl, [sp]
 80181d4:	464b      	mov	r3, r9
 80181d6:	aa03      	add	r2, sp, #12
 80181d8:	4621      	mov	r1, r4
 80181da:	4640      	mov	r0, r8
 80181dc:	f7ff fee4 	bl	8017fa8 <_printf_common>
 80181e0:	3001      	adds	r0, #1
 80181e2:	d14a      	bne.n	801827a <_printf_i+0x1f6>
 80181e4:	f04f 30ff 	mov.w	r0, #4294967295
 80181e8:	b004      	add	sp, #16
 80181ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	f043 0320 	orr.w	r3, r3, #32
 80181f4:	6023      	str	r3, [r4, #0]
 80181f6:	4833      	ldr	r0, [pc, #204]	; (80182c4 <_printf_i+0x240>)
 80181f8:	2778      	movs	r7, #120	; 0x78
 80181fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80181fe:	6823      	ldr	r3, [r4, #0]
 8018200:	6829      	ldr	r1, [r5, #0]
 8018202:	061f      	lsls	r7, r3, #24
 8018204:	f851 6b04 	ldr.w	r6, [r1], #4
 8018208:	d402      	bmi.n	8018210 <_printf_i+0x18c>
 801820a:	065f      	lsls	r7, r3, #25
 801820c:	bf48      	it	mi
 801820e:	b2b6      	uxthmi	r6, r6
 8018210:	07df      	lsls	r7, r3, #31
 8018212:	bf48      	it	mi
 8018214:	f043 0320 	orrmi.w	r3, r3, #32
 8018218:	6029      	str	r1, [r5, #0]
 801821a:	bf48      	it	mi
 801821c:	6023      	strmi	r3, [r4, #0]
 801821e:	b91e      	cbnz	r6, 8018228 <_printf_i+0x1a4>
 8018220:	6823      	ldr	r3, [r4, #0]
 8018222:	f023 0320 	bic.w	r3, r3, #32
 8018226:	6023      	str	r3, [r4, #0]
 8018228:	2310      	movs	r3, #16
 801822a:	e7a7      	b.n	801817c <_printf_i+0xf8>
 801822c:	4824      	ldr	r0, [pc, #144]	; (80182c0 <_printf_i+0x23c>)
 801822e:	e7e4      	b.n	80181fa <_printf_i+0x176>
 8018230:	4615      	mov	r5, r2
 8018232:	e7bd      	b.n	80181b0 <_printf_i+0x12c>
 8018234:	682b      	ldr	r3, [r5, #0]
 8018236:	6826      	ldr	r6, [r4, #0]
 8018238:	6961      	ldr	r1, [r4, #20]
 801823a:	1d18      	adds	r0, r3, #4
 801823c:	6028      	str	r0, [r5, #0]
 801823e:	0635      	lsls	r5, r6, #24
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	d501      	bpl.n	8018248 <_printf_i+0x1c4>
 8018244:	6019      	str	r1, [r3, #0]
 8018246:	e002      	b.n	801824e <_printf_i+0x1ca>
 8018248:	0670      	lsls	r0, r6, #25
 801824a:	d5fb      	bpl.n	8018244 <_printf_i+0x1c0>
 801824c:	8019      	strh	r1, [r3, #0]
 801824e:	2300      	movs	r3, #0
 8018250:	6123      	str	r3, [r4, #16]
 8018252:	4615      	mov	r5, r2
 8018254:	e7bc      	b.n	80181d0 <_printf_i+0x14c>
 8018256:	682b      	ldr	r3, [r5, #0]
 8018258:	1d1a      	adds	r2, r3, #4
 801825a:	602a      	str	r2, [r5, #0]
 801825c:	681d      	ldr	r5, [r3, #0]
 801825e:	6862      	ldr	r2, [r4, #4]
 8018260:	2100      	movs	r1, #0
 8018262:	4628      	mov	r0, r5
 8018264:	f7e8 f86c 	bl	8000340 <memchr>
 8018268:	b108      	cbz	r0, 801826e <_printf_i+0x1ea>
 801826a:	1b40      	subs	r0, r0, r5
 801826c:	6060      	str	r0, [r4, #4]
 801826e:	6863      	ldr	r3, [r4, #4]
 8018270:	6123      	str	r3, [r4, #16]
 8018272:	2300      	movs	r3, #0
 8018274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018278:	e7aa      	b.n	80181d0 <_printf_i+0x14c>
 801827a:	6923      	ldr	r3, [r4, #16]
 801827c:	462a      	mov	r2, r5
 801827e:	4649      	mov	r1, r9
 8018280:	4640      	mov	r0, r8
 8018282:	47d0      	blx	sl
 8018284:	3001      	adds	r0, #1
 8018286:	d0ad      	beq.n	80181e4 <_printf_i+0x160>
 8018288:	6823      	ldr	r3, [r4, #0]
 801828a:	079b      	lsls	r3, r3, #30
 801828c:	d413      	bmi.n	80182b6 <_printf_i+0x232>
 801828e:	68e0      	ldr	r0, [r4, #12]
 8018290:	9b03      	ldr	r3, [sp, #12]
 8018292:	4298      	cmp	r0, r3
 8018294:	bfb8      	it	lt
 8018296:	4618      	movlt	r0, r3
 8018298:	e7a6      	b.n	80181e8 <_printf_i+0x164>
 801829a:	2301      	movs	r3, #1
 801829c:	4632      	mov	r2, r6
 801829e:	4649      	mov	r1, r9
 80182a0:	4640      	mov	r0, r8
 80182a2:	47d0      	blx	sl
 80182a4:	3001      	adds	r0, #1
 80182a6:	d09d      	beq.n	80181e4 <_printf_i+0x160>
 80182a8:	3501      	adds	r5, #1
 80182aa:	68e3      	ldr	r3, [r4, #12]
 80182ac:	9903      	ldr	r1, [sp, #12]
 80182ae:	1a5b      	subs	r3, r3, r1
 80182b0:	42ab      	cmp	r3, r5
 80182b2:	dcf2      	bgt.n	801829a <_printf_i+0x216>
 80182b4:	e7eb      	b.n	801828e <_printf_i+0x20a>
 80182b6:	2500      	movs	r5, #0
 80182b8:	f104 0619 	add.w	r6, r4, #25
 80182bc:	e7f5      	b.n	80182aa <_printf_i+0x226>
 80182be:	bf00      	nop
 80182c0:	08018bc1 	.word	0x08018bc1
 80182c4:	08018bd2 	.word	0x08018bd2

080182c8 <_scanf_chars>:
 80182c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182cc:	4615      	mov	r5, r2
 80182ce:	688a      	ldr	r2, [r1, #8]
 80182d0:	4680      	mov	r8, r0
 80182d2:	460c      	mov	r4, r1
 80182d4:	b932      	cbnz	r2, 80182e4 <_scanf_chars+0x1c>
 80182d6:	698a      	ldr	r2, [r1, #24]
 80182d8:	2a00      	cmp	r2, #0
 80182da:	bf0c      	ite	eq
 80182dc:	2201      	moveq	r2, #1
 80182de:	f04f 32ff 	movne.w	r2, #4294967295
 80182e2:	608a      	str	r2, [r1, #8]
 80182e4:	6822      	ldr	r2, [r4, #0]
 80182e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018378 <_scanf_chars+0xb0>
 80182ea:	06d1      	lsls	r1, r2, #27
 80182ec:	bf5f      	itttt	pl
 80182ee:	681a      	ldrpl	r2, [r3, #0]
 80182f0:	1d11      	addpl	r1, r2, #4
 80182f2:	6019      	strpl	r1, [r3, #0]
 80182f4:	6816      	ldrpl	r6, [r2, #0]
 80182f6:	2700      	movs	r7, #0
 80182f8:	69a0      	ldr	r0, [r4, #24]
 80182fa:	b188      	cbz	r0, 8018320 <_scanf_chars+0x58>
 80182fc:	2801      	cmp	r0, #1
 80182fe:	d107      	bne.n	8018310 <_scanf_chars+0x48>
 8018300:	682a      	ldr	r2, [r5, #0]
 8018302:	7811      	ldrb	r1, [r2, #0]
 8018304:	6962      	ldr	r2, [r4, #20]
 8018306:	5c52      	ldrb	r2, [r2, r1]
 8018308:	b952      	cbnz	r2, 8018320 <_scanf_chars+0x58>
 801830a:	2f00      	cmp	r7, #0
 801830c:	d031      	beq.n	8018372 <_scanf_chars+0xaa>
 801830e:	e022      	b.n	8018356 <_scanf_chars+0x8e>
 8018310:	2802      	cmp	r0, #2
 8018312:	d120      	bne.n	8018356 <_scanf_chars+0x8e>
 8018314:	682b      	ldr	r3, [r5, #0]
 8018316:	781b      	ldrb	r3, [r3, #0]
 8018318:	f819 3003 	ldrb.w	r3, [r9, r3]
 801831c:	071b      	lsls	r3, r3, #28
 801831e:	d41a      	bmi.n	8018356 <_scanf_chars+0x8e>
 8018320:	6823      	ldr	r3, [r4, #0]
 8018322:	06da      	lsls	r2, r3, #27
 8018324:	bf5e      	ittt	pl
 8018326:	682b      	ldrpl	r3, [r5, #0]
 8018328:	781b      	ldrbpl	r3, [r3, #0]
 801832a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801832e:	682a      	ldr	r2, [r5, #0]
 8018330:	686b      	ldr	r3, [r5, #4]
 8018332:	3201      	adds	r2, #1
 8018334:	602a      	str	r2, [r5, #0]
 8018336:	68a2      	ldr	r2, [r4, #8]
 8018338:	3b01      	subs	r3, #1
 801833a:	3a01      	subs	r2, #1
 801833c:	606b      	str	r3, [r5, #4]
 801833e:	3701      	adds	r7, #1
 8018340:	60a2      	str	r2, [r4, #8]
 8018342:	b142      	cbz	r2, 8018356 <_scanf_chars+0x8e>
 8018344:	2b00      	cmp	r3, #0
 8018346:	dcd7      	bgt.n	80182f8 <_scanf_chars+0x30>
 8018348:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801834c:	4629      	mov	r1, r5
 801834e:	4640      	mov	r0, r8
 8018350:	4798      	blx	r3
 8018352:	2800      	cmp	r0, #0
 8018354:	d0d0      	beq.n	80182f8 <_scanf_chars+0x30>
 8018356:	6823      	ldr	r3, [r4, #0]
 8018358:	f013 0310 	ands.w	r3, r3, #16
 801835c:	d105      	bne.n	801836a <_scanf_chars+0xa2>
 801835e:	68e2      	ldr	r2, [r4, #12]
 8018360:	3201      	adds	r2, #1
 8018362:	60e2      	str	r2, [r4, #12]
 8018364:	69a2      	ldr	r2, [r4, #24]
 8018366:	b102      	cbz	r2, 801836a <_scanf_chars+0xa2>
 8018368:	7033      	strb	r3, [r6, #0]
 801836a:	6923      	ldr	r3, [r4, #16]
 801836c:	443b      	add	r3, r7
 801836e:	6123      	str	r3, [r4, #16]
 8018370:	2000      	movs	r0, #0
 8018372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018376:	bf00      	nop
 8018378:	08018bff 	.word	0x08018bff

0801837c <_scanf_i>:
 801837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018380:	4698      	mov	r8, r3
 8018382:	4b74      	ldr	r3, [pc, #464]	; (8018554 <_scanf_i+0x1d8>)
 8018384:	460c      	mov	r4, r1
 8018386:	4682      	mov	sl, r0
 8018388:	4616      	mov	r6, r2
 801838a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801838e:	b087      	sub	sp, #28
 8018390:	ab03      	add	r3, sp, #12
 8018392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018396:	4b70      	ldr	r3, [pc, #448]	; (8018558 <_scanf_i+0x1dc>)
 8018398:	69a1      	ldr	r1, [r4, #24]
 801839a:	4a70      	ldr	r2, [pc, #448]	; (801855c <_scanf_i+0x1e0>)
 801839c:	2903      	cmp	r1, #3
 801839e:	bf18      	it	ne
 80183a0:	461a      	movne	r2, r3
 80183a2:	68a3      	ldr	r3, [r4, #8]
 80183a4:	9201      	str	r2, [sp, #4]
 80183a6:	1e5a      	subs	r2, r3, #1
 80183a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80183ac:	bf88      	it	hi
 80183ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80183b2:	4627      	mov	r7, r4
 80183b4:	bf82      	ittt	hi
 80183b6:	eb03 0905 	addhi.w	r9, r3, r5
 80183ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80183be:	60a3      	strhi	r3, [r4, #8]
 80183c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80183c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80183c8:	bf98      	it	ls
 80183ca:	f04f 0900 	movls.w	r9, #0
 80183ce:	6023      	str	r3, [r4, #0]
 80183d0:	463d      	mov	r5, r7
 80183d2:	f04f 0b00 	mov.w	fp, #0
 80183d6:	6831      	ldr	r1, [r6, #0]
 80183d8:	ab03      	add	r3, sp, #12
 80183da:	7809      	ldrb	r1, [r1, #0]
 80183dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80183e0:	2202      	movs	r2, #2
 80183e2:	f7e7 ffad 	bl	8000340 <memchr>
 80183e6:	b328      	cbz	r0, 8018434 <_scanf_i+0xb8>
 80183e8:	f1bb 0f01 	cmp.w	fp, #1
 80183ec:	d159      	bne.n	80184a2 <_scanf_i+0x126>
 80183ee:	6862      	ldr	r2, [r4, #4]
 80183f0:	b92a      	cbnz	r2, 80183fe <_scanf_i+0x82>
 80183f2:	6822      	ldr	r2, [r4, #0]
 80183f4:	2308      	movs	r3, #8
 80183f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80183fa:	6063      	str	r3, [r4, #4]
 80183fc:	6022      	str	r2, [r4, #0]
 80183fe:	6822      	ldr	r2, [r4, #0]
 8018400:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018404:	6022      	str	r2, [r4, #0]
 8018406:	68a2      	ldr	r2, [r4, #8]
 8018408:	1e51      	subs	r1, r2, #1
 801840a:	60a1      	str	r1, [r4, #8]
 801840c:	b192      	cbz	r2, 8018434 <_scanf_i+0xb8>
 801840e:	6832      	ldr	r2, [r6, #0]
 8018410:	1c51      	adds	r1, r2, #1
 8018412:	6031      	str	r1, [r6, #0]
 8018414:	7812      	ldrb	r2, [r2, #0]
 8018416:	f805 2b01 	strb.w	r2, [r5], #1
 801841a:	6872      	ldr	r2, [r6, #4]
 801841c:	3a01      	subs	r2, #1
 801841e:	2a00      	cmp	r2, #0
 8018420:	6072      	str	r2, [r6, #4]
 8018422:	dc07      	bgt.n	8018434 <_scanf_i+0xb8>
 8018424:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8018428:	4631      	mov	r1, r6
 801842a:	4650      	mov	r0, sl
 801842c:	4790      	blx	r2
 801842e:	2800      	cmp	r0, #0
 8018430:	f040 8085 	bne.w	801853e <_scanf_i+0x1c2>
 8018434:	f10b 0b01 	add.w	fp, fp, #1
 8018438:	f1bb 0f03 	cmp.w	fp, #3
 801843c:	d1cb      	bne.n	80183d6 <_scanf_i+0x5a>
 801843e:	6863      	ldr	r3, [r4, #4]
 8018440:	b90b      	cbnz	r3, 8018446 <_scanf_i+0xca>
 8018442:	230a      	movs	r3, #10
 8018444:	6063      	str	r3, [r4, #4]
 8018446:	6863      	ldr	r3, [r4, #4]
 8018448:	4945      	ldr	r1, [pc, #276]	; (8018560 <_scanf_i+0x1e4>)
 801844a:	6960      	ldr	r0, [r4, #20]
 801844c:	1ac9      	subs	r1, r1, r3
 801844e:	f000 f889 	bl	8018564 <__sccl>
 8018452:	f04f 0b00 	mov.w	fp, #0
 8018456:	68a3      	ldr	r3, [r4, #8]
 8018458:	6822      	ldr	r2, [r4, #0]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d03d      	beq.n	80184da <_scanf_i+0x15e>
 801845e:	6831      	ldr	r1, [r6, #0]
 8018460:	6960      	ldr	r0, [r4, #20]
 8018462:	f891 c000 	ldrb.w	ip, [r1]
 8018466:	f810 000c 	ldrb.w	r0, [r0, ip]
 801846a:	2800      	cmp	r0, #0
 801846c:	d035      	beq.n	80184da <_scanf_i+0x15e>
 801846e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018472:	d124      	bne.n	80184be <_scanf_i+0x142>
 8018474:	0510      	lsls	r0, r2, #20
 8018476:	d522      	bpl.n	80184be <_scanf_i+0x142>
 8018478:	f10b 0b01 	add.w	fp, fp, #1
 801847c:	f1b9 0f00 	cmp.w	r9, #0
 8018480:	d003      	beq.n	801848a <_scanf_i+0x10e>
 8018482:	3301      	adds	r3, #1
 8018484:	f109 39ff 	add.w	r9, r9, #4294967295
 8018488:	60a3      	str	r3, [r4, #8]
 801848a:	6873      	ldr	r3, [r6, #4]
 801848c:	3b01      	subs	r3, #1
 801848e:	2b00      	cmp	r3, #0
 8018490:	6073      	str	r3, [r6, #4]
 8018492:	dd1b      	ble.n	80184cc <_scanf_i+0x150>
 8018494:	6833      	ldr	r3, [r6, #0]
 8018496:	3301      	adds	r3, #1
 8018498:	6033      	str	r3, [r6, #0]
 801849a:	68a3      	ldr	r3, [r4, #8]
 801849c:	3b01      	subs	r3, #1
 801849e:	60a3      	str	r3, [r4, #8]
 80184a0:	e7d9      	b.n	8018456 <_scanf_i+0xda>
 80184a2:	f1bb 0f02 	cmp.w	fp, #2
 80184a6:	d1ae      	bne.n	8018406 <_scanf_i+0x8a>
 80184a8:	6822      	ldr	r2, [r4, #0]
 80184aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80184ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80184b2:	d1bf      	bne.n	8018434 <_scanf_i+0xb8>
 80184b4:	2310      	movs	r3, #16
 80184b6:	6063      	str	r3, [r4, #4]
 80184b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80184bc:	e7a2      	b.n	8018404 <_scanf_i+0x88>
 80184be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80184c2:	6022      	str	r2, [r4, #0]
 80184c4:	780b      	ldrb	r3, [r1, #0]
 80184c6:	f805 3b01 	strb.w	r3, [r5], #1
 80184ca:	e7de      	b.n	801848a <_scanf_i+0x10e>
 80184cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80184d0:	4631      	mov	r1, r6
 80184d2:	4650      	mov	r0, sl
 80184d4:	4798      	blx	r3
 80184d6:	2800      	cmp	r0, #0
 80184d8:	d0df      	beq.n	801849a <_scanf_i+0x11e>
 80184da:	6823      	ldr	r3, [r4, #0]
 80184dc:	05d9      	lsls	r1, r3, #23
 80184de:	d50d      	bpl.n	80184fc <_scanf_i+0x180>
 80184e0:	42bd      	cmp	r5, r7
 80184e2:	d909      	bls.n	80184f8 <_scanf_i+0x17c>
 80184e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80184e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80184ec:	4632      	mov	r2, r6
 80184ee:	4650      	mov	r0, sl
 80184f0:	4798      	blx	r3
 80184f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80184f6:	464d      	mov	r5, r9
 80184f8:	42bd      	cmp	r5, r7
 80184fa:	d028      	beq.n	801854e <_scanf_i+0x1d2>
 80184fc:	6822      	ldr	r2, [r4, #0]
 80184fe:	f012 0210 	ands.w	r2, r2, #16
 8018502:	d113      	bne.n	801852c <_scanf_i+0x1b0>
 8018504:	702a      	strb	r2, [r5, #0]
 8018506:	6863      	ldr	r3, [r4, #4]
 8018508:	9e01      	ldr	r6, [sp, #4]
 801850a:	4639      	mov	r1, r7
 801850c:	4650      	mov	r0, sl
 801850e:	47b0      	blx	r6
 8018510:	f8d8 3000 	ldr.w	r3, [r8]
 8018514:	6821      	ldr	r1, [r4, #0]
 8018516:	1d1a      	adds	r2, r3, #4
 8018518:	f8c8 2000 	str.w	r2, [r8]
 801851c:	f011 0f20 	tst.w	r1, #32
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	d00f      	beq.n	8018544 <_scanf_i+0x1c8>
 8018524:	6018      	str	r0, [r3, #0]
 8018526:	68e3      	ldr	r3, [r4, #12]
 8018528:	3301      	adds	r3, #1
 801852a:	60e3      	str	r3, [r4, #12]
 801852c:	6923      	ldr	r3, [r4, #16]
 801852e:	1bed      	subs	r5, r5, r7
 8018530:	445d      	add	r5, fp
 8018532:	442b      	add	r3, r5
 8018534:	6123      	str	r3, [r4, #16]
 8018536:	2000      	movs	r0, #0
 8018538:	b007      	add	sp, #28
 801853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801853e:	f04f 0b00 	mov.w	fp, #0
 8018542:	e7ca      	b.n	80184da <_scanf_i+0x15e>
 8018544:	07ca      	lsls	r2, r1, #31
 8018546:	bf4c      	ite	mi
 8018548:	8018      	strhmi	r0, [r3, #0]
 801854a:	6018      	strpl	r0, [r3, #0]
 801854c:	e7eb      	b.n	8018526 <_scanf_i+0x1aa>
 801854e:	2001      	movs	r0, #1
 8018550:	e7f2      	b.n	8018538 <_scanf_i+0x1bc>
 8018552:	bf00      	nop
 8018554:	08018ae0 	.word	0x08018ae0
 8018558:	080188ed 	.word	0x080188ed
 801855c:	08018805 	.word	0x08018805
 8018560:	08018bf3 	.word	0x08018bf3

08018564 <__sccl>:
 8018564:	b570      	push	{r4, r5, r6, lr}
 8018566:	780b      	ldrb	r3, [r1, #0]
 8018568:	4604      	mov	r4, r0
 801856a:	2b5e      	cmp	r3, #94	; 0x5e
 801856c:	bf0b      	itete	eq
 801856e:	784b      	ldrbeq	r3, [r1, #1]
 8018570:	1c4a      	addne	r2, r1, #1
 8018572:	1c8a      	addeq	r2, r1, #2
 8018574:	2100      	movne	r1, #0
 8018576:	bf08      	it	eq
 8018578:	2101      	moveq	r1, #1
 801857a:	3801      	subs	r0, #1
 801857c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018580:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018584:	42a8      	cmp	r0, r5
 8018586:	d1fb      	bne.n	8018580 <__sccl+0x1c>
 8018588:	b90b      	cbnz	r3, 801858e <__sccl+0x2a>
 801858a:	1e50      	subs	r0, r2, #1
 801858c:	bd70      	pop	{r4, r5, r6, pc}
 801858e:	f081 0101 	eor.w	r1, r1, #1
 8018592:	54e1      	strb	r1, [r4, r3]
 8018594:	4610      	mov	r0, r2
 8018596:	4602      	mov	r2, r0
 8018598:	f812 5b01 	ldrb.w	r5, [r2], #1
 801859c:	2d2d      	cmp	r5, #45	; 0x2d
 801859e:	d005      	beq.n	80185ac <__sccl+0x48>
 80185a0:	2d5d      	cmp	r5, #93	; 0x5d
 80185a2:	d016      	beq.n	80185d2 <__sccl+0x6e>
 80185a4:	2d00      	cmp	r5, #0
 80185a6:	d0f1      	beq.n	801858c <__sccl+0x28>
 80185a8:	462b      	mov	r3, r5
 80185aa:	e7f2      	b.n	8018592 <__sccl+0x2e>
 80185ac:	7846      	ldrb	r6, [r0, #1]
 80185ae:	2e5d      	cmp	r6, #93	; 0x5d
 80185b0:	d0fa      	beq.n	80185a8 <__sccl+0x44>
 80185b2:	42b3      	cmp	r3, r6
 80185b4:	dcf8      	bgt.n	80185a8 <__sccl+0x44>
 80185b6:	3002      	adds	r0, #2
 80185b8:	461a      	mov	r2, r3
 80185ba:	3201      	adds	r2, #1
 80185bc:	4296      	cmp	r6, r2
 80185be:	54a1      	strb	r1, [r4, r2]
 80185c0:	dcfb      	bgt.n	80185ba <__sccl+0x56>
 80185c2:	1af2      	subs	r2, r6, r3
 80185c4:	3a01      	subs	r2, #1
 80185c6:	1c5d      	adds	r5, r3, #1
 80185c8:	42b3      	cmp	r3, r6
 80185ca:	bfa8      	it	ge
 80185cc:	2200      	movge	r2, #0
 80185ce:	18ab      	adds	r3, r5, r2
 80185d0:	e7e1      	b.n	8018596 <__sccl+0x32>
 80185d2:	4610      	mov	r0, r2
 80185d4:	e7da      	b.n	801858c <__sccl+0x28>

080185d6 <__submore>:
 80185d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185da:	460c      	mov	r4, r1
 80185dc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80185de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80185e2:	4299      	cmp	r1, r3
 80185e4:	d11d      	bne.n	8018622 <__submore+0x4c>
 80185e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80185ea:	f7ff f927 	bl	801783c <_malloc_r>
 80185ee:	b918      	cbnz	r0, 80185f8 <__submore+0x22>
 80185f0:	f04f 30ff 	mov.w	r0, #4294967295
 80185f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80185fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80185fe:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018602:	6360      	str	r0, [r4, #52]	; 0x34
 8018604:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018608:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801860c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018610:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018614:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018618:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801861c:	6020      	str	r0, [r4, #0]
 801861e:	2000      	movs	r0, #0
 8018620:	e7e8      	b.n	80185f4 <__submore+0x1e>
 8018622:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018624:	0077      	lsls	r7, r6, #1
 8018626:	463a      	mov	r2, r7
 8018628:	f000 f83a 	bl	80186a0 <_realloc_r>
 801862c:	4605      	mov	r5, r0
 801862e:	2800      	cmp	r0, #0
 8018630:	d0de      	beq.n	80185f0 <__submore+0x1a>
 8018632:	eb00 0806 	add.w	r8, r0, r6
 8018636:	4601      	mov	r1, r0
 8018638:	4632      	mov	r2, r6
 801863a:	4640      	mov	r0, r8
 801863c:	f7ff f884 	bl	8017748 <memcpy>
 8018640:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018644:	f8c4 8000 	str.w	r8, [r4]
 8018648:	e7e9      	b.n	801861e <__submore+0x48>

0801864a <memmove>:
 801864a:	4288      	cmp	r0, r1
 801864c:	b510      	push	{r4, lr}
 801864e:	eb01 0402 	add.w	r4, r1, r2
 8018652:	d902      	bls.n	801865a <memmove+0x10>
 8018654:	4284      	cmp	r4, r0
 8018656:	4623      	mov	r3, r4
 8018658:	d807      	bhi.n	801866a <memmove+0x20>
 801865a:	1e43      	subs	r3, r0, #1
 801865c:	42a1      	cmp	r1, r4
 801865e:	d008      	beq.n	8018672 <memmove+0x28>
 8018660:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018664:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018668:	e7f8      	b.n	801865c <memmove+0x12>
 801866a:	4402      	add	r2, r0
 801866c:	4601      	mov	r1, r0
 801866e:	428a      	cmp	r2, r1
 8018670:	d100      	bne.n	8018674 <memmove+0x2a>
 8018672:	bd10      	pop	{r4, pc}
 8018674:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018678:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801867c:	e7f7      	b.n	801866e <memmove+0x24>
	...

08018680 <_sbrk_r>:
 8018680:	b538      	push	{r3, r4, r5, lr}
 8018682:	4d06      	ldr	r5, [pc, #24]	; (801869c <_sbrk_r+0x1c>)
 8018684:	2300      	movs	r3, #0
 8018686:	4604      	mov	r4, r0
 8018688:	4608      	mov	r0, r1
 801868a:	602b      	str	r3, [r5, #0]
 801868c:	f7eb f996 	bl	80039bc <_sbrk>
 8018690:	1c43      	adds	r3, r0, #1
 8018692:	d102      	bne.n	801869a <_sbrk_r+0x1a>
 8018694:	682b      	ldr	r3, [r5, #0]
 8018696:	b103      	cbz	r3, 801869a <_sbrk_r+0x1a>
 8018698:	6023      	str	r3, [r4, #0]
 801869a:	bd38      	pop	{r3, r4, r5, pc}
 801869c:	2400334c 	.word	0x2400334c

080186a0 <_realloc_r>:
 80186a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186a4:	4680      	mov	r8, r0
 80186a6:	4614      	mov	r4, r2
 80186a8:	460e      	mov	r6, r1
 80186aa:	b921      	cbnz	r1, 80186b6 <_realloc_r+0x16>
 80186ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186b0:	4611      	mov	r1, r2
 80186b2:	f7ff b8c3 	b.w	801783c <_malloc_r>
 80186b6:	b92a      	cbnz	r2, 80186c4 <_realloc_r+0x24>
 80186b8:	f7ff f854 	bl	8017764 <_free_r>
 80186bc:	4625      	mov	r5, r4
 80186be:	4628      	mov	r0, r5
 80186c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186c4:	f000 f914 	bl	80188f0 <_malloc_usable_size_r>
 80186c8:	4284      	cmp	r4, r0
 80186ca:	4607      	mov	r7, r0
 80186cc:	d802      	bhi.n	80186d4 <_realloc_r+0x34>
 80186ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80186d2:	d812      	bhi.n	80186fa <_realloc_r+0x5a>
 80186d4:	4621      	mov	r1, r4
 80186d6:	4640      	mov	r0, r8
 80186d8:	f7ff f8b0 	bl	801783c <_malloc_r>
 80186dc:	4605      	mov	r5, r0
 80186de:	2800      	cmp	r0, #0
 80186e0:	d0ed      	beq.n	80186be <_realloc_r+0x1e>
 80186e2:	42bc      	cmp	r4, r7
 80186e4:	4622      	mov	r2, r4
 80186e6:	4631      	mov	r1, r6
 80186e8:	bf28      	it	cs
 80186ea:	463a      	movcs	r2, r7
 80186ec:	f7ff f82c 	bl	8017748 <memcpy>
 80186f0:	4631      	mov	r1, r6
 80186f2:	4640      	mov	r0, r8
 80186f4:	f7ff f836 	bl	8017764 <_free_r>
 80186f8:	e7e1      	b.n	80186be <_realloc_r+0x1e>
 80186fa:	4635      	mov	r5, r6
 80186fc:	e7df      	b.n	80186be <_realloc_r+0x1e>
	...

08018700 <_strtol_l.constprop.0>:
 8018700:	2b01      	cmp	r3, #1
 8018702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018706:	d001      	beq.n	801870c <_strtol_l.constprop.0+0xc>
 8018708:	2b24      	cmp	r3, #36	; 0x24
 801870a:	d906      	bls.n	801871a <_strtol_l.constprop.0+0x1a>
 801870c:	f7fe ffe8 	bl	80176e0 <__errno>
 8018710:	2316      	movs	r3, #22
 8018712:	6003      	str	r3, [r0, #0]
 8018714:	2000      	movs	r0, #0
 8018716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801871a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018800 <_strtol_l.constprop.0+0x100>
 801871e:	460d      	mov	r5, r1
 8018720:	462e      	mov	r6, r5
 8018722:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018726:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801872a:	f017 0708 	ands.w	r7, r7, #8
 801872e:	d1f7      	bne.n	8018720 <_strtol_l.constprop.0+0x20>
 8018730:	2c2d      	cmp	r4, #45	; 0x2d
 8018732:	d132      	bne.n	801879a <_strtol_l.constprop.0+0x9a>
 8018734:	782c      	ldrb	r4, [r5, #0]
 8018736:	2701      	movs	r7, #1
 8018738:	1cb5      	adds	r5, r6, #2
 801873a:	2b00      	cmp	r3, #0
 801873c:	d05b      	beq.n	80187f6 <_strtol_l.constprop.0+0xf6>
 801873e:	2b10      	cmp	r3, #16
 8018740:	d109      	bne.n	8018756 <_strtol_l.constprop.0+0x56>
 8018742:	2c30      	cmp	r4, #48	; 0x30
 8018744:	d107      	bne.n	8018756 <_strtol_l.constprop.0+0x56>
 8018746:	782c      	ldrb	r4, [r5, #0]
 8018748:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801874c:	2c58      	cmp	r4, #88	; 0x58
 801874e:	d14d      	bne.n	80187ec <_strtol_l.constprop.0+0xec>
 8018750:	786c      	ldrb	r4, [r5, #1]
 8018752:	2310      	movs	r3, #16
 8018754:	3502      	adds	r5, #2
 8018756:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801875a:	f108 38ff 	add.w	r8, r8, #4294967295
 801875e:	f04f 0e00 	mov.w	lr, #0
 8018762:	fbb8 f9f3 	udiv	r9, r8, r3
 8018766:	4676      	mov	r6, lr
 8018768:	fb03 8a19 	mls	sl, r3, r9, r8
 801876c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018770:	f1bc 0f09 	cmp.w	ip, #9
 8018774:	d816      	bhi.n	80187a4 <_strtol_l.constprop.0+0xa4>
 8018776:	4664      	mov	r4, ip
 8018778:	42a3      	cmp	r3, r4
 801877a:	dd24      	ble.n	80187c6 <_strtol_l.constprop.0+0xc6>
 801877c:	f1be 3fff 	cmp.w	lr, #4294967295
 8018780:	d008      	beq.n	8018794 <_strtol_l.constprop.0+0x94>
 8018782:	45b1      	cmp	r9, r6
 8018784:	d31c      	bcc.n	80187c0 <_strtol_l.constprop.0+0xc0>
 8018786:	d101      	bne.n	801878c <_strtol_l.constprop.0+0x8c>
 8018788:	45a2      	cmp	sl, r4
 801878a:	db19      	blt.n	80187c0 <_strtol_l.constprop.0+0xc0>
 801878c:	fb06 4603 	mla	r6, r6, r3, r4
 8018790:	f04f 0e01 	mov.w	lr, #1
 8018794:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018798:	e7e8      	b.n	801876c <_strtol_l.constprop.0+0x6c>
 801879a:	2c2b      	cmp	r4, #43	; 0x2b
 801879c:	bf04      	itt	eq
 801879e:	782c      	ldrbeq	r4, [r5, #0]
 80187a0:	1cb5      	addeq	r5, r6, #2
 80187a2:	e7ca      	b.n	801873a <_strtol_l.constprop.0+0x3a>
 80187a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80187a8:	f1bc 0f19 	cmp.w	ip, #25
 80187ac:	d801      	bhi.n	80187b2 <_strtol_l.constprop.0+0xb2>
 80187ae:	3c37      	subs	r4, #55	; 0x37
 80187b0:	e7e2      	b.n	8018778 <_strtol_l.constprop.0+0x78>
 80187b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80187b6:	f1bc 0f19 	cmp.w	ip, #25
 80187ba:	d804      	bhi.n	80187c6 <_strtol_l.constprop.0+0xc6>
 80187bc:	3c57      	subs	r4, #87	; 0x57
 80187be:	e7db      	b.n	8018778 <_strtol_l.constprop.0+0x78>
 80187c0:	f04f 3eff 	mov.w	lr, #4294967295
 80187c4:	e7e6      	b.n	8018794 <_strtol_l.constprop.0+0x94>
 80187c6:	f1be 3fff 	cmp.w	lr, #4294967295
 80187ca:	d105      	bne.n	80187d8 <_strtol_l.constprop.0+0xd8>
 80187cc:	2322      	movs	r3, #34	; 0x22
 80187ce:	6003      	str	r3, [r0, #0]
 80187d0:	4646      	mov	r6, r8
 80187d2:	b942      	cbnz	r2, 80187e6 <_strtol_l.constprop.0+0xe6>
 80187d4:	4630      	mov	r0, r6
 80187d6:	e79e      	b.n	8018716 <_strtol_l.constprop.0+0x16>
 80187d8:	b107      	cbz	r7, 80187dc <_strtol_l.constprop.0+0xdc>
 80187da:	4276      	negs	r6, r6
 80187dc:	2a00      	cmp	r2, #0
 80187de:	d0f9      	beq.n	80187d4 <_strtol_l.constprop.0+0xd4>
 80187e0:	f1be 0f00 	cmp.w	lr, #0
 80187e4:	d000      	beq.n	80187e8 <_strtol_l.constprop.0+0xe8>
 80187e6:	1e69      	subs	r1, r5, #1
 80187e8:	6011      	str	r1, [r2, #0]
 80187ea:	e7f3      	b.n	80187d4 <_strtol_l.constprop.0+0xd4>
 80187ec:	2430      	movs	r4, #48	; 0x30
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d1b1      	bne.n	8018756 <_strtol_l.constprop.0+0x56>
 80187f2:	2308      	movs	r3, #8
 80187f4:	e7af      	b.n	8018756 <_strtol_l.constprop.0+0x56>
 80187f6:	2c30      	cmp	r4, #48	; 0x30
 80187f8:	d0a5      	beq.n	8018746 <_strtol_l.constprop.0+0x46>
 80187fa:	230a      	movs	r3, #10
 80187fc:	e7ab      	b.n	8018756 <_strtol_l.constprop.0+0x56>
 80187fe:	bf00      	nop
 8018800:	08018bff 	.word	0x08018bff

08018804 <_strtol_r>:
 8018804:	f7ff bf7c 	b.w	8018700 <_strtol_l.constprop.0>

08018808 <_strtoul_l.constprop.0>:
 8018808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801880c:	4f36      	ldr	r7, [pc, #216]	; (80188e8 <_strtoul_l.constprop.0+0xe0>)
 801880e:	4686      	mov	lr, r0
 8018810:	460d      	mov	r5, r1
 8018812:	4628      	mov	r0, r5
 8018814:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018818:	5d3e      	ldrb	r6, [r7, r4]
 801881a:	f016 0608 	ands.w	r6, r6, #8
 801881e:	d1f8      	bne.n	8018812 <_strtoul_l.constprop.0+0xa>
 8018820:	2c2d      	cmp	r4, #45	; 0x2d
 8018822:	d130      	bne.n	8018886 <_strtoul_l.constprop.0+0x7e>
 8018824:	782c      	ldrb	r4, [r5, #0]
 8018826:	2601      	movs	r6, #1
 8018828:	1c85      	adds	r5, r0, #2
 801882a:	2b00      	cmp	r3, #0
 801882c:	d057      	beq.n	80188de <_strtoul_l.constprop.0+0xd6>
 801882e:	2b10      	cmp	r3, #16
 8018830:	d109      	bne.n	8018846 <_strtoul_l.constprop.0+0x3e>
 8018832:	2c30      	cmp	r4, #48	; 0x30
 8018834:	d107      	bne.n	8018846 <_strtoul_l.constprop.0+0x3e>
 8018836:	7828      	ldrb	r0, [r5, #0]
 8018838:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801883c:	2858      	cmp	r0, #88	; 0x58
 801883e:	d149      	bne.n	80188d4 <_strtoul_l.constprop.0+0xcc>
 8018840:	786c      	ldrb	r4, [r5, #1]
 8018842:	2310      	movs	r3, #16
 8018844:	3502      	adds	r5, #2
 8018846:	f04f 38ff 	mov.w	r8, #4294967295
 801884a:	2700      	movs	r7, #0
 801884c:	fbb8 f8f3 	udiv	r8, r8, r3
 8018850:	fb03 f908 	mul.w	r9, r3, r8
 8018854:	ea6f 0909 	mvn.w	r9, r9
 8018858:	4638      	mov	r0, r7
 801885a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801885e:	f1bc 0f09 	cmp.w	ip, #9
 8018862:	d815      	bhi.n	8018890 <_strtoul_l.constprop.0+0x88>
 8018864:	4664      	mov	r4, ip
 8018866:	42a3      	cmp	r3, r4
 8018868:	dd23      	ble.n	80188b2 <_strtoul_l.constprop.0+0xaa>
 801886a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801886e:	d007      	beq.n	8018880 <_strtoul_l.constprop.0+0x78>
 8018870:	4580      	cmp	r8, r0
 8018872:	d31b      	bcc.n	80188ac <_strtoul_l.constprop.0+0xa4>
 8018874:	d101      	bne.n	801887a <_strtoul_l.constprop.0+0x72>
 8018876:	45a1      	cmp	r9, r4
 8018878:	db18      	blt.n	80188ac <_strtoul_l.constprop.0+0xa4>
 801887a:	fb00 4003 	mla	r0, r0, r3, r4
 801887e:	2701      	movs	r7, #1
 8018880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018884:	e7e9      	b.n	801885a <_strtoul_l.constprop.0+0x52>
 8018886:	2c2b      	cmp	r4, #43	; 0x2b
 8018888:	bf04      	itt	eq
 801888a:	782c      	ldrbeq	r4, [r5, #0]
 801888c:	1c85      	addeq	r5, r0, #2
 801888e:	e7cc      	b.n	801882a <_strtoul_l.constprop.0+0x22>
 8018890:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018894:	f1bc 0f19 	cmp.w	ip, #25
 8018898:	d801      	bhi.n	801889e <_strtoul_l.constprop.0+0x96>
 801889a:	3c37      	subs	r4, #55	; 0x37
 801889c:	e7e3      	b.n	8018866 <_strtoul_l.constprop.0+0x5e>
 801889e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80188a2:	f1bc 0f19 	cmp.w	ip, #25
 80188a6:	d804      	bhi.n	80188b2 <_strtoul_l.constprop.0+0xaa>
 80188a8:	3c57      	subs	r4, #87	; 0x57
 80188aa:	e7dc      	b.n	8018866 <_strtoul_l.constprop.0+0x5e>
 80188ac:	f04f 37ff 	mov.w	r7, #4294967295
 80188b0:	e7e6      	b.n	8018880 <_strtoul_l.constprop.0+0x78>
 80188b2:	1c7b      	adds	r3, r7, #1
 80188b4:	d106      	bne.n	80188c4 <_strtoul_l.constprop.0+0xbc>
 80188b6:	2322      	movs	r3, #34	; 0x22
 80188b8:	f8ce 3000 	str.w	r3, [lr]
 80188bc:	4638      	mov	r0, r7
 80188be:	b932      	cbnz	r2, 80188ce <_strtoul_l.constprop.0+0xc6>
 80188c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188c4:	b106      	cbz	r6, 80188c8 <_strtoul_l.constprop.0+0xc0>
 80188c6:	4240      	negs	r0, r0
 80188c8:	2a00      	cmp	r2, #0
 80188ca:	d0f9      	beq.n	80188c0 <_strtoul_l.constprop.0+0xb8>
 80188cc:	b107      	cbz	r7, 80188d0 <_strtoul_l.constprop.0+0xc8>
 80188ce:	1e69      	subs	r1, r5, #1
 80188d0:	6011      	str	r1, [r2, #0]
 80188d2:	e7f5      	b.n	80188c0 <_strtoul_l.constprop.0+0xb8>
 80188d4:	2430      	movs	r4, #48	; 0x30
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d1b5      	bne.n	8018846 <_strtoul_l.constprop.0+0x3e>
 80188da:	2308      	movs	r3, #8
 80188dc:	e7b3      	b.n	8018846 <_strtoul_l.constprop.0+0x3e>
 80188de:	2c30      	cmp	r4, #48	; 0x30
 80188e0:	d0a9      	beq.n	8018836 <_strtoul_l.constprop.0+0x2e>
 80188e2:	230a      	movs	r3, #10
 80188e4:	e7af      	b.n	8018846 <_strtoul_l.constprop.0+0x3e>
 80188e6:	bf00      	nop
 80188e8:	08018bff 	.word	0x08018bff

080188ec <_strtoul_r>:
 80188ec:	f7ff bf8c 	b.w	8018808 <_strtoul_l.constprop.0>

080188f0 <_malloc_usable_size_r>:
 80188f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188f4:	1f18      	subs	r0, r3, #4
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	bfbc      	itt	lt
 80188fa:	580b      	ldrlt	r3, [r1, r0]
 80188fc:	18c0      	addlt	r0, r0, r3
 80188fe:	4770      	bx	lr

08018900 <_init>:
 8018900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018902:	bf00      	nop
 8018904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018906:	bc08      	pop	{r3}
 8018908:	469e      	mov	lr, r3
 801890a:	4770      	bx	lr

0801890c <_fini>:
 801890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801890e:	bf00      	nop
 8018910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018912:	bc08      	pop	{r3}
 8018914:	469e      	mov	lr, r3
 8018916:	4770      	bx	lr
