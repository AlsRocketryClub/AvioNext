
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001878c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08018a5c  08018a5c  00028a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018e80  08018e80  00028e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018e88  08018e88  00028e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018e8c  08018e8c  00028e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  08018e90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000330c  24000154  08018fe4  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003460  08018fe4  00033460  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003626f  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006438  00000000  00000000  00066434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002bb8  00000000  00000000  0006c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021e9  00000000  00000000  0006f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e711  00000000  00000000  00071611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003c07f  00000000  00000000  000afd22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e59a  00000000  00000000  000ebda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c640  00000000  00000000  0026a33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027697c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018a44 	.word	0x08018a44

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	08018a44 	.word	0x08018a44

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fe20 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fd64 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fd5e 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fe0e 	bl	8008338 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fd8 	.word	0x24000fd8

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fdf6 	bl	8008338 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fd3a 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e ff2f 	bl	800f5c4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fde3 	bl	8008338 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fd8 	.word	0x24000fd8

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fdcc 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e fd10 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e fd0a 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fdba 	bl	8008338 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fd8 	.word	0x24000fd8

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018c6c 	.word	0x08018c6c
 8000c30:	24000b54 	.word	0x24000b54
 8000c34:	24000274 	.word	0x24000274
 8000c38:	2400053c 	.word	0x2400053c
 8000c3c:	24000804 	.word	0x24000804
 8000c40:	240009ac 	.word	0x240009ac
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00f f8c8 	bl	800fe4c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00f f8c2 	bl	800fe4c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00f f8bc 	bl	800fe4c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00f f8b6 	bl	800fe4c <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018c6c 	.word	0x08018c6c
 8000cec:	240009ac 	.word	0x240009ac
 8000cf0:	24000274 	.word	0x24000274
 8000cf4:	240011cc 	.word	0x240011cc
 8000cf8:	2400053c 	.word	0x2400053c
 8000cfc:	240010e8 	.word	0x240010e8
 8000d00:	24000804 	.word	0x24000804
 8000d04:	24001134 	.word	0x24001134

08000d08 <rand_range>:
	{
		return normalized - LENGTH*2/3;
	}
}

uint32_t rand_range(uint32_t a, uint32_t b) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	uint32_t rand = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d914      	bls.n	8000d4e <rand_range+0x46>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480f      	ldr	r0, [pc, #60]	; (8000d68 <rand_range+0x60>)
 8000d2c:	f00c fbbc 	bl	800d4a8 <HAL_RNG_GenerateRandomNumber>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10b      	bne.n	8000d4e <rand_range+0x46>
	{
		return a+rand/(MAX/(b-a));
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	6839      	ldr	r1, [r7, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	e008      	b.n	8000d60 <rand_range+0x58>
	}
	else
	{
		HAL_Delay(100);
 8000d4e:	2064      	movs	r0, #100	; 0x64
 8000d50:	f003 f840 	bl	8003dd4 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 8000d54:	210a      	movs	r1, #10
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <rand_range+0x64>)
 8000d58:	f016 f8ba 	bl	8016ed0 <CDC_Transmit_HS>
	}
	return -1;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24000ec0 	.word	0x24000ec0
 8000d6c:	08018a5c 	.word	0x08018a5c

08000d70 <LoRA_Read_Register>:

uint8_t LoRA_Read_Register(uint8_t addr){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoRA_Read_Register+0x48>)
 8000d82:	f007 fad9 	bl	8008338 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoRA_Read_Register+0x4c>)
 8000d8e:	f00e fa1d 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d92:	f107 010f 	add.w	r1, r7, #15
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <LoRA_Read_Register+0x4c>)
 8000d9c:	f00e fc12 	bl	800f5c4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <LoRA_Read_Register+0x48>)
 8000da8:	f007 fac6 	bl	8008338 <HAL_GPIO_WritePin>

	return reg_value;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58020000 	.word	0x58020000
 8000dbc:	24001060 	.word	0x24001060

08000dc0 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoRA_Write_Register+0x54>)
 8000de2:	f007 faa9 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000de6:	1df9      	adds	r1, r7, #7
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	2201      	movs	r2, #1
 8000dec:	480a      	ldr	r0, [pc, #40]	; (8000e18 <LoRA_Write_Register+0x58>)
 8000dee:	f00e f9ed 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000df2:	1db9      	adds	r1, r7, #6
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	2201      	movs	r2, #1
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <LoRA_Write_Register+0x58>)
 8000dfa:	f00e f9e7 	bl	800f1cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <LoRA_Write_Register+0x54>)
 8000e06:	f007 fa97 	bl	8008338 <HAL_GPIO_WritePin>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	58020000 	.word	0x58020000
 8000e18:	24001060 	.word	0x24001060

08000e1c <LoRA_sleep>:


void LoRA_sleep(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff ffcc 	bl	8000dc0 <LoRA_Write_Register>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	17c8      	asrs	r0, r1, #31
 8000e38:	460a      	mov	r2, r1
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	1355      	asrs	r5, r2, #13
 8000e3e:	04d4      	lsls	r4, r2, #19
 8000e40:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <LoRA_set_frequency+0x78>)
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	4620      	mov	r0, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f7ff fac9 	bl	80003e0 <__aeabi_uldivmod>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0c02      	lsrs	r2, r0, #16
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	0c0b      	lsrs	r3, r1, #16
 8000e6a:	b2d3      	uxtb	r3, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f7ff ffa6 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	0a02      	lsrs	r2, r0, #8
 8000e82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e86:	0a0b      	lsrs	r3, r1, #8
 8000e88:	b2d3      	uxtb	r3, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2007      	movs	r0, #7
 8000e8e:	f7ff ff97 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e92:	7a3b      	ldrb	r3, [r7, #8]
 8000e94:	4619      	mov	r1, r3
 8000e96:	2008      	movs	r0, #8
 8000e98:	f7ff ff92 	bl	8000dc0 <LoRA_Write_Register>
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea4:	01e84800 	.word	0x01e84800

08000ea8 <LoRA_idle>:

void LoRA_idle(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000eac:	2181      	movs	r1, #129	; 0x81
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff86 	bl	8000dc0 <LoRA_Write_Register>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000ec2:	231b      	movs	r3, #27
 8000ec4:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b78      	cmp	r3, #120	; 0x78
 8000eca:	d809      	bhi.n	8000ee0 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	3b2d      	subs	r3, #45	; 0x2d
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <LoRA_setOCP+0x60>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1052      	asrs	r2, r2, #1
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e00b      	b.n	8000ef8 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2bf0      	cmp	r3, #240	; 0xf0
 8000ee4:	d808      	bhi.n	8000ef8 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	331e      	adds	r3, #30
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoRA_setOCP+0x60>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	1092      	asrs	r2, r2, #2
 8000ef2:	17db      	asrs	r3, r3, #31
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	200b      	movs	r0, #11
 8000f0a:	f7ff ff59 	bl	8000dc0 <LoRA_Write_Register>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	66666667 	.word	0x66666667

08000f1c <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b11      	cmp	r3, #17
 8000f28:	dd0f      	ble.n	8000f4a <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b14      	cmp	r3, #20
 8000f2e:	dd01      	ble.n	8000f34 <LoRA_setTxPower+0x18>
        level = 20;
 8000f30:	2314      	movs	r3, #20
 8000f32:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b03      	subs	r3, #3
 8000f38:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000f3a:	2187      	movs	r1, #135	; 0x87
 8000f3c:	204d      	movs	r0, #77	; 0x4d
 8000f3e:	f7ff ff3f 	bl	8000dc0 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000f42:	208c      	movs	r0, #140	; 0x8c
 8000f44:	f7ff ffb8 	bl	8000eb8 <LoRA_setOCP>
 8000f48:	e00b      	b.n	8000f62 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	dc01      	bgt.n	8000f54 <LoRA_setTxPower+0x38>
        level = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000f54:	2184      	movs	r1, #132	; 0x84
 8000f56:	204d      	movs	r0, #77	; 0x4d
 8000f58:	f7ff ff32 	bl	8000dc0 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f7ff ffab 	bl	8000eb8 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3b02      	subs	r3, #2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	2009      	movs	r0, #9
 8000f78:	f7ff ff22 	bl	8000dc0 <LoRA_Write_Register>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f88:	201d      	movs	r0, #29
 8000f8a:	f7ff fef1 	bl	8000d70 <LoRA_Read_Register>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4619      	mov	r1, r3
 8000f98:	201d      	movs	r0, #29
 8000f9a:	f7ff ff11 	bl	8000dc0 <LoRA_Write_Register>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09c      	sub	sp, #112	; 0x70
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4822      	ldr	r0, [pc, #136]	; (800103c <LoRA_begin+0x98>)
 8000fb2:	f007 f9c1 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <LoRA_begin+0x9c>)
 8000fbe:	f007 f9bb 	bl	8008338 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000fc2:	2042      	movs	r0, #66	; 0x42
 8000fc4:	f7ff fed4 	bl	8000d70 <LoRA_Read_Register>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000fce:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	491b      	ldr	r1, [pc, #108]	; (8001044 <LoRA_begin+0xa0>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f016 fbcd 	bl	8017778 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f99e 	bl	8000324 <strlen>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f015 ff6d 	bl	8016ed0 <CDC_Transmit_HS>

	LoRA_sleep();
 8000ff6:	f7ff ff11 	bl	8000e1c <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000ffa:	4813      	ldr	r0, [pc, #76]	; (8001048 <LoRA_begin+0xa4>)
 8000ffc:	f7ff ff16 	bl	8000e2c <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	200f      	movs	r0, #15
 8001004:	f7ff fedc 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001008:	2100      	movs	r1, #0
 800100a:	200e      	movs	r0, #14
 800100c:	f7ff fed8 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001010:	200c      	movs	r0, #12
 8001012:	f7ff fead 	bl	8000d70 <LoRA_Read_Register>
 8001016:	4603      	mov	r3, r0
 8001018:	f043 0303 	orr.w	r3, r3, #3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	200c      	movs	r0, #12
 8001022:	f7ff fecd 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001026:	2104      	movs	r1, #4
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f7ff fec9 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 800102e:	2011      	movs	r0, #17
 8001030:	f7ff ff74 	bl	8000f1c <LoRA_setTxPower>

}
 8001034:	bf00      	nop
 8001036:	3770      	adds	r7, #112	; 0x70
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58020c00 	.word	0x58020c00
 8001040:	58020000 	.word	0x58020000
 8001044:	08018a68 	.word	0x08018a68
 8001048:	33bca100 	.word	0x33bca100

0800104c <LoRA_beginPacket>:


void LoRA_beginPacket(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001050:	f7ff ff98 	bl	8000f84 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001054:	2100      	movs	r1, #0
 8001056:	200d      	movs	r0, #13
 8001058:	f7ff feb2 	bl	8000dc0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 800105c:	2100      	movs	r1, #0
 800105e:	2022      	movs	r0, #34	; 0x22
 8001060:	f7ff feae 	bl	8000dc0 <LoRA_Write_Register>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800106c:	2183      	movs	r1, #131	; 0x83
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fea6 	bl	8000dc0 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8001074:	bf00      	nop
 8001076:	2012      	movs	r0, #18
 8001078:	f7ff fe7a 	bl	8000d70 <LoRA_Read_Register>
 800107c:	4603      	mov	r3, r0
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f7      	beq.n	8001076 <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001086:	2185      	movs	r1, #133	; 0x85
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fe99 	bl	8000dc0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800108e:	2108      	movs	r1, #8
 8001090:	2012      	movs	r0, #18
 8001092:	f7ff fe95 	bl	8000dc0 <LoRA_Write_Register>

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}

0800109a <LoRA_parsePacket>:


int LoRA_parsePacket(){
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010a4:	2012      	movs	r0, #18
 80010a6:	f7ff fe63 	bl	8000d70 <LoRA_Read_Register>
 80010aa:	4603      	mov	r3, r0
 80010ac:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80010ae:	f7ff ff69 	bl	8000f84 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	2012      	movs	r0, #18
 80010ba:	f7ff fe81 	bl	8000dc0 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d016      	beq.n	80010f6 <LoRA_parsePacket+0x5c>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d111      	bne.n	80010f6 <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80010d2:	2013      	movs	r0, #19
 80010d4:	f7ff fe4c 	bl	8000d70 <LoRA_Read_Register>
 80010d8:	4603      	mov	r3, r0
 80010da:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80010dc:	2010      	movs	r0, #16
 80010de:	f7ff fe47 	bl	8000d70 <LoRA_Read_Register>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4619      	mov	r1, r3
 80010e6:	200d      	movs	r0, #13
 80010e8:	f7ff fe6a 	bl	8000dc0 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010ec:	2185      	movs	r1, #133	; 0x85
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff fe66 	bl	8000dc0 <LoRA_Write_Register>
 80010f4:	e00d      	b.n	8001112 <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff fe3a 	bl	8000d70 <LoRA_Read_Register>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b85      	cmp	r3, #133	; 0x85
 8001100:	d007      	beq.n	8001112 <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001102:	2100      	movs	r1, #0
 8001104:	200d      	movs	r0, #13
 8001106:	f7ff fe5b 	bl	8000dc0 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800110a:	2185      	movs	r1, #133	; 0x85
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff fe57 	bl	8000dc0 <LoRA_Write_Register>
	}
	return packetLenght;
 8001112:	687b      	ldr	r3, [r7, #4]

}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b0c4      	sub	sp, #272	; 0x110
 8001120:	af00      	add	r7, sp, #0
 8001122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001126:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800112a:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 800112c:	f7ff febc 	bl	8000ea8 <LoRA_idle>

	char debug[MAX_PAYLOAD_LENGHT];
	if(recv_packet(debug, MAX_PAYLOAD_LENGHT)) {
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	21fa      	movs	r1, #250	; 0xfa
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f8dc 	bl	80012f4 <recv_packet>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d022      	beq.n	8001188 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8001142:	2064      	movs	r0, #100	; 0x64
 8001144:	f002 fe46 	bl	8003dd4 <HAL_Delay>
		strcat(debug, " was thrown away");
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f8e9 	bl	8000324 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4413      	add	r3, r2
 800115c:	4a32      	ldr	r2, [pc, #200]	; (8001228 <LoRA_sendPacket+0x10c>)
 800115e:	461d      	mov	r5, r3
 8001160:	4614      	mov	r4, r2
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	6028      	str	r0, [r5, #0]
 8001166:	6069      	str	r1, [r5, #4]
 8001168:	60aa      	str	r2, [r5, #8]
 800116a:	60eb      	str	r3, [r5, #12]
 800116c:	7823      	ldrb	r3, [r4, #0]
 800116e:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f8d5 	bl	8000324 <strlen>
 800117a:	4602      	mov	r2, r0
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f015 fea4 	bl	8016ed0 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001188:	2012      	movs	r0, #18
 800118a:	f7ff fdf1 	bl	8000d70 <LoRA_Read_Register>
 800118e:	4603      	mov	r3, r0
 8001190:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8001194:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <LoRA_sendPacket+0x90>
 80011a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d033      	beq.n	8001214 <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80011ac:	f7ff ff4e 	bl	800104c <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80011b6:	e011      	b.n	80011dc <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80011b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011bc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011c0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fdf7 	bl	8000dc0 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 80011d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011d6:	3301      	adds	r3, #1
 80011d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80011dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f7ff f89d 	bl	8000324 <strlen>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8e1      	bhi.n	80011b8 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80011f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	f7ff f891 	bl	8000324 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	2022      	movs	r0, #34	; 0x22
 800120a:	f7ff fdd9 	bl	8000dc0 <LoRA_Write_Register>
    	LoRA_endPacket();
 800120e:	f7ff ff2b 	bl	8001068 <LoRA_endPacket>
 8001212:	e004      	b.n	800121e <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001214:	2185      	movs	r1, #133	; 0x85
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fdd2 	bl	8000dc0 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001224:	46bd      	mov	sp, r7
 8001226:	bdb0      	pop	{r4, r5, r7, pc}
 8001228:	08018a6c 	.word	0x08018a6c

0800122c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2102      	movs	r1, #2
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <disarm+0xac>)
 800123a:	f007 f87d 	bl	8008338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2104      	movs	r1, #4
 8001242:	4825      	ldr	r0, [pc, #148]	; (80012d8 <disarm+0xac>)
 8001244:	f007 f878 	bl	8008338 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2102      	movs	r1, #2
 800124c:	4823      	ldr	r0, [pc, #140]	; (80012dc <disarm+0xb0>)
 800124e:	f007 f873 	bl	8008338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <disarm+0xb4>)
 800125a:	f007 f86d 	bl	8008338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	481e      	ldr	r0, [pc, #120]	; (80012e0 <disarm+0xb4>)
 8001266:	f007 f867 	bl	8008338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001270:	481b      	ldr	r0, [pc, #108]	; (80012e0 <disarm+0xb4>)
 8001272:	f007 f861 	bl	8008338 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2102      	movs	r1, #2
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <disarm+0xb8>)
 800127c:	f007 f85c 	bl	8008338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <disarm+0xbc>)
 8001288:	f007 f856 	bl	8008338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001292:	4815      	ldr	r0, [pc, #84]	; (80012e8 <disarm+0xbc>)
 8001294:	f007 f850 	bl	8008338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <disarm+0xbc>)
 80012a0:	f007 f84a 	bl	8008338 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <disarm+0xc0>)
 80012a6:	22ff      	movs	r2, #255	; 0xff
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <disarm+0xc0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <disarm+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80012b6:	f7ff fb6f 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <disarm+0xc4>)
 80012be:	461a      	mov	r2, r3
 80012c0:	460b      	mov	r3, r1
 80012c2:	cb03      	ldmia	r3!, {r0, r1}
 80012c4:	6010      	str	r0, [r2, #0]
 80012c6:	6051      	str	r1, [r2, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	7213      	strb	r3, [r2, #8]
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	58020000 	.word	0x58020000
 80012dc:	58020400 	.word	0x58020400
 80012e0:	58021400 	.word	0x58021400
 80012e4:	58021800 	.word	0x58021800
 80012e8:	58021000 	.word	0x58021000
 80012ec:	24000b54 	.word	0x24000b54
 80012f0:	08018a80 	.word	0x08018a80

080012f4 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 80012fe:	f7ff fecc 	bl	800109a <LoRA_parsePacket>
 8001302:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	dc01      	bgt.n	8001310 <recv_packet+0x1c>
  {
    return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e01c      	b.n	800134a <recv_packet+0x56>
  }
  if(packet_length){
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d018      	beq.n	8001348 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	18d4      	adds	r4, r2, r3
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fd24 	bl	8000d70 <LoRA_Read_Register>
 8001328:	4603      	mov	r3, r0
 800132a:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbf0      	blt.n	800131c <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	e000      	b.n	800134a <recv_packet+0x56>
  }
  else{
    return 0;
 8001348:	2300      	movs	r3, #0
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	466b      	mov	r3, sp
 800135e:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7fe ffdf 	bl	8000324 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	3301      	adds	r3, #1
 800136c:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 800136e:	8af9      	ldrh	r1, [r7, #22]
 8001370:	460b      	mov	r3, r1
 8001372:	3b01      	subs	r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	b28b      	uxth	r3, r1
 8001378:	2200      	movs	r2, #0
 800137a:	4698      	mov	r8, r3
 800137c:	4691      	mov	r9, r2
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800138a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800138e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001392:	b28b      	uxth	r3, r1
 8001394:	2200      	movs	r2, #0
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	00eb      	lsls	r3, r5, #3
 80013a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013a8:	00e2      	lsls	r2, r4, #3
 80013aa:	460b      	mov	r3, r1
 80013ac:	3307      	adds	r3, #7
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	ebad 0d03 	sub.w	sp, sp, r3
 80013b6:	466b      	mov	r3, sp
 80013b8:	3300      	adds	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 80013bc:	f002 fcfe 	bl	8003dbc <HAL_GetTick>
 80013c0:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 80013c2:	210d      	movs	r1, #13
 80013c4:	2003      	movs	r0, #3
 80013c6:	f7ff fc9f 	bl	8000d08 <rand_range>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2264      	movs	r2, #100	; 0x64
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fea1 	bl	800111c <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80013da:	8afb      	ldrh	r3, [r7, #22]
 80013dc:	4619      	mov	r1, r3
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff ff88 	bl	80012f4 <recv_packet>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7fe ff8f 	bl	8000310 <strcmp>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01a      	beq.n	800142e <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe8f 	bl	800111c <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 80013fe:	f002 fcdd 	bl	8003dbc <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	429a      	cmp	r2, r3
 800140c:	d2e5      	bcs.n	80013da <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 800140e:	210d      	movs	r1, #13
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff fc79 	bl	8000d08 <rand_range>
 8001416:	4603      	mov	r3, r0
 8001418:	2264      	movs	r2, #100	; 0x64
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fe7b 	bl	800111c <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001426:	f002 fcc9 	bl	8003dbc <HAL_GetTick>
 800142a:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 800142c:	e7d5      	b.n	80013da <reliable_send_packet+0x88>
				break;
 800142e:	bf00      	nop
 8001430:	46b5      	mov	sp, r6
		}
	}
}
 8001432:	bf00      	nop
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800143c <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <usbReceiveHandle+0x38>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4909      	ldr	r1, [pc, #36]	; (8001478 <usbReceiveHandle+0x3c>)
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f016 fa19 	bl	801788c <memcpy>
		output[temp] = '\0';
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <usbReceiveHandle+0x38>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	}
	return temp;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	24000270 	.word	0x24000270
 8001478:	24000170 	.word	0x24000170

0800147c <groundstationReliableReceiveHandle>:
	int streamable_packets;
	char** messages;
	int messages_count;
};

void groundstationReliableReceiveHandle(char* received_packet) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7fe ff4d 	bl	8000324 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f015 fd1e 	bl	8016ed0 <CDC_Transmit_HS>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <groundstationStreamReceiveHandle>:

void groundstationStreamReceiveHandle(char* received_packet) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7fe ff3d 	bl	8000324 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4619      	mov	r1, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f015 fd0e 	bl	8016ed0 <CDC_Transmit_HS>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <groundstationStreamSendHandle>:

char* groundstationStreamSendHandle(int remainingPacketCount) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	return "Ground station shouldn't be streaming!\n";
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <groundstationStreamSendHandle+0x18>)
};
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	08018acc 	.word	0x08018acc

080014d8 <groundstationReliableSendHandle>:

char input[usbBufferLen];
char* groundstation_messages[1];

struct ReliableSendConfig groundstationReliableSendHandle() {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b0cb      	sub	sp, #300	; 0x12c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80014e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014e6:	6018      	str	r0, [r3, #0]
	struct ReliableSendConfig config;
    CDC_Transmit_HS("\nState of other board: \n> ", strlen("\nState of other board: \n> "));
 80014e8:	211a      	movs	r1, #26
 80014ea:	4827      	ldr	r0, [pc, #156]	; (8001588 <groundstationReliableSendHandle+0xb0>)
 80014ec:	f015 fcf0 	bl	8016ed0 <CDC_Transmit_HS>
    //get input

    while(!usbReceiveHandle(input))
 80014f0:	bf00      	nop
 80014f2:	4826      	ldr	r0, [pc, #152]	; (800158c <groundstationReliableSendHandle+0xb4>)
 80014f4:	f7ff ffa2 	bl	800143c <usbReceiveHandle>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f9      	beq.n	80014f2 <groundstationReliableSendHandle+0x1a>
    {}

    groundstation_messages[0]=input;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <groundstationReliableSendHandle+0xb8>)
 8001500:	4a22      	ldr	r2, [pc, #136]	; (800158c <groundstationReliableSendHandle+0xb4>)
 8001502:	601a      	str	r2, [r3, #0]
    config.messages = groundstation_messages;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <groundstationReliableSendHandle+0xb8>)
 8001506:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    config.messages_count = 1;
 800150a:	2301      	movs	r3, #1
 800150c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    config.streamable_packets = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    //reliable_send_packet(input);

    char debug[usbBufferLen+10];
    sprintf(debug, "%s\n", input);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <groundstationReliableSendHandle+0xb4>)
 800151c:	491d      	ldr	r1, [pc, #116]	; (8001594 <groundstationReliableSendHandle+0xbc>)
 800151e:	4618      	mov	r0, r3
 8001520:	f016 f92a 	bl	8017778 <siprintf>
    CDC_Transmit_HS(debug, strlen(debug));
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fefb 	bl	8000324 <strlen>
 800152e:	4602      	mov	r2, r0
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f015 fcca 	bl	8016ed0 <CDC_Transmit_HS>

    if(strcmp(input,"FIRE")==0)
 800153c:	4916      	ldr	r1, [pc, #88]	; (8001598 <groundstationReliableSendHandle+0xc0>)
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <groundstationReliableSendHandle+0xb4>)
 8001540:	f7fe fee6 	bl	8000310 <strcmp>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <groundstationReliableSendHandle+0x80>
    {
      config.mode = RECEIVING_STREAM;
 800154a:	2301      	movs	r3, #1
 800154c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      config.streamable_packets = 50;
 8001550:	2332      	movs	r3, #50	; 0x32
 8001552:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001556:	e002      	b.n	800155e <groundstationReliableSendHandle+0x86>
      sprintf(sendMessage, "! %d", 50);
      LoRA_sendPacket(sendMessage);*/
    }
    else
    {
      config.mode = TRANSITIONING;
 8001558:	2304      	movs	r3, #4
 800155a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      /*communication_state = TRANSITIONING;
      HAL_Delay(100);
      LoRA_sendPacket("$");*/
    }
    return config;
 800155e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001562:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	461c      	mov	r4, r3
 800156a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001574:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	08018af4 	.word	0x08018af4
 800158c:	240015e4 	.word	0x240015e4
 8001590:	240016e4 	.word	0x240016e4
 8001594:	08018b10 	.word	0x08018b10
 8001598:	08018b14 	.word	0x08018b14

0800159c <communicationHandler>:

void communicationHandler(void reliableReceiveHandle(char*), void streamReceiveHandle(char*), char* streamSendHandle(int), struct ReliableSendConfig reliableSendHandle(), int initial_communication_state) {
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f507 64c4 	add.w	r4, r7, #1568	; 0x620
 80015a8:	f2a4 6414 	subw	r4, r4, #1556	; 0x614
 80015ac:	6020      	str	r0, [r4, #0]
 80015ae:	f507 60c4 	add.w	r0, r7, #1568	; 0x620
 80015b2:	f5a0 60c3 	sub.w	r0, r0, #1560	; 0x618
 80015b6:	6001      	str	r1, [r0, #0]
 80015b8:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80015bc:	f2a1 611c 	subw	r1, r1, #1564	; 0x61c
 80015c0:	600a      	str	r2, [r1, #0]
 80015c2:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80015c6:	f5a2 62c4 	sub.w	r2, r2, #1568	; 0x620
 80015ca:	6013      	str	r3, [r2, #0]
  //just for testing
  char sendMessage[MAX_PAYLOAD_LENGHT];
  char state[MAX_PAYLOAD_LENGHT] = "";
 80015cc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80015d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	3304      	adds	r3, #4
 80015da:	22f6      	movs	r2, #246	; 0xf6
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f016 f918 	bl	8017814 <memset>
  char response_packet[MAX_PAYLOAD_LENGHT] = "";
 80015e4:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80015e8:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	22f6      	movs	r2, #246	; 0xf6
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f016 f90c 	bl	8017814 <memset>
  //from here it's okay
  int communication_state = initial_communication_state;
 80015fc:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 8001600:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
  int max_packet_count = 0;
 8001604:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001608:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
  char previous_packet[MAX_PAYLOAD_LENGHT] = "";
 8001610:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001614:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	3304      	adds	r3, #4
 800161e:	22f6      	movs	r2, #246	; 0xf6
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f016 f8f6 	bl	8017814 <memset>
  char received_packet[MAX_PAYLOAD_LENGHT] = "";
 8001628:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800162c:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	3304      	adds	r3, #4
 8001636:	22f6      	movs	r2, #246	; 0xf6
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f016 f8ea 	bl	8017814 <memset>
  char general_buffer[MAX_PAYLOAD_LENGHT] = "";
 8001640:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001644:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	3304      	adds	r3, #4
 800164e:	22f6      	movs	r2, #246	; 0xf6
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f016 f8de 	bl	8017814 <memset>
  uint32_t previousTime = HAL_GetTick();
 8001658:	f002 fbb0 	bl	8003dbc <HAL_GetTick>
 800165c:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618
  uint32_t wait_time = rand_range(3, 13)*100;
 8001660:	210d      	movs	r1, #13
 8001662:	2003      	movs	r0, #3
 8001664:	f7ff fb50 	bl	8000d08 <rand_range>
 8001668:	4603      	mov	r3, r0
 800166a:	2264      	movs	r2, #100	; 0x64
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614

  while (1) {
      if(communication_state == RECEIVING_RELIABLE)
 8001674:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d152      	bne.n	8001722 <communicationHandler+0x186>
      {
        if(recv_packet(received_packet, MAX_PAYLOAD_LENGHT))
 800167c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001680:	21fa      	movs	r1, #250	; 0xfa
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe36 	bl	80012f4 <recv_packet>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f2      	beq.n	8001674 <communicationHandler+0xd8>
        {
          previousTime = HAL_GetTick();
 800168e:	f002 fb95 	bl	8003dbc <HAL_GetTick>
 8001692:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618

          if(sscanf(received_packet, "$ %s", state) == 1)
 8001696:	f207 4214 	addw	r2, r7, #1044	; 0x414
 800169a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800169e:	49c7      	ldr	r1, [pc, #796]	; (80019bc <communicationHandler+0x420>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f016 f889 	bl	80177b8 <siscanf>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d103      	bne.n	80016b4 <communicationHandler+0x118>
          {
            communication_state = SENDING_RELIABLE;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80016b2:	e7df      	b.n	8001674 <communicationHandler+0xd8>
          }
          else if(sscanf(received_packet, "! %d", &max_packet_count) == 1)
 80016b4:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80016b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016bc:	49c0      	ldr	r1, [pc, #768]	; (80019c0 <communicationHandler+0x424>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f016 f87a 	bl	80177b8 <siscanf>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d103      	bne.n	80016d2 <communicationHandler+0x136>
          {
            communication_state = SENDING_STREAM;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80016d0:	e7d0      	b.n	8001674 <communicationHandler+0xd8>
          }
          else if(strcmp(received_packet, previous_packet)==0)
 80016d2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80016d6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe17 	bl	8000310 <strcmp>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <communicationHandler+0x158>
          {
            //send acknowledge again
            LoRA_sendPacket(received_packet);
 80016e8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd15 	bl	800111c <LoRA_sendPacket>
 80016f2:	e7bf      	b.n	8001674 <communicationHandler+0xd8>
          }
          else
          {
        	//send acknowledge
            strcpy(previous_packet, received_packet);
 80016f4:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80016f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f016 f8bc 	bl	801787c <strcpy>
            LoRA_sendPacket(received_packet);
 8001704:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fd07 	bl	800111c <LoRA_sendPacket>

            reliableReceiveHandle(received_packet);
 800170e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001712:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001716:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4610      	mov	r0, r2
 800171e:	4798      	blx	r3
 8001720:	e7a8      	b.n	8001674 <communicationHandler+0xd8>

          }
        }
      }
      else if(communication_state == RECEIVING_STREAM)
 8001722:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8001726:	2b01      	cmp	r3, #1
 8001728:	d14f      	bne.n	80017ca <communicationHandler+0x22e>
      {
        if(recv_packet(received_packet, MAX_PAYLOAD_LENGHT))
 800172a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800172e:	21fa      	movs	r1, #250	; 0xfa
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fddf 	bl	80012f4 <recv_packet>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01c      	beq.n	8001776 <communicationHandler+0x1da>
        {
          previousTime = HAL_GetTick();
 800173c:	f002 fb3e 	bl	8003dbc <HAL_GetTick>
 8001740:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618
          if(sscanf(received_packet, "$ %s", state) == 1)
 8001744:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001748:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800174c:	499b      	ldr	r1, [pc, #620]	; (80019bc <communicationHandler+0x420>)
 800174e:	4618      	mov	r0, r3
 8001750:	f016 f832 	bl	80177b8 <siscanf>
 8001754:	4603      	mov	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d103      	bne.n	8001762 <communicationHandler+0x1c6>
          {
            communication_state = SENDING_RELIABLE;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8001760:	e788      	b.n	8001674 <communicationHandler+0xd8>
          }
          else
          {
        	streamReceiveHandle(received_packet);
 8001762:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001766:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800176a:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4610      	mov	r0, r2
 8001772:	4798      	blx	r3
 8001774:	e77e      	b.n	8001674 <communicationHandler+0xd8>
          }
        }
        else if(HAL_GetTick()-previousTime > wait_time)
 8001776:	f002 fb21 	bl	8003dbc <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f8d7 2614 	ldr.w	r2, [r7, #1556]	; 0x614
 8001786:	429a      	cmp	r2, r3
 8001788:	f4bf af74 	bcs.w	8001674 <communicationHandler+0xd8>
        {
          wait_time = rand_range(3, 13)*100;
 800178c:	210d      	movs	r1, #13
 800178e:	2003      	movs	r0, #3
 8001790:	f7ff faba 	bl	8000d08 <rand_range>
 8001794:	4603      	mov	r3, r0
 8001796:	2264      	movs	r2, #100	; 0x64
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
          previousTime = HAL_GetTick();
 80017a0:	f002 fb0c 	bl	8003dbc <HAL_GetTick>
 80017a4:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618
          //give up SENDING
          sprintf(general_buffer, "! %d", max_packet_count);
 80017a8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80017ac:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	4982      	ldr	r1, [pc, #520]	; (80019c0 <communicationHandler+0x424>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f015 ffdd 	bl	8017778 <siprintf>
          LoRA_sendPacket(general_buffer);
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fcaa 	bl	800111c <LoRA_sendPacket>
 80017c8:	e754      	b.n	8001674 <communicationHandler+0xd8>
        }
      }
      else if(communication_state == SENDING_STREAM)
 80017ca:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d12b      	bne.n	800182a <communicationHandler+0x28e>
      {
        if(max_packet_count == 0)
 80017d2:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80017d6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <communicationHandler+0x252>
        {
          communication_state = TRANSITIONING;
 80017e0:	2304      	movs	r3, #4
 80017e2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
          LoRA_sendPacket("$");
 80017e6:	4877      	ldr	r0, [pc, #476]	; (80019c4 <communicationHandler+0x428>)
 80017e8:	f7ff fc98 	bl	800111c <LoRA_sendPacket>
 80017ec:	e742      	b.n	8001674 <communicationHandler+0xd8>
        }
        else
        {
          //send whatever
          char* msg = streamSendHandle(max_packet_count);
 80017ee:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80017f2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80017fc:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4610      	mov	r0, r2
 8001804:	4798      	blx	r3
 8001806:	f8c7 060c 	str.w	r0, [r7, #1548]	; 0x60c
          LoRA_sendPacket(msg);
 800180a:	f8d7 060c 	ldr.w	r0, [r7, #1548]	; 0x60c
 800180e:	f7ff fc85 	bl	800111c <LoRA_sendPacket>
          max_packet_count--;
 8001812:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001816:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001822:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e724      	b.n	8001674 <communicationHandler+0xd8>
        }

      }
      else if(communication_state == SENDING_RELIABLE)
 800182a:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800182e:	2b02      	cmp	r3, #2
 8001830:	f040 8097 	bne.w	8001962 <communicationHandler+0x3c6>
      {
        reliable_send_packet("*");
 8001834:	4864      	ldr	r0, [pc, #400]	; (80019c8 <communicationHandler+0x42c>)
 8001836:	f7ff fd8c 	bl	8001352 <reliable_send_packet>
        struct ReliableSendConfig config = reliableSendHandle();
 800183a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800183e:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 8001842:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001846:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4610      	mov	r0, r2
 800184e:	4798      	blx	r3
        for(int i = 0; i < config.messages_count; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 8001856:	e040      	b.n	80018da <communicationHandler+0x33e>
        {
        	if(config.messages[i][0] == '$' || config.messages[i][0] == '*' || config.messages[i][0] == '!')
 8001858:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800185c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b24      	cmp	r3, #36	; 0x24
 8001870:	d019      	beq.n	80018a6 <communicationHandler+0x30a>
 8001872:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001876:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b2a      	cmp	r3, #42	; 0x2a
 800188a:	d00c      	beq.n	80018a6 <communicationHandler+0x30a>
 800188c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001890:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b21      	cmp	r3, #33	; 0x21
 80018a4:	d107      	bne.n	80018b6 <communicationHandler+0x31a>
        	{
        		HAL_Delay(100);
 80018a6:	2064      	movs	r0, #100	; 0x64
 80018a8:	f002 fa94 	bl	8003dd4 <HAL_Delay>
        		CDC_Transmit_HS("Can't send control commands! ('$', '*', '!')\n", strlen("Can't send control commands! ('$', '*', '!')\n"));
 80018ac:	212d      	movs	r1, #45	; 0x2d
 80018ae:	4847      	ldr	r0, [pc, #284]	; (80019cc <communicationHandler+0x430>)
 80018b0:	f015 fb0e 	bl	8016ed0 <CDC_Transmit_HS>
        	{
 80018b4:	e00c      	b.n	80018d0 <communicationHandler+0x334>
        	}
        	else
        	{
        		reliable_send_packet(config.messages[i]);
 80018b6:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80018ba:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fd41 	bl	8001352 <reliable_send_packet>
        for(int i = 0; i < config.messages_count; i++)
 80018d0:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 80018d4:	3301      	adds	r3, #1
 80018d6:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 80018da:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80018de:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f8d7 2610 	ldr.w	r2, [r7, #1552]	; 0x610
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbb5      	blt.n	8001858 <communicationHandler+0x2bc>
        	}
        }
        if(config.mode==RECEIVING_STREAM)
 80018ec:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80018f0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d11d      	bne.n	8001936 <communicationHandler+0x39a>
        {
          communication_state = RECEIVING_STREAM;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
          max_packet_count = config.streamable_packets;
 8001900:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001904:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800190e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8001912:	601a      	str	r2, [r3, #0]
          //to do rename this:
          sprintf(sendMessage, "! %d", max_packet_count);
 8001914:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8001918:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8001922:	4927      	ldr	r1, [pc, #156]	; (80019c0 <communicationHandler+0x424>)
 8001924:	4618      	mov	r0, r3
 8001926:	f015 ff27 	bl	8017778 <siprintf>
          LoRA_sendPacket(sendMessage);
 800192a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fbf4 	bl	800111c <LoRA_sendPacket>
 8001934:	e69e      	b.n	8001674 <communicationHandler+0xd8>
        }
        else if(config.mode==TRANSITIONING)
 8001936:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800193a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d106      	bne.n	8001952 <communicationHandler+0x3b6>
        {
          communication_state = TRANSITIONING;
 8001944:	2304      	movs	r3, #4
 8001946:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
          LoRA_sendPacket("$");
 800194a:	481e      	ldr	r0, [pc, #120]	; (80019c4 <communicationHandler+0x428>)
 800194c:	f7ff fbe6 	bl	800111c <LoRA_sendPacket>
 8001950:	e690      	b.n	8001674 <communicationHandler+0xd8>
        }
        else
        {
            HAL_Delay(100);
 8001952:	2064      	movs	r0, #100	; 0x64
 8001954:	f002 fa3e 	bl	8003dd4 <HAL_Delay>
        	CDC_Transmit_HS("Shouldn't try to transition to this mode.\n", strlen("Shouldn't try to transition to this mode.\n"));
 8001958:	212a      	movs	r1, #42	; 0x2a
 800195a:	481d      	ldr	r0, [pc, #116]	; (80019d0 <communicationHandler+0x434>)
 800195c:	f015 fab8 	bl	8016ed0 <CDC_Transmit_HS>
 8001960:	e688      	b.n	8001674 <communicationHandler+0xd8>
          HAL_Delay(100);
          LoRA_sendPacket("$");
        }
        */
      }
      else if(communication_state == TRANSITIONING)
 8001962:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8001966:	2b04      	cmp	r3, #4
 8001968:	f47f ae84 	bne.w	8001674 <communicationHandler+0xd8>
      {

          if(recv_packet(received_packet, MAX_PAYLOAD_LENGHT))
 800196c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001970:	21fa      	movs	r1, #250	; 0xfa
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fcbe 	bl	80012f4 <recv_packet>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d02a      	beq.n	80019d4 <communicationHandler+0x438>
          {
            previousTime = HAL_GetTick();
 800197e:	f002 fa1d 	bl	8003dbc <HAL_GetTick>
 8001982:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618
            if(strcmp(received_packet, "*")==0)
 8001986:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800198a:	490f      	ldr	r1, [pc, #60]	; (80019c8 <communicationHandler+0x42c>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fcbf 	bl	8000310 <strcmp>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f ae6d 	bne.w	8001674 <communicationHandler+0xd8>
            {
              strcpy(previous_packet, received_packet);
 800199a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800199e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f015 ff69 	bl	801787c <strcpy>
              communication_state = RECEIVING_RELIABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
              LoRA_sendPacket(received_packet);
 80019b0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fbb1 	bl	800111c <LoRA_sendPacket>
 80019ba:	e65b      	b.n	8001674 <communicationHandler+0xd8>
 80019bc:	08018b1c 	.word	0x08018b1c
 80019c0:	08018b24 	.word	0x08018b24
 80019c4:	08018b2c 	.word	0x08018b2c
 80019c8:	08018b30 	.word	0x08018b30
 80019cc:	08018b34 	.word	0x08018b34
 80019d0:	08018b64 	.word	0x08018b64
            }
          }
          else if (HAL_GetTick()-previousTime > wait_time)
 80019d4:	f002 f9f2 	bl	8003dbc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f8d7 2614 	ldr.w	r2, [r7, #1556]	; 0x614
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f4bf ae45 	bcs.w	8001674 <communicationHandler+0xd8>
          {
            wait_time = rand_range(3, 13)*100;
 80019ea:	210d      	movs	r1, #13
 80019ec:	2003      	movs	r0, #3
 80019ee:	f7ff f98b 	bl	8000d08 <rand_range>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2264      	movs	r2, #100	; 0x64
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
            previousTime = HAL_GetTick();
 80019fe:	f002 f9dd 	bl	8003dbc <HAL_GetTick>
 8001a02:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618
            LoRA_sendPacket("$");
 8001a06:	4802      	ldr	r0, [pc, #8]	; (8001a10 <communicationHandler+0x474>)
 8001a08:	f7ff fb88 	bl	800111c <LoRA_sendPacket>
      if(communication_state == RECEIVING_RELIABLE)
 8001a0c:	e632      	b.n	8001674 <communicationHandler+0xd8>
 8001a0e:	bf00      	nop
 8001a10:	08018b2c 	.word	0x08018b2c
 8001a14:	00000000 	.word	0x00000000

08001a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8001a1e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001a20:	4bad      	ldr	r3, [pc, #692]	; (8001cd8 <main+0x2c0>)
 8001a22:	f507 7459 	add.w	r4, r7, #868	; 0x364
 8001a26:	461d      	mov	r5, r3
 8001a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a30:	c403      	stmia	r4!, {r0, r1}
 8001a32:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f002 f93c 	bl	8003cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a38:	f000 f972 	bl	8001d20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a3c:	f000 f9e8 	bl	8001e10 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a40:	f000 ff86 	bl	8002950 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a44:	f000 ff24 	bl	8002890 <MX_DMA_Init>
  MX_SPI3_Init();
 8001a48:	f000 fc7e 	bl	8002348 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001a4c:	f000 faf8 	bl	8002040 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001a50:	f000 fed2 	bl	80027f8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001a54:	f000 fa0e 	bl	8001e74 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001a58:	f000 fd88 	bl	800256c <MX_TIM4_Init>
  MX_ADC3_Init();
 8001a5c:	f000 fa82 	bl	8001f64 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001a60:	f000 fc1c 	bl	800229c <MX_SPI2_Init>
  MX_I2C2_Init();
 8001a64:	f000 fb50 	bl	8002108 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001a68:	f000 fcc4 	bl	80023f4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001a6c:	f000 fdfa 	bl	8002664 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001a70:	f000 fd18 	bl	80024a4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001a74:	f015 f956 	bl	8016d24 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001a78:	f000 fbba 	bl	80021f0 <MX_SPI1_Init>
  MX_UART4_Init();
 8001a7c:	f000 fe70 	bl	8002760 <MX_UART4_Init>
  MX_FATFS_Init();
 8001a80:	f012 feba 	bl	80147f8 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001a84:	f000 fb96 	bl	80021b4 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001a88:	f000 fe46 	bl	8002718 <MX_TIM13_Init>
  MX_RNG_Init();
 8001a8c:	f000 fb7c 	bl	8002188 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001a90:	2332      	movs	r3, #50	; 0x32
 8001a92:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
	const double SPEED = 2.0/2000;
 8001a96:	a38e      	add	r3, pc, #568	; (adr r3, 8001cd0 <main+0x2b8>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
	const double r_offset = 0;
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
	const double g_offset = 1;
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b8a      	ldr	r3, [pc, #552]	; (8001cdc <main+0x2c4>)
 8001ab2:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
	const double b_offset = 2;
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001abe:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001ac2:	213c      	movs	r1, #60	; 0x3c
 8001ac4:	2010      	movs	r0, #16
 8001ac6:	f7fe fe5d 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001aca:	2130      	movs	r1, #48	; 0x30
 8001acc:	2011      	movs	r0, #17
 8001ace:	f7fe fe59 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	2013      	movs	r0, #19
 8001ad6:	f7fe fe55 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001ada:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ade:	f002 f979 	bl	8003dd4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001ae2:	21bf      	movs	r1, #191	; 0xbf
 8001ae4:	201c      	movs	r0, #28
 8001ae6:	f7fe fdf9 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001aea:	2002      	movs	r0, #2
 8001aec:	f002 f972 	bl	8003dd4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001af0:	2158      	movs	r1, #88	; 0x58
 8001af2:	201b      	movs	r0, #27
 8001af4:	f7fe fdf2 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001af8:	21d8      	movs	r1, #216	; 0xd8
 8001afa:	201b      	movs	r0, #27
 8001afc:	f7fe fdee 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	uint32_t lastTime = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390

	float calOmegaX = 0;
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	float calOmegaY = 0;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
	float calOmegaZ = 0;
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8001b2c:	e022      	b.n	8001b74 <main+0x15c>
		calOmegaX += LG2_Get_Gyro_X();
 8001b2e:	f7fe fe51 	bl	80007d4 <LG2_Get_Gyro_X>
 8001b32:	eeb0 7a40 	vmov.f32	s14, s0
 8001b36:	edd7 7af3 	vldr	s15, [r7, #972]	; 0x3cc
 8001b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b3e:	edc7 7af3 	vstr	s15, [r7, #972]	; 0x3cc
		calOmegaY += LG2_Get_Gyro_Y();
 8001b42:	f7fe fe77 	bl	8000834 <LG2_Get_Gyro_Y>
 8001b46:	eeb0 7a40 	vmov.f32	s14, s0
 8001b4a:	edd7 7af2 	vldr	s15, [r7, #968]	; 0x3c8
 8001b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b52:	edc7 7af2 	vstr	s15, [r7, #968]	; 0x3c8
		calOmegaZ += LG2_Get_Gyro_Z();
 8001b56:	f7fe fe9f 	bl	8000898 <LG2_Get_Gyro_Z>
 8001b5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b5e:	edd7 7af1 	vldr	s15, [r7, #964]	; 0x3c4
 8001b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b66:	edc7 7af1 	vstr	s15, [r7, #964]	; 0x3c4
	for(int i = 0; i < 500; i++){
 8001b6a:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8001b74:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8001b78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b7c:	dbd7      	blt.n	8001b2e <main+0x116>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001b7e:	ed97 7af3 	vldr	s14, [r7, #972]	; 0x3cc
 8001b82:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001ce0 <main+0x2c8>
 8001b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8a:	edc7 7af3 	vstr	s15, [r7, #972]	; 0x3cc
	calOmegaY /= 500;
 8001b8e:	ed97 7af2 	vldr	s14, [r7, #968]	; 0x3c8
 8001b92:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001ce0 <main+0x2c8>
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	edc7 7af2 	vstr	s15, [r7, #968]	; 0x3c8
	calOmegaZ /= 500;
 8001b9e:	ed97 7af1 	vldr	s14, [r7, #964]	; 0x3c4
 8001ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001ce0 <main+0x2c8>
 8001ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001baa:	edc7 7af1 	vstr	s15, [r7, #964]	; 0x3c4

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	484c      	ldr	r0, [pc, #304]	; (8001ce4 <main+0x2cc>)
 8001bb4:	f006 fbc0 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001bb8:	20c8      	movs	r0, #200	; 0xc8
 8001bba:	f002 f90b 	bl	8003dd4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4848      	ldr	r0, [pc, #288]	; (8001ce4 <main+0x2cc>)
 8001bc4:	f006 fbb8 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001bc8:	20c8      	movs	r0, #200	; 0xc8
 8001bca:	f002 f903 	bl	8003dd4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4844      	ldr	r0, [pc, #272]	; (8001ce4 <main+0x2cc>)
 8001bd4:	f006 fbb0 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001bd8:	20c8      	movs	r0, #200	; 0xc8
 8001bda:	f002 f8fb 	bl	8003dd4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2104      	movs	r1, #4
 8001be2:	4841      	ldr	r0, [pc, #260]	; (8001ce8 <main+0x2d0>)
 8001be4:	f006 fba8 	bl	8008338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2108      	movs	r1, #8
 8001bec:	483e      	ldr	r0, [pc, #248]	; (8001ce8 <main+0x2d0>)
 8001bee:	f006 fba3 	bl	8008338 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	483d      	ldr	r0, [pc, #244]	; (8001cec <main+0x2d4>)
 8001bf6:	f00e f80d 	bl	800fc14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	483b      	ldr	r0, [pc, #236]	; (8001cec <main+0x2d4>)
 8001bfe:	f00e f809 	bl	800fc14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c02:	2108      	movs	r1, #8
 8001c04:	4839      	ldr	r0, [pc, #228]	; (8001cec <main+0x2d4>)
 8001c06:	f00e f805 	bl	800fc14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001c0a:	210c      	movs	r1, #12
 8001c0c:	4837      	ldr	r0, [pc, #220]	; (8001cec <main+0x2d4>)
 8001c0e:	f00e f801 	bl	800fc14 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001c12:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001cf0 <main+0x2d8>
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7fe fe76 	bl	8000908 <setServo>
    setServo(2, 180);
 8001c1c:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001cf4 <main+0x2dc>
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7fe fe71 	bl	8000908 <setServo>
    setServo(3, 0);
 8001c26:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8001cf8 <main+0x2e0>
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f7fe fe6c 	bl	8000908 <setServo>
    setServo(4, 45);
 8001c30:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001cfc <main+0x2e4>
 8001c34:	2004      	movs	r0, #4
 8001c36:	f7fe fe67 	bl	8000908 <setServo>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
	long last_packet = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
	int ARMED = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[MAX_PAYLOAD_LENGHT] = "";
 8001c4c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001c50:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	22f6      	movs	r2, #246	; 0xf6
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f015 fdd8 	bl	8017814 <memset>
  disarm(state);
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fae0 	bl	800122c <disarm>
  LoRA_begin(868000000);
 8001c6c:	4824      	ldr	r0, [pc, #144]	; (8001d00 <main+0x2e8>)
 8001c6e:	f7ff f999 	bl	8000fa4 <LoRA_begin>
  CDC_Transmit_HS("New way forward\n", strlen("New way forward\n"));
 8001c72:	2110      	movs	r1, #16
 8001c74:	4823      	ldr	r0, [pc, #140]	; (8001d04 <main+0x2ec>)
 8001c76:	f015 f92b 	bl	8016ed0 <CDC_Transmit_HS>
  communicationHandler(groundstationReliableReceiveHandle, groundstationStreamReceiveHandle, groundstationStreamSendHandle, groundstationReliableSendHandle, SENDING_RELIABLE);
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <main+0x2f0>)
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <main+0x2f4>)
 8001c82:	4923      	ldr	r1, [pc, #140]	; (8001d10 <main+0x2f8>)
 8001c84:	4823      	ldr	r0, [pc, #140]	; (8001d14 <main+0x2fc>)
 8001c86:	f7ff fc89 	bl	800159c <communicationHandler>
  HAL_Delay(100);
 8001c8a:	2064      	movs	r0, #100	; 0x64
 8001c8c:	f002 f8a2 	bl	8003dd4 <HAL_Delay>
  CDC_Transmit_HS("Old way forward\n", strlen("Old way forward\n"));
 8001c90:	2110      	movs	r1, #16
 8001c92:	4821      	ldr	r0, [pc, #132]	; (8001d18 <main+0x300>)
 8001c94:	f015 f91c 	bl	8016ed0 <CDC_Transmit_HS>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001c98:	f002 f890 	bl	8003dbc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cac:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001d1c <main+0x304>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	edc7 7ae0 	vstr	s15, [r7, #896]	; 0x380

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001cb8:	f002 f880 	bl	8003dbc <HAL_GetTick>
 8001cbc:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
 8001cc0:	2300      	movs	r3, #0
		//HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f507 7774 	add.w	r7, r7, #976	; 0x3d0
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bdb0      	pop	{r4, r5, r7, pc}
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cd4:	3f50624d 	.word	0x3f50624d
 8001cd8:	08018bb8 	.word	0x08018bb8
 8001cdc:	3ff00000 	.word	0x3ff00000
 8001ce0:	43fa0000 	.word	0x43fa0000
 8001ce4:	58020c00 	.word	0x58020c00
 8001ce8:	58021800 	.word	0x58021800
 8001cec:	24001180 	.word	0x24001180
 8001cf0:	42b40000 	.word	0x42b40000
 8001cf4:	43340000 	.word	0x43340000
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	42340000 	.word	0x42340000
 8001d00:	33bca100 	.word	0x33bca100
 8001d04:	08018b90 	.word	0x08018b90
 8001d08:	080014d9 	.word	0x080014d9
 8001d0c:	080014bd 	.word	0x080014bd
 8001d10:	0800149d 	.word	0x0800149d
 8001d14:	0800147d 	.word	0x0800147d
 8001d18:	08018ba4 	.word	0x08018ba4
 8001d1c:	447a0000 	.word	0x447a0000

08001d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b09c      	sub	sp, #112	; 0x70
 8001d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	224c      	movs	r2, #76	; 0x4c
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f015 fd70 	bl	8017814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2220      	movs	r2, #32
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f015 fd6a 	bl	8017814 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d40:	2002      	movs	r0, #2
 8001d42:	f007 ff0d 	bl	8009b60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <SystemClock_Config+0xec>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d52:	4a2e      	ldr	r2, [pc, #184]	; (8001e0c <SystemClock_Config+0xec>)
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d58:	6193      	str	r3, [r2, #24]
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <SystemClock_Config+0xec>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d66:	bf00      	nop
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <SystemClock_Config+0xec>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d74:	d1f8      	bne.n	8001d68 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001d76:	2322      	movs	r3, #34	; 0x22
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d82:	2301      	movs	r3, #1
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d86:	2302      	movs	r3, #2
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001d92:	230c      	movs	r3, #12
 8001d94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001da2:	230c      	movs	r3, #12
 8001da4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4618      	mov	r0, r3
 8001db4:	f007 ff1e 	bl	8009bf4 <HAL_RCC_OscConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001dbe:	f000 ff31 	bl	8002c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc2:	233f      	movs	r3, #63	; 0x3f
 8001dc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001dce:	2308      	movs	r3, #8
 8001dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001dd6:	2340      	movs	r3, #64	; 0x40
 8001dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001de0:	2340      	movs	r3, #64	; 0x40
 8001de2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2101      	movs	r1, #1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f008 fadd 	bl	800a3a8 <HAL_RCC_ClockConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001df4:	f000 ff16 	bl	8002c24 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001df8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f008 fc88 	bl	800a714 <HAL_RCC_MCOConfig>
}
 8001e04:	bf00      	nop
 8001e06:	3770      	adds	r7, #112	; 0x70
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	58024800 	.word	0x58024800

08001e10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0ae      	sub	sp, #184	; 0xb8
 8001e14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e16:	463b      	mov	r3, r7
 8001e18:	22b8      	movs	r2, #184	; 0xb8
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f015 fcf9 	bl	8017814 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001e22:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001e32:	230c      	movs	r3, #12
 8001e34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001e36:	2304      	movs	r3, #4
 8001e38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e52:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f008 fe99 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001e68:	f000 fedc 	bl	8002c24 <Error_Handler>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	37b8      	adds	r7, #184	; 0xb8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2224      	movs	r2, #36	; 0x24
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f015 fcc1 	bl	8017814 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001e94:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <MX_ADC1_Init+0xe8>)
 8001e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001e98:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001e9a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001e9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ef2:	4819      	ldr	r0, [pc, #100]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001ef4:	f002 f9ee 	bl	80042d4 <HAL_ADC_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001efe:	f000 fe91 	bl	8002c24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4812      	ldr	r0, [pc, #72]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001f0e:	f003 fa29 	bl	8005364 <HAL_ADCEx_MultiModeConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001f18:	f000 fe84 	bl	8002c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_ADC1_Init+0xec>)
 8001f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f20:	2306      	movs	r3, #6
 8001f22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001f24:	2303      	movs	r3, #3
 8001f26:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_ADC1_Init+0xe4>)
 8001f42:	f002 fbcf 	bl	80046e4 <HAL_ADC_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001f4c:	f000 fe6a 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3730      	adds	r7, #48	; 0x30
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	24000bfc 	.word	0x24000bfc
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	2a000400 	.word	0x2a000400

08001f64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2224      	movs	r2, #36	; 0x24
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f015 fc4f 	bl	8017814 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001f78:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <MX_ADC3_Init+0xd4>)
 8001f7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001f7e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001f82:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001f86:	2208      	movs	r2, #8
 8001f88:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f96:	4b27      	ldr	r3, [pc, #156]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001f98:	2204      	movs	r2, #4
 8001f9a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001fea:	4812      	ldr	r0, [pc, #72]	; (8002034 <MX_ADC3_Init+0xd0>)
 8001fec:	f002 f972 	bl	80042d4 <HAL_ADC_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001ff6:	f000 fe15 	bl	8002c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <MX_ADC3_Init+0xd8>)
 8001ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ffe:	2306      	movs	r3, #6
 8002000:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002006:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800200a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800200c:	2304      	movs	r3, #4
 800200e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_ADC3_Init+0xd0>)
 800201e:	f002 fb61 	bl	80046e4 <HAL_ADC_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002028:	f000 fdfc 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	24000c6c 	.word	0x24000c6c
 8002038:	58026000 	.word	0x58026000
 800203c:	04300002 	.word	0x04300002

08002040 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002046:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <MX_FDCAN3_Init+0xc4>)
 8002048:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002058:	2200      	movs	r2, #0
 800205a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 800205e:	2200      	movs	r2, #0
 8002060:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002064:	2200      	movs	r2, #0
 8002066:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 800206a:	2210      	movs	r2, #16
 800206c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002070:	2201      	movs	r2, #1
 8002072:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002076:	2202      	movs	r2, #2
 8002078:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 800207c:	2202      	movs	r2, #2
 800207e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002082:	2201      	movs	r2, #1
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002088:	2201      	movs	r2, #1
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 800208e:	2201      	movs	r2, #1
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 8002094:	2201      	movs	r2, #1
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 800209a:	2200      	movs	r2, #0
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020b2:	2204      	movs	r2, #4
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020be:	2204      	movs	r2, #4
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020ca:	2204      	movs	r2, #4
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020e8:	2204      	movs	r2, #4
 80020ea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <MX_FDCAN3_Init+0xc0>)
 80020ee:	f005 fbff 	bl	80078f0 <HAL_FDCAN_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80020f8:	f000 fd94 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	24000dcc 	.word	0x24000dcc
 8002104:	4000d400 	.word	0x4000d400

08002108 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MX_I2C2_Init+0x74>)
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <MX_I2C2_Init+0x78>)
 8002110:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_I2C2_Init+0x74>)
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <MX_I2C2_Init+0x7c>)
 8002116:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_I2C2_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_I2C2_Init+0x74>)
 8002120:	2201      	movs	r2, #1
 8002122:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_I2C2_Init+0x74>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_I2C2_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_I2C2_Init+0x74>)
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_I2C2_Init+0x74>)
 8002138:	2200      	movs	r2, #0
 800213a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_I2C2_Init+0x74>)
 800213e:	2200      	movs	r2, #0
 8002140:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002142:	480e      	ldr	r0, [pc, #56]	; (800217c <MX_I2C2_Init+0x74>)
 8002144:	f006 f912 	bl	800836c <HAL_I2C_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800214e:	f000 fd69 	bl	8002c24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002152:	2100      	movs	r1, #0
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <MX_I2C2_Init+0x74>)
 8002156:	f006 f9b3 	bl	80084c0 <HAL_I2CEx_ConfigAnalogFilter>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002160:	f000 fd60 	bl	8002c24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002164:	2100      	movs	r1, #0
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_I2C2_Init+0x74>)
 8002168:	f006 f9f5 	bl	8008556 <HAL_I2CEx_ConfigDigitalFilter>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002172:	f000 fd57 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	24000e6c 	.word	0x24000e6c
 8002180:	40005800 	.word	0x40005800
 8002184:	20303e5d 	.word	0x20303e5d

08002188 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <MX_RNG_Init+0x24>)
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <MX_RNG_Init+0x28>)
 8002190:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_RNG_Init+0x24>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <MX_RNG_Init+0x24>)
 800219a:	f00b f8e1 	bl	800d360 <HAL_RNG_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80021a4:	f000 fd3e 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	24000ec0 	.word	0x24000ec0
 80021b0:	48021800 	.word	0x48021800

080021b4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_SDMMC2_SD_Init+0x34>)
 80021ba:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <MX_SDMMC2_SD_Init+0x38>)
 80021bc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <MX_SDMMC2_SD_Init+0x34>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_SDMMC2_SD_Init+0x34>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <MX_SDMMC2_SD_Init+0x34>)
 80021cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <MX_SDMMC2_SD_Init+0x34>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <MX_SDMMC2_SD_Init+0x34>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	24000ed4 	.word	0x24000ed4
 80021ec:	48022400 	.word	0x48022400

080021f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <MX_SPI1_Init+0xa4>)
 80021f6:	4a28      	ldr	r2, [pc, #160]	; (8002298 <MX_SPI1_Init+0xa8>)
 80021f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <MX_SPI1_Init+0xa4>)
 80021fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <MX_SPI1_Init+0xa4>)
 800220a:	2207      	movs	r2, #7
 800220c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <MX_SPI1_Init+0xa4>)
 800221c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002224:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002228:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <MX_SPI1_Init+0xa4>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002238:	2200      	movs	r2, #0
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <MX_SPI1_Init+0xa4>)
 800223e:	2200      	movs	r2, #0
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002248:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <MX_SPI1_Init+0xa4>)
 800224c:	2200      	movs	r2, #0
 800224e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002258:	2200      	movs	r2, #0
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <MX_SPI1_Init+0xa4>)
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002264:	2200      	movs	r2, #0
 8002266:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <MX_SPI1_Init+0xa4>)
 800226a:	2200      	movs	r2, #0
 800226c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002270:	2200      	movs	r2, #0
 8002272:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002276:	2200      	movs	r2, #0
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_SPI1_Init+0xa4>)
 800227c:	2200      	movs	r2, #0
 800227e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <MX_SPI1_Init+0xa4>)
 8002282:	f00c fe7f 	bl	800ef84 <HAL_SPI_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800228c:	f000 fcca 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	24000f50 	.word	0x24000f50
 8002298:	40013000 	.word	0x40013000

0800229c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <MX_SPI2_Init+0xa8>)
 80022a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022b6:	2207      	movs	r2, #7
 80022b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022d0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80022d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <MX_SPI2_Init+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <MX_SPI2_Init+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <MX_SPI2_Init+0xa4>)
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_SPI2_Init+0xa4>)
 8002310:	2200      	movs	r2, #0
 8002312:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <MX_SPI2_Init+0xa4>)
 8002316:	2200      	movs	r2, #0
 8002318:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_SPI2_Init+0xa4>)
 800231c:	2200      	movs	r2, #0
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <MX_SPI2_Init+0xa4>)
 8002322:	2200      	movs	r2, #0
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <MX_SPI2_Init+0xa4>)
 8002328:	2200      	movs	r2, #0
 800232a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800232c:	4804      	ldr	r0, [pc, #16]	; (8002340 <MX_SPI2_Init+0xa4>)
 800232e:	f00c fe29 	bl	800ef84 <HAL_SPI_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002338:	f000 fc74 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	24000fd8 	.word	0x24000fd8
 8002344:	40003800 	.word	0x40003800

08002348 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <MX_SPI3_Init+0xa4>)
 800234e:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <MX_SPI3_Init+0xa8>)
 8002350:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <MX_SPI3_Init+0xa4>)
 8002354:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002358:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <MX_SPI3_Init+0xa4>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <MX_SPI3_Init+0xa4>)
 8002362:	2207      	movs	r2, #7
 8002364:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <MX_SPI3_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800236c:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <MX_SPI3_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <MX_SPI3_Init+0xa4>)
 8002374:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002378:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <MX_SPI3_Init+0xa4>)
 800237c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002380:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <MX_SPI3_Init+0xa4>)
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <MX_SPI3_Init+0xa4>)
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <MX_SPI3_Init+0xa4>)
 8002390:	2200      	movs	r2, #0
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <MX_SPI3_Init+0xa4>)
 8002396:	2200      	movs	r2, #0
 8002398:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <MX_SPI3_Init+0xa4>)
 800239c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <MX_SPI3_Init+0xa4>)
 80023da:	f00c fdd3 	bl	800ef84 <HAL_SPI_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80023e4:	f000 fc1e 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	24001060 	.word	0x24001060
 80023f0:	40003c00 	.word	0x40003c00

080023f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002406:	463b      	mov	r3, r7
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	615a      	str	r2, [r3, #20]
 8002416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <MX_TIM2_Init+0xac>)
 800241a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800241e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002420:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <MX_TIM2_Init+0xac>)
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <MX_TIM2_Init+0xac>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <MX_TIM2_Init+0xac>)
 800242e:	225a      	movs	r2, #90	; 0x5a
 8002430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <MX_TIM2_Init+0xac>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <MX_TIM2_Init+0xac>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800243e:	4818      	ldr	r0, [pc, #96]	; (80024a0 <MX_TIM2_Init+0xac>)
 8002440:	f00d fb90 	bl	800fb64 <HAL_TIM_PWM_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800244a:	f000 fbeb 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	4810      	ldr	r0, [pc, #64]	; (80024a0 <MX_TIM2_Init+0xac>)
 800245e:	f00e fe17 	bl	8011090 <HAL_TIMEx_MasterConfigSynchronization>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002468:	f000 fbdc 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800246c:	2360      	movs	r3, #96	; 0x60
 800246e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	2208      	movs	r2, #8
 8002480:	4619      	mov	r1, r3
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM2_Init+0xac>)
 8002484:	f00e f836 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800248e:	f000 fbc9 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM2_Init+0xac>)
 8002494:	f001 f91e 	bl	80036d4 <HAL_TIM_MspPostInit>

}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	240010e8 	.word	0x240010e8

080024a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b6:	463b      	mov	r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
 80024c4:	615a      	str	r2, [r3, #20]
 80024c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024ca:	4a27      	ldr	r2, [pc, #156]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024dc:	225a      	movs	r2, #90	; 0x5a
 80024de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ec:	481d      	ldr	r0, [pc, #116]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024ee:	f00d fb39 	bl	800fb64 <HAL_TIM_PWM_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024f8:	f000 fb94 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4816      	ldr	r0, [pc, #88]	; (8002564 <MX_TIM3_Init+0xc0>)
 800250c:	f00e fdc0 	bl	8011090 <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002516:	f000 fb85 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251a:	2360      	movs	r3, #96	; 0x60
 800251c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252a:	463b      	mov	r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	4619      	mov	r1, r3
 8002530:	480c      	ldr	r0, [pc, #48]	; (8002564 <MX_TIM3_Init+0xc0>)
 8002532:	f00d ffdf 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800253c:	f000 fb72 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	2204      	movs	r2, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4807      	ldr	r0, [pc, #28]	; (8002564 <MX_TIM3_Init+0xc0>)
 8002548:	f00d ffd4 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002552:	f000 fb67 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002556:	4803      	ldr	r0, [pc, #12]	; (8002564 <MX_TIM3_Init+0xc0>)
 8002558:	f001 f8bc 	bl	80036d4 <HAL_TIM_MspPostInit>

}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24001134 	.word	0x24001134
 8002568:	40000400 	.word	0x40000400

0800256c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257e:	463b      	mov	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	615a      	str	r2, [r3, #20]
 800258e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <MX_TIM4_Init+0xf0>)
 8002592:	4a33      	ldr	r2, [pc, #204]	; (8002660 <MX_TIM4_Init+0xf4>)
 8002594:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <MX_TIM4_Init+0xf0>)
 8002598:	221c      	movs	r2, #28
 800259a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <MX_TIM4_Init+0xf0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <MX_TIM4_Init+0xf0>)
 80025a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80025a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b2c      	ldr	r3, [pc, #176]	; (800265c <MX_TIM4_Init+0xf0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <MX_TIM4_Init+0xf0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025b6:	4829      	ldr	r0, [pc, #164]	; (800265c <MX_TIM4_Init+0xf0>)
 80025b8:	f00d fad4 	bl	800fb64 <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80025c2:	f000 fb2f 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4821      	ldr	r0, [pc, #132]	; (800265c <MX_TIM4_Init+0xf0>)
 80025d6:	f00e fd5b 	bl	8011090 <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80025e0:	f000 fb20 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e4:	2360      	movs	r3, #96	; 0x60
 80025e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	2200      	movs	r2, #0
 80025f8:	4619      	mov	r1, r3
 80025fa:	4818      	ldr	r0, [pc, #96]	; (800265c <MX_TIM4_Init+0xf0>)
 80025fc:	f00d ff7a 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002606:	f000 fb0d 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	2204      	movs	r2, #4
 800260e:	4619      	mov	r1, r3
 8002610:	4812      	ldr	r0, [pc, #72]	; (800265c <MX_TIM4_Init+0xf0>)
 8002612:	f00d ff6f 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800261c:	f000 fb02 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002620:	463b      	mov	r3, r7
 8002622:	2208      	movs	r2, #8
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	; (800265c <MX_TIM4_Init+0xf0>)
 8002628:	f00d ff64 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002632:	f000 faf7 	bl	8002c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002636:	463b      	mov	r3, r7
 8002638:	220c      	movs	r2, #12
 800263a:	4619      	mov	r1, r3
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <MX_TIM4_Init+0xf0>)
 800263e:	f00d ff59 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002648:	f000 faec 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <MX_TIM4_Init+0xf0>)
 800264e:	f001 f841 	bl	80036d4 <HAL_TIM_MspPostInit>

}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	24001180 	.word	0x24001180
 8002660:	40000800 	.word	0x40000800

08002664 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266a:	f107 031c 	add.w	r3, r7, #28
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002676:	463b      	mov	r3, r7
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
 8002684:	615a      	str	r2, [r3, #20]
 8002686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_TIM5_Init+0xac>)
 800268a:	4a22      	ldr	r2, [pc, #136]	; (8002714 <MX_TIM5_Init+0xb0>)
 800268c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <MX_TIM5_Init+0xac>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_TIM5_Init+0xac>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_TIM5_Init+0xac>)
 800269c:	225a      	movs	r2, #90	; 0x5a
 800269e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <MX_TIM5_Init+0xac>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_TIM5_Init+0xac>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026ac:	4818      	ldr	r0, [pc, #96]	; (8002710 <MX_TIM5_Init+0xac>)
 80026ae:	f00d fa59 	bl	800fb64 <HAL_TIM_PWM_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80026b8:	f000 fab4 	bl	8002c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4811      	ldr	r0, [pc, #68]	; (8002710 <MX_TIM5_Init+0xac>)
 80026cc:	f00e fce0 	bl	8011090 <HAL_TIMEx_MasterConfigSynchronization>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80026d6:	f000 faa5 	bl	8002c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026da:	2360      	movs	r3, #96	; 0x60
 80026dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026ea:	463b      	mov	r3, r7
 80026ec:	220c      	movs	r2, #12
 80026ee:	4619      	mov	r1, r3
 80026f0:	4807      	ldr	r0, [pc, #28]	; (8002710 <MX_TIM5_Init+0xac>)
 80026f2:	f00d feff 	bl	80104f4 <HAL_TIM_PWM_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80026fc:	f000 fa92 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <MX_TIM5_Init+0xac>)
 8002702:	f000 ffe7 	bl	80036d4 <HAL_TIM_MspPostInit>

}
 8002706:	bf00      	nop
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	240011cc 	.word	0x240011cc
 8002714:	40000c00 	.word	0x40000c00

08002718 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_TIM13_Init+0x40>)
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <MX_TIM13_Init+0x44>)
 8002720:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <MX_TIM13_Init+0x40>)
 8002724:	225f      	movs	r2, #95	; 0x5f
 8002726:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MX_TIM13_Init+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <MX_TIM13_Init+0x40>)
 8002730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002734:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <MX_TIM13_Init+0x40>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_TIM13_Init+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_TIM13_Init+0x40>)
 8002744:	f00d f9b7 	bl	800fab6 <HAL_TIM_Base_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800274e:	f000 fa69 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	24001218 	.word	0x24001218
 800275c:	40001c00 	.word	0x40001c00

08002760 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <MX_UART4_Init+0x90>)
 8002766:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <MX_UART4_Init+0x94>)
 8002768:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <MX_UART4_Init+0x90>)
 800276c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002770:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <MX_UART4_Init+0x90>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_UART4_Init+0x90>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_UART4_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <MX_UART4_Init+0x90>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <MX_UART4_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <MX_UART4_Init+0x90>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_UART4_Init+0x90>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <MX_UART4_Init+0x90>)
 800279e:	2200      	movs	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <MX_UART4_Init+0x90>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027a8:	4811      	ldr	r0, [pc, #68]	; (80027f0 <MX_UART4_Init+0x90>)
 80027aa:	f00e fd2b 	bl	8011204 <HAL_UART_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80027b4:	f000 fa36 	bl	8002c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b8:	2100      	movs	r1, #0
 80027ba:	480d      	ldr	r0, [pc, #52]	; (80027f0 <MX_UART4_Init+0x90>)
 80027bc:	f00f fe31 	bl	8012422 <HAL_UARTEx_SetTxFifoThreshold>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80027c6:	f000 fa2d 	bl	8002c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ca:	2100      	movs	r1, #0
 80027cc:	4808      	ldr	r0, [pc, #32]	; (80027f0 <MX_UART4_Init+0x90>)
 80027ce:	f00f fe66 	bl	801249e <HAL_UARTEx_SetRxFifoThreshold>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80027d8:	f000 fa24 	bl	8002c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80027dc:	4804      	ldr	r0, [pc, #16]	; (80027f0 <MX_UART4_Init+0x90>)
 80027de:	f00f fde7 	bl	80123b0 <HAL_UARTEx_DisableFifoMode>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80027e8:	f000 fa1c 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	240014bc 	.word	0x240014bc
 80027f4:	40004c00 	.word	0x40004c00

080027f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <MX_USART6_UART_Init+0x90>)
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <MX_USART6_UART_Init+0x94>)
 8002800:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002802:	4b21      	ldr	r3, [pc, #132]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002808:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <MX_USART6_UART_Init+0x90>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <MX_USART6_UART_Init+0x90>)
 800281e:	220c      	movs	r2, #12
 8002820:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <MX_USART6_UART_Init+0x90>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002836:	2200      	movs	r2, #0
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <MX_USART6_UART_Init+0x90>)
 800283c:	2200      	movs	r2, #0
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002840:	4811      	ldr	r0, [pc, #68]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002842:	f00e fcdf 	bl	8011204 <HAL_UART_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800284c:	f000 f9ea 	bl	8002c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002850:	2100      	movs	r1, #0
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002854:	f00f fde5 	bl	8012422 <HAL_UARTEx_SetTxFifoThreshold>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800285e:	f000 f9e1 	bl	8002c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002862:	2100      	movs	r1, #0
 8002864:	4808      	ldr	r0, [pc, #32]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002866:	f00f fe1a 	bl	801249e <HAL_UARTEx_SetRxFifoThreshold>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002870:	f000 f9d8 	bl	8002c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <MX_USART6_UART_Init+0x90>)
 8002876:	f00f fd9b 	bl	80123b0 <HAL_UARTEx_DisableFifoMode>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002880:	f000 f9d0 	bl	8002c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	24001550 	.word	0x24001550
 800288c:	40011400 	.word	0x40011400

08002890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <MX_DMA_Init+0xbc>)
 8002898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800289c:	4a2b      	ldr	r2, [pc, #172]	; (800294c <MX_DMA_Init+0xbc>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <MX_DMA_Init+0xbc>)
 80028a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <MX_DMA_Init+0xbc>)
 80028b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <MX_DMA_Init+0xbc>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <MX_DMA_Init+0xbc>)
 80028c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	200b      	movs	r0, #11
 80028d8:	f002 ff01 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80028dc:	200b      	movs	r0, #11
 80028de:	f002 ff18 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	200c      	movs	r0, #12
 80028e8:	f002 fef9 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80028ec:	200c      	movs	r0, #12
 80028ee:	f002 ff10 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	200d      	movs	r0, #13
 80028f8:	f002 fef1 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80028fc:	200d      	movs	r0, #13
 80028fe:	f002 ff08 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	200e      	movs	r0, #14
 8002908:	f002 fee9 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800290c:	200e      	movs	r0, #14
 800290e:	f002 ff00 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	200f      	movs	r0, #15
 8002918:	f002 fee1 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800291c:	200f      	movs	r0, #15
 800291e:	f002 fef8 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	2010      	movs	r0, #16
 8002928:	f002 fed9 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800292c:	2010      	movs	r0, #16
 800292e:	f002 fef0 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	2046      	movs	r0, #70	; 0x46
 8002938:	f002 fed1 	bl	80056de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800293c:	2046      	movs	r0, #70	; 0x46
 800293e:	f002 fee8 	bl	8005712 <HAL_NVIC_EnableIRQ>

}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	58024400 	.word	0x58024400

08002950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08c      	sub	sp, #48	; 0x30
 8002954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002966:	4ba7      	ldr	r3, [pc, #668]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	4aa5      	ldr	r2, [pc, #660]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002976:	4ba3      	ldr	r3, [pc, #652]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002984:	4b9f      	ldr	r3, [pc, #636]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	4a9e      	ldr	r2, [pc, #632]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 800298c:	f043 0320 	orr.w	r3, r3, #32
 8002990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002994:	4b9b      	ldr	r3, [pc, #620]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	4b98      	ldr	r3, [pc, #608]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	4a96      	ldr	r2, [pc, #600]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b2:	4b94      	ldr	r3, [pc, #592]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c0:	4b90      	ldr	r3, [pc, #576]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c6:	4a8f      	ldr	r2, [pc, #572]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d0:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e4:	4a87      	ldr	r2, [pc, #540]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ee:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029fc:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 80029fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a02:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0c:	4b7d      	ldr	r3, [pc, #500]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a20:	4a78      	ldr	r2, [pc, #480]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002a22:	f043 0308 	orr.w	r3, r3, #8
 8002a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2a:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <MX_GPIO_Init+0x2b4>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f241 5104 	movw	r1, #5380	; 0x1504
 8002a3e:	4872      	ldr	r0, [pc, #456]	; (8002c08 <MX_GPIO_Init+0x2b8>)
 8002a40:	f005 fc7a 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002a44:	2200      	movs	r2, #0
 8002a46:	f248 0106 	movw	r1, #32774	; 0x8006
 8002a4a:	4870      	ldr	r0, [pc, #448]	; (8002c0c <MX_GPIO_Init+0x2bc>)
 8002a4c:	f005 fc74 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2130      	movs	r1, #48	; 0x30
 8002a54:	486e      	ldr	r0, [pc, #440]	; (8002c10 <MX_GPIO_Init+0x2c0>)
 8002a56:	f005 fc6f 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	486d      	ldr	r0, [pc, #436]	; (8002c14 <MX_GPIO_Init+0x2c4>)
 8002a60:	f005 fc6a 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002a6a:	486b      	ldr	r0, [pc, #428]	; (8002c18 <MX_GPIO_Init+0x2c8>)
 8002a6c:	f005 fc64 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	210e      	movs	r1, #14
 8002a74:	4869      	ldr	r0, [pc, #420]	; (8002c1c <MX_GPIO_Init+0x2cc>)
 8002a76:	f005 fc5f 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002a80:	4867      	ldr	r0, [pc, #412]	; (8002c20 <MX_GPIO_Init+0x2d0>)
 8002a82:	f005 fc59 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4865      	ldr	r0, [pc, #404]	; (8002c20 <MX_GPIO_Init+0x2d0>)
 8002a8c:	f005 fc54 	bl	8008338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002a90:	f241 5304 	movw	r3, #5380	; 0x1504
 8002a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4857      	ldr	r0, [pc, #348]	; (8002c08 <MX_GPIO_Init+0x2b8>)
 8002aaa:	f005 fa85 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002aae:	f248 0306 	movw	r3, #32774	; 0x8006
 8002ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4851      	ldr	r0, [pc, #324]	; (8002c0c <MX_GPIO_Init+0x2bc>)
 8002ac8:	f005 fa76 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002acc:	2330      	movs	r3, #48	; 0x30
 8002ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	484b      	ldr	r0, [pc, #300]	; (8002c10 <MX_GPIO_Init+0x2c0>)
 8002ae4:	f005 fa68 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aec:	2301      	movs	r3, #1
 8002aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4619      	mov	r1, r3
 8002afe:	4845      	ldr	r0, [pc, #276]	; (8002c14 <MX_GPIO_Init+0x2c4>)
 8002b00:	f005 fa5a 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002b04:	2304      	movs	r3, #4
 8002b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 031c 	add.w	r3, r7, #28
 8002b14:	4619      	mov	r1, r3
 8002b16:	483f      	ldr	r0, [pc, #252]	; (8002c14 <MX_GPIO_Init+0x2c4>)
 8002b18:	f005 fa4e 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002b1c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	4838      	ldr	r0, [pc, #224]	; (8002c18 <MX_GPIO_Init+0x2c8>)
 8002b36:	f005 fa3f 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002b3a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4832      	ldr	r0, [pc, #200]	; (8002c18 <MX_GPIO_Init+0x2c8>)
 8002b50:	f005 fa32 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002b54:	2301      	movs	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	482d      	ldr	r0, [pc, #180]	; (8002c1c <MX_GPIO_Init+0x2cc>)
 8002b68:	f005 fa26 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002b6c:	230e      	movs	r3, #14
 8002b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b70:	2301      	movs	r3, #1
 8002b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b7c:	f107 031c 	add.w	r3, r7, #28
 8002b80:	4619      	mov	r1, r3
 8002b82:	4826      	ldr	r0, [pc, #152]	; (8002c1c <MX_GPIO_Init+0x2cc>)
 8002b84:	f005 fa18 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002b88:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b92:	2301      	movs	r3, #1
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	481a      	ldr	r0, [pc, #104]	; (8002c08 <MX_GPIO_Init+0x2b8>)
 8002b9e:	f005 fa0b 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002ba2:	f240 7301 	movw	r3, #1793	; 0x701
 8002ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4819      	ldr	r0, [pc, #100]	; (8002c20 <MX_GPIO_Init+0x2d0>)
 8002bbc:	f005 f9fc 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4812      	ldr	r0, [pc, #72]	; (8002c1c <MX_GPIO_Init+0x2cc>)
 8002bd4:	f005 f9f0 	bl	8007fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_GPIO_Init+0x2bc>)
 8002bf6:	f005 f9df 	bl	8007fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bfa:	bf00      	nop
 8002bfc:	3730      	adds	r7, #48	; 0x30
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58021000 	.word	0x58021000
 8002c0c:	58020000 	.word	0x58020000
 8002c10:	58020800 	.word	0x58020800
 8002c14:	58020400 	.word	0x58020400
 8002c18:	58021400 	.word	0x58021400
 8002c1c:	58021800 	.word	0x58021800
 8002c20:	58020c00 	.word	0x58020c00

08002c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c28:	b672      	cpsid	i
}
 8002c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c2c:	e7fe      	b.n	8002c2c <Error_Handler+0x8>
	...

08002c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_MspInit+0x30>)
 8002c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_MspInit+0x30>)
 8002c3e:	f043 0302 	orr.w	r3, r3, #2
 8002c42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_MspInit+0x30>)
 8002c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	58024400 	.word	0x58024400

08002c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5d      	ldr	r2, [pc, #372]	; (8002df8 <HAL_ADC_MspInit+0x194>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d159      	bne.n	8002d3a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c8c:	4a5b      	ldr	r2, [pc, #364]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002c8e:	f043 0320 	orr.w	r3, r3, #32
 8002c92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c96:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca4:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002caa:	4a54      	ldr	r2, [pc, #336]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb4:	4b51      	ldr	r3, [pc, #324]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 031c 	add.w	r3, r7, #28
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	484a      	ldr	r0, [pc, #296]	; (8002e00 <HAL_ADC_MspInit+0x19c>)
 8002cd6:	f005 f96f 	bl	8007fb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002cdc:	4a4a      	ldr	r2, [pc, #296]	; (8002e08 <HAL_ADC_MspInit+0x1a4>)
 8002cde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ce0:	4b48      	ldr	r3, [pc, #288]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002ce2:	2209      	movs	r2, #9
 8002ce4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cec:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cf2:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cfa:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d0a:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d1c:	4839      	ldr	r0, [pc, #228]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002d1e:	f002 fd13 	bl	8005748 <HAL_DMA_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002d28:	f7ff ff7c 	bl	8002c24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a35      	ldr	r2, [pc, #212]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002d30:	659a      	str	r2, [r3, #88]	; 0x58
 8002d32:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <HAL_ADC_MspInit+0x1a0>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d38:	e059      	b.n	8002dee <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a33      	ldr	r2, [pc, #204]	; (8002e0c <HAL_ADC_MspInit+0x1a8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d154      	bne.n	8002dee <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d54:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d68:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_ADC_MspInit+0x198>)
 8002d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002d80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002d84:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002d88:	f001 f848 	bl	8003e1c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002d8e:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <HAL_ADC_MspInit+0x1b0>)
 8002d90:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002d94:	2273      	movs	r2, #115	; 0x73
 8002d96:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002daa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dba:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dca:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002dd2:	480f      	ldr	r0, [pc, #60]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002dd4:	f002 fcb8 	bl	8005748 <HAL_DMA_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002dde:	f7ff ff21 	bl	8002c24 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002de6:	659a      	str	r2, [r3, #88]	; 0x58
 8002de8:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_ADC_MspInit+0x1ac>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002dee:	bf00      	nop
 8002df0:	3730      	adds	r7, #48	; 0x30
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	58020800 	.word	0x58020800
 8002e04:	24000cdc 	.word	0x24000cdc
 8002e08:	40020088 	.word	0x40020088
 8002e0c:	58026000 	.word	0x58026000
 8002e10:	24000d54 	.word	0x24000d54
 8002e14:	400204b8 	.word	0x400204b8

08002e18 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b0b8      	sub	sp, #224	; 0xe0
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	22b8      	movs	r2, #184	; 0xb8
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f014 fceb 	bl	8017814 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a26      	ldr	r2, [pc, #152]	; (8002edc <HAL_FDCAN_MspInit+0xc4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d145      	bne.n	8002ed4 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002e48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e58:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f007 fe98 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002e6a:	f7ff fedb 	bl	8002c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_FDCAN_MspInit+0xc8>)
 8002e70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e74:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <HAL_FDCAN_MspInit+0xc8>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_FDCAN_MspInit+0xc8>)
 8002e80:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_FDCAN_MspInit+0xc8>)
 8002e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e92:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <HAL_FDCAN_MspInit+0xc8>)
 8002e94:	f043 0320 	orr.w	r3, r3, #32
 8002e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_FDCAN_MspInit+0xc8>)
 8002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eaa:	23c0      	movs	r3, #192	; 0xc0
 8002eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ec8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <HAL_FDCAN_MspInit+0xcc>)
 8002ed0:	f005 f872 	bl	8007fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002ed4:	bf00      	nop
 8002ed6:	37e0      	adds	r7, #224	; 0xe0
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	4000d400 	.word	0x4000d400
 8002ee0:	58024400 	.word	0x58024400
 8002ee4:	58021400 	.word	0x58021400

08002ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0b8      	sub	sp, #224	; 0xe0
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	22b8      	movs	r2, #184	; 0xb8
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f014 fc83 	bl	8017814 <memset>
  if(hi2c->Instance==I2C2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <HAL_I2C_MspInit+0xd4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d14d      	bne.n	8002fb4 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f18:	f04f 0208 	mov.w	r2, #8
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f007 fe30 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002f3a:	f7ff fe73 	bl	8002c24 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_I2C_MspInit+0xd8>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_I2C_MspInit+0xd8>)
 8002f46:	f043 0320 	orr.w	r3, r3, #32
 8002f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_I2C_MspInit+0xd8>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f62:	2312      	movs	r3, #18
 8002f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f74:	2304      	movs	r3, #4
 8002f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4810      	ldr	r0, [pc, #64]	; (8002fc4 <HAL_I2C_MspInit+0xdc>)
 8002f82:	f005 f819 	bl	8007fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_I2C_MspInit+0xd8>)
 8002f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_I2C_MspInit+0xd8>)
 8002f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_I2C_MspInit+0xd8>)
 8002f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	2021      	movs	r0, #33	; 0x21
 8002faa:	f002 fb98 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002fae:	2021      	movs	r0, #33	; 0x21
 8002fb0:	f002 fbaf 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	37e0      	adds	r7, #224	; 0xe0
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40005800 	.word	0x40005800
 8002fc0:	58024400 	.word	0x58024400
 8002fc4:	58021400 	.word	0x58021400

08002fc8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b0b2      	sub	sp, #200	; 0xc8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	22b8      	movs	r2, #184	; 0xb8
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f014 fc1b 	bl	8017814 <memset>
  if(hrng->Instance==RNG)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_RNG_MspInit+0x6c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d121      	bne.n	800302c <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002fe8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f007 fdc8 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800300a:	f7ff fe0b 	bl	8002c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RNG_MspInit+0x70>)
 8003010:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <HAL_RNG_MspInit+0x70>)
 8003016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RNG_MspInit+0x70>)
 8003020:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800302c:	bf00      	nop
 800302e:	37c8      	adds	r7, #200	; 0xc8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	48021800 	.word	0x48021800
 8003038:	58024400 	.word	0x58024400

0800303c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0ba      	sub	sp, #232	; 0xe8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003054:	f107 0318 	add.w	r3, r7, #24
 8003058:	22b8      	movs	r2, #184	; 0xb8
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f014 fbd9 	bl	8017814 <memset>
  if(hsd->Instance==SDMMC2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a5d      	ldr	r2, [pc, #372]	; (80031dc <HAL_SD_MspInit+0x1a0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	f040 80b3 	bne.w	80031d4 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800306e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800307a:	2300      	movs	r3, #0
 800307c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800307e:	f107 0318 	add.w	r3, r7, #24
 8003082:	4618      	mov	r0, r3
 8003084:	f007 fd86 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800308e:	f7ff fdc9 	bl	8002c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8003092:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 8003094:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003098:	4a51      	ldr	r2, [pc, #324]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 800309a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800309e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80030a2:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 80030a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b0:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b6:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c0:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030ce:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 80030d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d4:	4a42      	ldr	r2, [pc, #264]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 80030d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030de:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <HAL_SD_MspInit+0x1a4>)
 80030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030ec:	2340      	movs	r3, #64	; 0x40
 80030ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fe:	2303      	movs	r3, #3
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003104:	230b      	movs	r3, #11
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800310e:	4619      	mov	r1, r3
 8003110:	4834      	ldr	r0, [pc, #208]	; (80031e4 <HAL_SD_MspInit+0x1a8>)
 8003112:	f004 ff51 	bl	8007fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003122:	2301      	movs	r3, #1
 8003124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800312e:	230b      	movs	r3, #11
 8003130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003138:	4619      	mov	r1, r3
 800313a:	482a      	ldr	r0, [pc, #168]	; (80031e4 <HAL_SD_MspInit+0x1a8>)
 800313c:	f004 ff3c 	bl	8007fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800314e:	2301      	movs	r3, #1
 8003150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800315a:	230b      	movs	r3, #11
 800315c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003160:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003164:	4619      	mov	r1, r3
 8003166:	4820      	ldr	r0, [pc, #128]	; (80031e8 <HAL_SD_MspInit+0x1ac>)
 8003168:	f004 ff26 	bl	8007fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800316c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003186:	230b      	movs	r3, #11
 8003188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800318c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003190:	4619      	mov	r1, r3
 8003192:	4815      	ldr	r0, [pc, #84]	; (80031e8 <HAL_SD_MspInit+0x1ac>)
 8003194:	f004 ff10 	bl	8007fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003198:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800319c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a0:	2302      	movs	r3, #2
 80031a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ac:	2303      	movs	r3, #3
 80031ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80031b2:	230a      	movs	r3, #10
 80031b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031bc:	4619      	mov	r1, r3
 80031be:	480a      	ldr	r0, [pc, #40]	; (80031e8 <HAL_SD_MspInit+0x1ac>)
 80031c0:	f004 fefa 	bl	8007fb8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2100      	movs	r1, #0
 80031c8:	207c      	movs	r0, #124	; 0x7c
 80031ca:	f002 fa88 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80031ce:	207c      	movs	r0, #124	; 0x7c
 80031d0:	f002 fa9f 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80031d4:	bf00      	nop
 80031d6:	37e8      	adds	r7, #232	; 0xe8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	48022400 	.word	0x48022400
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58020c00 	.word	0x58020c00
 80031e8:	58021800 	.word	0x58021800

080031ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08e      	sub	sp, #56	; 0x38
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a4f      	ldr	r2, [pc, #316]	; (8003348 <HAL_SPI_MspInit+0x15c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12e      	bne.n	800326c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800320e:	4b4f      	ldr	r3, [pc, #316]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003214:	4a4d      	ldr	r2, [pc, #308]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800321a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800321e:	4b4b      	ldr	r3, [pc, #300]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322c:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_SPI_MspInit+0x160>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003232:	4a46      	ldr	r2, [pc, #280]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_SPI_MspInit+0x160>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800324a:	23e0      	movs	r3, #224	; 0xe0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800325a:	2305      	movs	r3, #5
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003262:	4619      	mov	r1, r3
 8003264:	483a      	ldr	r0, [pc, #232]	; (8003350 <HAL_SPI_MspInit+0x164>)
 8003266:	f004 fea7 	bl	8007fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800326a:	e068      	b.n	800333e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a38      	ldr	r2, [pc, #224]	; (8003354 <HAL_SPI_MspInit+0x168>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d12f      	bne.n	80032d6 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003276:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800327c:	4a33      	ldr	r2, [pc, #204]	; (800334c <HAL_SPI_MspInit+0x160>)
 800327e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003286:	4b31      	ldr	r3, [pc, #196]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800328c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	4b2d      	ldr	r3, [pc, #180]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329a:	4a2c      	ldr	r2, [pc, #176]	; (800334c <HAL_SPI_MspInit+0x160>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a4:	4b29      	ldr	r3, [pc, #164]	; (800334c <HAL_SPI_MspInit+0x160>)
 80032a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80032b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032c4:	2305      	movs	r3, #5
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032cc:	4619      	mov	r1, r3
 80032ce:	4822      	ldr	r0, [pc, #136]	; (8003358 <HAL_SPI_MspInit+0x16c>)
 80032d0:	f004 fe72 	bl	8007fb8 <HAL_GPIO_Init>
}
 80032d4:	e033      	b.n	800333e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a20      	ldr	r2, [pc, #128]	; (800335c <HAL_SPI_MspInit+0x170>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d12e      	bne.n	800333e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_SPI_MspInit+0x160>)
 80032e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032e6:	4a19      	ldr	r2, [pc, #100]	; (800334c <HAL_SPI_MspInit+0x160>)
 80032e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_SPI_MspInit+0x160>)
 80032f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003304:	4a11      	ldr	r2, [pc, #68]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003306:	f043 0304 	orr.w	r3, r3, #4
 800330a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_SPI_MspInit+0x160>)
 8003310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800331c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800332e:	2306      	movs	r3, #6
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003336:	4619      	mov	r1, r3
 8003338:	4809      	ldr	r0, [pc, #36]	; (8003360 <HAL_SPI_MspInit+0x174>)
 800333a:	f004 fe3d 	bl	8007fb8 <HAL_GPIO_Init>
}
 800333e:	bf00      	nop
 8003340:	3738      	adds	r7, #56	; 0x38
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40013000 	.word	0x40013000
 800334c:	58024400 	.word	0x58024400
 8003350:	58020000 	.word	0x58020000
 8003354:	40003800 	.word	0x40003800
 8003358:	58020400 	.word	0x58020400
 800335c:	40003c00 	.word	0x40003c00
 8003360:	58020800 	.word	0x58020800

08003364 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	; 0x30
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 031c 	add.w	r3, r7, #28
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d15d      	bne.n	8003442 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003386:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800338c:	4a8c      	ldr	r2, [pc, #560]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003396:	4b8a      	ldr	r3, [pc, #552]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a4:	4b86      	ldr	r3, [pc, #536]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033aa:	4a85      	ldr	r2, [pc, #532]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b4:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033d2:	2301      	movs	r3, #1
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	f107 031c 	add.w	r3, r7, #28
 80033da:	4619      	mov	r1, r3
 80033dc:	4879      	ldr	r0, [pc, #484]	; (80035c4 <HAL_TIM_PWM_MspInit+0x260>)
 80033de:	f004 fdeb 	bl	8007fb8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80033e2:	4b79      	ldr	r3, [pc, #484]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 80033e4:	4a79      	ldr	r2, [pc, #484]	; (80035cc <HAL_TIM_PWM_MspInit+0x268>)
 80033e6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80033e8:	4b77      	ldr	r3, [pc, #476]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 80033ea:	2214      	movs	r2, #20
 80033ec:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ee:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f4:	4b74      	ldr	r3, [pc, #464]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80033fa:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 80033fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003400:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003402:	4b71      	ldr	r3, [pc, #452]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 8003404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003408:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800340a:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 800340c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003410:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003412:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003418:	4b6b      	ldr	r3, [pc, #428]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800341e:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 8003420:	2200      	movs	r2, #0
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003424:	4868      	ldr	r0, [pc, #416]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 8003426:	f002 f98f 	bl	8005748 <HAL_DMA_Init>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003430:	f7ff fbf8 	bl	8002c24 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a64      	ldr	r2, [pc, #400]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
 800343a:	4a63      	ldr	r2, [pc, #396]	; (80035c8 <HAL_TIM_PWM_MspInit+0x264>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003440:	e119      	b.n	8003676 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a62      	ldr	r2, [pc, #392]	; (80035d0 <HAL_TIM_PWM_MspInit+0x26c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d16d      	bne.n	8003528 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344c:	4b5c      	ldr	r3, [pc, #368]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 800344e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003452:	4a5b      	ldr	r2, [pc, #364]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800345c:	4b58      	ldr	r3, [pc, #352]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 800345e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800346a:	4b5a      	ldr	r3, [pc, #360]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 800346c:	4a5a      	ldr	r2, [pc, #360]	; (80035d8 <HAL_TIM_PWM_MspInit+0x274>)
 800346e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003470:	4b58      	ldr	r3, [pc, #352]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 8003472:	2218      	movs	r2, #24
 8003474:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003476:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800347c:	4b55      	ldr	r3, [pc, #340]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003482:	4b54      	ldr	r3, [pc, #336]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 8003484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003488:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 800348c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003490:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003492:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 8003494:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003498:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800349a:	4b4e      	ldr	r3, [pc, #312]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 800349c:	2200      	movs	r2, #0
 800349e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80034a0:	4b4c      	ldr	r3, [pc, #304]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034a6:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80034ac:	4849      	ldr	r0, [pc, #292]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 80034ae:	f002 f94b 	bl	8005748 <HAL_DMA_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80034b8:	f7ff fbb4 	bl	8002c24 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a45      	ldr	r2, [pc, #276]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
 80034c2:	4a44      	ldr	r2, [pc, #272]	; (80035d4 <HAL_TIM_PWM_MspInit+0x270>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80034c8:	4b44      	ldr	r3, [pc, #272]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034ca:	4a45      	ldr	r2, [pc, #276]	; (80035e0 <HAL_TIM_PWM_MspInit+0x27c>)
 80034cc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80034ce:	4b43      	ldr	r3, [pc, #268]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034d0:	2217      	movs	r2, #23
 80034d2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034d4:	4b41      	ldr	r3, [pc, #260]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034da:	4b40      	ldr	r3, [pc, #256]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034dc:	2200      	movs	r2, #0
 80034de:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034e0:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034e6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034ee:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034f0:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034f6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80034f8:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 8003500:	2200      	movs	r2, #0
 8003502:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003504:	4b35      	ldr	r3, [pc, #212]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 8003506:	2200      	movs	r2, #0
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800350a:	4834      	ldr	r0, [pc, #208]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 800350c:	f002 f91c 	bl	8005748 <HAL_DMA_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003516:	f7ff fb85 	bl	8002c24 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 800351e:	625a      	str	r2, [r3, #36]	; 0x24
 8003520:	4a2e      	ldr	r2, [pc, #184]	; (80035dc <HAL_TIM_PWM_MspInit+0x278>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003526:	e0a6      	b.n	8003676 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <HAL_TIM_PWM_MspInit+0x280>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d15e      	bne.n	80035f0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003538:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003550:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 8003552:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_TIM_PWM_MspInit+0x288>)
 8003554:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 8003558:	221f      	movs	r2, #31
 800355a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800355c:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 800356a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 8003572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003576:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 800357a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800357e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 8003582:	2200      	movs	r2, #0
 8003584:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 8003588:	2200      	movs	r2, #0
 800358a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 800358e:	2200      	movs	r2, #0
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003592:	4815      	ldr	r0, [pc, #84]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 8003594:	f002 f8d8 	bl	8005748 <HAL_DMA_Init>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800359e:	f7ff fb41 	bl	8002c24 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80035a8:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_TIM_PWM_MspInit+0x284>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	201e      	movs	r0, #30
 80035b4:	f002 f893 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035b8:	201e      	movs	r0, #30
 80035ba:	f002 f8aa 	bl	8005712 <HAL_NVIC_EnableIRQ>
}
 80035be:	e05a      	b.n	8003676 <HAL_TIM_PWM_MspInit+0x312>
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58020000 	.word	0x58020000
 80035c8:	24001264 	.word	0x24001264
 80035cc:	40020028 	.word	0x40020028
 80035d0:	40000400 	.word	0x40000400
 80035d4:	240012dc 	.word	0x240012dc
 80035d8:	40020058 	.word	0x40020058
 80035dc:	24001354 	.word	0x24001354
 80035e0:	40020070 	.word	0x40020070
 80035e4:	40000800 	.word	0x40000800
 80035e8:	240013cc 	.word	0x240013cc
 80035ec:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_TIM_PWM_MspInit+0x31c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d13d      	bne.n	8003676 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_TIM_PWM_MspInit+0x320>)
 80035fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <HAL_TIM_PWM_MspInit+0x320>)
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_TIM_PWM_MspInit+0x320>)
 800360c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_TIM_PWM_MspInit+0x328>)
 800361c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 8003620:	223a      	movs	r2, #58	; 0x3a
 8003622:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003624:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800362a:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 800362c:	2200      	movs	r2, #0
 800362e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 8003632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003636:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 800363a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800363e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 8003642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003646:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 8003656:	2200      	movs	r2, #0
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800365a:	480b      	ldr	r0, [pc, #44]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 800365c:	f002 f874 	bl	8005748 <HAL_DMA_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003666:	f7ff fadd 	bl	8002c24 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
 8003670:	4a05      	ldr	r2, [pc, #20]	; (8003688 <HAL_TIM_PWM_MspInit+0x324>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003676:	bf00      	nop
 8003678:	3730      	adds	r7, #48	; 0x30
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40000c00 	.word	0x40000c00
 8003684:	58024400 	.word	0x58024400
 8003688:	24001444 	.word	0x24001444
 800368c:	40020040 	.word	0x40020040

08003690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <HAL_TIM_Base_MspInit+0x3c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10e      	bne.n	80036c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_TIM_Base_MspInit+0x40>)
 80036a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036a8:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_TIM_Base_MspInit+0x40>)
 80036aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <HAL_TIM_Base_MspInit+0x40>)
 80036b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40001c00 	.word	0x40001c00
 80036d0:	58024400 	.word	0x58024400

080036d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 031c 	add.w	r3, r7, #28
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f4:	d120      	bne.n	8003738 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 80036f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036fc:	4a50      	ldr	r2, [pc, #320]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 80036fe:	f043 0302 	orr.w	r3, r3, #2
 8003702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003706:	4b4e      	ldr	r3, [pc, #312]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 8003708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800371e:	2302      	movs	r3, #2
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003726:	2301      	movs	r3, #1
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f107 031c 	add.w	r3, r7, #28
 800372e:	4619      	mov	r1, r3
 8003730:	4844      	ldr	r0, [pc, #272]	; (8003844 <HAL_TIM_MspPostInit+0x170>)
 8003732:	f004 fc41 	bl	8007fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003736:	e07f      	b.n	8003838 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a42      	ldr	r2, [pc, #264]	; (8003848 <HAL_TIM_MspPostInit+0x174>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d11f      	bne.n	8003782 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003742:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 8003744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003748:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 800374a:	f043 0302 	orr.w	r3, r3, #2
 800374e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 8003754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003760:	2330      	movs	r3, #48	; 0x30
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003768:	2302      	movs	r3, #2
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003770:	2302      	movs	r3, #2
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003774:	f107 031c 	add.w	r3, r7, #28
 8003778:	4619      	mov	r1, r3
 800377a:	4832      	ldr	r0, [pc, #200]	; (8003844 <HAL_TIM_MspPostInit+0x170>)
 800377c:	f004 fc1c 	bl	8007fb8 <HAL_GPIO_Init>
}
 8003780:	e05a      	b.n	8003838 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a31      	ldr	r2, [pc, #196]	; (800384c <HAL_TIM_MspPostInit+0x178>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d131      	bne.n	80037f0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 800378e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003792:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 800379e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80037aa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037bc:	2302      	movs	r3, #2
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	4619      	mov	r1, r3
 80037c6:	4822      	ldr	r0, [pc, #136]	; (8003850 <HAL_TIM_MspPostInit+0x17c>)
 80037c8:	f004 fbf6 	bl	8007fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80037cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037d6:	2302      	movs	r3, #2
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	2300      	movs	r3, #0
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037de:	2302      	movs	r3, #2
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037e2:	f107 031c 	add.w	r3, r7, #28
 80037e6:	4619      	mov	r1, r3
 80037e8:	4819      	ldr	r0, [pc, #100]	; (8003850 <HAL_TIM_MspPostInit+0x17c>)
 80037ea:	f004 fbe5 	bl	8007fb8 <HAL_GPIO_Init>
}
 80037ee:	e023      	b.n	8003838 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_TIM_MspPostInit+0x180>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d11e      	bne.n	8003838 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 80037fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003800:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_TIM_MspPostInit+0x16c>)
 800380c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003818:	2308      	movs	r3, #8
 800381a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003820:	2302      	movs	r3, #2
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003824:	2300      	movs	r3, #0
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003828:	2302      	movs	r3, #2
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382c:	f107 031c 	add.w	r3, r7, #28
 8003830:	4619      	mov	r1, r3
 8003832:	4809      	ldr	r0, [pc, #36]	; (8003858 <HAL_TIM_MspPostInit+0x184>)
 8003834:	f004 fbc0 	bl	8007fb8 <HAL_GPIO_Init>
}
 8003838:	bf00      	nop
 800383a:	3730      	adds	r7, #48	; 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	58024400 	.word	0x58024400
 8003844:	58020400 	.word	0x58020400
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	58020c00 	.word	0x58020c00
 8003854:	40000c00 	.word	0x40000c00
 8003858:	58020000 	.word	0x58020000

0800385c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b0ba      	sub	sp, #232	; 0xe8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003874:	f107 0318 	add.w	r3, r7, #24
 8003878:	22b8      	movs	r2, #184	; 0xb8
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f013 ffc9 	bl	8017814 <memset>
  if(huart->Instance==UART4)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4d      	ldr	r2, [pc, #308]	; (80039bc <HAL_UART_MspInit+0x160>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d147      	bne.n	800391c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800388c:	f04f 0202 	mov.w	r2, #2
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389e:	f107 0318 	add.w	r3, r7, #24
 80038a2:	4618      	mov	r0, r3
 80038a4:	f007 f976 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80038ae:	f7ff f9b9 	bl	8002c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038b2:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <HAL_UART_MspInit+0x164>)
 80038b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b8:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <HAL_UART_MspInit+0x164>)
 80038ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038c2:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_UART_MspInit+0x164>)
 80038c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d0:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_UART_MspInit+0x164>)
 80038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d6:	4a3a      	ldr	r2, [pc, #232]	; (80039c0 <HAL_UART_MspInit+0x164>)
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e0:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_UART_MspInit+0x164>)
 80038e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003908:	2308      	movs	r3, #8
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003912:	4619      	mov	r1, r3
 8003914:	482b      	ldr	r0, [pc, #172]	; (80039c4 <HAL_UART_MspInit+0x168>)
 8003916:	f004 fb4f 	bl	8007fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800391a:	e04a      	b.n	80039b2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_UART_MspInit+0x16c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d145      	bne.n	80039b2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003926:	f04f 0201 	mov.w	r2, #1
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	4618      	mov	r0, r3
 800393e:	f007 f929 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003948:	f7ff f96c 	bl	8002c24 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_UART_MspInit+0x164>)
 800394e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003952:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <HAL_UART_MspInit+0x164>)
 8003954:	f043 0320 	orr.w	r3, r3, #32
 8003958:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_UART_MspInit+0x164>)
 800395e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_UART_MspInit+0x164>)
 800396c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003970:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <HAL_UART_MspInit+0x164>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_UART_MspInit+0x164>)
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003988:	23c0      	movs	r3, #192	; 0xc0
 800398a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80039a0:	2307      	movs	r3, #7
 80039a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4807      	ldr	r0, [pc, #28]	; (80039cc <HAL_UART_MspInit+0x170>)
 80039ae:	f004 fb03 	bl	8007fb8 <HAL_GPIO_Init>
}
 80039b2:	bf00      	nop
 80039b4:	37e8      	adds	r7, #232	; 0xe8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40004c00 	.word	0x40004c00
 80039c0:	58024400 	.word	0x58024400
 80039c4:	58020400 	.word	0x58020400
 80039c8:	40011400 	.word	0x40011400
 80039cc:	58020800 	.word	0x58020800

080039d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039d4:	e7fe      	b.n	80039d4 <NMI_Handler+0x4>

080039d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039da:	e7fe      	b.n	80039da <HardFault_Handler+0x4>

080039dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e0:	e7fe      	b.n	80039e0 <MemManage_Handler+0x4>

080039e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039e6:	e7fe      	b.n	80039e6 <BusFault_Handler+0x4>

080039e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ec:	e7fe      	b.n	80039ec <UsageFault_Handler+0x4>

080039ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a1c:	f000 f9ba 	bl	8003d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <DMA1_Stream0_IRQHandler+0x10>)
 8003a2a:	f002 fc4f 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	240013cc 	.word	0x240013cc

08003a38 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <DMA1_Stream1_IRQHandler+0x10>)
 8003a3e:	f002 fc45 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	24001264 	.word	0x24001264

08003a4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <DMA1_Stream2_IRQHandler+0x10>)
 8003a52:	f002 fc3b 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	24001444 	.word	0x24001444

08003a60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <DMA1_Stream3_IRQHandler+0x10>)
 8003a66:	f002 fc31 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	240012dc 	.word	0x240012dc

08003a74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <DMA1_Stream4_IRQHandler+0x10>)
 8003a7a:	f002 fc27 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	24001354 	.word	0x24001354

08003a88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <DMA1_Stream5_IRQHandler+0x10>)
 8003a8e:	f002 fc1d 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	24000cdc 	.word	0x24000cdc

08003a9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <TIM4_IRQHandler+0x10>)
 8003aa2:	f00c fc07 	bl	80102b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24001180 	.word	0x24001180

08003ab0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <I2C2_EV_IRQHandler+0x10>)
 8003ab6:	f004 fce9 	bl	800848c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24000e6c 	.word	0x24000e6c

08003ac4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <DMA2_Stream7_IRQHandler+0x10>)
 8003aca:	f002 fbff 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	24000d54 	.word	0x24000d54

08003ad8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <OTG_HS_IRQHandler+0x10>)
 8003ade:	f004 fedf 	bl	80088a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	24002bec 	.word	0x24002bec

08003aec <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <SDMMC2_IRQHandler+0x10>)
 8003af2:	f00a f853 	bl	800db9c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	24000ed4 	.word	0x24000ed4

08003b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <_sbrk+0x5c>)
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <_sbrk+0x60>)
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <_sbrk+0x64>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <_sbrk+0x64>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <_sbrk+0x68>)
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d207      	bcs.n	8003b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b30:	f013 fe78 	bl	8017824 <__errno>
 8003b34:	4603      	mov	r3, r0
 8003b36:	220c      	movs	r2, #12
 8003b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e009      	b.n	8003b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <_sbrk+0x64>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <_sbrk+0x64>)
 8003b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	24050000 	.word	0x24050000
 8003b60:	00000800 	.word	0x00000800
 8003b64:	240016e8 	.word	0x240016e8
 8003b68:	24003460 	.word	0x24003460

08003b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <SystemInit+0xd0>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	4a31      	ldr	r2, [pc, #196]	; (8003c3c <SystemInit+0xd0>)
 8003b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b80:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <SystemInit+0xd4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	2b06      	cmp	r3, #6
 8003b8a:	d807      	bhi.n	8003b9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <SystemInit+0xd4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <SystemInit+0xd4>)
 8003b96:	f043 0307 	orr.w	r3, r3, #7
 8003b9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <SystemInit+0xd8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <SystemInit+0xd8>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ba8:	4b26      	ldr	r3, [pc, #152]	; (8003c44 <SystemInit+0xd8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <SystemInit+0xd8>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4924      	ldr	r1, [pc, #144]	; (8003c44 <SystemInit+0xd8>)
 8003bb4:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <SystemInit+0xdc>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <SystemInit+0xd4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <SystemInit+0xd4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 030f 	bic.w	r3, r3, #15
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <SystemInit+0xd4>)
 8003bd0:	f043 0307 	orr.w	r3, r3, #7
 8003bd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <SystemInit+0xd8>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <SystemInit+0xd8>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <SystemInit+0xd8>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003be8:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <SystemInit+0xd8>)
 8003bea:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <SystemInit+0xe0>)
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <SystemInit+0xd8>)
 8003bf0:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <SystemInit+0xe4>)
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <SystemInit+0xd8>)
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <SystemInit+0xe8>)
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <SystemInit+0xd8>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <SystemInit+0xd8>)
 8003c02:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <SystemInit+0xe8>)
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <SystemInit+0xd8>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <SystemInit+0xd8>)
 8003c0e:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <SystemInit+0xe8>)
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <SystemInit+0xd8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <SystemInit+0xd8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <SystemInit+0xd8>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <SystemInit+0xd8>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <SystemInit+0xec>)
 8003c2c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003c30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00
 8003c40:	52002000 	.word	0x52002000
 8003c44:	58024400 	.word	0x58024400
 8003c48:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c4c:	02020200 	.word	0x02020200
 8003c50:	01ff0000 	.word	0x01ff0000
 8003c54:	01010280 	.word	0x01010280
 8003c58:	52004000 	.word	0x52004000

08003c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c60:	f7ff ff84 	bl	8003b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c64:	480c      	ldr	r0, [pc, #48]	; (8003c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c66:	490d      	ldr	r1, [pc, #52]	; (8003c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c68:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c6c:	e002      	b.n	8003c74 <LoopCopyDataInit>

08003c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c72:	3304      	adds	r3, #4

08003c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c78:	d3f9      	bcc.n	8003c6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c80:	e001      	b.n	8003c86 <LoopFillZerobss>

08003c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c84:	3204      	adds	r2, #4

08003c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c88:	d3fb      	bcc.n	8003c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c8a:	f013 fdd1 	bl	8017830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c8e:	f7fd fec3 	bl	8001a18 <main>
  bx  lr
 8003c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c94:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003c98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c9c:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8003ca0:	08018e90 	.word	0x08018e90
  ldr r2, =_sbss
 8003ca4:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8003ca8:	24003460 	.word	0x24003460

08003cac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cac:	e7fe      	b.n	8003cac <ADC3_IRQHandler>
	...

08003cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb6:	2003      	movs	r0, #3
 8003cb8:	f001 fd06 	bl	80056c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cbc:	f006 fd94 	bl	800a7e8 <HAL_RCC_GetSysClockFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_Init+0x68>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	4913      	ldr	r1, [pc, #76]	; (8003d1c <HAL_Init+0x6c>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_Init+0x68>)
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <HAL_Init+0x6c>)
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf0:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <HAL_Init+0x70>)
 8003cf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cf4:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <HAL_Init+0x74>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cfa:	200f      	movs	r0, #15
 8003cfc:	f000 f814 	bl	8003d28 <HAL_InitTick>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e002      	b.n	8003d10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d0a:	f7fe ff91 	bl	8002c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	08018cdc 	.word	0x08018cdc
 8003d20:	24000004 	.word	0x24000004
 8003d24:	24000000 	.word	0x24000000

08003d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d30:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_InitTick+0x60>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e021      	b.n	8003d80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_InitTick+0x64>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <HAL_InitTick+0x60>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	4619      	mov	r1, r3
 8003d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 fceb 	bl	800572e <HAL_SYSTICK_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e00e      	b.n	8003d80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b0f      	cmp	r3, #15
 8003d66:	d80a      	bhi.n	8003d7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	f001 fcb5 	bl	80056de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d74:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <HAL_InitTick+0x68>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	2400000c 	.word	0x2400000c
 8003d8c:	24000000 	.word	0x24000000
 8003d90:	24000008 	.word	0x24000008

08003d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_IncTick+0x20>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_IncTick+0x24>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4413      	add	r3, r2
 8003da4:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <HAL_IncTick+0x24>)
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	2400000c 	.word	0x2400000c
 8003db8:	240016ec 	.word	0x240016ec

08003dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_GetTick+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	240016ec 	.word	0x240016ec

08003dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7ff ffee 	bl	8003dbc <HAL_GetTick>
 8003de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d005      	beq.n	8003dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_Delay+0x44>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dfa:	bf00      	nop
 8003dfc:	f7ff ffde 	bl	8003dbc <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d8f7      	bhi.n	8003dfc <HAL_Delay+0x28>
  {
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	2400000c 	.word	0x2400000c

08003e1c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	4904      	ldr	r1, [pc, #16]	; (8003e44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	58000400 	.word	0x58000400

08003e48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3360      	adds	r3, #96	; 0x60
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <LL_ADC_SetOffset+0x60>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10b      	bne.n	8003eec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003eea:	e00b      	b.n	8003f04 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	431a      	orrs	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	58026000 	.word	0x58026000

08003f14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3360      	adds	r3, #96	; 0x60
 8003f22:	461a      	mov	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	431a      	orrs	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	611a      	str	r2, [r3, #16]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3360      	adds	r3, #96	; 0x60
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	601a      	str	r2, [r3, #0]
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	58026000 	.word	0x58026000

08003fb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10e      	bne.n	8003fea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3360      	adds	r3, #96	; 0x60
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58026000 	.word	0x58026000

08003ffc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <LL_ADC_SetOffsetSign+0x40>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10e      	bne.n	800402e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3360      	adds	r3, #96	; 0x60
 8004014:	461a      	mov	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	431a      	orrs	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	58026000 	.word	0x58026000

08004040 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3360      	adds	r3, #96	; 0x60
 8004050:	461a      	mov	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <LL_ADC_SetOffsetState+0x50>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d108      	bne.n	8004074 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	431a      	orrs	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004072:	e007      	b.n	8004084 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	431a      	orrs	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	601a      	str	r2, [r3, #0]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	58026000 	.word	0x58026000

08004094 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3330      	adds	r3, #48	; 0x30
 80040a4:	461a      	mov	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	4413      	add	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	211f      	movs	r1, #31
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	401a      	ands	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	f003 011f 	and.w	r1, r3, #31
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	431a      	orrs	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3314      	adds	r3, #20
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	0e5b      	lsrs	r3, r3, #25
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	4413      	add	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	0d1b      	lsrs	r3, r3, #20
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2107      	movs	r1, #7
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	401a      	ands	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	0d1b      	lsrs	r3, r3, #20
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	431a      	orrs	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <LL_ADC_SetChannelSingleDiff+0x78>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d115      	bne.n	8004184 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004164:	43db      	mvns	r3, r3
 8004166:	401a      	ands	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f003 0318 	and.w	r3, r3, #24
 800416e:	4914      	ldr	r1, [pc, #80]	; (80041c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004170:	40d9      	lsrs	r1, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	400b      	ands	r3, r1
 8004176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800417a:	431a      	orrs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004182:	e014      	b.n	80041ae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0318 	and.w	r3, r3, #24
 800419a:	4909      	ldr	r1, [pc, #36]	; (80041c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800419c:	40d9      	lsrs	r1, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	400b      	ands	r3, r1
 80041a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a6:	431a      	orrs	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	58026000 	.word	0x58026000
 80041c0:	000fffff 	.word	0x000fffff

080041c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6093      	str	r3, [r2, #8]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	5fffffc0 	.word	0x5fffffc0

080041e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fc:	d101      	bne.n	8004202 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <LL_ADC_EnableInternalRegulator+0x24>)
 800421e:	4013      	ands	r3, r2
 8004220:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	6fffffc0 	.word	0x6fffffc0

08004238 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424c:	d101      	bne.n	8004252 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <LL_ADC_IsEnabled+0x18>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <LL_ADC_IsEnabled+0x1a>
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d101      	bne.n	800429e <LL_ADC_REG_IsConversionOngoing+0x18>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d101      	bne.n	80042c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1ee      	b.n	80046cc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fe fcb1 	bl	8002c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff67 	bl	80041e8 <LL_ADC_IsDeepPowerDownEnabled>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff4d 	bl	80041c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff82 	bl	8004238 <LL_ADC_IsInternalRegulatorEnabled>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d114      	bne.n	8004364 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff66 	bl	8004210 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004344:	4b8e      	ldr	r3, [pc, #568]	; (8004580 <HAL_ADC_Init+0x2ac>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	4a8e      	ldr	r2, [pc, #568]	; (8004584 <HAL_ADC_Init+0x2b0>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	3301      	adds	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004356:	e002      	b.n	800435e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	3b01      	subs	r3, #1
 800435c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f9      	bne.n	8004358 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff65 	bl	8004238 <LL_ADC_IsInternalRegulatorEnabled>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10d      	bne.n	8004390 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004384:	f043 0201 	orr.w	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff76 	bl	8004286 <LL_ADC_REG_IsConversionOngoing>
 800439a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f040 8188 	bne.w	80046ba <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 8184 	bne.w	80046ba <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff ff4a 	bl	8004260 <LL_ADC_IsEnabled>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d136      	bne.n	8004440 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6c      	ldr	r2, [pc, #432]	; (8004588 <HAL_ADC_Init+0x2b4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_ADC_Init+0x112>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6a      	ldr	r2, [pc, #424]	; (800458c <HAL_ADC_Init+0x2b8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10e      	bne.n	8004404 <HAL_ADC_Init+0x130>
 80043e6:	4868      	ldr	r0, [pc, #416]	; (8004588 <HAL_ADC_Init+0x2b4>)
 80043e8:	f7ff ff3a 	bl	8004260 <LL_ADC_IsEnabled>
 80043ec:	4604      	mov	r4, r0
 80043ee:	4867      	ldr	r0, [pc, #412]	; (800458c <HAL_ADC_Init+0x2b8>)
 80043f0:	f7ff ff36 	bl	8004260 <LL_ADC_IsEnabled>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4323      	orrs	r3, r4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e008      	b.n	8004416 <HAL_ADC_Init+0x142>
 8004404:	4862      	ldr	r0, [pc, #392]	; (8004590 <HAL_ADC_Init+0x2bc>)
 8004406:	f7ff ff2b 	bl	8004260 <LL_ADC_IsEnabled>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d012      	beq.n	8004440 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a5a      	ldr	r2, [pc, #360]	; (8004588 <HAL_ADC_Init+0x2b4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_ADC_Init+0x15a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a58      	ldr	r2, [pc, #352]	; (800458c <HAL_ADC_Init+0x2b8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_ADC_Init+0x15e>
 800442e:	4a59      	ldr	r2, [pc, #356]	; (8004594 <HAL_ADC_Init+0x2c0>)
 8004430:	e000      	b.n	8004434 <HAL_ADC_Init+0x160>
 8004432:	4a59      	ldr	r2, [pc, #356]	; (8004598 <HAL_ADC_Init+0x2c4>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f7ff fd04 	bl	8003e48 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a52      	ldr	r2, [pc, #328]	; (8004590 <HAL_ADC_Init+0x2bc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d129      	bne.n	800449e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7e5b      	ldrb	r3, [r3, #25]
 800444e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004454:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800445a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d013      	beq.n	800448c <HAL_ADC_Init+0x1b8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b0c      	cmp	r3, #12
 800446a:	d00d      	beq.n	8004488 <HAL_ADC_Init+0x1b4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b1c      	cmp	r3, #28
 8004472:	d007      	beq.n	8004484 <HAL_ADC_Init+0x1b0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b18      	cmp	r3, #24
 800447a:	d101      	bne.n	8004480 <HAL_ADC_Init+0x1ac>
 800447c:	2318      	movs	r3, #24
 800447e:	e006      	b.n	800448e <HAL_ADC_Init+0x1ba>
 8004480:	2300      	movs	r3, #0
 8004482:	e004      	b.n	800448e <HAL_ADC_Init+0x1ba>
 8004484:	2310      	movs	r3, #16
 8004486:	e002      	b.n	800448e <HAL_ADC_Init+0x1ba>
 8004488:	2308      	movs	r3, #8
 800448a:	e000      	b.n	800448e <HAL_ADC_Init+0x1ba>
 800448c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800448e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004496:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e00e      	b.n	80044bc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7e5b      	ldrb	r3, [r3, #25]
 80044a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80044ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d106      	bne.n	80044d4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	3b01      	subs	r3, #1
 80044cc:	045b      	lsls	r3, r3, #17
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d009      	beq.n	80044f0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a26      	ldr	r2, [pc, #152]	; (8004590 <HAL_ADC_Init+0x2bc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d115      	bne.n	8004526 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	4b26      	ldr	r3, [pc, #152]	; (800459c <HAL_ADC_Init+0x2c8>)
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	430b      	orrs	r3, r1
 800450c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	611a      	str	r2, [r3, #16]
 8004524:	e009      	b.n	800453a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <HAL_ADC_Init+0x2cc>)
 800452e:	4013      	ands	r3, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	69b9      	ldr	r1, [r7, #24]
 8004536:	430b      	orrs	r3, r1
 8004538:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fea1 	bl	8004286 <LL_ADC_REG_IsConversionOngoing>
 8004544:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff feae 	bl	80042ac <LL_ADC_INJ_IsConversionOngoing>
 8004550:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 808e 	bne.w	8004676 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 808a 	bne.w	8004676 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_ADC_Init+0x2bc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d11b      	bne.n	80045a4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	7e1b      	ldrb	r3, [r3, #24]
 8004570:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004578:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e018      	b.n	80045b2 <HAL_ADC_Init+0x2de>
 8004580:	24000000 	.word	0x24000000
 8004584:	053e2d63 	.word	0x053e2d63
 8004588:	40022000 	.word	0x40022000
 800458c:	40022100 	.word	0x40022100
 8004590:	58026000 	.word	0x58026000
 8004594:	40022300 	.word	0x40022300
 8004598:	58026300 	.word	0x58026300
 800459c:	fff04007 	.word	0xfff04007
 80045a0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7e1b      	ldrb	r3, [r3, #24]
 80045a8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_ADC_Init+0x400>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	430b      	orrs	r3, r1
 80045c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d137      	bne.n	8004640 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <HAL_ADC_Init+0x404>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d116      	bne.n	800460e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <HAL_ADC_Init+0x408>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80045fe:	430a      	orrs	r2, r1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	611a      	str	r2, [r3, #16]
 800460c:	e020      	b.n	8004650 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <HAL_ADC_Init+0x40c>)
 8004616:	4013      	ands	r3, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800461c:	3a01      	subs	r2, #1
 800461e:	0411      	lsls	r1, r2, #16
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800462a:	4311      	orrs	r1, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004630:	430a      	orrs	r2, r1
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e007      	b.n	8004650 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_ADC_Init+0x404>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d002      	beq.n	8004676 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fd63 	bl	800513c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10c      	bne.n	8004698 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f023 010f 	bic.w	r1, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
 8004696:	e007      	b.n	80046a8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 020f 	bic.w	r2, r2, #15
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	f023 0303 	bic.w	r3, r3, #3
 80046b0:	f043 0201 	orr.w	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	661a      	str	r2, [r3, #96]	; 0x60
 80046b8:	e007      	b.n	80046ca <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046be:	f043 0210 	orr.w	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3724      	adds	r7, #36	; 0x24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd90      	pop	{r4, r7, pc}
 80046d4:	ffffbffc 	.word	0xffffbffc
 80046d8:	58026000 	.word	0x58026000
 80046dc:	fc00f81f 	.word	0xfc00f81f
 80046e0:	fc00f81e 	.word	0xfc00f81e

080046e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b0b9      	sub	sp, #228	; 0xe4
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046fe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4aa9      	ldr	r2, [pc, #676]	; (80049ac <HAL_ADC_ConfigChannel+0x2c8>)
 8004706:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d102      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x34>
 8004712:	2302      	movs	r3, #2
 8004714:	f000 bcfa 	b.w	800510c <HAL_ADC_ConfigChannel+0xa28>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fdae 	bl	8004286 <LL_ADC_REG_IsConversionOngoing>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 84de 	bne.w	80050ee <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a9e      	ldr	r2, [pc, #632]	; (80049b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d033      	beq.n	80047a4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <HAL_ADC_ConfigChannel+0x76>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2201      	movs	r2, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	e01d      	b.n	8004796 <HAL_ADC_ConfigChannel+0xb2>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800476e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800477e:	2320      	movs	r3, #32
 8004780:	e004      	b.n	800478c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2201      	movs	r2, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	69d1      	ldr	r1, [r2, #28]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	f7ff fc6f 	bl	8004094 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fd63 	bl	8004286 <LL_ADC_REG_IsConversionOngoing>
 80047c0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fd6f 	bl	80042ac <LL_ADC_INJ_IsConversionOngoing>
 80047ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8270 	bne.w	8004cbc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 826b 	bne.w	8004cbc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6819      	ldr	r1, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7ff fc7a 	bl	80040ec <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a6c      	ldr	r2, [pc, #432]	; (80049b0 <HAL_ADC_ConfigChannel+0x2cc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10d      	bne.n	800481e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	08db      	lsrs	r3, r3, #3
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481c:	e032      	b.n	8004884 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800481e:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482a:	d10b      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x160>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	e01d      	b.n	8004880 <HAL_ADC_ConfigChannel+0x19c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <HAL_ADC_ConfigChannel+0x186>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	e00a      	b.n	8004880 <HAL_ADC_ConfigChannel+0x19c>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d048      	beq.n	800491e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6919      	ldr	r1, [r3, #16]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800489c:	f7ff fb08 	bl	8003eb0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a42      	ldr	r2, [pc, #264]	; (80049b0 <HAL_ADC_ConfigChannel+0x2cc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d119      	bne.n	80048de <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6919      	ldr	r1, [r3, #16]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f7ff fba0 	bl	8003ffc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6919      	ldr	r1, [r3, #16]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d102      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1f0>
 80048ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d2:	e000      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1f2>
 80048d4:	2300      	movs	r3, #0
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7ff fb6e 	bl	8003fb8 <LL_ADC_SetOffsetSaturation>
 80048dc:	e1ee      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d102      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x212>
 80048f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048f4:	e000      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x214>
 80048f6:	2300      	movs	r3, #0
 80048f8:	461a      	mov	r2, r3
 80048fa:	f7ff fb3b 	bl	8003f74 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6919      	ldr	r1, [r3, #16]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	7e1b      	ldrb	r3, [r3, #24]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x230>
 800490e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004912:	e000      	b.n	8004916 <HAL_ADC_ConfigChannel+0x232>
 8004914:	2300      	movs	r3, #0
 8004916:	461a      	mov	r2, r3
 8004918:	f7ff fb12 	bl	8003f40 <LL_ADC_SetDataRightShift>
 800491c:	e1ce      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	f040 8181 	bne.w	8004c2c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff faef 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x272>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fae4 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	0e9b      	lsrs	r3, r3, #26
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	e01e      	b.n	8004994 <HAL_ADC_ConfigChannel+0x2b0>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fad9 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800497c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004984:	2320      	movs	r3, #32
 8004986:	e004      	b.n	8004992 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004988:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x2d4>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	0e9b      	lsrs	r3, r3, #26
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	e01e      	b.n	80049ea <HAL_ADC_ConfigChannel+0x306>
 80049ac:	47ff0000 	.word	0x47ff0000
 80049b0:	58026000 	.word	0x58026000
 80049b4:	5c001000 	.word	0x5c001000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049c4:	fa93 f3a3 	rbit	r3, r3
 80049c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80049cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80049d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80049dc:	2320      	movs	r3, #32
 80049de:	e004      	b.n	80049ea <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80049e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049e4:	fab3 f383 	clz	r3, r3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d106      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fb22 	bl	8004040 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2101      	movs	r1, #1
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fa86 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x344>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2101      	movs	r1, #1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fa7b 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	0e9b      	lsrs	r3, r3, #26
 8004a22:	f003 021f 	and.w	r2, r3, #31
 8004a26:	e01e      	b.n	8004a66 <HAL_ADC_ConfigChannel+0x382>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fa70 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a3e:	fa93 f3a3 	rbit	r3, r3
 8004a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004a4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004a56:	2320      	movs	r3, #32
 8004a58:	e004      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d105      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x39a>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	0e9b      	lsrs	r3, r3, #26
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	e018      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x3cc>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a8a:	fa93 f3a3 	rbit	r3, r3
 8004a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004a9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	e004      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d106      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2101      	movs	r1, #1
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fabf 	bl	8004040 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fa23 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x40a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fa18 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	0e9b      	lsrs	r3, r3, #26
 8004ae8:	f003 021f 	and.w	r2, r3, #31
 8004aec:	e01e      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x448>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2102      	movs	r1, #2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fa0d 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b04:	fa93 f3a3 	rbit	r3, r3
 8004b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004b14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e004      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b24:	fab3 f383 	clz	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x460>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0e9b      	lsrs	r3, r3, #26
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	e014      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x48a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b4c:	fa93 f3a3 	rbit	r3, r3
 8004b50:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004b60:	2320      	movs	r3, #32
 8004b62:	e004      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b68:	fab3 f383 	clz	r3, r3
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d106      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fa60 	bl	8004040 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2103      	movs	r1, #3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff f9c4 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x4c8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2103      	movs	r1, #3
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff f9b9 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	0e9b      	lsrs	r3, r3, #26
 8004ba6:	f003 021f 	and.w	r2, r3, #31
 8004baa:	e017      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x4f8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2103      	movs	r1, #3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff f9ae 	bl	8003f14 <LL_ADC_GetOffsetChannel>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bbe:	fa93 f3a3 	rbit	r3, r3
 8004bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004bce:	2320      	movs	r3, #32
 8004bd0:	e003      	b.n	8004bda <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x510>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	0e9b      	lsrs	r3, r3, #26
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	e011      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x534>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c04:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	e003      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c12:	fab3 f383 	clz	r3, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d14f      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2103      	movs	r1, #3
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fa0b 	bl	8004040 <LL_ADC_SetOffsetState>
 8004c2a:	e047      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	069b      	lsls	r3, r3, #26
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d107      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	069b      	lsls	r3, r3, #26
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d107      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c72:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	069b      	lsls	r3, r3, #26
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d107      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c96:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	069b      	lsls	r3, r3, #26
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d107      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff facd 	bl	8004260 <LL_ADC_IsEnabled>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 8219 	bne.w	8005100 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7ff fa32 	bl	8004144 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4aa1      	ldr	r2, [pc, #644]	; (8004f6c <HAL_ADC_ConfigChannel+0x888>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	f040 812e 	bne.w	8004f48 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10b      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x630>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	3301      	adds	r3, #1
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	2b09      	cmp	r3, #9
 8004d0a:	bf94      	ite	ls
 8004d0c:	2301      	movls	r3, #1
 8004d0e:	2300      	movhi	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e019      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x664>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e003      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2b09      	cmp	r3, #9
 8004d40:	bf94      	ite	ls
 8004d42:	2301      	movls	r3, #1
 8004d44:	2300      	movhi	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d079      	beq.n	8004e40 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x684>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	0e9b      	lsrs	r3, r3, #26
 8004d5e:	3301      	adds	r3, #1
 8004d60:	069b      	lsls	r3, r3, #26
 8004d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d66:	e015      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x6b0>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d78:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004d80:	2320      	movs	r3, #32
 8004d82:	e003      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	069b      	lsls	r3, r3, #26
 8004d90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x6d0>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	0e9b      	lsrs	r3, r3, #26
 8004da6:	3301      	adds	r3, #1
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	2101      	movs	r1, #1
 8004dae:	fa01 f303 	lsl.w	r3, r1, r3
 8004db2:	e017      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x700>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004dcc:	2320      	movs	r3, #32
 8004dce:	e003      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	ea42 0103 	orr.w	r1, r2, r3
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x726>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0e9b      	lsrs	r3, r3, #26
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 021f 	and.w	r2, r3, #31
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	051b      	lsls	r3, r3, #20
 8004e08:	e018      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x758>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004e22:	2320      	movs	r3, #32
 8004e24:	e003      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f003 021f 	and.w	r2, r3, #31
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	e07e      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x778>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	0e9b      	lsrs	r3, r3, #26
 8004e52:	3301      	adds	r3, #1
 8004e54:	069b      	lsls	r3, r3, #26
 8004e56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e5a:	e015      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x7a4>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004e74:	2320      	movs	r3, #32
 8004e76:	e003      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3301      	adds	r3, #1
 8004e82:	069b      	lsls	r3, r3, #26
 8004e84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x7c4>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	0e9b      	lsrs	r3, r3, #26
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea6:	e017      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x7f4>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	fa93 f3a3 	rbit	r3, r3
 8004eb4:	61bb      	str	r3, [r7, #24]
  return result;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004ec0:	2320      	movs	r3, #32
 8004ec2:	e003      	b.n	8004ecc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	ea42 0103 	orr.w	r1, r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x820>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	0e9b      	lsrs	r3, r3, #26
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f003 021f 	and.w	r2, r3, #31
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	3b1e      	subs	r3, #30
 8004efc:	051b      	lsls	r3, r3, #20
 8004efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f02:	e01b      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x858>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	fa93 f3a3 	rbit	r3, r3
 8004f10:	60fb      	str	r3, [r7, #12]
  return result;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	e003      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	3301      	adds	r3, #1
 8004f2a:	f003 021f 	and.w	r2, r3, #31
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	3b1e      	subs	r3, #30
 8004f36:	051b      	lsls	r3, r3, #20
 8004f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	4619      	mov	r1, r3
 8004f44:	f7ff f8d2 	bl	80040ec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f280 80d7 	bge.w	8005100 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a06      	ldr	r2, [pc, #24]	; (8004f70 <HAL_ADC_ConfigChannel+0x88c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_ADC_ConfigChannel+0x882>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <HAL_ADC_ConfigChannel+0x890>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10a      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x898>
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_ADC_ConfigChannel+0x894>)
 8004f68:	e009      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x89a>
 8004f6a:	bf00      	nop
 8004f6c:	47ff0000 	.word	0x47ff0000
 8004f70:	40022000 	.word	0x40022000
 8004f74:	40022100 	.word	0x40022100
 8004f78:	40022300 	.word	0x40022300
 8004f7c:	4b65      	ldr	r3, [pc, #404]	; (8005114 <HAL_ADC_ConfigChannel+0xa30>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe ff88 	bl	8003e94 <LL_ADC_GetCommonPathInternalCh>
 8004f84:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a62      	ldr	r2, [pc, #392]	; (8005118 <HAL_ADC_ConfigChannel+0xa34>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_ADC_ConfigChannel+0x8b8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a61      	ldr	r2, [pc, #388]	; (800511c <HAL_ADC_ConfigChannel+0xa38>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10e      	bne.n	8004fba <HAL_ADC_ConfigChannel+0x8d6>
 8004f9c:	485e      	ldr	r0, [pc, #376]	; (8005118 <HAL_ADC_ConfigChannel+0xa34>)
 8004f9e:	f7ff f95f 	bl	8004260 <LL_ADC_IsEnabled>
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	485d      	ldr	r0, [pc, #372]	; (800511c <HAL_ADC_ConfigChannel+0xa38>)
 8004fa6:	f7ff f95b 	bl	8004260 <LL_ADC_IsEnabled>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4323      	orrs	r3, r4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	e008      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x8e8>
 8004fba:	4859      	ldr	r0, [pc, #356]	; (8005120 <HAL_ADC_ConfigChannel+0xa3c>)
 8004fbc:	f7ff f950 	bl	8004260 <LL_ADC_IsEnabled>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8084 	beq.w	80050da <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a53      	ldr	r2, [pc, #332]	; (8005124 <HAL_ADC_ConfigChannel+0xa40>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d132      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x95e>
 8004fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d12c      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a4c      	ldr	r2, [pc, #304]	; (8005120 <HAL_ADC_ConfigChannel+0xa3c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f040 8086 	bne.w	8005100 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a47      	ldr	r2, [pc, #284]	; (8005118 <HAL_ADC_ConfigChannel+0xa34>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_ADC_ConfigChannel+0x924>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a46      	ldr	r2, [pc, #280]	; (800511c <HAL_ADC_ConfigChannel+0xa38>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x928>
 8005008:	4a47      	ldr	r2, [pc, #284]	; (8005128 <HAL_ADC_ConfigChannel+0xa44>)
 800500a:	e000      	b.n	800500e <HAL_ADC_ConfigChannel+0x92a>
 800500c:	4a41      	ldr	r2, [pc, #260]	; (8005114 <HAL_ADC_ConfigChannel+0xa30>)
 800500e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f7fe ff28 	bl	8003e6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800501e:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_ADC_ConfigChannel+0xa48>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	4a42      	ldr	r2, [pc, #264]	; (8005130 <HAL_ADC_ConfigChannel+0xa4c>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	099b      	lsrs	r3, r3, #6
 800502c:	3301      	adds	r3, #1
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005032:	e002      	b.n	800503a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	3b01      	subs	r3, #1
 8005038:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f9      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005040:	e05e      	b.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <HAL_ADC_ConfigChannel+0xa50>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d120      	bne.n	800508e <HAL_ADC_ConfigChannel+0x9aa>
 800504c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11a      	bne.n	800508e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a30      	ldr	r2, [pc, #192]	; (8005120 <HAL_ADC_ConfigChannel+0xa3c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d14e      	bne.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <HAL_ADC_ConfigChannel+0xa34>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_ADC_ConfigChannel+0x992>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2a      	ldr	r2, [pc, #168]	; (800511c <HAL_ADC_ConfigChannel+0xa38>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d101      	bne.n	800507a <HAL_ADC_ConfigChannel+0x996>
 8005076:	4a2c      	ldr	r2, [pc, #176]	; (8005128 <HAL_ADC_ConfigChannel+0xa44>)
 8005078:	e000      	b.n	800507c <HAL_ADC_ConfigChannel+0x998>
 800507a:	4a26      	ldr	r2, [pc, #152]	; (8005114 <HAL_ADC_ConfigChannel+0xa30>)
 800507c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f7fe fef1 	bl	8003e6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800508c:	e038      	b.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a29      	ldr	r2, [pc, #164]	; (8005138 <HAL_ADC_ConfigChannel+0xa54>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d133      	bne.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
 8005098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800509c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d12d      	bne.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <HAL_ADC_ConfigChannel+0xa3c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d128      	bne.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a19      	ldr	r2, [pc, #100]	; (8005118 <HAL_ADC_ConfigChannel+0xa34>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_ADC_ConfigChannel+0x9de>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <HAL_ADC_ConfigChannel+0xa38>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x9e2>
 80050c2:	4a19      	ldr	r2, [pc, #100]	; (8005128 <HAL_ADC_ConfigChannel+0xa44>)
 80050c4:	e000      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x9e4>
 80050c6:	4a13      	ldr	r2, [pc, #76]	; (8005114 <HAL_ADC_ConfigChannel+0xa30>)
 80050c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7fe fecb 	bl	8003e6e <LL_ADC_SetCommonPathInternalCh>
 80050d8:	e012      	b.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80050ec:	e008      	b.n	8005100 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005108:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800510c:	4618      	mov	r0, r3
 800510e:	37e4      	adds	r7, #228	; 0xe4
 8005110:	46bd      	mov	sp, r7
 8005112:	bd90      	pop	{r4, r7, pc}
 8005114:	58026300 	.word	0x58026300
 8005118:	40022000 	.word	0x40022000
 800511c:	40022100 	.word	0x40022100
 8005120:	58026000 	.word	0x58026000
 8005124:	c7520000 	.word	0xc7520000
 8005128:	40022300 	.word	0x40022300
 800512c:	24000000 	.word	0x24000000
 8005130:	053e2d63 	.word	0x053e2d63
 8005134:	c3210000 	.word	0xc3210000
 8005138:	cb840000 	.word	0xcb840000

0800513c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a6c      	ldr	r2, [pc, #432]	; (80052fc <ADC_ConfigureBoostMode+0x1c0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <ADC_ConfigureBoostMode+0x1c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6b      	ldr	r2, [pc, #428]	; (8005300 <ADC_ConfigureBoostMode+0x1c4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d109      	bne.n	800516c <ADC_ConfigureBoostMode+0x30>
 8005158:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <ADC_ConfigureBoostMode+0x1c8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e008      	b.n	800517e <ADC_ConfigureBoostMode+0x42>
 800516c:	4b66      	ldr	r3, [pc, #408]	; (8005308 <ADC_ConfigureBoostMode+0x1cc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01c      	beq.n	80051bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005182:	f005 fcab 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 8005186:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005190:	d010      	beq.n	80051b4 <ADC_ConfigureBoostMode+0x78>
 8005192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005196:	d873      	bhi.n	8005280 <ADC_ConfigureBoostMode+0x144>
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519c:	d002      	beq.n	80051a4 <ADC_ConfigureBoostMode+0x68>
 800519e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051a2:	d16d      	bne.n	8005280 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	0c1b      	lsrs	r3, r3, #16
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b0:	60fb      	str	r3, [r7, #12]
        break;
 80051b2:	e068      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	60fb      	str	r3, [r7, #12]
        break;
 80051ba:	e064      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80051bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	f006 fe86 	bl	800bed4 <HAL_RCCEx_GetPeriphCLKFreq>
 80051c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051d2:	d051      	beq.n	8005278 <ADC_ConfigureBoostMode+0x13c>
 80051d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051d8:	d854      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 80051da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80051de:	d047      	beq.n	8005270 <ADC_ConfigureBoostMode+0x134>
 80051e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80051e4:	d84e      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 80051e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80051ea:	d03d      	beq.n	8005268 <ADC_ConfigureBoostMode+0x12c>
 80051ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80051f0:	d848      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 80051f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f6:	d033      	beq.n	8005260 <ADC_ConfigureBoostMode+0x124>
 80051f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051fc:	d842      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 80051fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005202:	d029      	beq.n	8005258 <ADC_ConfigureBoostMode+0x11c>
 8005204:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005208:	d83c      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 800520a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800520e:	d01a      	beq.n	8005246 <ADC_ConfigureBoostMode+0x10a>
 8005210:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005214:	d836      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 8005216:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800521a:	d014      	beq.n	8005246 <ADC_ConfigureBoostMode+0x10a>
 800521c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005220:	d830      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 8005222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005226:	d00e      	beq.n	8005246 <ADC_ConfigureBoostMode+0x10a>
 8005228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522c:	d82a      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 800522e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005232:	d008      	beq.n	8005246 <ADC_ConfigureBoostMode+0x10a>
 8005234:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005238:	d824      	bhi.n	8005284 <ADC_ConfigureBoostMode+0x148>
 800523a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800523e:	d002      	beq.n	8005246 <ADC_ConfigureBoostMode+0x10a>
 8005240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005244:	d11e      	bne.n	8005284 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	0c9b      	lsrs	r3, r3, #18
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	60fb      	str	r3, [r7, #12]
        break;
 8005256:	e016      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	60fb      	str	r3, [r7, #12]
        break;
 800525e:	e012      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	60fb      	str	r3, [r7, #12]
        break;
 8005266:	e00e      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	099b      	lsrs	r3, r3, #6
 800526c:	60fb      	str	r3, [r7, #12]
        break;
 800526e:	e00a      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	09db      	lsrs	r3, r3, #7
 8005274:	60fb      	str	r3, [r7, #12]
        break;
 8005276:	e006      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	60fb      	str	r3, [r7, #12]
        break;
 800527e:	e002      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005284:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a1f      	ldr	r2, [pc, #124]	; (800530c <ADC_ConfigureBoostMode+0x1d0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d808      	bhi.n	80052a6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80052a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052a4:	e025      	b.n	80052f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a19      	ldr	r2, [pc, #100]	; (8005310 <ADC_ConfigureBoostMode+0x1d4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d80a      	bhi.n	80052c4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c0:	609a      	str	r2, [r3, #8]
}
 80052c2:	e016      	b.n	80052f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <ADC_ConfigureBoostMode+0x1d8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d80a      	bhi.n	80052e2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	e007      	b.n	80052f2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80052f0:	609a      	str	r2, [r3, #8]
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40022000 	.word	0x40022000
 8005300:	40022100 	.word	0x40022100
 8005304:	40022300 	.word	0x40022300
 8005308:	58026300 	.word	0x58026300
 800530c:	005f5e10 	.word	0x005f5e10
 8005310:	00bebc20 	.word	0x00bebc20
 8005314:	017d7840 	.word	0x017d7840

08005318 <LL_ADC_IsEnabled>:
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <LL_ADC_IsEnabled+0x18>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <LL_ADC_IsEnabled+0x1a>
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <LL_ADC_REG_IsConversionOngoing>:
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d101      	bne.n	8005356 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b0a3      	sub	sp, #140	; 0x8c
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800537e:	2302      	movs	r3, #2
 8005380:	e0c1      	b.n	8005506 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800538a:	2300      	movs	r3, #0
 800538c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800538e:	2300      	movs	r3, #0
 8005390:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a5e      	ldr	r2, [pc, #376]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d102      	bne.n	80053a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800539c:	4b5d      	ldr	r3, [pc, #372]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e001      	b.n	80053a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0a0      	b.n	8005506 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ffb9 	bl	800533e <LL_ADC_REG_IsConversionOngoing>
 80053cc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ffb2 	bl	800533e <LL_ADC_REG_IsConversionOngoing>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f040 8081 	bne.w	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80053e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d17c      	bne.n	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a48      	ldr	r2, [pc, #288]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a46      	ldr	r2, [pc, #280]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80053fe:	4b46      	ldr	r3, [pc, #280]	; (8005518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005400:	e000      	b.n	8005404 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005402:	4b46      	ldr	r3, [pc, #280]	; (800551c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005404:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d039      	beq.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800540e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	431a      	orrs	r2, r3
 800541c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800541e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3a      	ldr	r2, [pc, #232]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a39      	ldr	r2, [pc, #228]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d10e      	bne.n	8005452 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005434:	4836      	ldr	r0, [pc, #216]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005436:	f7ff ff6f 	bl	8005318 <LL_ADC_IsEnabled>
 800543a:	4604      	mov	r4, r0
 800543c:	4835      	ldr	r0, [pc, #212]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800543e:	f7ff ff6b 	bl	8005318 <LL_ADC_IsEnabled>
 8005442:	4603      	mov	r3, r0
 8005444:	4323      	orrs	r3, r4
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e008      	b.n	8005464 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005452:	4833      	ldr	r0, [pc, #204]	; (8005520 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005454:	f7ff ff60 	bl	8005318 <LL_ADC_IsEnabled>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d047      	beq.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	4b2d      	ldr	r3, [pc, #180]	; (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800546e:	4013      	ands	r3, r2
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	6811      	ldr	r1, [r2, #0]
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	6892      	ldr	r2, [r2, #8]
 8005478:	430a      	orrs	r2, r1
 800547a:	431a      	orrs	r2, r3
 800547c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800547e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005480:	e03a      	b.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800548a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800548c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10e      	bne.n	80054c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80054a2:	481b      	ldr	r0, [pc, #108]	; (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80054a4:	f7ff ff38 	bl	8005318 <LL_ADC_IsEnabled>
 80054a8:	4604      	mov	r4, r0
 80054aa:	481a      	ldr	r0, [pc, #104]	; (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80054ac:	f7ff ff34 	bl	8005318 <LL_ADC_IsEnabled>
 80054b0:	4603      	mov	r3, r0
 80054b2:	4323      	orrs	r3, r4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e008      	b.n	80054d2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80054c0:	4817      	ldr	r0, [pc, #92]	; (8005520 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80054c2:	f7ff ff29 	bl	8005318 <LL_ADC_IsEnabled>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80054dc:	4013      	ands	r3, r2
 80054de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80054e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054e2:	e009      	b.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80054f6:	e000      	b.n	80054fa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005502:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005506:	4618      	mov	r0, r3
 8005508:	378c      	adds	r7, #140	; 0x8c
 800550a:	46bd      	mov	sp, r7
 800550c:	bd90      	pop	{r4, r7, pc}
 800550e:	bf00      	nop
 8005510:	40022000 	.word	0x40022000
 8005514:	40022100 	.word	0x40022100
 8005518:	40022300 	.word	0x40022300
 800551c:	58026300 	.word	0x58026300
 8005520:	58026000 	.word	0x58026000
 8005524:	fffff0e0 	.word	0xfffff0e0

08005528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <__NVIC_SetPriorityGrouping+0x40>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005544:	4013      	ands	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <__NVIC_SetPriorityGrouping+0x44>)
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005556:	4a04      	ldr	r2, [pc, #16]	; (8005568 <__NVIC_SetPriorityGrouping+0x40>)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	60d3      	str	r3, [r2, #12]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	e000ed00 	.word	0xe000ed00
 800556c:	05fa0000 	.word	0x05fa0000

08005570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <__NVIC_GetPriorityGrouping+0x18>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	f003 0307 	and.w	r3, r3, #7
}
 800557e:	4618      	mov	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	db0b      	blt.n	80055b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	f003 021f 	and.w	r2, r3, #31
 80055a4:	4907      	ldr	r1, [pc, #28]	; (80055c4 <__NVIC_EnableIRQ+0x38>)
 80055a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2001      	movs	r0, #1
 80055ae:	fa00 f202 	lsl.w	r2, r0, r2
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	e000e100 	.word	0xe000e100

080055c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	6039      	str	r1, [r7, #0]
 80055d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	db0a      	blt.n	80055f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	490c      	ldr	r1, [pc, #48]	; (8005614 <__NVIC_SetPriority+0x4c>)
 80055e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055e6:	0112      	lsls	r2, r2, #4
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	440b      	add	r3, r1
 80055ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055f0:	e00a      	b.n	8005608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	4908      	ldr	r1, [pc, #32]	; (8005618 <__NVIC_SetPriority+0x50>)
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	3b04      	subs	r3, #4
 8005600:	0112      	lsls	r2, r2, #4
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	440b      	add	r3, r1
 8005606:	761a      	strb	r2, [r3, #24]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	e000e100 	.word	0xe000e100
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f1c3 0307 	rsb	r3, r3, #7
 8005636:	2b04      	cmp	r3, #4
 8005638:	bf28      	it	cs
 800563a:	2304      	movcs	r3, #4
 800563c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3304      	adds	r3, #4
 8005642:	2b06      	cmp	r3, #6
 8005644:	d902      	bls.n	800564c <NVIC_EncodePriority+0x30>
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3b03      	subs	r3, #3
 800564a:	e000      	b.n	800564e <NVIC_EncodePriority+0x32>
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43da      	mvns	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	401a      	ands	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005664:	f04f 31ff 	mov.w	r1, #4294967295
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	43d9      	mvns	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005674:	4313      	orrs	r3, r2
         );
}
 8005676:	4618      	mov	r0, r3
 8005678:	3724      	adds	r7, #36	; 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005694:	d301      	bcc.n	800569a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005696:	2301      	movs	r3, #1
 8005698:	e00f      	b.n	80056ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800569a:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <SysTick_Config+0x40>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056a2:	210f      	movs	r1, #15
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	f7ff ff8e 	bl	80055c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <SysTick_Config+0x40>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <SysTick_Config+0x40>)
 80056b4:	2207      	movs	r2, #7
 80056b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	e000e010 	.word	0xe000e010

080056c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff29 	bl	8005528 <__NVIC_SetPriorityGrouping>
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	4603      	mov	r3, r0
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056ec:	f7ff ff40 	bl	8005570 <__NVIC_GetPriorityGrouping>
 80056f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f7ff ff90 	bl	800561c <NVIC_EncodePriority>
 80056fc:	4602      	mov	r2, r0
 80056fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff5f 	bl	80055c8 <__NVIC_SetPriority>
}
 800570a:	bf00      	nop
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	4603      	mov	r3, r0
 800571a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800571c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ff33 	bl	800558c <__NVIC_EnableIRQ>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff ffa4 	bl	8005684 <SysTick_Config>
 800573c:	4603      	mov	r3, r0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005750:	f7fe fb34 	bl	8003dbc <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e312      	b.n	8005d86 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a66      	ldr	r2, [pc, #408]	; (8005900 <HAL_DMA_Init+0x1b8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d04a      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a65      	ldr	r2, [pc, #404]	; (8005904 <HAL_DMA_Init+0x1bc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d045      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a63      	ldr	r2, [pc, #396]	; (8005908 <HAL_DMA_Init+0x1c0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d040      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a62      	ldr	r2, [pc, #392]	; (800590c <HAL_DMA_Init+0x1c4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d03b      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a60      	ldr	r2, [pc, #384]	; (8005910 <HAL_DMA_Init+0x1c8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d036      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a5f      	ldr	r2, [pc, #380]	; (8005914 <HAL_DMA_Init+0x1cc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d031      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a5d      	ldr	r2, [pc, #372]	; (8005918 <HAL_DMA_Init+0x1d0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d02c      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a5c      	ldr	r2, [pc, #368]	; (800591c <HAL_DMA_Init+0x1d4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d027      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a5a      	ldr	r2, [pc, #360]	; (8005920 <HAL_DMA_Init+0x1d8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d022      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a59      	ldr	r2, [pc, #356]	; (8005924 <HAL_DMA_Init+0x1dc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01d      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a57      	ldr	r2, [pc, #348]	; (8005928 <HAL_DMA_Init+0x1e0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d018      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a56      	ldr	r2, [pc, #344]	; (800592c <HAL_DMA_Init+0x1e4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d013      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a54      	ldr	r2, [pc, #336]	; (8005930 <HAL_DMA_Init+0x1e8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00e      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a53      	ldr	r2, [pc, #332]	; (8005934 <HAL_DMA_Init+0x1ec>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a51      	ldr	r2, [pc, #324]	; (8005938 <HAL_DMA_Init+0x1f0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_DMA_Init+0xb8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a50      	ldr	r2, [pc, #320]	; (800593c <HAL_DMA_Init+0x1f4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_DMA_Init+0xbc>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_DMA_Init+0xbe>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 813c 	beq.w	8005a84 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a37      	ldr	r2, [pc, #220]	; (8005900 <HAL_DMA_Init+0x1b8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d04a      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a36      	ldr	r2, [pc, #216]	; (8005904 <HAL_DMA_Init+0x1bc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d045      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a34      	ldr	r2, [pc, #208]	; (8005908 <HAL_DMA_Init+0x1c0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d040      	beq.n	80058bc <HAL_DMA_Init+0x174>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a33      	ldr	r2, [pc, #204]	; (800590c <HAL_DMA_Init+0x1c4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d03b      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a31      	ldr	r2, [pc, #196]	; (8005910 <HAL_DMA_Init+0x1c8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d036      	beq.n	80058bc <HAL_DMA_Init+0x174>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a30      	ldr	r2, [pc, #192]	; (8005914 <HAL_DMA_Init+0x1cc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d031      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2e      	ldr	r2, [pc, #184]	; (8005918 <HAL_DMA_Init+0x1d0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02c      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a2d      	ldr	r2, [pc, #180]	; (800591c <HAL_DMA_Init+0x1d4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d027      	beq.n	80058bc <HAL_DMA_Init+0x174>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_DMA_Init+0x1d8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d022      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2a      	ldr	r2, [pc, #168]	; (8005924 <HAL_DMA_Init+0x1dc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d01d      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a28      	ldr	r2, [pc, #160]	; (8005928 <HAL_DMA_Init+0x1e0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <HAL_DMA_Init+0x174>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a27      	ldr	r2, [pc, #156]	; (800592c <HAL_DMA_Init+0x1e4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_DMA_Init+0x174>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a25      	ldr	r2, [pc, #148]	; (8005930 <HAL_DMA_Init+0x1e8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_DMA_Init+0x174>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a24      	ldr	r2, [pc, #144]	; (8005934 <HAL_DMA_Init+0x1ec>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_DMA_Init+0x174>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a22      	ldr	r2, [pc, #136]	; (8005938 <HAL_DMA_Init+0x1f0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_DMA_Init+0x174>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a21      	ldr	r2, [pc, #132]	; (800593c <HAL_DMA_Init+0x1f4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d108      	bne.n	80058ce <HAL_DMA_Init+0x186>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e007      	b.n	80058de <HAL_DMA_Init+0x196>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058de:	e02f      	b.n	8005940 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058e0:	f7fe fa6c 	bl	8003dbc <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d928      	bls.n	8005940 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e242      	b.n	8005d86 <HAL_DMA_Init+0x63e>
 8005900:	40020010 	.word	0x40020010
 8005904:	40020028 	.word	0x40020028
 8005908:	40020040 	.word	0x40020040
 800590c:	40020058 	.word	0x40020058
 8005910:	40020070 	.word	0x40020070
 8005914:	40020088 	.word	0x40020088
 8005918:	400200a0 	.word	0x400200a0
 800591c:	400200b8 	.word	0x400200b8
 8005920:	40020410 	.word	0x40020410
 8005924:	40020428 	.word	0x40020428
 8005928:	40020440 	.word	0x40020440
 800592c:	40020458 	.word	0x40020458
 8005930:	40020470 	.word	0x40020470
 8005934:	40020488 	.word	0x40020488
 8005938:	400204a0 	.word	0x400204a0
 800593c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1c8      	bne.n	80058e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4b83      	ldr	r3, [pc, #524]	; (8005b68 <HAL_DMA_Init+0x420>)
 800595a:	4013      	ands	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005966:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005972:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800597e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b04      	cmp	r3, #4
 8005992:	d107      	bne.n	80059a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	4313      	orrs	r3, r2
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b28      	cmp	r3, #40	; 0x28
 80059aa:	d903      	bls.n	80059b4 <HAL_DMA_Init+0x26c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b2e      	cmp	r3, #46	; 0x2e
 80059b2:	d91f      	bls.n	80059f4 <HAL_DMA_Init+0x2ac>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b3e      	cmp	r3, #62	; 0x3e
 80059ba:	d903      	bls.n	80059c4 <HAL_DMA_Init+0x27c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b42      	cmp	r3, #66	; 0x42
 80059c2:	d917      	bls.n	80059f4 <HAL_DMA_Init+0x2ac>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b46      	cmp	r3, #70	; 0x46
 80059ca:	d903      	bls.n	80059d4 <HAL_DMA_Init+0x28c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b48      	cmp	r3, #72	; 0x48
 80059d2:	d90f      	bls.n	80059f4 <HAL_DMA_Init+0x2ac>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b4e      	cmp	r3, #78	; 0x4e
 80059da:	d903      	bls.n	80059e4 <HAL_DMA_Init+0x29c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b52      	cmp	r3, #82	; 0x52
 80059e2:	d907      	bls.n	80059f4 <HAL_DMA_Init+0x2ac>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b73      	cmp	r3, #115	; 0x73
 80059ea:	d905      	bls.n	80059f8 <HAL_DMA_Init+0x2b0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b77      	cmp	r3, #119	; 0x77
 80059f2:	d801      	bhi.n	80059f8 <HAL_DMA_Init+0x2b0>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_DMA_Init+0x2b2>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a04:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f023 0307 	bic.w	r3, r3, #7
 8005a1c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d117      	bne.n	8005a60 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00e      	beq.n	8005a60 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fdca 	bl	80075dc <DMA_CheckFifoParam>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2240      	movs	r2, #64	; 0x40
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e192      	b.n	8005d86 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 fd05 	bl	8007478 <DMA_CalcBaseAndBitshift>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	223f      	movs	r2, #63	; 0x3f
 8005a7c:	409a      	lsls	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	609a      	str	r2, [r3, #8]
 8005a82:	e0c8      	b.n	8005c16 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a38      	ldr	r2, [pc, #224]	; (8005b6c <HAL_DMA_Init+0x424>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_DMA_Init+0x38c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a37      	ldr	r2, [pc, #220]	; (8005b70 <HAL_DMA_Init+0x428>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d01d      	beq.n	8005ad4 <HAL_DMA_Init+0x38c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a35      	ldr	r2, [pc, #212]	; (8005b74 <HAL_DMA_Init+0x42c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_DMA_Init+0x38c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a34      	ldr	r2, [pc, #208]	; (8005b78 <HAL_DMA_Init+0x430>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_Init+0x38c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a32      	ldr	r2, [pc, #200]	; (8005b7c <HAL_DMA_Init+0x434>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_DMA_Init+0x38c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a31      	ldr	r2, [pc, #196]	; (8005b80 <HAL_DMA_Init+0x438>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_DMA_Init+0x38c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	; (8005b84 <HAL_DMA_Init+0x43c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_DMA_Init+0x38c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2e      	ldr	r2, [pc, #184]	; (8005b88 <HAL_DMA_Init+0x440>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <HAL_DMA_Init+0x390>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <HAL_DMA_Init+0x392>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 8092 	beq.w	8005c04 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <HAL_DMA_Init+0x424>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d021      	beq.n	8005b2e <HAL_DMA_Init+0x3e6>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a20      	ldr	r2, [pc, #128]	; (8005b70 <HAL_DMA_Init+0x428>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d01c      	beq.n	8005b2e <HAL_DMA_Init+0x3e6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <HAL_DMA_Init+0x42c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d017      	beq.n	8005b2e <HAL_DMA_Init+0x3e6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1d      	ldr	r2, [pc, #116]	; (8005b78 <HAL_DMA_Init+0x430>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d012      	beq.n	8005b2e <HAL_DMA_Init+0x3e6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1b      	ldr	r2, [pc, #108]	; (8005b7c <HAL_DMA_Init+0x434>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00d      	beq.n	8005b2e <HAL_DMA_Init+0x3e6>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1a      	ldr	r2, [pc, #104]	; (8005b80 <HAL_DMA_Init+0x438>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d008      	beq.n	8005b2e <HAL_DMA_Init+0x3e6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a18      	ldr	r2, [pc, #96]	; (8005b84 <HAL_DMA_Init+0x43c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <HAL_DMA_Init+0x3e6>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <HAL_DMA_Init+0x440>)
 8005b2c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2202      	movs	r2, #2
 8005b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <HAL_DMA_Init+0x444>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d01c      	beq.n	8005b90 <HAL_DMA_Init+0x448>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d102      	bne.n	8005b64 <HAL_DMA_Init+0x41c>
 8005b5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b62:	e016      	b.n	8005b92 <HAL_DMA_Init+0x44a>
 8005b64:	2300      	movs	r3, #0
 8005b66:	e014      	b.n	8005b92 <HAL_DMA_Init+0x44a>
 8005b68:	fe10803f 	.word	0xfe10803f
 8005b6c:	58025408 	.word	0x58025408
 8005b70:	5802541c 	.word	0x5802541c
 8005b74:	58025430 	.word	0x58025430
 8005b78:	58025444 	.word	0x58025444
 8005b7c:	58025458 	.word	0x58025458
 8005b80:	5802546c 	.word	0x5802546c
 8005b84:	58025480 	.word	0x58025480
 8005b88:	58025494 	.word	0x58025494
 8005b8c:	fffe000f 	.word	0xfffe000f
 8005b90:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68d2      	ldr	r2, [r2, #12]
 8005b96:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005bc0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4b6e      	ldr	r3, [pc, #440]	; (8005d90 <HAL_DMA_Init+0x648>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	4a6e      	ldr	r2, [pc, #440]	; (8005d94 <HAL_DMA_Init+0x64c>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	091b      	lsrs	r3, r3, #4
 8005be2:	009a      	lsls	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 fc45 	bl	8007478 <DMA_CalcBaseAndBitshift>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e008      	b.n	8005c16 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2240      	movs	r2, #64	; 0x40
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e0b7      	b.n	8005d86 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a5f      	ldr	r2, [pc, #380]	; (8005d98 <HAL_DMA_Init+0x650>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d072      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a5d      	ldr	r2, [pc, #372]	; (8005d9c <HAL_DMA_Init+0x654>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d06d      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a5c      	ldr	r2, [pc, #368]	; (8005da0 <HAL_DMA_Init+0x658>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d068      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a5a      	ldr	r2, [pc, #360]	; (8005da4 <HAL_DMA_Init+0x65c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d063      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a59      	ldr	r2, [pc, #356]	; (8005da8 <HAL_DMA_Init+0x660>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d05e      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a57      	ldr	r2, [pc, #348]	; (8005dac <HAL_DMA_Init+0x664>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d059      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a56      	ldr	r2, [pc, #344]	; (8005db0 <HAL_DMA_Init+0x668>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d054      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a54      	ldr	r2, [pc, #336]	; (8005db4 <HAL_DMA_Init+0x66c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d04f      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a53      	ldr	r2, [pc, #332]	; (8005db8 <HAL_DMA_Init+0x670>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d04a      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a51      	ldr	r2, [pc, #324]	; (8005dbc <HAL_DMA_Init+0x674>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d045      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a50      	ldr	r2, [pc, #320]	; (8005dc0 <HAL_DMA_Init+0x678>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d040      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a4e      	ldr	r2, [pc, #312]	; (8005dc4 <HAL_DMA_Init+0x67c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d03b      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a4d      	ldr	r2, [pc, #308]	; (8005dc8 <HAL_DMA_Init+0x680>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d036      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a4b      	ldr	r2, [pc, #300]	; (8005dcc <HAL_DMA_Init+0x684>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a4a      	ldr	r2, [pc, #296]	; (8005dd0 <HAL_DMA_Init+0x688>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d02c      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a48      	ldr	r2, [pc, #288]	; (8005dd4 <HAL_DMA_Init+0x68c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d027      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a47      	ldr	r2, [pc, #284]	; (8005dd8 <HAL_DMA_Init+0x690>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a45      	ldr	r2, [pc, #276]	; (8005ddc <HAL_DMA_Init+0x694>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01d      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a44      	ldr	r2, [pc, #272]	; (8005de0 <HAL_DMA_Init+0x698>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a42      	ldr	r2, [pc, #264]	; (8005de4 <HAL_DMA_Init+0x69c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a41      	ldr	r2, [pc, #260]	; (8005de8 <HAL_DMA_Init+0x6a0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3f      	ldr	r2, [pc, #252]	; (8005dec <HAL_DMA_Init+0x6a4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a3e      	ldr	r2, [pc, #248]	; (8005df0 <HAL_DMA_Init+0x6a8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_DMA_Init+0x5be>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a3c      	ldr	r2, [pc, #240]	; (8005df4 <HAL_DMA_Init+0x6ac>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d101      	bne.n	8005d0a <HAL_DMA_Init+0x5c2>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_DMA_Init+0x5c4>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d032      	beq.n	8005d76 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 fcdf 	bl	80076d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d102      	bne.n	8005d24 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d38:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d010      	beq.n	8005d64 <HAL_DMA_Init+0x61c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d80c      	bhi.n	8005d64 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fd5c 	bl	8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d60:	605a      	str	r2, [r3, #4]
 8005d62:	e008      	b.n	8005d76 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	a7fdabf8 	.word	0xa7fdabf8
 8005d94:	cccccccd 	.word	0xcccccccd
 8005d98:	40020010 	.word	0x40020010
 8005d9c:	40020028 	.word	0x40020028
 8005da0:	40020040 	.word	0x40020040
 8005da4:	40020058 	.word	0x40020058
 8005da8:	40020070 	.word	0x40020070
 8005dac:	40020088 	.word	0x40020088
 8005db0:	400200a0 	.word	0x400200a0
 8005db4:	400200b8 	.word	0x400200b8
 8005db8:	40020410 	.word	0x40020410
 8005dbc:	40020428 	.word	0x40020428
 8005dc0:	40020440 	.word	0x40020440
 8005dc4:	40020458 	.word	0x40020458
 8005dc8:	40020470 	.word	0x40020470
 8005dcc:	40020488 	.word	0x40020488
 8005dd0:	400204a0 	.word	0x400204a0
 8005dd4:	400204b8 	.word	0x400204b8
 8005dd8:	58025408 	.word	0x58025408
 8005ddc:	5802541c 	.word	0x5802541c
 8005de0:	58025430 	.word	0x58025430
 8005de4:	58025444 	.word	0x58025444
 8005de8:	58025458 	.word	0x58025458
 8005dec:	5802546c 	.word	0x5802546c
 8005df0:	58025480 	.word	0x58025480
 8005df4:	58025494 	.word	0x58025494

08005df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e226      	b.n	8006262 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_DMA_Start_IT+0x2a>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e21f      	b.n	8006262 <HAL_DMA_Start_IT+0x46a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 820a 	bne.w	800624c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a68      	ldr	r2, [pc, #416]	; (8005fec <HAL_DMA_Start_IT+0x1f4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a66      	ldr	r2, [pc, #408]	; (8005ff0 <HAL_DMA_Start_IT+0x1f8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a65      	ldr	r2, [pc, #404]	; (8005ff4 <HAL_DMA_Start_IT+0x1fc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a63      	ldr	r2, [pc, #396]	; (8005ff8 <HAL_DMA_Start_IT+0x200>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a62      	ldr	r2, [pc, #392]	; (8005ffc <HAL_DMA_Start_IT+0x204>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a60      	ldr	r2, [pc, #384]	; (8006000 <HAL_DMA_Start_IT+0x208>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5f      	ldr	r2, [pc, #380]	; (8006004 <HAL_DMA_Start_IT+0x20c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5d      	ldr	r2, [pc, #372]	; (8006008 <HAL_DMA_Start_IT+0x210>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5c      	ldr	r2, [pc, #368]	; (800600c <HAL_DMA_Start_IT+0x214>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5a      	ldr	r2, [pc, #360]	; (8006010 <HAL_DMA_Start_IT+0x218>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a59      	ldr	r2, [pc, #356]	; (8006014 <HAL_DMA_Start_IT+0x21c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a57      	ldr	r2, [pc, #348]	; (8006018 <HAL_DMA_Start_IT+0x220>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a56      	ldr	r2, [pc, #344]	; (800601c <HAL_DMA_Start_IT+0x224>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <HAL_DMA_Start_IT+0x228>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a53      	ldr	r2, [pc, #332]	; (8006024 <HAL_DMA_Start_IT+0x22c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_DMA_Start_IT+0xee>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a51      	ldr	r2, [pc, #324]	; (8006028 <HAL_DMA_Start_IT+0x230>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d108      	bne.n	8005ef8 <HAL_DMA_Start_IT+0x100>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e007      	b.n	8005f08 <HAL_DMA_Start_IT+0x110>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 f906 	bl	8007120 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a34      	ldr	r2, [pc, #208]	; (8005fec <HAL_DMA_Start_IT+0x1f4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d04a      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a33      	ldr	r2, [pc, #204]	; (8005ff0 <HAL_DMA_Start_IT+0x1f8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d045      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a31      	ldr	r2, [pc, #196]	; (8005ff4 <HAL_DMA_Start_IT+0x1fc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d040      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a30      	ldr	r2, [pc, #192]	; (8005ff8 <HAL_DMA_Start_IT+0x200>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d03b      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a2e      	ldr	r2, [pc, #184]	; (8005ffc <HAL_DMA_Start_IT+0x204>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d036      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2d      	ldr	r2, [pc, #180]	; (8006000 <HAL_DMA_Start_IT+0x208>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d031      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a2b      	ldr	r2, [pc, #172]	; (8006004 <HAL_DMA_Start_IT+0x20c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d02c      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2a      	ldr	r2, [pc, #168]	; (8006008 <HAL_DMA_Start_IT+0x210>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d027      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a28      	ldr	r2, [pc, #160]	; (800600c <HAL_DMA_Start_IT+0x214>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d022      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a27      	ldr	r2, [pc, #156]	; (8006010 <HAL_DMA_Start_IT+0x218>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d01d      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a25      	ldr	r2, [pc, #148]	; (8006014 <HAL_DMA_Start_IT+0x21c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a24      	ldr	r2, [pc, #144]	; (8006018 <HAL_DMA_Start_IT+0x220>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a22      	ldr	r2, [pc, #136]	; (800601c <HAL_DMA_Start_IT+0x224>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a21      	ldr	r2, [pc, #132]	; (8006020 <HAL_DMA_Start_IT+0x228>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	; (8006024 <HAL_DMA_Start_IT+0x22c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x1bc>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <HAL_DMA_Start_IT+0x230>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_DMA_Start_IT+0x1c0>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_DMA_Start_IT+0x1c2>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d036      	beq.n	800602c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 021e 	bic.w	r2, r3, #30
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0216 	orr.w	r2, r2, #22
 8005fd0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d03e      	beq.n	8006058 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0208 	orr.w	r2, r2, #8
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e035      	b.n	8006058 <HAL_DMA_Start_IT+0x260>
 8005fec:	40020010 	.word	0x40020010
 8005ff0:	40020028 	.word	0x40020028
 8005ff4:	40020040 	.word	0x40020040
 8005ff8:	40020058 	.word	0x40020058
 8005ffc:	40020070 	.word	0x40020070
 8006000:	40020088 	.word	0x40020088
 8006004:	400200a0 	.word	0x400200a0
 8006008:	400200b8 	.word	0x400200b8
 800600c:	40020410 	.word	0x40020410
 8006010:	40020428 	.word	0x40020428
 8006014:	40020440 	.word	0x40020440
 8006018:	40020458 	.word	0x40020458
 800601c:	40020470 	.word	0x40020470
 8006020:	40020488 	.word	0x40020488
 8006024:	400204a0 	.word	0x400204a0
 8006028:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 020e 	bic.w	r2, r3, #14
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 020a 	orr.w	r2, r2, #10
 800603e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0204 	orr.w	r2, r2, #4
 8006056:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a83      	ldr	r2, [pc, #524]	; (800626c <HAL_DMA_Start_IT+0x474>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d072      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a82      	ldr	r2, [pc, #520]	; (8006270 <HAL_DMA_Start_IT+0x478>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d06d      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a80      	ldr	r2, [pc, #512]	; (8006274 <HAL_DMA_Start_IT+0x47c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d068      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a7f      	ldr	r2, [pc, #508]	; (8006278 <HAL_DMA_Start_IT+0x480>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d063      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a7d      	ldr	r2, [pc, #500]	; (800627c <HAL_DMA_Start_IT+0x484>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d05e      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a7c      	ldr	r2, [pc, #496]	; (8006280 <HAL_DMA_Start_IT+0x488>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d059      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a7a      	ldr	r2, [pc, #488]	; (8006284 <HAL_DMA_Start_IT+0x48c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d054      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a79      	ldr	r2, [pc, #484]	; (8006288 <HAL_DMA_Start_IT+0x490>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d04f      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a77      	ldr	r2, [pc, #476]	; (800628c <HAL_DMA_Start_IT+0x494>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d04a      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a76      	ldr	r2, [pc, #472]	; (8006290 <HAL_DMA_Start_IT+0x498>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d045      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a74      	ldr	r2, [pc, #464]	; (8006294 <HAL_DMA_Start_IT+0x49c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d040      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a73      	ldr	r2, [pc, #460]	; (8006298 <HAL_DMA_Start_IT+0x4a0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d03b      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a71      	ldr	r2, [pc, #452]	; (800629c <HAL_DMA_Start_IT+0x4a4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d036      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a70      	ldr	r2, [pc, #448]	; (80062a0 <HAL_DMA_Start_IT+0x4a8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d031      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	; (80062a4 <HAL_DMA_Start_IT+0x4ac>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02c      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a6d      	ldr	r2, [pc, #436]	; (80062a8 <HAL_DMA_Start_IT+0x4b0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a6b      	ldr	r2, [pc, #428]	; (80062ac <HAL_DMA_Start_IT+0x4b4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a6a      	ldr	r2, [pc, #424]	; (80062b0 <HAL_DMA_Start_IT+0x4b8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a68      	ldr	r2, [pc, #416]	; (80062b4 <HAL_DMA_Start_IT+0x4bc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a67      	ldr	r2, [pc, #412]	; (80062b8 <HAL_DMA_Start_IT+0x4c0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a65      	ldr	r2, [pc, #404]	; (80062bc <HAL_DMA_Start_IT+0x4c4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a64      	ldr	r2, [pc, #400]	; (80062c0 <HAL_DMA_Start_IT+0x4c8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a62      	ldr	r2, [pc, #392]	; (80062c4 <HAL_DMA_Start_IT+0x4cc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_DMA_Start_IT+0x350>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a61      	ldr	r2, [pc, #388]	; (80062c8 <HAL_DMA_Start_IT+0x4d0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d101      	bne.n	800614c <HAL_DMA_Start_IT+0x354>
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <HAL_DMA_Start_IT+0x356>
 800614c:	2300      	movs	r3, #0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01a      	beq.n	8006188 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006186:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a37      	ldr	r2, [pc, #220]	; (800626c <HAL_DMA_Start_IT+0x474>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a36      	ldr	r2, [pc, #216]	; (8006270 <HAL_DMA_Start_IT+0x478>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a34      	ldr	r2, [pc, #208]	; (8006274 <HAL_DMA_Start_IT+0x47c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a33      	ldr	r2, [pc, #204]	; (8006278 <HAL_DMA_Start_IT+0x480>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a31      	ldr	r2, [pc, #196]	; (800627c <HAL_DMA_Start_IT+0x484>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a30      	ldr	r2, [pc, #192]	; (8006280 <HAL_DMA_Start_IT+0x488>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2e      	ldr	r2, [pc, #184]	; (8006284 <HAL_DMA_Start_IT+0x48c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	; (8006288 <HAL_DMA_Start_IT+0x490>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	; (800628c <HAL_DMA_Start_IT+0x494>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <HAL_DMA_Start_IT+0x498>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <HAL_DMA_Start_IT+0x49c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a27      	ldr	r2, [pc, #156]	; (8006298 <HAL_DMA_Start_IT+0x4a0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a25      	ldr	r2, [pc, #148]	; (800629c <HAL_DMA_Start_IT+0x4a4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a24      	ldr	r2, [pc, #144]	; (80062a0 <HAL_DMA_Start_IT+0x4a8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <HAL_DMA_Start_IT+0x4ac>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_DMA_Start_IT+0x430>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_DMA_Start_IT+0x4b0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <HAL_DMA_Start_IT+0x442>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e012      	b.n	8006260 <HAL_DMA_Start_IT+0x468>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e009      	b.n	8006260 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006252:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40020010 	.word	0x40020010
 8006270:	40020028 	.word	0x40020028
 8006274:	40020040 	.word	0x40020040
 8006278:	40020058 	.word	0x40020058
 800627c:	40020070 	.word	0x40020070
 8006280:	40020088 	.word	0x40020088
 8006284:	400200a0 	.word	0x400200a0
 8006288:	400200b8 	.word	0x400200b8
 800628c:	40020410 	.word	0x40020410
 8006290:	40020428 	.word	0x40020428
 8006294:	40020440 	.word	0x40020440
 8006298:	40020458 	.word	0x40020458
 800629c:	40020470 	.word	0x40020470
 80062a0:	40020488 	.word	0x40020488
 80062a4:	400204a0 	.word	0x400204a0
 80062a8:	400204b8 	.word	0x400204b8
 80062ac:	58025408 	.word	0x58025408
 80062b0:	5802541c 	.word	0x5802541c
 80062b4:	58025430 	.word	0x58025430
 80062b8:	58025444 	.word	0x58025444
 80062bc:	58025458 	.word	0x58025458
 80062c0:	5802546c 	.word	0x5802546c
 80062c4:	58025480 	.word	0x58025480
 80062c8:	58025494 	.word	0x58025494

080062cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062d8:	4b67      	ldr	r3, [pc, #412]	; (8006478 <HAL_DMA_IRQHandler+0x1ac>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a67      	ldr	r2, [pc, #412]	; (800647c <HAL_DMA_IRQHandler+0x1b0>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	0a9b      	lsrs	r3, r3, #10
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a5f      	ldr	r2, [pc, #380]	; (8006480 <HAL_DMA_IRQHandler+0x1b4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d04a      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5d      	ldr	r2, [pc, #372]	; (8006484 <HAL_DMA_IRQHandler+0x1b8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d045      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5c      	ldr	r2, [pc, #368]	; (8006488 <HAL_DMA_IRQHandler+0x1bc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d040      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5a      	ldr	r2, [pc, #360]	; (800648c <HAL_DMA_IRQHandler+0x1c0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d03b      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a59      	ldr	r2, [pc, #356]	; (8006490 <HAL_DMA_IRQHandler+0x1c4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d036      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a57      	ldr	r2, [pc, #348]	; (8006494 <HAL_DMA_IRQHandler+0x1c8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d031      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a56      	ldr	r2, [pc, #344]	; (8006498 <HAL_DMA_IRQHandler+0x1cc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d02c      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a54      	ldr	r2, [pc, #336]	; (800649c <HAL_DMA_IRQHandler+0x1d0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d027      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a53      	ldr	r2, [pc, #332]	; (80064a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d022      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a51      	ldr	r2, [pc, #324]	; (80064a4 <HAL_DMA_IRQHandler+0x1d8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01d      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a50      	ldr	r2, [pc, #320]	; (80064a8 <HAL_DMA_IRQHandler+0x1dc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d018      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a4e      	ldr	r2, [pc, #312]	; (80064ac <HAL_DMA_IRQHandler+0x1e0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a4d      	ldr	r2, [pc, #308]	; (80064b0 <HAL_DMA_IRQHandler+0x1e4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a4b      	ldr	r2, [pc, #300]	; (80064b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a4a      	ldr	r2, [pc, #296]	; (80064b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a48      	ldr	r2, [pc, #288]	; (80064bc <HAL_DMA_IRQHandler+0x1f0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_DMA_IRQHandler+0xd6>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <HAL_DMA_IRQHandler+0xd8>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 842b 	beq.w	8006c00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2208      	movs	r2, #8
 80063b4:	409a      	lsls	r2, r3
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80a2 	beq.w	8006504 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2e      	ldr	r2, [pc, #184]	; (8006480 <HAL_DMA_IRQHandler+0x1b4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2d      	ldr	r2, [pc, #180]	; (8006484 <HAL_DMA_IRQHandler+0x1b8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	; (8006488 <HAL_DMA_IRQHandler+0x1bc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2a      	ldr	r2, [pc, #168]	; (800648c <HAL_DMA_IRQHandler+0x1c0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a28      	ldr	r2, [pc, #160]	; (8006490 <HAL_DMA_IRQHandler+0x1c4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a27      	ldr	r2, [pc, #156]	; (8006494 <HAL_DMA_IRQHandler+0x1c8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a25      	ldr	r2, [pc, #148]	; (8006498 <HAL_DMA_IRQHandler+0x1cc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a24      	ldr	r2, [pc, #144]	; (800649c <HAL_DMA_IRQHandler+0x1d0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <HAL_DMA_IRQHandler+0x1d8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <HAL_DMA_IRQHandler+0x1dc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <HAL_DMA_IRQHandler+0x1e0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_DMA_IRQHandler+0x1e4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a18      	ldr	r2, [pc, #96]	; (80064bc <HAL_DMA_IRQHandler+0x1f0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d12f      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x1f4>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e02e      	b.n	80064d4 <HAL_DMA_IRQHandler+0x208>
 8006476:	bf00      	nop
 8006478:	24000000 	.word	0x24000000
 800647c:	1b4e81b5 	.word	0x1b4e81b5
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2208      	movs	r2, #8
 80064f2:	409a      	lsls	r2, r3
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	fa22 f303 	lsr.w	r3, r2, r3
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d06e      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a69      	ldr	r2, [pc, #420]	; (80066c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a67      	ldr	r2, [pc, #412]	; (80066c8 <HAL_DMA_IRQHandler+0x3fc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a66      	ldr	r2, [pc, #408]	; (80066cc <HAL_DMA_IRQHandler+0x400>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a64      	ldr	r2, [pc, #400]	; (80066d0 <HAL_DMA_IRQHandler+0x404>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a63      	ldr	r2, [pc, #396]	; (80066d4 <HAL_DMA_IRQHandler+0x408>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a61      	ldr	r2, [pc, #388]	; (80066d8 <HAL_DMA_IRQHandler+0x40c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a60      	ldr	r2, [pc, #384]	; (80066dc <HAL_DMA_IRQHandler+0x410>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5e      	ldr	r2, [pc, #376]	; (80066e0 <HAL_DMA_IRQHandler+0x414>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5d      	ldr	r2, [pc, #372]	; (80066e4 <HAL_DMA_IRQHandler+0x418>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5b      	ldr	r2, [pc, #364]	; (80066e8 <HAL_DMA_IRQHandler+0x41c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5a      	ldr	r2, [pc, #360]	; (80066ec <HAL_DMA_IRQHandler+0x420>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a58      	ldr	r2, [pc, #352]	; (80066f0 <HAL_DMA_IRQHandler+0x424>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a57      	ldr	r2, [pc, #348]	; (80066f4 <HAL_DMA_IRQHandler+0x428>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a55      	ldr	r2, [pc, #340]	; (80066f8 <HAL_DMA_IRQHandler+0x42c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a54      	ldr	r2, [pc, #336]	; (80066fc <HAL_DMA_IRQHandler+0x430>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a52      	ldr	r2, [pc, #328]	; (8006700 <HAL_DMA_IRQHandler+0x434>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10a      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x304>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e003      	b.n	80065d8 <HAL_DMA_IRQHandler+0x30c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2201      	movs	r2, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f0:	f043 0202 	orr.w	r2, r3, #2
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2204      	movs	r2, #4
 8006602:	409a      	lsls	r2, r3
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4013      	ands	r3, r2
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 808f 	beq.w	800672c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d04a      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2a      	ldr	r2, [pc, #168]	; (80066c8 <HAL_DMA_IRQHandler+0x3fc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d045      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a29      	ldr	r2, [pc, #164]	; (80066cc <HAL_DMA_IRQHandler+0x400>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d040      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a27      	ldr	r2, [pc, #156]	; (80066d0 <HAL_DMA_IRQHandler+0x404>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d03b      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a26      	ldr	r2, [pc, #152]	; (80066d4 <HAL_DMA_IRQHandler+0x408>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d036      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a24      	ldr	r2, [pc, #144]	; (80066d8 <HAL_DMA_IRQHandler+0x40c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d031      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a23      	ldr	r2, [pc, #140]	; (80066dc <HAL_DMA_IRQHandler+0x410>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d02c      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <HAL_DMA_IRQHandler+0x414>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d027      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <HAL_DMA_IRQHandler+0x418>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_DMA_IRQHandler+0x41c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01d      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <HAL_DMA_IRQHandler+0x420>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <HAL_DMA_IRQHandler+0x424>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <HAL_DMA_IRQHandler+0x428>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <HAL_DMA_IRQHandler+0x42c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a17      	ldr	r2, [pc, #92]	; (80066fc <HAL_DMA_IRQHandler+0x430>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a15      	ldr	r2, [pc, #84]	; (8006700 <HAL_DMA_IRQHandler+0x434>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d12a      	bne.n	8006704 <HAL_DMA_IRQHandler+0x438>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e023      	b.n	800670c <HAL_DMA_IRQHandler+0x440>
 80066c4:	40020010 	.word	0x40020010
 80066c8:	40020028 	.word	0x40020028
 80066cc:	40020040 	.word	0x40020040
 80066d0:	40020058 	.word	0x40020058
 80066d4:	40020070 	.word	0x40020070
 80066d8:	40020088 	.word	0x40020088
 80066dc:	400200a0 	.word	0x400200a0
 80066e0:	400200b8 	.word	0x400200b8
 80066e4:	40020410 	.word	0x40020410
 80066e8:	40020428 	.word	0x40020428
 80066ec:	40020440 	.word	0x40020440
 80066f0:	40020458 	.word	0x40020458
 80066f4:	40020470 	.word	0x40020470
 80066f8:	40020488 	.word	0x40020488
 80066fc:	400204a0 	.word	0x400204a0
 8006700:	400204b8 	.word	0x400204b8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2204      	movs	r2, #4
 800671a:	409a      	lsls	r2, r3
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006724:	f043 0204 	orr.w	r2, r3, #4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	2210      	movs	r2, #16
 8006736:	409a      	lsls	r2, r3
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80a6 	beq.w	800688e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a85      	ldr	r2, [pc, #532]	; (800695c <HAL_DMA_IRQHandler+0x690>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d04a      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a83      	ldr	r2, [pc, #524]	; (8006960 <HAL_DMA_IRQHandler+0x694>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d045      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a82      	ldr	r2, [pc, #520]	; (8006964 <HAL_DMA_IRQHandler+0x698>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d040      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a80      	ldr	r2, [pc, #512]	; (8006968 <HAL_DMA_IRQHandler+0x69c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d03b      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a7f      	ldr	r2, [pc, #508]	; (800696c <HAL_DMA_IRQHandler+0x6a0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d036      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a7d      	ldr	r2, [pc, #500]	; (8006970 <HAL_DMA_IRQHandler+0x6a4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d031      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7c      	ldr	r2, [pc, #496]	; (8006974 <HAL_DMA_IRQHandler+0x6a8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d02c      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a7a      	ldr	r2, [pc, #488]	; (8006978 <HAL_DMA_IRQHandler+0x6ac>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d027      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a79      	ldr	r2, [pc, #484]	; (800697c <HAL_DMA_IRQHandler+0x6b0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a77      	ldr	r2, [pc, #476]	; (8006980 <HAL_DMA_IRQHandler+0x6b4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01d      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a76      	ldr	r2, [pc, #472]	; (8006984 <HAL_DMA_IRQHandler+0x6b8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a74      	ldr	r2, [pc, #464]	; (8006988 <HAL_DMA_IRQHandler+0x6bc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a73      	ldr	r2, [pc, #460]	; (800698c <HAL_DMA_IRQHandler+0x6c0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a71      	ldr	r2, [pc, #452]	; (8006990 <HAL_DMA_IRQHandler+0x6c4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a70      	ldr	r2, [pc, #448]	; (8006994 <HAL_DMA_IRQHandler+0x6c8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6e      	ldr	r2, [pc, #440]	; (8006998 <HAL_DMA_IRQHandler+0x6cc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10a      	bne.n	80067f8 <HAL_DMA_IRQHandler+0x52c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf14      	ite	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	2300      	moveq	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e009      	b.n	800680c <HAL_DMA_IRQHandler+0x540>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d03e      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2210      	movs	r2, #16
 800681a:	409a      	lsls	r2, r3
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d108      	bne.n	800684e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d024      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	e01f      	b.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
 800685e:	e016      	b.n	800688e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0208 	bic.w	r2, r2, #8
 800687c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2220      	movs	r2, #32
 8006898:	409a      	lsls	r2, r3
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8110 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	; (800695c <HAL_DMA_IRQHandler+0x690>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d04a      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <HAL_DMA_IRQHandler+0x694>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d045      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a29      	ldr	r2, [pc, #164]	; (8006964 <HAL_DMA_IRQHandler+0x698>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d040      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a28      	ldr	r2, [pc, #160]	; (8006968 <HAL_DMA_IRQHandler+0x69c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d03b      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a26      	ldr	r2, [pc, #152]	; (800696c <HAL_DMA_IRQHandler+0x6a0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d036      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a25      	ldr	r2, [pc, #148]	; (8006970 <HAL_DMA_IRQHandler+0x6a4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d031      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a23      	ldr	r2, [pc, #140]	; (8006974 <HAL_DMA_IRQHandler+0x6a8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d02c      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a22      	ldr	r2, [pc, #136]	; (8006978 <HAL_DMA_IRQHandler+0x6ac>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d027      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a20      	ldr	r2, [pc, #128]	; (800697c <HAL_DMA_IRQHandler+0x6b0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <HAL_DMA_IRQHandler+0x6b4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <HAL_DMA_IRQHandler+0x6b8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <HAL_DMA_IRQHandler+0x6bc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1a      	ldr	r2, [pc, #104]	; (800698c <HAL_DMA_IRQHandler+0x6c0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a19      	ldr	r2, [pc, #100]	; (8006990 <HAL_DMA_IRQHandler+0x6c4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a17      	ldr	r2, [pc, #92]	; (8006994 <HAL_DMA_IRQHandler+0x6c8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a16      	ldr	r2, [pc, #88]	; (8006998 <HAL_DMA_IRQHandler+0x6cc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d12b      	bne.n	800699c <HAL_DMA_IRQHandler+0x6d0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	e02a      	b.n	80069b0 <HAL_DMA_IRQHandler+0x6e4>
 800695a:	bf00      	nop
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf14      	ite	ne
 80069aa:	2301      	movne	r3, #1
 80069ac:	2300      	moveq	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8087 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2220      	movs	r2, #32
 80069c0:	409a      	lsls	r2, r3
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d139      	bne.n	8006a46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0216 	bic.w	r2, r2, #22
 80069e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <HAL_DMA_IRQHandler+0x736>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0208 	bic.w	r2, r2, #8
 8006a10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	223f      	movs	r2, #63	; 0x3f
 8006a1c:	409a      	lsls	r2, r3
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 834a 	beq.w	80070d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
          }
          return;
 8006a44:	e344      	b.n	80070d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d018      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d108      	bne.n	8006a74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d02c      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	e027      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d023      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	e01e      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10f      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0210 	bic.w	r2, r2, #16
 8006aa2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8306 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8088 	beq.w	8006bec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7a      	ldr	r2, [pc, #488]	; (8006cd4 <HAL_DMA_IRQHandler+0xa08>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d04a      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a79      	ldr	r2, [pc, #484]	; (8006cd8 <HAL_DMA_IRQHandler+0xa0c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d045      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a77      	ldr	r2, [pc, #476]	; (8006cdc <HAL_DMA_IRQHandler+0xa10>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d040      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a76      	ldr	r2, [pc, #472]	; (8006ce0 <HAL_DMA_IRQHandler+0xa14>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a74      	ldr	r2, [pc, #464]	; (8006ce4 <HAL_DMA_IRQHandler+0xa18>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d036      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a73      	ldr	r2, [pc, #460]	; (8006ce8 <HAL_DMA_IRQHandler+0xa1c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d031      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a71      	ldr	r2, [pc, #452]	; (8006cec <HAL_DMA_IRQHandler+0xa20>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a70      	ldr	r2, [pc, #448]	; (8006cf0 <HAL_DMA_IRQHandler+0xa24>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d027      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6e      	ldr	r2, [pc, #440]	; (8006cf4 <HAL_DMA_IRQHandler+0xa28>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d022      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a6d      	ldr	r2, [pc, #436]	; (8006cf8 <HAL_DMA_IRQHandler+0xa2c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a6b      	ldr	r2, [pc, #428]	; (8006cfc <HAL_DMA_IRQHandler+0xa30>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6a      	ldr	r2, [pc, #424]	; (8006d00 <HAL_DMA_IRQHandler+0xa34>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a68      	ldr	r2, [pc, #416]	; (8006d04 <HAL_DMA_IRQHandler+0xa38>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a67      	ldr	r2, [pc, #412]	; (8006d08 <HAL_DMA_IRQHandler+0xa3c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a65      	ldr	r2, [pc, #404]	; (8006d0c <HAL_DMA_IRQHandler+0xa40>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a64      	ldr	r2, [pc, #400]	; (8006d10 <HAL_DMA_IRQHandler+0xa44>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d108      	bne.n	8006b96 <HAL_DMA_IRQHandler+0x8ca>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e007      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x8da>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d307      	bcc.n	8006bc2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f2      	bne.n	8006ba6 <HAL_DMA_IRQHandler+0x8da>
 8006bc0:	e000      	b.n	8006bc4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bc2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006bda:	e003      	b.n	8006be4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8272 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	e26c      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a43      	ldr	r2, [pc, #268]	; (8006d14 <HAL_DMA_IRQHandler+0xa48>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a42      	ldr	r2, [pc, #264]	; (8006d18 <HAL_DMA_IRQHandler+0xa4c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01d      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a40      	ldr	r2, [pc, #256]	; (8006d1c <HAL_DMA_IRQHandler+0xa50>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a3f      	ldr	r2, [pc, #252]	; (8006d20 <HAL_DMA_IRQHandler+0xa54>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a3d      	ldr	r2, [pc, #244]	; (8006d24 <HAL_DMA_IRQHandler+0xa58>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a3c      	ldr	r2, [pc, #240]	; (8006d28 <HAL_DMA_IRQHandler+0xa5c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3a      	ldr	r2, [pc, #232]	; (8006d2c <HAL_DMA_IRQHandler+0xa60>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a39      	ldr	r2, [pc, #228]	; (8006d30 <HAL_DMA_IRQHandler+0xa64>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d101      	bne.n	8006c54 <HAL_DMA_IRQHandler+0x988>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_DMA_IRQHandler+0x98a>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 823f 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80cd 	beq.w	8006e14 <HAL_DMA_IRQHandler+0xb48>
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80c7 	beq.w	8006e14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	2204      	movs	r2, #4
 8006c90:	409a      	lsls	r2, r3
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d049      	beq.n	8006d34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8210 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cbc:	e20a      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8206 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd0:	e200      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
 8006cd2:	bf00      	nop
 8006cd4:	40020010 	.word	0x40020010
 8006cd8:	40020028 	.word	0x40020028
 8006cdc:	40020040 	.word	0x40020040
 8006ce0:	40020058 	.word	0x40020058
 8006ce4:	40020070 	.word	0x40020070
 8006ce8:	40020088 	.word	0x40020088
 8006cec:	400200a0 	.word	0x400200a0
 8006cf0:	400200b8 	.word	0x400200b8
 8006cf4:	40020410 	.word	0x40020410
 8006cf8:	40020428 	.word	0x40020428
 8006cfc:	40020440 	.word	0x40020440
 8006d00:	40020458 	.word	0x40020458
 8006d04:	40020470 	.word	0x40020470
 8006d08:	40020488 	.word	0x40020488
 8006d0c:	400204a0 	.word	0x400204a0
 8006d10:	400204b8 	.word	0x400204b8
 8006d14:	58025408 	.word	0x58025408
 8006d18:	5802541c 	.word	0x5802541c
 8006d1c:	58025430 	.word	0x58025430
 8006d20:	58025444 	.word	0x58025444
 8006d24:	58025458 	.word	0x58025458
 8006d28:	5802546c 	.word	0x5802546c
 8006d2c:	58025480 	.word	0x58025480
 8006d30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d160      	bne.n	8006e00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7f      	ldr	r2, [pc, #508]	; (8006f40 <HAL_DMA_IRQHandler+0xc74>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d04a      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7d      	ldr	r2, [pc, #500]	; (8006f44 <HAL_DMA_IRQHandler+0xc78>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d045      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7c      	ldr	r2, [pc, #496]	; (8006f48 <HAL_DMA_IRQHandler+0xc7c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d040      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7a      	ldr	r2, [pc, #488]	; (8006f4c <HAL_DMA_IRQHandler+0xc80>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d03b      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a79      	ldr	r2, [pc, #484]	; (8006f50 <HAL_DMA_IRQHandler+0xc84>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d036      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a77      	ldr	r2, [pc, #476]	; (8006f54 <HAL_DMA_IRQHandler+0xc88>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d031      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a76      	ldr	r2, [pc, #472]	; (8006f58 <HAL_DMA_IRQHandler+0xc8c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d02c      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a74      	ldr	r2, [pc, #464]	; (8006f5c <HAL_DMA_IRQHandler+0xc90>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d027      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a73      	ldr	r2, [pc, #460]	; (8006f60 <HAL_DMA_IRQHandler+0xc94>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a71      	ldr	r2, [pc, #452]	; (8006f64 <HAL_DMA_IRQHandler+0xc98>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01d      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a70      	ldr	r2, [pc, #448]	; (8006f68 <HAL_DMA_IRQHandler+0xc9c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6e      	ldr	r2, [pc, #440]	; (8006f6c <HAL_DMA_IRQHandler+0xca0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6d      	ldr	r2, [pc, #436]	; (8006f70 <HAL_DMA_IRQHandler+0xca4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6b      	ldr	r2, [pc, #428]	; (8006f74 <HAL_DMA_IRQHandler+0xca8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6a      	ldr	r2, [pc, #424]	; (8006f78 <HAL_DMA_IRQHandler+0xcac>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a68      	ldr	r2, [pc, #416]	; (8006f7c <HAL_DMA_IRQHandler+0xcb0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d108      	bne.n	8006df0 <HAL_DMA_IRQHandler+0xb24>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0208 	bic.w	r2, r2, #8
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e007      	b.n	8006e00 <HAL_DMA_IRQHandler+0xb34>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0204 	bic.w	r2, r2, #4
 8006dfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8165 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e12:	e15f      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80c5 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0xce8>
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80bf 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2202      	movs	r2, #2
 8006e40:	409a      	lsls	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d018      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 813a 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e6c:	e134      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8130 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e80:	e12a      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 8089 	bne.w	8006fa0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a2b      	ldr	r2, [pc, #172]	; (8006f40 <HAL_DMA_IRQHandler+0xc74>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d04a      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a29      	ldr	r2, [pc, #164]	; (8006f44 <HAL_DMA_IRQHandler+0xc78>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d045      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a28      	ldr	r2, [pc, #160]	; (8006f48 <HAL_DMA_IRQHandler+0xc7c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d040      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <HAL_DMA_IRQHandler+0xc80>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d03b      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a25      	ldr	r2, [pc, #148]	; (8006f50 <HAL_DMA_IRQHandler+0xc84>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d036      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a23      	ldr	r2, [pc, #140]	; (8006f54 <HAL_DMA_IRQHandler+0xc88>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d031      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a22      	ldr	r2, [pc, #136]	; (8006f58 <HAL_DMA_IRQHandler+0xc8c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d02c      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a20      	ldr	r2, [pc, #128]	; (8006f5c <HAL_DMA_IRQHandler+0xc90>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d027      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <HAL_DMA_IRQHandler+0xc94>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	; (8006f64 <HAL_DMA_IRQHandler+0xc98>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01d      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1c      	ldr	r2, [pc, #112]	; (8006f68 <HAL_DMA_IRQHandler+0xc9c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1a      	ldr	r2, [pc, #104]	; (8006f6c <HAL_DMA_IRQHandler+0xca0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a19      	ldr	r2, [pc, #100]	; (8006f70 <HAL_DMA_IRQHandler+0xca4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a17      	ldr	r2, [pc, #92]	; (8006f74 <HAL_DMA_IRQHandler+0xca8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a16      	ldr	r2, [pc, #88]	; (8006f78 <HAL_DMA_IRQHandler+0xcac>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a14      	ldr	r2, [pc, #80]	; (8006f7c <HAL_DMA_IRQHandler+0xcb0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d128      	bne.n	8006f80 <HAL_DMA_IRQHandler+0xcb4>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0214 	bic.w	r2, r2, #20
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e027      	b.n	8006f90 <HAL_DMA_IRQHandler+0xcc4>
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 020a 	bic.w	r2, r2, #10
 8006f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8097 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fb2:	e091      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8088 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8082 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a41      	ldr	r2, [pc, #260]	; (80070e0 <HAL_DMA_IRQHandler+0xe14>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d04a      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a3f      	ldr	r2, [pc, #252]	; (80070e4 <HAL_DMA_IRQHandler+0xe18>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d045      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a3e      	ldr	r2, [pc, #248]	; (80070e8 <HAL_DMA_IRQHandler+0xe1c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d040      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a3c      	ldr	r2, [pc, #240]	; (80070ec <HAL_DMA_IRQHandler+0xe20>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d03b      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a3b      	ldr	r2, [pc, #236]	; (80070f0 <HAL_DMA_IRQHandler+0xe24>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d036      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a39      	ldr	r2, [pc, #228]	; (80070f4 <HAL_DMA_IRQHandler+0xe28>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a38      	ldr	r2, [pc, #224]	; (80070f8 <HAL_DMA_IRQHandler+0xe2c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d02c      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a36      	ldr	r2, [pc, #216]	; (80070fc <HAL_DMA_IRQHandler+0xe30>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a35      	ldr	r2, [pc, #212]	; (8007100 <HAL_DMA_IRQHandler+0xe34>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a33      	ldr	r2, [pc, #204]	; (8007104 <HAL_DMA_IRQHandler+0xe38>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a32      	ldr	r2, [pc, #200]	; (8007108 <HAL_DMA_IRQHandler+0xe3c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a30      	ldr	r2, [pc, #192]	; (800710c <HAL_DMA_IRQHandler+0xe40>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2f      	ldr	r2, [pc, #188]	; (8007110 <HAL_DMA_IRQHandler+0xe44>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <HAL_DMA_IRQHandler+0xe48>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2c      	ldr	r2, [pc, #176]	; (8007118 <HAL_DMA_IRQHandler+0xe4c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2a      	ldr	r2, [pc, #168]	; (800711c <HAL_DMA_IRQHandler+0xe50>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d108      	bne.n	8007088 <HAL_DMA_IRQHandler+0xdbc>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 021c 	bic.w	r2, r2, #28
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	e007      	b.n	8007098 <HAL_DMA_IRQHandler+0xdcc>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 020e 	bic.w	r2, r2, #14
 8007096:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2201      	movs	r2, #1
 80070a2:	409a      	lsls	r2, r3
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	e004      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070d0:	bf00      	nop
 80070d2:	e002      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070da:	3728      	adds	r7, #40	; 0x28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40020010 	.word	0x40020010
 80070e4:	40020028 	.word	0x40020028
 80070e8:	40020040 	.word	0x40020040
 80070ec:	40020058 	.word	0x40020058
 80070f0:	40020070 	.word	0x40020070
 80070f4:	40020088 	.word	0x40020088
 80070f8:	400200a0 	.word	0x400200a0
 80070fc:	400200b8 	.word	0x400200b8
 8007100:	40020410 	.word	0x40020410
 8007104:	40020428 	.word	0x40020428
 8007108:	40020440 	.word	0x40020440
 800710c:	40020458 	.word	0x40020458
 8007110:	40020470 	.word	0x40020470
 8007114:	40020488 	.word	0x40020488
 8007118:	400204a0 	.word	0x400204a0
 800711c:	400204b8 	.word	0x400204b8

08007120 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a7f      	ldr	r2, [pc, #508]	; (800733c <DMA_SetConfig+0x21c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d072      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a7d      	ldr	r2, [pc, #500]	; (8007340 <DMA_SetConfig+0x220>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d06d      	beq.n	800722a <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a7c      	ldr	r2, [pc, #496]	; (8007344 <DMA_SetConfig+0x224>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d068      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a7a      	ldr	r2, [pc, #488]	; (8007348 <DMA_SetConfig+0x228>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d063      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a79      	ldr	r2, [pc, #484]	; (800734c <DMA_SetConfig+0x22c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d05e      	beq.n	800722a <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a77      	ldr	r2, [pc, #476]	; (8007350 <DMA_SetConfig+0x230>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d059      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a76      	ldr	r2, [pc, #472]	; (8007354 <DMA_SetConfig+0x234>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d054      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a74      	ldr	r2, [pc, #464]	; (8007358 <DMA_SetConfig+0x238>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d04f      	beq.n	800722a <DMA_SetConfig+0x10a>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a73      	ldr	r2, [pc, #460]	; (800735c <DMA_SetConfig+0x23c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d04a      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a71      	ldr	r2, [pc, #452]	; (8007360 <DMA_SetConfig+0x240>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d045      	beq.n	800722a <DMA_SetConfig+0x10a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a70      	ldr	r2, [pc, #448]	; (8007364 <DMA_SetConfig+0x244>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d040      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6e      	ldr	r2, [pc, #440]	; (8007368 <DMA_SetConfig+0x248>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d03b      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a6d      	ldr	r2, [pc, #436]	; (800736c <DMA_SetConfig+0x24c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d036      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a6b      	ldr	r2, [pc, #428]	; (8007370 <DMA_SetConfig+0x250>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d031      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a6a      	ldr	r2, [pc, #424]	; (8007374 <DMA_SetConfig+0x254>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d02c      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a68      	ldr	r2, [pc, #416]	; (8007378 <DMA_SetConfig+0x258>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d027      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a67      	ldr	r2, [pc, #412]	; (800737c <DMA_SetConfig+0x25c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d022      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a65      	ldr	r2, [pc, #404]	; (8007380 <DMA_SetConfig+0x260>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01d      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a64      	ldr	r2, [pc, #400]	; (8007384 <DMA_SetConfig+0x264>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d018      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a62      	ldr	r2, [pc, #392]	; (8007388 <DMA_SetConfig+0x268>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d013      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a61      	ldr	r2, [pc, #388]	; (800738c <DMA_SetConfig+0x26c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00e      	beq.n	800722a <DMA_SetConfig+0x10a>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a5f      	ldr	r2, [pc, #380]	; (8007390 <DMA_SetConfig+0x270>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d009      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a5e      	ldr	r2, [pc, #376]	; (8007394 <DMA_SetConfig+0x274>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d004      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a5c      	ldr	r2, [pc, #368]	; (8007398 <DMA_SetConfig+0x278>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d101      	bne.n	800722e <DMA_SetConfig+0x10e>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <DMA_SetConfig+0x110>
 800722e:	2300      	movs	r3, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00d      	beq.n	8007250 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800723c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800724e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a39      	ldr	r2, [pc, #228]	; (800733c <DMA_SetConfig+0x21c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d04a      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a38      	ldr	r2, [pc, #224]	; (8007340 <DMA_SetConfig+0x220>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d045      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a36      	ldr	r2, [pc, #216]	; (8007344 <DMA_SetConfig+0x224>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d040      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a35      	ldr	r2, [pc, #212]	; (8007348 <DMA_SetConfig+0x228>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d03b      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a33      	ldr	r2, [pc, #204]	; (800734c <DMA_SetConfig+0x22c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d036      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a32      	ldr	r2, [pc, #200]	; (8007350 <DMA_SetConfig+0x230>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d031      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a30      	ldr	r2, [pc, #192]	; (8007354 <DMA_SetConfig+0x234>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d02c      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a2f      	ldr	r2, [pc, #188]	; (8007358 <DMA_SetConfig+0x238>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d027      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2d      	ldr	r2, [pc, #180]	; (800735c <DMA_SetConfig+0x23c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d022      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <DMA_SetConfig+0x240>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d01d      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2a      	ldr	r2, [pc, #168]	; (8007364 <DMA_SetConfig+0x244>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d018      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a29      	ldr	r2, [pc, #164]	; (8007368 <DMA_SetConfig+0x248>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d013      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a27      	ldr	r2, [pc, #156]	; (800736c <DMA_SetConfig+0x24c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00e      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a26      	ldr	r2, [pc, #152]	; (8007370 <DMA_SetConfig+0x250>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d009      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a24      	ldr	r2, [pc, #144]	; (8007374 <DMA_SetConfig+0x254>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a23      	ldr	r2, [pc, #140]	; (8007378 <DMA_SetConfig+0x258>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d101      	bne.n	80072f4 <DMA_SetConfig+0x1d4>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <DMA_SetConfig+0x1d6>
 80072f4:	2300      	movs	r3, #0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d059      	beq.n	80073ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	223f      	movs	r2, #63	; 0x3f
 8007304:	409a      	lsls	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007318:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d138      	bne.n	800739c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800733a:	e086      	b.n	800744a <DMA_SetConfig+0x32a>
 800733c:	40020010 	.word	0x40020010
 8007340:	40020028 	.word	0x40020028
 8007344:	40020040 	.word	0x40020040
 8007348:	40020058 	.word	0x40020058
 800734c:	40020070 	.word	0x40020070
 8007350:	40020088 	.word	0x40020088
 8007354:	400200a0 	.word	0x400200a0
 8007358:	400200b8 	.word	0x400200b8
 800735c:	40020410 	.word	0x40020410
 8007360:	40020428 	.word	0x40020428
 8007364:	40020440 	.word	0x40020440
 8007368:	40020458 	.word	0x40020458
 800736c:	40020470 	.word	0x40020470
 8007370:	40020488 	.word	0x40020488
 8007374:	400204a0 	.word	0x400204a0
 8007378:	400204b8 	.word	0x400204b8
 800737c:	58025408 	.word	0x58025408
 8007380:	5802541c 	.word	0x5802541c
 8007384:	58025430 	.word	0x58025430
 8007388:	58025444 	.word	0x58025444
 800738c:	58025458 	.word	0x58025458
 8007390:	5802546c 	.word	0x5802546c
 8007394:	58025480 	.word	0x58025480
 8007398:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	60da      	str	r2, [r3, #12]
}
 80073ac:	e04d      	b.n	800744a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a29      	ldr	r2, [pc, #164]	; (8007458 <DMA_SetConfig+0x338>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d022      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a27      	ldr	r2, [pc, #156]	; (800745c <DMA_SetConfig+0x33c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01d      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a26      	ldr	r2, [pc, #152]	; (8007460 <DMA_SetConfig+0x340>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d018      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a24      	ldr	r2, [pc, #144]	; (8007464 <DMA_SetConfig+0x344>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a23      	ldr	r2, [pc, #140]	; (8007468 <DMA_SetConfig+0x348>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00e      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a21      	ldr	r2, [pc, #132]	; (800746c <DMA_SetConfig+0x34c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d009      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a20      	ldr	r2, [pc, #128]	; (8007470 <DMA_SetConfig+0x350>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1e      	ldr	r2, [pc, #120]	; (8007474 <DMA_SetConfig+0x354>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d101      	bne.n	8007402 <DMA_SetConfig+0x2e2>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <DMA_SetConfig+0x2e4>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d020      	beq.n	800744a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d108      	bne.n	800743a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	60da      	str	r2, [r3, #12]
}
 8007438:	e007      	b.n	800744a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	58025408 	.word	0x58025408
 800745c:	5802541c 	.word	0x5802541c
 8007460:	58025430 	.word	0x58025430
 8007464:	58025444 	.word	0x58025444
 8007468:	58025458 	.word	0x58025458
 800746c:	5802546c 	.word	0x5802546c
 8007470:	58025480 	.word	0x58025480
 8007474:	58025494 	.word	0x58025494

08007478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a42      	ldr	r2, [pc, #264]	; (8007590 <DMA_CalcBaseAndBitshift+0x118>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d04a      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a41      	ldr	r2, [pc, #260]	; (8007594 <DMA_CalcBaseAndBitshift+0x11c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d045      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a3f      	ldr	r2, [pc, #252]	; (8007598 <DMA_CalcBaseAndBitshift+0x120>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d040      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a3e      	ldr	r2, [pc, #248]	; (800759c <DMA_CalcBaseAndBitshift+0x124>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d03b      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a3c      	ldr	r2, [pc, #240]	; (80075a0 <DMA_CalcBaseAndBitshift+0x128>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d036      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a3b      	ldr	r2, [pc, #236]	; (80075a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d031      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a39      	ldr	r2, [pc, #228]	; (80075a8 <DMA_CalcBaseAndBitshift+0x130>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d02c      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a38      	ldr	r2, [pc, #224]	; (80075ac <DMA_CalcBaseAndBitshift+0x134>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d027      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a36      	ldr	r2, [pc, #216]	; (80075b0 <DMA_CalcBaseAndBitshift+0x138>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d022      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a35      	ldr	r2, [pc, #212]	; (80075b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d01d      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a33      	ldr	r2, [pc, #204]	; (80075b8 <DMA_CalcBaseAndBitshift+0x140>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d018      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a32      	ldr	r2, [pc, #200]	; (80075bc <DMA_CalcBaseAndBitshift+0x144>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a30      	ldr	r2, [pc, #192]	; (80075c0 <DMA_CalcBaseAndBitshift+0x148>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00e      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a2f      	ldr	r2, [pc, #188]	; (80075c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d009      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a2d      	ldr	r2, [pc, #180]	; (80075c8 <DMA_CalcBaseAndBitshift+0x150>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a2c      	ldr	r2, [pc, #176]	; (80075cc <DMA_CalcBaseAndBitshift+0x154>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d101      	bne.n	8007524 <DMA_CalcBaseAndBitshift+0xac>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <DMA_CalcBaseAndBitshift+0xae>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d024      	beq.n	8007574 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	3b10      	subs	r3, #16
 8007532:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <DMA_CalcBaseAndBitshift+0x158>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	4a24      	ldr	r2, [pc, #144]	; (80075d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007544:	5cd3      	ldrb	r3, [r2, r3]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d908      	bls.n	8007564 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	4b1f      	ldr	r3, [pc, #124]	; (80075d8 <DMA_CalcBaseAndBitshift+0x160>)
 800755a:	4013      	ands	r3, r2
 800755c:	1d1a      	adds	r2, r3, #4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	659a      	str	r2, [r3, #88]	; 0x58
 8007562:	e00d      	b.n	8007580 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <DMA_CalcBaseAndBitshift+0x160>)
 800756c:	4013      	ands	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6593      	str	r3, [r2, #88]	; 0x58
 8007572:	e005      	b.n	8007580 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40020010 	.word	0x40020010
 8007594:	40020028 	.word	0x40020028
 8007598:	40020040 	.word	0x40020040
 800759c:	40020058 	.word	0x40020058
 80075a0:	40020070 	.word	0x40020070
 80075a4:	40020088 	.word	0x40020088
 80075a8:	400200a0 	.word	0x400200a0
 80075ac:	400200b8 	.word	0x400200b8
 80075b0:	40020410 	.word	0x40020410
 80075b4:	40020428 	.word	0x40020428
 80075b8:	40020440 	.word	0x40020440
 80075bc:	40020458 	.word	0x40020458
 80075c0:	40020470 	.word	0x40020470
 80075c4:	40020488 	.word	0x40020488
 80075c8:	400204a0 	.word	0x400204a0
 80075cc:	400204b8 	.word	0x400204b8
 80075d0:	aaaaaaab 	.word	0xaaaaaaab
 80075d4:	08018cec 	.word	0x08018cec
 80075d8:	fffffc00 	.word	0xfffffc00

080075dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d120      	bne.n	8007632 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d858      	bhi.n	80076aa <DMA_CheckFifoParam+0xce>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <DMA_CheckFifoParam+0x24>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007611 	.word	0x08007611
 8007604:	08007623 	.word	0x08007623
 8007608:	08007611 	.word	0x08007611
 800760c:	080076ab 	.word	0x080076ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d048      	beq.n	80076ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007620:	e045      	b.n	80076ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800762a:	d142      	bne.n	80076b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007630:	e03f      	b.n	80076b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763a:	d123      	bne.n	8007684 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	2b03      	cmp	r3, #3
 8007642:	d838      	bhi.n	80076b6 <DMA_CheckFifoParam+0xda>
 8007644:	a201      	add	r2, pc, #4	; (adr r2, 800764c <DMA_CheckFifoParam+0x70>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007663 	.word	0x08007663
 8007654:	0800765d 	.word	0x0800765d
 8007658:	08007675 	.word	0x08007675
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
        break;
 8007660:	e030      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d025      	beq.n	80076ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007672:	e022      	b.n	80076ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800767c:	d11f      	bne.n	80076be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007682:	e01c      	b.n	80076be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	2b02      	cmp	r3, #2
 800768a:	d902      	bls.n	8007692 <DMA_CheckFifoParam+0xb6>
 800768c:	2b03      	cmp	r3, #3
 800768e:	d003      	beq.n	8007698 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007690:	e018      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
        break;
 8007696:	e015      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
    break;
 80076a8:	e00b      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
        break;
 80076aa:	bf00      	nop
 80076ac:	e00a      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ae:	bf00      	nop
 80076b0:	e008      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076b2:	bf00      	nop
 80076b4:	e006      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076b6:	bf00      	nop
 80076b8:	e004      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ba:	bf00      	nop
 80076bc:	e002      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076be:	bf00      	nop
 80076c0:	e000      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
    break;
 80076c2:	bf00      	nop
    }
  }

  return status;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop

080076d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a38      	ldr	r2, [pc, #224]	; (80077c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d022      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a36      	ldr	r2, [pc, #216]	; (80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01d      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a35      	ldr	r2, [pc, #212]	; (80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d018      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a33      	ldr	r2, [pc, #204]	; (80077d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a32      	ldr	r2, [pc, #200]	; (80077d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00e      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a30      	ldr	r2, [pc, #192]	; (80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d009      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2f      	ldr	r2, [pc, #188]	; (80077e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d004      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a2d      	ldr	r2, [pc, #180]	; (80077e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d101      	bne.n	8007736 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01a      	beq.n	8007772 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	3b08      	subs	r3, #8
 8007744:	4a28      	ldr	r2, [pc, #160]	; (80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4b26      	ldr	r3, [pc, #152]	; (80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a24      	ldr	r2, [pc, #144]	; (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007760:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007770:	e024      	b.n	80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	3b10      	subs	r3, #16
 800777a:	4a1e      	ldr	r2, [pc, #120]	; (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a1c      	ldr	r2, [pc, #112]	; (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d806      	bhi.n	800779a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a1b      	ldr	r2, [pc, #108]	; (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d902      	bls.n	800779a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3308      	adds	r3, #8
 8007798:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4b18      	ldr	r3, [pc, #96]	; (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a16      	ldr	r2, [pc, #88]	; (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	2201      	movs	r2, #1
 80077b6:	409a      	lsls	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	58025408 	.word	0x58025408
 80077cc:	5802541c 	.word	0x5802541c
 80077d0:	58025430 	.word	0x58025430
 80077d4:	58025444 	.word	0x58025444
 80077d8:	58025458 	.word	0x58025458
 80077dc:	5802546c 	.word	0x5802546c
 80077e0:	58025480 	.word	0x58025480
 80077e4:	58025494 	.word	0x58025494
 80077e8:	cccccccd 	.word	0xcccccccd
 80077ec:	16009600 	.word	0x16009600
 80077f0:	58025880 	.word	0x58025880
 80077f4:	aaaaaaab 	.word	0xaaaaaaab
 80077f8:	400204b8 	.word	0x400204b8
 80077fc:	4002040f 	.word	0x4002040f
 8007800:	10008200 	.word	0x10008200
 8007804:	40020880 	.word	0x40020880

08007808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04a      	beq.n	80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d847      	bhi.n	80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a25      	ldr	r2, [pc, #148]	; (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d022      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a24      	ldr	r2, [pc, #144]	; (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d01d      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d018      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a21      	ldr	r2, [pc, #132]	; (80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d013      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00e      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d009      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d004      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d101      	bne.n	8007878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007878:	2300      	movs	r3, #0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007890:	671a      	str	r2, [r3, #112]	; 0x70
 8007892:	e009      	b.n	80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a11      	ldr	r2, [pc, #68]	; (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
 80078e0:	1600963f 	.word	0x1600963f
 80078e4:	58025940 	.word	0x58025940
 80078e8:	1000823f 	.word	0x1000823f
 80078ec:	40020940 	.word	0x40020940

080078f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b098      	sub	sp, #96	; 0x60
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80078f8:	4a84      	ldr	r2, [pc, #528]	; (8007b0c <HAL_FDCAN_Init+0x21c>)
 80078fa:	f107 030c 	add.w	r3, r7, #12
 80078fe:	4611      	mov	r1, r2
 8007900:	224c      	movs	r2, #76	; 0x4c
 8007902:	4618      	mov	r0, r3
 8007904:	f00f ffc2 	bl	801788c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e1c6      	b.n	8007ca0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a7e      	ldr	r2, [pc, #504]	; (8007b10 <HAL_FDCAN_Init+0x220>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d106      	bne.n	800792a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007924:	461a      	mov	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fb fa6a 	bl	8002e18 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0210 	bic.w	r2, r2, #16
 8007952:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007954:	f7fc fa32 	bl	8003dbc <HAL_GetTick>
 8007958:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800795a:	e014      	b.n	8007986 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800795c:	f7fc fa2e 	bl	8003dbc <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b0a      	cmp	r3, #10
 8007968:	d90d      	bls.n	8007986 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007970:	f043 0201 	orr.w	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2203      	movs	r2, #3
 800797e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e18c      	b.n	8007ca0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	2b08      	cmp	r3, #8
 8007992:	d0e3      	beq.n	800795c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079a4:	f7fc fa0a 	bl	8003dbc <HAL_GetTick>
 80079a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80079aa:	e014      	b.n	80079d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80079ac:	f7fc fa06 	bl	8003dbc <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b0a      	cmp	r3, #10
 80079b8:	d90d      	bls.n	80079d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079c0:	f043 0201 	orr.w	r2, r3, #1
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2203      	movs	r2, #3
 80079ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e164      	b.n	8007ca0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0e3      	beq.n	80079ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699a      	ldr	r2, [r3, #24]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0202 	orr.w	r2, r2, #2
 80079f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7c1b      	ldrb	r3, [r3, #16]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d108      	bne.n	8007a0e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a0a:	619a      	str	r2, [r3, #24]
 8007a0c:	e007      	b.n	8007a1e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a1c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7c5b      	ldrb	r3, [r3, #17]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d108      	bne.n	8007a38 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a34:	619a      	str	r2, [r3, #24]
 8007a36:	e007      	b.n	8007a48 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a46:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	7c9b      	ldrb	r3, [r3, #18]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d108      	bne.n	8007a62 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a5e:	619a      	str	r2, [r3, #24]
 8007a60:	e007      	b.n	8007a72 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699a      	ldr	r2, [r3, #24]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a70:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007a96:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0210 	bic.w	r2, r2, #16
 8007aa6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d108      	bne.n	8007ac2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0204 	orr.w	r2, r2, #4
 8007abe:	619a      	str	r2, [r3, #24]
 8007ac0:	e030      	b.n	8007b24 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02c      	beq.n	8007b24 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d020      	beq.n	8007b14 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ae0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0210 	orr.w	r2, r2, #16
 8007af0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d114      	bne.n	8007b24 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0220 	orr.w	r2, r2, #32
 8007b08:	619a      	str	r2, [r3, #24]
 8007b0a:	e00b      	b.n	8007b24 <HAL_FDCAN_Init+0x234>
 8007b0c:	08018bd8 	.word	0x08018bd8
 8007b10:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0220 	orr.w	r2, r2, #32
 8007b22:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b34:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007b3c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007b4c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b4e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b58:	d115      	bne.n	8007b86 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	3b01      	subs	r3, #1
 8007b66:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b68:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007b72:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007b82:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b84:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bac:	4413      	add	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d011      	beq.n	8007bd6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007bba:	f023 0107 	bic.w	r1, r3, #7
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	3360      	adds	r3, #96	; 0x60
 8007bc6:	443b      	add	r3, r7
 8007bc8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d011      	beq.n	8007c02 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007be6:	f023 0107 	bic.w	r1, r3, #7
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	3360      	adds	r3, #96	; 0x60
 8007bf2:	443b      	add	r3, r7
 8007bf4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d012      	beq.n	8007c30 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c12:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	3360      	adds	r3, #96	; 0x60
 8007c1e:	443b      	add	r3, r7
 8007c20:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007c24:	011a      	lsls	r2, r3, #4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d012      	beq.n	8007c5e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c40:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	3360      	adds	r3, #96	; 0x60
 8007c4c:	443b      	add	r3, r7
 8007c4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007c52:	021a      	lsls	r2, r3, #8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a11      	ldr	r2, [pc, #68]	; (8007ca8 <HAL_FDCAN_Init+0x3b8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d107      	bne.n	8007c78 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f022 0203 	bic.w	r2, r2, #3
 8007c76:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f80b 	bl	8007cac <FDCAN_CalcultateRamBlockAddresses>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007c9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3760      	adds	r7, #96	; 0x60
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	4000a000 	.word	0x4000a000

08007cac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007cc2:	4ba7      	ldr	r3, [pc, #668]	; (8007f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	0091      	lsls	r1, r2, #2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	430b      	orrs	r3, r1
 8007cd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cdc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	041a      	lsls	r2, r3, #16
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d02:	4b97      	ldr	r3, [pc, #604]	; (8007f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0091      	lsls	r1, r2, #2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	041a      	lsls	r2, r3, #16
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	4413      	add	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007d44:	4b86      	ldr	r3, [pc, #536]	; (8007f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	0091      	lsls	r1, r2, #2
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	430b      	orrs	r3, r1
 8007d52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d5e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	041a      	lsls	r2, r3, #16
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d7a:	fb02 f303 	mul.w	r3, r2, r3
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007d8c:	4b74      	ldr	r3, [pc, #464]	; (8007f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	0091      	lsls	r1, r2, #2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6812      	ldr	r2, [r2, #0]
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dae:	041a      	lsls	r2, r3, #16
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4413      	add	r3, r2
 8007dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007dd4:	4b62      	ldr	r3, [pc, #392]	; (8007f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	0091      	lsls	r1, r2, #2
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	430b      	orrs	r3, r1
 8007de2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	4413      	add	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007e00:	4b57      	ldr	r3, [pc, #348]	; (8007f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	0091      	lsls	r1, r2, #2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e1a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	041a      	lsls	r2, r3, #16
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	4413      	add	r3, r2
 8007e38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007e42:	4b47      	ldr	r3, [pc, #284]	; (8007f60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	0091      	lsls	r1, r2, #2
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	430b      	orrs	r3, r1
 8007e50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e5c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e64:	041a      	lsls	r2, r3, #16
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e78:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e80:	061a      	lsls	r2, r3, #24
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e90:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007e92:	4413      	add	r3, r2
 8007e94:	009a      	lsls	r2, r3, #2
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007ec6:	fb01 f303 	mul.w	r3, r1, r3
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	441a      	add	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007ede:	fb01 f303 	mul.w	r3, r1, r3
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	441a      	add	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	441a      	add	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007f26:	fb01 f303 	mul.w	r3, r1, r3
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	441a      	add	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007f42:	fb01 f303 	mul.w	r3, r1, r3
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	441a      	add	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f56:	4a04      	ldr	r2, [pc, #16]	; (8007f68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d915      	bls.n	8007f88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007f5c:	e006      	b.n	8007f6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007f5e:	bf00      	nop
 8007f60:	ffff0003 	.word	0xffff0003
 8007f64:	10002b00 	.word	0x10002b00
 8007f68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f72:	f043 0220 	orr.w	r2, r3, #32
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2203      	movs	r2, #3
 8007f80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e010      	b.n	8007faa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	e005      	b.n	8007f9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3f3      	bcc.n	8007f90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop

08007fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b089      	sub	sp, #36	; 0x24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007fc6:	4b86      	ldr	r3, [pc, #536]	; (80081e0 <HAL_GPIO_Init+0x228>)
 8007fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fca:	e18c      	b.n	80082e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd8:	4013      	ands	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 817e 	beq.w	80082e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f003 0303 	and.w	r3, r3, #3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d005      	beq.n	8007ffc <HAL_GPIO_Init+0x44>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d130      	bne.n	800805e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	2203      	movs	r2, #3
 8008008:	fa02 f303 	lsl.w	r3, r2, r3
 800800c:	43db      	mvns	r3, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4313      	orrs	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008032:	2201      	movs	r2, #1
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	fa02 f303 	lsl.w	r3, r2, r3
 800803a:	43db      	mvns	r3, r3
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	4013      	ands	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	091b      	lsrs	r3, r3, #4
 8008048:	f003 0201 	and.w	r2, r3, #1
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4313      	orrs	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b03      	cmp	r3, #3
 8008068:	d017      	beq.n	800809a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	2203      	movs	r2, #3
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	43db      	mvns	r3, r3
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	4013      	ands	r3, r2
 8008080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4313      	orrs	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d123      	bne.n	80080ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	08da      	lsrs	r2, r3, #3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3208      	adds	r2, #8
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	220f      	movs	r2, #15
 80080be:	fa02 f303 	lsl.w	r3, r2, r3
 80080c2:	43db      	mvns	r3, r3
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	4013      	ands	r3, r2
 80080c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	4313      	orrs	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	08da      	lsrs	r2, r3, #3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3208      	adds	r2, #8
 80080e8:	69b9      	ldr	r1, [r7, #24]
 80080ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	2203      	movs	r2, #3
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43db      	mvns	r3, r3
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	4013      	ands	r3, r2
 8008104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f003 0203 	and.w	r2, r3, #3
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	4313      	orrs	r3, r2
 800811a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80d8 	beq.w	80082e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008130:	4b2c      	ldr	r3, [pc, #176]	; (80081e4 <HAL_GPIO_Init+0x22c>)
 8008132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008136:	4a2b      	ldr	r2, [pc, #172]	; (80081e4 <HAL_GPIO_Init+0x22c>)
 8008138:	f043 0302 	orr.w	r3, r3, #2
 800813c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008140:	4b28      	ldr	r3, [pc, #160]	; (80081e4 <HAL_GPIO_Init+0x22c>)
 8008142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800814e:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <HAL_GPIO_Init+0x230>)
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	089b      	lsrs	r3, r3, #2
 8008154:	3302      	adds	r3, #2
 8008156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800815a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	220f      	movs	r2, #15
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	43db      	mvns	r3, r3
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	4013      	ands	r3, r2
 8008170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <HAL_GPIO_Init+0x234>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d04a      	beq.n	8008210 <HAL_GPIO_Init+0x258>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_GPIO_Init+0x238>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d02b      	beq.n	80081da <HAL_GPIO_Init+0x222>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a1b      	ldr	r2, [pc, #108]	; (80081f4 <HAL_GPIO_Init+0x23c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d025      	beq.n	80081d6 <HAL_GPIO_Init+0x21e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a1a      	ldr	r2, [pc, #104]	; (80081f8 <HAL_GPIO_Init+0x240>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d01f      	beq.n	80081d2 <HAL_GPIO_Init+0x21a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a19      	ldr	r2, [pc, #100]	; (80081fc <HAL_GPIO_Init+0x244>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d019      	beq.n	80081ce <HAL_GPIO_Init+0x216>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a18      	ldr	r2, [pc, #96]	; (8008200 <HAL_GPIO_Init+0x248>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <HAL_GPIO_Init+0x212>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a17      	ldr	r2, [pc, #92]	; (8008204 <HAL_GPIO_Init+0x24c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00d      	beq.n	80081c6 <HAL_GPIO_Init+0x20e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a16      	ldr	r2, [pc, #88]	; (8008208 <HAL_GPIO_Init+0x250>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d007      	beq.n	80081c2 <HAL_GPIO_Init+0x20a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a15      	ldr	r2, [pc, #84]	; (800820c <HAL_GPIO_Init+0x254>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d101      	bne.n	80081be <HAL_GPIO_Init+0x206>
 80081ba:	2309      	movs	r3, #9
 80081bc:	e029      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081be:	230a      	movs	r3, #10
 80081c0:	e027      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081c2:	2307      	movs	r3, #7
 80081c4:	e025      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081c6:	2306      	movs	r3, #6
 80081c8:	e023      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081ca:	2305      	movs	r3, #5
 80081cc:	e021      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081ce:	2304      	movs	r3, #4
 80081d0:	e01f      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081d2:	2303      	movs	r3, #3
 80081d4:	e01d      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e01b      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081da:	2301      	movs	r3, #1
 80081dc:	e019      	b.n	8008212 <HAL_GPIO_Init+0x25a>
 80081de:	bf00      	nop
 80081e0:	58000080 	.word	0x58000080
 80081e4:	58024400 	.word	0x58024400
 80081e8:	58000400 	.word	0x58000400
 80081ec:	58020000 	.word	0x58020000
 80081f0:	58020400 	.word	0x58020400
 80081f4:	58020800 	.word	0x58020800
 80081f8:	58020c00 	.word	0x58020c00
 80081fc:	58021000 	.word	0x58021000
 8008200:	58021400 	.word	0x58021400
 8008204:	58021800 	.word	0x58021800
 8008208:	58021c00 	.word	0x58021c00
 800820c:	58022400 	.word	0x58022400
 8008210:	2300      	movs	r3, #0
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	f002 0203 	and.w	r2, r2, #3
 8008218:	0092      	lsls	r2, r2, #2
 800821a:	4093      	lsls	r3, r2
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	4313      	orrs	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008222:	4938      	ldr	r1, [pc, #224]	; (8008304 <HAL_GPIO_Init+0x34c>)
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	089b      	lsrs	r3, r3, #2
 8008228:	3302      	adds	r3, #2
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	43db      	mvns	r3, r3
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	4013      	ands	r3, r2
 8008240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800825e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	43db      	mvns	r3, r3
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	4013      	ands	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	43db      	mvns	r3, r3
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	4013      	ands	r3, r2
 800829a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	43db      	mvns	r3, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	4013      	ands	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3301      	adds	r3, #1
 80082e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	fa22 f303 	lsr.w	r3, r2, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f47f ae6b 	bne.w	8007fcc <HAL_GPIO_Init+0x14>
  }
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	3724      	adds	r7, #36	; 0x24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	58000400 	.word	0x58000400

08008308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	887b      	ldrh	r3, [r7, #2]
 800831a:	4013      	ands	r3, r2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
 8008324:	e001      	b.n	800832a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	807b      	strh	r3, [r7, #2]
 8008344:	4613      	mov	r3, r2
 8008346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008348:	787b      	ldrb	r3, [r7, #1]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800834e:	887a      	ldrh	r2, [r7, #2]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008354:	e003      	b.n	800835e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008356:	887b      	ldrh	r3, [r7, #2]
 8008358:	041a      	lsls	r2, r3, #16
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	619a      	str	r2, [r3, #24]
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e07f      	b.n	800847e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7fa fda8 	bl	8002ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2224      	movs	r2, #36	; 0x24
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 0201 	bic.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80083bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d107      	bne.n	80083e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083e2:	609a      	str	r2, [r3, #8]
 80083e4:	e006      	b.n	80083f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80083f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d104      	bne.n	8008406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6859      	ldr	r1, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <HAL_I2C_Init+0x11c>)
 8008412:	430b      	orrs	r3, r1
 8008414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69d9      	ldr	r1, [r3, #28]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1a      	ldr	r2, [r3, #32]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	02008000 	.word	0x02008000

0800848c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	68f9      	ldr	r1, [r7, #12]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
  }
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d138      	bne.n	8008548 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e032      	b.n	800854a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2224      	movs	r2, #36	; 0x24
 80084f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008512:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6819      	ldr	r1, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0201 	orr.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b20      	cmp	r3, #32
 800856a:	d139      	bne.n	80085e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008576:	2302      	movs	r3, #2
 8008578:	e033      	b.n	80085e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2224      	movs	r2, #36	; 0x24
 8008586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0201 	bic.w	r2, r2, #1
 8008598:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0201 	orr.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	e000      	b.n	80085e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80085ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f0:	b08f      	sub	sp, #60	; 0x3c
 80085f2:	af0a      	add	r7, sp, #40	; 0x28
 80085f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e116      	b.n	800882e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d106      	bne.n	8008620 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f00e fda0 	bl	8017160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2203      	movs	r2, #3
 8008624:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f00a fea5 	bl	801338e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	687e      	ldr	r6, [r7, #4]
 800864c:	466d      	mov	r5, sp
 800864e:	f106 0410 	add.w	r4, r6, #16
 8008652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800865a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800865e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008662:	1d33      	adds	r3, r6, #4
 8008664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008666:	6838      	ldr	r0, [r7, #0]
 8008668:	f00a fd70 	bl	801314c <USB_CoreInit>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e0d7      	b.n	800882e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2100      	movs	r1, #0
 8008684:	4618      	mov	r0, r3
 8008686:	f00a fe93 	bl	80133b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	e04a      	b.n	8008726 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008690:	7bfa      	ldrb	r2, [r7, #15]
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4613      	mov	r3, r2
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	333d      	adds	r3, #61	; 0x3d
 80086a0:	2201      	movs	r2, #1
 80086a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086a4:	7bfa      	ldrb	r2, [r7, #15]
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	00db      	lsls	r3, r3, #3
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	440b      	add	r3, r1
 80086b2:	333c      	adds	r3, #60	; 0x3c
 80086b4:	7bfa      	ldrb	r2, [r7, #15]
 80086b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80086b8:	7bfa      	ldrb	r2, [r7, #15]
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	b298      	uxth	r0, r3
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	3356      	adds	r3, #86	; 0x56
 80086cc:	4602      	mov	r2, r0
 80086ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80086d0:	7bfa      	ldrb	r2, [r7, #15]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	3340      	adds	r3, #64	; 0x40
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80086e4:	7bfa      	ldrb	r2, [r7, #15]
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4613      	mov	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	3344      	adds	r3, #68	; 0x44
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80086f8:	7bfa      	ldrb	r2, [r7, #15]
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	3348      	adds	r3, #72	; 0x48
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800870c:	7bfa      	ldrb	r2, [r7, #15]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4613      	mov	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	334c      	adds	r3, #76	; 0x4c
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	3301      	adds	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	7bfa      	ldrb	r2, [r7, #15]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d3af      	bcc.n	8008690 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e044      	b.n	80087c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008736:	7bfa      	ldrb	r2, [r7, #15]
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800874c:	7bfa      	ldrb	r2, [r7, #15]
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800875e:	7bfa      	ldrb	r2, [r7, #15]
 8008760:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008762:	7bfa      	ldrb	r2, [r7, #15]
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008778:	7bfa      	ldrb	r2, [r7, #15]
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800878e:	7bfa      	ldrb	r2, [r7, #15]
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80087a4:	7bfa      	ldrb	r2, [r7, #15]
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	3301      	adds	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d3b5      	bcc.n	8008736 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	687e      	ldr	r6, [r7, #4]
 80087d2:	466d      	mov	r5, sp
 80087d4:	f106 0410 	add.w	r4, r6, #16
 80087d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80087e8:	1d33      	adds	r3, r6, #4
 80087ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087ec:	6838      	ldr	r0, [r7, #0]
 80087ee:	f00a fe2b 	bl	8013448 <USB_DevInit>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e014      	b.n	800882e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b01      	cmp	r3, #1
 800881a:	d102      	bne.n	8008822 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 f96f 	bl	8009b00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f00b fe6d 	bl	8014506 <USB_DevDisconnect>

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008836 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_PCD_Start+0x1c>
 800884e:	2302      	movs	r3, #2
 8008850:	e022      	b.n	8008898 <HAL_PCD_Start+0x62>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008862:	2b00      	cmp	r3, #0
 8008864:	d109      	bne.n	800887a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800886a:	2b01      	cmp	r3, #1
 800886c:	d105      	bne.n	800887a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008872:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f00a fd74 	bl	801336c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f00b fe1b 	bl	80144c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80088a0:	b590      	push	{r4, r7, lr}
 80088a2:	b08d      	sub	sp, #52	; 0x34
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f00b fed9 	bl	801466e <USB_GetMode>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 84b7 	bne.w	8009232 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f00b fe3d 	bl	8014548 <USB_ReadInterrupts>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 84ad 	beq.w	8009230 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f00b fe2a 	bl	8014548 <USB_ReadInterrupts>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d107      	bne.n	800890e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695a      	ldr	r2, [r3, #20]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f002 0202 	and.w	r2, r2, #2
 800890c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f00b fe18 	bl	8014548 <USB_ReadInterrupts>
 8008918:	4603      	mov	r3, r0
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b10      	cmp	r3, #16
 8008920:	d161      	bne.n	80089e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0210 	bic.w	r2, r2, #16
 8008930:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	4613      	mov	r3, r2
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	3304      	adds	r3, #4
 8008950:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	0c5b      	lsrs	r3, r3, #17
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	2b02      	cmp	r3, #2
 800895c:	d124      	bne.n	80089a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008964:	4013      	ands	r3, r2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d035      	beq.n	80089d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	091b      	lsrs	r3, r3, #4
 8008972:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008978:	b29b      	uxth	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	6a38      	ldr	r0, [r7, #32]
 800897e:	f00b fc4f 	bl	8014220 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	091b      	lsrs	r3, r3, #4
 800898a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800898e:	441a      	add	r2, r3
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	695a      	ldr	r2, [r3, #20]
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	091b      	lsrs	r3, r3, #4
 800899c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089a0:	441a      	add	r2, r3
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	615a      	str	r2, [r3, #20]
 80089a6:	e016      	b.n	80089d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	0c5b      	lsrs	r3, r3, #17
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	2b06      	cmp	r3, #6
 80089b2:	d110      	bne.n	80089d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089ba:	2208      	movs	r2, #8
 80089bc:	4619      	mov	r1, r3
 80089be:	6a38      	ldr	r0, [r7, #32]
 80089c0:	f00b fc2e 	bl	8014220 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	091b      	lsrs	r3, r3, #4
 80089cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089d0:	441a      	add	r2, r3
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	699a      	ldr	r2, [r3, #24]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0210 	orr.w	r2, r2, #16
 80089e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f00b fdac 	bl	8014548 <USB_ReadInterrupts>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089fa:	f040 80a7 	bne.w	8008b4c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f00b fdb1 	bl	801456e <USB_ReadDevAllOutEpInterrupt>
 8008a0c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008a0e:	e099      	b.n	8008b44 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 808e 	beq.w	8008b38 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f00b fdd5 	bl	80145d6 <USB_ReadDevOutEPInterrupt>
 8008a2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00c      	beq.n	8008a52 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a44:	461a      	mov	r2, r3
 8008a46:	2301      	movs	r3, #1
 8008a48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fed1 	bl	80097f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00c      	beq.n	8008a76 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2308      	movs	r3, #8
 8008a6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 ffa7 	bl	80099c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d008      	beq.n	8008a92 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	2310      	movs	r3, #16
 8008a90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d030      	beq.n	8008afe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa4:	2b80      	cmp	r3, #128	; 0x80
 8008aa6:	d109      	bne.n	8008abc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008aba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abe:	4613      	mov	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	78db      	ldrb	r3, [r3, #3]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d108      	bne.n	8008aec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f00e fc32 	bl	8017350 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af8:	461a      	mov	r2, r3
 8008afa:	2302      	movs	r3, #2
 8008afc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b14:	461a      	mov	r2, r3
 8008b16:	2320      	movs	r3, #32
 8008b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b30:	461a      	mov	r2, r3
 8008b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b36:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	085b      	lsrs	r3, r3, #1
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f47f af62 	bne.w	8008a10 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f00b fcf9 	bl	8014548 <USB_ReadInterrupts>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b60:	f040 80db 	bne.w	8008d1a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f00b fd1a 	bl	80145a2 <USB_ReadDevAllInEpInterrupt>
 8008b6e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008b74:	e0cd      	b.n	8008d12 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80c2 	beq.w	8008d06 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b88:	b2d2      	uxtb	r2, r2
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f00b fd40 	bl	8014612 <USB_ReadDevInEPInterrupt>
 8008b92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d057      	beq.n	8008c4e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8008baa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	43db      	mvns	r3, r3
 8008bb8:	69f9      	ldr	r1, [r7, #28]
 8008bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d132      	bne.n	8008c42 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be0:	4613      	mov	r3, r2
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	3348      	adds	r3, #72	; 0x48
 8008bec:	6819      	ldr	r1, [r3, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4403      	add	r3, r0
 8008bfc:	3344      	adds	r3, #68	; 0x44
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4419      	add	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c06:	4613      	mov	r3, r2
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4403      	add	r3, r0
 8008c10:	3348      	adds	r3, #72	; 0x48
 8008c12:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d113      	bne.n	8008c42 <HAL_PCD_IRQHandler+0x3a2>
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1e:	4613      	mov	r3, r2
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	334c      	adds	r3, #76	; 0x4c
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d108      	bne.n	8008c42 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	f00b fd49 	bl	80146d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f00e fafc 	bl	8017246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	461a      	mov	r2, r3
 8008c66:	2308      	movs	r3, #8
 8008c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d008      	beq.n	8008c86 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c80:	461a      	mov	r2, r3
 8008c82:	2310      	movs	r3, #16
 8008c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d008      	beq.n	8008ca2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	2340      	movs	r3, #64	; 0x40
 8008ca0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d023      	beq.n	8008cf4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cae:	6a38      	ldr	r0, [r7, #32]
 8008cb0:	f00a fd28 	bl	8013704 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	3338      	adds	r3, #56	; 0x38
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	78db      	ldrb	r3, [r3, #3]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d108      	bne.n	8008ce2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f00e fb49 	bl	8017374 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cee:	461a      	mov	r2, r3
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fcea 	bl	80096da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	3301      	adds	r3, #1
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f af2e 	bne.w	8008b76 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f00b fc12 	bl	8014548 <USB_ReadInterrupts>
 8008d24:	4603      	mov	r3, r0
 8008d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d2e:	d122      	bne.n	8008d76 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d108      	bne.n	8008d60 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d56:	2100      	movs	r1, #0
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fef5 	bl	8009b48 <HAL_PCDEx_LPM_Callback>
 8008d5e:	e002      	b.n	8008d66 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f00e fae7 	bl	8017334 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	695a      	ldr	r2, [r3, #20]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f00b fbe4 	bl	8014548 <USB_ReadInterrupts>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d8a:	d112      	bne.n	8008db2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d102      	bne.n	8008da2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f00e faa3 	bl	80172e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	695a      	ldr	r2, [r3, #20]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f00b fbc6 	bl	8014548 <USB_ReadInterrupts>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc6:	d121      	bne.n	8008e0c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695a      	ldr	r2, [r3, #20]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008dd6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d111      	bne.n	8008e06 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	089b      	lsrs	r3, r3, #2
 8008df2:	f003 020f 	and.w	r2, r3, #15
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fea2 	bl	8009b48 <HAL_PCDEx_LPM_Callback>
 8008e04:	e002      	b.n	8008e0c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f00e fa6e 	bl	80172e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f00b fb99 	bl	8014548 <USB_ReadInterrupts>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e20:	f040 80b7 	bne.w	8008f92 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2110      	movs	r1, #16
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f00a fc60 	bl	8013704 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e44:	2300      	movs	r3, #0
 8008e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e48:	e046      	b.n	8008ed8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e56:	461a      	mov	r2, r3
 8008e58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6e:	0151      	lsls	r1, r2, #5
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	440a      	add	r2, r1
 8008e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ed0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d3b3      	bcc.n	8008e4a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ef4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d016      	beq.n	8008f2c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f0e:	f043 030b 	orr.w	r3, r3, #11
 8008f12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f24:	f043 030b 	orr.w	r3, r3, #11
 8008f28:	6453      	str	r3, [r2, #68]	; 0x44
 8008f2a:	e015      	b.n	8008f58 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f32:	695a      	ldr	r2, [r3, #20]
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008f40:	4313      	orrs	r3, r2
 8008f42:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f52:	f043 030b 	orr.w	r3, r3, #11
 8008f56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f00b fba9 	bl	80146d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695a      	ldr	r2, [r3, #20]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f00b fad6 	bl	8014548 <USB_ReadInterrupts>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa6:	d124      	bne.n	8008ff2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f00b fb6d 	bl	801468c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f00a fc21 	bl	80137fe <USB_GetDevSpeed>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681c      	ldr	r4, [r3, #0]
 8008fc8:	f001 fd88 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 8008fcc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f00a f926 	bl	8013228 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f00e f95a 	bl	8017296 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695a      	ldr	r2, [r3, #20]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f00b faa6 	bl	8014548 <USB_ReadInterrupts>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b08      	cmp	r3, #8
 8009004:	d10a      	bne.n	800901c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f00e f937 	bl	801727a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695a      	ldr	r2, [r3, #20]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f002 0208 	and.w	r2, r2, #8
 800901a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f00b fa91 	bl	8014548 <USB_ReadInterrupts>
 8009026:	4603      	mov	r3, r0
 8009028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902c:	2b80      	cmp	r3, #128	; 0x80
 800902e:	d122      	bne.n	8009076 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800903c:	2301      	movs	r3, #1
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
 8009040:	e014      	b.n	800906c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009046:	4613      	mov	r3, r2
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d105      	bne.n	8009066 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	b2db      	uxtb	r3, r3
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fb09 	bl	8009678 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	3301      	adds	r3, #1
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009072:	429a      	cmp	r2, r3
 8009074:	d3e5      	bcc.n	8009042 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f00b fa64 	bl	8014548 <USB_ReadInterrupts>
 8009080:	4603      	mov	r3, r0
 8009082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800908a:	d13b      	bne.n	8009104 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800908c:	2301      	movs	r3, #1
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
 8009090:	e02b      	b.n	80090ea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a6:	4613      	mov	r3, r2
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	440b      	add	r3, r1
 80090b0:	3340      	adds	r3, #64	; 0x40
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d115      	bne.n	80090e4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80090b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da12      	bge.n	80090e4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c2:	4613      	mov	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	333f      	adds	r3, #63	; 0x3f
 80090ce:	2201      	movs	r2, #1
 80090d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 faca 	bl	8009678 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	3301      	adds	r3, #1
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d3ce      	bcc.n	8009092 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695a      	ldr	r2, [r3, #20]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f00b fa1d 	bl	8014548 <USB_ReadInterrupts>
 800910e:	4603      	mov	r3, r0
 8009110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009118:	d155      	bne.n	80091c6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800911a:	2301      	movs	r3, #1
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
 800911e:	e045      	b.n	80091ac <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009134:	4613      	mov	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d12e      	bne.n	80091a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009148:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800914a:	2b00      	cmp	r3, #0
 800914c:	da2b      	bge.n	80091a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800915a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800915e:	429a      	cmp	r2, r3
 8009160:	d121      	bne.n	80091a6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009166:	4613      	mov	r3, r2
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009174:	2201      	movs	r2, #1
 8009176:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800919e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091a2:	6053      	str	r3, [r2, #4]
            break;
 80091a4:	e007      	b.n	80091b6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	3301      	adds	r3, #1
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d3b4      	bcc.n	8009120 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	695a      	ldr	r2, [r3, #20]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80091c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f00b f9bc 	bl	8014548 <USB_ReadInterrupts>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091da:	d10a      	bne.n	80091f2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f00e f8db 	bl	8017398 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	695a      	ldr	r2, [r3, #20]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80091f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f00b f9a6 	bl	8014548 <USB_ReadInterrupts>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b04      	cmp	r3, #4
 8009204:	d115      	bne.n	8009232 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f00e f8cb 	bl	80173b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6859      	ldr	r1, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	e000      	b.n	8009232 <HAL_PCD_IRQHandler+0x992>
      return;
 8009230:	bf00      	nop
    }
  }
}
 8009232:	3734      	adds	r7, #52	; 0x34
 8009234:	46bd      	mov	sp, r7
 8009236:	bd90      	pop	{r4, r7, pc}

08009238 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_PCD_SetAddress+0x1a>
 800924e:	2302      	movs	r3, #2
 8009250:	e013      	b.n	800927a <HAL_PCD_SetAddress+0x42>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	78fa      	ldrb	r2, [r7, #3]
 800925e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f00b f904 	bl	8014478 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	4608      	mov	r0, r1
 800928c:	4611      	mov	r1, r2
 800928e:	461a      	mov	r2, r3
 8009290:	4603      	mov	r3, r0
 8009292:	70fb      	strb	r3, [r7, #3]
 8009294:	460b      	mov	r3, r1
 8009296:	803b      	strh	r3, [r7, #0]
 8009298:	4613      	mov	r3, r2
 800929a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	da0f      	bge.n	80092c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	f003 020f 	and.w	r2, r3, #15
 80092ae:	4613      	mov	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	3338      	adds	r3, #56	; 0x38
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	4413      	add	r3, r2
 80092bc:	3304      	adds	r3, #4
 80092be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	705a      	strb	r2, [r3, #1]
 80092c6:	e00f      	b.n	80092e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	f003 020f 	and.w	r2, r3, #15
 80092ce:	4613      	mov	r3, r2
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	4413      	add	r3, r2
 80092de:	3304      	adds	r3, #4
 80092e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80092e8:	78fb      	ldrb	r3, [r7, #3]
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80092f4:	883a      	ldrh	r2, [r7, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	78ba      	ldrb	r2, [r7, #2]
 80092fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009312:	78bb      	ldrb	r3, [r7, #2]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d102      	bne.n	800931e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <HAL_PCD_EP_Open+0xaa>
 8009328:	2302      	movs	r3, #2
 800932a:	e00e      	b.n	800934a <HAL_PCD_EP_Open+0xc8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68f9      	ldr	r1, [r7, #12]
 800933a:	4618      	mov	r0, r3
 800933c:	f00a fa84 	bl	8013848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009348:	7afb      	ldrb	r3, [r7, #11]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800935e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009362:	2b00      	cmp	r3, #0
 8009364:	da0f      	bge.n	8009386 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	4613      	mov	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	3338      	adds	r3, #56	; 0x38
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	3304      	adds	r3, #4
 800937c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	705a      	strb	r2, [r3, #1]
 8009384:	e00f      	b.n	80093a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	f003 020f 	and.w	r2, r3, #15
 800938c:	4613      	mov	r3, r2
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4413      	add	r3, r2
 800939c:	3304      	adds	r3, #4
 800939e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_PCD_EP_Close+0x6e>
 80093bc:	2302      	movs	r3, #2
 80093be:	e00e      	b.n	80093de <HAL_PCD_EP_Close+0x8c>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68f9      	ldr	r1, [r7, #12]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f00a fac2 	bl	8013958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b086      	sub	sp, #24
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
 80093f2:	460b      	mov	r3, r1
 80093f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	f003 020f 	and.w	r2, r3, #15
 80093fc:	4613      	mov	r3, r2
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	3304      	adds	r3, #4
 800940e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2200      	movs	r2, #0
 8009420:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2200      	movs	r2, #0
 8009426:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	f003 030f 	and.w	r3, r3, #15
 800942e:	b2da      	uxtb	r2, r3
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d102      	bne.n	8009442 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	461a      	mov	r2, r3
 800944e:	6979      	ldr	r1, [r7, #20]
 8009450:	f00a fb5e 	bl	8013b10 <USB_EPStartXfer>

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	460b      	mov	r3, r1
 8009468:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	f003 020f 	and.w	r2, r3, #15
 8009470:	6879      	ldr	r1, [r7, #4]
 8009472:	4613      	mov	r3, r2
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	4413      	add	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	440b      	add	r3, r1
 800947c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009480:	681b      	ldr	r3, [r3, #0]
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b086      	sub	sp, #24
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
 800949a:	460b      	mov	r3, r1
 800949c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	f003 020f 	and.w	r2, r3, #15
 80094a4:	4613      	mov	r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	3338      	adds	r3, #56	; 0x38
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	3304      	adds	r3, #4
 80094b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2200      	movs	r2, #0
 80094c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2201      	movs	r2, #1
 80094cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094ce:	7afb      	ldrb	r3, [r7, #11]
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d102      	bne.n	80094e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	461a      	mov	r2, r3
 80094f4:	6979      	ldr	r1, [r7, #20]
 80094f6:	f00a fb0b 	bl	8013b10 <USB_EPStartXfer>

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	f003 020f 	and.w	r2, r3, #15
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	429a      	cmp	r2, r3
 800951c:	d901      	bls.n	8009522 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e050      	b.n	80095c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009526:	2b00      	cmp	r3, #0
 8009528:	da0f      	bge.n	800954a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	f003 020f 	and.w	r2, r3, #15
 8009530:	4613      	mov	r3, r2
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	3338      	adds	r3, #56	; 0x38
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	3304      	adds	r3, #4
 8009540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	705a      	strb	r2, [r3, #1]
 8009548:	e00d      	b.n	8009566 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	4613      	mov	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4413      	add	r3, r2
 800955c:	3304      	adds	r3, #4
 800955e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	b2da      	uxtb	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_PCD_EP_SetStall+0x82>
 8009582:	2302      	movs	r3, #2
 8009584:	e01e      	b.n	80095c4 <HAL_PCD_EP_SetStall+0xc0>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	4618      	mov	r0, r3
 8009596:	f00a fe9b 	bl	80142d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	f003 030f 	and.w	r3, r3, #15
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	b2d9      	uxtb	r1, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095b4:	461a      	mov	r2, r3
 80095b6:	f00b f88d 	bl	80146d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	f003 020f 	and.w	r2, r3, #15
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d901      	bls.n	80095ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e042      	b.n	8009670 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	da0f      	bge.n	8009612 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	f003 020f 	and.w	r2, r3, #15
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	3338      	adds	r3, #56	; 0x38
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4413      	add	r3, r2
 8009606:	3304      	adds	r3, #4
 8009608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	705a      	strb	r2, [r3, #1]
 8009610:	e00f      	b.n	8009632 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	f003 020f 	and.w	r2, r3, #15
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	4413      	add	r3, r2
 8009628:	3304      	adds	r3, #4
 800962a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009638:	78fb      	ldrb	r3, [r7, #3]
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	b2da      	uxtb	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800964a:	2b01      	cmp	r3, #1
 800964c:	d101      	bne.n	8009652 <HAL_PCD_EP_ClrStall+0x86>
 800964e:	2302      	movs	r3, #2
 8009650:	e00e      	b.n	8009670 <HAL_PCD_EP_ClrStall+0xa4>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68f9      	ldr	r1, [r7, #12]
 8009660:	4618      	mov	r0, r3
 8009662:	f00a fea3 	bl	80143ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009688:	2b00      	cmp	r3, #0
 800968a:	da0c      	bge.n	80096a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	f003 020f 	and.w	r2, r3, #15
 8009692:	4613      	mov	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	3338      	adds	r3, #56	; 0x38
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4413      	add	r3, r2
 80096a0:	3304      	adds	r3, #4
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	e00c      	b.n	80096c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	f003 020f 	and.w	r2, r3, #15
 80096ac:	4613      	mov	r3, r2
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	4413      	add	r3, r2
 80096bc:	3304      	adds	r3, #4
 80096be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68f9      	ldr	r1, [r7, #12]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f00a fcc2 	bl	8014050 <USB_EPStopXfer>
 80096cc:	4603      	mov	r3, r0
 80096ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b08a      	sub	sp, #40	; 0x28
 80096de:	af02      	add	r7, sp, #8
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	4613      	mov	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	3338      	adds	r3, #56	; 0x38
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	3304      	adds	r3, #4
 8009700:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	695a      	ldr	r2, [r3, #20]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	429a      	cmp	r2, r3
 800970c:	d901      	bls.n	8009712 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e06c      	b.n	80097ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	69fa      	ldr	r2, [r7, #28]
 8009724:	429a      	cmp	r2, r3
 8009726:	d902      	bls.n	800972e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	3303      	adds	r3, #3
 8009732:	089b      	lsrs	r3, r3, #2
 8009734:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009736:	e02b      	b.n	8009790 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	429a      	cmp	r2, r3
 800974c:	d902      	bls.n	8009754 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	3303      	adds	r3, #3
 8009758:	089b      	lsrs	r3, r3, #2
 800975a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	68d9      	ldr	r1, [r3, #12]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	b2da      	uxtb	r2, r3
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800976c:	b2db      	uxtb	r3, r3
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4603      	mov	r3, r0
 8009772:	6978      	ldr	r0, [r7, #20]
 8009774:	f00a fd16 	bl	80141a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	441a      	add	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	695a      	ldr	r2, [r3, #20]
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	441a      	add	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d809      	bhi.n	80097ba <PCD_WriteEmptyTxFifo+0xe0>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d203      	bcs.n	80097ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1be      	bne.n	8009738 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d811      	bhi.n	80097ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	2201      	movs	r2, #1
 80097ce:	fa02 f303 	lsl.w	r3, r2, r3
 80097d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	43db      	mvns	r3, r3
 80097e0:	6939      	ldr	r1, [r7, #16]
 80097e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097e6:	4013      	ands	r3, r2
 80097e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3720      	adds	r7, #32
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	333c      	adds	r3, #60	; 0x3c
 800980c:	3304      	adds	r3, #4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d17b      	bne.n	8009922 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f003 0308 	and.w	r3, r3, #8
 8009830:	2b00      	cmp	r3, #0
 8009832:	d015      	beq.n	8009860 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	4a61      	ldr	r2, [pc, #388]	; (80099bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	f240 80b9 	bls.w	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80b3 	beq.w	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	461a      	mov	r2, r3
 8009858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800985c:	6093      	str	r3, [r2, #8]
 800985e:	e0a7      	b.n	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009876:	461a      	mov	r2, r3
 8009878:	2320      	movs	r3, #32
 800987a:	6093      	str	r3, [r2, #8]
 800987c:	e098      	b.n	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009884:	2b00      	cmp	r3, #0
 8009886:	f040 8093 	bne.w	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4a4b      	ldr	r2, [pc, #300]	; (80099bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d90f      	bls.n	80098b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a8:	461a      	mov	r2, r3
 80098aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098ae:	6093      	str	r3, [r2, #8]
 80098b0:	e07e      	b.n	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	4413      	add	r3, r2
 80098c4:	3304      	adds	r3, #4
 80098c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a1a      	ldr	r2, [r3, #32]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	0159      	lsls	r1, r3, #5
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	440b      	add	r3, r1
 80098d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d114      	bne.n	8009914 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098fc:	461a      	mov	r2, r3
 80098fe:	2101      	movs	r1, #1
 8009900:	f00a fee8 	bl	80146d4 <USB_EP0_OutStart>
 8009904:	e006      	b.n	8009914 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	441a      	add	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f00d fc78 	bl	8017210 <HAL_PCD_DataOutStageCallback>
 8009920:	e046      	b.n	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	4a26      	ldr	r2, [pc, #152]	; (80099c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d124      	bne.n	8009974 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009940:	461a      	mov	r2, r3
 8009942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009946:	6093      	str	r3, [r2, #8]
 8009948:	e032      	b.n	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	d008      	beq.n	8009966 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009960:	461a      	mov	r2, r3
 8009962:	2320      	movs	r3, #32
 8009964:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f00d fc4f 	bl	8017210 <HAL_PCD_DataOutStageCallback>
 8009972:	e01d      	b.n	80099b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d114      	bne.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	4613      	mov	r3, r2
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	440b      	add	r3, r1
 8009988:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d108      	bne.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800999c:	461a      	mov	r2, r3
 800999e:	2100      	movs	r1, #0
 80099a0:	f00a fe98 	bl	80146d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f00d fc30 	bl	8017210 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3720      	adds	r7, #32
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	4f54300a 	.word	0x4f54300a
 80099c0:	4f54310a 	.word	0x4f54310a

080099c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	333c      	adds	r3, #60	; 0x3c
 80099dc:	3304      	adds	r3, #4
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <PCD_EP_OutSetupPacket_int+0x88>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d90e      	bls.n	8009a18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d009      	beq.n	8009a18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a10:	461a      	mov	r2, r3
 8009a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f00d fbe7 	bl	80171ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <PCD_EP_OutSetupPacket_int+0x88>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d90c      	bls.n	8009a40 <PCD_EP_OutSetupPacket_int+0x7c>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d108      	bne.n	8009a40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a38:	461a      	mov	r2, r3
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	f00a fe4a 	bl	80146d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	4f54300a 	.word	0x4f54300a

08009a50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d107      	bne.n	8009a7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009a6e:	883b      	ldrh	r3, [r7, #0]
 8009a70:	0419      	lsls	r1, r3, #16
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a7c:	e028      	b.n	8009ad0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	0c1b      	lsrs	r3, r3, #16
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	4413      	add	r3, r2
 8009a8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
 8009a90:	e00d      	b.n	8009aae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	3340      	adds	r3, #64	; 0x40
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	0c1b      	lsrs	r3, r3, #16
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]
 8009aae:	7bfa      	ldrb	r2, [r7, #15]
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d3ec      	bcc.n	8009a92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009ab8:	883b      	ldrh	r3, [r7, #0]
 8009aba:	0418      	lsls	r0, r3, #16
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6819      	ldr	r1, [r3, #0]
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	4302      	orrs	r2, r0
 8009ac8:	3340      	adds	r3, #64	; 0x40
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	887a      	ldrh	r2, [r7, #2]
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <HAL_PCDEx_ActivateLPM+0x44>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	10000003 	.word	0x10000003

08009b48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009b68:	4b19      	ldr	r3, [pc, #100]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	d00a      	beq.n	8009b8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b74:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d001      	beq.n	8009b86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e01f      	b.n	8009bc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e01d      	b.n	8009bc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009b8a:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	f023 0207 	bic.w	r2, r3, #7
 8009b92:	490f      	ldr	r1, [pc, #60]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009b9a:	f7fa f90f 	bl	8003dbc <HAL_GetTick>
 8009b9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ba0:	e009      	b.n	8009bb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ba2:	f7fa f90b 	bl	8003dbc <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bb0:	d901      	bls.n	8009bb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e007      	b.n	8009bc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009bb6:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <HAL_PWREx_ConfigSupply+0x70>)
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc2:	d1ee      	bne.n	8009ba2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	58024800 	.word	0x58024800

08009bd4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	4a04      	ldr	r2, [pc, #16]	; (8009bf0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009be2:	60d3      	str	r3, [r2, #12]
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	58024800 	.word	0x58024800

08009bf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08c      	sub	sp, #48	; 0x30
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e3c8      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 8087 	beq.w	8009d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c14:	4b88      	ldr	r3, [pc, #544]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c1e:	4b86      	ldr	r3, [pc, #536]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d007      	beq.n	8009c3a <HAL_RCC_OscConfig+0x46>
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	2b18      	cmp	r3, #24
 8009c2e:	d110      	bne.n	8009c52 <HAL_RCC_OscConfig+0x5e>
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	f003 0303 	and.w	r3, r3, #3
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d10b      	bne.n	8009c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c3a:	4b7f      	ldr	r3, [pc, #508]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d06c      	beq.n	8009d20 <HAL_RCC_OscConfig+0x12c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d168      	bne.n	8009d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e3a2      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c5a:	d106      	bne.n	8009c6a <HAL_RCC_OscConfig+0x76>
 8009c5c:	4b76      	ldr	r3, [pc, #472]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a75      	ldr	r2, [pc, #468]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	e02e      	b.n	8009cc8 <HAL_RCC_OscConfig+0xd4>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10c      	bne.n	8009c8c <HAL_RCC_OscConfig+0x98>
 8009c72:	4b71      	ldr	r3, [pc, #452]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a70      	ldr	r2, [pc, #448]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	4b6e      	ldr	r3, [pc, #440]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a6d      	ldr	r2, [pc, #436]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	e01d      	b.n	8009cc8 <HAL_RCC_OscConfig+0xd4>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c94:	d10c      	bne.n	8009cb0 <HAL_RCC_OscConfig+0xbc>
 8009c96:	4b68      	ldr	r3, [pc, #416]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a67      	ldr	r2, [pc, #412]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	4b65      	ldr	r3, [pc, #404]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a64      	ldr	r2, [pc, #400]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	e00b      	b.n	8009cc8 <HAL_RCC_OscConfig+0xd4>
 8009cb0:	4b61      	ldr	r3, [pc, #388]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a60      	ldr	r2, [pc, #384]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	4b5e      	ldr	r3, [pc, #376]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a5d      	ldr	r2, [pc, #372]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d013      	beq.n	8009cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd0:	f7fa f874 	bl	8003dbc <HAL_GetTick>
 8009cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cd6:	e008      	b.n	8009cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cd8:	f7fa f870 	bl	8003dbc <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b64      	cmp	r3, #100	; 0x64
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e356      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cea:	4b53      	ldr	r3, [pc, #332]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <HAL_RCC_OscConfig+0xe4>
 8009cf6:	e014      	b.n	8009d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf8:	f7fa f860 	bl	8003dbc <HAL_GetTick>
 8009cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009cfe:	e008      	b.n	8009d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d00:	f7fa f85c 	bl	8003dbc <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	2b64      	cmp	r3, #100	; 0x64
 8009d0c:	d901      	bls.n	8009d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e342      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d12:	4b49      	ldr	r3, [pc, #292]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1f0      	bne.n	8009d00 <HAL_RCC_OscConfig+0x10c>
 8009d1e:	e000      	b.n	8009d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 808c 	beq.w	8009e48 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d30:	4b41      	ldr	r3, [pc, #260]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d3a:	4b3f      	ldr	r3, [pc, #252]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d007      	beq.n	8009d56 <HAL_RCC_OscConfig+0x162>
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	2b18      	cmp	r3, #24
 8009d4a:	d137      	bne.n	8009dbc <HAL_RCC_OscConfig+0x1c8>
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f003 0303 	and.w	r3, r3, #3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d132      	bne.n	8009dbc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d56:	4b38      	ldr	r3, [pc, #224]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d005      	beq.n	8009d6e <HAL_RCC_OscConfig+0x17a>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e314      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d6e:	4b32      	ldr	r3, [pc, #200]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f023 0219 	bic.w	r2, r3, #25
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	492f      	ldr	r1, [pc, #188]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d80:	f7fa f81c 	bl	8003dbc <HAL_GetTick>
 8009d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d86:	e008      	b.n	8009d9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d88:	f7fa f818 	bl	8003dbc <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d901      	bls.n	8009d9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e2fe      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d9a:	4b27      	ldr	r3, [pc, #156]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0304 	and.w	r3, r3, #4
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0f0      	beq.n	8009d88 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	061b      	lsls	r3, r3, #24
 8009db4:	4920      	ldr	r1, [pc, #128]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009dba:	e045      	b.n	8009e48 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d026      	beq.n	8009e12 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009dc4:	4b1c      	ldr	r3, [pc, #112]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f023 0219 	bic.w	r2, r3, #25
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	4919      	ldr	r1, [pc, #100]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd6:	f7f9 fff1 	bl	8003dbc <HAL_GetTick>
 8009dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ddc:	e008      	b.n	8009df0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dde:	f7f9 ffed 	bl	8003dbc <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d901      	bls.n	8009df0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e2d3      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009df0:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0f0      	beq.n	8009dde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dfc:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	061b      	lsls	r3, r3, #24
 8009e0a:	490b      	ldr	r1, [pc, #44]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	604b      	str	r3, [r1, #4]
 8009e10:	e01a      	b.n	8009e48 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e12:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a08      	ldr	r2, [pc, #32]	; (8009e38 <HAL_RCC_OscConfig+0x244>)
 8009e18:	f023 0301 	bic.w	r3, r3, #1
 8009e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e1e:	f7f9 ffcd 	bl	8003dbc <HAL_GetTick>
 8009e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e24:	e00a      	b.n	8009e3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e26:	f7f9 ffc9 	bl	8003dbc <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d903      	bls.n	8009e3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e2af      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
 8009e38:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e3c:	4b96      	ldr	r3, [pc, #600]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1ee      	bne.n	8009e26 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0310 	and.w	r3, r3, #16
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d06a      	beq.n	8009f2a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e54:	4b90      	ldr	r3, [pc, #576]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e5c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e5e:	4b8e      	ldr	r3, [pc, #568]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e62:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d007      	beq.n	8009e7a <HAL_RCC_OscConfig+0x286>
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	2b18      	cmp	r3, #24
 8009e6e:	d11b      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x2b4>
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d116      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e7a:	4b87      	ldr	r3, [pc, #540]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d005      	beq.n	8009e92 <HAL_RCC_OscConfig+0x29e>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	2b80      	cmp	r3, #128	; 0x80
 8009e8c:	d001      	beq.n	8009e92 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e282      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e92:	4b81      	ldr	r3, [pc, #516]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	061b      	lsls	r3, r3, #24
 8009ea0:	497d      	ldr	r1, [pc, #500]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ea6:	e040      	b.n	8009f2a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d023      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009eb0:	4b79      	ldr	r3, [pc, #484]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a78      	ldr	r2, [pc, #480]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ebc:	f7f9 ff7e 	bl	8003dbc <HAL_GetTick>
 8009ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ec2:	e008      	b.n	8009ed6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ec4:	f7f9 ff7a 	bl	8003dbc <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d901      	bls.n	8009ed6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e260      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ed6:	4b70      	ldr	r3, [pc, #448]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0f0      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ee2:	4b6d      	ldr	r3, [pc, #436]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	061b      	lsls	r3, r3, #24
 8009ef0:	4969      	ldr	r1, [pc, #420]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60cb      	str	r3, [r1, #12]
 8009ef6:	e018      	b.n	8009f2a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ef8:	4b67      	ldr	r3, [pc, #412]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a66      	ldr	r2, [pc, #408]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f04:	f7f9 ff5a 	bl	8003dbc <HAL_GetTick>
 8009f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009f0c:	f7f9 ff56 	bl	8003dbc <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e23c      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009f1e:	4b5e      	ldr	r3, [pc, #376]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1f0      	bne.n	8009f0c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0308 	and.w	r3, r3, #8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d036      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d019      	beq.n	8009f72 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f3e:	4b56      	ldr	r3, [pc, #344]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f42:	4a55      	ldr	r2, [pc, #340]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009f44:	f043 0301 	orr.w	r3, r3, #1
 8009f48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f4a:	f7f9 ff37 	bl	8003dbc <HAL_GetTick>
 8009f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f50:	e008      	b.n	8009f64 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f52:	f7f9 ff33 	bl	8003dbc <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e219      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f64:	4b4c      	ldr	r3, [pc, #304]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0f0      	beq.n	8009f52 <HAL_RCC_OscConfig+0x35e>
 8009f70:	e018      	b.n	8009fa4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f72:	4b49      	ldr	r3, [pc, #292]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f76:	4a48      	ldr	r2, [pc, #288]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009f78:	f023 0301 	bic.w	r3, r3, #1
 8009f7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f7e:	f7f9 ff1d 	bl	8003dbc <HAL_GetTick>
 8009f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f84:	e008      	b.n	8009f98 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f86:	f7f9 ff19 	bl	8003dbc <HAL_GetTick>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d901      	bls.n	8009f98 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e1ff      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f98:	4b3f      	ldr	r3, [pc, #252]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f9c:	f003 0302 	and.w	r3, r3, #2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f0      	bne.n	8009f86 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0320 	and.w	r3, r3, #32
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d036      	beq.n	800a01e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d019      	beq.n	8009fec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009fb8:	4b37      	ldr	r3, [pc, #220]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a36      	ldr	r2, [pc, #216]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009fc4:	f7f9 fefa 	bl	8003dbc <HAL_GetTick>
 8009fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fcc:	f7f9 fef6 	bl	8003dbc <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e1dc      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009fde:	4b2e      	ldr	r3, [pc, #184]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f0      	beq.n	8009fcc <HAL_RCC_OscConfig+0x3d8>
 8009fea:	e018      	b.n	800a01e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fec:	4b2a      	ldr	r3, [pc, #168]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a29      	ldr	r2, [pc, #164]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 8009ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ff6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ff8:	f7f9 fee0 	bl	8003dbc <HAL_GetTick>
 8009ffc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ffe:	e008      	b.n	800a012 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a000:	f7f9 fedc 	bl	8003dbc <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d901      	bls.n	800a012 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e1c2      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a012:	4b21      	ldr	r3, [pc, #132]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1f0      	bne.n	800a000 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 8086 	beq.w	800a138 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a02c:	4b1b      	ldr	r3, [pc, #108]	; (800a09c <HAL_RCC_OscConfig+0x4a8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1a      	ldr	r2, [pc, #104]	; (800a09c <HAL_RCC_OscConfig+0x4a8>)
 800a032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a038:	f7f9 fec0 	bl	8003dbc <HAL_GetTick>
 800a03c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a03e:	e008      	b.n	800a052 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a040:	f7f9 febc 	bl	8003dbc <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	2b64      	cmp	r3, #100	; 0x64
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e1a2      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a052:	4b12      	ldr	r3, [pc, #72]	; (800a09c <HAL_RCC_OscConfig+0x4a8>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0f0      	beq.n	800a040 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d106      	bne.n	800a074 <HAL_RCC_OscConfig+0x480>
 800a066:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 800a068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06a:	4a0b      	ldr	r2, [pc, #44]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 800a06c:	f043 0301 	orr.w	r3, r3, #1
 800a070:	6713      	str	r3, [r2, #112]	; 0x70
 800a072:	e032      	b.n	800a0da <HAL_RCC_OscConfig+0x4e6>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d111      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x4ac>
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 800a07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a080:	4a05      	ldr	r2, [pc, #20]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	6713      	str	r3, [r2, #112]	; 0x70
 800a088:	4b03      	ldr	r3, [pc, #12]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 800a08a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08c:	4a02      	ldr	r2, [pc, #8]	; (800a098 <HAL_RCC_OscConfig+0x4a4>)
 800a08e:	f023 0304 	bic.w	r3, r3, #4
 800a092:	6713      	str	r3, [r2, #112]	; 0x70
 800a094:	e021      	b.n	800a0da <HAL_RCC_OscConfig+0x4e6>
 800a096:	bf00      	nop
 800a098:	58024400 	.word	0x58024400
 800a09c:	58024800 	.word	0x58024800
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	2b05      	cmp	r3, #5
 800a0a6:	d10c      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x4ce>
 800a0a8:	4b83      	ldr	r3, [pc, #524]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ac:	4a82      	ldr	r2, [pc, #520]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0ae:	f043 0304 	orr.w	r3, r3, #4
 800a0b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a0b4:	4b80      	ldr	r3, [pc, #512]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b8:	4a7f      	ldr	r2, [pc, #508]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0ba:	f043 0301 	orr.w	r3, r3, #1
 800a0be:	6713      	str	r3, [r2, #112]	; 0x70
 800a0c0:	e00b      	b.n	800a0da <HAL_RCC_OscConfig+0x4e6>
 800a0c2:	4b7d      	ldr	r3, [pc, #500]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c6:	4a7c      	ldr	r2, [pc, #496]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0c8:	f023 0301 	bic.w	r3, r3, #1
 800a0cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ce:	4b7a      	ldr	r3, [pc, #488]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d2:	4a79      	ldr	r2, [pc, #484]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a0d4:	f023 0304 	bic.w	r3, r3, #4
 800a0d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d015      	beq.n	800a10e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0e2:	f7f9 fe6b 	bl	8003dbc <HAL_GetTick>
 800a0e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0e8:	e00a      	b.n	800a100 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ea:	f7f9 fe67 	bl	8003dbc <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d901      	bls.n	800a100 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e14b      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a100:	4b6d      	ldr	r3, [pc, #436]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a104:	f003 0302 	and.w	r3, r3, #2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0ee      	beq.n	800a0ea <HAL_RCC_OscConfig+0x4f6>
 800a10c:	e014      	b.n	800a138 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a10e:	f7f9 fe55 	bl	8003dbc <HAL_GetTick>
 800a112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a114:	e00a      	b.n	800a12c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a116:	f7f9 fe51 	bl	8003dbc <HAL_GetTick>
 800a11a:	4602      	mov	r2, r0
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	f241 3288 	movw	r2, #5000	; 0x1388
 800a124:	4293      	cmp	r3, r2
 800a126:	d901      	bls.n	800a12c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e135      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a12c:	4b62      	ldr	r3, [pc, #392]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1ee      	bne.n	800a116 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 812a 	beq.w	800a396 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a142:	4b5d      	ldr	r3, [pc, #372]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a14a:	2b18      	cmp	r3, #24
 800a14c:	f000 80ba 	beq.w	800a2c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b02      	cmp	r3, #2
 800a156:	f040 8095 	bne.w	800a284 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a15a:	4b57      	ldr	r3, [pc, #348]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a56      	ldr	r2, [pc, #344]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a166:	f7f9 fe29 	bl	8003dbc <HAL_GetTick>
 800a16a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a16c:	e008      	b.n	800a180 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a16e:	f7f9 fe25 	bl	8003dbc <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d901      	bls.n	800a180 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e10b      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a180:	4b4d      	ldr	r3, [pc, #308]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f0      	bne.n	800a16e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a18c:	4b4a      	ldr	r3, [pc, #296]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a18e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a190:	4b4a      	ldr	r3, [pc, #296]	; (800a2bc <HAL_RCC_OscConfig+0x6c8>)
 800a192:	4013      	ands	r3, r2
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a19c:	0112      	lsls	r2, r2, #4
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	4945      	ldr	r1, [pc, #276]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	628b      	str	r3, [r1, #40]	; 0x28
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	025b      	lsls	r3, r3, #9
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	041b      	lsls	r3, r3, #16
 800a1c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	061b      	lsls	r3, r3, #24
 800a1d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1d6:	4938      	ldr	r1, [pc, #224]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a1dc:	4b36      	ldr	r3, [pc, #216]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	4a35      	ldr	r2, [pc, #212]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a1e2:	f023 0301 	bic.w	r3, r3, #1
 800a1e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1e8:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a1ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ec:	4b34      	ldr	r3, [pc, #208]	; (800a2c0 <HAL_RCC_OscConfig+0x6cc>)
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1f4:	00d2      	lsls	r2, r2, #3
 800a1f6:	4930      	ldr	r1, [pc, #192]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a1fc:	4b2e      	ldr	r3, [pc, #184]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	f023 020c 	bic.w	r2, r3, #12
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	492b      	ldr	r1, [pc, #172]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a20e:	4b2a      	ldr	r3, [pc, #168]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	f023 0202 	bic.w	r2, r3, #2
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21a:	4927      	ldr	r1, [pc, #156]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a220:	4b25      	ldr	r3, [pc, #148]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	4a24      	ldr	r2, [pc, #144]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a22a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a22c:	4b22      	ldr	r3, [pc, #136]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	4a21      	ldr	r2, [pc, #132]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a238:	4b1f      	ldr	r3, [pc, #124]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	4a1e      	ldr	r2, [pc, #120]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a23e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a244:	4b1c      	ldr	r3, [pc, #112]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	4a1b      	ldr	r2, [pc, #108]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a24a:	f043 0301 	orr.w	r3, r3, #1
 800a24e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a250:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a18      	ldr	r2, [pc, #96]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a25a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25c:	f7f9 fdae 	bl	8003dbc <HAL_GetTick>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a262:	e008      	b.n	800a276 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a264:	f7f9 fdaa 	bl	8003dbc <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d901      	bls.n	800a276 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e090      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a276:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0f0      	beq.n	800a264 <HAL_RCC_OscConfig+0x670>
 800a282:	e088      	b.n	800a396 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a0b      	ldr	r2, [pc, #44]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a28a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a28e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a290:	f7f9 fd94 	bl	8003dbc <HAL_GetTick>
 800a294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a296:	e008      	b.n	800a2aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a298:	f7f9 fd90 	bl	8003dbc <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e076      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2aa:	4b03      	ldr	r3, [pc, #12]	; (800a2b8 <HAL_RCC_OscConfig+0x6c4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1f0      	bne.n	800a298 <HAL_RCC_OscConfig+0x6a4>
 800a2b6:	e06e      	b.n	800a396 <HAL_RCC_OscConfig+0x7a2>
 800a2b8:	58024400 	.word	0x58024400
 800a2bc:	fffffc0c 	.word	0xfffffc0c
 800a2c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a2c4:	4b36      	ldr	r3, [pc, #216]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a2ca:	4b35      	ldr	r3, [pc, #212]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d031      	beq.n	800a33c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f003 0203 	and.w	r2, r3, #3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d12a      	bne.n	800a33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	091b      	lsrs	r3, r3, #4
 800a2ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d122      	bne.n	800a33c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a300:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a302:	429a      	cmp	r2, r3
 800a304:	d11a      	bne.n	800a33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	0a5b      	lsrs	r3, r3, #9
 800a30a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a312:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a314:	429a      	cmp	r2, r3
 800a316:	d111      	bne.n	800a33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	0c1b      	lsrs	r3, r3, #16
 800a31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a324:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a326:	429a      	cmp	r2, r3
 800a328:	d108      	bne.n	800a33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	0e1b      	lsrs	r3, r3, #24
 800a32e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a336:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a338:	429a      	cmp	r2, r3
 800a33a:	d001      	beq.n	800a340 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e02b      	b.n	800a398 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a340:	4b17      	ldr	r3, [pc, #92]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a344:	08db      	lsrs	r3, r3, #3
 800a346:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a34a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	429a      	cmp	r2, r3
 800a354:	d01f      	beq.n	800a396 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a356:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	4a11      	ldr	r2, [pc, #68]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a35c:	f023 0301 	bic.w	r3, r3, #1
 800a360:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a362:	f7f9 fd2b 	bl	8003dbc <HAL_GetTick>
 800a366:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a368:	bf00      	nop
 800a36a:	f7f9 fd27 	bl	8003dbc <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	4293      	cmp	r3, r2
 800a374:	d0f9      	beq.n	800a36a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a376:	4b0a      	ldr	r3, [pc, #40]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a37a:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <HAL_RCC_OscConfig+0x7b0>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a382:	00d2      	lsls	r2, r2, #3
 800a384:	4906      	ldr	r1, [pc, #24]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a386:	4313      	orrs	r3, r2
 800a388:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a38a:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38e:	4a04      	ldr	r2, [pc, #16]	; (800a3a0 <HAL_RCC_OscConfig+0x7ac>)
 800a390:	f043 0301 	orr.w	r3, r3, #1
 800a394:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3730      	adds	r7, #48	; 0x30
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	58024400 	.word	0x58024400
 800a3a4:	ffff0007 	.word	0xffff0007

0800a3a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e19c      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a3bc:	4b8a      	ldr	r3, [pc, #552]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 030f 	and.w	r3, r3, #15
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d910      	bls.n	800a3ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ca:	4b87      	ldr	r3, [pc, #540]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f023 020f 	bic.w	r2, r3, #15
 800a3d2:	4985      	ldr	r1, [pc, #532]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3da:	4b83      	ldr	r3, [pc, #524]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d001      	beq.n	800a3ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e184      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0304 	and.w	r3, r3, #4
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d010      	beq.n	800a41a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	4b7b      	ldr	r3, [pc, #492]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a404:	429a      	cmp	r2, r3
 800a406:	d908      	bls.n	800a41a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a408:	4b78      	ldr	r3, [pc, #480]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	4975      	ldr	r1, [pc, #468]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a416:	4313      	orrs	r3, r2
 800a418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0308 	and.w	r3, r3, #8
 800a422:	2b00      	cmp	r3, #0
 800a424:	d010      	beq.n	800a448 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	695a      	ldr	r2, [r3, #20]
 800a42a:	4b70      	ldr	r3, [pc, #448]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a432:	429a      	cmp	r2, r3
 800a434:	d908      	bls.n	800a448 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a436:	4b6d      	ldr	r3, [pc, #436]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	496a      	ldr	r1, [pc, #424]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a444:	4313      	orrs	r3, r2
 800a446:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0310 	and.w	r3, r3, #16
 800a450:	2b00      	cmp	r3, #0
 800a452:	d010      	beq.n	800a476 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699a      	ldr	r2, [r3, #24]
 800a458:	4b64      	ldr	r3, [pc, #400]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a460:	429a      	cmp	r2, r3
 800a462:	d908      	bls.n	800a476 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a464:	4b61      	ldr	r3, [pc, #388]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	495e      	ldr	r1, [pc, #376]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a472:	4313      	orrs	r3, r2
 800a474:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d010      	beq.n	800a4a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69da      	ldr	r2, [r3, #28]
 800a486:	4b59      	ldr	r3, [pc, #356]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a48e:	429a      	cmp	r2, r3
 800a490:	d908      	bls.n	800a4a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a492:	4b56      	ldr	r3, [pc, #344]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	4953      	ldr	r1, [pc, #332]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0302 	and.w	r3, r3, #2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d010      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	4b4d      	ldr	r3, [pc, #308]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d908      	bls.n	800a4d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4c0:	4b4a      	ldr	r3, [pc, #296]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	f023 020f 	bic.w	r2, r3, #15
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	4947      	ldr	r1, [pc, #284]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d055      	beq.n	800a58a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a4de:	4b43      	ldr	r3, [pc, #268]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	4940      	ldr	r1, [pc, #256]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d107      	bne.n	800a508 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4f8:	4b3c      	ldr	r3, [pc, #240]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d121      	bne.n	800a548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e0f6      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d107      	bne.n	800a520 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a510:	4b36      	ldr	r3, [pc, #216]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d115      	bne.n	800a548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e0ea      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d107      	bne.n	800a538 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a528:	4b30      	ldr	r3, [pc, #192]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a530:	2b00      	cmp	r3, #0
 800a532:	d109      	bne.n	800a548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e0de      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a538:	4b2c      	ldr	r3, [pc, #176]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e0d6      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a548:	4b28      	ldr	r3, [pc, #160]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f023 0207 	bic.w	r2, r3, #7
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4925      	ldr	r1, [pc, #148]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a556:	4313      	orrs	r3, r2
 800a558:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a55a:	f7f9 fc2f 	bl	8003dbc <HAL_GetTick>
 800a55e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a560:	e00a      	b.n	800a578 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a562:	f7f9 fc2b 	bl	8003dbc <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a570:	4293      	cmp	r3, r2
 800a572:	d901      	bls.n	800a578 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e0be      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a578:	4b1c      	ldr	r3, [pc, #112]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	429a      	cmp	r2, r3
 800a588:	d1eb      	bne.n	800a562 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d010      	beq.n	800a5b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	4b14      	ldr	r3, [pc, #80]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	f003 030f 	and.w	r3, r3, #15
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d208      	bcs.n	800a5b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5a6:	4b11      	ldr	r3, [pc, #68]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	f023 020f 	bic.w	r2, r3, #15
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	490e      	ldr	r1, [pc, #56]	; (800a5ec <HAL_RCC_ClockConfig+0x244>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5b8:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 030f 	and.w	r3, r3, #15
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d214      	bcs.n	800a5f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5c6:	4b08      	ldr	r3, [pc, #32]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f023 020f 	bic.w	r2, r3, #15
 800a5ce:	4906      	ldr	r1, [pc, #24]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5d6:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <HAL_RCC_ClockConfig+0x240>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d005      	beq.n	800a5f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e086      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x34e>
 800a5e8:	52002000 	.word	0x52002000
 800a5ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d010      	beq.n	800a61e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691a      	ldr	r2, [r3, #16]
 800a600:	4b3f      	ldr	r3, [pc, #252]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a608:	429a      	cmp	r2, r3
 800a60a:	d208      	bcs.n	800a61e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a60c:	4b3c      	ldr	r3, [pc, #240]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	4939      	ldr	r1, [pc, #228]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d010      	beq.n	800a64c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	695a      	ldr	r2, [r3, #20]
 800a62e:	4b34      	ldr	r3, [pc, #208]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a636:	429a      	cmp	r2, r3
 800a638:	d208      	bcs.n	800a64c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a63a:	4b31      	ldr	r3, [pc, #196]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	492e      	ldr	r1, [pc, #184]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0310 	and.w	r3, r3, #16
 800a654:	2b00      	cmp	r3, #0
 800a656:	d010      	beq.n	800a67a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	699a      	ldr	r2, [r3, #24]
 800a65c:	4b28      	ldr	r3, [pc, #160]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a664:	429a      	cmp	r2, r3
 800a666:	d208      	bcs.n	800a67a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a668:	4b25      	ldr	r3, [pc, #148]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	4922      	ldr	r1, [pc, #136]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a676:	4313      	orrs	r3, r2
 800a678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d010      	beq.n	800a6a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	69da      	ldr	r2, [r3, #28]
 800a68a:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a692:	429a      	cmp	r2, r3
 800a694:	d208      	bcs.n	800a6a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a696:	4b1a      	ldr	r3, [pc, #104]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	4917      	ldr	r1, [pc, #92]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a6a8:	f000 f89e 	bl	800a7e8 <HAL_RCC_GetSysClockFreq>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	4b14      	ldr	r3, [pc, #80]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	0a1b      	lsrs	r3, r3, #8
 800a6b4:	f003 030f 	and.w	r3, r3, #15
 800a6b8:	4912      	ldr	r1, [pc, #72]	; (800a704 <HAL_RCC_ClockConfig+0x35c>)
 800a6ba:	5ccb      	ldrb	r3, [r1, r3]
 800a6bc:	f003 031f 	and.w	r3, r3, #31
 800a6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6c6:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <HAL_RCC_ClockConfig+0x358>)
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	f003 030f 	and.w	r3, r3, #15
 800a6ce:	4a0d      	ldr	r2, [pc, #52]	; (800a704 <HAL_RCC_ClockConfig+0x35c>)
 800a6d0:	5cd3      	ldrb	r3, [r2, r3]
 800a6d2:	f003 031f 	and.w	r3, r3, #31
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6dc:	4a0a      	ldr	r2, [pc, #40]	; (800a708 <HAL_RCC_ClockConfig+0x360>)
 800a6de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6e0:	4a0a      	ldr	r2, [pc, #40]	; (800a70c <HAL_RCC_ClockConfig+0x364>)
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a6e6:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <HAL_RCC_ClockConfig+0x368>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f9 fb1c 	bl	8003d28 <HAL_InitTick>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	58024400 	.word	0x58024400
 800a704:	08018cdc 	.word	0x08018cdc
 800a708:	24000004 	.word	0x24000004
 800a70c:	24000000 	.word	0x24000000
 800a710:	24000008 	.word	0x24000008

0800a714 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08c      	sub	sp, #48	; 0x30
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d12a      	bne.n	800a77c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a726:	4b2d      	ldr	r3, [pc, #180]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a72c:	4a2b      	ldr	r2, [pc, #172]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a72e:	f043 0301 	orr.w	r3, r3, #1
 800a732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a736:	4b29      	ldr	r3, [pc, #164]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	61bb      	str	r3, [r7, #24]
 800a742:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a744:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a74a:	2302      	movs	r3, #2
 800a74c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a74e:	2303      	movs	r3, #3
 800a750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a752:	2300      	movs	r3, #0
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a756:	2300      	movs	r3, #0
 800a758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a75a:	f107 031c 	add.w	r3, r7, #28
 800a75e:	4619      	mov	r1, r3
 800a760:	481f      	ldr	r0, [pc, #124]	; (800a7e0 <HAL_RCC_MCOConfig+0xcc>)
 800a762:	f7fd fc29 	bl	8007fb8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a766:	4b1d      	ldr	r3, [pc, #116]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	430b      	orrs	r3, r1
 800a774:	4919      	ldr	r1, [pc, #100]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a776:	4313      	orrs	r3, r2
 800a778:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a77a:	e02a      	b.n	800a7d2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a77c:	4b17      	ldr	r3, [pc, #92]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a77e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a782:	4a16      	ldr	r2, [pc, #88]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a784:	f043 0304 	orr.w	r3, r3, #4
 800a788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a78c:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a78e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a79a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a79e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a7b0:	f107 031c 	add.w	r3, r7, #28
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	480b      	ldr	r0, [pc, #44]	; (800a7e4 <HAL_RCC_MCOConfig+0xd0>)
 800a7b8:	f7fd fbfe 	bl	8007fb8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a7bc:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	01d9      	lsls	r1, r3, #7
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	430b      	orrs	r3, r1
 800a7cc:	4903      	ldr	r1, [pc, #12]	; (800a7dc <HAL_RCC_MCOConfig+0xc8>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	610b      	str	r3, [r1, #16]
}
 800a7d2:	bf00      	nop
 800a7d4:	3730      	adds	r7, #48	; 0x30
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	58024400 	.word	0x58024400
 800a7e0:	58020000 	.word	0x58020000
 800a7e4:	58020800 	.word	0x58020800

0800a7e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b089      	sub	sp, #36	; 0x24
 800a7ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7ee:	4bb3      	ldr	r3, [pc, #716]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f6:	2b18      	cmp	r3, #24
 800a7f8:	f200 8155 	bhi.w	800aaa6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a7fc:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800a869 	.word	0x0800a869
 800a808:	0800aaa7 	.word	0x0800aaa7
 800a80c:	0800aaa7 	.word	0x0800aaa7
 800a810:	0800aaa7 	.word	0x0800aaa7
 800a814:	0800aaa7 	.word	0x0800aaa7
 800a818:	0800aaa7 	.word	0x0800aaa7
 800a81c:	0800aaa7 	.word	0x0800aaa7
 800a820:	0800aaa7 	.word	0x0800aaa7
 800a824:	0800a88f 	.word	0x0800a88f
 800a828:	0800aaa7 	.word	0x0800aaa7
 800a82c:	0800aaa7 	.word	0x0800aaa7
 800a830:	0800aaa7 	.word	0x0800aaa7
 800a834:	0800aaa7 	.word	0x0800aaa7
 800a838:	0800aaa7 	.word	0x0800aaa7
 800a83c:	0800aaa7 	.word	0x0800aaa7
 800a840:	0800aaa7 	.word	0x0800aaa7
 800a844:	0800a895 	.word	0x0800a895
 800a848:	0800aaa7 	.word	0x0800aaa7
 800a84c:	0800aaa7 	.word	0x0800aaa7
 800a850:	0800aaa7 	.word	0x0800aaa7
 800a854:	0800aaa7 	.word	0x0800aaa7
 800a858:	0800aaa7 	.word	0x0800aaa7
 800a85c:	0800aaa7 	.word	0x0800aaa7
 800a860:	0800aaa7 	.word	0x0800aaa7
 800a864:	0800a89b 	.word	0x0800a89b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a868:	4b94      	ldr	r3, [pc, #592]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a874:	4b91      	ldr	r3, [pc, #580]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	08db      	lsrs	r3, r3, #3
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	4a90      	ldr	r2, [pc, #576]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a880:	fa22 f303 	lsr.w	r3, r2, r3
 800a884:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a886:	e111      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a888:	4b8d      	ldr	r3, [pc, #564]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a88a:	61bb      	str	r3, [r7, #24]
      break;
 800a88c:	e10e      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a88e:	4b8d      	ldr	r3, [pc, #564]	; (800aac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a890:	61bb      	str	r3, [r7, #24]
      break;
 800a892:	e10b      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a894:	4b8c      	ldr	r3, [pc, #560]	; (800aac8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a896:	61bb      	str	r3, [r7, #24]
      break;
 800a898:	e108      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a89a:	4b88      	ldr	r3, [pc, #544]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a8a4:	4b85      	ldr	r3, [pc, #532]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a8:	091b      	lsrs	r3, r3, #4
 800a8aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a8b0:	4b82      	ldr	r3, [pc, #520]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a8ba:	4b80      	ldr	r3, [pc, #512]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8be:	08db      	lsrs	r3, r3, #3
 800a8c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 80e1 	beq.w	800aaa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	f000 8083 	beq.w	800a9ec <HAL_RCC_GetSysClockFreq+0x204>
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	f200 80a1 	bhi.w	800aa30 <HAL_RCC_GetSysClockFreq+0x248>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_RCC_GetSysClockFreq+0x114>
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d056      	beq.n	800a9a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a8fa:	e099      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8fc:	4b6f      	ldr	r3, [pc, #444]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0320 	and.w	r3, r3, #32
 800a904:	2b00      	cmp	r3, #0
 800a906:	d02d      	beq.n	800a964 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a908:	4b6c      	ldr	r3, [pc, #432]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	08db      	lsrs	r3, r3, #3
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	4a6b      	ldr	r2, [pc, #428]	; (800aac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a914:	fa22 f303 	lsr.w	r3, r2, r3
 800a918:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a932:	4b62      	ldr	r3, [pc, #392]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a942:	ed97 6a02 	vldr	s12, [r7, #8]
 800a946:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a962:	e087      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aad0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a976:	4b51      	ldr	r3, [pc, #324]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a986:	ed97 6a02 	vldr	s12, [r7, #8]
 800a98a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9a6:	e065      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ba:	4b40      	ldr	r3, [pc, #256]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9ea:	e043      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aad8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fe:	4b2f      	ldr	r3, [pc, #188]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa2e:	e021      	b.n	800aa74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa42:	4b1e      	ldr	r3, [pc, #120]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aacc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aa74:	4b11      	ldr	r3, [pc, #68]	; (800aabc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa78:	0a5b      	lsrs	r3, r3, #9
 800aa7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7e:	3301      	adds	r3, #1
 800aa80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	ee07 3a90 	vmov	s15, r3
 800aa88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa98:	ee17 3a90 	vmov	r3, s15
 800aa9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aa9e:	e005      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61bb      	str	r3, [r7, #24]
      break;
 800aaa4:	e002      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aaa6:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aaa8:	61bb      	str	r3, [r7, #24]
      break;
 800aaaa:	bf00      	nop
  }

  return sysclockfreq;
 800aaac:	69bb      	ldr	r3, [r7, #24]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3724      	adds	r7, #36	; 0x24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	58024400 	.word	0x58024400
 800aac0:	03d09000 	.word	0x03d09000
 800aac4:	003d0900 	.word	0x003d0900
 800aac8:	02faf080 	.word	0x02faf080
 800aacc:	46000000 	.word	0x46000000
 800aad0:	4c742400 	.word	0x4c742400
 800aad4:	4a742400 	.word	0x4a742400
 800aad8:	4c3ebc20 	.word	0x4c3ebc20

0800aadc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aae2:	f7ff fe81 	bl	800a7e8 <HAL_RCC_GetSysClockFreq>
 800aae6:	4602      	mov	r2, r0
 800aae8:	4b10      	ldr	r3, [pc, #64]	; (800ab2c <HAL_RCC_GetHCLKFreq+0x50>)
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	0a1b      	lsrs	r3, r3, #8
 800aaee:	f003 030f 	and.w	r3, r3, #15
 800aaf2:	490f      	ldr	r1, [pc, #60]	; (800ab30 <HAL_RCC_GetHCLKFreq+0x54>)
 800aaf4:	5ccb      	ldrb	r3, [r1, r3]
 800aaf6:	f003 031f 	and.w	r3, r3, #31
 800aafa:	fa22 f303 	lsr.w	r3, r2, r3
 800aafe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab00:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <HAL_RCC_GetHCLKFreq+0x50>)
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	f003 030f 	and.w	r3, r3, #15
 800ab08:	4a09      	ldr	r2, [pc, #36]	; (800ab30 <HAL_RCC_GetHCLKFreq+0x54>)
 800ab0a:	5cd3      	ldrb	r3, [r2, r3]
 800ab0c:	f003 031f 	and.w	r3, r3, #31
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	fa22 f303 	lsr.w	r3, r2, r3
 800ab16:	4a07      	ldr	r2, [pc, #28]	; (800ab34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab1a:	4a07      	ldr	r2, [pc, #28]	; (800ab38 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ab22:	681b      	ldr	r3, [r3, #0]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	08018cdc 	.word	0x08018cdc
 800ab34:	24000004 	.word	0x24000004
 800ab38:	24000000 	.word	0x24000000

0800ab3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ab40:	f7ff ffcc 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 800ab44:	4602      	mov	r2, r0
 800ab46:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	091b      	lsrs	r3, r3, #4
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	4904      	ldr	r1, [pc, #16]	; (800ab64 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab52:	5ccb      	ldrb	r3, [r1, r3]
 800ab54:	f003 031f 	and.w	r3, r3, #31
 800ab58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	58024400 	.word	0x58024400
 800ab64:	08018cdc 	.word	0x08018cdc

0800ab68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ab6c:	f7ff ffb6 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 800ab70:	4602      	mov	r2, r0
 800ab72:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	4904      	ldr	r1, [pc, #16]	; (800ab90 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab7e:	5ccb      	ldrb	r3, [r1, r3]
 800ab80:	f003 031f 	and.w	r3, r3, #31
 800ab84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	58024400 	.word	0x58024400
 800ab90:	08018cdc 	.word	0x08018cdc

0800ab94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab98:	b0c6      	sub	sp, #280	; 0x118
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aba0:	2300      	movs	r3, #0
 800aba2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aba6:	2300      	movs	r3, #0
 800aba8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800abac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800abb8:	2500      	movs	r5, #0
 800abba:	ea54 0305 	orrs.w	r3, r4, r5
 800abbe:	d049      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800abc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abca:	d02f      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800abcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abd0:	d828      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800abd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abd6:	d01a      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800abd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abdc:	d822      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800abe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abe6:	d007      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800abe8:	e01c      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abea:	4bab      	ldr	r3, [pc, #684]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	4aaa      	ldr	r2, [pc, #680]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800abf6:	e01a      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfc:	3308      	adds	r3, #8
 800abfe:	2102      	movs	r1, #2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f002 fa49 	bl	800d098 <RCCEx_PLL2_Config>
 800ac06:	4603      	mov	r3, r0
 800ac08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ac0c:	e00f      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac12:	3328      	adds	r3, #40	; 0x28
 800ac14:	2102      	movs	r1, #2
 800ac16:	4618      	mov	r0, r3
 800ac18:	f002 faf0 	bl	800d1fc <RCCEx_PLL3_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ac22:	e004      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac2a:	e000      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ac2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10a      	bne.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ac36:	4b98      	ldr	r3, [pc, #608]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ac3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac44:	4a94      	ldr	r2, [pc, #592]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac46:	430b      	orrs	r3, r1
 800ac48:	6513      	str	r3, [r2, #80]	; 0x50
 800ac4a:	e003      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ac60:	f04f 0900 	mov.w	r9, #0
 800ac64:	ea58 0309 	orrs.w	r3, r8, r9
 800ac68:	d047      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ac6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac70:	2b04      	cmp	r3, #4
 800ac72:	d82a      	bhi.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ac74:	a201      	add	r2, pc, #4	; (adr r2, 800ac7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ac76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7a:	bf00      	nop
 800ac7c:	0800ac91 	.word	0x0800ac91
 800ac80:	0800ac9f 	.word	0x0800ac9f
 800ac84:	0800acb5 	.word	0x0800acb5
 800ac88:	0800acd3 	.word	0x0800acd3
 800ac8c:	0800acd3 	.word	0x0800acd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac90:	4b81      	ldr	r3, [pc, #516]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac94:	4a80      	ldr	r2, [pc, #512]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac9c:	e01a      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca2:	3308      	adds	r3, #8
 800aca4:	2100      	movs	r1, #0
 800aca6:	4618      	mov	r0, r3
 800aca8:	f002 f9f6 	bl	800d098 <RCCEx_PLL2_Config>
 800acac:	4603      	mov	r3, r0
 800acae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acb2:	e00f      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb8:	3328      	adds	r3, #40	; 0x28
 800acba:	2100      	movs	r1, #0
 800acbc:	4618      	mov	r0, r3
 800acbe:	f002 fa9d 	bl	800d1fc <RCCEx_PLL3_Config>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acc8:	e004      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acd0:	e000      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800acd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800acdc:	4b6e      	ldr	r3, [pc, #440]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace0:	f023 0107 	bic.w	r1, r3, #7
 800ace4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acea:	4a6b      	ldr	r2, [pc, #428]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acec:	430b      	orrs	r3, r1
 800acee:	6513      	str	r3, [r2, #80]	; 0x50
 800acf0:	e003      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acf6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800ad06:	f04f 0b00 	mov.w	fp, #0
 800ad0a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ad0e:	d05b      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad18:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ad1c:	d03b      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ad1e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ad22:	d834      	bhi.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ad24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad28:	d037      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ad2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad2e:	d82e      	bhi.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ad30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad34:	d033      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ad36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad3a:	d828      	bhi.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ad3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad40:	d01a      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ad42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad46:	d822      	bhi.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ad4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad50:	d007      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ad52:	e01c      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad54:	4b50      	ldr	r3, [pc, #320]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	4a4f      	ldr	r2, [pc, #316]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad60:	e01e      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad66:	3308      	adds	r3, #8
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f002 f994 	bl	800d098 <RCCEx_PLL2_Config>
 800ad70:	4603      	mov	r3, r0
 800ad72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad76:	e013      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7c:	3328      	adds	r3, #40	; 0x28
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f002 fa3b 	bl	800d1fc <RCCEx_PLL3_Config>
 800ad86:	4603      	mov	r3, r0
 800ad88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad8c:	e008      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad94:	e004      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ad96:	bf00      	nop
 800ad98:	e002      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ad9a:	bf00      	nop
 800ad9c:	e000      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ad9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ada0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10b      	bne.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ada8:	4b3b      	ldr	r3, [pc, #236]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adac:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800adb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800adb8:	4a37      	ldr	r2, [pc, #220]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adba:	430b      	orrs	r3, r1
 800adbc:	6593      	str	r3, [r2, #88]	; 0x58
 800adbe:	e003      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800adc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800add4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800add8:	2300      	movs	r3, #0
 800adda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800adde:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ade2:	460b      	mov	r3, r1
 800ade4:	4313      	orrs	r3, r2
 800ade6:	d05d      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ade8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adf0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800adf4:	d03b      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800adf6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800adfa:	d834      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800adfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae00:	d037      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ae02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae06:	d82e      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ae08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae0c:	d033      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ae0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae12:	d828      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ae14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae18:	d01a      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ae1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae1e:	d822      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ae24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae28:	d007      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ae2a:	e01c      	b.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae2c:	4b1a      	ldr	r3, [pc, #104]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	4a19      	ldr	r2, [pc, #100]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae38:	e01e      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3e:	3308      	adds	r3, #8
 800ae40:	2100      	movs	r1, #0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f002 f928 	bl	800d098 <RCCEx_PLL2_Config>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae4e:	e013      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae54:	3328      	adds	r3, #40	; 0x28
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 f9cf 	bl	800d1fc <RCCEx_PLL3_Config>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae64:	e008      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae6c:	e004      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ae6e:	bf00      	nop
 800ae70:	e002      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ae72:	bf00      	nop
 800ae74:	e000      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ae76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10d      	bne.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae80:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae90:	4a01      	ldr	r2, [pc, #4]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae92:	430b      	orrs	r3, r1
 800ae94:	6593      	str	r3, [r2, #88]	; 0x58
 800ae96:	e005      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ae98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aea0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aeb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aeba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d03a      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeca:	2b30      	cmp	r3, #48	; 0x30
 800aecc:	d01f      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800aece:	2b30      	cmp	r3, #48	; 0x30
 800aed0:	d819      	bhi.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	d00c      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d815      	bhi.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d019      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aede:	2b10      	cmp	r3, #16
 800aee0:	d111      	bne.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee2:	4baa      	ldr	r3, [pc, #680]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee6:	4aa9      	ldr	r2, [pc, #676]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aeee:	e011      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef4:	3308      	adds	r3, #8
 800aef6:	2102      	movs	r1, #2
 800aef8:	4618      	mov	r0, r3
 800aefa:	f002 f8cd 	bl	800d098 <RCCEx_PLL2_Config>
 800aefe:	4603      	mov	r3, r0
 800af00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800af04:	e006      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af0c:	e002      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800af0e:	bf00      	nop
 800af10:	e000      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800af12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10a      	bne.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800af1c:	4b9b      	ldr	r3, [pc, #620]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af20:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800af24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af2a:	4a98      	ldr	r2, [pc, #608]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af2c:	430b      	orrs	r3, r1
 800af2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af30:	e003      	b.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800af46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af4a:	2300      	movs	r3, #0
 800af4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800af54:	460b      	mov	r3, r1
 800af56:	4313      	orrs	r3, r2
 800af58:	d051      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800af5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af64:	d035      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800af66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af6a:	d82e      	bhi.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800af6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af70:	d031      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800af72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af76:	d828      	bhi.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800af78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af7c:	d01a      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800af7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af82:	d822      	bhi.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800af84:	2b00      	cmp	r3, #0
 800af86:	d003      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800af88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af8c:	d007      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800af8e:	e01c      	b.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af90:	4b7e      	ldr	r3, [pc, #504]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	4a7d      	ldr	r2, [pc, #500]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af9c:	e01c      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa2:	3308      	adds	r3, #8
 800afa4:	2100      	movs	r1, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f002 f876 	bl	800d098 <RCCEx_PLL2_Config>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800afb2:	e011      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb8:	3328      	adds	r3, #40	; 0x28
 800afba:	2100      	movs	r1, #0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f002 f91d 	bl	800d1fc <RCCEx_PLL3_Config>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800afc8:	e006      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afd0:	e002      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800afd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10a      	bne.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800afe0:	4b6a      	ldr	r3, [pc, #424]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800afe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afee:	4a67      	ldr	r2, [pc, #412]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aff0:	430b      	orrs	r3, r1
 800aff2:	6513      	str	r3, [r2, #80]	; 0x50
 800aff4:	e003      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800affa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b00a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b00e:	2300      	movs	r3, #0
 800b010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b014:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b018:	460b      	mov	r3, r1
 800b01a:	4313      	orrs	r3, r2
 800b01c:	d053      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b028:	d033      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b02a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b02e:	d82c      	bhi.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b034:	d02f      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b03a:	d826      	bhi.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b03c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b040:	d02b      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b046:	d820      	bhi.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b04c:	d012      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b04e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b052:	d81a      	bhi.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b054:	2b00      	cmp	r3, #0
 800b056:	d022      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b05c:	d115      	bne.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b062:	3308      	adds	r3, #8
 800b064:	2101      	movs	r1, #1
 800b066:	4618      	mov	r0, r3
 800b068:	f002 f816 	bl	800d098 <RCCEx_PLL2_Config>
 800b06c:	4603      	mov	r3, r0
 800b06e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b072:	e015      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b078:	3328      	adds	r3, #40	; 0x28
 800b07a:	2101      	movs	r1, #1
 800b07c:	4618      	mov	r0, r3
 800b07e:	f002 f8bd 	bl	800d1fc <RCCEx_PLL3_Config>
 800b082:	4603      	mov	r3, r0
 800b084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b088:	e00a      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b090:	e006      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b092:	bf00      	nop
 800b094:	e004      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b096:	bf00      	nop
 800b098:	e002      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b09a:	bf00      	nop
 800b09c:	e000      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b0a8:	4b38      	ldr	r3, [pc, #224]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b6:	4a35      	ldr	r2, [pc, #212]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	6513      	str	r3, [r2, #80]	; 0x50
 800b0bc:	e003      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b0d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	d058      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0f2:	d033      	beq.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b0f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0f8:	d82c      	bhi.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0fe:	d02f      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b104:	d826      	bhi.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b10a:	d02b      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b10c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b110:	d820      	bhi.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b116:	d012      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b11c:	d81a      	bhi.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d022      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b126:	d115      	bne.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12c:	3308      	adds	r3, #8
 800b12e:	2101      	movs	r1, #1
 800b130:	4618      	mov	r0, r3
 800b132:	f001 ffb1 	bl	800d098 <RCCEx_PLL2_Config>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b13c:	e015      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b142:	3328      	adds	r3, #40	; 0x28
 800b144:	2101      	movs	r1, #1
 800b146:	4618      	mov	r0, r3
 800b148:	f002 f858 	bl	800d1fc <RCCEx_PLL3_Config>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b152:	e00a      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b15a:	e006      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b15c:	bf00      	nop
 800b15e:	e004      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b160:	bf00      	nop
 800b162:	e002      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b164:	bf00      	nop
 800b166:	e000      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b16a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10e      	bne.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b176:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b182:	4a02      	ldr	r2, [pc, #8]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b184:	430b      	orrs	r3, r1
 800b186:	6593      	str	r3, [r2, #88]	; 0x58
 800b188:	e006      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b18a:	bf00      	nop
 800b18c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b190:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b194:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b1a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b1ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	d037      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c2:	d00e      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b1c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c8:	d816      	bhi.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d018      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b1ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1d2:	d111      	bne.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d4:	4bc4      	ldr	r3, [pc, #784]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	4ac3      	ldr	r2, [pc, #780]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b1e0:	e00f      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f001 ff54 	bl	800d098 <RCCEx_PLL2_Config>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b1f6:	e004      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1fe:	e000      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b202:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10a      	bne.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b20a:	4bb7      	ldr	r3, [pc, #732]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b218:	4ab3      	ldr	r2, [pc, #716]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b21a:	430b      	orrs	r3, r1
 800b21c:	6513      	str	r3, [r2, #80]	; 0x50
 800b21e:	e003      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b220:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b224:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b238:	2300      	movs	r3, #0
 800b23a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b23e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b242:	460b      	mov	r3, r1
 800b244:	4313      	orrs	r3, r2
 800b246:	d039      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d81c      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b252:	a201      	add	r2, pc, #4	; (adr r2, 800b258 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b295 	.word	0x0800b295
 800b25c:	0800b269 	.word	0x0800b269
 800b260:	0800b277 	.word	0x0800b277
 800b264:	0800b295 	.word	0x0800b295
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b268:	4b9f      	ldr	r3, [pc, #636]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a9e      	ldr	r2, [pc, #632]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b26e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b274:	e00f      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27a:	3308      	adds	r3, #8
 800b27c:	2102      	movs	r1, #2
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 ff0a 	bl	800d098 <RCCEx_PLL2_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b28a:	e004      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b292:	e000      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b294:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b29e:	4b92      	ldr	r3, [pc, #584]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a2:	f023 0103 	bic.w	r1, r3, #3
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ac:	4a8e      	ldr	r2, [pc, #568]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2ae:	430b      	orrs	r3, r1
 800b2b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2b2:	e003      	b.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b2c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	f000 8099 	beq.w	800b410 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2de:	4b83      	ldr	r3, [pc, #524]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a82      	ldr	r2, [pc, #520]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b2e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2ea:	f7f8 fd67 	bl	8003dbc <HAL_GetTick>
 800b2ee:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2f2:	e00b      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2f4:	f7f8 fd62 	bl	8003dbc <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	2b64      	cmp	r3, #100	; 0x64
 800b302:	d903      	bls.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b30a:	e005      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b30c:	4b77      	ldr	r3, [pc, #476]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b314:	2b00      	cmp	r3, #0
 800b316:	d0ed      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b318:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d173      	bne.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b320:	4b71      	ldr	r3, [pc, #452]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b32c:	4053      	eors	r3, r2
 800b32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b332:	2b00      	cmp	r3, #0
 800b334:	d015      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b336:	4b6c      	ldr	r3, [pc, #432]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b33a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b33e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b342:	4b69      	ldr	r3, [pc, #420]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b346:	4a68      	ldr	r2, [pc, #416]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b34c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b34e:	4b66      	ldr	r3, [pc, #408]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	4a65      	ldr	r2, [pc, #404]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b358:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b35a:	4a63      	ldr	r2, [pc, #396]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b360:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b36e:	d118      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b370:	f7f8 fd24 	bl	8003dbc <HAL_GetTick>
 800b374:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b378:	e00d      	b.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b37a:	f7f8 fd1f 	bl	8003dbc <HAL_GetTick>
 800b37e:	4602      	mov	r2, r0
 800b380:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b384:	1ad2      	subs	r2, r2, r3
 800b386:	f241 3388 	movw	r3, #5000	; 0x1388
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d903      	bls.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b394:	e005      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b396:	4b54      	ldr	r3, [pc, #336]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0eb      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b3a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d129      	bne.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3ba:	d10e      	bne.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b3bc:	4b4a      	ldr	r3, [pc, #296]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3cc:	091a      	lsrs	r2, r3, #4
 800b3ce:	4b48      	ldr	r3, [pc, #288]	; (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	4a45      	ldr	r2, [pc, #276]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	6113      	str	r3, [r2, #16]
 800b3d8:	e005      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b3da:	4b43      	ldr	r3, [pc, #268]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	4a42      	ldr	r2, [pc, #264]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3e4:	6113      	str	r3, [r2, #16]
 800b3e6:	4b40      	ldr	r3, [pc, #256]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3f6:	4a3c      	ldr	r2, [pc, #240]	; (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6713      	str	r3, [r2, #112]	; 0x70
 800b3fc:	e008      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b402:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b406:	e003      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b408:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b40c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f002 0301 	and.w	r3, r2, #1
 800b41c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b420:	2300      	movs	r3, #0
 800b422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b426:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b42a:	460b      	mov	r3, r1
 800b42c:	4313      	orrs	r3, r2
 800b42e:	f000 808f 	beq.w	800b550 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b438:	2b28      	cmp	r3, #40	; 0x28
 800b43a:	d871      	bhi.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b43c:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b442:	bf00      	nop
 800b444:	0800b529 	.word	0x0800b529
 800b448:	0800b521 	.word	0x0800b521
 800b44c:	0800b521 	.word	0x0800b521
 800b450:	0800b521 	.word	0x0800b521
 800b454:	0800b521 	.word	0x0800b521
 800b458:	0800b521 	.word	0x0800b521
 800b45c:	0800b521 	.word	0x0800b521
 800b460:	0800b521 	.word	0x0800b521
 800b464:	0800b4f5 	.word	0x0800b4f5
 800b468:	0800b521 	.word	0x0800b521
 800b46c:	0800b521 	.word	0x0800b521
 800b470:	0800b521 	.word	0x0800b521
 800b474:	0800b521 	.word	0x0800b521
 800b478:	0800b521 	.word	0x0800b521
 800b47c:	0800b521 	.word	0x0800b521
 800b480:	0800b521 	.word	0x0800b521
 800b484:	0800b50b 	.word	0x0800b50b
 800b488:	0800b521 	.word	0x0800b521
 800b48c:	0800b521 	.word	0x0800b521
 800b490:	0800b521 	.word	0x0800b521
 800b494:	0800b521 	.word	0x0800b521
 800b498:	0800b521 	.word	0x0800b521
 800b49c:	0800b521 	.word	0x0800b521
 800b4a0:	0800b521 	.word	0x0800b521
 800b4a4:	0800b529 	.word	0x0800b529
 800b4a8:	0800b521 	.word	0x0800b521
 800b4ac:	0800b521 	.word	0x0800b521
 800b4b0:	0800b521 	.word	0x0800b521
 800b4b4:	0800b521 	.word	0x0800b521
 800b4b8:	0800b521 	.word	0x0800b521
 800b4bc:	0800b521 	.word	0x0800b521
 800b4c0:	0800b521 	.word	0x0800b521
 800b4c4:	0800b529 	.word	0x0800b529
 800b4c8:	0800b521 	.word	0x0800b521
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b521 	.word	0x0800b521
 800b4d4:	0800b521 	.word	0x0800b521
 800b4d8:	0800b521 	.word	0x0800b521
 800b4dc:	0800b521 	.word	0x0800b521
 800b4e0:	0800b521 	.word	0x0800b521
 800b4e4:	0800b529 	.word	0x0800b529
 800b4e8:	58024400 	.word	0x58024400
 800b4ec:	58024800 	.word	0x58024800
 800b4f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f001 fdcb 	bl	800d098 <RCCEx_PLL2_Config>
 800b502:	4603      	mov	r3, r0
 800b504:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b508:	e00f      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50e:	3328      	adds	r3, #40	; 0x28
 800b510:	2101      	movs	r1, #1
 800b512:	4618      	mov	r0, r3
 800b514:	f001 fe72 	bl	800d1fc <RCCEx_PLL3_Config>
 800b518:	4603      	mov	r3, r0
 800b51a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b51e:	e004      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b526:	e000      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b52a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10a      	bne.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b532:	4bbf      	ldr	r3, [pc, #764]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b536:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b540:	4abb      	ldr	r2, [pc, #748]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b542:	430b      	orrs	r3, r1
 800b544:	6553      	str	r3, [r2, #84]	; 0x54
 800b546:	e003      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b54c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f002 0302 	and.w	r3, r2, #2
 800b55c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b560:	2300      	movs	r3, #0
 800b562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b566:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b56a:	460b      	mov	r3, r1
 800b56c:	4313      	orrs	r3, r2
 800b56e:	d041      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b576:	2b05      	cmp	r3, #5
 800b578:	d824      	bhi.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b57a:	a201      	add	r2, pc, #4	; (adr r2, 800b580 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b580:	0800b5cd 	.word	0x0800b5cd
 800b584:	0800b599 	.word	0x0800b599
 800b588:	0800b5af 	.word	0x0800b5af
 800b58c:	0800b5cd 	.word	0x0800b5cd
 800b590:	0800b5cd 	.word	0x0800b5cd
 800b594:	0800b5cd 	.word	0x0800b5cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59c:	3308      	adds	r3, #8
 800b59e:	2101      	movs	r1, #1
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f001 fd79 	bl	800d098 <RCCEx_PLL2_Config>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b5ac:	e00f      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b2:	3328      	adds	r3, #40	; 0x28
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f001 fe20 	bl	800d1fc <RCCEx_PLL3_Config>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b5c2:	e004      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5ca:	e000      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10a      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b5d6:	4b96      	ldr	r3, [pc, #600]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5da:	f023 0107 	bic.w	r1, r3, #7
 800b5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5e4:	4a92      	ldr	r2, [pc, #584]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	6553      	str	r3, [r2, #84]	; 0x54
 800b5ea:	e003      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f002 0304 	and.w	r3, r2, #4
 800b600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b604:	2300      	movs	r3, #0
 800b606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b60a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b60e:	460b      	mov	r3, r1
 800b610:	4313      	orrs	r3, r2
 800b612:	d044      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b61c:	2b05      	cmp	r3, #5
 800b61e:	d825      	bhi.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b620:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b626:	bf00      	nop
 800b628:	0800b675 	.word	0x0800b675
 800b62c:	0800b641 	.word	0x0800b641
 800b630:	0800b657 	.word	0x0800b657
 800b634:	0800b675 	.word	0x0800b675
 800b638:	0800b675 	.word	0x0800b675
 800b63c:	0800b675 	.word	0x0800b675
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b644:	3308      	adds	r3, #8
 800b646:	2101      	movs	r1, #1
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 fd25 	bl	800d098 <RCCEx_PLL2_Config>
 800b64e:	4603      	mov	r3, r0
 800b650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b654:	e00f      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65a:	3328      	adds	r3, #40	; 0x28
 800b65c:	2101      	movs	r1, #1
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 fdcc 	bl	800d1fc <RCCEx_PLL3_Config>
 800b664:	4603      	mov	r3, r0
 800b666:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b66a:	e004      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b672:	e000      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b674:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b676:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10b      	bne.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b67e:	4b6c      	ldr	r3, [pc, #432]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b682:	f023 0107 	bic.w	r1, r3, #7
 800b686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b68e:	4a68      	ldr	r2, [pc, #416]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b690:	430b      	orrs	r3, r1
 800b692:	6593      	str	r3, [r2, #88]	; 0x58
 800b694:	e003      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b696:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b69a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f002 0320 	and.w	r3, r2, #32
 800b6aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b6b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	d055      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6ca:	d033      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b6cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6d0:	d82c      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d6:	d02f      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6dc:	d826      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b6de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6e2:	d02b      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b6e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6e8:	d820      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b6ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ee:	d012      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6f4:	d81a      	bhi.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d022      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b6fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6fe:	d115      	bne.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b704:	3308      	adds	r3, #8
 800b706:	2100      	movs	r1, #0
 800b708:	4618      	mov	r0, r3
 800b70a:	f001 fcc5 	bl	800d098 <RCCEx_PLL2_Config>
 800b70e:	4603      	mov	r3, r0
 800b710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b714:	e015      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71a:	3328      	adds	r3, #40	; 0x28
 800b71c:	2102      	movs	r1, #2
 800b71e:	4618      	mov	r0, r3
 800b720:	f001 fd6c 	bl	800d1fc <RCCEx_PLL3_Config>
 800b724:	4603      	mov	r3, r0
 800b726:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b72a:	e00a      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b732:	e006      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b734:	bf00      	nop
 800b736:	e004      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b738:	bf00      	nop
 800b73a:	e002      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b73c:	bf00      	nop
 800b73e:	e000      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b740:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b742:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10b      	bne.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b74a:	4b39      	ldr	r3, [pc, #228]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b74e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b75a:	4a35      	ldr	r2, [pc, #212]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b75c:	430b      	orrs	r3, r1
 800b75e:	6553      	str	r3, [r2, #84]	; 0x54
 800b760:	e003      	b.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b762:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b766:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b776:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b77a:	2300      	movs	r3, #0
 800b77c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b780:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b784:	460b      	mov	r3, r1
 800b786:	4313      	orrs	r3, r2
 800b788:	d058      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b792:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b796:	d033      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b798:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b79c:	d82c      	bhi.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b79e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a2:	d02f      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b7a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a8:	d826      	bhi.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b7aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7ae:	d02b      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b7b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7b4:	d820      	bhi.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b7b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ba:	d012      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b7bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7c0:	d81a      	bhi.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d022      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b7c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ca:	d115      	bne.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d0:	3308      	adds	r3, #8
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f001 fc5f 	bl	800d098 <RCCEx_PLL2_Config>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b7e0:	e015      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e6:	3328      	adds	r3, #40	; 0x28
 800b7e8:	2102      	movs	r1, #2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f001 fd06 	bl	800d1fc <RCCEx_PLL3_Config>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b7f6:	e00a      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7fe:	e006      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b800:	bf00      	nop
 800b802:	e004      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b804:	bf00      	nop
 800b806:	e002      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b808:	bf00      	nop
 800b80a:	e000      	b.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b80e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10e      	bne.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b816:	4b06      	ldr	r3, [pc, #24]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b81a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b826:	4a02      	ldr	r2, [pc, #8]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b828:	430b      	orrs	r3, r1
 800b82a:	6593      	str	r3, [r2, #88]	; 0x58
 800b82c:	e006      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b82e:	bf00      	nop
 800b830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b838:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b84c:	2300      	movs	r3, #0
 800b84e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b852:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b856:	460b      	mov	r3, r1
 800b858:	4313      	orrs	r3, r2
 800b85a:	d055      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b864:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b868:	d033      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b86a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b86e:	d82c      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b874:	d02f      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b87a:	d826      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b87c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b880:	d02b      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b882:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b886:	d820      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b88c:	d012      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b88e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b892:	d81a      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b894:	2b00      	cmp	r3, #0
 800b896:	d022      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b89c:	d115      	bne.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f001 fbf6 	bl	800d098 <RCCEx_PLL2_Config>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b8b2:	e015      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b8:	3328      	adds	r3, #40	; 0x28
 800b8ba:	2102      	movs	r1, #2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 fc9d 	bl	800d1fc <RCCEx_PLL3_Config>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b8c8:	e00a      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8d0:	e006      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b8d2:	bf00      	nop
 800b8d4:	e004      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b8d6:	bf00      	nop
 800b8d8:	e002      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b8da:	bf00      	nop
 800b8dc:	e000      	b.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b8de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10b      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b8e8:	4ba0      	ldr	r3, [pc, #640]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8f8:	4a9c      	ldr	r2, [pc, #624]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8fa:	430b      	orrs	r3, r1
 800b8fc:	6593      	str	r3, [r2, #88]	; 0x58
 800b8fe:	e003      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b900:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b904:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f002 0308 	and.w	r3, r2, #8
 800b914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b918:	2300      	movs	r3, #0
 800b91a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b91e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b922:	460b      	mov	r3, r1
 800b924:	4313      	orrs	r3, r2
 800b926:	d01e      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b934:	d10c      	bne.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93a:	3328      	adds	r3, #40	; 0x28
 800b93c:	2102      	movs	r1, #2
 800b93e:	4618      	mov	r0, r3
 800b940:	f001 fc5c 	bl	800d1fc <RCCEx_PLL3_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b950:	4b86      	ldr	r3, [pc, #536]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b954:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b960:	4a82      	ldr	r2, [pc, #520]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b962:	430b      	orrs	r3, r1
 800b964:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f002 0310 	and.w	r3, r2, #16
 800b972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b976:	2300      	movs	r3, #0
 800b978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b97c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b980:	460b      	mov	r3, r1
 800b982:	4313      	orrs	r3, r2
 800b984:	d01e      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b992:	d10c      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b998:	3328      	adds	r3, #40	; 0x28
 800b99a:	2102      	movs	r1, #2
 800b99c:	4618      	mov	r0, r3
 800b99e:	f001 fc2d 	bl	800d1fc <RCCEx_PLL3_Config>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b9ae:	4b6f      	ldr	r3, [pc, #444]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9be:	4a6b      	ldr	r2, [pc, #428]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9c0:	430b      	orrs	r3, r1
 800b9c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b9d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	d03e      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b9e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ec:	d022      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b9ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9f2:	d81b      	bhi.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9fc:	d00b      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b9fe:	e015      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba04:	3308      	adds	r3, #8
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 fb45 	bl	800d098 <RCCEx_PLL2_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ba14:	e00f      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1a:	3328      	adds	r3, #40	; 0x28
 800ba1c:	2102      	movs	r1, #2
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f001 fbec 	bl	800d1fc <RCCEx_PLL3_Config>
 800ba24:	4603      	mov	r3, r0
 800ba26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ba2a:	e004      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba32:	e000      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ba34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10b      	bne.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba3e:	4b4b      	ldr	r3, [pc, #300]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ba46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba4e:	4a47      	ldr	r2, [pc, #284]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba50:	430b      	orrs	r3, r1
 800ba52:	6593      	str	r3, [r2, #88]	; 0x58
 800ba54:	e003      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ba6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	677b      	str	r3, [r7, #116]	; 0x74
 800ba70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ba74:	460b      	mov	r3, r1
 800ba76:	4313      	orrs	r3, r2
 800ba78:	d03b      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ba7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba86:	d01f      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ba88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba8c:	d818      	bhi.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ba8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba92:	d003      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ba94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba98:	d007      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ba9a:	e011      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba9c:	4b33      	ldr	r3, [pc, #204]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa0:	4a32      	ldr	r2, [pc, #200]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800baa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800baa8:	e00f      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baae:	3328      	adds	r3, #40	; 0x28
 800bab0:	2101      	movs	r1, #1
 800bab2:	4618      	mov	r0, r3
 800bab4:	f001 fba2 	bl	800d1fc <RCCEx_PLL3_Config>
 800bab8:	4603      	mov	r3, r0
 800baba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800babe:	e004      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bac6:	e000      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10b      	bne.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bad2:	4b26      	ldr	r3, [pc, #152]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bae2:	4a22      	ldr	r2, [pc, #136]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bae4:	430b      	orrs	r3, r1
 800bae6:	6553      	str	r3, [r2, #84]	; 0x54
 800bae8:	e003      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800baf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bafe:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb00:	2300      	movs	r3, #0
 800bb02:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	d034      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d003      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bb18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1c:	d007      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bb1e:	e011      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb20:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb24:	4a11      	ldr	r2, [pc, #68]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bb2c:	e00e      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb32:	3308      	adds	r3, #8
 800bb34:	2102      	movs	r1, #2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f001 faae 	bl	800d098 <RCCEx_PLL2_Config>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bb42:	e003      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10d      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb54:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb62:	4a02      	ldr	r2, [pc, #8]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb64:	430b      	orrs	r3, r1
 800bb66:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb68:	e006      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bb6a:	bf00      	nop
 800bb6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bb84:	663b      	str	r3, [r7, #96]	; 0x60
 800bb86:	2300      	movs	r3, #0
 800bb88:	667b      	str	r3, [r7, #100]	; 0x64
 800bb8a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4313      	orrs	r3, r2
 800bb92:	d00c      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb98:	3328      	adds	r3, #40	; 0x28
 800bb9a:	2102      	movs	r1, #2
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f001 fb2d 	bl	800d1fc <RCCEx_PLL3_Config>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bbae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bbba:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbc0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	d036      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbd4:	d018      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bbd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbda:	d811      	bhi.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bbdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe0:	d014      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bbe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe6:	d80b      	bhi.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d011      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bbec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbf0:	d106      	bne.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbf2:	4bb7      	ldr	r3, [pc, #732]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	4ab6      	ldr	r2, [pc, #728]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bbfe:	e008      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc06:	e004      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bc08:	bf00      	nop
 800bc0a:	e002      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bc0c:	bf00      	nop
 800bc0e:	e000      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bc10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc1a:	4bad      	ldr	r3, [pc, #692]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc28:	4aa9      	ldr	r2, [pc, #676]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	6553      	str	r3, [r2, #84]	; 0x54
 800bc2e:	e003      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bc38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bc44:	653b      	str	r3, [r7, #80]	; 0x50
 800bc46:	2300      	movs	r3, #0
 800bc48:	657b      	str	r3, [r7, #84]	; 0x54
 800bc4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4313      	orrs	r3, r2
 800bc52:	d009      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc54:	4b9e      	ldr	r3, [pc, #632]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc62:	4a9b      	ldr	r2, [pc, #620]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc64:	430b      	orrs	r3, r1
 800bc66:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bc74:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc76:	2300      	movs	r3, #0
 800bc78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc7a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4313      	orrs	r3, r2
 800bc82:	d009      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc84:	4b92      	ldr	r3, [pc, #584]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc88:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc92:	4a8f      	ldr	r2, [pc, #572]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bca4:	643b      	str	r3, [r7, #64]	; 0x40
 800bca6:	2300      	movs	r3, #0
 800bca8:	647b      	str	r3, [r7, #68]	; 0x44
 800bcaa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	d00e      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bcb4:	4b86      	ldr	r3, [pc, #536]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	4a85      	ldr	r2, [pc, #532]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcbe:	6113      	str	r3, [r2, #16]
 800bcc0:	4b83      	ldr	r3, [pc, #524]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcc2:	6919      	ldr	r1, [r3, #16]
 800bcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bccc:	4a80      	ldr	r2, [pc, #512]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcce:	430b      	orrs	r3, r1
 800bcd0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bcde:	63bb      	str	r3, [r7, #56]	; 0x38
 800bce0:	2300      	movs	r3, #0
 800bce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bce8:	460b      	mov	r3, r1
 800bcea:	4313      	orrs	r3, r2
 800bcec:	d009      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bcee:	4b78      	ldr	r3, [pc, #480]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcf2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfc:	4a74      	ldr	r2, [pc, #464]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcfe:	430b      	orrs	r3, r1
 800bd00:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bd0e:	633b      	str	r3, [r7, #48]	; 0x30
 800bd10:	2300      	movs	r3, #0
 800bd12:	637b      	str	r3, [r7, #52]	; 0x34
 800bd14:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	d00a      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bd1e:	4b6c      	ldr	r3, [pc, #432]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd22:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2e:	4a68      	ldr	r2, [pc, #416]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd30:	430b      	orrs	r3, r1
 800bd32:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	62b9      	str	r1, [r7, #40]	; 0x28
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	d011      	beq.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd54:	3308      	adds	r3, #8
 800bd56:	2100      	movs	r1, #0
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f001 f99d 	bl	800d098 <RCCEx_PLL2_Config>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	6239      	str	r1, [r7, #32]
 800bd80:	f003 0302 	and.w	r3, r3, #2
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24
 800bd86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	d011      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd94:	3308      	adds	r3, #8
 800bd96:	2101      	movs	r1, #1
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 f97d 	bl	800d098 <RCCEx_PLL2_Config>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bda4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	61b9      	str	r1, [r7, #24]
 800bdc0:	f003 0304 	and.w	r3, r3, #4
 800bdc4:	61fb      	str	r3, [r7, #28]
 800bdc6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	d011      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	2102      	movs	r1, #2
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 f95d 	bl	800d098 <RCCEx_PLL2_Config>
 800bdde:	4603      	mov	r3, r0
 800bde0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bde4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d003      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bdf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	6139      	str	r1, [r7, #16]
 800be00:	f003 0308 	and.w	r3, r3, #8
 800be04:	617b      	str	r3, [r7, #20]
 800be06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800be0a:	460b      	mov	r3, r1
 800be0c:	4313      	orrs	r3, r2
 800be0e:	d011      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be14:	3328      	adds	r3, #40	; 0x28
 800be16:	2100      	movs	r1, #0
 800be18:	4618      	mov	r0, r3
 800be1a:	f001 f9ef 	bl	800d1fc <RCCEx_PLL3_Config>
 800be1e:	4603      	mov	r3, r0
 800be20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800be24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800be34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	2100      	movs	r1, #0
 800be3e:	60b9      	str	r1, [r7, #8]
 800be40:	f003 0310 	and.w	r3, r3, #16
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800be4a:	460b      	mov	r3, r1
 800be4c:	4313      	orrs	r3, r2
 800be4e:	d011      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be54:	3328      	adds	r3, #40	; 0x28
 800be56:	2101      	movs	r1, #1
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 f9cf 	bl	800d1fc <RCCEx_PLL3_Config>
 800be5e:	4603      	mov	r3, r0
 800be60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800be74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	2100      	movs	r1, #0
 800be7e:	6039      	str	r1, [r7, #0]
 800be80:	f003 0320 	and.w	r3, r3, #32
 800be84:	607b      	str	r3, [r7, #4]
 800be86:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be8a:	460b      	mov	r3, r1
 800be8c:	4313      	orrs	r3, r2
 800be8e:	d011      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be94:	3328      	adds	r3, #40	; 0x28
 800be96:	2102      	movs	r1, #2
 800be98:	4618      	mov	r0, r3
 800be9a:	f001 f9af 	bl	800d1fc <RCCEx_PLL3_Config>
 800be9e:	4603      	mov	r3, r0
 800bea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d003      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800beb4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	e000      	b.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bec8:	46bd      	mov	sp, r7
 800beca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bece:	bf00      	nop
 800bed0:	58024400 	.word	0x58024400

0800bed4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b090      	sub	sp, #64	; 0x40
 800bed8:	af00      	add	r7, sp, #0
 800beda:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bede:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bee2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bee6:	430b      	orrs	r3, r1
 800bee8:	f040 8094 	bne.w	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800beec:	4b9b      	ldr	r3, [pc, #620]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800beee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bef0:	f003 0307 	and.w	r3, r3, #7
 800bef4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	2b04      	cmp	r3, #4
 800befa:	f200 8087 	bhi.w	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800befe:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf04:	0800bf19 	.word	0x0800bf19
 800bf08:	0800bf41 	.word	0x0800bf41
 800bf0c:	0800bf69 	.word	0x0800bf69
 800bf10:	0800c005 	.word	0x0800c005
 800bf14:	0800bf91 	.word	0x0800bf91
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf18:	4b90      	ldr	r3, [pc, #576]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf24:	d108      	bne.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 ff62 	bl	800cdf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf34:	f000 bc93 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf3c:	f000 bc8f 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf40:	4b86      	ldr	r3, [pc, #536]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf4c:	d108      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf4e:	f107 0318 	add.w	r3, r7, #24
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 fca6 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf5c:	f000 bc7f 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf64:	f000 bc7b 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf68:	4b7c      	ldr	r3, [pc, #496]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf74:	d108      	bne.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf76:	f107 030c 	add.w	r3, r7, #12
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 fde6 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf84:	f000 bc6b 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf8c:	f000 bc67 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf90:	4b72      	ldr	r3, [pc, #456]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf9a:	4b70      	ldr	r3, [pc, #448]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0304 	and.w	r3, r3, #4
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d10c      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfac:	4b6b      	ldr	r3, [pc, #428]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	08db      	lsrs	r3, r3, #3
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	4a6a      	ldr	r2, [pc, #424]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bfb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfbe:	e01f      	b.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfc0:	4b66      	ldr	r3, [pc, #408]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfcc:	d106      	bne.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfd4:	d102      	bne.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfd6:	4b63      	ldr	r3, [pc, #396]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfda:	e011      	b.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfdc:	4b5f      	ldr	r3, [pc, #380]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfe8:	d106      	bne.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bff0:	d102      	bne.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bff2:	4b5d      	ldr	r3, [pc, #372]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff6:	e003      	b.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bffc:	f000 bc2f 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c000:	f000 bc2d 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c004:	4b59      	ldr	r3, [pc, #356]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c008:	f000 bc29 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c010:	f000 bc25 	b.w	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c014:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c018:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c01c:	430b      	orrs	r3, r1
 800c01e:	f040 80a7 	bne.w	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c022:	4b4e      	ldr	r3, [pc, #312]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c026:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c02a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c032:	d054      	beq.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c03a:	f200 808b 	bhi.w	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c044:	f000 8083 	beq.w	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c04e:	f200 8081 	bhi.w	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c058:	d02f      	beq.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c060:	d878      	bhi.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	2b00      	cmp	r3, #0
 800c066:	d004      	beq.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c06e:	d012      	beq.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c070:	e070      	b.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c072:	4b3a      	ldr	r3, [pc, #232]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c07a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c07e:	d107      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c084:	4618      	mov	r0, r3
 800c086:	f000 feb5 	bl	800cdf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08e:	e3e6      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c094:	e3e3      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c096:	4b31      	ldr	r3, [pc, #196]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c09e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0a2:	d107      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0a4:	f107 0318 	add.w	r3, r7, #24
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 fbfb 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b2:	e3d4      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b8:	e3d1      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0ba:	4b28      	ldr	r3, [pc, #160]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c6:	d107      	bne.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0c8:	f107 030c 	add.w	r3, r7, #12
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fd3d 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0d6:	e3c2      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0dc:	e3bf      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0de:	4b1f      	ldr	r3, [pc, #124]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0e8:	4b1c      	ldr	r3, [pc, #112]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0304 	and.w	r3, r3, #4
 800c0f0:	2b04      	cmp	r3, #4
 800c0f2:	d10c      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d109      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0fa:	4b18      	ldr	r3, [pc, #96]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	08db      	lsrs	r3, r3, #3
 800c100:	f003 0303 	and.w	r3, r3, #3
 800c104:	4a16      	ldr	r2, [pc, #88]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c106:	fa22 f303 	lsr.w	r3, r2, r3
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c10c:	e01e      	b.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c11a:	d106      	bne.n	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c122:	d102      	bne.n	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c124:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c128:	e010      	b.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c12a:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c136:	d106      	bne.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c13e:	d102      	bne.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c140:	4b09      	ldr	r3, [pc, #36]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c142:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c144:	e002      	b.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c14a:	e388      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c14c:	e387      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c14e:	4b07      	ldr	r3, [pc, #28]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c152:	e384      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c158:	e381      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c15a:	bf00      	nop
 800c15c:	58024400 	.word	0x58024400
 800c160:	03d09000 	.word	0x03d09000
 800c164:	003d0900 	.word	0x003d0900
 800c168:	02faf080 	.word	0x02faf080
 800c16c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c174:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c178:	430b      	orrs	r3, r1
 800c17a:	f040 809c 	bne.w	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c17e:	4b9e      	ldr	r3, [pc, #632]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c182:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c186:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c18e:	d054      	beq.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c196:	f200 808b 	bhi.w	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1a0:	f000 8083 	beq.w	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1aa:	f200 8081 	bhi.w	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1b4:	d02f      	beq.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1bc:	d878      	bhi.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d004      	beq.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1ca:	d012      	beq.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c1cc:	e070      	b.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1ce:	4b8a      	ldr	r3, [pc, #552]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1da:	d107      	bne.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 fe07 	bl	800cdf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ea:	e338      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f0:	e335      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1f2:	4b81      	ldr	r3, [pc, #516]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1fe:	d107      	bne.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c200:	f107 0318 	add.w	r3, r7, #24
 800c204:	4618      	mov	r0, r3
 800c206:	f000 fb4d 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c20e:	e326      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c214:	e323      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c216:	4b78      	ldr	r3, [pc, #480]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c222:	d107      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c224:	f107 030c 	add.w	r3, r7, #12
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fc8f 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c232:	e314      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c238:	e311      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c23a:	4b6f      	ldr	r3, [pc, #444]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c23e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c242:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c244:	4b6c      	ldr	r3, [pc, #432]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0304 	and.w	r3, r3, #4
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d10c      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	2b00      	cmp	r3, #0
 800c254:	d109      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c256:	4b68      	ldr	r3, [pc, #416]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	08db      	lsrs	r3, r3, #3
 800c25c:	f003 0303 	and.w	r3, r3, #3
 800c260:	4a66      	ldr	r2, [pc, #408]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c262:	fa22 f303 	lsr.w	r3, r2, r3
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c268:	e01e      	b.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c26a:	4b63      	ldr	r3, [pc, #396]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c276:	d106      	bne.n	800c286 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c27e:	d102      	bne.n	800c286 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c280:	4b5f      	ldr	r3, [pc, #380]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c282:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c284:	e010      	b.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c286:	4b5c      	ldr	r3, [pc, #368]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c28e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c292:	d106      	bne.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c29a:	d102      	bne.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c29c:	4b59      	ldr	r3, [pc, #356]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a0:	e002      	b.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2a6:	e2da      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2a8:	e2d9      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2aa:	4b57      	ldr	r3, [pc, #348]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ae:	e2d6      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b4:	e2d3      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	f040 80a7 	bne.w	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c2c4:	4b4c      	ldr	r3, [pc, #304]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c2cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2d4:	d055      	beq.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2dc:	f200 8096 	bhi.w	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2e6:	f000 8084 	beq.w	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2f0:	f200 808c 	bhi.w	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2fa:	d030      	beq.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c302:	f200 8083 	bhi.w	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d004      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c312:	d012      	beq.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c314:	e07a      	b.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c316:	4b38      	ldr	r3, [pc, #224]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c31e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c322:	d107      	bne.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 fd63 	bl	800cdf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c332:	e294      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c334:	2300      	movs	r3, #0
 800c336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c338:	e291      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c33a:	4b2f      	ldr	r3, [pc, #188]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c346:	d107      	bne.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c348:	f107 0318 	add.w	r3, r7, #24
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 faa9 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c356:	e282      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c35c:	e27f      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c35e:	4b26      	ldr	r3, [pc, #152]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36a:	d107      	bne.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c36c:	f107 030c 	add.w	r3, r7, #12
 800c370:	4618      	mov	r0, r3
 800c372:	f000 fbeb 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37a:	e270      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c380:	e26d      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c382:	4b1d      	ldr	r3, [pc, #116]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c38a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c38c:	4b1a      	ldr	r3, [pc, #104]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 0304 	and.w	r3, r3, #4
 800c394:	2b04      	cmp	r3, #4
 800c396:	d10c      	bne.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d109      	bne.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c39e:	4b16      	ldr	r3, [pc, #88]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	08db      	lsrs	r3, r3, #3
 800c3a4:	f003 0303 	and.w	r3, r3, #3
 800c3a8:	4a14      	ldr	r2, [pc, #80]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3b0:	e01e      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3b2:	4b11      	ldr	r3, [pc, #68]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3be:	d106      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3c6:	d102      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3c8:	4b0d      	ldr	r3, [pc, #52]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3cc:	e010      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3ce:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3da:	d106      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3e2:	d102      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3e4:	4b07      	ldr	r3, [pc, #28]	; (800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3e8:	e002      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3ee:	e236      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3f0:	e235      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3f2:	4b05      	ldr	r3, [pc, #20]	; (800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f6:	e232      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3f8:	58024400 	.word	0x58024400
 800c3fc:	03d09000 	.word	0x03d09000
 800c400:	003d0900 	.word	0x003d0900
 800c404:	02faf080 	.word	0x02faf080
 800c408:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c410:	e225      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c416:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c41a:	430b      	orrs	r3, r1
 800c41c:	f040 8085 	bne.w	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c420:	4b9c      	ldr	r3, [pc, #624]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c424:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c428:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c430:	d06b      	beq.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c438:	d874      	bhi.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c440:	d056      	beq.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c448:	d86c      	bhi.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c450:	d03b      	beq.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c458:	d864      	bhi.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c460:	d021      	beq.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c468:	d85c      	bhi.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c476:	d004      	beq.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c478:	e054      	b.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c47a:	f7fe fb5f 	bl	800ab3c <HAL_RCC_GetPCLK1Freq>
 800c47e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c480:	e1ed      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c482:	4b84      	ldr	r3, [pc, #528]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c48a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c48e:	d107      	bne.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c490:	f107 0318 	add.w	r3, r7, #24
 800c494:	4618      	mov	r0, r3
 800c496:	f000 fa05 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c49e:	e1de      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a4:	e1db      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4a6:	4b7b      	ldr	r3, [pc, #492]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4b2:	d107      	bne.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4b4:	f107 030c 	add.w	r3, r7, #12
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 fb47 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c2:	e1cc      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c8:	e1c9      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4ca:	4b72      	ldr	r3, [pc, #456]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 0304 	and.w	r3, r3, #4
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	d109      	bne.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4d6:	4b6f      	ldr	r3, [pc, #444]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	08db      	lsrs	r3, r3, #3
 800c4dc:	f003 0303 	and.w	r3, r3, #3
 800c4e0:	4a6d      	ldr	r2, [pc, #436]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c4e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e8:	e1b9      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ee:	e1b6      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c4f0:	4b68      	ldr	r3, [pc, #416]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4fc:	d102      	bne.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c4fe:	4b67      	ldr	r3, [pc, #412]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c502:	e1ac      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c508:	e1a9      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c50a:	4b62      	ldr	r3, [pc, #392]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c516:	d102      	bne.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c518:	4b61      	ldr	r3, [pc, #388]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51c:	e19f      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c522:	e19c      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c528:	e199      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c52a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c52e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c532:	430b      	orrs	r3, r1
 800c534:	d173      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c536:	4b57      	ldr	r3, [pc, #348]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c53e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c546:	d02f      	beq.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c54e:	d863      	bhi.n	800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	2b00      	cmp	r3, #0
 800c554:	d004      	beq.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c55c:	d012      	beq.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c55e:	e05b      	b.n	800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c560:	4b4c      	ldr	r3, [pc, #304]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c56c:	d107      	bne.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c56e:	f107 0318 	add.w	r3, r7, #24
 800c572:	4618      	mov	r0, r3
 800c574:	f000 f996 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c57c:	e16f      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c582:	e16c      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c584:	4b43      	ldr	r3, [pc, #268]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c58c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c590:	d107      	bne.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	4618      	mov	r0, r3
 800c598:	f000 fad8 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a0:	e15d      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a6:	e15a      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5a8:	4b3a      	ldr	r3, [pc, #232]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5b2:	4b38      	ldr	r3, [pc, #224]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b04      	cmp	r3, #4
 800c5bc:	d10c      	bne.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d109      	bne.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5c4:	4b33      	ldr	r3, [pc, #204]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	08db      	lsrs	r3, r3, #3
 800c5ca:	f003 0303 	and.w	r3, r3, #3
 800c5ce:	4a32      	ldr	r2, [pc, #200]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5d6:	e01e      	b.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5d8:	4b2e      	ldr	r3, [pc, #184]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5e4:	d106      	bne.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5ec:	d102      	bne.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5ee:	4b2b      	ldr	r3, [pc, #172]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f2:	e010      	b.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5f4:	4b27      	ldr	r3, [pc, #156]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c600:	d106      	bne.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c608:	d102      	bne.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c60a:	4b25      	ldr	r3, [pc, #148]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c60e:	e002      	b.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c614:	e123      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c616:	e122      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61c:	e11f      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c61e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c622:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c626:	430b      	orrs	r3, r1
 800c628:	d13c      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c62a:	4b1a      	ldr	r3, [pc, #104]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c62e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c632:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	2b00      	cmp	r3, #0
 800c638:	d004      	beq.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c640:	d012      	beq.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c642:	e023      	b.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c644:	4b13      	ldr	r3, [pc, #76]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c64c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c650:	d107      	bne.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c656:	4618      	mov	r0, r3
 800c658:	f000 fbcc 	bl	800cdf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c660:	e0fd      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c666:	e0fa      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c674:	d107      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f912 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c684:	e0eb      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68a:	e0e8      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c690:	e0e5      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c692:	bf00      	nop
 800c694:	58024400 	.word	0x58024400
 800c698:	03d09000 	.word	0x03d09000
 800c69c:	003d0900 	.word	0x003d0900
 800c6a0:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c6ac:	430b      	orrs	r3, r1
 800c6ae:	f040 8085 	bne.w	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c6b2:	4b6d      	ldr	r3, [pc, #436]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c6ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6c2:	d06b      	beq.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6ca:	d874      	bhi.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6d2:	d056      	beq.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6da:	d86c      	bhi.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6e2:	d03b      	beq.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6ea:	d864      	bhi.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f2:	d021      	beq.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6fa:	d85c      	bhi.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d004      	beq.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c708:	d004      	beq.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c70a:	e054      	b.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c70c:	f000 f8b4 	bl	800c878 <HAL_RCCEx_GetD3PCLK1Freq>
 800c710:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c712:	e0a4      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c714:	4b54      	ldr	r3, [pc, #336]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c71c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c720:	d107      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c722:	f107 0318 	add.w	r3, r7, #24
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f8bc 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c730:	e095      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c736:	e092      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c738:	4b4b      	ldr	r3, [pc, #300]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c744:	d107      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c746:	f107 030c 	add.w	r3, r7, #12
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f9fe 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c754:	e083      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75a:	e080      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c75c:	4b42      	ldr	r3, [pc, #264]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 0304 	and.w	r3, r3, #4
 800c764:	2b04      	cmp	r3, #4
 800c766:	d109      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c768:	4b3f      	ldr	r3, [pc, #252]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	08db      	lsrs	r3, r3, #3
 800c76e:	f003 0303 	and.w	r3, r3, #3
 800c772:	4a3e      	ldr	r2, [pc, #248]	; (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c774:	fa22 f303 	lsr.w	r3, r2, r3
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c77a:	e070      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c780:	e06d      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c782:	4b39      	ldr	r3, [pc, #228]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c78e:	d102      	bne.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c790:	4b37      	ldr	r3, [pc, #220]	; (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c794:	e063      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c79a:	e060      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c79c:	4b32      	ldr	r3, [pc, #200]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7a8:	d102      	bne.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c7aa:	4b32      	ldr	r3, [pc, #200]	; (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ae:	e056      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b4:	e053      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ba:	e050      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	d148      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c7c8:	4b27      	ldr	r3, [pc, #156]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7d8:	d02a      	beq.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7e0:	d838      	bhi.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d004      	beq.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7ee:	d00d      	beq.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c7f0:	e030      	b.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7fe:	d102      	bne.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c800:	4b1c      	ldr	r3, [pc, #112]	; (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c804:	e02b      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80a:	e028      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c80c:	4b16      	ldr	r3, [pc, #88]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c818:	d107      	bne.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c81a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 fae8 	bl	800cdf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c828:	e019      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82e:	e016      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c830:	4b0d      	ldr	r3, [pc, #52]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c83c:	d107      	bne.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c83e:	f107 0318 	add.w	r3, r7, #24
 800c842:	4618      	mov	r0, r3
 800c844:	f000 f82e 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84c:	e007      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c852:	e004      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c858:	e001      	b.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c860:	4618      	mov	r0, r3
 800c862:	3740      	adds	r7, #64	; 0x40
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	58024400 	.word	0x58024400
 800c86c:	03d09000 	.word	0x03d09000
 800c870:	003d0900 	.word	0x003d0900
 800c874:	02faf080 	.word	0x02faf080

0800c878 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c87c:	f7fe f92e 	bl	800aadc <HAL_RCC_GetHCLKFreq>
 800c880:	4602      	mov	r2, r0
 800c882:	4b06      	ldr	r3, [pc, #24]	; (800c89c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	091b      	lsrs	r3, r3, #4
 800c888:	f003 0307 	and.w	r3, r3, #7
 800c88c:	4904      	ldr	r1, [pc, #16]	; (800c8a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c88e:	5ccb      	ldrb	r3, [r1, r3]
 800c890:	f003 031f 	and.w	r3, r3, #31
 800c894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c898:	4618      	mov	r0, r3
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	58024400 	.word	0x58024400
 800c8a0:	08018cdc 	.word	0x08018cdc

0800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b089      	sub	sp, #36	; 0x24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8ac:	4ba1      	ldr	r3, [pc, #644]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b0:	f003 0303 	and.w	r3, r3, #3
 800c8b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c8b6:	4b9f      	ldr	r3, [pc, #636]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ba:	0b1b      	lsrs	r3, r3, #12
 800c8bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c8c2:	4b9c      	ldr	r3, [pc, #624]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c6:	091b      	lsrs	r3, r3, #4
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c8ce:	4b99      	ldr	r3, [pc, #612]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d2:	08db      	lsrs	r3, r3, #3
 800c8d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	fb02 f303 	mul.w	r3, r2, r3
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 8111 	beq.w	800cb14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	f000 8083 	beq.w	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	f200 80a1 	bhi.w	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d003      	beq.n	800c910 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d056      	beq.n	800c9bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c90e:	e099      	b.n	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c910:	4b88      	ldr	r3, [pc, #544]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0320 	and.w	r3, r3, #32
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d02d      	beq.n	800c978 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c91c:	4b85      	ldr	r3, [pc, #532]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	08db      	lsrs	r3, r3, #3
 800c922:	f003 0303 	and.w	r3, r3, #3
 800c926:	4a84      	ldr	r2, [pc, #528]	; (800cb38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c928:	fa22 f303 	lsr.w	r3, r2, r3
 800c92c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	ee07 3a90 	vmov	s15, r3
 800c934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c946:	4b7b      	ldr	r3, [pc, #492]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c956:	ed97 6a03 	vldr	s12, [r7, #12]
 800c95a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c972:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c976:	e087      	b.n	800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c982:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c98a:	4b6a      	ldr	r3, [pc, #424]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ba:	e065      	b.n	800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ce:	4b59      	ldr	r3, [pc, #356]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9fe:	e043      	b.n	800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca12:	4b48      	ldr	r3, [pc, #288]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca26:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca42:	e021      	b.n	800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca56:	4b37      	ldr	r3, [pc, #220]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ca88:	4b2a      	ldr	r3, [pc, #168]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8c:	0a5b      	lsrs	r3, r3, #9
 800ca8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca92:	ee07 3a90 	vmov	s15, r3
 800ca96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800caa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caae:	ee17 2a90 	vmov	r2, s15
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cab6:	4b1f      	ldr	r3, [pc, #124]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caba:	0c1b      	lsrs	r3, r3, #16
 800cabc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac0:	ee07 3a90 	vmov	s15, r3
 800cac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cacc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cad0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cadc:	ee17 2a90 	vmov	r2, s15
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cae4:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae8:	0e1b      	lsrs	r3, r3, #24
 800caea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0a:	ee17 2a90 	vmov	r2, s15
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb12:	e008      	b.n	800cb26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	609a      	str	r2, [r3, #8]
}
 800cb26:	bf00      	nop
 800cb28:	3724      	adds	r7, #36	; 0x24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	58024400 	.word	0x58024400
 800cb38:	03d09000 	.word	0x03d09000
 800cb3c:	46000000 	.word	0x46000000
 800cb40:	4c742400 	.word	0x4c742400
 800cb44:	4a742400 	.word	0x4a742400
 800cb48:	4c3ebc20 	.word	0x4c3ebc20

0800cb4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b089      	sub	sp, #36	; 0x24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb54:	4ba1      	ldr	r3, [pc, #644]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb58:	f003 0303 	and.w	r3, r3, #3
 800cb5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb5e:	4b9f      	ldr	r3, [pc, #636]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	0d1b      	lsrs	r3, r3, #20
 800cb64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb6a:	4b9c      	ldr	r3, [pc, #624]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6e:	0a1b      	lsrs	r3, r3, #8
 800cb70:	f003 0301 	and.w	r3, r3, #1
 800cb74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cb76:	4b99      	ldr	r3, [pc, #612]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb7a:	08db      	lsrs	r3, r3, #3
 800cb7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	fb02 f303 	mul.w	r3, r2, r3
 800cb86:	ee07 3a90 	vmov	s15, r3
 800cb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 8111 	beq.w	800cdbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	f000 8083 	beq.w	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	f200 80a1 	bhi.w	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d003      	beq.n	800cbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d056      	beq.n	800cc64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cbb6:	e099      	b.n	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbb8:	4b88      	ldr	r3, [pc, #544]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 0320 	and.w	r3, r3, #32
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d02d      	beq.n	800cc20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbc4:	4b85      	ldr	r3, [pc, #532]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	08db      	lsrs	r3, r3, #3
 800cbca:	f003 0303 	and.w	r3, r3, #3
 800cbce:	4a84      	ldr	r2, [pc, #528]	; (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	ee07 3a90 	vmov	s15, r3
 800cbdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	ee07 3a90 	vmov	s15, r3
 800cbe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbee:	4b7b      	ldr	r3, [pc, #492]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc1e:	e087      	b.n	800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	ee07 3a90 	vmov	s15, r3
 800cc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc32:	4b6a      	ldr	r3, [pc, #424]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc62:	e065      	b.n	800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	ee07 3a90 	vmov	s15, r3
 800cc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc76:	4b59      	ldr	r3, [pc, #356]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cca6:	e043      	b.n	800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	ee07 3a90 	vmov	s15, r3
 800ccae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ccb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccba:	4b48      	ldr	r3, [pc, #288]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccea:	e021      	b.n	800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfe:	4b37      	ldr	r3, [pc, #220]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cd30:	4b2a      	ldr	r3, [pc, #168]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd34:	0a5b      	lsrs	r3, r3, #9
 800cd36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd3a:	ee07 3a90 	vmov	s15, r3
 800cd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd56:	ee17 2a90 	vmov	r2, s15
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd5e:	4b1f      	ldr	r3, [pc, #124]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd62:	0c1b      	lsrs	r3, r3, #16
 800cd64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd78:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd84:	ee17 2a90 	vmov	r2, s15
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cd8c:	4b13      	ldr	r3, [pc, #76]	; (800cddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd90:	0e1b      	lsrs	r3, r3, #24
 800cd92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cda2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cda6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb2:	ee17 2a90 	vmov	r2, s15
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cdba:	e008      	b.n	800cdce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	609a      	str	r2, [r3, #8]
}
 800cdce:	bf00      	nop
 800cdd0:	3724      	adds	r7, #36	; 0x24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	58024400 	.word	0x58024400
 800cde0:	03d09000 	.word	0x03d09000
 800cde4:	46000000 	.word	0x46000000
 800cde8:	4c742400 	.word	0x4c742400
 800cdec:	4a742400 	.word	0x4a742400
 800cdf0:	4c3ebc20 	.word	0x4c3ebc20

0800cdf4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b089      	sub	sp, #36	; 0x24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cdfc:	4ba0      	ldr	r3, [pc, #640]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce00:	f003 0303 	and.w	r3, r3, #3
 800ce04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ce06:	4b9e      	ldr	r3, [pc, #632]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0a:	091b      	lsrs	r3, r3, #4
 800ce0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ce12:	4b9b      	ldr	r3, [pc, #620]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce1c:	4b98      	ldr	r3, [pc, #608]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce20:	08db      	lsrs	r3, r3, #3
 800ce22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	fb02 f303 	mul.w	r3, r2, r3
 800ce2c:	ee07 3a90 	vmov	s15, r3
 800ce30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f000 8111 	beq.w	800d062 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	f000 8083 	beq.w	800cf4e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	f200 80a1 	bhi.w	800cf92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d056      	beq.n	800cf0a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ce5c:	e099      	b.n	800cf92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce5e:	4b88      	ldr	r3, [pc, #544]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 0320 	and.w	r3, r3, #32
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d02d      	beq.n	800cec6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce6a:	4b85      	ldr	r3, [pc, #532]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	08db      	lsrs	r3, r3, #3
 800ce70:	f003 0303 	and.w	r3, r3, #3
 800ce74:	4a83      	ldr	r2, [pc, #524]	; (800d084 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ce76:	fa22 f303 	lsr.w	r3, r2, r3
 800ce7a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	ee07 3a90 	vmov	s15, r3
 800ce82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	ee07 3a90 	vmov	s15, r3
 800ce8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce94:	4b7a      	ldr	r3, [pc, #488]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce9c:	ee07 3a90 	vmov	s15, r3
 800cea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cea4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cea8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ceac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cec4:	e087      	b.n	800cfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	ee07 3a90 	vmov	s15, r3
 800cecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d08c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ced4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ced8:	4b69      	ldr	r3, [pc, #420]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cedc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cee0:	ee07 3a90 	vmov	s15, r3
 800cee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cee8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cefc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf08:	e065      	b.n	800cfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d090 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cf18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf1c:	4b58      	ldr	r3, [pc, #352]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf24:	ee07 3a90 	vmov	s15, r3
 800cf28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf30:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf4c:	e043      	b.n	800cfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	ee07 3a90 	vmov	s15, r3
 800cf54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d094 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cf5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf60:	4b47      	ldr	r3, [pc, #284]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf68:	ee07 3a90 	vmov	s15, r3
 800cf6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf70:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf74:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf90:	e021      	b.n	800cfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	ee07 3a90 	vmov	s15, r3
 800cf98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d08c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa4:	4b36      	ldr	r3, [pc, #216]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfd4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cfd6:	4b2a      	ldr	r3, [pc, #168]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfda:	0a5b      	lsrs	r3, r3, #9
 800cfdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfe0:	ee07 3a90 	vmov	s15, r3
 800cfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cff0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cffc:	ee17 2a90 	vmov	r2, s15
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d004:	4b1e      	ldr	r3, [pc, #120]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d008:	0c1b      	lsrs	r3, r3, #16
 800d00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d02a:	ee17 2a90 	vmov	r2, s15
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d032:	4b13      	ldr	r3, [pc, #76]	; (800d080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d036:	0e1b      	lsrs	r3, r3, #24
 800d038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d03c:	ee07 3a90 	vmov	s15, r3
 800d040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d04c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d058:	ee17 2a90 	vmov	r2, s15
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d060:	e008      	b.n	800d074 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	609a      	str	r2, [r3, #8]
}
 800d074:	bf00      	nop
 800d076:	3724      	adds	r7, #36	; 0x24
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr
 800d080:	58024400 	.word	0x58024400
 800d084:	03d09000 	.word	0x03d09000
 800d088:	46000000 	.word	0x46000000
 800d08c:	4c742400 	.word	0x4c742400
 800d090:	4a742400 	.word	0x4a742400
 800d094:	4c3ebc20 	.word	0x4c3ebc20

0800d098 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0a6:	4b53      	ldr	r3, [pc, #332]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0aa:	f003 0303 	and.w	r3, r3, #3
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	d101      	bne.n	800d0b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e099      	b.n	800d1ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d0b6:	4b4f      	ldr	r3, [pc, #316]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a4e      	ldr	r2, [pc, #312]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d0bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d0c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0c2:	f7f6 fe7b 	bl	8003dbc <HAL_GetTick>
 800d0c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0c8:	e008      	b.n	800d0dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0ca:	f7f6 fe77 	bl	8003dbc <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d901      	bls.n	800d0dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e086      	b.n	800d1ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0dc:	4b45      	ldr	r3, [pc, #276]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1f0      	bne.n	800d0ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d0e8:	4b42      	ldr	r3, [pc, #264]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	031b      	lsls	r3, r3, #12
 800d0f6:	493f      	ldr	r1, [pc, #252]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	628b      	str	r3, [r1, #40]	; 0x28
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	3b01      	subs	r3, #1
 800d102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	025b      	lsls	r3, r3, #9
 800d10e:	b29b      	uxth	r3, r3
 800d110:	431a      	orrs	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	3b01      	subs	r3, #1
 800d118:	041b      	lsls	r3, r3, #16
 800d11a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d11e:	431a      	orrs	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	3b01      	subs	r3, #1
 800d126:	061b      	lsls	r3, r3, #24
 800d128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d12c:	4931      	ldr	r1, [pc, #196]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d12e:	4313      	orrs	r3, r2
 800d130:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d132:	4b30      	ldr	r3, [pc, #192]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d136:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	695b      	ldr	r3, [r3, #20]
 800d13e:	492d      	ldr	r1, [pc, #180]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d140:	4313      	orrs	r3, r2
 800d142:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d144:	4b2b      	ldr	r3, [pc, #172]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d148:	f023 0220 	bic.w	r2, r3, #32
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	4928      	ldr	r1, [pc, #160]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d152:	4313      	orrs	r3, r2
 800d154:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d156:	4b27      	ldr	r3, [pc, #156]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	4a26      	ldr	r2, [pc, #152]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d15c:	f023 0310 	bic.w	r3, r3, #16
 800d160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d162:	4b24      	ldr	r3, [pc, #144]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d166:	4b24      	ldr	r3, [pc, #144]	; (800d1f8 <RCCEx_PLL2_Config+0x160>)
 800d168:	4013      	ands	r3, r2
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	69d2      	ldr	r2, [r2, #28]
 800d16e:	00d2      	lsls	r2, r2, #3
 800d170:	4920      	ldr	r1, [pc, #128]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d172:	4313      	orrs	r3, r2
 800d174:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d176:	4b1f      	ldr	r3, [pc, #124]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	4a1e      	ldr	r2, [pc, #120]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d17c:	f043 0310 	orr.w	r3, r3, #16
 800d180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d188:	4b1a      	ldr	r3, [pc, #104]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	4a19      	ldr	r2, [pc, #100]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d18e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d192:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d194:	e00f      	b.n	800d1b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d106      	bne.n	800d1aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d19c:	4b15      	ldr	r3, [pc, #84]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a0:	4a14      	ldr	r2, [pc, #80]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d1a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1a8:	e005      	b.n	800d1b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d1aa:	4b12      	ldr	r3, [pc, #72]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ae:	4a11      	ldr	r2, [pc, #68]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d1b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d1b6:	4b0f      	ldr	r3, [pc, #60]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a0e      	ldr	r2, [pc, #56]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d1bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d1c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1c2:	f7f6 fdfb 	bl	8003dbc <HAL_GetTick>
 800d1c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1c8:	e008      	b.n	800d1dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1ca:	f7f6 fdf7 	bl	8003dbc <HAL_GetTick>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d901      	bls.n	800d1dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1d8:	2303      	movs	r3, #3
 800d1da:	e006      	b.n	800d1ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1dc:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <RCCEx_PLL2_Config+0x15c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d0f0      	beq.n	800d1ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	58024400 	.word	0x58024400
 800d1f8:	ffff0007 	.word	0xffff0007

0800d1fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d20a:	4b53      	ldr	r3, [pc, #332]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20e:	f003 0303 	and.w	r3, r3, #3
 800d212:	2b03      	cmp	r3, #3
 800d214:	d101      	bne.n	800d21a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	e099      	b.n	800d34e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d21a:	4b4f      	ldr	r3, [pc, #316]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a4e      	ldr	r2, [pc, #312]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d226:	f7f6 fdc9 	bl	8003dbc <HAL_GetTick>
 800d22a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d22c:	e008      	b.n	800d240 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d22e:	f7f6 fdc5 	bl	8003dbc <HAL_GetTick>
 800d232:	4602      	mov	r2, r0
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d901      	bls.n	800d240 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e086      	b.n	800d34e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d240:	4b45      	ldr	r3, [pc, #276]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1f0      	bne.n	800d22e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d24c:	4b42      	ldr	r3, [pc, #264]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d250:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	051b      	lsls	r3, r3, #20
 800d25a:	493f      	ldr	r1, [pc, #252]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d25c:	4313      	orrs	r3, r2
 800d25e:	628b      	str	r3, [r1, #40]	; 0x28
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	3b01      	subs	r3, #1
 800d266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	3b01      	subs	r3, #1
 800d270:	025b      	lsls	r3, r3, #9
 800d272:	b29b      	uxth	r3, r3
 800d274:	431a      	orrs	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	041b      	lsls	r3, r3, #16
 800d27e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d282:	431a      	orrs	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	3b01      	subs	r3, #1
 800d28a:	061b      	lsls	r3, r3, #24
 800d28c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d290:	4931      	ldr	r1, [pc, #196]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d292:	4313      	orrs	r3, r2
 800d294:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d296:	4b30      	ldr	r3, [pc, #192]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	492d      	ldr	r1, [pc, #180]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2a8:	4b2b      	ldr	r3, [pc, #172]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	4928      	ldr	r1, [pc, #160]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2ba:	4b27      	ldr	r3, [pc, #156]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	4a26      	ldr	r2, [pc, #152]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d2c6:	4b24      	ldr	r3, [pc, #144]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2ca:	4b24      	ldr	r3, [pc, #144]	; (800d35c <RCCEx_PLL3_Config+0x160>)
 800d2cc:	4013      	ands	r3, r2
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	69d2      	ldr	r2, [r2, #28]
 800d2d2:	00d2      	lsls	r2, r2, #3
 800d2d4:	4920      	ldr	r1, [pc, #128]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d2da:	4b1f      	ldr	r3, [pc, #124]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	4a1e      	ldr	r2, [pc, #120]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d106      	bne.n	800d2fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d2ec:	4b1a      	ldr	r3, [pc, #104]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	4a19      	ldr	r2, [pc, #100]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d2f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d2f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2f8:	e00f      	b.n	800d31a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d106      	bne.n	800d30e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d300:	4b15      	ldr	r3, [pc, #84]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	4a14      	ldr	r2, [pc, #80]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d30a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d30c:	e005      	b.n	800d31a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d30e:	4b12      	ldr	r3, [pc, #72]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d312:	4a11      	ldr	r2, [pc, #68]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d318:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d31a:	4b0f      	ldr	r3, [pc, #60]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a0e      	ldr	r2, [pc, #56]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d326:	f7f6 fd49 	bl	8003dbc <HAL_GetTick>
 800d32a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d32c:	e008      	b.n	800d340 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d32e:	f7f6 fd45 	bl	8003dbc <HAL_GetTick>
 800d332:	4602      	mov	r2, r0
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d901      	bls.n	800d340 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d33c:	2303      	movs	r3, #3
 800d33e:	e006      	b.n	800d34e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d340:	4b05      	ldr	r3, [pc, #20]	; (800d358 <RCCEx_PLL3_Config+0x15c>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d0f0      	beq.n	800d32e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	58024400 	.word	0x58024400
 800d35c:	ffff0007 	.word	0xffff0007

0800d360 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e092      	b.n	800d498 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	7a5b      	ldrb	r3, [r3, #9]
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d105      	bne.n	800d388 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7f5 fe20 	bl	8002fc8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2202      	movs	r2, #2
 800d38c:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f022 0204 	bic.w	r2, r2, #4
 800d39c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	4b3e      	ldr	r3, [pc, #248]	; (800d4a0 <HAL_RNG_Init+0x140>)
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	6852      	ldr	r2, [r2, #4]
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d3b6:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a39      	ldr	r2, [pc, #228]	; (800d4a4 <HAL_RNG_Init+0x144>)
 800d3be:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f247 2274 	movw	r2, #29300	; 0x7274
 800d3c8:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d3d8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d3da:	f7f6 fcef 	bl	8003dbc <HAL_GetTick>
 800d3de:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d3e0:	e016      	b.n	800d410 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d3e2:	f7f6 fceb 	bl	8003dbc <HAL_GetTick>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d90f      	bls.n	800d410 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3fe:	d107      	bne.n	800d410 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2202      	movs	r2, #2
 800d40a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	e043      	b.n	800d498 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d41a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d41e:	d0e0      	beq.n	800d3e2 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f042 0204 	orr.w	r2, r2, #4
 800d42e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d43a:	2b40      	cmp	r3, #64	; 0x40
 800d43c:	d104      	bne.n	800d448 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2204      	movs	r2, #4
 800d442:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e027      	b.n	800d498 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d448:	f7f6 fcb8 	bl	8003dbc <HAL_GetTick>
 800d44c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d44e:	e015      	b.n	800d47c <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d450:	f7f6 fcb4 	bl	8003dbc <HAL_GetTick>
 800d454:	4602      	mov	r2, r0
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d90e      	bls.n	800d47c <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	f003 0304 	and.w	r3, r3, #4
 800d468:	2b04      	cmp	r3, #4
 800d46a:	d107      	bne.n	800d47c <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2204      	movs	r2, #4
 800d470:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2202      	movs	r2, #2
 800d476:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	e00d      	b.n	800d498 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	f003 0304 	and.w	r3, r3, #4
 800d486:	2b04      	cmp	r3, #4
 800d488:	d0e2      	beq.n	800d450 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	bfffffdf 	.word	0xbfffffdf
 800d4a4:	17590abc 	.word	0x17590abc

0800d4a8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7a1b      	ldrb	r3, [r3, #8]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d101      	bne.n	800d4c2 <HAL_RNG_GenerateRandomNumber+0x1a>
 800d4be:	2302      	movs	r3, #2
 800d4c0:	e06d      	b.n	800d59e <HAL_RNG_GenerateRandomNumber+0xf6>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	7a5b      	ldrb	r3, [r3, #9]
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d15c      	bne.n	800d58c <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2202      	movs	r2, #2
 800d4d6:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e2:	2b40      	cmp	r3, #64	; 0x40
 800d4e4:	d10c      	bne.n	800d500 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2208      	movs	r2, #8
 800d4ea:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f864 	bl	800d5ba <RNG_RecoverSeedError>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800d4f6:	7bfb      	ldrb	r3, [r7, #15]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d101      	bne.n	800d500 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	e04e      	b.n	800d59e <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800d500:	f7f6 fc5c 	bl	8003dbc <HAL_GetTick>
 800d504:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d506:	e018      	b.n	800d53a <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d508:	f7f6 fc58 	bl	8003dbc <HAL_GetTick>
 800d50c:	4602      	mov	r2, r0
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	2b02      	cmp	r3, #2
 800d514:	d911      	bls.n	800d53a <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	f003 0301 	and.w	r3, r3, #1
 800d520:	2b01      	cmp	r3, #1
 800d522:	d00a      	beq.n	800d53a <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2202      	movs	r2, #2
 800d52e:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e031      	b.n	800d59e <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b01      	cmp	r3, #1
 800d546:	d1df      	bne.n	800d508 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	689a      	ldr	r2, [r3, #8]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d55c:	2b40      	cmp	r3, #64	; 0x40
 800d55e:	d10d      	bne.n	800d57c <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2208      	movs	r2, #8
 800d564:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	685a      	ldr	r2, [r3, #4]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f022 0201 	bic.w	r2, r2, #1
 800d578:	605a      	str	r2, [r3, #4]
 800d57a:	e003      	b.n	800d584 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	691a      	ldr	r2, [r3, #16]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	725a      	strb	r2, [r3, #9]
 800d58a:	e004      	b.n	800d596 <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2204      	movs	r2, #4
 800d590:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	721a      	strb	r2, [r3, #8]

  return status;
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b083      	sub	sp, #12
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800d5ae:	bf00      	nop
 800d5b0:	370c      	adds	r7, #12
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr

0800d5ba <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	f003 0304 	and.w	r3, r3, #4
 800d5d0:	2b04      	cmp	r3, #4
 800d5d2:	d008      	beq.n	800d5e6 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5e2:	605a      	str	r2, [r3, #4]
 800d5e4:	e05f      	b.n	800d6a6 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d5f4:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d604:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800d606:	2302      	movs	r3, #2
 800d608:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3b01      	subs	r3, #1
 800d60e:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d110      	bne.n	800d638 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	f043 0202 	orr.w	r2, r3, #2
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff ffb9 	bl	800d5a6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e03d      	b.n	800d6b4 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d646:	d0e0      	beq.n	800d60a <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d652:	2b40      	cmp	r3, #64	; 0x40
 800d654:	d107      	bne.n	800d666 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d664:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800d666:	2302      	movs	r3, #2
 800d668:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d110      	bne.n	800d698 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	f043 0202 	orr.w	r2, r3, #2
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff ff89 	bl	800d5a6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e00d      	b.n	800d6b4 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	f003 0304 	and.w	r3, r3, #4
 800d6a2:	2b04      	cmp	r3, #4
 800d6a4:	d0e1      	beq.n	800d66a <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	f023 0208 	bic.w	r2, r3, #8
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08a      	sub	sp, #40	; 0x28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e075      	b.n	800d7ba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d105      	bne.n	800d6e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7f5 fcab 	bl	800303c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2204      	movs	r2, #4
 800d6ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f868 	bl	800d7c4 <HAL_SD_InitCard>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e05d      	b.n	800d7ba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d6fe:	f107 0308 	add.w	r3, r7, #8
 800d702:	4619      	mov	r1, r3
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fdaf 	bl	800e268 <HAL_SD_GetCardStatus>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d710:	2301      	movs	r3, #1
 800d712:	e052      	b.n	800d7ba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d714:	7e3b      	ldrb	r3, [r7, #24]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d71a:	7e7b      	ldrb	r3, [r7, #25]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d724:	2b01      	cmp	r3, #1
 800d726:	d10a      	bne.n	800d73e <HAL_SD_Init+0x82>
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d102      	bne.n	800d734 <HAL_SD_Init+0x78>
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d004      	beq.n	800d73e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d73a:	659a      	str	r2, [r3, #88]	; 0x58
 800d73c:	e00b      	b.n	800d756 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d742:	2b01      	cmp	r3, #1
 800d744:	d104      	bne.n	800d750 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d74c:	659a      	str	r2, [r3, #88]	; 0x58
 800d74e:	e002      	b.n	800d756 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fe6d 	bl	800e43c <HAL_SD_ConfigWideBusOperation>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e026      	b.n	800d7ba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d76c:	f7f6 fb26 	bl	8003dbc <HAL_GetTick>
 800d770:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d772:	e011      	b.n	800d798 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d774:	f7f6 fb22 	bl	8003dbc <HAL_GetTick>
 800d778:	4602      	mov	r2, r0
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d782:	d109      	bne.n	800d798 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d78a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d794:	2303      	movs	r3, #3
 800d796:	e010      	b.n	800d7ba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 ff61 	bl	800e660 <HAL_SD_GetCardState>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b04      	cmp	r3, #4
 800d7a2:	d1e7      	bne.n	800d774 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3728      	adds	r7, #40	; 0x28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d7c4:	b590      	push	{r4, r7, lr}
 800d7c6:	b08d      	sub	sp, #52	; 0x34
 800d7c8:	af02      	add	r7, sp, #8
 800d7ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d7dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d7e0:	f04f 0100 	mov.w	r1, #0
 800d7e4:	f7fe fb76 	bl	800bed4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d7e8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d109      	bne.n	800d804 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d7fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d800:	2301      	movs	r3, #1
 800d802:	e070      	b.n	800d8e6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	0a1b      	lsrs	r3, r3, #8
 800d808:	4a39      	ldr	r2, [pc, #228]	; (800d8f0 <HAL_SD_InitCard+0x12c>)
 800d80a:	fba2 2303 	umull	r2, r3, r2, r3
 800d80e:	091b      	lsrs	r3, r3, #4
 800d810:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681c      	ldr	r4, [r3, #0]
 800d816:	466a      	mov	r2, sp
 800d818:	f107 0318 	add.w	r3, r7, #24
 800d81c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d820:	e882 0003 	stmia.w	r2, {r0, r1}
 800d824:	f107 030c 	add.w	r3, r7, #12
 800d828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d82a:	4620      	mov	r0, r4
 800d82c:	f004 fec4 	bl	80125b8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f004 ff07 	bl	8012648 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d005      	beq.n	800d84c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	005b      	lsls	r3, r3, #1
 800d844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d846:	fbb2 f3f3 	udiv	r3, r2, r3
 800d84a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d007      	beq.n	800d862 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d852:	4a28      	ldr	r2, [pc, #160]	; (800d8f4 <HAL_SD_InitCard+0x130>)
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d856:	fbb2 f3f3 	udiv	r3, r2, r3
 800d85a:	3301      	adds	r3, #1
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7f6 fab9 	bl	8003dd4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 ffea 	bl	800e83c <SD_PowerON>
 800d868:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00b      	beq.n	800d888 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	431a      	orrs	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d884:	2301      	movs	r3, #1
 800d886:	e02e      	b.n	800d8e6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 ff09 	bl	800e6a0 <SD_InitCard>
 800d88e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d890:	6a3b      	ldr	r3, [r7, #32]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00b      	beq.n	800d8ae <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e01b      	b.n	800d8e6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f004 ff5c 	bl	8012774 <SDMMC_CmdBlockLength>
 800d8bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00f      	beq.n	800d8e4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a0b      	ldr	r2, [pc, #44]	; (800d8f8 <HAL_SD_InitCard+0x134>)
 800d8ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8d0:	6a3b      	ldr	r3, [r7, #32]
 800d8d2:	431a      	orrs	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e000      	b.n	800d8e6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	372c      	adds	r7, #44	; 0x2c
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd90      	pop	{r4, r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	014f8b59 	.word	0x014f8b59
 800d8f4:	00012110 	.word	0x00012110
 800d8f8:	1fe00fff 	.word	0x1fe00fff

0800d8fc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08c      	sub	sp, #48	; 0x30
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d107      	bne.n	800d924 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d918:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	e08d      	b.n	800da40 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	f040 8086 	bne.w	800da3e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	441a      	add	r2, r3
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d942:	429a      	cmp	r2, r3
 800d944:	d907      	bls.n	800d956 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d94a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	e074      	b.n	800da40 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2203      	movs	r2, #3
 800d95a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2200      	movs	r2, #0
 800d964:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	025a      	lsls	r2, r3, #9
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d002      	beq.n	800d982 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97e:	025b      	lsls	r3, r3, #9
 800d980:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d982:	f04f 33ff 	mov.w	r3, #4294967295
 800d986:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	025b      	lsls	r3, r3, #9
 800d98c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d98e:	2390      	movs	r3, #144	; 0x90
 800d990:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d992:	2302      	movs	r3, #2
 800d994:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d996:	2300      	movs	r3, #0
 800d998:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d99a:	2300      	movs	r3, #0
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f107 0210 	add.w	r2, r7, #16
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f004 feb7 	bl	801271c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9bc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d90a      	bls.n	800d9ea <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2282      	movs	r2, #130	; 0x82
 800d9d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f004 ff0d 	bl	8012800 <SDMMC_CmdReadMultiBlock>
 800d9e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d9e8:	e009      	b.n	800d9fe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2281      	movs	r2, #129	; 0x81
 800d9ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f004 fedf 	bl	80127ba <SDMMC_CmdReadSingleBlock>
 800d9fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da00:	2b00      	cmp	r3, #0
 800da02:	d012      	beq.n	800da2a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a0f      	ldr	r2, [pc, #60]	; (800da48 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800da0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da12:	431a      	orrs	r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e00a      	b.n	800da40 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800da38:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e000      	b.n	800da40 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800da3e:	2302      	movs	r3, #2
  }
}
 800da40:	4618      	mov	r0, r3
 800da42:	3730      	adds	r7, #48	; 0x30
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	1fe00fff 	.word	0x1fe00fff

0800da4c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b08c      	sub	sp, #48	; 0x30
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
 800da58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d107      	bne.n	800da74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	e08d      	b.n	800db90 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	f040 8086 	bne.w	800db8e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2200      	movs	r2, #0
 800da86:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800da88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	441a      	add	r2, r3
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da92:	429a      	cmp	r2, r3
 800da94:	d907      	bls.n	800daa6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	e074      	b.n	800db90 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2203      	movs	r2, #3
 800daaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2200      	movs	r2, #0
 800dab4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	68ba      	ldr	r2, [r7, #8]
 800daba:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	025a      	lsls	r2, r3, #9
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d002      	beq.n	800dad2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	025b      	lsls	r3, r3, #9
 800dad0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dad2:	f04f 33ff 	mov.w	r3, #4294967295
 800dad6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	025b      	lsls	r3, r3, #9
 800dadc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dade:	2390      	movs	r3, #144	; 0x90
 800dae0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800dae2:	2300      	movs	r3, #0
 800dae4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800daea:	2300      	movs	r3, #0
 800daec:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f107 0210 	add.w	r2, r7, #16
 800daf6:	4611      	mov	r1, r2
 800daf8:	4618      	mov	r0, r3
 800dafa:	f004 fe0f 	bl	801271c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68da      	ldr	r2, [r3, #12]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db0c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2201      	movs	r2, #1
 800db1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d90a      	bls.n	800db3a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	22a0      	movs	r2, #160	; 0xa0
 800db28:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db30:	4618      	mov	r0, r3
 800db32:	f004 feab 	bl	801288c <SDMMC_CmdWriteMultiBlock>
 800db36:	62f8      	str	r0, [r7, #44]	; 0x2c
 800db38:	e009      	b.n	800db4e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2290      	movs	r2, #144	; 0x90
 800db3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db46:	4618      	mov	r0, r3
 800db48:	f004 fe7d 	bl	8012846 <SDMMC_CmdWriteSingleBlock>
 800db4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800db4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db50:	2b00      	cmp	r3, #0
 800db52:	d012      	beq.n	800db7a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a0f      	ldr	r2, [pc, #60]	; (800db98 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800db5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db62:	431a      	orrs	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800db76:	2301      	movs	r3, #1
 800db78:	e00a      	b.n	800db90 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800db88:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e000      	b.n	800db90 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800db8e:	2302      	movs	r3, #2
  }
}
 800db90:	4618      	mov	r0, r3
 800db92:	3730      	adds	r7, #48	; 0x30
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	1fe00fff 	.word	0x1fe00fff

0800db9c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d008      	beq.n	800dbca <HAL_SD_IRQHandler+0x2e>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f003 0308 	and.w	r3, r3, #8
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d003      	beq.n	800dbca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f001 f926 	bl	800ee14 <SD_Read_IT>
 800dbc8:	e19a      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f000 80ac 	beq.w	800dd32 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbe2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	4b59      	ldr	r3, [pc, #356]	; (800dd54 <HAL_SD_IRQHandler+0x1b8>)
 800dbf0:	400b      	ands	r3, r1
 800dbf2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dc02:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68da      	ldr	r2, [r3, #12]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc12:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f003 0308 	and.w	r3, r3, #8
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d038      	beq.n	800dc90 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f003 0302 	and.w	r3, r3, #2
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d104      	bne.n	800dc32 <HAL_SD_IRQHandler+0x96>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f003 0320 	and.w	r3, r3, #32
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d011      	beq.n	800dc56 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f004 fe4c 	bl	80128d4 <SDMMC_CmdStopTransfer>
 800dc3c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d008      	beq.n	800dc56 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	431a      	orrs	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f95b 	bl	800df0c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a3f      	ldr	r2, [pc, #252]	; (800dd58 <HAL_SD_IRQHandler+0x1bc>)
 800dc5c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <HAL_SD_IRQHandler+0xe4>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d003      	beq.n	800dc88 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f006 fe4d 	bl	8014920 <HAL_SD_RxCpltCallback>
 800dc86:	e13b      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f006 fe3f 	bl	801490c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dc8e:	e137      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f000 8132 	beq.w	800df00 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2200      	movs	r2, #0
 800dca2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f003 0302 	and.w	r3, r3, #2
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d104      	bne.n	800dcc8 <HAL_SD_IRQHandler+0x12c>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f003 0320 	and.w	r3, r3, #32
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d011      	beq.n	800dcec <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f004 fe01 	bl	80128d4 <SDMMC_CmdStopTransfer>
 800dcd2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d008      	beq.n	800dcec <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	431a      	orrs	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f910 	bl	800df0c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f003 0310 	and.w	r3, r3, #16
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d104      	bne.n	800dd0e <HAL_SD_IRQHandler+0x172>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f003 0320 	and.w	r3, r3, #32
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f006 fdfc 	bl	801490c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d105      	bne.n	800dd2a <HAL_SD_IRQHandler+0x18e>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f003 0302 	and.w	r3, r3, #2
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 80eb 	beq.w	800df00 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f006 fdf8 	bl	8014920 <HAL_SD_RxCpltCallback>
}
 800dd30:	e0e6      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00d      	beq.n	800dd5c <HAL_SD_IRQHandler+0x1c0>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f003 0308 	and.w	r3, r3, #8
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d008      	beq.n	800dd5c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 f8a8 	bl	800eea0 <SD_Write_IT>
 800dd50:	e0d6      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
 800dd52:	bf00      	nop
 800dd54:	ffff3ec5 	.word	0xffff3ec5
 800dd58:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd62:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 809d 	beq.w	800dea6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd72:	f003 0302 	and.w	r3, r3, #2
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d005      	beq.n	800dd86 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd7e:	f043 0202 	orr.w	r2, r3, #2
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd8c:	f003 0308 	and.w	r3, r3, #8
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd98:	f043 0208 	orr.w	r2, r3, #8
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda6:	f003 0320 	and.w	r3, r3, #32
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d005      	beq.n	800ddba <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb2:	f043 0220 	orr.w	r2, r3, #32
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc0:	f003 0310 	and.w	r3, r3, #16
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d005      	beq.n	800ddd4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddcc:	f043 0210 	orr.w	r2, r3, #16
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a4b      	ldr	r2, [pc, #300]	; (800df08 <HAL_SD_IRQHandler+0x36c>)
 800ddda:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ddea:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68da      	ldr	r2, [r3, #12]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddfa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68da      	ldr	r2, [r3, #12]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de1a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4618      	mov	r0, r3
 800de22:	f004 fd57 	bl	80128d4 <SDMMC_CmdStopTransfer>
 800de26:	4602      	mov	r2, r0
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2c:	431a      	orrs	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68da      	ldr	r2, [r3, #12]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de40:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de4a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f003 0308 	and.w	r3, r3, #8
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00a      	beq.n	800de6c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 f851 	bl	800df0c <HAL_SD_ErrorCallback>
}
 800de6a:	e049      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de72:	2b00      	cmp	r3, #0
 800de74:	d044      	beq.n	800df00 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d040      	beq.n	800df00 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800de8c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2200      	movs	r2, #0
 800de94:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2201      	movs	r2, #1
 800de9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 f834 	bl	800df0c <HAL_SD_ErrorCallback>
}
 800dea4:	e02c      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d025      	beq.n	800df00 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800debc:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec4:	f003 0304 	and.w	r3, r3, #4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10c      	bne.n	800dee6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f003 0320 	and.w	r3, r3, #32
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d003      	beq.n	800dede <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f001 f84a 	bl	800ef70 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dedc:	e010      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f001 f832 	bl	800ef48 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dee4:	e00c      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f003 0320 	and.w	r3, r3, #32
 800deec:	2b00      	cmp	r3, #0
 800deee:	d003      	beq.n	800def8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f001 f833 	bl	800ef5c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800def6:	e003      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f001 f81b 	bl	800ef34 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800defe:	e7ff      	b.n	800df00 <HAL_SD_IRQHandler+0x364>
 800df00:	bf00      	nop
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	18000f3a 	.word	0x18000f3a

0800df0c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df2e:	0f9b      	lsrs	r3, r3, #30
 800df30:	b2da      	uxtb	r2, r3
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df3a:	0e9b      	lsrs	r3, r3, #26
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	f003 030f 	and.w	r3, r3, #15
 800df42:	b2da      	uxtb	r2, r3
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df4c:	0e1b      	lsrs	r3, r3, #24
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	f003 0303 	and.w	r3, r3, #3
 800df54:	b2da      	uxtb	r2, r3
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df5e:	0c1b      	lsrs	r3, r3, #16
 800df60:	b2da      	uxtb	r2, r3
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df6a:	0a1b      	lsrs	r3, r3, #8
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df76:	b2da      	uxtb	r2, r3
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df80:	0d1b      	lsrs	r3, r3, #20
 800df82:	b29a      	uxth	r2, r3
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df8c:	0c1b      	lsrs	r3, r3, #16
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 030f 	and.w	r3, r3, #15
 800df94:	b2da      	uxtb	r2, r3
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df9e:	0bdb      	lsrs	r3, r3, #15
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfb0:	0b9b      	lsrs	r3, r3, #14
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfc2:	0b5b      	lsrs	r3, r3, #13
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfd4:	0b1b      	lsrs	r3, r3, #12
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d163      	bne.n	800e0b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dff4:	009a      	lsls	r2, r3, #2
 800dff6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dffa:	4013      	ands	r3, r2
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e000:	0f92      	lsrs	r2, r2, #30
 800e002:	431a      	orrs	r2, r3
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e00c:	0edb      	lsrs	r3, r3, #27
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	f003 0307 	and.w	r3, r3, #7
 800e014:	b2da      	uxtb	r2, r3
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e01e:	0e1b      	lsrs	r3, r3, #24
 800e020:	b2db      	uxtb	r3, r3
 800e022:	f003 0307 	and.w	r3, r3, #7
 800e026:	b2da      	uxtb	r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e030:	0d5b      	lsrs	r3, r3, #21
 800e032:	b2db      	uxtb	r3, r3
 800e034:	f003 0307 	and.w	r3, r3, #7
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e042:	0c9b      	lsrs	r3, r3, #18
 800e044:	b2db      	uxtb	r3, r3
 800e046:	f003 0307 	and.w	r3, r3, #7
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e054:	0bdb      	lsrs	r3, r3, #15
 800e056:	b2db      	uxtb	r3, r3
 800e058:	f003 0307 	and.w	r3, r3, #7
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	691b      	ldr	r3, [r3, #16]
 800e066:	1c5a      	adds	r2, r3, #1
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	7e1b      	ldrb	r3, [r3, #24]
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0307 	and.w	r3, r3, #7
 800e076:	3302      	adds	r3, #2
 800e078:	2201      	movs	r2, #1
 800e07a:	fa02 f303 	lsl.w	r3, r2, r3
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e082:	fb03 f202 	mul.w	r2, r3, r2
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	7a1b      	ldrb	r3, [r3, #8]
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	f003 030f 	and.w	r3, r3, #15
 800e094:	2201      	movs	r2, #1
 800e096:	409a      	lsls	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e0a4:	0a52      	lsrs	r2, r2, #9
 800e0a6:	fb03 f202 	mul.w	r2, r3, r2
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0b4:	655a      	str	r2, [r3, #84]	; 0x54
 800e0b6:	e031      	b.n	800e11c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d11d      	bne.n	800e0fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0c4:	041b      	lsls	r3, r3, #16
 800e0c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ce:	0c1b      	lsrs	r3, r3, #16
 800e0d0:	431a      	orrs	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	691b      	ldr	r3, [r3, #16]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	029a      	lsls	r2, r3, #10
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	655a      	str	r2, [r3, #84]	; 0x54
 800e0fa:	e00f      	b.n	800e11c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a58      	ldr	r2, [pc, #352]	; (800e264 <HAL_SD_GetCardCSD+0x344>)
 800e102:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e108:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e09d      	b.n	800e258 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e120:	0b9b      	lsrs	r3, r3, #14
 800e122:	b2db      	uxtb	r3, r3
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e132:	09db      	lsrs	r3, r3, #7
 800e134:	b2db      	uxtb	r3, r3
 800e136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e154:	0fdb      	lsrs	r3, r3, #31
 800e156:	b2da      	uxtb	r2, r3
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e160:	0f5b      	lsrs	r3, r3, #29
 800e162:	b2db      	uxtb	r3, r3
 800e164:	f003 0303 	and.w	r3, r3, #3
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e172:	0e9b      	lsrs	r3, r3, #26
 800e174:	b2db      	uxtb	r3, r3
 800e176:	f003 0307 	and.w	r3, r3, #7
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e184:	0d9b      	lsrs	r3, r3, #22
 800e186:	b2db      	uxtb	r3, r3
 800e188:	f003 030f 	and.w	r3, r3, #15
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e196:	0d5b      	lsrs	r3, r3, #21
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1b2:	0c1b      	lsrs	r3, r3, #16
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1c6:	0bdb      	lsrs	r3, r3, #15
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1da:	0b9b      	lsrs	r3, r3, #14
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1ee:	0b5b      	lsrs	r3, r3, #13
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	f003 0301 	and.w	r3, r3, #1
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e202:	0b1b      	lsrs	r3, r3, #12
 800e204:	b2db      	uxtb	r3, r3
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e216:	0a9b      	lsrs	r3, r3, #10
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	f003 0303 	and.w	r3, r3, #3
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e22a:	0a1b      	lsrs	r3, r3, #8
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	f003 0303 	and.w	r3, r3, #3
 800e232:	b2da      	uxtb	r2, r3
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e23e:	085b      	lsrs	r3, r3, #1
 800e240:	b2db      	uxtb	r3, r3
 800e242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e246:	b2da      	uxtb	r2, r3
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	1fe00fff 	.word	0x1fe00fff

0800e268 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b094      	sub	sp, #80	; 0x50
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e272:	2300      	movs	r3, #0
 800e274:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b03      	cmp	r3, #3
 800e282:	d101      	bne.n	800e288 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e284:	2301      	movs	r3, #1
 800e286:	e0a7      	b.n	800e3d8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e288:	f107 0308 	add.w	r3, r7, #8
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fb62 	bl	800e958 <SD_SendSDStatus>
 800e294:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d011      	beq.n	800e2c0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a4f      	ldr	r2, [pc, #316]	; (800e3e0 <HAL_SD_GetCardStatus+0x178>)
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2aa:	431a      	orrs	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e2be:	e070      	b.n	800e3a2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	099b      	lsrs	r3, r3, #6
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	f003 0303 	and.w	r3, r3, #3
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	095b      	lsrs	r3, r3, #5
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	f003 0301 	and.w	r3, r3, #1
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	0a1b      	lsrs	r3, r3, #8
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	0e1b      	lsrs	r3, r3, #24
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	061a      	lsls	r2, r3, #24
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	021b      	lsls	r3, r3, #8
 800e302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e306:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	0a1b      	lsrs	r3, r3, #8
 800e30c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e310:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	0e1b      	lsrs	r3, r3, #24
 800e316:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	0a1b      	lsrs	r3, r3, #8
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	0d1b      	lsrs	r3, r3, #20
 800e332:	b2db      	uxtb	r3, r3
 800e334:	f003 030f 	and.w	r3, r3, #15
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	0c1b      	lsrs	r3, r3, #16
 800e342:	b29b      	uxth	r3, r3
 800e344:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e348:	b29a      	uxth	r2, r3
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	b29b      	uxth	r3, r3
 800e352:	4313      	orrs	r3, r2
 800e354:	b29a      	uxth	r2, r3
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	0a9b      	lsrs	r3, r3, #10
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e364:	b2da      	uxtb	r2, r3
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	0a1b      	lsrs	r3, r3, #8
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	f003 0303 	and.w	r3, r3, #3
 800e374:	b2da      	uxtb	r2, r3
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	091b      	lsrs	r3, r3, #4
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	f003 030f 	and.w	r3, r3, #15
 800e384:	b2da      	uxtb	r2, r3
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	b2da      	uxtb	r2, r3
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	0e1b      	lsrs	r3, r3, #24
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f004 f9e2 	bl	8012774 <SDMMC_CmdBlockLength>
 800e3b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00d      	beq.n	800e3d4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a08      	ldr	r2, [pc, #32]	; (800e3e0 <HAL_SD_GetCardStatus+0x178>)
 800e3be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3c4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e3d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3750      	adds	r7, #80	; 0x50
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	1fe00fff 	.word	0x1fe00fff

0800e3e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e43c:	b590      	push	{r4, r7, lr}
 800e43e:	b08d      	sub	sp, #52	; 0x34
 800e440:	af02      	add	r7, sp, #8
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2203      	movs	r2, #3
 800e450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e458:	2b03      	cmp	r3, #3
 800e45a:	d02e      	beq.n	800e4ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e462:	d106      	bne.n	800e472 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	635a      	str	r2, [r3, #52]	; 0x34
 800e470:	e029      	b.n	800e4c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e478:	d10a      	bne.n	800e490 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 fb64 	bl	800eb48 <SD_WideBus_Enable>
 800e480:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	635a      	str	r2, [r3, #52]	; 0x34
 800e48e:	e01a      	b.n	800e4c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10a      	bne.n	800e4ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 fba1 	bl	800ebde <SD_WideBus_Disable>
 800e49c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	431a      	orrs	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	635a      	str	r2, [r3, #52]	; 0x34
 800e4aa:	e00c      	b.n	800e4c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	635a      	str	r2, [r3, #52]	; 0x34
 800e4b8:	e005      	b.n	800e4c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d007      	beq.n	800e4de <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a5f      	ldr	r2, [pc, #380]	; (800e650 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e4d4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4dc:	e096      	b.n	800e60c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e4de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e4e2:	f04f 0100 	mov.w	r1, #0
 800e4e6:	f7fd fcf5 	bl	800bed4 <HAL_RCCEx_GetPeriphCLKFreq>
 800e4ea:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 8083 	beq.w	800e5fa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	695a      	ldr	r2, [r3, #20]
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	4950      	ldr	r1, [pc, #320]	; (800e654 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e512:	fba1 1303 	umull	r1, r3, r1, r3
 800e516:	0e1b      	lsrs	r3, r3, #24
 800e518:	429a      	cmp	r2, r3
 800e51a:	d303      	bcc.n	800e524 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	695b      	ldr	r3, [r3, #20]
 800e520:	61bb      	str	r3, [r7, #24]
 800e522:	e05a      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e52c:	d103      	bne.n	800e536 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	695b      	ldr	r3, [r3, #20]
 800e532:	61bb      	str	r3, [r7, #24]
 800e534:	e051      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e53e:	d126      	bne.n	800e58e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10e      	bne.n	800e566 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	4a43      	ldr	r2, [pc, #268]	; (800e658 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d906      	bls.n	800e55e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	4a40      	ldr	r2, [pc, #256]	; (800e654 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e554:	fba2 2303 	umull	r2, r3, r2, r3
 800e558:	0e5b      	lsrs	r3, r3, #25
 800e55a:	61bb      	str	r3, [r7, #24]
 800e55c:	e03d      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	695b      	ldr	r3, [r3, #20]
 800e562:	61bb      	str	r3, [r7, #24]
 800e564:	e039      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	695b      	ldr	r3, [r3, #20]
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	69fa      	ldr	r2, [r7, #28]
 800e56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e572:	4a39      	ldr	r2, [pc, #228]	; (800e658 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d906      	bls.n	800e586 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	4a36      	ldr	r2, [pc, #216]	; (800e654 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e57c:	fba2 2303 	umull	r2, r3, r2, r3
 800e580:	0e5b      	lsrs	r3, r3, #25
 800e582:	61bb      	str	r3, [r7, #24]
 800e584:	e029      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	61bb      	str	r3, [r7, #24]
 800e58c:	e025      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d10e      	bne.n	800e5b4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	4a30      	ldr	r2, [pc, #192]	; (800e65c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d906      	bls.n	800e5ac <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	4a2c      	ldr	r2, [pc, #176]	; (800e654 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a6:	0e1b      	lsrs	r3, r3, #24
 800e5a8:	61bb      	str	r3, [r7, #24]
 800e5aa:	e016      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	695b      	ldr	r3, [r3, #20]
 800e5b0:	61bb      	str	r3, [r7, #24]
 800e5b2:	e012      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	695b      	ldr	r3, [r3, #20]
 800e5b8:	005b      	lsls	r3, r3, #1
 800e5ba:	69fa      	ldr	r2, [r7, #28]
 800e5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5c0:	4a26      	ldr	r2, [pc, #152]	; (800e65c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d906      	bls.n	800e5d4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	4a22      	ldr	r2, [pc, #136]	; (800e654 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ce:	0e1b      	lsrs	r3, r3, #24
 800e5d0:	61bb      	str	r3, [r7, #24]
 800e5d2:	e002      	b.n	800e5da <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	695b      	ldr	r3, [r3, #20]
 800e5d8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681c      	ldr	r4, [r3, #0]
 800e5de:	466a      	mov	r2, sp
 800e5e0:	f107 0314 	add.w	r3, r7, #20
 800e5e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e5e8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e5ec:	f107 0308 	add.w	r3, r7, #8
 800e5f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f003 ffe0 	bl	80125b8 <SDMMC_Init>
 800e5f8:	e008      	b.n	800e60c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e614:	4618      	mov	r0, r3
 800e616:	f004 f8ad 	bl	8012774 <SDMMC_CmdBlockLength>
 800e61a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00c      	beq.n	800e63c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a0a      	ldr	r2, [pc, #40]	; (800e650 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e628:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e62e:	6a3b      	ldr	r3, [r7, #32]
 800e630:	431a      	orrs	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e636:	2301      	movs	r3, #1
 800e638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e648:	4618      	mov	r0, r3
 800e64a:	372c      	adds	r7, #44	; 0x2c
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd90      	pop	{r4, r7, pc}
 800e650:	1fe00fff 	.word	0x1fe00fff
 800e654:	55e63b89 	.word	0x55e63b89
 800e658:	02faf080 	.word	0x02faf080
 800e65c:	017d7840 	.word	0x017d7840

0800e660 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e668:	2300      	movs	r3, #0
 800e66a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e66c:	f107 030c 	add.w	r3, r7, #12
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fa40 	bl	800eaf8 <SD_SendStatus>
 800e678:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d005      	beq.n	800e68c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	431a      	orrs	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	0a5b      	lsrs	r3, r3, #9
 800e690:	f003 030f 	and.w	r3, r3, #15
 800e694:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e696:	693b      	ldr	r3, [r7, #16]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b090      	sub	sp, #64	; 0x40
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e6ac:	f7f5 fb86 	bl	8003dbc <HAL_GetTick>
 800e6b0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f003 ffd7 	bl	801266a <SDMMC_GetPowerState>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d102      	bne.n	800e6c8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e6c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e6c6:	e0b5      	b.n	800e834 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6cc:	2b03      	cmp	r3, #3
 800e6ce:	d02e      	beq.n	800e72e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f004 fa22 	bl	8012b1e <SDMMC_CmdSendCID>
 800e6da:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <SD_InitCard+0x46>
    {
      return errorstate;
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	e0a6      	b.n	800e834 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f004 f802 	bl	80126f6 <SDMMC_GetResponse>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2104      	movs	r1, #4
 800e6fe:	4618      	mov	r0, r3
 800e700:	f003 fff9 	bl	80126f6 <SDMMC_GetResponse>
 800e704:	4602      	mov	r2, r0
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2108      	movs	r1, #8
 800e710:	4618      	mov	r0, r3
 800e712:	f003 fff0 	bl	80126f6 <SDMMC_GetResponse>
 800e716:	4602      	mov	r2, r0
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	210c      	movs	r1, #12
 800e722:	4618      	mov	r0, r3
 800e724:	f003 ffe7 	bl	80126f6 <SDMMC_GetResponse>
 800e728:	4602      	mov	r2, r0
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e732:	2b03      	cmp	r3, #3
 800e734:	d01d      	beq.n	800e772 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e736:	e019      	b.n	800e76c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f107 020a 	add.w	r2, r7, #10
 800e740:	4611      	mov	r1, r2
 800e742:	4618      	mov	r0, r3
 800e744:	f004 fa2a 	bl	8012b9c <SDMMC_CmdSetRelAdd>
 800e748:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	e06f      	b.n	800e834 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e754:	f7f5 fb32 	bl	8003dbc <HAL_GetTick>
 800e758:	4602      	mov	r2, r0
 800e75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	f241 3287 	movw	r2, #4999	; 0x1387
 800e762:	4293      	cmp	r3, r2
 800e764:	d902      	bls.n	800e76c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e766:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e76a:	e063      	b.n	800e834 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e76c:	897b      	ldrh	r3, [r7, #10]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d0e2      	beq.n	800e738 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e776:	2b03      	cmp	r3, #3
 800e778:	d036      	beq.n	800e7e8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e77a:	897b      	ldrh	r3, [r7, #10]
 800e77c:	461a      	mov	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e78a:	041b      	lsls	r3, r3, #16
 800e78c:	4619      	mov	r1, r3
 800e78e:	4610      	mov	r0, r2
 800e790:	f004 f9e4 	bl	8012b5c <SDMMC_CmdSendCSD>
 800e794:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <SD_InitCard+0x100>
    {
      return errorstate;
 800e79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79e:	e049      	b.n	800e834 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f003 ffa5 	bl	80126f6 <SDMMC_GetResponse>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2104      	movs	r1, #4
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f003 ff9c 	bl	80126f6 <SDMMC_GetResponse>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2108      	movs	r1, #8
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f003 ff93 	bl	80126f6 <SDMMC_GetResponse>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	210c      	movs	r1, #12
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f003 ff8a 	bl	80126f6 <SDMMC_GetResponse>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2104      	movs	r1, #4
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f003 ff81 	bl	80126f6 <SDMMC_GetResponse>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	0d1a      	lsrs	r2, r3, #20
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e7fc:	f107 030c 	add.w	r3, r7, #12
 800e800:	4619      	mov	r1, r3
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fb8c 	bl	800df20 <HAL_SD_GetCardCSD>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d002      	beq.n	800e814 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e80e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e812:	e00f      	b.n	800e834 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e81c:	041b      	lsls	r3, r3, #16
 800e81e:	4619      	mov	r1, r3
 800e820:	4610      	mov	r0, r2
 800e822:	f004 f893 	bl	801294c <SDMMC_CmdSelDesel>
 800e826:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <SD_InitCard+0x192>
  {
    return errorstate;
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	e000      	b.n	800e834 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3740      	adds	r7, #64	; 0x40
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e844:	2300      	movs	r3, #0
 800e846:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e848:	2300      	movs	r3, #0
 800e84a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e84c:	2300      	movs	r3, #0
 800e84e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4618      	mov	r0, r3
 800e856:	f004 f89c 	bl	8012992 <SDMMC_CmdGoIdleState>
 800e85a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	e072      	b.n	800e94c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f004 f8af 	bl	80129ce <SDMMC_CmdOperCond>
 800e870:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e878:	d10d      	bne.n	800e896 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4618      	mov	r0, r3
 800e886:	f004 f884 	bl	8012992 <SDMMC_CmdGoIdleState>
 800e88a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d004      	beq.n	800e89c <SD_PowerON+0x60>
    {
      return errorstate;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	e05a      	b.n	800e94c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2201      	movs	r2, #1
 800e89a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d137      	bne.n	800e914 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f004 f8af 	bl	8012a0e <SDMMC_CmdAppCommand>
 800e8b0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d02d      	beq.n	800e914 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e8bc:	e046      	b.n	800e94c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f004 f8a2 	bl	8012a0e <SDMMC_CmdAppCommand>
 800e8ca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	e03a      	b.n	800e94c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	491e      	ldr	r1, [pc, #120]	; (800e954 <SD_PowerON+0x118>)
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f004 f8b9 	bl	8012a54 <SDMMC_CmdAppOperCommand>
 800e8e2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d002      	beq.n	800e8f0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e8ee:	e02d      	b.n	800e94c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f003 fefd 	bl	80126f6 <SDMMC_GetResponse>
 800e8fc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	0fdb      	lsrs	r3, r3, #31
 800e902:	2b01      	cmp	r3, #1
 800e904:	d101      	bne.n	800e90a <SD_PowerON+0xce>
 800e906:	2301      	movs	r3, #1
 800e908:	e000      	b.n	800e90c <SD_PowerON+0xd0>
 800e90a:	2300      	movs	r3, #0
 800e90c:	613b      	str	r3, [r7, #16]

    count++;
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	3301      	adds	r3, #1
 800e912:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d802      	bhi.n	800e924 <SD_PowerON+0xe8>
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d0cc      	beq.n	800e8be <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d902      	bls.n	800e934 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e92e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e932:	e00b      	b.n	800e94c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	c1100000 	.word	0xc1100000

0800e958 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08c      	sub	sp, #48	; 0x30
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e962:	f7f5 fa2b 	bl	8003dbc <HAL_GetTick>
 800e966:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2100      	movs	r1, #0
 800e972:	4618      	mov	r0, r3
 800e974:	f003 febf 	bl	80126f6 <SDMMC_GetResponse>
 800e978:	4603      	mov	r3, r0
 800e97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e97e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e982:	d102      	bne.n	800e98a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e988:	e0b0      	b.n	800eaec <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2140      	movs	r1, #64	; 0x40
 800e990:	4618      	mov	r0, r3
 800e992:	f003 feef 	bl	8012774 <SDMMC_CmdBlockLength>
 800e996:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e998:	6a3b      	ldr	r3, [r7, #32]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d005      	beq.n	800e9aa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e9a6:	6a3b      	ldr	r3, [r7, #32]
 800e9a8:	e0a0      	b.n	800eaec <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9b2:	041b      	lsls	r3, r3, #16
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	4610      	mov	r0, r2
 800e9b8:	f004 f829 	bl	8012a0e <SDMMC_CmdAppCommand>
 800e9bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9be:	6a3b      	ldr	r3, [r7, #32]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d005      	beq.n	800e9d0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e9cc:	6a3b      	ldr	r3, [r7, #32]
 800e9ce:	e08d      	b.n	800eaec <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e9d6:	2340      	movs	r3, #64	; 0x40
 800e9d8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e9da:	2360      	movs	r3, #96	; 0x60
 800e9dc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e9de:	2302      	movs	r3, #2
 800e9e0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f107 0208 	add.w	r2, r7, #8
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f003 fe91 	bl	801271c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f004 f911 	bl	8012c26 <SDMMC_CmdStatusRegister>
 800ea04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea06:	6a3b      	ldr	r3, [r7, #32]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d02b      	beq.n	800ea64 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	e069      	b.n	800eaec <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d013      	beq.n	800ea4e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ea26:	2300      	movs	r3, #0
 800ea28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea2a:	e00d      	b.n	800ea48 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f003 fdeb 	bl	801260c <SDMMC_ReadFIFO>
 800ea36:	4602      	mov	r2, r0
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	601a      	str	r2, [r3, #0]
        pData++;
 800ea3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3e:	3304      	adds	r3, #4
 800ea40:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	3301      	adds	r3, #1
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	2b07      	cmp	r3, #7
 800ea4c:	d9ee      	bls.n	800ea2c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea4e:	f7f5 f9b5 	bl	8003dbc <HAL_GetTick>
 800ea52:	4602      	mov	r2, r0
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5c:	d102      	bne.n	800ea64 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea62:	e043      	b.n	800eaec <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea6a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d0d2      	beq.n	800ea18 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea78:	f003 0308 	and.w	r3, r3, #8
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d001      	beq.n	800ea84 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ea80:	2308      	movs	r3, #8
 800ea82:	e033      	b.n	800eaec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d001      	beq.n	800ea96 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea92:	2302      	movs	r3, #2
 800ea94:	e02a      	b.n	800eaec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea9c:	f003 0320 	and.w	r3, r3, #32
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d017      	beq.n	800ead4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800eaa4:	2320      	movs	r3, #32
 800eaa6:	e021      	b.n	800eaec <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f003 fdad 	bl	801260c <SDMMC_ReadFIFO>
 800eab2:	4602      	mov	r2, r0
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	601a      	str	r2, [r3, #0]
    pData++;
 800eab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaba:	3304      	adds	r3, #4
 800eabc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eabe:	f7f5 f97d 	bl	8003dbc <HAL_GetTick>
 800eac2:	4602      	mov	r2, r0
 800eac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eacc:	d102      	bne.n	800ead4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eace:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ead2:	e00b      	b.n	800eaec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1e2      	bne.n	800eaa8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a03      	ldr	r2, [pc, #12]	; (800eaf4 <SD_SendSDStatus+0x19c>)
 800eae8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3730      	adds	r7, #48	; 0x30
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	18000f3a 	.word	0x18000f3a

0800eaf8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d102      	bne.n	800eb0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800eb08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb0c:	e018      	b.n	800eb40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb16:	041b      	lsls	r3, r3, #16
 800eb18:	4619      	mov	r1, r3
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	f004 f860 	bl	8012be0 <SDMMC_CmdSendStatus>
 800eb20:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <SD_SendStatus+0x34>
  {
    return errorstate;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	e009      	b.n	800eb40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2100      	movs	r1, #0
 800eb32:	4618      	mov	r0, r3
 800eb34:	f003 fddf 	bl	80126f6 <SDMMC_GetResponse>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb50:	2300      	movs	r3, #0
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	2300      	movs	r3, #0
 800eb56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f003 fdc9 	bl	80126f6 <SDMMC_GetResponse>
 800eb64:	4603      	mov	r3, r0
 800eb66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb6e:	d102      	bne.n	800eb76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb74:	e02f      	b.n	800ebd6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb76:	f107 030c 	add.w	r3, r7, #12
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 f879 	bl	800ec74 <SD_FindSCR>
 800eb82:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	e023      	b.n	800ebd6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d01c      	beq.n	800ebd2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba0:	041b      	lsls	r3, r3, #16
 800eba2:	4619      	mov	r1, r3
 800eba4:	4610      	mov	r0, r2
 800eba6:	f003 ff32 	bl	8012a0e <SDMMC_CmdAppCommand>
 800ebaa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	e00f      	b.n	800ebd6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2102      	movs	r1, #2
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f003 ff69 	bl	8012a94 <SDMMC_CmdBusWidth>
 800ebc2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	e003      	b.n	800ebd6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	e001      	b.n	800ebd6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ebd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b086      	sub	sp, #24
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	60fb      	str	r3, [r7, #12]
 800ebea:	2300      	movs	r3, #0
 800ebec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f003 fd7e 	bl	80126f6 <SDMMC_GetResponse>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec04:	d102      	bne.n	800ec0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ec06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec0a:	e02f      	b.n	800ec6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ec0c:	f107 030c 	add.w	r3, r7, #12
 800ec10:	4619      	mov	r1, r3
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f82e 	bl	800ec74 <SD_FindSCR>
 800ec18:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d001      	beq.n	800ec24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	e023      	b.n	800ec6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d01c      	beq.n	800ec68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec36:	041b      	lsls	r3, r3, #16
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	f003 fee7 	bl	8012a0e <SDMMC_CmdAppCommand>
 800ec40:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d001      	beq.n	800ec4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	e00f      	b.n	800ec6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2100      	movs	r1, #0
 800ec52:	4618      	mov	r0, r3
 800ec54:	f003 ff1e 	bl	8012a94 <SDMMC_CmdBusWidth>
 800ec58:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d001      	beq.n	800ec64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	e003      	b.n	800ec6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ec64:	2300      	movs	r3, #0
 800ec66:	e001      	b.n	800ec6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ec68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3718      	adds	r7, #24
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08e      	sub	sp, #56	; 0x38
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ec7e:	f7f5 f89d 	bl	8003dbc <HAL_GetTick>
 800ec82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ec88:	2300      	movs	r3, #0
 800ec8a:	60bb      	str	r3, [r7, #8]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2108      	movs	r1, #8
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f003 fd6a 	bl	8012774 <SDMMC_CmdBlockLength>
 800eca0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d001      	beq.n	800ecac <SD_FindSCR+0x38>
  {
    return errorstate;
 800eca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecaa:	e0ad      	b.n	800ee08 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecb4:	041b      	lsls	r3, r3, #16
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	4610      	mov	r0, r2
 800ecba:	f003 fea8 	bl	8012a0e <SDMMC_CmdAppCommand>
 800ecbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d001      	beq.n	800ecca <SD_FindSCR+0x56>
  {
    return errorstate;
 800ecc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc8:	e09e      	b.n	800ee08 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ecca:	f04f 33ff 	mov.w	r3, #4294967295
 800ecce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ecd0:	2308      	movs	r3, #8
 800ecd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ecd4:	2330      	movs	r3, #48	; 0x30
 800ecd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ecd8:	2302      	movs	r3, #2
 800ecda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ece0:	2301      	movs	r3, #1
 800ece2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f107 0210 	add.w	r2, r7, #16
 800ecec:	4611      	mov	r1, r2
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f003 fd14 	bl	801271c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f003 feee 	bl	8012ada <SDMMC_CmdSendSCR>
 800ecfe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d027      	beq.n	800ed56 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ed06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed08:	e07e      	b.n	800ee08 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d113      	bne.n	800ed40 <SD_FindSCR+0xcc>
 800ed18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d110      	bne.n	800ed40 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f003 fc72 	bl	801260c <SDMMC_ReadFIFO>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f003 fc6b 	bl	801260c <SDMMC_ReadFIFO>
 800ed36:	4603      	mov	r3, r0
 800ed38:	60fb      	str	r3, [r7, #12]
      index++;
 800ed3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ed40:	f7f5 f83c 	bl	8003dbc <HAL_GetTick>
 800ed44:	4602      	mov	r2, r0
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	1ad3      	subs	r3, r2, r3
 800ed4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4e:	d102      	bne.n	800ed56 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ed50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed54:	e058      	b.n	800ee08 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed5c:	f240 532a 	movw	r3, #1322	; 0x52a
 800ed60:	4013      	ands	r3, r2
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d0d1      	beq.n	800ed0a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed6c:	f003 0308 	and.w	r3, r3, #8
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d005      	beq.n	800ed80 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2208      	movs	r2, #8
 800ed7a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ed7c:	2308      	movs	r3, #8
 800ed7e:	e043      	b.n	800ee08 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed86:	f003 0302 	and.w	r3, r3, #2
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d005      	beq.n	800ed9a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2202      	movs	r2, #2
 800ed94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ed96:	2302      	movs	r3, #2
 800ed98:	e036      	b.n	800ee08 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda0:	f003 0320 	and.w	r3, r3, #32
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d005      	beq.n	800edb4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2220      	movs	r2, #32
 800edae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800edb0:	2320      	movs	r3, #32
 800edb2:	e029      	b.n	800ee08 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a15      	ldr	r2, [pc, #84]	; (800ee10 <SD_FindSCR+0x19c>)
 800edba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	061a      	lsls	r2, r3, #24
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	021b      	lsls	r3, r3, #8
 800edc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800edc8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	0a1b      	lsrs	r3, r3, #8
 800edce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800edd2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	0e1b      	lsrs	r3, r3, #24
 800edd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eddc:	601a      	str	r2, [r3, #0]
    scr++;
 800edde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede0:	3304      	adds	r3, #4
 800ede2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	061a      	lsls	r2, r3, #24
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	021b      	lsls	r3, r3, #8
 800edec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800edf0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	0a1b      	lsrs	r3, r3, #8
 800edf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800edfa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	0e1b      	lsrs	r3, r3, #24
 800ee00:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3738      	adds	r7, #56	; 0x38
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	18000f3a 	.word	0x18000f3a

0800ee14 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee20:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee26:	2b1f      	cmp	r3, #31
 800ee28:	d936      	bls.n	800ee98 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	617b      	str	r3, [r7, #20]
 800ee2e:	e027      	b.n	800ee80 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f003 fbe9 	bl	801260c <SDMMC_ReadFIFO>
 800ee3a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	b2da      	uxtb	r2, r3
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	3301      	adds	r3, #1
 800ee48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	0a1b      	lsrs	r3, r3, #8
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	3301      	adds	r3, #1
 800ee58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	0c1b      	lsrs	r3, r3, #16
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	3301      	adds	r3, #1
 800ee68:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	0e1b      	lsrs	r3, r3, #24
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	3301      	adds	r3, #1
 800ee78:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	617b      	str	r3, [r7, #20]
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	2b07      	cmp	r3, #7
 800ee84:	d9d4      	bls.n	800ee30 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee90:	f1a3 0220 	sub.w	r2, r3, #32
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ee98:	bf00      	nop
 800ee9a:	3718      	adds	r7, #24
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	69db      	ldr	r3, [r3, #28]
 800eeac:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	2b1f      	cmp	r3, #31
 800eeb4:	d93a      	bls.n	800ef2c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	617b      	str	r3, [r7, #20]
 800eeba:	e02b      	b.n	800ef14 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	3301      	adds	r3, #1
 800eec6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	021a      	lsls	r2, r3, #8
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	4313      	orrs	r3, r2
 800eed2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	3301      	adds	r3, #1
 800eed8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	041a      	lsls	r2, r3, #16
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	3301      	adds	r3, #1
 800eeea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	061a      	lsls	r2, r3, #24
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	4313      	orrs	r3, r2
 800eef6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	3301      	adds	r3, #1
 800eefc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f107 020c 	add.w	r2, r7, #12
 800ef06:	4611      	mov	r1, r2
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f003 fb8c 	bl	8012626 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	3301      	adds	r3, #1
 800ef12:	617b      	str	r3, [r7, #20]
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	2b07      	cmp	r3, #7
 800ef18:	d9d0      	bls.n	800eebc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	693a      	ldr	r2, [r7, #16]
 800ef1e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6a1b      	ldr	r3, [r3, #32]
 800ef24:	f1a3 0220 	sub.w	r2, r3, #32
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	621a      	str	r2, [r3, #32]
  }
}
 800ef2c:	bf00      	nop
 800ef2e:	3718      	adds	r7, #24
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ef78:	bf00      	nop
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d101      	bne.n	800ef96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ef92:	2301      	movs	r3, #1
 800ef94:	e10f      	b.n	800f1b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a87      	ldr	r2, [pc, #540]	; (800f1c0 <HAL_SPI_Init+0x23c>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d00f      	beq.n	800efc6 <HAL_SPI_Init+0x42>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a86      	ldr	r2, [pc, #536]	; (800f1c4 <HAL_SPI_Init+0x240>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d00a      	beq.n	800efc6 <HAL_SPI_Init+0x42>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a84      	ldr	r2, [pc, #528]	; (800f1c8 <HAL_SPI_Init+0x244>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d005      	beq.n	800efc6 <HAL_SPI_Init+0x42>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	2b0f      	cmp	r3, #15
 800efc0:	d901      	bls.n	800efc6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800efc2:	2301      	movs	r3, #1
 800efc4:	e0f7      	b.n	800f1b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fd5a 	bl	800fa80 <SPI_GetPacketSize>
 800efcc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4a7b      	ldr	r2, [pc, #492]	; (800f1c0 <HAL_SPI_Init+0x23c>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d00c      	beq.n	800eff2 <HAL_SPI_Init+0x6e>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a79      	ldr	r2, [pc, #484]	; (800f1c4 <HAL_SPI_Init+0x240>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d007      	beq.n	800eff2 <HAL_SPI_Init+0x6e>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a78      	ldr	r2, [pc, #480]	; (800f1c8 <HAL_SPI_Init+0x244>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d002      	beq.n	800eff2 <HAL_SPI_Init+0x6e>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2b08      	cmp	r3, #8
 800eff0:	d811      	bhi.n	800f016 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eff6:	4a72      	ldr	r2, [pc, #456]	; (800f1c0 <HAL_SPI_Init+0x23c>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d009      	beq.n	800f010 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a70      	ldr	r2, [pc, #448]	; (800f1c4 <HAL_SPI_Init+0x240>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d004      	beq.n	800f010 <HAL_SPI_Init+0x8c>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a6f      	ldr	r2, [pc, #444]	; (800f1c8 <HAL_SPI_Init+0x244>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d104      	bne.n	800f01a <HAL_SPI_Init+0x96>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b10      	cmp	r3, #16
 800f014:	d901      	bls.n	800f01a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f016:	2301      	movs	r3, #1
 800f018:	e0cd      	b.n	800f1b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f020:	b2db      	uxtb	r3, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d106      	bne.n	800f034 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7f4 f8dc 	bl	80031ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2202      	movs	r2, #2
 800f038:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f022 0201 	bic.w	r2, r2, #1
 800f04a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f056:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f060:	d119      	bne.n	800f096 <HAL_SPI_Init+0x112>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f06a:	d103      	bne.n	800f074 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f070:	2b00      	cmp	r3, #0
 800f072:	d008      	beq.n	800f086 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10c      	bne.n	800f096 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f084:	d107      	bne.n	800f096 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f094:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00f      	beq.n	800f0c2 <HAL_SPI_Init+0x13e>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	2b06      	cmp	r3, #6
 800f0a8:	d90b      	bls.n	800f0c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	430a      	orrs	r2, r1
 800f0be:	601a      	str	r2, [r3, #0]
 800f0c0:	e007      	b.n	800f0d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	69da      	ldr	r2, [r3, #28]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0da:	431a      	orrs	r2, r3
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	431a      	orrs	r2, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0e4:	ea42 0103 	orr.w	r1, r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	68da      	ldr	r2, [r3, #12]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	430a      	orrs	r2, r1
 800f0f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fc:	431a      	orrs	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f102:	431a      	orrs	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	699b      	ldr	r3, [r3, #24]
 800f108:	431a      	orrs	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	431a      	orrs	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	431a      	orrs	r2, r3
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a1b      	ldr	r3, [r3, #32]
 800f11a:	431a      	orrs	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	431a      	orrs	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f126:	431a      	orrs	r2, r3
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	431a      	orrs	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f132:	ea42 0103 	orr.w	r1, r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	430a      	orrs	r2, r1
 800f140:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d113      	bne.n	800f172 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f15c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f170:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f022 0201 	bic.w	r2, r2, #1
 800f180:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00a      	beq.n	800f1a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	430a      	orrs	r2, r1
 800f1a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	40013000 	.word	0x40013000
 800f1c4:	40003800 	.word	0x40003800
 800f1c8:	40003c00 	.word	0x40003c00

0800f1cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08a      	sub	sp, #40	; 0x28
 800f1d0:	af02      	add	r7, sp, #8
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	603b      	str	r3, [r7, #0]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	3320      	adds	r3, #32
 800f1e2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d101      	bne.n	800f1f6 <HAL_SPI_Transmit+0x2a>
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	e1e1      	b.n	800f5ba <HAL_SPI_Transmit+0x3ee>
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f1fe:	f7f4 fddd 	bl	8003dbc <HAL_GetTick>
 800f202:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d007      	beq.n	800f220 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f210:	2302      	movs	r3, #2
 800f212:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f21c:	7efb      	ldrb	r3, [r7, #27]
 800f21e:	e1cc      	b.n	800f5ba <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d002      	beq.n	800f22c <HAL_SPI_Transmit+0x60>
 800f226:	88fb      	ldrh	r3, [r7, #6]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d107      	bne.n	800f23c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f22c:	2301      	movs	r3, #1
 800f22e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f238:	7efb      	ldrb	r3, [r7, #27]
 800f23a:	e1be      	b.n	800f5ba <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2203      	movs	r2, #3
 800f240:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	88fa      	ldrh	r2, [r7, #6]
 800f256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	88fa      	ldrh	r2, [r7, #6]
 800f25e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2200      	movs	r2, #0
 800f266:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2200      	movs	r2, #0
 800f274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2200      	movs	r2, #0
 800f27c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2200      	movs	r2, #0
 800f282:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	689b      	ldr	r3, [r3, #8]
 800f288:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f28c:	d108      	bne.n	800f2a0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f29c:	601a      	str	r2, [r3, #0]
 800f29e:	e009      	b.n	800f2b4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f2b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	685a      	ldr	r2, [r3, #4]
 800f2ba:	4b96      	ldr	r3, [pc, #600]	; (800f514 <HAL_SPI_Transmit+0x348>)
 800f2bc:	4013      	ands	r3, r2
 800f2be:	88f9      	ldrh	r1, [r7, #6]
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	6812      	ldr	r2, [r2, #0]
 800f2c4:	430b      	orrs	r3, r1
 800f2c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f042 0201 	orr.w	r2, r2, #1
 800f2d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f2e0:	d107      	bne.n	800f2f2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	2b0f      	cmp	r3, #15
 800f2f8:	d947      	bls.n	800f38a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f2fa:	e03f      	b.n	800f37c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	695b      	ldr	r3, [r3, #20]
 800f302:	f003 0302 	and.w	r3, r3, #2
 800f306:	2b02      	cmp	r3, #2
 800f308:	d114      	bne.n	800f334 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6812      	ldr	r2, [r2, #0]
 800f314:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f31a:	1d1a      	adds	r2, r3, #4
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f326:	b29b      	uxth	r3, r3
 800f328:	3b01      	subs	r3, #1
 800f32a:	b29a      	uxth	r2, r3
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f332:	e023      	b.n	800f37c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f334:	f7f4 fd42 	bl	8003dbc <HAL_GetTick>
 800f338:	4602      	mov	r2, r0
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	429a      	cmp	r2, r3
 800f342:	d803      	bhi.n	800f34c <HAL_SPI_Transmit+0x180>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34a:	d102      	bne.n	800f352 <HAL_SPI_Transmit+0x186>
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d114      	bne.n	800f37c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f000 fac6 	bl	800f8e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f366:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2201      	movs	r2, #1
 800f374:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f378:	2303      	movs	r3, #3
 800f37a:	e11e      	b.n	800f5ba <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f382:	b29b      	uxth	r3, r3
 800f384:	2b00      	cmp	r3, #0
 800f386:	d1b9      	bne.n	800f2fc <HAL_SPI_Transmit+0x130>
 800f388:	e0f1      	b.n	800f56e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	2b07      	cmp	r3, #7
 800f390:	f240 80e6 	bls.w	800f560 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f394:	e05d      	b.n	800f452 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	695b      	ldr	r3, [r3, #20]
 800f39c:	f003 0302 	and.w	r3, r3, #2
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d132      	bne.n	800f40a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d918      	bls.n	800f3e2 <HAL_SPI_Transmit+0x216>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d014      	beq.n	800f3e2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6812      	ldr	r2, [r2, #0]
 800f3c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3c8:	1d1a      	adds	r2, r3, #4
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	3b02      	subs	r3, #2
 800f3d8:	b29a      	uxth	r2, r3
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f3e0:	e037      	b.n	800f452 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3e6:	881a      	ldrh	r2, [r3, #0]
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3f0:	1c9a      	adds	r2, r3, #2
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	3b01      	subs	r3, #1
 800f400:	b29a      	uxth	r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f408:	e023      	b.n	800f452 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f40a:	f7f4 fcd7 	bl	8003dbc <HAL_GetTick>
 800f40e:	4602      	mov	r2, r0
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	1ad3      	subs	r3, r2, r3
 800f414:	683a      	ldr	r2, [r7, #0]
 800f416:	429a      	cmp	r2, r3
 800f418:	d803      	bhi.n	800f422 <HAL_SPI_Transmit+0x256>
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f420:	d102      	bne.n	800f428 <HAL_SPI_Transmit+0x25c>
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d114      	bne.n	800f452 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f000 fa5b 	bl	800f8e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f43c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f44e:	2303      	movs	r3, #3
 800f450:	e0b3      	b.n	800f5ba <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f458:	b29b      	uxth	r3, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d19b      	bne.n	800f396 <HAL_SPI_Transmit+0x1ca>
 800f45e:	e086      	b.n	800f56e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	695b      	ldr	r3, [r3, #20]
 800f466:	f003 0302 	and.w	r3, r3, #2
 800f46a:	2b02      	cmp	r3, #2
 800f46c:	d154      	bne.n	800f518 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f474:	b29b      	uxth	r3, r3
 800f476:	2b03      	cmp	r3, #3
 800f478:	d918      	bls.n	800f4ac <HAL_SPI_Transmit+0x2e0>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f47e:	2b40      	cmp	r3, #64	; 0x40
 800f480:	d914      	bls.n	800f4ac <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	6812      	ldr	r2, [r2, #0]
 800f48c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f492:	1d1a      	adds	r2, r3, #4
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	3b04      	subs	r3, #4
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f4aa:	e059      	b.n	800f560 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d917      	bls.n	800f4e8 <HAL_SPI_Transmit+0x31c>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d013      	beq.n	800f4e8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4c4:	881a      	ldrh	r2, [r3, #0]
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4ce:	1c9a      	adds	r2, r3, #2
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	3b02      	subs	r3, #2
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f4e6:	e03b      	b.n	800f560 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	3320      	adds	r3, #32
 800f4f2:	7812      	ldrb	r2, [r2, #0]
 800f4f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f506:	b29b      	uxth	r3, r3
 800f508:	3b01      	subs	r3, #1
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f512:	e025      	b.n	800f560 <HAL_SPI_Transmit+0x394>
 800f514:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f518:	f7f4 fc50 	bl	8003dbc <HAL_GetTick>
 800f51c:	4602      	mov	r2, r0
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	683a      	ldr	r2, [r7, #0]
 800f524:	429a      	cmp	r2, r3
 800f526:	d803      	bhi.n	800f530 <HAL_SPI_Transmit+0x364>
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f52e:	d102      	bne.n	800f536 <HAL_SPI_Transmit+0x36a>
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d114      	bne.n	800f560 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f000 f9d4 	bl	800f8e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f54a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f55c:	2303      	movs	r3, #3
 800f55e:	e02c      	b.n	800f5ba <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f566:	b29b      	uxth	r3, r3
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f47f af79 	bne.w	800f460 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	2200      	movs	r2, #0
 800f576:	2108      	movs	r1, #8
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 fa53 	bl	800fa24 <SPI_WaitOnFlagUntilTimeout>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d007      	beq.n	800f594 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f58a:	f043 0220 	orr.w	r2, r3, #32
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f000 f9a5 	bl	800f8e4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2200      	movs	r2, #0
 800f59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e000      	b.n	800f5ba <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f5b8:	7efb      	ldrb	r3, [r7, #27]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3720      	adds	r7, #32
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop

0800f5c4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b088      	sub	sp, #32
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	603b      	str	r3, [r7, #0]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	3330      	adds	r3, #48	; 0x30
 800f5de:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d101      	bne.n	800f5ee <HAL_SPI_Receive+0x2a>
 800f5ea:	2302      	movs	r3, #2
 800f5ec:	e173      	b.n	800f8d6 <HAL_SPI_Receive+0x312>
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5f6:	f7f4 fbe1 	bl	8003dbc <HAL_GetTick>
 800f5fa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b01      	cmp	r3, #1
 800f606:	d007      	beq.n	800f618 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f608:	2302      	movs	r3, #2
 800f60a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f614:	7ffb      	ldrb	r3, [r7, #31]
 800f616:	e15e      	b.n	800f8d6 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d002      	beq.n	800f624 <HAL_SPI_Receive+0x60>
 800f61e:	88fb      	ldrh	r3, [r7, #6]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d107      	bne.n	800f634 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f624:	2301      	movs	r3, #1
 800f626:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2200      	movs	r2, #0
 800f62c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f630:	7ffb      	ldrb	r3, [r7, #31]
 800f632:	e150      	b.n	800f8d6 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2204      	movs	r2, #4
 800f638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2200      	movs	r2, #0
 800f640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	88fa      	ldrh	r2, [r7, #6]
 800f64e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	88fa      	ldrh	r2, [r7, #6]
 800f656:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2200      	movs	r2, #0
 800f65e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2200      	movs	r2, #0
 800f664:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2200      	movs	r2, #0
 800f67a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f684:	d108      	bne.n	800f698 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f694:	601a      	str	r2, [r3, #0]
 800f696:	e009      	b.n	800f6ac <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f6aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	685a      	ldr	r2, [r3, #4]
 800f6b2:	4b8b      	ldr	r3, [pc, #556]	; (800f8e0 <HAL_SPI_Receive+0x31c>)
 800f6b4:	4013      	ands	r3, r2
 800f6b6:	88f9      	ldrh	r1, [r7, #6]
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	6812      	ldr	r2, [r2, #0]
 800f6bc:	430b      	orrs	r3, r1
 800f6be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f042 0201 	orr.w	r2, r2, #1
 800f6ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6d8:	d107      	bne.n	800f6ea <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	2b0f      	cmp	r3, #15
 800f6f0:	d948      	bls.n	800f784 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f6f2:	e040      	b.n	800f776 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	695a      	ldr	r2, [r3, #20]
 800f6fa:	f248 0308 	movw	r3, #32776	; 0x8008
 800f6fe:	4013      	ands	r3, r2
 800f700:	2b00      	cmp	r3, #0
 800f702:	d014      	beq.n	800f72e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f70c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f70e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f714:	1d1a      	adds	r2, r3, #4
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f720:	b29b      	uxth	r3, r3
 800f722:	3b01      	subs	r3, #1
 800f724:	b29a      	uxth	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f72c:	e023      	b.n	800f776 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f72e:	f7f4 fb45 	bl	8003dbc <HAL_GetTick>
 800f732:	4602      	mov	r2, r0
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	1ad3      	subs	r3, r2, r3
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d803      	bhi.n	800f746 <HAL_SPI_Receive+0x182>
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f744:	d102      	bne.n	800f74c <HAL_SPI_Receive+0x188>
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d114      	bne.n	800f776 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 f8c9 	bl	800f8e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2200      	movs	r2, #0
 800f756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f760:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2201      	movs	r2, #1
 800f76e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f772:	2303      	movs	r3, #3
 800f774:	e0af      	b.n	800f8d6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1b8      	bne.n	800f6f4 <HAL_SPI_Receive+0x130>
 800f782:	e095      	b.n	800f8b0 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	2b07      	cmp	r3, #7
 800f78a:	f240 808b 	bls.w	800f8a4 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f78e:	e03f      	b.n	800f810 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	695b      	ldr	r3, [r3, #20]
 800f796:	f003 0301 	and.w	r3, r3, #1
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d114      	bne.n	800f7c8 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7a2:	69ba      	ldr	r2, [r7, #24]
 800f7a4:	8812      	ldrh	r2, [r2, #0]
 800f7a6:	b292      	uxth	r2, r2
 800f7a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7ae:	1c9a      	adds	r2, r3, #2
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f7c6:	e023      	b.n	800f810 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7c8:	f7f4 faf8 	bl	8003dbc <HAL_GetTick>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	683a      	ldr	r2, [r7, #0]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d803      	bhi.n	800f7e0 <HAL_SPI_Receive+0x21c>
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7de:	d102      	bne.n	800f7e6 <HAL_SPI_Receive+0x222>
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d114      	bne.n	800f810 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f000 f87c 	bl	800f8e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2201      	movs	r2, #1
 800f808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f80c:	2303      	movs	r3, #3
 800f80e:	e062      	b.n	800f8d6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f816:	b29b      	uxth	r3, r3
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1b9      	bne.n	800f790 <HAL_SPI_Receive+0x1cc>
 800f81c:	e048      	b.n	800f8b0 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	f003 0301 	and.w	r3, r3, #1
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d117      	bne.n	800f85c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f838:	7812      	ldrb	r2, [r2, #0]
 800f83a:	b2d2      	uxtb	r2, r2
 800f83c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f84e:	b29b      	uxth	r3, r3
 800f850:	3b01      	subs	r3, #1
 800f852:	b29a      	uxth	r2, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f85a:	e023      	b.n	800f8a4 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f85c:	f7f4 faae 	bl	8003dbc <HAL_GetTick>
 800f860:	4602      	mov	r2, r0
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	1ad3      	subs	r3, r2, r3
 800f866:	683a      	ldr	r2, [r7, #0]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d803      	bhi.n	800f874 <HAL_SPI_Receive+0x2b0>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f872:	d102      	bne.n	800f87a <HAL_SPI_Receive+0x2b6>
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d114      	bne.n	800f8a4 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f000 f832 	bl	800f8e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2200      	movs	r2, #0
 800f884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f88e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2201      	movs	r2, #1
 800f89c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f8a0:	2303      	movs	r3, #3
 800f8a2:	e018      	b.n	800f8d6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d1b6      	bne.n	800f81e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f000 f817 	bl	800f8e4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d001      	beq.n	800f8d4 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e000      	b.n	800f8d6 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f8d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3720      	adds	r7, #32
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	ffff0000 	.word	0xffff0000

0800f8e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	695b      	ldr	r3, [r3, #20]
 800f8f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	699a      	ldr	r2, [r3, #24]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f042 0208 	orr.w	r2, r2, #8
 800f902:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	699a      	ldr	r2, [r3, #24]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f042 0210 	orr.w	r2, r2, #16
 800f912:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f022 0201 	bic.w	r2, r2, #1
 800f922:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6919      	ldr	r1, [r3, #16]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	4b3c      	ldr	r3, [pc, #240]	; (800fa20 <SPI_CloseTransfer+0x13c>)
 800f930:	400b      	ands	r3, r1
 800f932:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	689a      	ldr	r2, [r3, #8]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f942:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b04      	cmp	r3, #4
 800f94e:	d014      	beq.n	800f97a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f003 0320 	and.w	r3, r3, #32
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00f      	beq.n	800f97a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f960:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	699a      	ldr	r2, [r3, #24]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f042 0220 	orr.w	r2, r2, #32
 800f978:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f980:	b2db      	uxtb	r3, r3
 800f982:	2b03      	cmp	r3, #3
 800f984:	d014      	beq.n	800f9b0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d00f      	beq.n	800f9b0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f996:	f043 0204 	orr.w	r2, r3, #4
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	699a      	ldr	r2, [r3, #24]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00f      	beq.n	800f9da <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9c0:	f043 0201 	orr.w	r2, r3, #1
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	699a      	ldr	r2, [r3, #24]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d00f      	beq.n	800fa04 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9ea:	f043 0208 	orr.w	r2, r3, #8
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	699a      	ldr	r2, [r3, #24]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa02:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fa14:	bf00      	nop
 800fa16:	3714      	adds	r7, #20
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr
 800fa20:	fffffc90 	.word	0xfffffc90

0800fa24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	603b      	str	r3, [r7, #0]
 800fa30:	4613      	mov	r3, r2
 800fa32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa34:	e010      	b.n	800fa58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa36:	f7f4 f9c1 	bl	8003dbc <HAL_GetTick>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d803      	bhi.n	800fa4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4c:	d102      	bne.n	800fa54 <SPI_WaitOnFlagUntilTimeout+0x30>
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d101      	bne.n	800fa58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fa54:	2303      	movs	r3, #3
 800fa56:	e00f      	b.n	800fa78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	695a      	ldr	r2, [r3, #20]
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	4013      	ands	r3, r2
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	bf0c      	ite	eq
 800fa68:	2301      	moveq	r3, #1
 800fa6a:	2300      	movne	r3, #0
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	461a      	mov	r2, r3
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d0df      	beq.n	800fa36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fa76:	2300      	movs	r3, #0
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa8c:	095b      	lsrs	r3, r3, #5
 800fa8e:	3301      	adds	r3, #1
 800fa90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	3301      	adds	r3, #1
 800fa98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	3307      	adds	r3, #7
 800fa9e:	08db      	lsrs	r3, r3, #3
 800faa0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	fb02 f303 	mul.w	r3, r2, r3
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr

0800fab6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b082      	sub	sp, #8
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d101      	bne.n	800fac8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fac4:	2301      	movs	r3, #1
 800fac6:	e049      	b.n	800fb5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800face:	b2db      	uxtb	r3, r3
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d106      	bne.n	800fae2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7f3 fdd7 	bl	8003690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2202      	movs	r2, #2
 800fae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	3304      	adds	r3, #4
 800faf2:	4619      	mov	r1, r3
 800faf4:	4610      	mov	r0, r2
 800faf6:	f000 ff29 	bl	801094c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2201      	movs	r2, #1
 800fb06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2201      	movs	r2, #1
 800fb16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2201      	movs	r2, #1
 800fb26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2201      	movs	r2, #1
 800fb46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2201      	movs	r2, #1
 800fb56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d101      	bne.n	800fb76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb72:	2301      	movs	r3, #1
 800fb74:	e049      	b.n	800fc0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d106      	bne.n	800fb90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7f3 fbea 	bl	8003364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2202      	movs	r2, #2
 800fb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	3304      	adds	r3, #4
 800fba0:	4619      	mov	r1, r3
 800fba2:	4610      	mov	r0, r2
 800fba4:	f000 fed2 	bl	801094c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2201      	movs	r2, #1
 800fbbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2201      	movs	r2, #1
 800fc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3708      	adds	r7, #8
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
	...

0800fc14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d109      	bne.n	800fc38 <HAL_TIM_PWM_Start+0x24>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	bf14      	ite	ne
 800fc30:	2301      	movne	r3, #1
 800fc32:	2300      	moveq	r3, #0
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	e03c      	b.n	800fcb2 <HAL_TIM_PWM_Start+0x9e>
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	2b04      	cmp	r3, #4
 800fc3c:	d109      	bne.n	800fc52 <HAL_TIM_PWM_Start+0x3e>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	bf14      	ite	ne
 800fc4a:	2301      	movne	r3, #1
 800fc4c:	2300      	moveq	r3, #0
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	e02f      	b.n	800fcb2 <HAL_TIM_PWM_Start+0x9e>
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	2b08      	cmp	r3, #8
 800fc56:	d109      	bne.n	800fc6c <HAL_TIM_PWM_Start+0x58>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	bf14      	ite	ne
 800fc64:	2301      	movne	r3, #1
 800fc66:	2300      	moveq	r3, #0
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	e022      	b.n	800fcb2 <HAL_TIM_PWM_Start+0x9e>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2b0c      	cmp	r3, #12
 800fc70:	d109      	bne.n	800fc86 <HAL_TIM_PWM_Start+0x72>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	bf14      	ite	ne
 800fc7e:	2301      	movne	r3, #1
 800fc80:	2300      	moveq	r3, #0
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	e015      	b.n	800fcb2 <HAL_TIM_PWM_Start+0x9e>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2b10      	cmp	r3, #16
 800fc8a:	d109      	bne.n	800fca0 <HAL_TIM_PWM_Start+0x8c>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	bf14      	ite	ne
 800fc98:	2301      	movne	r3, #1
 800fc9a:	2300      	moveq	r3, #0
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	e008      	b.n	800fcb2 <HAL_TIM_PWM_Start+0x9e>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	bf14      	ite	ne
 800fcac:	2301      	movne	r3, #1
 800fcae:	2300      	moveq	r3, #0
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d001      	beq.n	800fcba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e0ab      	b.n	800fe12 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d104      	bne.n	800fcca <HAL_TIM_PWM_Start+0xb6>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fcc8:	e023      	b.n	800fd12 <HAL_TIM_PWM_Start+0xfe>
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	2b04      	cmp	r3, #4
 800fcce:	d104      	bne.n	800fcda <HAL_TIM_PWM_Start+0xc6>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2202      	movs	r2, #2
 800fcd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fcd8:	e01b      	b.n	800fd12 <HAL_TIM_PWM_Start+0xfe>
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	2b08      	cmp	r3, #8
 800fcde:	d104      	bne.n	800fcea <HAL_TIM_PWM_Start+0xd6>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2202      	movs	r2, #2
 800fce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fce8:	e013      	b.n	800fd12 <HAL_TIM_PWM_Start+0xfe>
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	2b0c      	cmp	r3, #12
 800fcee:	d104      	bne.n	800fcfa <HAL_TIM_PWM_Start+0xe6>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2202      	movs	r2, #2
 800fcf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fcf8:	e00b      	b.n	800fd12 <HAL_TIM_PWM_Start+0xfe>
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	2b10      	cmp	r3, #16
 800fcfe:	d104      	bne.n	800fd0a <HAL_TIM_PWM_Start+0xf6>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2202      	movs	r2, #2
 800fd04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fd08:	e003      	b.n	800fd12 <HAL_TIM_PWM_Start+0xfe>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2202      	movs	r2, #2
 800fd0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2201      	movs	r2, #1
 800fd18:	6839      	ldr	r1, [r7, #0]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f001 f992 	bl	8011044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4a3d      	ldr	r2, [pc, #244]	; (800fe1c <HAL_TIM_PWM_Start+0x208>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d013      	beq.n	800fd52 <HAL_TIM_PWM_Start+0x13e>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a3c      	ldr	r2, [pc, #240]	; (800fe20 <HAL_TIM_PWM_Start+0x20c>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d00e      	beq.n	800fd52 <HAL_TIM_PWM_Start+0x13e>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a3a      	ldr	r2, [pc, #232]	; (800fe24 <HAL_TIM_PWM_Start+0x210>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d009      	beq.n	800fd52 <HAL_TIM_PWM_Start+0x13e>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a39      	ldr	r2, [pc, #228]	; (800fe28 <HAL_TIM_PWM_Start+0x214>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d004      	beq.n	800fd52 <HAL_TIM_PWM_Start+0x13e>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a37      	ldr	r2, [pc, #220]	; (800fe2c <HAL_TIM_PWM_Start+0x218>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d101      	bne.n	800fd56 <HAL_TIM_PWM_Start+0x142>
 800fd52:	2301      	movs	r3, #1
 800fd54:	e000      	b.n	800fd58 <HAL_TIM_PWM_Start+0x144>
 800fd56:	2300      	movs	r3, #0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d007      	beq.n	800fd6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a2a      	ldr	r2, [pc, #168]	; (800fe1c <HAL_TIM_PWM_Start+0x208>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d02c      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd7e:	d027      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4a2a      	ldr	r2, [pc, #168]	; (800fe30 <HAL_TIM_PWM_Start+0x21c>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d022      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a29      	ldr	r2, [pc, #164]	; (800fe34 <HAL_TIM_PWM_Start+0x220>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d01d      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4a27      	ldr	r2, [pc, #156]	; (800fe38 <HAL_TIM_PWM_Start+0x224>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d018      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4a1f      	ldr	r2, [pc, #124]	; (800fe20 <HAL_TIM_PWM_Start+0x20c>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d013      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a23      	ldr	r2, [pc, #140]	; (800fe3c <HAL_TIM_PWM_Start+0x228>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d00e      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a1b      	ldr	r2, [pc, #108]	; (800fe24 <HAL_TIM_PWM_Start+0x210>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d009      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a1f      	ldr	r2, [pc, #124]	; (800fe40 <HAL_TIM_PWM_Start+0x22c>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d004      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1bc>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a1e      	ldr	r2, [pc, #120]	; (800fe44 <HAL_TIM_PWM_Start+0x230>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d115      	bne.n	800fdfc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	689a      	ldr	r2, [r3, #8]
 800fdd6:	4b1c      	ldr	r3, [pc, #112]	; (800fe48 <HAL_TIM_PWM_Start+0x234>)
 800fdd8:	4013      	ands	r3, r2
 800fdda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b06      	cmp	r3, #6
 800fde0:	d015      	beq.n	800fe0e <HAL_TIM_PWM_Start+0x1fa>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fde8:	d011      	beq.n	800fe0e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f042 0201 	orr.w	r2, r2, #1
 800fdf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdfa:	e008      	b.n	800fe0e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f042 0201 	orr.w	r2, r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]
 800fe0c:	e000      	b.n	800fe10 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	40010000 	.word	0x40010000
 800fe20:	40010400 	.word	0x40010400
 800fe24:	40014000 	.word	0x40014000
 800fe28:	40014400 	.word	0x40014400
 800fe2c:	40014800 	.word	0x40014800
 800fe30:	40000400 	.word	0x40000400
 800fe34:	40000800 	.word	0x40000800
 800fe38:	40000c00 	.word	0x40000c00
 800fe3c:	40001800 	.word	0x40001800
 800fe40:	4000e000 	.word	0x4000e000
 800fe44:	4000e400 	.word	0x4000e400
 800fe48:	00010007 	.word	0x00010007

0800fe4c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b086      	sub	sp, #24
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	607a      	str	r2, [r7, #4]
 800fe58:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d109      	bne.n	800fe78 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	bf0c      	ite	eq
 800fe70:	2301      	moveq	r3, #1
 800fe72:	2300      	movne	r3, #0
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	e03c      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	2b04      	cmp	r3, #4
 800fe7c:	d109      	bne.n	800fe92 <HAL_TIM_PWM_Start_DMA+0x46>
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b02      	cmp	r3, #2
 800fe88:	bf0c      	ite	eq
 800fe8a:	2301      	moveq	r3, #1
 800fe8c:	2300      	movne	r3, #0
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	e02f      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2b08      	cmp	r3, #8
 800fe96:	d109      	bne.n	800feac <HAL_TIM_PWM_Start_DMA+0x60>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b02      	cmp	r3, #2
 800fea2:	bf0c      	ite	eq
 800fea4:	2301      	moveq	r3, #1
 800fea6:	2300      	movne	r3, #0
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	e022      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	2b0c      	cmp	r3, #12
 800feb0:	d109      	bne.n	800fec6 <HAL_TIM_PWM_Start_DMA+0x7a>
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b02      	cmp	r3, #2
 800febc:	bf0c      	ite	eq
 800febe:	2301      	moveq	r3, #1
 800fec0:	2300      	movne	r3, #0
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	e015      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b10      	cmp	r3, #16
 800feca:	d109      	bne.n	800fee0 <HAL_TIM_PWM_Start_DMA+0x94>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	bf0c      	ite	eq
 800fed8:	2301      	moveq	r3, #1
 800feda:	2300      	movne	r3, #0
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	e008      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	2b02      	cmp	r3, #2
 800feea:	bf0c      	ite	eq
 800feec:	2301      	moveq	r3, #1
 800feee:	2300      	movne	r3, #0
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d001      	beq.n	800fefa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fef6:	2302      	movs	r3, #2
 800fef8:	e1ba      	b.n	8010270 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d109      	bne.n	800ff14 <HAL_TIM_PWM_Start_DMA+0xc8>
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	bf0c      	ite	eq
 800ff0c:	2301      	moveq	r3, #1
 800ff0e:	2300      	movne	r3, #0
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	e03c      	b.n	800ff8e <HAL_TIM_PWM_Start_DMA+0x142>
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	2b04      	cmp	r3, #4
 800ff18:	d109      	bne.n	800ff2e <HAL_TIM_PWM_Start_DMA+0xe2>
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	bf0c      	ite	eq
 800ff26:	2301      	moveq	r3, #1
 800ff28:	2300      	movne	r3, #0
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	e02f      	b.n	800ff8e <HAL_TIM_PWM_Start_DMA+0x142>
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	2b08      	cmp	r3, #8
 800ff32:	d109      	bne.n	800ff48 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	bf0c      	ite	eq
 800ff40:	2301      	moveq	r3, #1
 800ff42:	2300      	movne	r3, #0
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	e022      	b.n	800ff8e <HAL_TIM_PWM_Start_DMA+0x142>
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	2b0c      	cmp	r3, #12
 800ff4c:	d109      	bne.n	800ff62 <HAL_TIM_PWM_Start_DMA+0x116>
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	bf0c      	ite	eq
 800ff5a:	2301      	moveq	r3, #1
 800ff5c:	2300      	movne	r3, #0
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	e015      	b.n	800ff8e <HAL_TIM_PWM_Start_DMA+0x142>
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	2b10      	cmp	r3, #16
 800ff66:	d109      	bne.n	800ff7c <HAL_TIM_PWM_Start_DMA+0x130>
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	bf0c      	ite	eq
 800ff74:	2301      	moveq	r3, #1
 800ff76:	2300      	movne	r3, #0
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	e008      	b.n	800ff8e <HAL_TIM_PWM_Start_DMA+0x142>
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	bf0c      	ite	eq
 800ff88:	2301      	moveq	r3, #1
 800ff8a:	2300      	movne	r3, #0
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d034      	beq.n	800fffc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <HAL_TIM_PWM_Start_DMA+0x152>
 800ff98:	887b      	ldrh	r3, [r7, #2]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d101      	bne.n	800ffa2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e166      	b.n	8010270 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d104      	bne.n	800ffb2 <HAL_TIM_PWM_Start_DMA+0x166>
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2202      	movs	r2, #2
 800ffac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ffb0:	e026      	b.n	8010000 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	2b04      	cmp	r3, #4
 800ffb6:	d104      	bne.n	800ffc2 <HAL_TIM_PWM_Start_DMA+0x176>
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2202      	movs	r2, #2
 800ffbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ffc0:	e01e      	b.n	8010000 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	2b08      	cmp	r3, #8
 800ffc6:	d104      	bne.n	800ffd2 <HAL_TIM_PWM_Start_DMA+0x186>
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2202      	movs	r2, #2
 800ffcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ffd0:	e016      	b.n	8010000 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	2b0c      	cmp	r3, #12
 800ffd6:	d104      	bne.n	800ffe2 <HAL_TIM_PWM_Start_DMA+0x196>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffe0:	e00e      	b.n	8010000 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	2b10      	cmp	r3, #16
 800ffe6:	d104      	bne.n	800fff2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2202      	movs	r2, #2
 800ffec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fff0:	e006      	b.n	8010000 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2202      	movs	r2, #2
 800fff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fffa:	e001      	b.n	8010000 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800fffc:	2301      	movs	r3, #1
 800fffe:	e137      	b.n	8010270 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	2b0c      	cmp	r3, #12
 8010004:	f200 80ae 	bhi.w	8010164 <HAL_TIM_PWM_Start_DMA+0x318>
 8010008:	a201      	add	r2, pc, #4	; (adr r2, 8010010 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801000a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801000e:	bf00      	nop
 8010010:	08010045 	.word	0x08010045
 8010014:	08010165 	.word	0x08010165
 8010018:	08010165 	.word	0x08010165
 801001c:	08010165 	.word	0x08010165
 8010020:	0801008d 	.word	0x0801008d
 8010024:	08010165 	.word	0x08010165
 8010028:	08010165 	.word	0x08010165
 801002c:	08010165 	.word	0x08010165
 8010030:	080100d5 	.word	0x080100d5
 8010034:	08010165 	.word	0x08010165
 8010038:	08010165 	.word	0x08010165
 801003c:	08010165 	.word	0x08010165
 8010040:	0801011d 	.word	0x0801011d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010048:	4a8b      	ldr	r2, [pc, #556]	; (8010278 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801004a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010050:	4a8a      	ldr	r2, [pc, #552]	; (801027c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010058:	4a89      	ldr	r2, [pc, #548]	; (8010280 <HAL_TIM_PWM_Start_DMA+0x434>)
 801005a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010060:	6879      	ldr	r1, [r7, #4]
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	3334      	adds	r3, #52	; 0x34
 8010068:	461a      	mov	r2, r3
 801006a:	887b      	ldrh	r3, [r7, #2]
 801006c:	f7f5 fec4 	bl	8005df8 <HAL_DMA_Start_IT>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010076:	2301      	movs	r3, #1
 8010078:	e0fa      	b.n	8010270 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	68da      	ldr	r2, [r3, #12]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010088:	60da      	str	r2, [r3, #12]
      break;
 801008a:	e06e      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010090:	4a79      	ldr	r2, [pc, #484]	; (8010278 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010092:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010098:	4a78      	ldr	r2, [pc, #480]	; (801027c <HAL_TIM_PWM_Start_DMA+0x430>)
 801009a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a0:	4a77      	ldr	r2, [pc, #476]	; (8010280 <HAL_TIM_PWM_Start_DMA+0x434>)
 80100a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80100a8:	6879      	ldr	r1, [r7, #4]
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	3338      	adds	r3, #56	; 0x38
 80100b0:	461a      	mov	r2, r3
 80100b2:	887b      	ldrh	r3, [r7, #2]
 80100b4:	f7f5 fea0 	bl	8005df8 <HAL_DMA_Start_IT>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80100be:	2301      	movs	r3, #1
 80100c0:	e0d6      	b.n	8010270 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	68da      	ldr	r2, [r3, #12]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80100d0:	60da      	str	r2, [r3, #12]
      break;
 80100d2:	e04a      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d8:	4a67      	ldr	r2, [pc, #412]	; (8010278 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80100da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e0:	4a66      	ldr	r2, [pc, #408]	; (801027c <HAL_TIM_PWM_Start_DMA+0x430>)
 80100e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e8:	4a65      	ldr	r2, [pc, #404]	; (8010280 <HAL_TIM_PWM_Start_DMA+0x434>)
 80100ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	333c      	adds	r3, #60	; 0x3c
 80100f8:	461a      	mov	r2, r3
 80100fa:	887b      	ldrh	r3, [r7, #2]
 80100fc:	f7f5 fe7c 	bl	8005df8 <HAL_DMA_Start_IT>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d001      	beq.n	801010a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	e0b2      	b.n	8010270 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68da      	ldr	r2, [r3, #12]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010118:	60da      	str	r2, [r3, #12]
      break;
 801011a:	e026      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010120:	4a55      	ldr	r2, [pc, #340]	; (8010278 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010122:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010128:	4a54      	ldr	r2, [pc, #336]	; (801027c <HAL_TIM_PWM_Start_DMA+0x430>)
 801012a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010130:	4a53      	ldr	r2, [pc, #332]	; (8010280 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010132:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010138:	6879      	ldr	r1, [r7, #4]
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	3340      	adds	r3, #64	; 0x40
 8010140:	461a      	mov	r2, r3
 8010142:	887b      	ldrh	r3, [r7, #2]
 8010144:	f7f5 fe58 	bl	8005df8 <HAL_DMA_Start_IT>
 8010148:	4603      	mov	r3, r0
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801014e:	2301      	movs	r3, #1
 8010150:	e08e      	b.n	8010270 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	68da      	ldr	r2, [r3, #12]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010160:	60da      	str	r2, [r3, #12]
      break;
 8010162:	e002      	b.n	801016a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	75fb      	strb	r3, [r7, #23]
      break;
 8010168:	bf00      	nop
  }

  if (status == HAL_OK)
 801016a:	7dfb      	ldrb	r3, [r7, #23]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d17e      	bne.n	801026e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2201      	movs	r2, #1
 8010176:	68b9      	ldr	r1, [r7, #8]
 8010178:	4618      	mov	r0, r3
 801017a:	f000 ff63 	bl	8011044 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4a40      	ldr	r2, [pc, #256]	; (8010284 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d013      	beq.n	80101b0 <HAL_TIM_PWM_Start_DMA+0x364>
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a3e      	ldr	r2, [pc, #248]	; (8010288 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d00e      	beq.n	80101b0 <HAL_TIM_PWM_Start_DMA+0x364>
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4a3d      	ldr	r2, [pc, #244]	; (801028c <HAL_TIM_PWM_Start_DMA+0x440>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d009      	beq.n	80101b0 <HAL_TIM_PWM_Start_DMA+0x364>
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4a3b      	ldr	r2, [pc, #236]	; (8010290 <HAL_TIM_PWM_Start_DMA+0x444>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d004      	beq.n	80101b0 <HAL_TIM_PWM_Start_DMA+0x364>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	4a3a      	ldr	r2, [pc, #232]	; (8010294 <HAL_TIM_PWM_Start_DMA+0x448>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d101      	bne.n	80101b4 <HAL_TIM_PWM_Start_DMA+0x368>
 80101b0:	2301      	movs	r3, #1
 80101b2:	e000      	b.n	80101b6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80101b4:	2300      	movs	r3, #0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d007      	beq.n	80101ca <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80101c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4a2d      	ldr	r2, [pc, #180]	; (8010284 <HAL_TIM_PWM_Start_DMA+0x438>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d02c      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101dc:	d027      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4a2d      	ldr	r2, [pc, #180]	; (8010298 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d022      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4a2b      	ldr	r2, [pc, #172]	; (801029c <HAL_TIM_PWM_Start_DMA+0x450>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d01d      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4a2a      	ldr	r2, [pc, #168]	; (80102a0 <HAL_TIM_PWM_Start_DMA+0x454>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d018      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a21      	ldr	r2, [pc, #132]	; (8010288 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d013      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4a26      	ldr	r2, [pc, #152]	; (80102a4 <HAL_TIM_PWM_Start_DMA+0x458>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d00e      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4a1d      	ldr	r2, [pc, #116]	; (801028c <HAL_TIM_PWM_Start_DMA+0x440>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d009      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4a22      	ldr	r2, [pc, #136]	; (80102a8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d004      	beq.n	801022e <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4a20      	ldr	r2, [pc, #128]	; (80102ac <HAL_TIM_PWM_Start_DMA+0x460>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d115      	bne.n	801025a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	689a      	ldr	r2, [r3, #8]
 8010234:	4b1e      	ldr	r3, [pc, #120]	; (80102b0 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010236:	4013      	ands	r3, r2
 8010238:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	2b06      	cmp	r3, #6
 801023e:	d015      	beq.n	801026c <HAL_TIM_PWM_Start_DMA+0x420>
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010246:	d011      	beq.n	801026c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f042 0201 	orr.w	r2, r2, #1
 8010256:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010258:	e008      	b.n	801026c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f042 0201 	orr.w	r2, r2, #1
 8010268:	601a      	str	r2, [r3, #0]
 801026a:	e000      	b.n	801026e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801026c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801026e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3718      	adds	r7, #24
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	0801083b 	.word	0x0801083b
 801027c:	080108e3 	.word	0x080108e3
 8010280:	080107a9 	.word	0x080107a9
 8010284:	40010000 	.word	0x40010000
 8010288:	40010400 	.word	0x40010400
 801028c:	40014000 	.word	0x40014000
 8010290:	40014400 	.word	0x40014400
 8010294:	40014800 	.word	0x40014800
 8010298:	40000400 	.word	0x40000400
 801029c:	40000800 	.word	0x40000800
 80102a0:	40000c00 	.word	0x40000c00
 80102a4:	40001800 	.word	0x40001800
 80102a8:	4000e000 	.word	0x4000e000
 80102ac:	4000e400 	.word	0x4000e400
 80102b0:	00010007 	.word	0x00010007

080102b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	691b      	ldr	r3, [r3, #16]
 80102c2:	f003 0302 	and.w	r3, r3, #2
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d122      	bne.n	8010310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	f003 0302 	and.w	r3, r3, #2
 80102d4:	2b02      	cmp	r3, #2
 80102d6:	d11b      	bne.n	8010310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f06f 0202 	mvn.w	r2, #2
 80102e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2201      	movs	r2, #1
 80102e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	699b      	ldr	r3, [r3, #24]
 80102ee:	f003 0303 	and.w	r3, r3, #3
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d003      	beq.n	80102fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 fa24 	bl	8010744 <HAL_TIM_IC_CaptureCallback>
 80102fc:	e005      	b.n	801030a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 fa16 	bl	8010730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 fa27 	bl	8010758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	f003 0304 	and.w	r3, r3, #4
 801031a:	2b04      	cmp	r3, #4
 801031c:	d122      	bne.n	8010364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	f003 0304 	and.w	r3, r3, #4
 8010328:	2b04      	cmp	r3, #4
 801032a:	d11b      	bne.n	8010364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f06f 0204 	mvn.w	r2, #4
 8010334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2202      	movs	r2, #2
 801033a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	699b      	ldr	r3, [r3, #24]
 8010342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010346:	2b00      	cmp	r3, #0
 8010348:	d003      	beq.n	8010352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 f9fa 	bl	8010744 <HAL_TIM_IC_CaptureCallback>
 8010350:	e005      	b.n	801035e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 f9ec 	bl	8010730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 f9fd 	bl	8010758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2200      	movs	r2, #0
 8010362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	f003 0308 	and.w	r3, r3, #8
 801036e:	2b08      	cmp	r3, #8
 8010370:	d122      	bne.n	80103b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	f003 0308 	and.w	r3, r3, #8
 801037c:	2b08      	cmp	r3, #8
 801037e:	d11b      	bne.n	80103b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f06f 0208 	mvn.w	r2, #8
 8010388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2204      	movs	r2, #4
 801038e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	69db      	ldr	r3, [r3, #28]
 8010396:	f003 0303 	and.w	r3, r3, #3
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f9d0 	bl	8010744 <HAL_TIM_IC_CaptureCallback>
 80103a4:	e005      	b.n	80103b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 f9c2 	bl	8010730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f9d3 	bl	8010758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	f003 0310 	and.w	r3, r3, #16
 80103c2:	2b10      	cmp	r3, #16
 80103c4:	d122      	bne.n	801040c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	f003 0310 	and.w	r3, r3, #16
 80103d0:	2b10      	cmp	r3, #16
 80103d2:	d11b      	bne.n	801040c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f06f 0210 	mvn.w	r2, #16
 80103dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2208      	movs	r2, #8
 80103e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	69db      	ldr	r3, [r3, #28]
 80103ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d003      	beq.n	80103fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 f9a6 	bl	8010744 <HAL_TIM_IC_CaptureCallback>
 80103f8:	e005      	b.n	8010406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 f998 	bl	8010730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 f9a9 	bl	8010758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	f003 0301 	and.w	r3, r3, #1
 8010416:	2b01      	cmp	r3, #1
 8010418:	d10e      	bne.n	8010438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	f003 0301 	and.w	r3, r3, #1
 8010424:	2b01      	cmp	r3, #1
 8010426:	d107      	bne.n	8010438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f06f 0201 	mvn.w	r2, #1
 8010430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f972 	bl	801071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010442:	2b80      	cmp	r3, #128	; 0x80
 8010444:	d10e      	bne.n	8010464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010450:	2b80      	cmp	r3, #128	; 0x80
 8010452:	d107      	bne.n	8010464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801045c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 febc 	bl	80111dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801046e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010472:	d10e      	bne.n	8010492 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	68db      	ldr	r3, [r3, #12]
 801047a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801047e:	2b80      	cmp	r3, #128	; 0x80
 8010480:	d107      	bne.n	8010492 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801048a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 feaf 	bl	80111f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801049c:	2b40      	cmp	r3, #64	; 0x40
 801049e:	d10e      	bne.n	80104be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104aa:	2b40      	cmp	r3, #64	; 0x40
 80104ac:	d107      	bne.n	80104be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80104b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 f961 	bl	8010780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	691b      	ldr	r3, [r3, #16]
 80104c4:	f003 0320 	and.w	r3, r3, #32
 80104c8:	2b20      	cmp	r3, #32
 80104ca:	d10e      	bne.n	80104ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	f003 0320 	and.w	r3, r3, #32
 80104d6:	2b20      	cmp	r3, #32
 80104d8:	d107      	bne.n	80104ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f06f 0220 	mvn.w	r2, #32
 80104e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f000 fe6f 	bl	80111c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80104ea:	bf00      	nop
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010500:	2300      	movs	r3, #0
 8010502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801050a:	2b01      	cmp	r3, #1
 801050c:	d101      	bne.n	8010512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801050e:	2302      	movs	r3, #2
 8010510:	e0ff      	b.n	8010712 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2201      	movs	r2, #1
 8010516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2b14      	cmp	r3, #20
 801051e:	f200 80f0 	bhi.w	8010702 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010522:	a201      	add	r2, pc, #4	; (adr r2, 8010528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010528:	0801057d 	.word	0x0801057d
 801052c:	08010703 	.word	0x08010703
 8010530:	08010703 	.word	0x08010703
 8010534:	08010703 	.word	0x08010703
 8010538:	080105bd 	.word	0x080105bd
 801053c:	08010703 	.word	0x08010703
 8010540:	08010703 	.word	0x08010703
 8010544:	08010703 	.word	0x08010703
 8010548:	080105ff 	.word	0x080105ff
 801054c:	08010703 	.word	0x08010703
 8010550:	08010703 	.word	0x08010703
 8010554:	08010703 	.word	0x08010703
 8010558:	0801063f 	.word	0x0801063f
 801055c:	08010703 	.word	0x08010703
 8010560:	08010703 	.word	0x08010703
 8010564:	08010703 	.word	0x08010703
 8010568:	08010681 	.word	0x08010681
 801056c:	08010703 	.word	0x08010703
 8010570:	08010703 	.word	0x08010703
 8010574:	08010703 	.word	0x08010703
 8010578:	080106c1 	.word	0x080106c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	68b9      	ldr	r1, [r7, #8]
 8010582:	4618      	mov	r0, r3
 8010584:	f000 fa88 	bl	8010a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	699a      	ldr	r2, [r3, #24]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f042 0208 	orr.w	r2, r2, #8
 8010596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	699a      	ldr	r2, [r3, #24]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f022 0204 	bic.w	r2, r2, #4
 80105a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6999      	ldr	r1, [r3, #24]
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	691a      	ldr	r2, [r3, #16]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	430a      	orrs	r2, r1
 80105b8:	619a      	str	r2, [r3, #24]
      break;
 80105ba:	e0a5      	b.n	8010708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	68b9      	ldr	r1, [r7, #8]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 faf8 	bl	8010bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	699a      	ldr	r2, [r3, #24]
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80105d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	699a      	ldr	r2, [r3, #24]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	6999      	ldr	r1, [r3, #24]
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	021a      	lsls	r2, r3, #8
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	430a      	orrs	r2, r1
 80105fa:	619a      	str	r2, [r3, #24]
      break;
 80105fc:	e084      	b.n	8010708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	68b9      	ldr	r1, [r7, #8]
 8010604:	4618      	mov	r0, r3
 8010606:	f000 fb61 	bl	8010ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	69da      	ldr	r2, [r3, #28]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f042 0208 	orr.w	r2, r2, #8
 8010618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	69da      	ldr	r2, [r3, #28]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f022 0204 	bic.w	r2, r2, #4
 8010628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	69d9      	ldr	r1, [r3, #28]
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	691a      	ldr	r2, [r3, #16]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	430a      	orrs	r2, r1
 801063a:	61da      	str	r2, [r3, #28]
      break;
 801063c:	e064      	b.n	8010708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	68b9      	ldr	r1, [r7, #8]
 8010644:	4618      	mov	r0, r3
 8010646:	f000 fbc9 	bl	8010ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	69da      	ldr	r2, [r3, #28]
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	69da      	ldr	r2, [r3, #28]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	69d9      	ldr	r1, [r3, #28]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	691b      	ldr	r3, [r3, #16]
 8010674:	021a      	lsls	r2, r3, #8
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	430a      	orrs	r2, r1
 801067c:	61da      	str	r2, [r3, #28]
      break;
 801067e:	e043      	b.n	8010708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68b9      	ldr	r1, [r7, #8]
 8010686:	4618      	mov	r0, r3
 8010688:	f000 fc12 	bl	8010eb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f042 0208 	orr.w	r2, r2, #8
 801069a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f022 0204 	bic.w	r2, r2, #4
 80106aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	691a      	ldr	r2, [r3, #16]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	430a      	orrs	r2, r1
 80106bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80106be:	e023      	b.n	8010708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	68b9      	ldr	r1, [r7, #8]
 80106c6:	4618      	mov	r0, r3
 80106c8:	f000 fc56 	bl	8010f78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80106da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	691b      	ldr	r3, [r3, #16]
 80106f6:	021a      	lsls	r2, r3, #8
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	430a      	orrs	r2, r1
 80106fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010700:	e002      	b.n	8010708 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010702:	2301      	movs	r3, #1
 8010704:	75fb      	strb	r3, [r7, #23]
      break;
 8010706:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	2200      	movs	r2, #0
 801070c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010710:	7dfb      	ldrb	r3, [r7, #23]
}
 8010712:	4618      	mov	r0, r3
 8010714:	3718      	adds	r7, #24
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop

0801071c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010724:	bf00      	nop
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010738:	bf00      	nop
 801073a:	370c      	adds	r7, #12
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801074c:	bf00      	nop
 801074e:	370c      	adds	r7, #12
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010758:	b480      	push	{r7}
 801075a:	b083      	sub	sp, #12
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010760:	bf00      	nop
 8010762:	370c      	adds	r7, #12
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801076c:	b480      	push	{r7}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010774:	bf00      	nop
 8010776:	370c      	adds	r7, #12
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801079c:	bf00      	nop
 801079e:	370c      	adds	r7, #12
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d107      	bne.n	80107d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2201      	movs	r2, #1
 80107c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2201      	movs	r2, #1
 80107ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107ce:	e02a      	b.n	8010826 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d107      	bne.n	80107ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2202      	movs	r2, #2
 80107de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2201      	movs	r2, #1
 80107e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107e8:	e01d      	b.n	8010826 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d107      	bne.n	8010804 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2204      	movs	r2, #4
 80107f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2201      	movs	r2, #1
 80107fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010802:	e010      	b.n	8010826 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	429a      	cmp	r2, r3
 801080c:	d107      	bne.n	801081e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2208      	movs	r2, #8
 8010812:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2201      	movs	r2, #1
 8010818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801081c:	e003      	b.n	8010826 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2201      	movs	r2, #1
 8010822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f7ff ffb4 	bl	8010794 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	771a      	strb	r2, [r3, #28]
}
 8010832:	bf00      	nop
 8010834:	3710      	adds	r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b084      	sub	sp, #16
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010846:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	429a      	cmp	r2, r3
 8010850:	d10b      	bne.n	801086a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2201      	movs	r2, #1
 8010856:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d136      	bne.n	80108ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2201      	movs	r2, #1
 8010864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010868:	e031      	b.n	80108ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	429a      	cmp	r2, r3
 8010872:	d10b      	bne.n	801088c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2202      	movs	r2, #2
 8010878:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	69db      	ldr	r3, [r3, #28]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d125      	bne.n	80108ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2201      	movs	r2, #1
 8010886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801088a:	e020      	b.n	80108ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	429a      	cmp	r2, r3
 8010894:	d10b      	bne.n	80108ae <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2204      	movs	r2, #4
 801089a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	69db      	ldr	r3, [r3, #28]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d114      	bne.n	80108ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80108ac:	e00f      	b.n	80108ce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d10a      	bne.n	80108ce <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2208      	movs	r2, #8
 80108bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	69db      	ldr	r3, [r3, #28]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d103      	bne.n	80108ce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2201      	movs	r2, #1
 80108ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f7ff ff42 	bl	8010758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2200      	movs	r2, #0
 80108d8:	771a      	strb	r2, [r3, #28]
}
 80108da:	bf00      	nop
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b084      	sub	sp, #16
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d103      	bne.n	8010902 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2201      	movs	r2, #1
 80108fe:	771a      	strb	r2, [r3, #28]
 8010900:	e019      	b.n	8010936 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	429a      	cmp	r2, r3
 801090a:	d103      	bne.n	8010914 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2202      	movs	r2, #2
 8010910:	771a      	strb	r2, [r3, #28]
 8010912:	e010      	b.n	8010936 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	429a      	cmp	r2, r3
 801091c:	d103      	bne.n	8010926 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2204      	movs	r2, #4
 8010922:	771a      	strb	r2, [r3, #28]
 8010924:	e007      	b.n	8010936 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	429a      	cmp	r2, r3
 801092e:	d102      	bne.n	8010936 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2208      	movs	r2, #8
 8010934:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8010936:	68f8      	ldr	r0, [r7, #12]
 8010938:	f7ff ff18 	bl	801076c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2200      	movs	r2, #0
 8010940:	771a      	strb	r2, [r3, #28]
}
 8010942:	bf00      	nop
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
	...

0801094c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a44      	ldr	r2, [pc, #272]	; (8010a70 <TIM_Base_SetConfig+0x124>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d013      	beq.n	801098c <TIM_Base_SetConfig+0x40>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801096a:	d00f      	beq.n	801098c <TIM_Base_SetConfig+0x40>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	4a41      	ldr	r2, [pc, #260]	; (8010a74 <TIM_Base_SetConfig+0x128>)
 8010970:	4293      	cmp	r3, r2
 8010972:	d00b      	beq.n	801098c <TIM_Base_SetConfig+0x40>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4a40      	ldr	r2, [pc, #256]	; (8010a78 <TIM_Base_SetConfig+0x12c>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d007      	beq.n	801098c <TIM_Base_SetConfig+0x40>
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	4a3f      	ldr	r2, [pc, #252]	; (8010a7c <TIM_Base_SetConfig+0x130>)
 8010980:	4293      	cmp	r3, r2
 8010982:	d003      	beq.n	801098c <TIM_Base_SetConfig+0x40>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	4a3e      	ldr	r2, [pc, #248]	; (8010a80 <TIM_Base_SetConfig+0x134>)
 8010988:	4293      	cmp	r3, r2
 801098a:	d108      	bne.n	801099e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	4313      	orrs	r3, r2
 801099c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4a33      	ldr	r2, [pc, #204]	; (8010a70 <TIM_Base_SetConfig+0x124>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d027      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109ac:	d023      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4a30      	ldr	r2, [pc, #192]	; (8010a74 <TIM_Base_SetConfig+0x128>)
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d01f      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4a2f      	ldr	r2, [pc, #188]	; (8010a78 <TIM_Base_SetConfig+0x12c>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d01b      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a2e      	ldr	r2, [pc, #184]	; (8010a7c <TIM_Base_SetConfig+0x130>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d017      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4a2d      	ldr	r2, [pc, #180]	; (8010a80 <TIM_Base_SetConfig+0x134>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d013      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4a2c      	ldr	r2, [pc, #176]	; (8010a84 <TIM_Base_SetConfig+0x138>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d00f      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4a2b      	ldr	r2, [pc, #172]	; (8010a88 <TIM_Base_SetConfig+0x13c>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d00b      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4a2a      	ldr	r2, [pc, #168]	; (8010a8c <TIM_Base_SetConfig+0x140>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d007      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4a29      	ldr	r2, [pc, #164]	; (8010a90 <TIM_Base_SetConfig+0x144>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d003      	beq.n	80109f6 <TIM_Base_SetConfig+0xaa>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4a28      	ldr	r2, [pc, #160]	; (8010a94 <TIM_Base_SetConfig+0x148>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d108      	bne.n	8010a08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	68db      	ldr	r3, [r3, #12]
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	4313      	orrs	r3, r2
 8010a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	695b      	ldr	r3, [r3, #20]
 8010a12:	4313      	orrs	r3, r2
 8010a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	68fa      	ldr	r2, [r7, #12]
 8010a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	689a      	ldr	r2, [r3, #8]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4a10      	ldr	r2, [pc, #64]	; (8010a70 <TIM_Base_SetConfig+0x124>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d00f      	beq.n	8010a54 <TIM_Base_SetConfig+0x108>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4a12      	ldr	r2, [pc, #72]	; (8010a80 <TIM_Base_SetConfig+0x134>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d00b      	beq.n	8010a54 <TIM_Base_SetConfig+0x108>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	4a11      	ldr	r2, [pc, #68]	; (8010a84 <TIM_Base_SetConfig+0x138>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d007      	beq.n	8010a54 <TIM_Base_SetConfig+0x108>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4a10      	ldr	r2, [pc, #64]	; (8010a88 <TIM_Base_SetConfig+0x13c>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d003      	beq.n	8010a54 <TIM_Base_SetConfig+0x108>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4a0f      	ldr	r2, [pc, #60]	; (8010a8c <TIM_Base_SetConfig+0x140>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d103      	bne.n	8010a5c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	691a      	ldr	r2, [r3, #16]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	615a      	str	r2, [r3, #20]
}
 8010a62:	bf00      	nop
 8010a64:	3714      	adds	r7, #20
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	40010000 	.word	0x40010000
 8010a74:	40000400 	.word	0x40000400
 8010a78:	40000800 	.word	0x40000800
 8010a7c:	40000c00 	.word	0x40000c00
 8010a80:	40010400 	.word	0x40010400
 8010a84:	40014000 	.word	0x40014000
 8010a88:	40014400 	.word	0x40014400
 8010a8c:	40014800 	.word	0x40014800
 8010a90:	4000e000 	.word	0x4000e000
 8010a94:	4000e400 	.word	0x4000e400

08010a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	f023 0201 	bic.w	r2, r3, #1
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6a1b      	ldr	r3, [r3, #32]
 8010ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	699b      	ldr	r3, [r3, #24]
 8010abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	4b37      	ldr	r3, [pc, #220]	; (8010ba0 <TIM_OC1_SetConfig+0x108>)
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f023 0303 	bic.w	r3, r3, #3
 8010ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	68fa      	ldr	r2, [r7, #12]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	f023 0302 	bic.w	r3, r3, #2
 8010ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4a2d      	ldr	r2, [pc, #180]	; (8010ba4 <TIM_OC1_SetConfig+0x10c>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d00f      	beq.n	8010b14 <TIM_OC1_SetConfig+0x7c>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4a2c      	ldr	r2, [pc, #176]	; (8010ba8 <TIM_OC1_SetConfig+0x110>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d00b      	beq.n	8010b14 <TIM_OC1_SetConfig+0x7c>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	4a2b      	ldr	r2, [pc, #172]	; (8010bac <TIM_OC1_SetConfig+0x114>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d007      	beq.n	8010b14 <TIM_OC1_SetConfig+0x7c>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4a2a      	ldr	r2, [pc, #168]	; (8010bb0 <TIM_OC1_SetConfig+0x118>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d003      	beq.n	8010b14 <TIM_OC1_SetConfig+0x7c>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4a29      	ldr	r2, [pc, #164]	; (8010bb4 <TIM_OC1_SetConfig+0x11c>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d10c      	bne.n	8010b2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	f023 0308 	bic.w	r3, r3, #8
 8010b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	697a      	ldr	r2, [r7, #20]
 8010b22:	4313      	orrs	r3, r2
 8010b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	f023 0304 	bic.w	r3, r3, #4
 8010b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	4a1c      	ldr	r2, [pc, #112]	; (8010ba4 <TIM_OC1_SetConfig+0x10c>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d00f      	beq.n	8010b56 <TIM_OC1_SetConfig+0xbe>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4a1b      	ldr	r2, [pc, #108]	; (8010ba8 <TIM_OC1_SetConfig+0x110>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d00b      	beq.n	8010b56 <TIM_OC1_SetConfig+0xbe>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4a1a      	ldr	r2, [pc, #104]	; (8010bac <TIM_OC1_SetConfig+0x114>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d007      	beq.n	8010b56 <TIM_OC1_SetConfig+0xbe>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	4a19      	ldr	r2, [pc, #100]	; (8010bb0 <TIM_OC1_SetConfig+0x118>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d003      	beq.n	8010b56 <TIM_OC1_SetConfig+0xbe>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4a18      	ldr	r2, [pc, #96]	; (8010bb4 <TIM_OC1_SetConfig+0x11c>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d111      	bne.n	8010b7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	695b      	ldr	r3, [r3, #20]
 8010b6a:	693a      	ldr	r2, [r7, #16]
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	699b      	ldr	r3, [r3, #24]
 8010b74:	693a      	ldr	r2, [r7, #16]
 8010b76:	4313      	orrs	r3, r2
 8010b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	693a      	ldr	r2, [r7, #16]
 8010b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	697a      	ldr	r2, [r7, #20]
 8010b92:	621a      	str	r2, [r3, #32]
}
 8010b94:	bf00      	nop
 8010b96:	371c      	adds	r7, #28
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr
 8010ba0:	fffeff8f 	.word	0xfffeff8f
 8010ba4:	40010000 	.word	0x40010000
 8010ba8:	40010400 	.word	0x40010400
 8010bac:	40014000 	.word	0x40014000
 8010bb0:	40014400 	.word	0x40014400
 8010bb4:	40014800 	.word	0x40014800

08010bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b087      	sub	sp, #28
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6a1b      	ldr	r3, [r3, #32]
 8010bc6:	f023 0210 	bic.w	r2, r3, #16
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	4b34      	ldr	r3, [pc, #208]	; (8010cb4 <TIM_OC2_SetConfig+0xfc>)
 8010be4:	4013      	ands	r3, r2
 8010be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	021b      	lsls	r3, r3, #8
 8010bf6:	68fa      	ldr	r2, [r7, #12]
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	f023 0320 	bic.w	r3, r3, #32
 8010c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	011b      	lsls	r3, r3, #4
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	4a29      	ldr	r2, [pc, #164]	; (8010cb8 <TIM_OC2_SetConfig+0x100>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d003      	beq.n	8010c20 <TIM_OC2_SetConfig+0x68>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4a28      	ldr	r2, [pc, #160]	; (8010cbc <TIM_OC2_SetConfig+0x104>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d10d      	bne.n	8010c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	68db      	ldr	r3, [r3, #12]
 8010c2c:	011b      	lsls	r3, r3, #4
 8010c2e:	697a      	ldr	r2, [r7, #20]
 8010c30:	4313      	orrs	r3, r2
 8010c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	4a1e      	ldr	r2, [pc, #120]	; (8010cb8 <TIM_OC2_SetConfig+0x100>)
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d00f      	beq.n	8010c64 <TIM_OC2_SetConfig+0xac>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4a1d      	ldr	r2, [pc, #116]	; (8010cbc <TIM_OC2_SetConfig+0x104>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d00b      	beq.n	8010c64 <TIM_OC2_SetConfig+0xac>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	4a1c      	ldr	r2, [pc, #112]	; (8010cc0 <TIM_OC2_SetConfig+0x108>)
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d007      	beq.n	8010c64 <TIM_OC2_SetConfig+0xac>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	4a1b      	ldr	r2, [pc, #108]	; (8010cc4 <TIM_OC2_SetConfig+0x10c>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d003      	beq.n	8010c64 <TIM_OC2_SetConfig+0xac>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4a1a      	ldr	r2, [pc, #104]	; (8010cc8 <TIM_OC2_SetConfig+0x110>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d113      	bne.n	8010c8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	695b      	ldr	r3, [r3, #20]
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	693a      	ldr	r2, [r7, #16]
 8010c7c:	4313      	orrs	r3, r2
 8010c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	699b      	ldr	r3, [r3, #24]
 8010c84:	009b      	lsls	r3, r3, #2
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	693a      	ldr	r2, [r7, #16]
 8010c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	685a      	ldr	r2, [r3, #4]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	697a      	ldr	r2, [r7, #20]
 8010ca4:	621a      	str	r2, [r3, #32]
}
 8010ca6:	bf00      	nop
 8010ca8:	371c      	adds	r7, #28
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	feff8fff 	.word	0xfeff8fff
 8010cb8:	40010000 	.word	0x40010000
 8010cbc:	40010400 	.word	0x40010400
 8010cc0:	40014000 	.word	0x40014000
 8010cc4:	40014400 	.word	0x40014400
 8010cc8:	40014800 	.word	0x40014800

08010ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b087      	sub	sp, #28
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6a1b      	ldr	r3, [r3, #32]
 8010cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a1b      	ldr	r3, [r3, #32]
 8010ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	69db      	ldr	r3, [r3, #28]
 8010cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010cf4:	68fa      	ldr	r2, [r7, #12]
 8010cf6:	4b33      	ldr	r3, [pc, #204]	; (8010dc4 <TIM_OC3_SetConfig+0xf8>)
 8010cf8:	4013      	ands	r3, r2
 8010cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	f023 0303 	bic.w	r3, r3, #3
 8010d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	4313      	orrs	r3, r2
 8010d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	689b      	ldr	r3, [r3, #8]
 8010d1a:	021b      	lsls	r3, r3, #8
 8010d1c:	697a      	ldr	r2, [r7, #20]
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	4a28      	ldr	r2, [pc, #160]	; (8010dc8 <TIM_OC3_SetConfig+0xfc>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d003      	beq.n	8010d32 <TIM_OC3_SetConfig+0x66>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4a27      	ldr	r2, [pc, #156]	; (8010dcc <TIM_OC3_SetConfig+0x100>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d10d      	bne.n	8010d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	021b      	lsls	r3, r3, #8
 8010d40:	697a      	ldr	r2, [r7, #20]
 8010d42:	4313      	orrs	r3, r2
 8010d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4a1d      	ldr	r2, [pc, #116]	; (8010dc8 <TIM_OC3_SetConfig+0xfc>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d00f      	beq.n	8010d76 <TIM_OC3_SetConfig+0xaa>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4a1c      	ldr	r2, [pc, #112]	; (8010dcc <TIM_OC3_SetConfig+0x100>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d00b      	beq.n	8010d76 <TIM_OC3_SetConfig+0xaa>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4a1b      	ldr	r2, [pc, #108]	; (8010dd0 <TIM_OC3_SetConfig+0x104>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d007      	beq.n	8010d76 <TIM_OC3_SetConfig+0xaa>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4a1a      	ldr	r2, [pc, #104]	; (8010dd4 <TIM_OC3_SetConfig+0x108>)
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d003      	beq.n	8010d76 <TIM_OC3_SetConfig+0xaa>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4a19      	ldr	r2, [pc, #100]	; (8010dd8 <TIM_OC3_SetConfig+0x10c>)
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d113      	bne.n	8010d9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	695b      	ldr	r3, [r3, #20]
 8010d8a:	011b      	lsls	r3, r3, #4
 8010d8c:	693a      	ldr	r2, [r7, #16]
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	699b      	ldr	r3, [r3, #24]
 8010d96:	011b      	lsls	r3, r3, #4
 8010d98:	693a      	ldr	r2, [r7, #16]
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	693a      	ldr	r2, [r7, #16]
 8010da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	685a      	ldr	r2, [r3, #4]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	697a      	ldr	r2, [r7, #20]
 8010db6:	621a      	str	r2, [r3, #32]
}
 8010db8:	bf00      	nop
 8010dba:	371c      	adds	r7, #28
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr
 8010dc4:	fffeff8f 	.word	0xfffeff8f
 8010dc8:	40010000 	.word	0x40010000
 8010dcc:	40010400 	.word	0x40010400
 8010dd0:	40014000 	.word	0x40014000
 8010dd4:	40014400 	.word	0x40014400
 8010dd8:	40014800 	.word	0x40014800

08010ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b087      	sub	sp, #28
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6a1b      	ldr	r3, [r3, #32]
 8010df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	69db      	ldr	r3, [r3, #28]
 8010e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010e04:	68fa      	ldr	r2, [r7, #12]
 8010e06:	4b24      	ldr	r3, [pc, #144]	; (8010e98 <TIM_OC4_SetConfig+0xbc>)
 8010e08:	4013      	ands	r3, r2
 8010e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	021b      	lsls	r3, r3, #8
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	031b      	lsls	r3, r3, #12
 8010e2e:	693a      	ldr	r2, [r7, #16]
 8010e30:	4313      	orrs	r3, r2
 8010e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	4a19      	ldr	r2, [pc, #100]	; (8010e9c <TIM_OC4_SetConfig+0xc0>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d00f      	beq.n	8010e5c <TIM_OC4_SetConfig+0x80>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	4a18      	ldr	r2, [pc, #96]	; (8010ea0 <TIM_OC4_SetConfig+0xc4>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d00b      	beq.n	8010e5c <TIM_OC4_SetConfig+0x80>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4a17      	ldr	r2, [pc, #92]	; (8010ea4 <TIM_OC4_SetConfig+0xc8>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d007      	beq.n	8010e5c <TIM_OC4_SetConfig+0x80>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4a16      	ldr	r2, [pc, #88]	; (8010ea8 <TIM_OC4_SetConfig+0xcc>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d003      	beq.n	8010e5c <TIM_OC4_SetConfig+0x80>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	4a15      	ldr	r2, [pc, #84]	; (8010eac <TIM_OC4_SetConfig+0xd0>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d109      	bne.n	8010e70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	695b      	ldr	r3, [r3, #20]
 8010e68:	019b      	lsls	r3, r3, #6
 8010e6a:	697a      	ldr	r2, [r7, #20]
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	697a      	ldr	r2, [r7, #20]
 8010e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	68fa      	ldr	r2, [r7, #12]
 8010e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	693a      	ldr	r2, [r7, #16]
 8010e88:	621a      	str	r2, [r3, #32]
}
 8010e8a:	bf00      	nop
 8010e8c:	371c      	adds	r7, #28
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	feff8fff 	.word	0xfeff8fff
 8010e9c:	40010000 	.word	0x40010000
 8010ea0:	40010400 	.word	0x40010400
 8010ea4:	40014000 	.word	0x40014000
 8010ea8:	40014400 	.word	0x40014400
 8010eac:	40014800 	.word	0x40014800

08010eb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6a1b      	ldr	r3, [r3, #32]
 8010ebe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6a1b      	ldr	r3, [r3, #32]
 8010eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	4b21      	ldr	r3, [pc, #132]	; (8010f60 <TIM_OC5_SetConfig+0xb0>)
 8010edc:	4013      	ands	r3, r2
 8010ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	68fa      	ldr	r2, [r7, #12]
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010ef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	689b      	ldr	r3, [r3, #8]
 8010ef6:	041b      	lsls	r3, r3, #16
 8010ef8:	693a      	ldr	r2, [r7, #16]
 8010efa:	4313      	orrs	r3, r2
 8010efc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4a18      	ldr	r2, [pc, #96]	; (8010f64 <TIM_OC5_SetConfig+0xb4>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d00f      	beq.n	8010f26 <TIM_OC5_SetConfig+0x76>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4a17      	ldr	r2, [pc, #92]	; (8010f68 <TIM_OC5_SetConfig+0xb8>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d00b      	beq.n	8010f26 <TIM_OC5_SetConfig+0x76>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4a16      	ldr	r2, [pc, #88]	; (8010f6c <TIM_OC5_SetConfig+0xbc>)
 8010f12:	4293      	cmp	r3, r2
 8010f14:	d007      	beq.n	8010f26 <TIM_OC5_SetConfig+0x76>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a15      	ldr	r2, [pc, #84]	; (8010f70 <TIM_OC5_SetConfig+0xc0>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d003      	beq.n	8010f26 <TIM_OC5_SetConfig+0x76>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4a14      	ldr	r2, [pc, #80]	; (8010f74 <TIM_OC5_SetConfig+0xc4>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d109      	bne.n	8010f3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	021b      	lsls	r3, r3, #8
 8010f34:	697a      	ldr	r2, [r7, #20]
 8010f36:	4313      	orrs	r3, r2
 8010f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	697a      	ldr	r2, [r7, #20]
 8010f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	68fa      	ldr	r2, [r7, #12]
 8010f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	685a      	ldr	r2, [r3, #4]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	621a      	str	r2, [r3, #32]
}
 8010f54:	bf00      	nop
 8010f56:	371c      	adds	r7, #28
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr
 8010f60:	fffeff8f 	.word	0xfffeff8f
 8010f64:	40010000 	.word	0x40010000
 8010f68:	40010400 	.word	0x40010400
 8010f6c:	40014000 	.word	0x40014000
 8010f70:	40014400 	.word	0x40014400
 8010f74:	40014800 	.word	0x40014800

08010f78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b087      	sub	sp, #28
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6a1b      	ldr	r3, [r3, #32]
 8010f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6a1b      	ldr	r3, [r3, #32]
 8010f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	4b22      	ldr	r3, [pc, #136]	; (801102c <TIM_OC6_SetConfig+0xb4>)
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	021b      	lsls	r3, r3, #8
 8010fae:	68fa      	ldr	r2, [r7, #12]
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	051b      	lsls	r3, r3, #20
 8010fc2:	693a      	ldr	r2, [r7, #16]
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4a19      	ldr	r2, [pc, #100]	; (8011030 <TIM_OC6_SetConfig+0xb8>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d00f      	beq.n	8010ff0 <TIM_OC6_SetConfig+0x78>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4a18      	ldr	r2, [pc, #96]	; (8011034 <TIM_OC6_SetConfig+0xbc>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d00b      	beq.n	8010ff0 <TIM_OC6_SetConfig+0x78>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4a17      	ldr	r2, [pc, #92]	; (8011038 <TIM_OC6_SetConfig+0xc0>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d007      	beq.n	8010ff0 <TIM_OC6_SetConfig+0x78>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4a16      	ldr	r2, [pc, #88]	; (801103c <TIM_OC6_SetConfig+0xc4>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d003      	beq.n	8010ff0 <TIM_OC6_SetConfig+0x78>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4a15      	ldr	r2, [pc, #84]	; (8011040 <TIM_OC6_SetConfig+0xc8>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d109      	bne.n	8011004 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	695b      	ldr	r3, [r3, #20]
 8010ffc:	029b      	lsls	r3, r3, #10
 8010ffe:	697a      	ldr	r2, [r7, #20]
 8011000:	4313      	orrs	r3, r2
 8011002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	697a      	ldr	r2, [r7, #20]
 8011008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	685a      	ldr	r2, [r3, #4]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	693a      	ldr	r2, [r7, #16]
 801101c:	621a      	str	r2, [r3, #32]
}
 801101e:	bf00      	nop
 8011020:	371c      	adds	r7, #28
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop
 801102c:	feff8fff 	.word	0xfeff8fff
 8011030:	40010000 	.word	0x40010000
 8011034:	40010400 	.word	0x40010400
 8011038:	40014000 	.word	0x40014000
 801103c:	40014400 	.word	0x40014400
 8011040:	40014800 	.word	0x40014800

08011044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011044:	b480      	push	{r7}
 8011046:	b087      	sub	sp, #28
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	f003 031f 	and.w	r3, r3, #31
 8011056:	2201      	movs	r2, #1
 8011058:	fa02 f303 	lsl.w	r3, r2, r3
 801105c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6a1a      	ldr	r2, [r3, #32]
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	43db      	mvns	r3, r3
 8011066:	401a      	ands	r2, r3
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6a1a      	ldr	r2, [r3, #32]
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	f003 031f 	and.w	r3, r3, #31
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	fa01 f303 	lsl.w	r3, r1, r3
 801107c:	431a      	orrs	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	621a      	str	r2, [r3, #32]
}
 8011082:	bf00      	nop
 8011084:	371c      	adds	r7, #28
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
	...

08011090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d101      	bne.n	80110a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80110a4:	2302      	movs	r3, #2
 80110a6:	e077      	b.n	8011198 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2201      	movs	r2, #1
 80110ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2202      	movs	r2, #2
 80110b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a35      	ldr	r2, [pc, #212]	; (80111a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d004      	beq.n	80110dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a34      	ldr	r2, [pc, #208]	; (80111a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d108      	bne.n	80110ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80110e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	4313      	orrs	r3, r2
 80110ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	68fa      	ldr	r2, [r7, #12]
 80110fc:	4313      	orrs	r3, r2
 80110fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a25      	ldr	r2, [pc, #148]	; (80111a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d02c      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801111a:	d027      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a22      	ldr	r2, [pc, #136]	; (80111ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d022      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a21      	ldr	r2, [pc, #132]	; (80111b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d01d      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a1f      	ldr	r2, [pc, #124]	; (80111b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d018      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a1a      	ldr	r2, [pc, #104]	; (80111a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d013      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a1b      	ldr	r2, [pc, #108]	; (80111b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d00e      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a1a      	ldr	r2, [pc, #104]	; (80111bc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d009      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a18      	ldr	r2, [pc, #96]	; (80111c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d004      	beq.n	801116c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4a17      	ldr	r2, [pc, #92]	; (80111c4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d10c      	bne.n	8011186 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	68ba      	ldr	r2, [r7, #8]
 801117a:	4313      	orrs	r3, r2
 801117c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	68ba      	ldr	r2, [r7, #8]
 8011184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2201      	movs	r2, #1
 801118a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	3714      	adds	r7, #20
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr
 80111a4:	40010000 	.word	0x40010000
 80111a8:	40010400 	.word	0x40010400
 80111ac:	40000400 	.word	0x40000400
 80111b0:	40000800 	.word	0x40000800
 80111b4:	40000c00 	.word	0x40000c00
 80111b8:	40001800 	.word	0x40001800
 80111bc:	40014000 	.word	0x40014000
 80111c0:	4000e000 	.word	0x4000e000
 80111c4:	4000e400 	.word	0x4000e400

080111c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80111d0:	bf00      	nop
 80111d2:	370c      	adds	r7, #12
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80111e4:	bf00      	nop
 80111e6:	370c      	adds	r7, #12
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80111f8:	bf00      	nop
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d101      	bne.n	8011216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e042      	b.n	801129c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801121c:	2b00      	cmp	r3, #0
 801121e:	d106      	bne.n	801122e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f7f2 fb17 	bl	800385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2224      	movs	r2, #36	; 0x24
 8011232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f022 0201 	bic.w	r2, r2, #1
 8011244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 f82c 	bl	80112a4 <UART_SetConfig>
 801124c:	4603      	mov	r3, r0
 801124e:	2b01      	cmp	r3, #1
 8011250:	d101      	bne.n	8011256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011252:	2301      	movs	r3, #1
 8011254:	e022      	b.n	801129c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801125a:	2b00      	cmp	r3, #0
 801125c:	d002      	beq.n	8011264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 fe8c 	bl	8011f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	685a      	ldr	r2, [r3, #4]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	689a      	ldr	r2, [r3, #8]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f042 0201 	orr.w	r2, r2, #1
 8011292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 ff13 	bl	80120c0 <UART_CheckIdleState>
 801129a:	4603      	mov	r3, r0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80112a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112a8:	b092      	sub	sp, #72	; 0x48
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	689a      	ldr	r2, [r3, #8]
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	691b      	ldr	r3, [r3, #16]
 80112bc:	431a      	orrs	r2, r3
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	695b      	ldr	r3, [r3, #20]
 80112c2:	431a      	orrs	r2, r3
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	69db      	ldr	r3, [r3, #28]
 80112c8:	4313      	orrs	r3, r2
 80112ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	4bbe      	ldr	r3, [pc, #760]	; (80115cc <UART_SetConfig+0x328>)
 80112d4:	4013      	ands	r3, r2
 80112d6:	697a      	ldr	r2, [r7, #20]
 80112d8:	6812      	ldr	r2, [r2, #0]
 80112da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80112dc:	430b      	orrs	r3, r1
 80112de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	68da      	ldr	r2, [r3, #12]
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	430a      	orrs	r2, r1
 80112f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	699b      	ldr	r3, [r3, #24]
 80112fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	4ab3      	ldr	r2, [pc, #716]	; (80115d0 <UART_SetConfig+0x32c>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d004      	beq.n	8011310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	6a1b      	ldr	r3, [r3, #32]
 801130a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801130c:	4313      	orrs	r3, r2
 801130e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	689a      	ldr	r2, [r3, #8]
 8011316:	4baf      	ldr	r3, [pc, #700]	; (80115d4 <UART_SetConfig+0x330>)
 8011318:	4013      	ands	r3, r2
 801131a:	697a      	ldr	r2, [r7, #20]
 801131c:	6812      	ldr	r2, [r2, #0]
 801131e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011320:	430b      	orrs	r3, r1
 8011322:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132a:	f023 010f 	bic.w	r1, r3, #15
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	430a      	orrs	r2, r1
 8011338:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4aa6      	ldr	r2, [pc, #664]	; (80115d8 <UART_SetConfig+0x334>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d177      	bne.n	8011434 <UART_SetConfig+0x190>
 8011344:	4ba5      	ldr	r3, [pc, #660]	; (80115dc <UART_SetConfig+0x338>)
 8011346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801134c:	2b28      	cmp	r3, #40	; 0x28
 801134e:	d86d      	bhi.n	801142c <UART_SetConfig+0x188>
 8011350:	a201      	add	r2, pc, #4	; (adr r2, 8011358 <UART_SetConfig+0xb4>)
 8011352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011356:	bf00      	nop
 8011358:	080113fd 	.word	0x080113fd
 801135c:	0801142d 	.word	0x0801142d
 8011360:	0801142d 	.word	0x0801142d
 8011364:	0801142d 	.word	0x0801142d
 8011368:	0801142d 	.word	0x0801142d
 801136c:	0801142d 	.word	0x0801142d
 8011370:	0801142d 	.word	0x0801142d
 8011374:	0801142d 	.word	0x0801142d
 8011378:	08011405 	.word	0x08011405
 801137c:	0801142d 	.word	0x0801142d
 8011380:	0801142d 	.word	0x0801142d
 8011384:	0801142d 	.word	0x0801142d
 8011388:	0801142d 	.word	0x0801142d
 801138c:	0801142d 	.word	0x0801142d
 8011390:	0801142d 	.word	0x0801142d
 8011394:	0801142d 	.word	0x0801142d
 8011398:	0801140d 	.word	0x0801140d
 801139c:	0801142d 	.word	0x0801142d
 80113a0:	0801142d 	.word	0x0801142d
 80113a4:	0801142d 	.word	0x0801142d
 80113a8:	0801142d 	.word	0x0801142d
 80113ac:	0801142d 	.word	0x0801142d
 80113b0:	0801142d 	.word	0x0801142d
 80113b4:	0801142d 	.word	0x0801142d
 80113b8:	08011415 	.word	0x08011415
 80113bc:	0801142d 	.word	0x0801142d
 80113c0:	0801142d 	.word	0x0801142d
 80113c4:	0801142d 	.word	0x0801142d
 80113c8:	0801142d 	.word	0x0801142d
 80113cc:	0801142d 	.word	0x0801142d
 80113d0:	0801142d 	.word	0x0801142d
 80113d4:	0801142d 	.word	0x0801142d
 80113d8:	0801141d 	.word	0x0801141d
 80113dc:	0801142d 	.word	0x0801142d
 80113e0:	0801142d 	.word	0x0801142d
 80113e4:	0801142d 	.word	0x0801142d
 80113e8:	0801142d 	.word	0x0801142d
 80113ec:	0801142d 	.word	0x0801142d
 80113f0:	0801142d 	.word	0x0801142d
 80113f4:	0801142d 	.word	0x0801142d
 80113f8:	08011425 	.word	0x08011425
 80113fc:	2301      	movs	r3, #1
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011402:	e326      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011404:	2304      	movs	r3, #4
 8011406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140a:	e322      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801140c:	2308      	movs	r3, #8
 801140e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011412:	e31e      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011414:	2310      	movs	r3, #16
 8011416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141a:	e31a      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801141c:	2320      	movs	r3, #32
 801141e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011422:	e316      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011424:	2340      	movs	r3, #64	; 0x40
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e312      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801142c:	2380      	movs	r3, #128	; 0x80
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e30e      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a69      	ldr	r2, [pc, #420]	; (80115e0 <UART_SetConfig+0x33c>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d130      	bne.n	80114a0 <UART_SetConfig+0x1fc>
 801143e:	4b67      	ldr	r3, [pc, #412]	; (80115dc <UART_SetConfig+0x338>)
 8011440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011442:	f003 0307 	and.w	r3, r3, #7
 8011446:	2b05      	cmp	r3, #5
 8011448:	d826      	bhi.n	8011498 <UART_SetConfig+0x1f4>
 801144a:	a201      	add	r2, pc, #4	; (adr r2, 8011450 <UART_SetConfig+0x1ac>)
 801144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011450:	08011469 	.word	0x08011469
 8011454:	08011471 	.word	0x08011471
 8011458:	08011479 	.word	0x08011479
 801145c:	08011481 	.word	0x08011481
 8011460:	08011489 	.word	0x08011489
 8011464:	08011491 	.word	0x08011491
 8011468:	2300      	movs	r3, #0
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e2f0      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011470:	2304      	movs	r3, #4
 8011472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011476:	e2ec      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011478:	2308      	movs	r3, #8
 801147a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147e:	e2e8      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011480:	2310      	movs	r3, #16
 8011482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011486:	e2e4      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011488:	2320      	movs	r3, #32
 801148a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148e:	e2e0      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011490:	2340      	movs	r3, #64	; 0x40
 8011492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011496:	e2dc      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011498:	2380      	movs	r3, #128	; 0x80
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e2d8      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4a4f      	ldr	r2, [pc, #316]	; (80115e4 <UART_SetConfig+0x340>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d130      	bne.n	801150c <UART_SetConfig+0x268>
 80114aa:	4b4c      	ldr	r3, [pc, #304]	; (80115dc <UART_SetConfig+0x338>)
 80114ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ae:	f003 0307 	and.w	r3, r3, #7
 80114b2:	2b05      	cmp	r3, #5
 80114b4:	d826      	bhi.n	8011504 <UART_SetConfig+0x260>
 80114b6:	a201      	add	r2, pc, #4	; (adr r2, 80114bc <UART_SetConfig+0x218>)
 80114b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114bc:	080114d5 	.word	0x080114d5
 80114c0:	080114dd 	.word	0x080114dd
 80114c4:	080114e5 	.word	0x080114e5
 80114c8:	080114ed 	.word	0x080114ed
 80114cc:	080114f5 	.word	0x080114f5
 80114d0:	080114fd 	.word	0x080114fd
 80114d4:	2300      	movs	r3, #0
 80114d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114da:	e2ba      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80114dc:	2304      	movs	r3, #4
 80114de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114e2:	e2b6      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80114e4:	2308      	movs	r3, #8
 80114e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ea:	e2b2      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80114ec:	2310      	movs	r3, #16
 80114ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114f2:	e2ae      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80114f4:	2320      	movs	r3, #32
 80114f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114fa:	e2aa      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80114fc:	2340      	movs	r3, #64	; 0x40
 80114fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011502:	e2a6      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011504:	2380      	movs	r3, #128	; 0x80
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e2a2      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a35      	ldr	r2, [pc, #212]	; (80115e8 <UART_SetConfig+0x344>)
 8011512:	4293      	cmp	r3, r2
 8011514:	d130      	bne.n	8011578 <UART_SetConfig+0x2d4>
 8011516:	4b31      	ldr	r3, [pc, #196]	; (80115dc <UART_SetConfig+0x338>)
 8011518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801151a:	f003 0307 	and.w	r3, r3, #7
 801151e:	2b05      	cmp	r3, #5
 8011520:	d826      	bhi.n	8011570 <UART_SetConfig+0x2cc>
 8011522:	a201      	add	r2, pc, #4	; (adr r2, 8011528 <UART_SetConfig+0x284>)
 8011524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011528:	08011541 	.word	0x08011541
 801152c:	08011549 	.word	0x08011549
 8011530:	08011551 	.word	0x08011551
 8011534:	08011559 	.word	0x08011559
 8011538:	08011561 	.word	0x08011561
 801153c:	08011569 	.word	0x08011569
 8011540:	2300      	movs	r3, #0
 8011542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011546:	e284      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011548:	2304      	movs	r3, #4
 801154a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154e:	e280      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011550:	2308      	movs	r3, #8
 8011552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011556:	e27c      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011558:	2310      	movs	r3, #16
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155e:	e278      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011560:	2320      	movs	r3, #32
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011566:	e274      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011568:	2340      	movs	r3, #64	; 0x40
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156e:	e270      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011570:	2380      	movs	r3, #128	; 0x80
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e26c      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a1b      	ldr	r2, [pc, #108]	; (80115ec <UART_SetConfig+0x348>)
 801157e:	4293      	cmp	r3, r2
 8011580:	d142      	bne.n	8011608 <UART_SetConfig+0x364>
 8011582:	4b16      	ldr	r3, [pc, #88]	; (80115dc <UART_SetConfig+0x338>)
 8011584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011586:	f003 0307 	and.w	r3, r3, #7
 801158a:	2b05      	cmp	r3, #5
 801158c:	d838      	bhi.n	8011600 <UART_SetConfig+0x35c>
 801158e:	a201      	add	r2, pc, #4	; (adr r2, 8011594 <UART_SetConfig+0x2f0>)
 8011590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011594:	080115ad 	.word	0x080115ad
 8011598:	080115b5 	.word	0x080115b5
 801159c:	080115bd 	.word	0x080115bd
 80115a0:	080115c5 	.word	0x080115c5
 80115a4:	080115f1 	.word	0x080115f1
 80115a8:	080115f9 	.word	0x080115f9
 80115ac:	2300      	movs	r3, #0
 80115ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b2:	e24e      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80115b4:	2304      	movs	r3, #4
 80115b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ba:	e24a      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80115bc:	2308      	movs	r3, #8
 80115be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115c2:	e246      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80115c4:	2310      	movs	r3, #16
 80115c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ca:	e242      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80115cc:	cfff69f3 	.word	0xcfff69f3
 80115d0:	58000c00 	.word	0x58000c00
 80115d4:	11fff4ff 	.word	0x11fff4ff
 80115d8:	40011000 	.word	0x40011000
 80115dc:	58024400 	.word	0x58024400
 80115e0:	40004400 	.word	0x40004400
 80115e4:	40004800 	.word	0x40004800
 80115e8:	40004c00 	.word	0x40004c00
 80115ec:	40005000 	.word	0x40005000
 80115f0:	2320      	movs	r3, #32
 80115f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115f6:	e22c      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80115f8:	2340      	movs	r3, #64	; 0x40
 80115fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fe:	e228      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011600:	2380      	movs	r3, #128	; 0x80
 8011602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011606:	e224      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4ab1      	ldr	r2, [pc, #708]	; (80118d4 <UART_SetConfig+0x630>)
 801160e:	4293      	cmp	r3, r2
 8011610:	d176      	bne.n	8011700 <UART_SetConfig+0x45c>
 8011612:	4bb1      	ldr	r3, [pc, #708]	; (80118d8 <UART_SetConfig+0x634>)
 8011614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801161a:	2b28      	cmp	r3, #40	; 0x28
 801161c:	d86c      	bhi.n	80116f8 <UART_SetConfig+0x454>
 801161e:	a201      	add	r2, pc, #4	; (adr r2, 8011624 <UART_SetConfig+0x380>)
 8011620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011624:	080116c9 	.word	0x080116c9
 8011628:	080116f9 	.word	0x080116f9
 801162c:	080116f9 	.word	0x080116f9
 8011630:	080116f9 	.word	0x080116f9
 8011634:	080116f9 	.word	0x080116f9
 8011638:	080116f9 	.word	0x080116f9
 801163c:	080116f9 	.word	0x080116f9
 8011640:	080116f9 	.word	0x080116f9
 8011644:	080116d1 	.word	0x080116d1
 8011648:	080116f9 	.word	0x080116f9
 801164c:	080116f9 	.word	0x080116f9
 8011650:	080116f9 	.word	0x080116f9
 8011654:	080116f9 	.word	0x080116f9
 8011658:	080116f9 	.word	0x080116f9
 801165c:	080116f9 	.word	0x080116f9
 8011660:	080116f9 	.word	0x080116f9
 8011664:	080116d9 	.word	0x080116d9
 8011668:	080116f9 	.word	0x080116f9
 801166c:	080116f9 	.word	0x080116f9
 8011670:	080116f9 	.word	0x080116f9
 8011674:	080116f9 	.word	0x080116f9
 8011678:	080116f9 	.word	0x080116f9
 801167c:	080116f9 	.word	0x080116f9
 8011680:	080116f9 	.word	0x080116f9
 8011684:	080116e1 	.word	0x080116e1
 8011688:	080116f9 	.word	0x080116f9
 801168c:	080116f9 	.word	0x080116f9
 8011690:	080116f9 	.word	0x080116f9
 8011694:	080116f9 	.word	0x080116f9
 8011698:	080116f9 	.word	0x080116f9
 801169c:	080116f9 	.word	0x080116f9
 80116a0:	080116f9 	.word	0x080116f9
 80116a4:	080116e9 	.word	0x080116e9
 80116a8:	080116f9 	.word	0x080116f9
 80116ac:	080116f9 	.word	0x080116f9
 80116b0:	080116f9 	.word	0x080116f9
 80116b4:	080116f9 	.word	0x080116f9
 80116b8:	080116f9 	.word	0x080116f9
 80116bc:	080116f9 	.word	0x080116f9
 80116c0:	080116f9 	.word	0x080116f9
 80116c4:	080116f1 	.word	0x080116f1
 80116c8:	2301      	movs	r3, #1
 80116ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ce:	e1c0      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80116d0:	2304      	movs	r3, #4
 80116d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116d6:	e1bc      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80116d8:	2308      	movs	r3, #8
 80116da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116de:	e1b8      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80116e0:	2310      	movs	r3, #16
 80116e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116e6:	e1b4      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80116e8:	2320      	movs	r3, #32
 80116ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ee:	e1b0      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80116f0:	2340      	movs	r3, #64	; 0x40
 80116f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116f6:	e1ac      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80116f8:	2380      	movs	r3, #128	; 0x80
 80116fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116fe:	e1a8      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	4a75      	ldr	r2, [pc, #468]	; (80118dc <UART_SetConfig+0x638>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d130      	bne.n	801176c <UART_SetConfig+0x4c8>
 801170a:	4b73      	ldr	r3, [pc, #460]	; (80118d8 <UART_SetConfig+0x634>)
 801170c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801170e:	f003 0307 	and.w	r3, r3, #7
 8011712:	2b05      	cmp	r3, #5
 8011714:	d826      	bhi.n	8011764 <UART_SetConfig+0x4c0>
 8011716:	a201      	add	r2, pc, #4	; (adr r2, 801171c <UART_SetConfig+0x478>)
 8011718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801171c:	08011735 	.word	0x08011735
 8011720:	0801173d 	.word	0x0801173d
 8011724:	08011745 	.word	0x08011745
 8011728:	0801174d 	.word	0x0801174d
 801172c:	08011755 	.word	0x08011755
 8011730:	0801175d 	.word	0x0801175d
 8011734:	2300      	movs	r3, #0
 8011736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801173a:	e18a      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801173c:	2304      	movs	r3, #4
 801173e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011742:	e186      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011744:	2308      	movs	r3, #8
 8011746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801174a:	e182      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801174c:	2310      	movs	r3, #16
 801174e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011752:	e17e      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011754:	2320      	movs	r3, #32
 8011756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801175a:	e17a      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801175c:	2340      	movs	r3, #64	; 0x40
 801175e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011762:	e176      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011764:	2380      	movs	r3, #128	; 0x80
 8011766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176a:	e172      	b.n	8011a52 <UART_SetConfig+0x7ae>
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4a5b      	ldr	r2, [pc, #364]	; (80118e0 <UART_SetConfig+0x63c>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d130      	bne.n	80117d8 <UART_SetConfig+0x534>
 8011776:	4b58      	ldr	r3, [pc, #352]	; (80118d8 <UART_SetConfig+0x634>)
 8011778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801177a:	f003 0307 	and.w	r3, r3, #7
 801177e:	2b05      	cmp	r3, #5
 8011780:	d826      	bhi.n	80117d0 <UART_SetConfig+0x52c>
 8011782:	a201      	add	r2, pc, #4	; (adr r2, 8011788 <UART_SetConfig+0x4e4>)
 8011784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011788:	080117a1 	.word	0x080117a1
 801178c:	080117a9 	.word	0x080117a9
 8011790:	080117b1 	.word	0x080117b1
 8011794:	080117b9 	.word	0x080117b9
 8011798:	080117c1 	.word	0x080117c1
 801179c:	080117c9 	.word	0x080117c9
 80117a0:	2300      	movs	r3, #0
 80117a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117a6:	e154      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80117a8:	2304      	movs	r3, #4
 80117aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ae:	e150      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80117b0:	2308      	movs	r3, #8
 80117b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117b6:	e14c      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80117b8:	2310      	movs	r3, #16
 80117ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117be:	e148      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80117c0:	2320      	movs	r3, #32
 80117c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117c6:	e144      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80117c8:	2340      	movs	r3, #64	; 0x40
 80117ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ce:	e140      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80117d0:	2380      	movs	r3, #128	; 0x80
 80117d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117d6:	e13c      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4a41      	ldr	r2, [pc, #260]	; (80118e4 <UART_SetConfig+0x640>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	f040 8082 	bne.w	80118e8 <UART_SetConfig+0x644>
 80117e4:	4b3c      	ldr	r3, [pc, #240]	; (80118d8 <UART_SetConfig+0x634>)
 80117e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80117ec:	2b28      	cmp	r3, #40	; 0x28
 80117ee:	d86d      	bhi.n	80118cc <UART_SetConfig+0x628>
 80117f0:	a201      	add	r2, pc, #4	; (adr r2, 80117f8 <UART_SetConfig+0x554>)
 80117f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f6:	bf00      	nop
 80117f8:	0801189d 	.word	0x0801189d
 80117fc:	080118cd 	.word	0x080118cd
 8011800:	080118cd 	.word	0x080118cd
 8011804:	080118cd 	.word	0x080118cd
 8011808:	080118cd 	.word	0x080118cd
 801180c:	080118cd 	.word	0x080118cd
 8011810:	080118cd 	.word	0x080118cd
 8011814:	080118cd 	.word	0x080118cd
 8011818:	080118a5 	.word	0x080118a5
 801181c:	080118cd 	.word	0x080118cd
 8011820:	080118cd 	.word	0x080118cd
 8011824:	080118cd 	.word	0x080118cd
 8011828:	080118cd 	.word	0x080118cd
 801182c:	080118cd 	.word	0x080118cd
 8011830:	080118cd 	.word	0x080118cd
 8011834:	080118cd 	.word	0x080118cd
 8011838:	080118ad 	.word	0x080118ad
 801183c:	080118cd 	.word	0x080118cd
 8011840:	080118cd 	.word	0x080118cd
 8011844:	080118cd 	.word	0x080118cd
 8011848:	080118cd 	.word	0x080118cd
 801184c:	080118cd 	.word	0x080118cd
 8011850:	080118cd 	.word	0x080118cd
 8011854:	080118cd 	.word	0x080118cd
 8011858:	080118b5 	.word	0x080118b5
 801185c:	080118cd 	.word	0x080118cd
 8011860:	080118cd 	.word	0x080118cd
 8011864:	080118cd 	.word	0x080118cd
 8011868:	080118cd 	.word	0x080118cd
 801186c:	080118cd 	.word	0x080118cd
 8011870:	080118cd 	.word	0x080118cd
 8011874:	080118cd 	.word	0x080118cd
 8011878:	080118bd 	.word	0x080118bd
 801187c:	080118cd 	.word	0x080118cd
 8011880:	080118cd 	.word	0x080118cd
 8011884:	080118cd 	.word	0x080118cd
 8011888:	080118cd 	.word	0x080118cd
 801188c:	080118cd 	.word	0x080118cd
 8011890:	080118cd 	.word	0x080118cd
 8011894:	080118cd 	.word	0x080118cd
 8011898:	080118c5 	.word	0x080118c5
 801189c:	2301      	movs	r3, #1
 801189e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118a2:	e0d6      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80118a4:	2304      	movs	r3, #4
 80118a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118aa:	e0d2      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80118ac:	2308      	movs	r3, #8
 80118ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118b2:	e0ce      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80118b4:	2310      	movs	r3, #16
 80118b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ba:	e0ca      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80118bc:	2320      	movs	r3, #32
 80118be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118c2:	e0c6      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80118c4:	2340      	movs	r3, #64	; 0x40
 80118c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ca:	e0c2      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80118cc:	2380      	movs	r3, #128	; 0x80
 80118ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d2:	e0be      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80118d4:	40011400 	.word	0x40011400
 80118d8:	58024400 	.word	0x58024400
 80118dc:	40007800 	.word	0x40007800
 80118e0:	40007c00 	.word	0x40007c00
 80118e4:	40011800 	.word	0x40011800
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	4aad      	ldr	r2, [pc, #692]	; (8011ba4 <UART_SetConfig+0x900>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d176      	bne.n	80119e0 <UART_SetConfig+0x73c>
 80118f2:	4bad      	ldr	r3, [pc, #692]	; (8011ba8 <UART_SetConfig+0x904>)
 80118f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80118fa:	2b28      	cmp	r3, #40	; 0x28
 80118fc:	d86c      	bhi.n	80119d8 <UART_SetConfig+0x734>
 80118fe:	a201      	add	r2, pc, #4	; (adr r2, 8011904 <UART_SetConfig+0x660>)
 8011900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011904:	080119a9 	.word	0x080119a9
 8011908:	080119d9 	.word	0x080119d9
 801190c:	080119d9 	.word	0x080119d9
 8011910:	080119d9 	.word	0x080119d9
 8011914:	080119d9 	.word	0x080119d9
 8011918:	080119d9 	.word	0x080119d9
 801191c:	080119d9 	.word	0x080119d9
 8011920:	080119d9 	.word	0x080119d9
 8011924:	080119b1 	.word	0x080119b1
 8011928:	080119d9 	.word	0x080119d9
 801192c:	080119d9 	.word	0x080119d9
 8011930:	080119d9 	.word	0x080119d9
 8011934:	080119d9 	.word	0x080119d9
 8011938:	080119d9 	.word	0x080119d9
 801193c:	080119d9 	.word	0x080119d9
 8011940:	080119d9 	.word	0x080119d9
 8011944:	080119b9 	.word	0x080119b9
 8011948:	080119d9 	.word	0x080119d9
 801194c:	080119d9 	.word	0x080119d9
 8011950:	080119d9 	.word	0x080119d9
 8011954:	080119d9 	.word	0x080119d9
 8011958:	080119d9 	.word	0x080119d9
 801195c:	080119d9 	.word	0x080119d9
 8011960:	080119d9 	.word	0x080119d9
 8011964:	080119c1 	.word	0x080119c1
 8011968:	080119d9 	.word	0x080119d9
 801196c:	080119d9 	.word	0x080119d9
 8011970:	080119d9 	.word	0x080119d9
 8011974:	080119d9 	.word	0x080119d9
 8011978:	080119d9 	.word	0x080119d9
 801197c:	080119d9 	.word	0x080119d9
 8011980:	080119d9 	.word	0x080119d9
 8011984:	080119c9 	.word	0x080119c9
 8011988:	080119d9 	.word	0x080119d9
 801198c:	080119d9 	.word	0x080119d9
 8011990:	080119d9 	.word	0x080119d9
 8011994:	080119d9 	.word	0x080119d9
 8011998:	080119d9 	.word	0x080119d9
 801199c:	080119d9 	.word	0x080119d9
 80119a0:	080119d9 	.word	0x080119d9
 80119a4:	080119d1 	.word	0x080119d1
 80119a8:	2301      	movs	r3, #1
 80119aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ae:	e050      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80119b0:	2304      	movs	r3, #4
 80119b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119b6:	e04c      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80119b8:	2308      	movs	r3, #8
 80119ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119be:	e048      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80119c0:	2310      	movs	r3, #16
 80119c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119c6:	e044      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80119c8:	2320      	movs	r3, #32
 80119ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ce:	e040      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80119d0:	2340      	movs	r3, #64	; 0x40
 80119d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119d6:	e03c      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80119d8:	2380      	movs	r3, #128	; 0x80
 80119da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119de:	e038      	b.n	8011a52 <UART_SetConfig+0x7ae>
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	4a71      	ldr	r2, [pc, #452]	; (8011bac <UART_SetConfig+0x908>)
 80119e6:	4293      	cmp	r3, r2
 80119e8:	d130      	bne.n	8011a4c <UART_SetConfig+0x7a8>
 80119ea:	4b6f      	ldr	r3, [pc, #444]	; (8011ba8 <UART_SetConfig+0x904>)
 80119ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119ee:	f003 0307 	and.w	r3, r3, #7
 80119f2:	2b05      	cmp	r3, #5
 80119f4:	d826      	bhi.n	8011a44 <UART_SetConfig+0x7a0>
 80119f6:	a201      	add	r2, pc, #4	; (adr r2, 80119fc <UART_SetConfig+0x758>)
 80119f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119fc:	08011a15 	.word	0x08011a15
 8011a00:	08011a1d 	.word	0x08011a1d
 8011a04:	08011a25 	.word	0x08011a25
 8011a08:	08011a2d 	.word	0x08011a2d
 8011a0c:	08011a35 	.word	0x08011a35
 8011a10:	08011a3d 	.word	0x08011a3d
 8011a14:	2302      	movs	r3, #2
 8011a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a1a:	e01a      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011a1c:	2304      	movs	r3, #4
 8011a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a22:	e016      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011a24:	2308      	movs	r3, #8
 8011a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a2a:	e012      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011a2c:	2310      	movs	r3, #16
 8011a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a32:	e00e      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011a34:	2320      	movs	r3, #32
 8011a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a3a:	e00a      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011a3c:	2340      	movs	r3, #64	; 0x40
 8011a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a42:	e006      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011a44:	2380      	movs	r3, #128	; 0x80
 8011a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a4a:	e002      	b.n	8011a52 <UART_SetConfig+0x7ae>
 8011a4c:	2380      	movs	r3, #128	; 0x80
 8011a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a55      	ldr	r2, [pc, #340]	; (8011bac <UART_SetConfig+0x908>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	f040 80f8 	bne.w	8011c4e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011a5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a62:	2b20      	cmp	r3, #32
 8011a64:	dc46      	bgt.n	8011af4 <UART_SetConfig+0x850>
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	db75      	blt.n	8011b56 <UART_SetConfig+0x8b2>
 8011a6a:	3b02      	subs	r3, #2
 8011a6c:	2b1e      	cmp	r3, #30
 8011a6e:	d872      	bhi.n	8011b56 <UART_SetConfig+0x8b2>
 8011a70:	a201      	add	r2, pc, #4	; (adr r2, 8011a78 <UART_SetConfig+0x7d4>)
 8011a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a76:	bf00      	nop
 8011a78:	08011afb 	.word	0x08011afb
 8011a7c:	08011b57 	.word	0x08011b57
 8011a80:	08011b03 	.word	0x08011b03
 8011a84:	08011b57 	.word	0x08011b57
 8011a88:	08011b57 	.word	0x08011b57
 8011a8c:	08011b57 	.word	0x08011b57
 8011a90:	08011b13 	.word	0x08011b13
 8011a94:	08011b57 	.word	0x08011b57
 8011a98:	08011b57 	.word	0x08011b57
 8011a9c:	08011b57 	.word	0x08011b57
 8011aa0:	08011b57 	.word	0x08011b57
 8011aa4:	08011b57 	.word	0x08011b57
 8011aa8:	08011b57 	.word	0x08011b57
 8011aac:	08011b57 	.word	0x08011b57
 8011ab0:	08011b23 	.word	0x08011b23
 8011ab4:	08011b57 	.word	0x08011b57
 8011ab8:	08011b57 	.word	0x08011b57
 8011abc:	08011b57 	.word	0x08011b57
 8011ac0:	08011b57 	.word	0x08011b57
 8011ac4:	08011b57 	.word	0x08011b57
 8011ac8:	08011b57 	.word	0x08011b57
 8011acc:	08011b57 	.word	0x08011b57
 8011ad0:	08011b57 	.word	0x08011b57
 8011ad4:	08011b57 	.word	0x08011b57
 8011ad8:	08011b57 	.word	0x08011b57
 8011adc:	08011b57 	.word	0x08011b57
 8011ae0:	08011b57 	.word	0x08011b57
 8011ae4:	08011b57 	.word	0x08011b57
 8011ae8:	08011b57 	.word	0x08011b57
 8011aec:	08011b57 	.word	0x08011b57
 8011af0:	08011b49 	.word	0x08011b49
 8011af4:	2b40      	cmp	r3, #64	; 0x40
 8011af6:	d02a      	beq.n	8011b4e <UART_SetConfig+0x8aa>
 8011af8:	e02d      	b.n	8011b56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011afa:	f7fa febd 	bl	800c878 <HAL_RCCEx_GetD3PCLK1Freq>
 8011afe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b00:	e02f      	b.n	8011b62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fa fecc 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b10:	e027      	b.n	8011b62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b12:	f107 0318 	add.w	r3, r7, #24
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fb f818 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b20:	e01f      	b.n	8011b62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b22:	4b21      	ldr	r3, [pc, #132]	; (8011ba8 <UART_SetConfig+0x904>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f003 0320 	and.w	r3, r3, #32
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d009      	beq.n	8011b42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b2e:	4b1e      	ldr	r3, [pc, #120]	; (8011ba8 <UART_SetConfig+0x904>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	08db      	lsrs	r3, r3, #3
 8011b34:	f003 0303 	and.w	r3, r3, #3
 8011b38:	4a1d      	ldr	r2, [pc, #116]	; (8011bb0 <UART_SetConfig+0x90c>)
 8011b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8011b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b40:	e00f      	b.n	8011b62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011b42:	4b1b      	ldr	r3, [pc, #108]	; (8011bb0 <UART_SetConfig+0x90c>)
 8011b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b46:	e00c      	b.n	8011b62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b48:	4b1a      	ldr	r3, [pc, #104]	; (8011bb4 <UART_SetConfig+0x910>)
 8011b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b4c:	e009      	b.n	8011b62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b54:	e005      	b.n	8011b62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011b56:	2300      	movs	r3, #0
 8011b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011b60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	f000 81ee 	beq.w	8011f46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b6e:	4a12      	ldr	r2, [pc, #72]	; (8011bb8 <UART_SetConfig+0x914>)
 8011b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b74:	461a      	mov	r2, r3
 8011b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b7c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	685a      	ldr	r2, [r3, #4]
 8011b82:	4613      	mov	r3, r2
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	4413      	add	r3, r2
 8011b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d305      	bcc.n	8011b9a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d910      	bls.n	8011bbc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011ba0:	e1d1      	b.n	8011f46 <UART_SetConfig+0xca2>
 8011ba2:	bf00      	nop
 8011ba4:	40011c00 	.word	0x40011c00
 8011ba8:	58024400 	.word	0x58024400
 8011bac:	58000c00 	.word	0x58000c00
 8011bb0:	03d09000 	.word	0x03d09000
 8011bb4:	003d0900 	.word	0x003d0900
 8011bb8:	08018cf4 	.word	0x08018cf4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	60bb      	str	r3, [r7, #8]
 8011bc2:	60fa      	str	r2, [r7, #12]
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc8:	4ac0      	ldr	r2, [pc, #768]	; (8011ecc <UART_SetConfig+0xc28>)
 8011bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	603b      	str	r3, [r7, #0]
 8011bd4:	607a      	str	r2, [r7, #4]
 8011bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011bda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011bde:	f7ee fbff 	bl	80003e0 <__aeabi_uldivmod>
 8011be2:	4602      	mov	r2, r0
 8011be4:	460b      	mov	r3, r1
 8011be6:	4610      	mov	r0, r2
 8011be8:	4619      	mov	r1, r3
 8011bea:	f04f 0200 	mov.w	r2, #0
 8011bee:	f04f 0300 	mov.w	r3, #0
 8011bf2:	020b      	lsls	r3, r1, #8
 8011bf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011bf8:	0202      	lsls	r2, r0, #8
 8011bfa:	6979      	ldr	r1, [r7, #20]
 8011bfc:	6849      	ldr	r1, [r1, #4]
 8011bfe:	0849      	lsrs	r1, r1, #1
 8011c00:	2000      	movs	r0, #0
 8011c02:	460c      	mov	r4, r1
 8011c04:	4605      	mov	r5, r0
 8011c06:	eb12 0804 	adds.w	r8, r2, r4
 8011c0a:	eb43 0905 	adc.w	r9, r3, r5
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	469a      	mov	sl, r3
 8011c16:	4693      	mov	fp, r2
 8011c18:	4652      	mov	r2, sl
 8011c1a:	465b      	mov	r3, fp
 8011c1c:	4640      	mov	r0, r8
 8011c1e:	4649      	mov	r1, r9
 8011c20:	f7ee fbde 	bl	80003e0 <__aeabi_uldivmod>
 8011c24:	4602      	mov	r2, r0
 8011c26:	460b      	mov	r3, r1
 8011c28:	4613      	mov	r3, r2
 8011c2a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c32:	d308      	bcc.n	8011c46 <UART_SetConfig+0x9a2>
 8011c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c3a:	d204      	bcs.n	8011c46 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c42:	60da      	str	r2, [r3, #12]
 8011c44:	e17f      	b.n	8011f46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011c46:	2301      	movs	r3, #1
 8011c48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c4c:	e17b      	b.n	8011f46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	69db      	ldr	r3, [r3, #28]
 8011c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c56:	f040 80bd 	bne.w	8011dd4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011c5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c5e:	2b20      	cmp	r3, #32
 8011c60:	dc48      	bgt.n	8011cf4 <UART_SetConfig+0xa50>
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	db7b      	blt.n	8011d5e <UART_SetConfig+0xaba>
 8011c66:	2b20      	cmp	r3, #32
 8011c68:	d879      	bhi.n	8011d5e <UART_SetConfig+0xaba>
 8011c6a:	a201      	add	r2, pc, #4	; (adr r2, 8011c70 <UART_SetConfig+0x9cc>)
 8011c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c70:	08011cfb 	.word	0x08011cfb
 8011c74:	08011d03 	.word	0x08011d03
 8011c78:	08011d5f 	.word	0x08011d5f
 8011c7c:	08011d5f 	.word	0x08011d5f
 8011c80:	08011d0b 	.word	0x08011d0b
 8011c84:	08011d5f 	.word	0x08011d5f
 8011c88:	08011d5f 	.word	0x08011d5f
 8011c8c:	08011d5f 	.word	0x08011d5f
 8011c90:	08011d1b 	.word	0x08011d1b
 8011c94:	08011d5f 	.word	0x08011d5f
 8011c98:	08011d5f 	.word	0x08011d5f
 8011c9c:	08011d5f 	.word	0x08011d5f
 8011ca0:	08011d5f 	.word	0x08011d5f
 8011ca4:	08011d5f 	.word	0x08011d5f
 8011ca8:	08011d5f 	.word	0x08011d5f
 8011cac:	08011d5f 	.word	0x08011d5f
 8011cb0:	08011d2b 	.word	0x08011d2b
 8011cb4:	08011d5f 	.word	0x08011d5f
 8011cb8:	08011d5f 	.word	0x08011d5f
 8011cbc:	08011d5f 	.word	0x08011d5f
 8011cc0:	08011d5f 	.word	0x08011d5f
 8011cc4:	08011d5f 	.word	0x08011d5f
 8011cc8:	08011d5f 	.word	0x08011d5f
 8011ccc:	08011d5f 	.word	0x08011d5f
 8011cd0:	08011d5f 	.word	0x08011d5f
 8011cd4:	08011d5f 	.word	0x08011d5f
 8011cd8:	08011d5f 	.word	0x08011d5f
 8011cdc:	08011d5f 	.word	0x08011d5f
 8011ce0:	08011d5f 	.word	0x08011d5f
 8011ce4:	08011d5f 	.word	0x08011d5f
 8011ce8:	08011d5f 	.word	0x08011d5f
 8011cec:	08011d5f 	.word	0x08011d5f
 8011cf0:	08011d51 	.word	0x08011d51
 8011cf4:	2b40      	cmp	r3, #64	; 0x40
 8011cf6:	d02e      	beq.n	8011d56 <UART_SetConfig+0xab2>
 8011cf8:	e031      	b.n	8011d5e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cfa:	f7f8 ff1f 	bl	800ab3c <HAL_RCC_GetPCLK1Freq>
 8011cfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d00:	e033      	b.n	8011d6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d02:	f7f8 ff31 	bl	800ab68 <HAL_RCC_GetPCLK2Freq>
 8011d06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011d08:	e02f      	b.n	8011d6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fa fdc8 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d18:	e027      	b.n	8011d6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d1a:	f107 0318 	add.w	r3, r7, #24
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7fa ff14 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d28:	e01f      	b.n	8011d6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d2a:	4b69      	ldr	r3, [pc, #420]	; (8011ed0 <UART_SetConfig+0xc2c>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f003 0320 	and.w	r3, r3, #32
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d009      	beq.n	8011d4a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d36:	4b66      	ldr	r3, [pc, #408]	; (8011ed0 <UART_SetConfig+0xc2c>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	08db      	lsrs	r3, r3, #3
 8011d3c:	f003 0303 	and.w	r3, r3, #3
 8011d40:	4a64      	ldr	r2, [pc, #400]	; (8011ed4 <UART_SetConfig+0xc30>)
 8011d42:	fa22 f303 	lsr.w	r3, r2, r3
 8011d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d48:	e00f      	b.n	8011d6a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011d4a:	4b62      	ldr	r3, [pc, #392]	; (8011ed4 <UART_SetConfig+0xc30>)
 8011d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d4e:	e00c      	b.n	8011d6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d50:	4b61      	ldr	r3, [pc, #388]	; (8011ed8 <UART_SetConfig+0xc34>)
 8011d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d54:	e009      	b.n	8011d6a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d5c:	e005      	b.n	8011d6a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d62:	2301      	movs	r3, #1
 8011d64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f000 80ea 	beq.w	8011f46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d76:	4a55      	ldr	r2, [pc, #340]	; (8011ecc <UART_SetConfig+0xc28>)
 8011d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d84:	005a      	lsls	r2, r3, #1
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	085b      	lsrs	r3, r3, #1
 8011d8c:	441a      	add	r2, r3
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9a:	2b0f      	cmp	r3, #15
 8011d9c:	d916      	bls.n	8011dcc <UART_SetConfig+0xb28>
 8011d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011da4:	d212      	bcs.n	8011dcc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	f023 030f 	bic.w	r3, r3, #15
 8011dae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db2:	085b      	lsrs	r3, r3, #1
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	f003 0307 	and.w	r3, r3, #7
 8011dba:	b29a      	uxth	r2, r3
 8011dbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011dc8:	60da      	str	r2, [r3, #12]
 8011dca:	e0bc      	b.n	8011f46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011dd2:	e0b8      	b.n	8011f46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011dd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011dd8:	2b20      	cmp	r3, #32
 8011dda:	dc4b      	bgt.n	8011e74 <UART_SetConfig+0xbd0>
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	f2c0 8087 	blt.w	8011ef0 <UART_SetConfig+0xc4c>
 8011de2:	2b20      	cmp	r3, #32
 8011de4:	f200 8084 	bhi.w	8011ef0 <UART_SetConfig+0xc4c>
 8011de8:	a201      	add	r2, pc, #4	; (adr r2, 8011df0 <UART_SetConfig+0xb4c>)
 8011dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dee:	bf00      	nop
 8011df0:	08011e7b 	.word	0x08011e7b
 8011df4:	08011e83 	.word	0x08011e83
 8011df8:	08011ef1 	.word	0x08011ef1
 8011dfc:	08011ef1 	.word	0x08011ef1
 8011e00:	08011e8b 	.word	0x08011e8b
 8011e04:	08011ef1 	.word	0x08011ef1
 8011e08:	08011ef1 	.word	0x08011ef1
 8011e0c:	08011ef1 	.word	0x08011ef1
 8011e10:	08011e9b 	.word	0x08011e9b
 8011e14:	08011ef1 	.word	0x08011ef1
 8011e18:	08011ef1 	.word	0x08011ef1
 8011e1c:	08011ef1 	.word	0x08011ef1
 8011e20:	08011ef1 	.word	0x08011ef1
 8011e24:	08011ef1 	.word	0x08011ef1
 8011e28:	08011ef1 	.word	0x08011ef1
 8011e2c:	08011ef1 	.word	0x08011ef1
 8011e30:	08011eab 	.word	0x08011eab
 8011e34:	08011ef1 	.word	0x08011ef1
 8011e38:	08011ef1 	.word	0x08011ef1
 8011e3c:	08011ef1 	.word	0x08011ef1
 8011e40:	08011ef1 	.word	0x08011ef1
 8011e44:	08011ef1 	.word	0x08011ef1
 8011e48:	08011ef1 	.word	0x08011ef1
 8011e4c:	08011ef1 	.word	0x08011ef1
 8011e50:	08011ef1 	.word	0x08011ef1
 8011e54:	08011ef1 	.word	0x08011ef1
 8011e58:	08011ef1 	.word	0x08011ef1
 8011e5c:	08011ef1 	.word	0x08011ef1
 8011e60:	08011ef1 	.word	0x08011ef1
 8011e64:	08011ef1 	.word	0x08011ef1
 8011e68:	08011ef1 	.word	0x08011ef1
 8011e6c:	08011ef1 	.word	0x08011ef1
 8011e70:	08011ee3 	.word	0x08011ee3
 8011e74:	2b40      	cmp	r3, #64	; 0x40
 8011e76:	d037      	beq.n	8011ee8 <UART_SetConfig+0xc44>
 8011e78:	e03a      	b.n	8011ef0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e7a:	f7f8 fe5f 	bl	800ab3c <HAL_RCC_GetPCLK1Freq>
 8011e7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e80:	e03c      	b.n	8011efc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011e82:	f7f8 fe71 	bl	800ab68 <HAL_RCC_GetPCLK2Freq>
 8011e86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e88:	e038      	b.n	8011efc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fa fd08 	bl	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e98:	e030      	b.n	8011efc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e9a:	f107 0318 	add.w	r3, r7, #24
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fa fe54 	bl	800cb4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ea8:	e028      	b.n	8011efc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011eaa:	4b09      	ldr	r3, [pc, #36]	; (8011ed0 <UART_SetConfig+0xc2c>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f003 0320 	and.w	r3, r3, #32
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d012      	beq.n	8011edc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011eb6:	4b06      	ldr	r3, [pc, #24]	; (8011ed0 <UART_SetConfig+0xc2c>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	08db      	lsrs	r3, r3, #3
 8011ebc:	f003 0303 	and.w	r3, r3, #3
 8011ec0:	4a04      	ldr	r2, [pc, #16]	; (8011ed4 <UART_SetConfig+0xc30>)
 8011ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8011ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ec8:	e018      	b.n	8011efc <UART_SetConfig+0xc58>
 8011eca:	bf00      	nop
 8011ecc:	08018cf4 	.word	0x08018cf4
 8011ed0:	58024400 	.word	0x58024400
 8011ed4:	03d09000 	.word	0x03d09000
 8011ed8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011edc:	4b24      	ldr	r3, [pc, #144]	; (8011f70 <UART_SetConfig+0xccc>)
 8011ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ee0:	e00c      	b.n	8011efc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011ee2:	4b24      	ldr	r3, [pc, #144]	; (8011f74 <UART_SetConfig+0xcd0>)
 8011ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ee6:	e009      	b.n	8011efc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011eee:	e005      	b.n	8011efc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011efa:	bf00      	nop
    }

    if (pclk != 0U)
 8011efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d021      	beq.n	8011f46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f06:	4a1c      	ldr	r2, [pc, #112]	; (8011f78 <UART_SetConfig+0xcd4>)
 8011f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f10:	fbb3 f2f2 	udiv	r2, r3, r2
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	085b      	lsrs	r3, r3, #1
 8011f1a:	441a      	add	r2, r3
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f24:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f28:	2b0f      	cmp	r3, #15
 8011f2a:	d909      	bls.n	8011f40 <UART_SetConfig+0xc9c>
 8011f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f32:	d205      	bcs.n	8011f40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	60da      	str	r2, [r3, #12]
 8011f3e:	e002      	b.n	8011f46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011f40:	2301      	movs	r3, #1
 8011f42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	2201      	movs	r2, #1
 8011f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	2201      	movs	r2, #1
 8011f52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011f62:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3748      	adds	r7, #72	; 0x48
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011f70:	03d09000 	.word	0x03d09000
 8011f74:	003d0900 	.word	0x003d0900
 8011f78:	08018cf4 	.word	0x08018cf4

08011f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f88:	f003 0301 	and.w	r3, r3, #1
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00a      	beq.n	8011fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	430a      	orrs	r2, r1
 8011fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011faa:	f003 0302 	and.w	r3, r3, #2
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00a      	beq.n	8011fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	430a      	orrs	r2, r1
 8011fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fcc:	f003 0304 	and.w	r3, r3, #4
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00a      	beq.n	8011fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	430a      	orrs	r2, r1
 8011fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fee:	f003 0308 	and.w	r3, r3, #8
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d00a      	beq.n	801200c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	430a      	orrs	r2, r1
 801200a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012010:	f003 0310 	and.w	r3, r3, #16
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00a      	beq.n	801202e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	430a      	orrs	r2, r1
 801202c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012032:	f003 0320 	and.w	r3, r3, #32
 8012036:	2b00      	cmp	r3, #0
 8012038:	d00a      	beq.n	8012050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	689b      	ldr	r3, [r3, #8]
 8012040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	430a      	orrs	r2, r1
 801204e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012058:	2b00      	cmp	r3, #0
 801205a:	d01a      	beq.n	8012092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	430a      	orrs	r2, r1
 8012070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801207a:	d10a      	bne.n	8012092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	430a      	orrs	r2, r1
 8012090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00a      	beq.n	80120b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	430a      	orrs	r2, r1
 80120b2:	605a      	str	r2, [r3, #4]
  }
}
 80120b4:	bf00      	nop
 80120b6:	370c      	adds	r7, #12
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr

080120c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b098      	sub	sp, #96	; 0x60
 80120c4:	af02      	add	r7, sp, #8
 80120c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80120d0:	f7f1 fe74 	bl	8003dbc <HAL_GetTick>
 80120d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f003 0308 	and.w	r3, r3, #8
 80120e0:	2b08      	cmp	r3, #8
 80120e2:	d12f      	bne.n	8012144 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120ec:	2200      	movs	r2, #0
 80120ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 f88e 	bl	8012214 <UART_WaitOnFlagUntilTimeout>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d022      	beq.n	8012144 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012106:	e853 3f00 	ldrex	r3, [r3]
 801210a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012112:	653b      	str	r3, [r7, #80]	; 0x50
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	461a      	mov	r2, r3
 801211a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801211c:	647b      	str	r3, [r7, #68]	; 0x44
 801211e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012120:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012124:	e841 2300 	strex	r3, r2, [r1]
 8012128:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1e6      	bne.n	80120fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2220      	movs	r2, #32
 8012134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012140:	2303      	movs	r3, #3
 8012142:	e063      	b.n	801220c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f003 0304 	and.w	r3, r3, #4
 801214e:	2b04      	cmp	r3, #4
 8012150:	d149      	bne.n	80121e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012152:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012156:	9300      	str	r3, [sp, #0]
 8012158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801215a:	2200      	movs	r2, #0
 801215c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f000 f857 	bl	8012214 <UART_WaitOnFlagUntilTimeout>
 8012166:	4603      	mov	r3, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d03c      	beq.n	80121e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012174:	e853 3f00 	ldrex	r3, [r3]
 8012178:	623b      	str	r3, [r7, #32]
   return(result);
 801217a:	6a3b      	ldr	r3, [r7, #32]
 801217c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	461a      	mov	r2, r3
 8012188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801218a:	633b      	str	r3, [r7, #48]	; 0x30
 801218c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801218e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012192:	e841 2300 	strex	r3, r2, [r1]
 8012196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219a:	2b00      	cmp	r3, #0
 801219c:	d1e6      	bne.n	801216c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	3308      	adds	r3, #8
 80121a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	e853 3f00 	ldrex	r3, [r3]
 80121ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f023 0301 	bic.w	r3, r3, #1
 80121b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	3308      	adds	r3, #8
 80121bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121be:	61fa      	str	r2, [r7, #28]
 80121c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c2:	69b9      	ldr	r1, [r7, #24]
 80121c4:	69fa      	ldr	r2, [r7, #28]
 80121c6:	e841 2300 	strex	r3, r2, [r1]
 80121ca:	617b      	str	r3, [r7, #20]
   return(result);
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1e5      	bne.n	801219e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2220      	movs	r2, #32
 80121d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2200      	movs	r2, #0
 80121de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80121e2:	2303      	movs	r3, #3
 80121e4:	e012      	b.n	801220c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2220      	movs	r2, #32
 80121ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2220      	movs	r2, #32
 80121f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2200      	movs	r2, #0
 8012200:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2200      	movs	r2, #0
 8012206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801220a:	2300      	movs	r3, #0
}
 801220c:	4618      	mov	r0, r3
 801220e:	3758      	adds	r7, #88	; 0x58
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	603b      	str	r3, [r7, #0]
 8012220:	4613      	mov	r3, r2
 8012222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012224:	e049      	b.n	80122ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222c:	d045      	beq.n	80122ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801222e:	f7f1 fdc5 	bl	8003dbc <HAL_GetTick>
 8012232:	4602      	mov	r2, r0
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	1ad3      	subs	r3, r2, r3
 8012238:	69ba      	ldr	r2, [r7, #24]
 801223a:	429a      	cmp	r2, r3
 801223c:	d302      	bcc.n	8012244 <UART_WaitOnFlagUntilTimeout+0x30>
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d101      	bne.n	8012248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012244:	2303      	movs	r3, #3
 8012246:	e048      	b.n	80122da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f003 0304 	and.w	r3, r3, #4
 8012252:	2b00      	cmp	r3, #0
 8012254:	d031      	beq.n	80122ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	69db      	ldr	r3, [r3, #28]
 801225c:	f003 0308 	and.w	r3, r3, #8
 8012260:	2b08      	cmp	r3, #8
 8012262:	d110      	bne.n	8012286 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2208      	movs	r2, #8
 801226a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f000 f839 	bl	80122e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2208      	movs	r2, #8
 8012276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2200      	movs	r2, #0
 801227e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012282:	2301      	movs	r3, #1
 8012284:	e029      	b.n	80122da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	69db      	ldr	r3, [r3, #28]
 801228c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012294:	d111      	bne.n	80122ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801229e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	f000 f81f 	bl	80122e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2220      	movs	r2, #32
 80122aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2200      	movs	r2, #0
 80122b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80122b6:	2303      	movs	r3, #3
 80122b8:	e00f      	b.n	80122da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	69da      	ldr	r2, [r3, #28]
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	4013      	ands	r3, r2
 80122c4:	68ba      	ldr	r2, [r7, #8]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	bf0c      	ite	eq
 80122ca:	2301      	moveq	r3, #1
 80122cc:	2300      	movne	r3, #0
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	461a      	mov	r2, r3
 80122d2:	79fb      	ldrb	r3, [r7, #7]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d0a6      	beq.n	8012226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80122d8:	2300      	movs	r3, #0
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
	...

080122e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b095      	sub	sp, #84	; 0x54
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f4:	e853 3f00 	ldrex	r3, [r3]
 80122f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	461a      	mov	r2, r3
 8012308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801230a:	643b      	str	r3, [r7, #64]	; 0x40
 801230c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801230e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012312:	e841 2300 	strex	r3, r2, [r1]
 8012316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1e6      	bne.n	80122ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	3308      	adds	r3, #8
 8012324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012326:	6a3b      	ldr	r3, [r7, #32]
 8012328:	e853 3f00 	ldrex	r3, [r3]
 801232c:	61fb      	str	r3, [r7, #28]
   return(result);
 801232e:	69fa      	ldr	r2, [r7, #28]
 8012330:	4b1e      	ldr	r3, [pc, #120]	; (80123ac <UART_EndRxTransfer+0xc8>)
 8012332:	4013      	ands	r3, r2
 8012334:	64bb      	str	r3, [r7, #72]	; 0x48
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	3308      	adds	r3, #8
 801233c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801233e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012340:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012346:	e841 2300 	strex	r3, r2, [r1]
 801234a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	2b00      	cmp	r3, #0
 8012350:	d1e5      	bne.n	801231e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012356:	2b01      	cmp	r3, #1
 8012358:	d118      	bne.n	801238c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	e853 3f00 	ldrex	r3, [r3]
 8012366:	60bb      	str	r3, [r7, #8]
   return(result);
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	f023 0310 	bic.w	r3, r3, #16
 801236e:	647b      	str	r3, [r7, #68]	; 0x44
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	461a      	mov	r2, r3
 8012376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012378:	61bb      	str	r3, [r7, #24]
 801237a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801237c:	6979      	ldr	r1, [r7, #20]
 801237e:	69ba      	ldr	r2, [r7, #24]
 8012380:	e841 2300 	strex	r3, r2, [r1]
 8012384:	613b      	str	r3, [r7, #16]
   return(result);
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d1e6      	bne.n	801235a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2220      	movs	r2, #32
 8012390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2200      	movs	r2, #0
 801239e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80123a0:	bf00      	nop
 80123a2:	3754      	adds	r7, #84	; 0x54
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr
 80123ac:	effffffe 	.word	0xeffffffe

080123b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b085      	sub	sp, #20
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d101      	bne.n	80123c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80123c2:	2302      	movs	r3, #2
 80123c4:	e027      	b.n	8012416 <HAL_UARTEx_DisableFifoMode+0x66>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2201      	movs	r2, #1
 80123ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2224      	movs	r2, #36	; 0x24
 80123d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f022 0201 	bic.w	r2, r2, #1
 80123ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80123f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2220      	movs	r2, #32
 8012408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2200      	movs	r2, #0
 8012410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012414:	2300      	movs	r3, #0
}
 8012416:	4618      	mov	r0, r3
 8012418:	3714      	adds	r7, #20
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr

08012422 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012422:	b580      	push	{r7, lr}
 8012424:	b084      	sub	sp, #16
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012432:	2b01      	cmp	r3, #1
 8012434:	d101      	bne.n	801243a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012436:	2302      	movs	r3, #2
 8012438:	e02d      	b.n	8012496 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2224      	movs	r2, #36	; 0x24
 8012446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f022 0201 	bic.w	r2, r2, #1
 8012460:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	683a      	ldr	r2, [r7, #0]
 8012472:	430a      	orrs	r2, r1
 8012474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 f850 	bl	801251c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	68fa      	ldr	r2, [r7, #12]
 8012482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2220      	movs	r2, #32
 8012488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2200      	movs	r2, #0
 8012490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b084      	sub	sp, #16
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	d101      	bne.n	80124b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80124b2:	2302      	movs	r3, #2
 80124b4:	e02d      	b.n	8012512 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2201      	movs	r2, #1
 80124ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2224      	movs	r2, #36	; 0x24
 80124c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f022 0201 	bic.w	r2, r2, #1
 80124dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	689b      	ldr	r3, [r3, #8]
 80124e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	683a      	ldr	r2, [r7, #0]
 80124ee:	430a      	orrs	r2, r1
 80124f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f000 f812 	bl	801251c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2220      	movs	r2, #32
 8012504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012510:	2300      	movs	r3, #0
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
	...

0801251c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801251c:	b480      	push	{r7}
 801251e:	b085      	sub	sp, #20
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012528:	2b00      	cmp	r3, #0
 801252a:	d108      	bne.n	801253e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2201      	movs	r2, #1
 8012530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2201      	movs	r2, #1
 8012538:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801253c:	e031      	b.n	80125a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801253e:	2310      	movs	r3, #16
 8012540:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012542:	2310      	movs	r3, #16
 8012544:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	689b      	ldr	r3, [r3, #8]
 801254c:	0e5b      	lsrs	r3, r3, #25
 801254e:	b2db      	uxtb	r3, r3
 8012550:	f003 0307 	and.w	r3, r3, #7
 8012554:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	0f5b      	lsrs	r3, r3, #29
 801255e:	b2db      	uxtb	r3, r3
 8012560:	f003 0307 	and.w	r3, r3, #7
 8012564:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012566:	7bbb      	ldrb	r3, [r7, #14]
 8012568:	7b3a      	ldrb	r2, [r7, #12]
 801256a:	4911      	ldr	r1, [pc, #68]	; (80125b0 <UARTEx_SetNbDataToProcess+0x94>)
 801256c:	5c8a      	ldrb	r2, [r1, r2]
 801256e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012572:	7b3a      	ldrb	r2, [r7, #12]
 8012574:	490f      	ldr	r1, [pc, #60]	; (80125b4 <UARTEx_SetNbDataToProcess+0x98>)
 8012576:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012578:	fb93 f3f2 	sdiv	r3, r3, r2
 801257c:	b29a      	uxth	r2, r3
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012584:	7bfb      	ldrb	r3, [r7, #15]
 8012586:	7b7a      	ldrb	r2, [r7, #13]
 8012588:	4909      	ldr	r1, [pc, #36]	; (80125b0 <UARTEx_SetNbDataToProcess+0x94>)
 801258a:	5c8a      	ldrb	r2, [r1, r2]
 801258c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012590:	7b7a      	ldrb	r2, [r7, #13]
 8012592:	4908      	ldr	r1, [pc, #32]	; (80125b4 <UARTEx_SetNbDataToProcess+0x98>)
 8012594:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012596:	fb93 f3f2 	sdiv	r3, r3, r2
 801259a:	b29a      	uxth	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80125a2:	bf00      	nop
 80125a4:	3714      	adds	r7, #20
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr
 80125ae:	bf00      	nop
 80125b0:	08018d0c 	.word	0x08018d0c
 80125b4:	08018d14 	.word	0x08018d14

080125b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80125b8:	b084      	sub	sp, #16
 80125ba:	b480      	push	{r7}
 80125bc:	b085      	sub	sp, #20
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
 80125c2:	f107 001c 	add.w	r0, r7, #28
 80125c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80125ca:	2300      	movs	r3, #0
 80125cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80125ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80125d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80125d2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80125d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80125d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80125d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80125da:	431a      	orrs	r2, r3
             Init.ClockDiv
 80125dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80125de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	4313      	orrs	r3, r2
 80125e4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685a      	ldr	r2, [r3, #4]
 80125ea:	4b07      	ldr	r3, [pc, #28]	; (8012608 <SDMMC_Init+0x50>)
 80125ec:	4013      	ands	r3, r2
 80125ee:	68fa      	ldr	r2, [r7, #12]
 80125f0:	431a      	orrs	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80125f6:	2300      	movs	r3, #0
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3714      	adds	r7, #20
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	b004      	add	sp, #16
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	ffc02c00 	.word	0xffc02c00

0801260c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801261a:	4618      	mov	r0, r3
 801261c:	370c      	adds	r7, #12
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr

08012626 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012626:	b480      	push	{r7}
 8012628:	b083      	sub	sp, #12
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
 801262e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801263a:	2300      	movs	r3, #0
}
 801263c:	4618      	mov	r0, r3
 801263e:	370c      	adds	r7, #12
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr

08012648 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f043 0203 	orr.w	r2, r3, #3
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801265c:	2300      	movs	r3, #0
}
 801265e:	4618      	mov	r0, r3
 8012660:	370c      	adds	r7, #12
 8012662:	46bd      	mov	sp, r7
 8012664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012668:	4770      	bx	lr

0801266a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801266a:	b480      	push	{r7}
 801266c:	b083      	sub	sp, #12
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	f003 0303 	and.w	r3, r3, #3
}
 801267a:	4618      	mov	r0, r3
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr
	...

08012688 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012688:	b480      	push	{r7}
 801268a:	b085      	sub	sp, #20
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012692:	2300      	movs	r3, #0
 8012694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80126a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80126ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80126b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	4313      	orrs	r3, r2
 80126b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	68da      	ldr	r2, [r3, #12]
 80126be:	4b06      	ldr	r3, [pc, #24]	; (80126d8 <SDMMC_SendCommand+0x50>)
 80126c0:	4013      	ands	r3, r2
 80126c2:	68fa      	ldr	r2, [r7, #12]
 80126c4:	431a      	orrs	r2, r3
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80126ca:	2300      	movs	r3, #0
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3714      	adds	r7, #20
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr
 80126d8:	fffee0c0 	.word	0xfffee0c0

080126dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	691b      	ldr	r3, [r3, #16]
 80126e8:	b2db      	uxtb	r3, r3
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	370c      	adds	r7, #12
 80126ee:	46bd      	mov	sp, r7
 80126f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f4:	4770      	bx	lr

080126f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80126f6:	b480      	push	{r7}
 80126f8:	b085      	sub	sp, #20
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
 80126fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	3314      	adds	r3, #20
 8012704:	461a      	mov	r2, r3
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	4413      	add	r3, r2
 801270a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
}
 8012710:	4618      	mov	r0, r3
 8012712:	3714      	adds	r7, #20
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012726:	2300      	movs	r3, #0
 8012728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	685a      	ldr	r2, [r3, #4]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012742:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012748:	431a      	orrs	r2, r3
                       Data->DPSM);
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801274e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012750:	68fa      	ldr	r2, [r7, #12]
 8012752:	4313      	orrs	r3, r2
 8012754:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801275a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	431a      	orrs	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012766:	2300      	movs	r3, #0

}
 8012768:	4618      	mov	r0, r3
 801276a:	3714      	adds	r7, #20
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr

08012774 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b088      	sub	sp, #32
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012782:	2310      	movs	r3, #16
 8012784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012786:	f44f 7380 	mov.w	r3, #256	; 0x100
 801278a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801278c:	2300      	movs	r3, #0
 801278e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012794:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012796:	f107 0308 	add.w	r3, r7, #8
 801279a:	4619      	mov	r1, r3
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7ff ff73 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80127a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80127a6:	2110      	movs	r1, #16
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f000 fa5f 	bl	8012c6c <SDMMC_GetCmdResp1>
 80127ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127b0:	69fb      	ldr	r3, [r7, #28]
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3720      	adds	r7, #32
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b088      	sub	sp, #32
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
 80127c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80127c8:	2311      	movs	r3, #17
 80127ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127d2:	2300      	movs	r3, #0
 80127d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127dc:	f107 0308 	add.w	r3, r7, #8
 80127e0:	4619      	mov	r1, r3
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ff ff50 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80127e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127ec:	2111      	movs	r1, #17
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 fa3c 	bl	8012c6c <SDMMC_GetCmdResp1>
 80127f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f6:	69fb      	ldr	r3, [r7, #28]
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3720      	adds	r7, #32
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b088      	sub	sp, #32
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801280e:	2312      	movs	r3, #18
 8012810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012818:	2300      	movs	r3, #0
 801281a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801281c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012822:	f107 0308 	add.w	r3, r7, #8
 8012826:	4619      	mov	r1, r3
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7ff ff2d 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012832:	2112      	movs	r1, #18
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f000 fa19 	bl	8012c6c <SDMMC_GetCmdResp1>
 801283a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801283c:	69fb      	ldr	r3, [r7, #28]
}
 801283e:	4618      	mov	r0, r3
 8012840:	3720      	adds	r7, #32
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b088      	sub	sp, #32
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012854:	2318      	movs	r3, #24
 8012856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012858:	f44f 7380 	mov.w	r3, #256	; 0x100
 801285c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801285e:	2300      	movs	r3, #0
 8012860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012868:	f107 0308 	add.w	r3, r7, #8
 801286c:	4619      	mov	r1, r3
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7ff ff0a 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012874:	f241 3288 	movw	r2, #5000	; 0x1388
 8012878:	2118      	movs	r1, #24
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f000 f9f6 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012882:	69fb      	ldr	r3, [r7, #28]
}
 8012884:	4618      	mov	r0, r3
 8012886:	3720      	adds	r7, #32
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b088      	sub	sp, #32
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801289a:	2319      	movs	r3, #25
 801289c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801289e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128a4:	2300      	movs	r3, #0
 80128a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128ae:	f107 0308 	add.w	r3, r7, #8
 80128b2:	4619      	mov	r1, r3
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7ff fee7 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80128ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80128be:	2119      	movs	r1, #25
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 f9d3 	bl	8012c6c <SDMMC_GetCmdResp1>
 80128c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128c8:	69fb      	ldr	r3, [r7, #28]
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3720      	adds	r7, #32
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
	...

080128d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b088      	sub	sp, #32
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80128dc:	2300      	movs	r3, #0
 80128de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80128e0:	230c      	movs	r3, #12
 80128e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128ea:	2300      	movs	r3, #0
 80128ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128f2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	68db      	ldr	r3, [r3, #12]
 8012904:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801290c:	f107 0308 	add.w	r3, r7, #8
 8012910:	4619      	mov	r1, r3
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f7ff feb8 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012918:	4a0b      	ldr	r2, [pc, #44]	; (8012948 <SDMMC_CmdStopTransfer+0x74>)
 801291a:	210c      	movs	r1, #12
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 f9a5 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012922:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012936:	d101      	bne.n	801293c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012938:	2300      	movs	r3, #0
 801293a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801293c:	69fb      	ldr	r3, [r7, #28]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3720      	adds	r7, #32
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	05f5e100 	.word	0x05f5e100

0801294c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b088      	sub	sp, #32
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801295a:	2307      	movs	r3, #7
 801295c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801295e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012964:	2300      	movs	r3, #0
 8012966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801296c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801296e:	f107 0308 	add.w	r3, r7, #8
 8012972:	4619      	mov	r1, r3
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f7ff fe87 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801297a:	f241 3288 	movw	r2, #5000	; 0x1388
 801297e:	2107      	movs	r1, #7
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f000 f973 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012986:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012988:	69fb      	ldr	r3, [r7, #28]
}
 801298a:	4618      	mov	r0, r3
 801298c:	3720      	adds	r7, #32
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b088      	sub	sp, #32
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801299a:	2300      	movs	r3, #0
 801299c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801299e:	2300      	movs	r3, #0
 80129a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80129a2:	2300      	movs	r3, #0
 80129a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129a6:	2300      	movs	r3, #0
 80129a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129b0:	f107 0308 	add.w	r3, r7, #8
 80129b4:	4619      	mov	r1, r3
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7ff fe66 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 fb97 	bl	80130f0 <SDMMC_GetCmdError>
 80129c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129c4:	69fb      	ldr	r3, [r7, #28]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3720      	adds	r7, #32
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b088      	sub	sp, #32
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80129d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80129da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80129dc:	2308      	movs	r3, #8
 80129de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129e6:	2300      	movs	r3, #0
 80129e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129f0:	f107 0308 	add.w	r3, r7, #8
 80129f4:	4619      	mov	r1, r3
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f7ff fe46 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 fb29 	bl	8013054 <SDMMC_GetCmdResp7>
 8012a02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a04:	69fb      	ldr	r3, [r7, #28]
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3720      	adds	r7, #32
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}

08012a0e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b088      	sub	sp, #32
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
 8012a16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012a1c:	2337      	movs	r3, #55	; 0x37
 8012a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a26:	2300      	movs	r3, #0
 8012a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a30:	f107 0308 	add.w	r3, r7, #8
 8012a34:	4619      	mov	r1, r3
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f7ff fe26 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a40:	2137      	movs	r1, #55	; 0x37
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f000 f912 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a4a:	69fb      	ldr	r3, [r7, #28]
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3720      	adds	r7, #32
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b088      	sub	sp, #32
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012a62:	2329      	movs	r3, #41	; 0x29
 8012a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a76:	f107 0308 	add.w	r3, r7, #8
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f7ff fe03 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 fa2e 	bl	8012ee4 <SDMMC_GetCmdResp3>
 8012a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a8a:	69fb      	ldr	r3, [r7, #28]
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3720      	adds	r7, #32
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b088      	sub	sp, #32
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012aa2:	2306      	movs	r3, #6
 8012aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012aac:	2300      	movs	r3, #0
 8012aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ab6:	f107 0308 	add.w	r3, r7, #8
 8012aba:	4619      	mov	r1, r3
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7ff fde3 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ac6:	2106      	movs	r1, #6
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 f8cf 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ad0:	69fb      	ldr	r3, [r7, #28]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3720      	adds	r7, #32
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012ada:	b580      	push	{r7, lr}
 8012adc:	b088      	sub	sp, #32
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012ae6:	2333      	movs	r3, #51	; 0x33
 8012ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012af0:	2300      	movs	r3, #0
 8012af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012afa:	f107 0308 	add.w	r3, r7, #8
 8012afe:	4619      	mov	r1, r3
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7ff fdc1 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b0a:	2133      	movs	r1, #51	; 0x33
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f000 f8ad 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b14:	69fb      	ldr	r3, [r7, #28]
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3720      	adds	r7, #32
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b088      	sub	sp, #32
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012b26:	2300      	movs	r3, #0
 8012b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012b2a:	2302      	movs	r3, #2
 8012b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b34:	2300      	movs	r3, #0
 8012b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b3e:	f107 0308 	add.w	r3, r7, #8
 8012b42:	4619      	mov	r1, r3
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f7ff fd9f 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f000 f980 	bl	8012e50 <SDMMC_GetCmdResp2>
 8012b50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b52:	69fb      	ldr	r3, [r7, #28]
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3720      	adds	r7, #32
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}

08012b5c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b088      	sub	sp, #32
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012b6a:	2309      	movs	r3, #9
 8012b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b74:	2300      	movs	r3, #0
 8012b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b7e:	f107 0308 	add.w	r3, r7, #8
 8012b82:	4619      	mov	r1, r3
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff fd7f 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f000 f960 	bl	8012e50 <SDMMC_GetCmdResp2>
 8012b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b92:	69fb      	ldr	r3, [r7, #28]
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3720      	adds	r7, #32
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b088      	sub	sp, #32
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012baa:	2303      	movs	r3, #3
 8012bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bbe:	f107 0308 	add.w	r3, r7, #8
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ff fd5f 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012bca:	683a      	ldr	r2, [r7, #0]
 8012bcc:	2103      	movs	r1, #3
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 f9c8 	bl	8012f64 <SDMMC_GetCmdResp6>
 8012bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bd6:	69fb      	ldr	r3, [r7, #28]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3720      	adds	r7, #32
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b088      	sub	sp, #32
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012bee:	230d      	movs	r3, #13
 8012bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c02:	f107 0308 	add.w	r3, r7, #8
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f7ff fd3d 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c12:	210d      	movs	r1, #13
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 f829 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c1c:	69fb      	ldr	r3, [r7, #28]
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3720      	adds	r7, #32
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b088      	sub	sp, #32
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012c32:	230d      	movs	r3, #13
 8012c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c46:	f107 0308 	add.w	r3, r7, #8
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f7ff fd1b 	bl	8012688 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c56:	210d      	movs	r1, #13
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 f807 	bl	8012c6c <SDMMC_GetCmdResp1>
 8012c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c60:	69fb      	ldr	r3, [r7, #28]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3720      	adds	r7, #32
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
	...

08012c6c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b088      	sub	sp, #32
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	460b      	mov	r3, r1
 8012c76:	607a      	str	r2, [r7, #4]
 8012c78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012c7a:	4b70      	ldr	r3, [pc, #448]	; (8012e3c <SDMMC_GetCmdResp1+0x1d0>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a70      	ldr	r2, [pc, #448]	; (8012e40 <SDMMC_GetCmdResp1+0x1d4>)
 8012c80:	fba2 2303 	umull	r2, r3, r2, r3
 8012c84:	0a5a      	lsrs	r2, r3, #9
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	fb02 f303 	mul.w	r3, r2, r3
 8012c8c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	1e5a      	subs	r2, r3, #1
 8012c92:	61fa      	str	r2, [r7, #28]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d102      	bne.n	8012c9e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c9c:	e0c9      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ca2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012ca4:	69ba      	ldr	r2, [r7, #24]
 8012ca6:	4b67      	ldr	r3, [pc, #412]	; (8012e44 <SDMMC_GetCmdResp1+0x1d8>)
 8012ca8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d0ef      	beq.n	8012c8e <SDMMC_GetCmdResp1+0x22>
 8012cae:	69bb      	ldr	r3, [r7, #24]
 8012cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d1ea      	bne.n	8012c8e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cbc:	f003 0304 	and.w	r3, r3, #4
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d004      	beq.n	8012cce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2204      	movs	r2, #4
 8012cc8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012cca:	2304      	movs	r3, #4
 8012ccc:	e0b1      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cd2:	f003 0301 	and.w	r3, r3, #1
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d004      	beq.n	8012ce4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2201      	movs	r2, #1
 8012cde:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e0a6      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	4a58      	ldr	r2, [pc, #352]	; (8012e48 <SDMMC_GetCmdResp1+0x1dc>)
 8012ce8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f7ff fcf6 	bl	80126dc <SDMMC_GetCommandResponse>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	7afb      	ldrb	r3, [r7, #11]
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d001      	beq.n	8012cfe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e099      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012cfe:	2100      	movs	r1, #0
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f7ff fcf8 	bl	80126f6 <SDMMC_GetResponse>
 8012d06:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	4b50      	ldr	r3, [pc, #320]	; (8012e4c <SDMMC_GetCmdResp1+0x1e0>)
 8012d0c:	4013      	ands	r3, r2
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d101      	bne.n	8012d16 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012d12:	2300      	movs	r3, #0
 8012d14:	e08d      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	da02      	bge.n	8012d22 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012d20:	e087      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d001      	beq.n	8012d30 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012d2c:	2340      	movs	r3, #64	; 0x40
 8012d2e:	e080      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012d3a:	2380      	movs	r3, #128	; 0x80
 8012d3c:	e079      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d002      	beq.n	8012d4e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d4c:	e071      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d5c:	e069      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d6c:	e061      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d002      	beq.n	8012d7e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d7c:	e059      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d8c:	e051      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d002      	beq.n	8012d9e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d9c:	e049      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d002      	beq.n	8012dae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012da8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012dac:	e041      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d002      	beq.n	8012dbe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012dbc:	e039      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d002      	beq.n	8012dce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012dcc:	e031      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d002      	beq.n	8012dde <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012dd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012ddc:	e029      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d002      	beq.n	8012dee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012de8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012dec:	e021      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d002      	beq.n	8012dfe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012df8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012dfc:	e019      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d002      	beq.n	8012e0e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012e0c:	e011      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d002      	beq.n	8012e1e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012e18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012e1c:	e009      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	f003 0308 	and.w	r3, r3, #8
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d002      	beq.n	8012e2e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012e28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012e2c:	e001      	b.n	8012e32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3720      	adds	r7, #32
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	24000000 	.word	0x24000000
 8012e40:	10624dd3 	.word	0x10624dd3
 8012e44:	00200045 	.word	0x00200045
 8012e48:	002000c5 	.word	0x002000c5
 8012e4c:	fdffe008 	.word	0xfdffe008

08012e50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b085      	sub	sp, #20
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012e58:	4b1f      	ldr	r3, [pc, #124]	; (8012ed8 <SDMMC_GetCmdResp2+0x88>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4a1f      	ldr	r2, [pc, #124]	; (8012edc <SDMMC_GetCmdResp2+0x8c>)
 8012e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8012e62:	0a5b      	lsrs	r3, r3, #9
 8012e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e68:	fb02 f303 	mul.w	r3, r2, r3
 8012e6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	1e5a      	subs	r2, r3, #1
 8012e72:	60fa      	str	r2, [r7, #12]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d102      	bne.n	8012e7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e7c:	e026      	b.n	8012ecc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d0ef      	beq.n	8012e6e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d1ea      	bne.n	8012e6e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e9c:	f003 0304 	and.w	r3, r3, #4
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d004      	beq.n	8012eae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2204      	movs	r2, #4
 8012ea8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012eaa:	2304      	movs	r3, #4
 8012eac:	e00e      	b.n	8012ecc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eb2:	f003 0301 	and.w	r3, r3, #1
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d004      	beq.n	8012ec4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e003      	b.n	8012ecc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	4a06      	ldr	r2, [pc, #24]	; (8012ee0 <SDMMC_GetCmdResp2+0x90>)
 8012ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012eca:	2300      	movs	r3, #0
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3714      	adds	r7, #20
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr
 8012ed8:	24000000 	.word	0x24000000
 8012edc:	10624dd3 	.word	0x10624dd3
 8012ee0:	002000c5 	.word	0x002000c5

08012ee4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b085      	sub	sp, #20
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012eec:	4b1a      	ldr	r3, [pc, #104]	; (8012f58 <SDMMC_GetCmdResp3+0x74>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	4a1a      	ldr	r2, [pc, #104]	; (8012f5c <SDMMC_GetCmdResp3+0x78>)
 8012ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ef6:	0a5b      	lsrs	r3, r3, #9
 8012ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012efc:	fb02 f303 	mul.w	r3, r2, r3
 8012f00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	1e5a      	subs	r2, r3, #1
 8012f06:	60fa      	str	r2, [r7, #12]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d102      	bne.n	8012f12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f10:	e01b      	b.n	8012f4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f16:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d0ef      	beq.n	8012f02 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d1ea      	bne.n	8012f02 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f30:	f003 0304 	and.w	r3, r3, #4
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d004      	beq.n	8012f42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2204      	movs	r2, #4
 8012f3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f3e:	2304      	movs	r3, #4
 8012f40:	e003      	b.n	8012f4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	4a06      	ldr	r2, [pc, #24]	; (8012f60 <SDMMC_GetCmdResp3+0x7c>)
 8012f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3714      	adds	r7, #20
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr
 8012f56:	bf00      	nop
 8012f58:	24000000 	.word	0x24000000
 8012f5c:	10624dd3 	.word	0x10624dd3
 8012f60:	002000c5 	.word	0x002000c5

08012f64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b088      	sub	sp, #32
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	460b      	mov	r3, r1
 8012f6e:	607a      	str	r2, [r7, #4]
 8012f70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012f72:	4b35      	ldr	r3, [pc, #212]	; (8013048 <SDMMC_GetCmdResp6+0xe4>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4a35      	ldr	r2, [pc, #212]	; (801304c <SDMMC_GetCmdResp6+0xe8>)
 8012f78:	fba2 2303 	umull	r2, r3, r2, r3
 8012f7c:	0a5b      	lsrs	r3, r3, #9
 8012f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f82:	fb02 f303 	mul.w	r3, r2, r3
 8012f86:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	1e5a      	subs	r2, r3, #1
 8012f8c:	61fa      	str	r2, [r7, #28]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d102      	bne.n	8012f98 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f96:	e052      	b.n	801303e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f9c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d0ef      	beq.n	8012f88 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d1ea      	bne.n	8012f88 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fb6:	f003 0304 	and.w	r3, r3, #4
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d004      	beq.n	8012fc8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	2204      	movs	r2, #4
 8012fc2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012fc4:	2304      	movs	r3, #4
 8012fc6:	e03a      	b.n	801303e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fcc:	f003 0301 	and.w	r3, r3, #1
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d004      	beq.n	8012fde <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012fda:	2301      	movs	r3, #1
 8012fdc:	e02f      	b.n	801303e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	f7ff fb7c 	bl	80126dc <SDMMC_GetCommandResponse>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	7afb      	ldrb	r3, [r7, #11]
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d001      	beq.n	8012ff2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012fee:	2301      	movs	r3, #1
 8012ff0:	e025      	b.n	801303e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	4a16      	ldr	r2, [pc, #88]	; (8013050 <SDMMC_GetCmdResp6+0xec>)
 8012ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	68f8      	ldr	r0, [r7, #12]
 8012ffc:	f7ff fb7b 	bl	80126f6 <SDMMC_GetResponse>
 8013000:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013008:	2b00      	cmp	r3, #0
 801300a:	d106      	bne.n	801301a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	0c1b      	lsrs	r3, r3, #16
 8013010:	b29a      	uxth	r2, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013016:	2300      	movs	r3, #0
 8013018:	e011      	b.n	801303e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013020:	2b00      	cmp	r3, #0
 8013022:	d002      	beq.n	801302a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013028:	e009      	b.n	801303e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013030:	2b00      	cmp	r3, #0
 8013032:	d002      	beq.n	801303a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013038:	e001      	b.n	801303e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801303a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801303e:	4618      	mov	r0, r3
 8013040:	3720      	adds	r7, #32
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	24000000 	.word	0x24000000
 801304c:	10624dd3 	.word	0x10624dd3
 8013050:	002000c5 	.word	0x002000c5

08013054 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013054:	b480      	push	{r7}
 8013056:	b085      	sub	sp, #20
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801305c:	4b22      	ldr	r3, [pc, #136]	; (80130e8 <SDMMC_GetCmdResp7+0x94>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4a22      	ldr	r2, [pc, #136]	; (80130ec <SDMMC_GetCmdResp7+0x98>)
 8013062:	fba2 2303 	umull	r2, r3, r2, r3
 8013066:	0a5b      	lsrs	r3, r3, #9
 8013068:	f241 3288 	movw	r2, #5000	; 0x1388
 801306c:	fb02 f303 	mul.w	r3, r2, r3
 8013070:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	1e5a      	subs	r2, r3, #1
 8013076:	60fa      	str	r2, [r7, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d102      	bne.n	8013082 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801307c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013080:	e02c      	b.n	80130dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013086:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801308e:	2b00      	cmp	r3, #0
 8013090:	d0ef      	beq.n	8013072 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013098:	2b00      	cmp	r3, #0
 801309a:	d1ea      	bne.n	8013072 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130a0:	f003 0304 	and.w	r3, r3, #4
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d004      	beq.n	80130b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2204      	movs	r2, #4
 80130ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80130ae:	2304      	movs	r3, #4
 80130b0:	e014      	b.n	80130dc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130b6:	f003 0301 	and.w	r3, r3, #1
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d004      	beq.n	80130c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2201      	movs	r2, #1
 80130c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80130c4:	2301      	movs	r3, #1
 80130c6:	e009      	b.n	80130dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2240      	movs	r2, #64	; 0x40
 80130d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80130da:	2300      	movs	r3, #0

}
 80130dc:	4618      	mov	r0, r3
 80130de:	3714      	adds	r7, #20
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	24000000 	.word	0x24000000
 80130ec:	10624dd3 	.word	0x10624dd3

080130f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b085      	sub	sp, #20
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80130f8:	4b11      	ldr	r3, [pc, #68]	; (8013140 <SDMMC_GetCmdError+0x50>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a11      	ldr	r2, [pc, #68]	; (8013144 <SDMMC_GetCmdError+0x54>)
 80130fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013102:	0a5b      	lsrs	r3, r3, #9
 8013104:	f241 3288 	movw	r2, #5000	; 0x1388
 8013108:	fb02 f303 	mul.w	r3, r2, r3
 801310c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	1e5a      	subs	r2, r3, #1
 8013112:	60fa      	str	r2, [r7, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d102      	bne.n	801311e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801311c:	e009      	b.n	8013132 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013126:	2b00      	cmp	r3, #0
 8013128:	d0f1      	beq.n	801310e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	4a06      	ldr	r2, [pc, #24]	; (8013148 <SDMMC_GetCmdError+0x58>)
 801312e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013130:	2300      	movs	r3, #0
}
 8013132:	4618      	mov	r0, r3
 8013134:	3714      	adds	r7, #20
 8013136:	46bd      	mov	sp, r7
 8013138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313c:	4770      	bx	lr
 801313e:	bf00      	nop
 8013140:	24000000 	.word	0x24000000
 8013144:	10624dd3 	.word	0x10624dd3
 8013148:	002000c5 	.word	0x002000c5

0801314c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801314c:	b084      	sub	sp, #16
 801314e:	b580      	push	{r7, lr}
 8013150:	b084      	sub	sp, #16
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
 8013156:	f107 001c 	add.w	r0, r7, #28
 801315a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	2b01      	cmp	r3, #1
 8013162:	d120      	bne.n	80131a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	68da      	ldr	r2, [r3, #12]
 8013174:	4b2a      	ldr	r3, [pc, #168]	; (8013220 <USB_CoreInit+0xd4>)
 8013176:	4013      	ands	r3, r2
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	68db      	ldr	r3, [r3, #12]
 8013180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801318a:	2b01      	cmp	r3, #1
 801318c:	d105      	bne.n	801319a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	68db      	ldr	r3, [r3, #12]
 8013192:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f001 faf8 	bl	8014790 <USB_CoreReset>
 80131a0:	4603      	mov	r3, r0
 80131a2:	73fb      	strb	r3, [r7, #15]
 80131a4:	e01a      	b.n	80131dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	68db      	ldr	r3, [r3, #12]
 80131aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f001 faec 	bl	8014790 <USB_CoreReset>
 80131b8:	4603      	mov	r3, r0
 80131ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80131bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d106      	bne.n	80131d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	639a      	str	r2, [r3, #56]	; 0x38
 80131ce:	e005      	b.n	80131dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80131dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131de:	2b01      	cmp	r3, #1
 80131e0:	d116      	bne.n	8013210 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80131f0:	4b0c      	ldr	r3, [pc, #48]	; (8013224 <USB_CoreInit+0xd8>)
 80131f2:	4313      	orrs	r3, r2
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	f043 0206 	orr.w	r2, r3, #6
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	689b      	ldr	r3, [r3, #8]
 8013208:	f043 0220 	orr.w	r2, r3, #32
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013210:	7bfb      	ldrb	r3, [r7, #15]
}
 8013212:	4618      	mov	r0, r3
 8013214:	3710      	adds	r7, #16
 8013216:	46bd      	mov	sp, r7
 8013218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801321c:	b004      	add	sp, #16
 801321e:	4770      	bx	lr
 8013220:	ffbdffbf 	.word	0xffbdffbf
 8013224:	03ee0000 	.word	0x03ee0000

08013228 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013228:	b480      	push	{r7}
 801322a:	b087      	sub	sp, #28
 801322c:	af00      	add	r7, sp, #0
 801322e:	60f8      	str	r0, [r7, #12]
 8013230:	60b9      	str	r1, [r7, #8]
 8013232:	4613      	mov	r3, r2
 8013234:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013236:	79fb      	ldrb	r3, [r7, #7]
 8013238:	2b02      	cmp	r3, #2
 801323a:	d165      	bne.n	8013308 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	4a41      	ldr	r2, [pc, #260]	; (8013344 <USB_SetTurnaroundTime+0x11c>)
 8013240:	4293      	cmp	r3, r2
 8013242:	d906      	bls.n	8013252 <USB_SetTurnaroundTime+0x2a>
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	4a40      	ldr	r2, [pc, #256]	; (8013348 <USB_SetTurnaroundTime+0x120>)
 8013248:	4293      	cmp	r3, r2
 801324a:	d202      	bcs.n	8013252 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801324c:	230f      	movs	r3, #15
 801324e:	617b      	str	r3, [r7, #20]
 8013250:	e062      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	4a3c      	ldr	r2, [pc, #240]	; (8013348 <USB_SetTurnaroundTime+0x120>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d306      	bcc.n	8013268 <USB_SetTurnaroundTime+0x40>
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	4a3b      	ldr	r2, [pc, #236]	; (801334c <USB_SetTurnaroundTime+0x124>)
 801325e:	4293      	cmp	r3, r2
 8013260:	d202      	bcs.n	8013268 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013262:	230e      	movs	r3, #14
 8013264:	617b      	str	r3, [r7, #20]
 8013266:	e057      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	4a38      	ldr	r2, [pc, #224]	; (801334c <USB_SetTurnaroundTime+0x124>)
 801326c:	4293      	cmp	r3, r2
 801326e:	d306      	bcc.n	801327e <USB_SetTurnaroundTime+0x56>
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	4a37      	ldr	r2, [pc, #220]	; (8013350 <USB_SetTurnaroundTime+0x128>)
 8013274:	4293      	cmp	r3, r2
 8013276:	d202      	bcs.n	801327e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013278:	230d      	movs	r3, #13
 801327a:	617b      	str	r3, [r7, #20]
 801327c:	e04c      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	4a33      	ldr	r2, [pc, #204]	; (8013350 <USB_SetTurnaroundTime+0x128>)
 8013282:	4293      	cmp	r3, r2
 8013284:	d306      	bcc.n	8013294 <USB_SetTurnaroundTime+0x6c>
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	4a32      	ldr	r2, [pc, #200]	; (8013354 <USB_SetTurnaroundTime+0x12c>)
 801328a:	4293      	cmp	r3, r2
 801328c:	d802      	bhi.n	8013294 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801328e:	230c      	movs	r3, #12
 8013290:	617b      	str	r3, [r7, #20]
 8013292:	e041      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	4a2f      	ldr	r2, [pc, #188]	; (8013354 <USB_SetTurnaroundTime+0x12c>)
 8013298:	4293      	cmp	r3, r2
 801329a:	d906      	bls.n	80132aa <USB_SetTurnaroundTime+0x82>
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	4a2e      	ldr	r2, [pc, #184]	; (8013358 <USB_SetTurnaroundTime+0x130>)
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d802      	bhi.n	80132aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80132a4:	230b      	movs	r3, #11
 80132a6:	617b      	str	r3, [r7, #20]
 80132a8:	e036      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	4a2a      	ldr	r2, [pc, #168]	; (8013358 <USB_SetTurnaroundTime+0x130>)
 80132ae:	4293      	cmp	r3, r2
 80132b0:	d906      	bls.n	80132c0 <USB_SetTurnaroundTime+0x98>
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	4a29      	ldr	r2, [pc, #164]	; (801335c <USB_SetTurnaroundTime+0x134>)
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d802      	bhi.n	80132c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80132ba:	230a      	movs	r3, #10
 80132bc:	617b      	str	r3, [r7, #20]
 80132be:	e02b      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	4a26      	ldr	r2, [pc, #152]	; (801335c <USB_SetTurnaroundTime+0x134>)
 80132c4:	4293      	cmp	r3, r2
 80132c6:	d906      	bls.n	80132d6 <USB_SetTurnaroundTime+0xae>
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	4a25      	ldr	r2, [pc, #148]	; (8013360 <USB_SetTurnaroundTime+0x138>)
 80132cc:	4293      	cmp	r3, r2
 80132ce:	d202      	bcs.n	80132d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80132d0:	2309      	movs	r3, #9
 80132d2:	617b      	str	r3, [r7, #20]
 80132d4:	e020      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	4a21      	ldr	r2, [pc, #132]	; (8013360 <USB_SetTurnaroundTime+0x138>)
 80132da:	4293      	cmp	r3, r2
 80132dc:	d306      	bcc.n	80132ec <USB_SetTurnaroundTime+0xc4>
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	4a20      	ldr	r2, [pc, #128]	; (8013364 <USB_SetTurnaroundTime+0x13c>)
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d802      	bhi.n	80132ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80132e6:	2308      	movs	r3, #8
 80132e8:	617b      	str	r3, [r7, #20]
 80132ea:	e015      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	4a1d      	ldr	r2, [pc, #116]	; (8013364 <USB_SetTurnaroundTime+0x13c>)
 80132f0:	4293      	cmp	r3, r2
 80132f2:	d906      	bls.n	8013302 <USB_SetTurnaroundTime+0xda>
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	4a1c      	ldr	r2, [pc, #112]	; (8013368 <USB_SetTurnaroundTime+0x140>)
 80132f8:	4293      	cmp	r3, r2
 80132fa:	d202      	bcs.n	8013302 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80132fc:	2307      	movs	r3, #7
 80132fe:	617b      	str	r3, [r7, #20]
 8013300:	e00a      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013302:	2306      	movs	r3, #6
 8013304:	617b      	str	r3, [r7, #20]
 8013306:	e007      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013308:	79fb      	ldrb	r3, [r7, #7]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d102      	bne.n	8013314 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801330e:	2309      	movs	r3, #9
 8013310:	617b      	str	r3, [r7, #20]
 8013312:	e001      	b.n	8013318 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013314:	2309      	movs	r3, #9
 8013316:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	68da      	ldr	r2, [r3, #12]
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	029b      	lsls	r3, r3, #10
 801332c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013330:	431a      	orrs	r2, r3
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013336:	2300      	movs	r3, #0
}
 8013338:	4618      	mov	r0, r3
 801333a:	371c      	adds	r7, #28
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr
 8013344:	00d8acbf 	.word	0x00d8acbf
 8013348:	00e4e1c0 	.word	0x00e4e1c0
 801334c:	00f42400 	.word	0x00f42400
 8013350:	01067380 	.word	0x01067380
 8013354:	011a499f 	.word	0x011a499f
 8013358:	01312cff 	.word	0x01312cff
 801335c:	014ca43f 	.word	0x014ca43f
 8013360:	016e3600 	.word	0x016e3600
 8013364:	01a6ab1f 	.word	0x01a6ab1f
 8013368:	01e84800 	.word	0x01e84800

0801336c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	689b      	ldr	r3, [r3, #8]
 8013378:	f043 0201 	orr.w	r2, r3, #1
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013380:	2300      	movs	r3, #0
}
 8013382:	4618      	mov	r0, r3
 8013384:	370c      	adds	r7, #12
 8013386:	46bd      	mov	sp, r7
 8013388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338c:	4770      	bx	lr

0801338e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801338e:	b480      	push	{r7}
 8013390:	b083      	sub	sp, #12
 8013392:	af00      	add	r7, sp, #0
 8013394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	689b      	ldr	r3, [r3, #8]
 801339a:	f023 0201 	bic.w	r2, r3, #1
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80133a2:	2300      	movs	r3, #0
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	370c      	adds	r7, #12
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	460b      	mov	r3, r1
 80133ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80133bc:	2300      	movs	r3, #0
 80133be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80133cc:	78fb      	ldrb	r3, [r7, #3]
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d115      	bne.n	80133fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	68db      	ldr	r3, [r3, #12]
 80133d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80133de:	2001      	movs	r0, #1
 80133e0:	f7f0 fcf8 	bl	8003dd4 <HAL_Delay>
      ms++;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	3301      	adds	r3, #1
 80133e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f001 f93f 	bl	801466e <USB_GetMode>
 80133f0:	4603      	mov	r3, r0
 80133f2:	2b01      	cmp	r3, #1
 80133f4:	d01e      	beq.n	8013434 <USB_SetCurrentMode+0x84>
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2b31      	cmp	r3, #49	; 0x31
 80133fa:	d9f0      	bls.n	80133de <USB_SetCurrentMode+0x2e>
 80133fc:	e01a      	b.n	8013434 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80133fe:	78fb      	ldrb	r3, [r7, #3]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d115      	bne.n	8013430 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013410:	2001      	movs	r0, #1
 8013412:	f7f0 fcdf 	bl	8003dd4 <HAL_Delay>
      ms++;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	3301      	adds	r3, #1
 801341a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f001 f926 	bl	801466e <USB_GetMode>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d005      	beq.n	8013434 <USB_SetCurrentMode+0x84>
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2b31      	cmp	r3, #49	; 0x31
 801342c:	d9f0      	bls.n	8013410 <USB_SetCurrentMode+0x60>
 801342e:	e001      	b.n	8013434 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013430:	2301      	movs	r3, #1
 8013432:	e005      	b.n	8013440 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2b32      	cmp	r3, #50	; 0x32
 8013438:	d101      	bne.n	801343e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801343a:	2301      	movs	r3, #1
 801343c:	e000      	b.n	8013440 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801343e:	2300      	movs	r3, #0
}
 8013440:	4618      	mov	r0, r3
 8013442:	3710      	adds	r7, #16
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013448:	b084      	sub	sp, #16
 801344a:	b580      	push	{r7, lr}
 801344c:	b086      	sub	sp, #24
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
 8013452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801345a:	2300      	movs	r3, #0
 801345c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013462:	2300      	movs	r3, #0
 8013464:	613b      	str	r3, [r7, #16]
 8013466:	e009      	b.n	801347c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	3340      	adds	r3, #64	; 0x40
 801346e:	009b      	lsls	r3, r3, #2
 8013470:	4413      	add	r3, r2
 8013472:	2200      	movs	r2, #0
 8013474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	3301      	adds	r3, #1
 801347a:	613b      	str	r3, [r7, #16]
 801347c:	693b      	ldr	r3, [r7, #16]
 801347e:	2b0e      	cmp	r3, #14
 8013480:	d9f2      	bls.n	8013468 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013484:	2b00      	cmp	r3, #0
 8013486:	d11c      	bne.n	80134c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	68fa      	ldr	r2, [r7, #12]
 8013492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013496:	f043 0302 	orr.w	r3, r3, #2
 801349a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	601a      	str	r2, [r3, #0]
 80134c0:	e005      	b.n	80134ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80134d4:	461a      	mov	r2, r3
 80134d6:	2300      	movs	r3, #0
 80134d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134e0:	4619      	mov	r1, r3
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134e8:	461a      	mov	r2, r3
 80134ea:	680b      	ldr	r3, [r1, #0]
 80134ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80134ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f0:	2b01      	cmp	r3, #1
 80134f2:	d10c      	bne.n	801350e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80134f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d104      	bne.n	8013504 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80134fa:	2100      	movs	r1, #0
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f000 f965 	bl	80137cc <USB_SetDevSpeed>
 8013502:	e008      	b.n	8013516 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013504:	2101      	movs	r1, #1
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 f960 	bl	80137cc <USB_SetDevSpeed>
 801350c:	e003      	b.n	8013516 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801350e:	2103      	movs	r1, #3
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f000 f95b 	bl	80137cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013516:	2110      	movs	r1, #16
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f000 f8f3 	bl	8013704 <USB_FlushTxFifo>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d001      	beq.n	8013528 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013524:	2301      	movs	r3, #1
 8013526:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f000 f91f 	bl	801376c <USB_FlushRxFifo>
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	d001      	beq.n	8013538 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013534:	2301      	movs	r3, #1
 8013536:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801353e:	461a      	mov	r2, r3
 8013540:	2300      	movs	r3, #0
 8013542:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801354a:	461a      	mov	r2, r3
 801354c:	2300      	movs	r3, #0
 801354e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013556:	461a      	mov	r2, r3
 8013558:	2300      	movs	r3, #0
 801355a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801355c:	2300      	movs	r3, #0
 801355e:	613b      	str	r3, [r7, #16]
 8013560:	e043      	b.n	80135ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	015a      	lsls	r2, r3, #5
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	4413      	add	r3, r2
 801356a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013578:	d118      	bne.n	80135ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d10a      	bne.n	8013596 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	015a      	lsls	r2, r3, #5
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	4413      	add	r3, r2
 8013588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358c:	461a      	mov	r2, r3
 801358e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013592:	6013      	str	r3, [r2, #0]
 8013594:	e013      	b.n	80135be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	015a      	lsls	r2, r3, #5
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	4413      	add	r3, r2
 801359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a2:	461a      	mov	r2, r3
 80135a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80135a8:	6013      	str	r3, [r2, #0]
 80135aa:	e008      	b.n	80135be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	015a      	lsls	r2, r3, #5
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	4413      	add	r3, r2
 80135b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135b8:	461a      	mov	r2, r3
 80135ba:	2300      	movs	r3, #0
 80135bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	015a      	lsls	r2, r3, #5
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	4413      	add	r3, r2
 80135c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135ca:	461a      	mov	r2, r3
 80135cc:	2300      	movs	r3, #0
 80135ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	015a      	lsls	r2, r3, #5
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	4413      	add	r3, r2
 80135d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135dc:	461a      	mov	r2, r3
 80135de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80135e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	3301      	adds	r3, #1
 80135e8:	613b      	str	r3, [r7, #16]
 80135ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ec:	693a      	ldr	r2, [r7, #16]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d3b7      	bcc.n	8013562 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135f2:	2300      	movs	r3, #0
 80135f4:	613b      	str	r3, [r7, #16]
 80135f6:	e043      	b.n	8013680 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	015a      	lsls	r2, r3, #5
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	4413      	add	r3, r2
 8013600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801360a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801360e:	d118      	bne.n	8013642 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d10a      	bne.n	801362c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013616:	693b      	ldr	r3, [r7, #16]
 8013618:	015a      	lsls	r2, r3, #5
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	4413      	add	r3, r2
 801361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013622:	461a      	mov	r2, r3
 8013624:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013628:	6013      	str	r3, [r2, #0]
 801362a:	e013      	b.n	8013654 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	015a      	lsls	r2, r3, #5
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	4413      	add	r3, r2
 8013634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013638:	461a      	mov	r2, r3
 801363a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801363e:	6013      	str	r3, [r2, #0]
 8013640:	e008      	b.n	8013654 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	015a      	lsls	r2, r3, #5
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	4413      	add	r3, r2
 801364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801364e:	461a      	mov	r2, r3
 8013650:	2300      	movs	r3, #0
 8013652:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013654:	693b      	ldr	r3, [r7, #16]
 8013656:	015a      	lsls	r2, r3, #5
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	4413      	add	r3, r2
 801365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013660:	461a      	mov	r2, r3
 8013662:	2300      	movs	r3, #0
 8013664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	015a      	lsls	r2, r3, #5
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	4413      	add	r3, r2
 801366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013672:	461a      	mov	r2, r3
 8013674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	3301      	adds	r3, #1
 801367e:	613b      	str	r3, [r7, #16]
 8013680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013682:	693a      	ldr	r2, [r7, #16]
 8013684:	429a      	cmp	r2, r3
 8013686:	d3b7      	bcc.n	80135f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801368e:	691b      	ldr	r3, [r3, #16]
 8013690:	68fa      	ldr	r2, [r7, #12]
 8013692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801369a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2200      	movs	r2, #0
 80136a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80136a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d105      	bne.n	80136bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	699b      	ldr	r3, [r3, #24]
 80136b4:	f043 0210 	orr.w	r2, r3, #16
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	699a      	ldr	r2, [r3, #24]
 80136c0:	4b0e      	ldr	r3, [pc, #56]	; (80136fc <USB_DevInit+0x2b4>)
 80136c2:	4313      	orrs	r3, r2
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80136c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d005      	beq.n	80136da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	699b      	ldr	r3, [r3, #24]
 80136d2:	f043 0208 	orr.w	r2, r3, #8
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80136da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136dc:	2b01      	cmp	r3, #1
 80136de:	d105      	bne.n	80136ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	699a      	ldr	r2, [r3, #24]
 80136e4:	4b06      	ldr	r3, [pc, #24]	; (8013700 <USB_DevInit+0x2b8>)
 80136e6:	4313      	orrs	r3, r2
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80136ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3718      	adds	r7, #24
 80136f2:	46bd      	mov	sp, r7
 80136f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80136f8:	b004      	add	sp, #16
 80136fa:	4770      	bx	lr
 80136fc:	803c3800 	.word	0x803c3800
 8013700:	40000004 	.word	0x40000004

08013704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013704:	b480      	push	{r7}
 8013706:	b085      	sub	sp, #20
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801370e:	2300      	movs	r3, #0
 8013710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	3301      	adds	r3, #1
 8013716:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	4a13      	ldr	r2, [pc, #76]	; (8013768 <USB_FlushTxFifo+0x64>)
 801371c:	4293      	cmp	r3, r2
 801371e:	d901      	bls.n	8013724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013720:	2303      	movs	r3, #3
 8013722:	e01b      	b.n	801375c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	691b      	ldr	r3, [r3, #16]
 8013728:	2b00      	cmp	r3, #0
 801372a:	daf2      	bge.n	8013712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801372c:	2300      	movs	r3, #0
 801372e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	019b      	lsls	r3, r3, #6
 8013734:	f043 0220 	orr.w	r2, r3, #32
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	3301      	adds	r3, #1
 8013740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	4a08      	ldr	r2, [pc, #32]	; (8013768 <USB_FlushTxFifo+0x64>)
 8013746:	4293      	cmp	r3, r2
 8013748:	d901      	bls.n	801374e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801374a:	2303      	movs	r3, #3
 801374c:	e006      	b.n	801375c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	691b      	ldr	r3, [r3, #16]
 8013752:	f003 0320 	and.w	r3, r3, #32
 8013756:	2b20      	cmp	r3, #32
 8013758:	d0f0      	beq.n	801373c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801375a:	2300      	movs	r3, #0
}
 801375c:	4618      	mov	r0, r3
 801375e:	3714      	adds	r7, #20
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr
 8013768:	00030d40 	.word	0x00030d40

0801376c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801376c:	b480      	push	{r7}
 801376e:	b085      	sub	sp, #20
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013774:	2300      	movs	r3, #0
 8013776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	3301      	adds	r3, #1
 801377c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	4a11      	ldr	r2, [pc, #68]	; (80137c8 <USB_FlushRxFifo+0x5c>)
 8013782:	4293      	cmp	r3, r2
 8013784:	d901      	bls.n	801378a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013786:	2303      	movs	r3, #3
 8013788:	e018      	b.n	80137bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	691b      	ldr	r3, [r3, #16]
 801378e:	2b00      	cmp	r3, #0
 8013790:	daf2      	bge.n	8013778 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013792:	2300      	movs	r3, #0
 8013794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2210      	movs	r2, #16
 801379a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	3301      	adds	r3, #1
 80137a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	4a08      	ldr	r2, [pc, #32]	; (80137c8 <USB_FlushRxFifo+0x5c>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d901      	bls.n	80137ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80137aa:	2303      	movs	r3, #3
 80137ac:	e006      	b.n	80137bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	f003 0310 	and.w	r3, r3, #16
 80137b6:	2b10      	cmp	r3, #16
 80137b8:	d0f0      	beq.n	801379c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80137ba:	2300      	movs	r3, #0
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3714      	adds	r7, #20
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr
 80137c8:	00030d40 	.word	0x00030d40

080137cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80137cc:	b480      	push	{r7}
 80137ce:	b085      	sub	sp, #20
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	460b      	mov	r3, r1
 80137d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137e2:	681a      	ldr	r2, [r3, #0]
 80137e4:	78fb      	ldrb	r3, [r7, #3]
 80137e6:	68f9      	ldr	r1, [r7, #12]
 80137e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80137ec:	4313      	orrs	r3, r2
 80137ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80137f0:	2300      	movs	r3, #0
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3714      	adds	r7, #20
 80137f6:	46bd      	mov	sp, r7
 80137f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fc:	4770      	bx	lr

080137fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80137fe:	b480      	push	{r7}
 8013800:	b087      	sub	sp, #28
 8013802:	af00      	add	r7, sp, #0
 8013804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	f003 0306 	and.w	r3, r3, #6
 8013816:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d102      	bne.n	8013824 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801381e:	2300      	movs	r3, #0
 8013820:	75fb      	strb	r3, [r7, #23]
 8013822:	e00a      	b.n	801383a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2b02      	cmp	r3, #2
 8013828:	d002      	beq.n	8013830 <USB_GetDevSpeed+0x32>
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2b06      	cmp	r3, #6
 801382e:	d102      	bne.n	8013836 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013830:	2302      	movs	r3, #2
 8013832:	75fb      	strb	r3, [r7, #23]
 8013834:	e001      	b.n	801383a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013836:	230f      	movs	r3, #15
 8013838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801383a:	7dfb      	ldrb	r3, [r7, #23]
}
 801383c:	4618      	mov	r0, r3
 801383e:	371c      	adds	r7, #28
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr

08013848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013848:	b480      	push	{r7}
 801384a:	b085      	sub	sp, #20
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	785b      	ldrb	r3, [r3, #1]
 8013860:	2b01      	cmp	r3, #1
 8013862:	d139      	bne.n	80138d8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801386a:	69da      	ldr	r2, [r3, #28]
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	f003 030f 	and.w	r3, r3, #15
 8013874:	2101      	movs	r1, #1
 8013876:	fa01 f303 	lsl.w	r3, r1, r3
 801387a:	b29b      	uxth	r3, r3
 801387c:	68f9      	ldr	r1, [r7, #12]
 801387e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013882:	4313      	orrs	r3, r2
 8013884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	015a      	lsls	r2, r3, #5
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	4413      	add	r3, r2
 801388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013898:	2b00      	cmp	r3, #0
 801389a:	d153      	bne.n	8013944 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	015a      	lsls	r2, r3, #5
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	4413      	add	r3, r2
 80138a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	791b      	ldrb	r3, [r3, #4]
 80138b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80138b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	059b      	lsls	r3, r3, #22
 80138be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80138c0:	431a      	orrs	r2, r3
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	0159      	lsls	r1, r3, #5
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	440b      	add	r3, r1
 80138ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ce:	4619      	mov	r1, r3
 80138d0:	4b20      	ldr	r3, [pc, #128]	; (8013954 <USB_ActivateEndpoint+0x10c>)
 80138d2:	4313      	orrs	r3, r2
 80138d4:	600b      	str	r3, [r1, #0]
 80138d6:	e035      	b.n	8013944 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138de:	69da      	ldr	r2, [r3, #28]
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	f003 030f 	and.w	r3, r3, #15
 80138e8:	2101      	movs	r1, #1
 80138ea:	fa01 f303 	lsl.w	r3, r1, r3
 80138ee:	041b      	lsls	r3, r3, #16
 80138f0:	68f9      	ldr	r1, [r7, #12]
 80138f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80138f6:	4313      	orrs	r3, r2
 80138f8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	015a      	lsls	r2, r3, #5
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	4413      	add	r3, r2
 8013902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801390c:	2b00      	cmp	r3, #0
 801390e:	d119      	bne.n	8013944 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	4413      	add	r3, r2
 8013918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801391c:	681a      	ldr	r2, [r3, #0]
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	791b      	ldrb	r3, [r3, #4]
 801392a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801392c:	430b      	orrs	r3, r1
 801392e:	431a      	orrs	r2, r3
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	0159      	lsls	r1, r3, #5
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	440b      	add	r3, r1
 8013938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801393c:	4619      	mov	r1, r3
 801393e:	4b05      	ldr	r3, [pc, #20]	; (8013954 <USB_ActivateEndpoint+0x10c>)
 8013940:	4313      	orrs	r3, r2
 8013942:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3714      	adds	r7, #20
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	10008000 	.word	0x10008000

08013958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013958:	b480      	push	{r7}
 801395a:	b085      	sub	sp, #20
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	785b      	ldrb	r3, [r3, #1]
 8013970:	2b01      	cmp	r3, #1
 8013972:	d161      	bne.n	8013a38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	015a      	lsls	r2, r3, #5
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	4413      	add	r3, r2
 801397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801398a:	d11f      	bne.n	80139cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	015a      	lsls	r2, r3, #5
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	4413      	add	r3, r2
 8013994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	68ba      	ldr	r2, [r7, #8]
 801399c:	0151      	lsls	r1, r2, #5
 801399e:	68fa      	ldr	r2, [r7, #12]
 80139a0:	440a      	add	r2, r1
 80139a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	015a      	lsls	r2, r3, #5
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	4413      	add	r3, r2
 80139b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	68ba      	ldr	r2, [r7, #8]
 80139bc:	0151      	lsls	r1, r2, #5
 80139be:	68fa      	ldr	r2, [r7, #12]
 80139c0:	440a      	add	r2, r1
 80139c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	f003 030f 	and.w	r3, r3, #15
 80139dc:	2101      	movs	r1, #1
 80139de:	fa01 f303 	lsl.w	r3, r1, r3
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	43db      	mvns	r3, r3
 80139e6:	68f9      	ldr	r1, [r7, #12]
 80139e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139ec:	4013      	ands	r3, r2
 80139ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139f6:	69da      	ldr	r2, [r3, #28]
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	f003 030f 	and.w	r3, r3, #15
 8013a00:	2101      	movs	r1, #1
 8013a02:	fa01 f303 	lsl.w	r3, r1, r3
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	43db      	mvns	r3, r3
 8013a0a:	68f9      	ldr	r1, [r7, #12]
 8013a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a10:	4013      	ands	r3, r2
 8013a12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	015a      	lsls	r2, r3, #5
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	4413      	add	r3, r2
 8013a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	0159      	lsls	r1, r3, #5
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	440b      	add	r3, r1
 8013a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a2e:	4619      	mov	r1, r3
 8013a30:	4b35      	ldr	r3, [pc, #212]	; (8013b08 <USB_DeactivateEndpoint+0x1b0>)
 8013a32:	4013      	ands	r3, r2
 8013a34:	600b      	str	r3, [r1, #0]
 8013a36:	e060      	b.n	8013afa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	015a      	lsls	r2, r3, #5
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	4413      	add	r3, r2
 8013a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a4e:	d11f      	bne.n	8013a90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	015a      	lsls	r2, r3, #5
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	4413      	add	r3, r2
 8013a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	68ba      	ldr	r2, [r7, #8]
 8013a60:	0151      	lsls	r1, r2, #5
 8013a62:	68fa      	ldr	r2, [r7, #12]
 8013a64:	440a      	add	r2, r1
 8013a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	015a      	lsls	r2, r3, #5
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	4413      	add	r3, r2
 8013a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	68ba      	ldr	r2, [r7, #8]
 8013a80:	0151      	lsls	r1, r2, #5
 8013a82:	68fa      	ldr	r2, [r7, #12]
 8013a84:	440a      	add	r2, r1
 8013a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	f003 030f 	and.w	r3, r3, #15
 8013aa0:	2101      	movs	r1, #1
 8013aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8013aa6:	041b      	lsls	r3, r3, #16
 8013aa8:	43db      	mvns	r3, r3
 8013aaa:	68f9      	ldr	r1, [r7, #12]
 8013aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ab0:	4013      	ands	r3, r2
 8013ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aba:	69da      	ldr	r2, [r3, #28]
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	f003 030f 	and.w	r3, r3, #15
 8013ac4:	2101      	movs	r1, #1
 8013ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8013aca:	041b      	lsls	r3, r3, #16
 8013acc:	43db      	mvns	r3, r3
 8013ace:	68f9      	ldr	r1, [r7, #12]
 8013ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	015a      	lsls	r2, r3, #5
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	4413      	add	r3, r2
 8013ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	0159      	lsls	r1, r3, #5
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	440b      	add	r3, r1
 8013aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af2:	4619      	mov	r1, r3
 8013af4:	4b05      	ldr	r3, [pc, #20]	; (8013b0c <USB_DeactivateEndpoint+0x1b4>)
 8013af6:	4013      	ands	r3, r2
 8013af8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013afa:	2300      	movs	r3, #0
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3714      	adds	r7, #20
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr
 8013b08:	ec337800 	.word	0xec337800
 8013b0c:	eff37800 	.word	0xeff37800

08013b10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b08a      	sub	sp, #40	; 0x28
 8013b14:	af02      	add	r7, sp, #8
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	785b      	ldrb	r3, [r3, #1]
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	f040 8181 	bne.w	8013e34 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	691b      	ldr	r3, [r3, #16]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d132      	bne.n	8013ba0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013b3a:	69bb      	ldr	r3, [r7, #24]
 8013b3c:	015a      	lsls	r2, r3, #5
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	4413      	add	r3, r2
 8013b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b46:	691a      	ldr	r2, [r3, #16]
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	0159      	lsls	r1, r3, #5
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	440b      	add	r3, r1
 8013b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b54:	4619      	mov	r1, r3
 8013b56:	4ba5      	ldr	r3, [pc, #660]	; (8013dec <USB_EPStartXfer+0x2dc>)
 8013b58:	4013      	ands	r3, r2
 8013b5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	015a      	lsls	r2, r3, #5
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	4413      	add	r3, r2
 8013b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b68:	691b      	ldr	r3, [r3, #16]
 8013b6a:	69ba      	ldr	r2, [r7, #24]
 8013b6c:	0151      	lsls	r1, r2, #5
 8013b6e:	69fa      	ldr	r2, [r7, #28]
 8013b70:	440a      	add	r2, r1
 8013b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013b7c:	69bb      	ldr	r3, [r7, #24]
 8013b7e:	015a      	lsls	r2, r3, #5
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	4413      	add	r3, r2
 8013b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b88:	691a      	ldr	r2, [r3, #16]
 8013b8a:	69bb      	ldr	r3, [r7, #24]
 8013b8c:	0159      	lsls	r1, r3, #5
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	440b      	add	r3, r1
 8013b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b96:	4619      	mov	r1, r3
 8013b98:	4b95      	ldr	r3, [pc, #596]	; (8013df0 <USB_EPStartXfer+0x2e0>)
 8013b9a:	4013      	ands	r3, r2
 8013b9c:	610b      	str	r3, [r1, #16]
 8013b9e:	e092      	b.n	8013cc6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ba0:	69bb      	ldr	r3, [r7, #24]
 8013ba2:	015a      	lsls	r2, r3, #5
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	4413      	add	r3, r2
 8013ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bac:	691a      	ldr	r2, [r3, #16]
 8013bae:	69bb      	ldr	r3, [r7, #24]
 8013bb0:	0159      	lsls	r1, r3, #5
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	440b      	add	r3, r1
 8013bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bba:	4619      	mov	r1, r3
 8013bbc:	4b8c      	ldr	r3, [pc, #560]	; (8013df0 <USB_EPStartXfer+0x2e0>)
 8013bbe:	4013      	ands	r3, r2
 8013bc0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	015a      	lsls	r2, r3, #5
 8013bc6:	69fb      	ldr	r3, [r7, #28]
 8013bc8:	4413      	add	r3, r2
 8013bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bce:	691a      	ldr	r2, [r3, #16]
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	0159      	lsls	r1, r3, #5
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	440b      	add	r3, r1
 8013bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bdc:	4619      	mov	r1, r3
 8013bde:	4b83      	ldr	r3, [pc, #524]	; (8013dec <USB_EPStartXfer+0x2dc>)
 8013be0:	4013      	ands	r3, r2
 8013be2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013be4:	69bb      	ldr	r3, [r7, #24]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d11a      	bne.n	8013c20 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	691a      	ldr	r2, [r3, #16]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d903      	bls.n	8013bfe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	689a      	ldr	r2, [r3, #8]
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013bfe:	69bb      	ldr	r3, [r7, #24]
 8013c00:	015a      	lsls	r2, r3, #5
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	4413      	add	r3, r2
 8013c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c0a:	691b      	ldr	r3, [r3, #16]
 8013c0c:	69ba      	ldr	r2, [r7, #24]
 8013c0e:	0151      	lsls	r1, r2, #5
 8013c10:	69fa      	ldr	r2, [r7, #28]
 8013c12:	440a      	add	r2, r1
 8013c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013c1c:	6113      	str	r3, [r2, #16]
 8013c1e:	e01b      	b.n	8013c58 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	015a      	lsls	r2, r3, #5
 8013c24:	69fb      	ldr	r3, [r7, #28]
 8013c26:	4413      	add	r3, r2
 8013c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c2c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	6919      	ldr	r1, [r3, #16]
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	689b      	ldr	r3, [r3, #8]
 8013c36:	440b      	add	r3, r1
 8013c38:	1e59      	subs	r1, r3, #1
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	689b      	ldr	r3, [r3, #8]
 8013c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013c42:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013c44:	4b6b      	ldr	r3, [pc, #428]	; (8013df4 <USB_EPStartXfer+0x2e4>)
 8013c46:	400b      	ands	r3, r1
 8013c48:	69b9      	ldr	r1, [r7, #24]
 8013c4a:	0148      	lsls	r0, r1, #5
 8013c4c:	69f9      	ldr	r1, [r7, #28]
 8013c4e:	4401      	add	r1, r0
 8013c50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013c54:	4313      	orrs	r3, r2
 8013c56:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013c58:	69bb      	ldr	r3, [r7, #24]
 8013c5a:	015a      	lsls	r2, r3, #5
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	4413      	add	r3, r2
 8013c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c64:	691a      	ldr	r2, [r3, #16]
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	691b      	ldr	r3, [r3, #16]
 8013c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c6e:	69b9      	ldr	r1, [r7, #24]
 8013c70:	0148      	lsls	r0, r1, #5
 8013c72:	69f9      	ldr	r1, [r7, #28]
 8013c74:	4401      	add	r1, r0
 8013c76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	791b      	ldrb	r3, [r3, #4]
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d11f      	bne.n	8013cc6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	015a      	lsls	r2, r3, #5
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c92:	691b      	ldr	r3, [r3, #16]
 8013c94:	69ba      	ldr	r2, [r7, #24]
 8013c96:	0151      	lsls	r1, r2, #5
 8013c98:	69fa      	ldr	r2, [r7, #28]
 8013c9a:	440a      	add	r2, r1
 8013c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ca0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013ca4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	015a      	lsls	r2, r3, #5
 8013caa:	69fb      	ldr	r3, [r7, #28]
 8013cac:	4413      	add	r3, r2
 8013cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cb2:	691b      	ldr	r3, [r3, #16]
 8013cb4:	69ba      	ldr	r2, [r7, #24]
 8013cb6:	0151      	lsls	r1, r2, #5
 8013cb8:	69fa      	ldr	r2, [r7, #28]
 8013cba:	440a      	add	r2, r1
 8013cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013cc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013cc6:	79fb      	ldrb	r3, [r7, #7]
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d14b      	bne.n	8013d64 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	69db      	ldr	r3, [r3, #28]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d009      	beq.n	8013ce8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013cd4:	69bb      	ldr	r3, [r7, #24]
 8013cd6:	015a      	lsls	r2, r3, #5
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	4413      	add	r3, r2
 8013cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	69db      	ldr	r3, [r3, #28]
 8013ce6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	791b      	ldrb	r3, [r3, #4]
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	d128      	bne.n	8013d42 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013cf0:	69fb      	ldr	r3, [r7, #28]
 8013cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cf6:	689b      	ldr	r3, [r3, #8]
 8013cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d110      	bne.n	8013d22 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d00:	69bb      	ldr	r3, [r7, #24]
 8013d02:	015a      	lsls	r2, r3, #5
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	4413      	add	r3, r2
 8013d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	69ba      	ldr	r2, [r7, #24]
 8013d10:	0151      	lsls	r1, r2, #5
 8013d12:	69fa      	ldr	r2, [r7, #28]
 8013d14:	440a      	add	r2, r1
 8013d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013d1e:	6013      	str	r3, [r2, #0]
 8013d20:	e00f      	b.n	8013d42 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013d22:	69bb      	ldr	r3, [r7, #24]
 8013d24:	015a      	lsls	r2, r3, #5
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	4413      	add	r3, r2
 8013d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	69ba      	ldr	r2, [r7, #24]
 8013d32:	0151      	lsls	r1, r2, #5
 8013d34:	69fa      	ldr	r2, [r7, #28]
 8013d36:	440a      	add	r2, r1
 8013d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	015a      	lsls	r2, r3, #5
 8013d46:	69fb      	ldr	r3, [r7, #28]
 8013d48:	4413      	add	r3, r2
 8013d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	69ba      	ldr	r2, [r7, #24]
 8013d52:	0151      	lsls	r1, r2, #5
 8013d54:	69fa      	ldr	r2, [r7, #28]
 8013d56:	440a      	add	r2, r1
 8013d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d60:	6013      	str	r3, [r2, #0]
 8013d62:	e16a      	b.n	801403a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d64:	69bb      	ldr	r3, [r7, #24]
 8013d66:	015a      	lsls	r2, r3, #5
 8013d68:	69fb      	ldr	r3, [r7, #28]
 8013d6a:	4413      	add	r3, r2
 8013d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	69ba      	ldr	r2, [r7, #24]
 8013d74:	0151      	lsls	r1, r2, #5
 8013d76:	69fa      	ldr	r2, [r7, #28]
 8013d78:	440a      	add	r2, r1
 8013d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	791b      	ldrb	r3, [r3, #4]
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d015      	beq.n	8013db8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	691b      	ldr	r3, [r3, #16]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	f000 8152 	beq.w	801403a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013d96:	69fb      	ldr	r3, [r7, #28]
 8013d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	f003 030f 	and.w	r3, r3, #15
 8013da6:	2101      	movs	r1, #1
 8013da8:	fa01 f303 	lsl.w	r3, r1, r3
 8013dac:	69f9      	ldr	r1, [r7, #28]
 8013dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013db2:	4313      	orrs	r3, r2
 8013db4:	634b      	str	r3, [r1, #52]	; 0x34
 8013db6:	e140      	b.n	801403a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d117      	bne.n	8013df8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	015a      	lsls	r2, r3, #5
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	4413      	add	r3, r2
 8013dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	69ba      	ldr	r2, [r7, #24]
 8013dd8:	0151      	lsls	r1, r2, #5
 8013dda:	69fa      	ldr	r2, [r7, #28]
 8013ddc:	440a      	add	r2, r1
 8013dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	e016      	b.n	8013e18 <USB_EPStartXfer+0x308>
 8013dea:	bf00      	nop
 8013dec:	e007ffff 	.word	0xe007ffff
 8013df0:	fff80000 	.word	0xfff80000
 8013df4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013df8:	69bb      	ldr	r3, [r7, #24]
 8013dfa:	015a      	lsls	r2, r3, #5
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	4413      	add	r3, r2
 8013e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	69ba      	ldr	r2, [r7, #24]
 8013e08:	0151      	lsls	r1, r2, #5
 8013e0a:	69fa      	ldr	r2, [r7, #28]
 8013e0c:	440a      	add	r2, r1
 8013e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e16:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	68d9      	ldr	r1, [r3, #12]
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	781a      	ldrb	r2, [r3, #0]
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	691b      	ldr	r3, [r3, #16]
 8013e24:	b298      	uxth	r0, r3
 8013e26:	79fb      	ldrb	r3, [r7, #7]
 8013e28:	9300      	str	r3, [sp, #0]
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f000 f9b9 	bl	80141a4 <USB_WritePacket>
 8013e32:	e102      	b.n	801403a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	015a      	lsls	r2, r3, #5
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	4413      	add	r3, r2
 8013e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e40:	691a      	ldr	r2, [r3, #16]
 8013e42:	69bb      	ldr	r3, [r7, #24]
 8013e44:	0159      	lsls	r1, r3, #5
 8013e46:	69fb      	ldr	r3, [r7, #28]
 8013e48:	440b      	add	r3, r1
 8013e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e4e:	4619      	mov	r1, r3
 8013e50:	4b7c      	ldr	r3, [pc, #496]	; (8014044 <USB_EPStartXfer+0x534>)
 8013e52:	4013      	ands	r3, r2
 8013e54:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013e56:	69bb      	ldr	r3, [r7, #24]
 8013e58:	015a      	lsls	r2, r3, #5
 8013e5a:	69fb      	ldr	r3, [r7, #28]
 8013e5c:	4413      	add	r3, r2
 8013e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e62:	691a      	ldr	r2, [r3, #16]
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	0159      	lsls	r1, r3, #5
 8013e68:	69fb      	ldr	r3, [r7, #28]
 8013e6a:	440b      	add	r3, r1
 8013e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e70:	4619      	mov	r1, r3
 8013e72:	4b75      	ldr	r3, [pc, #468]	; (8014048 <USB_EPStartXfer+0x538>)
 8013e74:	4013      	ands	r3, r2
 8013e76:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d12f      	bne.n	8013ede <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	691b      	ldr	r3, [r3, #16]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d003      	beq.n	8013e8e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	689a      	ldr	r2, [r3, #8]
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	689a      	ldr	r2, [r3, #8]
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013e96:	69bb      	ldr	r3, [r7, #24]
 8013e98:	015a      	lsls	r2, r3, #5
 8013e9a:	69fb      	ldr	r3, [r7, #28]
 8013e9c:	4413      	add	r3, r2
 8013e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea2:	691a      	ldr	r2, [r3, #16]
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	6a1b      	ldr	r3, [r3, #32]
 8013ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013eac:	69b9      	ldr	r1, [r7, #24]
 8013eae:	0148      	lsls	r0, r1, #5
 8013eb0:	69f9      	ldr	r1, [r7, #28]
 8013eb2:	4401      	add	r1, r0
 8013eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	015a      	lsls	r2, r3, #5
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec8:	691b      	ldr	r3, [r3, #16]
 8013eca:	69ba      	ldr	r2, [r7, #24]
 8013ecc:	0151      	lsls	r1, r2, #5
 8013ece:	69fa      	ldr	r2, [r7, #28]
 8013ed0:	440a      	add	r2, r1
 8013ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013eda:	6113      	str	r3, [r2, #16]
 8013edc:	e05f      	b.n	8013f9e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d123      	bne.n	8013f2e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	015a      	lsls	r2, r3, #5
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	4413      	add	r3, r2
 8013eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef2:	691a      	ldr	r2, [r3, #16]
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013efc:	69b9      	ldr	r1, [r7, #24]
 8013efe:	0148      	lsls	r0, r1, #5
 8013f00:	69f9      	ldr	r1, [r7, #28]
 8013f02:	4401      	add	r1, r0
 8013f04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f08:	4313      	orrs	r3, r2
 8013f0a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013f0c:	69bb      	ldr	r3, [r7, #24]
 8013f0e:	015a      	lsls	r2, r3, #5
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	4413      	add	r3, r2
 8013f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f18:	691b      	ldr	r3, [r3, #16]
 8013f1a:	69ba      	ldr	r2, [r7, #24]
 8013f1c:	0151      	lsls	r1, r2, #5
 8013f1e:	69fa      	ldr	r2, [r7, #28]
 8013f20:	440a      	add	r2, r1
 8013f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013f2a:	6113      	str	r3, [r2, #16]
 8013f2c:	e037      	b.n	8013f9e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	691a      	ldr	r2, [r3, #16]
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	689b      	ldr	r3, [r3, #8]
 8013f36:	4413      	add	r3, r2
 8013f38:	1e5a      	subs	r2, r3, #1
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	689b      	ldr	r3, [r3, #8]
 8013f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f42:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	689b      	ldr	r3, [r3, #8]
 8013f48:	8afa      	ldrh	r2, [r7, #22]
 8013f4a:	fb03 f202 	mul.w	r2, r3, r2
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	015a      	lsls	r2, r3, #5
 8013f56:	69fb      	ldr	r3, [r7, #28]
 8013f58:	4413      	add	r3, r2
 8013f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f5e:	691a      	ldr	r2, [r3, #16]
 8013f60:	8afb      	ldrh	r3, [r7, #22]
 8013f62:	04d9      	lsls	r1, r3, #19
 8013f64:	4b39      	ldr	r3, [pc, #228]	; (801404c <USB_EPStartXfer+0x53c>)
 8013f66:	400b      	ands	r3, r1
 8013f68:	69b9      	ldr	r1, [r7, #24]
 8013f6a:	0148      	lsls	r0, r1, #5
 8013f6c:	69f9      	ldr	r1, [r7, #28]
 8013f6e:	4401      	add	r1, r0
 8013f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f74:	4313      	orrs	r3, r2
 8013f76:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	015a      	lsls	r2, r3, #5
 8013f7c:	69fb      	ldr	r3, [r7, #28]
 8013f7e:	4413      	add	r3, r2
 8013f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f84:	691a      	ldr	r2, [r3, #16]
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	6a1b      	ldr	r3, [r3, #32]
 8013f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f8e:	69b9      	ldr	r1, [r7, #24]
 8013f90:	0148      	lsls	r0, r1, #5
 8013f92:	69f9      	ldr	r1, [r7, #28]
 8013f94:	4401      	add	r1, r0
 8013f96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f9a:	4313      	orrs	r3, r2
 8013f9c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013f9e:	79fb      	ldrb	r3, [r7, #7]
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d10d      	bne.n	8013fc0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d009      	beq.n	8013fc0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	68d9      	ldr	r1, [r3, #12]
 8013fb0:	69bb      	ldr	r3, [r7, #24]
 8013fb2:	015a      	lsls	r2, r3, #5
 8013fb4:	69fb      	ldr	r3, [r7, #28]
 8013fb6:	4413      	add	r3, r2
 8013fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fbc:	460a      	mov	r2, r1
 8013fbe:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	791b      	ldrb	r3, [r3, #4]
 8013fc4:	2b01      	cmp	r3, #1
 8013fc6:	d128      	bne.n	801401a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fce:	689b      	ldr	r3, [r3, #8]
 8013fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d110      	bne.n	8013ffa <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	015a      	lsls	r2, r3, #5
 8013fdc:	69fb      	ldr	r3, [r7, #28]
 8013fde:	4413      	add	r3, r2
 8013fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	69ba      	ldr	r2, [r7, #24]
 8013fe8:	0151      	lsls	r1, r2, #5
 8013fea:	69fa      	ldr	r2, [r7, #28]
 8013fec:	440a      	add	r2, r1
 8013fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013ff6:	6013      	str	r3, [r2, #0]
 8013ff8:	e00f      	b.n	801401a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	015a      	lsls	r2, r3, #5
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	4413      	add	r3, r2
 8014002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	69ba      	ldr	r2, [r7, #24]
 801400a:	0151      	lsls	r1, r2, #5
 801400c:	69fa      	ldr	r2, [r7, #28]
 801400e:	440a      	add	r2, r1
 8014010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014018:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	015a      	lsls	r2, r3, #5
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	4413      	add	r3, r2
 8014022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	69ba      	ldr	r2, [r7, #24]
 801402a:	0151      	lsls	r1, r2, #5
 801402c:	69fa      	ldr	r2, [r7, #28]
 801402e:	440a      	add	r2, r1
 8014030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014038:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801403a:	2300      	movs	r3, #0
}
 801403c:	4618      	mov	r0, r3
 801403e:	3720      	adds	r7, #32
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}
 8014044:	fff80000 	.word	0xfff80000
 8014048:	e007ffff 	.word	0xe007ffff
 801404c:	1ff80000 	.word	0x1ff80000

08014050 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014050:	b480      	push	{r7}
 8014052:	b087      	sub	sp, #28
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801405a:	2300      	movs	r3, #0
 801405c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801405e:	2300      	movs	r3, #0
 8014060:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	785b      	ldrb	r3, [r3, #1]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d14a      	bne.n	8014104 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	015a      	lsls	r2, r3, #5
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	4413      	add	r3, r2
 8014078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014086:	f040 8086 	bne.w	8014196 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	015a      	lsls	r2, r3, #5
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	4413      	add	r3, r2
 8014094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	7812      	ldrb	r2, [r2, #0]
 801409e:	0151      	lsls	r1, r2, #5
 80140a0:	693a      	ldr	r2, [r7, #16]
 80140a2:	440a      	add	r2, r1
 80140a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80140ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	015a      	lsls	r2, r3, #5
 80140b4:	693b      	ldr	r3, [r7, #16]
 80140b6:	4413      	add	r3, r2
 80140b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	683a      	ldr	r2, [r7, #0]
 80140c0:	7812      	ldrb	r2, [r2, #0]
 80140c2:	0151      	lsls	r1, r2, #5
 80140c4:	693a      	ldr	r2, [r7, #16]
 80140c6:	440a      	add	r2, r1
 80140c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80140d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	3301      	adds	r3, #1
 80140d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	f242 7210 	movw	r2, #10000	; 0x2710
 80140de:	4293      	cmp	r3, r2
 80140e0:	d902      	bls.n	80140e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80140e2:	2301      	movs	r3, #1
 80140e4:	75fb      	strb	r3, [r7, #23]
          break;
 80140e6:	e056      	b.n	8014196 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	015a      	lsls	r2, r3, #5
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	4413      	add	r3, r2
 80140f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014100:	d0e7      	beq.n	80140d2 <USB_EPStopXfer+0x82>
 8014102:	e048      	b.n	8014196 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	015a      	lsls	r2, r3, #5
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	4413      	add	r3, r2
 801410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801411c:	d13b      	bne.n	8014196 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	015a      	lsls	r2, r3, #5
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	4413      	add	r3, r2
 8014128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	683a      	ldr	r2, [r7, #0]
 8014130:	7812      	ldrb	r2, [r2, #0]
 8014132:	0151      	lsls	r1, r2, #5
 8014134:	693a      	ldr	r2, [r7, #16]
 8014136:	440a      	add	r2, r1
 8014138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801413c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014140:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	781b      	ldrb	r3, [r3, #0]
 8014146:	015a      	lsls	r2, r3, #5
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	4413      	add	r3, r2
 801414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	683a      	ldr	r2, [r7, #0]
 8014154:	7812      	ldrb	r2, [r2, #0]
 8014156:	0151      	lsls	r1, r2, #5
 8014158:	693a      	ldr	r2, [r7, #16]
 801415a:	440a      	add	r2, r1
 801415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	3301      	adds	r3, #1
 801416a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014172:	4293      	cmp	r3, r2
 8014174:	d902      	bls.n	801417c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014176:	2301      	movs	r3, #1
 8014178:	75fb      	strb	r3, [r7, #23]
          break;
 801417a:	e00c      	b.n	8014196 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	015a      	lsls	r2, r3, #5
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	4413      	add	r3, r2
 8014186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014194:	d0e7      	beq.n	8014166 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014196:	7dfb      	ldrb	r3, [r7, #23]
}
 8014198:	4618      	mov	r0, r3
 801419a:	371c      	adds	r7, #28
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr

080141a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80141a4:	b480      	push	{r7}
 80141a6:	b089      	sub	sp, #36	; 0x24
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	4611      	mov	r1, r2
 80141b0:	461a      	mov	r2, r3
 80141b2:	460b      	mov	r3, r1
 80141b4:	71fb      	strb	r3, [r7, #7]
 80141b6:	4613      	mov	r3, r2
 80141b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80141c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d123      	bne.n	8014212 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80141ca:	88bb      	ldrh	r3, [r7, #4]
 80141cc:	3303      	adds	r3, #3
 80141ce:	089b      	lsrs	r3, r3, #2
 80141d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80141d2:	2300      	movs	r3, #0
 80141d4:	61bb      	str	r3, [r7, #24]
 80141d6:	e018      	b.n	801420a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80141d8:	79fb      	ldrb	r3, [r7, #7]
 80141da:	031a      	lsls	r2, r3, #12
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	4413      	add	r3, r2
 80141e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141e4:	461a      	mov	r2, r3
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	3301      	adds	r3, #1
 80141f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	3301      	adds	r3, #1
 80141f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	3301      	adds	r3, #1
 80141fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80141fe:	69fb      	ldr	r3, [r7, #28]
 8014200:	3301      	adds	r3, #1
 8014202:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014204:	69bb      	ldr	r3, [r7, #24]
 8014206:	3301      	adds	r3, #1
 8014208:	61bb      	str	r3, [r7, #24]
 801420a:	69ba      	ldr	r2, [r7, #24]
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	429a      	cmp	r2, r3
 8014210:	d3e2      	bcc.n	80141d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014212:	2300      	movs	r3, #0
}
 8014214:	4618      	mov	r0, r3
 8014216:	3724      	adds	r7, #36	; 0x24
 8014218:	46bd      	mov	sp, r7
 801421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421e:	4770      	bx	lr

08014220 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014220:	b480      	push	{r7}
 8014222:	b08b      	sub	sp, #44	; 0x2c
 8014224:	af00      	add	r7, sp, #0
 8014226:	60f8      	str	r0, [r7, #12]
 8014228:	60b9      	str	r1, [r7, #8]
 801422a:	4613      	mov	r3, r2
 801422c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014236:	88fb      	ldrh	r3, [r7, #6]
 8014238:	089b      	lsrs	r3, r3, #2
 801423a:	b29b      	uxth	r3, r3
 801423c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801423e:	88fb      	ldrh	r3, [r7, #6]
 8014240:	f003 0303 	and.w	r3, r3, #3
 8014244:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014246:	2300      	movs	r3, #0
 8014248:	623b      	str	r3, [r7, #32]
 801424a:	e014      	b.n	8014276 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801424c:	69bb      	ldr	r3, [r7, #24]
 801424e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	601a      	str	r2, [r3, #0]
    pDest++;
 8014258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425a:	3301      	adds	r3, #1
 801425c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014260:	3301      	adds	r3, #1
 8014262:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014266:	3301      	adds	r3, #1
 8014268:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426c:	3301      	adds	r3, #1
 801426e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014270:	6a3b      	ldr	r3, [r7, #32]
 8014272:	3301      	adds	r3, #1
 8014274:	623b      	str	r3, [r7, #32]
 8014276:	6a3a      	ldr	r2, [r7, #32]
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	429a      	cmp	r2, r3
 801427c:	d3e6      	bcc.n	801424c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801427e:	8bfb      	ldrh	r3, [r7, #30]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d01e      	beq.n	80142c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014284:	2300      	movs	r3, #0
 8014286:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014288:	69bb      	ldr	r3, [r7, #24]
 801428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801428e:	461a      	mov	r2, r3
 8014290:	f107 0310 	add.w	r3, r7, #16
 8014294:	6812      	ldr	r2, [r2, #0]
 8014296:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014298:	693a      	ldr	r2, [r7, #16]
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	b2db      	uxtb	r3, r3
 801429e:	00db      	lsls	r3, r3, #3
 80142a0:	fa22 f303 	lsr.w	r3, r2, r3
 80142a4:	b2da      	uxtb	r2, r3
 80142a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a8:	701a      	strb	r2, [r3, #0]
      i++;
 80142aa:	6a3b      	ldr	r3, [r7, #32]
 80142ac:	3301      	adds	r3, #1
 80142ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80142b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b2:	3301      	adds	r3, #1
 80142b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80142b6:	8bfb      	ldrh	r3, [r7, #30]
 80142b8:	3b01      	subs	r3, #1
 80142ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80142bc:	8bfb      	ldrh	r3, [r7, #30]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1ea      	bne.n	8014298 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80142c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	372c      	adds	r7, #44	; 0x2c
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b085      	sub	sp, #20
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	785b      	ldrb	r3, [r3, #1]
 80142e8:	2b01      	cmp	r3, #1
 80142ea:	d12c      	bne.n	8014346 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	015a      	lsls	r2, r3, #5
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	4413      	add	r3, r2
 80142f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	db12      	blt.n	8014324 <USB_EPSetStall+0x54>
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d00f      	beq.n	8014324 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	015a      	lsls	r2, r3, #5
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	4413      	add	r3, r2
 801430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	68ba      	ldr	r2, [r7, #8]
 8014314:	0151      	lsls	r1, r2, #5
 8014316:	68fa      	ldr	r2, [r7, #12]
 8014318:	440a      	add	r2, r1
 801431a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801431e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014322:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	015a      	lsls	r2, r3, #5
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	4413      	add	r3, r2
 801432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	68ba      	ldr	r2, [r7, #8]
 8014334:	0151      	lsls	r1, r2, #5
 8014336:	68fa      	ldr	r2, [r7, #12]
 8014338:	440a      	add	r2, r1
 801433a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801433e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014342:	6013      	str	r3, [r2, #0]
 8014344:	e02b      	b.n	801439e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	015a      	lsls	r2, r3, #5
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	4413      	add	r3, r2
 801434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	db12      	blt.n	801437e <USB_EPSetStall+0xae>
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00f      	beq.n	801437e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	015a      	lsls	r2, r3, #5
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	4413      	add	r3, r2
 8014366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	68ba      	ldr	r2, [r7, #8]
 801436e:	0151      	lsls	r1, r2, #5
 8014370:	68fa      	ldr	r2, [r7, #12]
 8014372:	440a      	add	r2, r1
 8014374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014378:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801437c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	015a      	lsls	r2, r3, #5
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	4413      	add	r3, r2
 8014386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	0151      	lsls	r1, r2, #5
 8014390:	68fa      	ldr	r2, [r7, #12]
 8014392:	440a      	add	r2, r1
 8014394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801439c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801439e:	2300      	movs	r3, #0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3714      	adds	r7, #20
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b085      	sub	sp, #20
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	785b      	ldrb	r3, [r3, #1]
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d128      	bne.n	801441a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	015a      	lsls	r2, r3, #5
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	4413      	add	r3, r2
 80143d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	68ba      	ldr	r2, [r7, #8]
 80143d8:	0151      	lsls	r1, r2, #5
 80143da:	68fa      	ldr	r2, [r7, #12]
 80143dc:	440a      	add	r2, r1
 80143de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80143e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	791b      	ldrb	r3, [r3, #4]
 80143ec:	2b03      	cmp	r3, #3
 80143ee:	d003      	beq.n	80143f8 <USB_EPClearStall+0x4c>
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	791b      	ldrb	r3, [r3, #4]
 80143f4:	2b02      	cmp	r3, #2
 80143f6:	d138      	bne.n	801446a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	015a      	lsls	r2, r3, #5
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	4413      	add	r3, r2
 8014400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	68ba      	ldr	r2, [r7, #8]
 8014408:	0151      	lsls	r1, r2, #5
 801440a:	68fa      	ldr	r2, [r7, #12]
 801440c:	440a      	add	r2, r1
 801440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014416:	6013      	str	r3, [r2, #0]
 8014418:	e027      	b.n	801446a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	015a      	lsls	r2, r3, #5
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	4413      	add	r3, r2
 8014422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	68ba      	ldr	r2, [r7, #8]
 801442a:	0151      	lsls	r1, r2, #5
 801442c:	68fa      	ldr	r2, [r7, #12]
 801442e:	440a      	add	r2, r1
 8014430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014438:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	791b      	ldrb	r3, [r3, #4]
 801443e:	2b03      	cmp	r3, #3
 8014440:	d003      	beq.n	801444a <USB_EPClearStall+0x9e>
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	791b      	ldrb	r3, [r3, #4]
 8014446:	2b02      	cmp	r3, #2
 8014448:	d10f      	bne.n	801446a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	015a      	lsls	r2, r3, #5
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	4413      	add	r3, r2
 8014452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	68ba      	ldr	r2, [r7, #8]
 801445a:	0151      	lsls	r1, r2, #5
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	440a      	add	r2, r1
 8014460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014468:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801446a:	2300      	movs	r3, #0
}
 801446c:	4618      	mov	r0, r3
 801446e:	3714      	adds	r7, #20
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr

08014478 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014478:	b480      	push	{r7}
 801447a:	b085      	sub	sp, #20
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	460b      	mov	r3, r1
 8014482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	68fa      	ldr	r2, [r7, #12]
 8014492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014496:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801449a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144a2:	681a      	ldr	r2, [r3, #0]
 80144a4:	78fb      	ldrb	r3, [r7, #3]
 80144a6:	011b      	lsls	r3, r3, #4
 80144a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80144ac:	68f9      	ldr	r1, [r7, #12]
 80144ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144b2:	4313      	orrs	r3, r2
 80144b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3714      	adds	r7, #20
 80144bc:	46bd      	mov	sp, r7
 80144be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c2:	4770      	bx	lr

080144c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80144c4:	b480      	push	{r7}
 80144c6:	b085      	sub	sp, #20
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80144de:	f023 0303 	bic.w	r3, r3, #3
 80144e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	68fa      	ldr	r2, [r7, #12]
 80144ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80144f2:	f023 0302 	bic.w	r3, r3, #2
 80144f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80144f8:	2300      	movs	r3, #0
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3714      	adds	r7, #20
 80144fe:	46bd      	mov	sp, r7
 8014500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014504:	4770      	bx	lr

08014506 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014506:	b480      	push	{r7}
 8014508:	b085      	sub	sp, #20
 801450a:	af00      	add	r7, sp, #0
 801450c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	68fa      	ldr	r2, [r7, #12]
 801451c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014520:	f023 0303 	bic.w	r3, r3, #3
 8014524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801452c:	685b      	ldr	r3, [r3, #4]
 801452e:	68fa      	ldr	r2, [r7, #12]
 8014530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014534:	f043 0302 	orr.w	r3, r3, #2
 8014538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801453a:	2300      	movs	r3, #0
}
 801453c:	4618      	mov	r0, r3
 801453e:	3714      	adds	r7, #20
 8014540:	46bd      	mov	sp, r7
 8014542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014546:	4770      	bx	lr

08014548 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014548:	b480      	push	{r7}
 801454a:	b085      	sub	sp, #20
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	695b      	ldr	r3, [r3, #20]
 8014554:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	699b      	ldr	r3, [r3, #24]
 801455a:	68fa      	ldr	r2, [r7, #12]
 801455c:	4013      	ands	r3, r2
 801455e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014560:	68fb      	ldr	r3, [r7, #12]
}
 8014562:	4618      	mov	r0, r3
 8014564:	3714      	adds	r7, #20
 8014566:	46bd      	mov	sp, r7
 8014568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456c:	4770      	bx	lr

0801456e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801456e:	b480      	push	{r7}
 8014570:	b085      	sub	sp, #20
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014580:	699b      	ldr	r3, [r3, #24]
 8014582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801458a:	69db      	ldr	r3, [r3, #28]
 801458c:	68ba      	ldr	r2, [r7, #8]
 801458e:	4013      	ands	r3, r2
 8014590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	0c1b      	lsrs	r3, r3, #16
}
 8014596:	4618      	mov	r0, r3
 8014598:	3714      	adds	r7, #20
 801459a:	46bd      	mov	sp, r7
 801459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a0:	4770      	bx	lr

080145a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80145a2:	b480      	push	{r7}
 80145a4:	b085      	sub	sp, #20
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145b4:	699b      	ldr	r3, [r3, #24]
 80145b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145be:	69db      	ldr	r3, [r3, #28]
 80145c0:	68ba      	ldr	r2, [r7, #8]
 80145c2:	4013      	ands	r3, r2
 80145c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	b29b      	uxth	r3, r3
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3714      	adds	r7, #20
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr

080145d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80145d6:	b480      	push	{r7}
 80145d8:	b085      	sub	sp, #20
 80145da:	af00      	add	r7, sp, #0
 80145dc:	6078      	str	r0, [r7, #4]
 80145de:	460b      	mov	r3, r1
 80145e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80145e6:	78fb      	ldrb	r3, [r7, #3]
 80145e8:	015a      	lsls	r2, r3, #5
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	4413      	add	r3, r2
 80145ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145fc:	695b      	ldr	r3, [r3, #20]
 80145fe:	68ba      	ldr	r2, [r7, #8]
 8014600:	4013      	ands	r3, r2
 8014602:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014604:	68bb      	ldr	r3, [r7, #8]
}
 8014606:	4618      	mov	r0, r3
 8014608:	3714      	adds	r7, #20
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr

08014612 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014612:	b480      	push	{r7}
 8014614:	b087      	sub	sp, #28
 8014616:	af00      	add	r7, sp, #0
 8014618:	6078      	str	r0, [r7, #4]
 801461a:	460b      	mov	r3, r1
 801461c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014628:	691b      	ldr	r3, [r3, #16]
 801462a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014634:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014636:	78fb      	ldrb	r3, [r7, #3]
 8014638:	f003 030f 	and.w	r3, r3, #15
 801463c:	68fa      	ldr	r2, [r7, #12]
 801463e:	fa22 f303 	lsr.w	r3, r2, r3
 8014642:	01db      	lsls	r3, r3, #7
 8014644:	b2db      	uxtb	r3, r3
 8014646:	693a      	ldr	r2, [r7, #16]
 8014648:	4313      	orrs	r3, r2
 801464a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801464c:	78fb      	ldrb	r3, [r7, #3]
 801464e:	015a      	lsls	r2, r3, #5
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	4413      	add	r3, r2
 8014654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014658:	689b      	ldr	r3, [r3, #8]
 801465a:	693a      	ldr	r2, [r7, #16]
 801465c:	4013      	ands	r3, r2
 801465e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014660:	68bb      	ldr	r3, [r7, #8]
}
 8014662:	4618      	mov	r0, r3
 8014664:	371c      	adds	r7, #28
 8014666:	46bd      	mov	sp, r7
 8014668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466c:	4770      	bx	lr

0801466e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801466e:	b480      	push	{r7}
 8014670:	b083      	sub	sp, #12
 8014672:	af00      	add	r7, sp, #0
 8014674:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	695b      	ldr	r3, [r3, #20]
 801467a:	f003 0301 	and.w	r3, r3, #1
}
 801467e:	4618      	mov	r0, r3
 8014680:	370c      	adds	r7, #12
 8014682:	46bd      	mov	sp, r7
 8014684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014688:	4770      	bx	lr
	...

0801468c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801468c:	b480      	push	{r7}
 801468e:	b085      	sub	sp, #20
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146a6:	4619      	mov	r1, r3
 80146a8:	4b09      	ldr	r3, [pc, #36]	; (80146d0 <USB_ActivateSetup+0x44>)
 80146aa:	4013      	ands	r3, r2
 80146ac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	68fa      	ldr	r2, [r7, #12]
 80146b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80146bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80146c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80146c2:	2300      	movs	r3, #0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3714      	adds	r7, #20
 80146c8:	46bd      	mov	sp, r7
 80146ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ce:	4770      	bx	lr
 80146d0:	fffff800 	.word	0xfffff800

080146d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80146d4:	b480      	push	{r7}
 80146d6:	b087      	sub	sp, #28
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	460b      	mov	r3, r1
 80146de:	607a      	str	r2, [r7, #4]
 80146e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	333c      	adds	r3, #60	; 0x3c
 80146ea:	3304      	adds	r3, #4
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	4a26      	ldr	r2, [pc, #152]	; (801478c <USB_EP0_OutStart+0xb8>)
 80146f4:	4293      	cmp	r3, r2
 80146f6:	d90a      	bls.n	801470e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014708:	d101      	bne.n	801470e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801470a:	2300      	movs	r3, #0
 801470c:	e037      	b.n	801477e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014714:	461a      	mov	r2, r3
 8014716:	2300      	movs	r3, #0
 8014718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014720:	691b      	ldr	r3, [r3, #16]
 8014722:	697a      	ldr	r2, [r7, #20]
 8014724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801472c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014734:	691b      	ldr	r3, [r3, #16]
 8014736:	697a      	ldr	r2, [r7, #20]
 8014738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801473c:	f043 0318 	orr.w	r3, r3, #24
 8014740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014748:	691b      	ldr	r3, [r3, #16]
 801474a:	697a      	ldr	r2, [r7, #20]
 801474c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014750:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014754:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014756:	7afb      	ldrb	r3, [r7, #11]
 8014758:	2b01      	cmp	r3, #1
 801475a:	d10f      	bne.n	801477c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014762:	461a      	mov	r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	697a      	ldr	r2, [r7, #20]
 8014772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014776:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801477a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801477c:	2300      	movs	r3, #0
}
 801477e:	4618      	mov	r0, r3
 8014780:	371c      	adds	r7, #28
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr
 801478a:	bf00      	nop
 801478c:	4f54300a 	.word	0x4f54300a

08014790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014790:	b480      	push	{r7}
 8014792:	b085      	sub	sp, #20
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014798:	2300      	movs	r3, #0
 801479a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	3301      	adds	r3, #1
 80147a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	4a13      	ldr	r2, [pc, #76]	; (80147f4 <USB_CoreReset+0x64>)
 80147a6:	4293      	cmp	r3, r2
 80147a8:	d901      	bls.n	80147ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80147aa:	2303      	movs	r3, #3
 80147ac:	e01b      	b.n	80147e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	691b      	ldr	r3, [r3, #16]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	daf2      	bge.n	801479c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80147b6:	2300      	movs	r3, #0
 80147b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	691b      	ldr	r3, [r3, #16]
 80147be:	f043 0201 	orr.w	r2, r3, #1
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	3301      	adds	r3, #1
 80147ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	4a09      	ldr	r2, [pc, #36]	; (80147f4 <USB_CoreReset+0x64>)
 80147d0:	4293      	cmp	r3, r2
 80147d2:	d901      	bls.n	80147d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80147d4:	2303      	movs	r3, #3
 80147d6:	e006      	b.n	80147e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	691b      	ldr	r3, [r3, #16]
 80147dc:	f003 0301 	and.w	r3, r3, #1
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d0f0      	beq.n	80147c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3714      	adds	r7, #20
 80147ea:	46bd      	mov	sp, r7
 80147ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f0:	4770      	bx	lr
 80147f2:	bf00      	nop
 80147f4:	00030d40 	.word	0x00030d40

080147f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80147fc:	4904      	ldr	r1, [pc, #16]	; (8014810 <MX_FATFS_Init+0x18>)
 80147fe:	4805      	ldr	r0, [pc, #20]	; (8014814 <MX_FATFS_Init+0x1c>)
 8014800:	f002 fa80 	bl	8016d04 <FATFS_LinkDriver>
 8014804:	4603      	mov	r3, r0
 8014806:	461a      	mov	r2, r3
 8014808:	4b03      	ldr	r3, [pc, #12]	; (8014818 <MX_FATFS_Init+0x20>)
 801480a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801480c:	bf00      	nop
 801480e:	bd80      	pop	{r7, pc}
 8014810:	240016f4 	.word	0x240016f4
 8014814:	08018d1c 	.word	0x08018d1c
 8014818:	240016f0 	.word	0x240016f0

0801481c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014822:	2300      	movs	r3, #0
 8014824:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014826:	f000 f885 	bl	8014934 <BSP_SD_IsDetected>
 801482a:	4603      	mov	r3, r0
 801482c:	2b01      	cmp	r3, #1
 801482e:	d001      	beq.n	8014834 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014830:	2302      	movs	r3, #2
 8014832:	e012      	b.n	801485a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014834:	480b      	ldr	r0, [pc, #44]	; (8014864 <BSP_SD_Init+0x48>)
 8014836:	f7f8 ff41 	bl	800d6bc <HAL_SD_Init>
 801483a:	4603      	mov	r3, r0
 801483c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801483e:	79fb      	ldrb	r3, [r7, #7]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d109      	bne.n	8014858 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014848:	4806      	ldr	r0, [pc, #24]	; (8014864 <BSP_SD_Init+0x48>)
 801484a:	f7f9 fdf7 	bl	800e43c <HAL_SD_ConfigWideBusOperation>
 801484e:	4603      	mov	r3, r0
 8014850:	2b00      	cmp	r3, #0
 8014852:	d001      	beq.n	8014858 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014854:	2301      	movs	r3, #1
 8014856:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014858:	79fb      	ldrb	r3, [r7, #7]
}
 801485a:	4618      	mov	r0, r3
 801485c:	3708      	adds	r7, #8
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	24000ed4 	.word	0x24000ed4

08014868 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b086      	sub	sp, #24
 801486c:	af00      	add	r7, sp, #0
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014874:	2300      	movs	r3, #0
 8014876:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	68ba      	ldr	r2, [r7, #8]
 801487c:	68f9      	ldr	r1, [r7, #12]
 801487e:	4806      	ldr	r0, [pc, #24]	; (8014898 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014880:	f7f9 f83c 	bl	800d8fc <HAL_SD_ReadBlocks_DMA>
 8014884:	4603      	mov	r3, r0
 8014886:	2b00      	cmp	r3, #0
 8014888:	d001      	beq.n	801488e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801488a:	2301      	movs	r3, #1
 801488c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014890:	4618      	mov	r0, r3
 8014892:	3718      	adds	r7, #24
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	24000ed4 	.word	0x24000ed4

0801489c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b086      	sub	sp, #24
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80148a8:	2300      	movs	r3, #0
 80148aa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	68ba      	ldr	r2, [r7, #8]
 80148b0:	68f9      	ldr	r1, [r7, #12]
 80148b2:	4806      	ldr	r0, [pc, #24]	; (80148cc <BSP_SD_WriteBlocks_DMA+0x30>)
 80148b4:	f7f9 f8ca 	bl	800da4c <HAL_SD_WriteBlocks_DMA>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d001      	beq.n	80148c2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80148be:	2301      	movs	r3, #1
 80148c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80148c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3718      	adds	r7, #24
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	24000ed4 	.word	0x24000ed4

080148d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80148d4:	4805      	ldr	r0, [pc, #20]	; (80148ec <BSP_SD_GetCardState+0x1c>)
 80148d6:	f7f9 fec3 	bl	800e660 <HAL_SD_GetCardState>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b04      	cmp	r3, #4
 80148de:	bf14      	ite	ne
 80148e0:	2301      	movne	r3, #1
 80148e2:	2300      	moveq	r3, #0
 80148e4:	b2db      	uxtb	r3, r3
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	24000ed4 	.word	0x24000ed4

080148f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80148f8:	6879      	ldr	r1, [r7, #4]
 80148fa:	4803      	ldr	r0, [pc, #12]	; (8014908 <BSP_SD_GetCardInfo+0x18>)
 80148fc:	f7f9 fd72 	bl	800e3e4 <HAL_SD_GetCardInfo>
}
 8014900:	bf00      	nop
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	24000ed4 	.word	0x24000ed4

0801490c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014914:	f000 f9a0 	bl	8014c58 <BSP_SD_WriteCpltCallback>
}
 8014918:	bf00      	nop
 801491a:	3708      	adds	r7, #8
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}

08014920 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014928:	f000 f9a2 	bl	8014c70 <BSP_SD_ReadCpltCallback>
}
 801492c:	bf00      	nop
 801492e:	3708      	adds	r7, #8
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801493a:	2301      	movs	r3, #1
 801493c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801493e:	f000 f80b 	bl	8014958 <BSP_PlatformIsDetected>
 8014942:	4603      	mov	r3, r0
 8014944:	2b00      	cmp	r3, #0
 8014946:	d101      	bne.n	801494c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014948:	2300      	movs	r3, #0
 801494a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801494c:	79fb      	ldrb	r3, [r7, #7]
 801494e:	b2db      	uxtb	r3, r3
}
 8014950:	4618      	mov	r0, r3
 8014952:	3708      	adds	r7, #8
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801495e:	2301      	movs	r3, #1
 8014960:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014962:	2104      	movs	r1, #4
 8014964:	4806      	ldr	r0, [pc, #24]	; (8014980 <BSP_PlatformIsDetected+0x28>)
 8014966:	f7f3 fccf 	bl	8008308 <HAL_GPIO_ReadPin>
 801496a:	4603      	mov	r3, r0
 801496c:	2b00      	cmp	r3, #0
 801496e:	d001      	beq.n	8014974 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014970:	2300      	movs	r3, #0
 8014972:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014974:	79fb      	ldrb	r3, [r7, #7]
}
 8014976:	4618      	mov	r0, r3
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	58020400 	.word	0x58020400

08014984 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801498c:	f7ef fa16 	bl	8003dbc <HAL_GetTick>
 8014990:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014992:	e006      	b.n	80149a2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014994:	f7ff ff9c 	bl	80148d0 <BSP_SD_GetCardState>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d101      	bne.n	80149a2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801499e:	2300      	movs	r3, #0
 80149a0:	e009      	b.n	80149b6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80149a2:	f7ef fa0b 	bl	8003dbc <HAL_GetTick>
 80149a6:	4602      	mov	r2, r0
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	1ad3      	subs	r3, r2, r3
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d8f0      	bhi.n	8014994 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80149b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3710      	adds	r7, #16
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
	...

080149c0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	4603      	mov	r3, r0
 80149c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80149ca:	4b0b      	ldr	r3, [pc, #44]	; (80149f8 <SD_CheckStatus+0x38>)
 80149cc:	2201      	movs	r2, #1
 80149ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80149d0:	f7ff ff7e 	bl	80148d0 <BSP_SD_GetCardState>
 80149d4:	4603      	mov	r3, r0
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d107      	bne.n	80149ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80149da:	4b07      	ldr	r3, [pc, #28]	; (80149f8 <SD_CheckStatus+0x38>)
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	b2db      	uxtb	r3, r3
 80149e0:	f023 0301 	bic.w	r3, r3, #1
 80149e4:	b2da      	uxtb	r2, r3
 80149e6:	4b04      	ldr	r3, [pc, #16]	; (80149f8 <SD_CheckStatus+0x38>)
 80149e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80149ea:	4b03      	ldr	r3, [pc, #12]	; (80149f8 <SD_CheckStatus+0x38>)
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	b2db      	uxtb	r3, r3
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3708      	adds	r7, #8
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	2400000d 	.word	0x2400000d

080149fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	4603      	mov	r3, r0
 8014a04:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014a06:	f7ff ff09 	bl	801481c <BSP_SD_Init>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d107      	bne.n	8014a20 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014a10:	79fb      	ldrb	r3, [r7, #7]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7ff ffd4 	bl	80149c0 <SD_CheckStatus>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	4b04      	ldr	r3, [pc, #16]	; (8014a30 <SD_initialize+0x34>)
 8014a1e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014a20:	4b03      	ldr	r3, [pc, #12]	; (8014a30 <SD_initialize+0x34>)
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	b2db      	uxtb	r3, r3
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3708      	adds	r7, #8
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	2400000d 	.word	0x2400000d

08014a34 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014a3e:	79fb      	ldrb	r3, [r7, #7]
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7ff ffbd 	bl	80149c0 <SD_CheckStatus>
 8014a46:	4603      	mov	r3, r0
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3708      	adds	r7, #8
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}

08014a50 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b086      	sub	sp, #24
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	60b9      	str	r1, [r7, #8]
 8014a58:	607a      	str	r2, [r7, #4]
 8014a5a:	603b      	str	r3, [r7, #0]
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014a60:	2301      	movs	r3, #1
 8014a62:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014a64:	f247 5030 	movw	r0, #30000	; 0x7530
 8014a68:	f7ff ff8c 	bl	8014984 <SD_CheckStatusWithTimeout>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	da01      	bge.n	8014a76 <SD_read+0x26>
  {
    return res;
 8014a72:	7dfb      	ldrb	r3, [r7, #23]
 8014a74:	e03b      	b.n	8014aee <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014a76:	683a      	ldr	r2, [r7, #0]
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	68b8      	ldr	r0, [r7, #8]
 8014a7c:	f7ff fef4 	bl	8014868 <BSP_SD_ReadBlocks_DMA>
 8014a80:	4603      	mov	r3, r0
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d132      	bne.n	8014aec <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014a86:	4b1c      	ldr	r3, [pc, #112]	; (8014af8 <SD_read+0xa8>)
 8014a88:	2200      	movs	r2, #0
 8014a8a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014a8c:	f7ef f996 	bl	8003dbc <HAL_GetTick>
 8014a90:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014a92:	bf00      	nop
 8014a94:	4b18      	ldr	r3, [pc, #96]	; (8014af8 <SD_read+0xa8>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d108      	bne.n	8014aae <SD_read+0x5e>
 8014a9c:	f7ef f98e 	bl	8003dbc <HAL_GetTick>
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	1ad3      	subs	r3, r2, r3
 8014aa6:	f247 522f 	movw	r2, #29999	; 0x752f
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d9f2      	bls.n	8014a94 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014aae:	4b12      	ldr	r3, [pc, #72]	; (8014af8 <SD_read+0xa8>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d102      	bne.n	8014abc <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	75fb      	strb	r3, [r7, #23]
 8014aba:	e017      	b.n	8014aec <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014abc:	4b0e      	ldr	r3, [pc, #56]	; (8014af8 <SD_read+0xa8>)
 8014abe:	2200      	movs	r2, #0
 8014ac0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014ac2:	f7ef f97b 	bl	8003dbc <HAL_GetTick>
 8014ac6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014ac8:	e007      	b.n	8014ada <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014aca:	f7ff ff01 	bl	80148d0 <BSP_SD_GetCardState>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d102      	bne.n	8014ada <SD_read+0x8a>
          {
            res = RES_OK;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014ad8:	e008      	b.n	8014aec <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014ada:	f7ef f96f 	bl	8003dbc <HAL_GetTick>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	1ad3      	subs	r3, r2, r3
 8014ae4:	f247 522f 	movw	r2, #29999	; 0x752f
 8014ae8:	4293      	cmp	r3, r2
 8014aea:	d9ee      	bls.n	8014aca <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3718      	adds	r7, #24
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	240016fc 	.word	0x240016fc

08014afc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b086      	sub	sp, #24
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	60b9      	str	r1, [r7, #8]
 8014b04:	607a      	str	r2, [r7, #4]
 8014b06:	603b      	str	r3, [r7, #0]
 8014b08:	4603      	mov	r3, r0
 8014b0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014b10:	4b24      	ldr	r3, [pc, #144]	; (8014ba4 <SD_write+0xa8>)
 8014b12:	2200      	movs	r2, #0
 8014b14:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014b16:	f247 5030 	movw	r0, #30000	; 0x7530
 8014b1a:	f7ff ff33 	bl	8014984 <SD_CheckStatusWithTimeout>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	da01      	bge.n	8014b28 <SD_write+0x2c>
  {
    return res;
 8014b24:	7dfb      	ldrb	r3, [r7, #23]
 8014b26:	e038      	b.n	8014b9a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014b28:	683a      	ldr	r2, [r7, #0]
 8014b2a:	6879      	ldr	r1, [r7, #4]
 8014b2c:	68b8      	ldr	r0, [r7, #8]
 8014b2e:	f7ff feb5 	bl	801489c <BSP_SD_WriteBlocks_DMA>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d12f      	bne.n	8014b98 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014b38:	f7ef f940 	bl	8003dbc <HAL_GetTick>
 8014b3c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014b3e:	bf00      	nop
 8014b40:	4b18      	ldr	r3, [pc, #96]	; (8014ba4 <SD_write+0xa8>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d108      	bne.n	8014b5a <SD_write+0x5e>
 8014b48:	f7ef f938 	bl	8003dbc <HAL_GetTick>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	1ad3      	subs	r3, r2, r3
 8014b52:	f247 522f 	movw	r2, #29999	; 0x752f
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d9f2      	bls.n	8014b40 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014b5a:	4b12      	ldr	r3, [pc, #72]	; (8014ba4 <SD_write+0xa8>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d102      	bne.n	8014b68 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014b62:	2301      	movs	r3, #1
 8014b64:	75fb      	strb	r3, [r7, #23]
 8014b66:	e017      	b.n	8014b98 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014b68:	4b0e      	ldr	r3, [pc, #56]	; (8014ba4 <SD_write+0xa8>)
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014b6e:	f7ef f925 	bl	8003dbc <HAL_GetTick>
 8014b72:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b74:	e007      	b.n	8014b86 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014b76:	f7ff feab 	bl	80148d0 <BSP_SD_GetCardState>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d102      	bne.n	8014b86 <SD_write+0x8a>
          {
            res = RES_OK;
 8014b80:	2300      	movs	r3, #0
 8014b82:	75fb      	strb	r3, [r7, #23]
            break;
 8014b84:	e008      	b.n	8014b98 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b86:	f7ef f919 	bl	8003dbc <HAL_GetTick>
 8014b8a:	4602      	mov	r2, r0
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	1ad3      	subs	r3, r2, r3
 8014b90:	f247 522f 	movw	r2, #29999	; 0x752f
 8014b94:	4293      	cmp	r3, r2
 8014b96:	d9ee      	bls.n	8014b76 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3718      	adds	r7, #24
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	240016f8 	.word	0x240016f8

08014ba8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b08c      	sub	sp, #48	; 0x30
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	4603      	mov	r3, r0
 8014bb0:	603a      	str	r2, [r7, #0]
 8014bb2:	71fb      	strb	r3, [r7, #7]
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014bb8:	2301      	movs	r3, #1
 8014bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014bbe:	4b25      	ldr	r3, [pc, #148]	; (8014c54 <SD_ioctl+0xac>)
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	f003 0301 	and.w	r3, r3, #1
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d001      	beq.n	8014bd0 <SD_ioctl+0x28>
 8014bcc:	2303      	movs	r3, #3
 8014bce:	e03c      	b.n	8014c4a <SD_ioctl+0xa2>

  switch (cmd)
 8014bd0:	79bb      	ldrb	r3, [r7, #6]
 8014bd2:	2b03      	cmp	r3, #3
 8014bd4:	d834      	bhi.n	8014c40 <SD_ioctl+0x98>
 8014bd6:	a201      	add	r2, pc, #4	; (adr r2, 8014bdc <SD_ioctl+0x34>)
 8014bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bdc:	08014bed 	.word	0x08014bed
 8014be0:	08014bf5 	.word	0x08014bf5
 8014be4:	08014c0d 	.word	0x08014c0d
 8014be8:	08014c27 	.word	0x08014c27
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014bec:	2300      	movs	r3, #0
 8014bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014bf2:	e028      	b.n	8014c46 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014bf4:	f107 0308 	add.w	r3, r7, #8
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7ff fe79 	bl	80148f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014bfe:	6a3a      	ldr	r2, [r7, #32]
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014c04:	2300      	movs	r3, #0
 8014c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014c0a:	e01c      	b.n	8014c46 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014c0c:	f107 0308 	add.w	r3, r7, #8
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7ff fe6d 	bl	80148f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c18:	b29a      	uxth	r2, r3
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014c24:	e00f      	b.n	8014c46 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014c26:	f107 0308 	add.w	r3, r7, #8
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7ff fe60 	bl	80148f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c32:	0a5a      	lsrs	r2, r3, #9
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014c3e:	e002      	b.n	8014c46 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014c40:	2304      	movs	r3, #4
 8014c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3730      	adds	r7, #48	; 0x30
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	2400000d 	.word	0x2400000d

08014c58 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014c58:	b480      	push	{r7}
 8014c5a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014c5c:	4b03      	ldr	r3, [pc, #12]	; (8014c6c <BSP_SD_WriteCpltCallback+0x14>)
 8014c5e:	2201      	movs	r2, #1
 8014c60:	601a      	str	r2, [r3, #0]
}
 8014c62:	bf00      	nop
 8014c64:	46bd      	mov	sp, r7
 8014c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6a:	4770      	bx	lr
 8014c6c:	240016f8 	.word	0x240016f8

08014c70 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014c70:	b480      	push	{r7}
 8014c72:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014c74:	4b03      	ldr	r3, [pc, #12]	; (8014c84 <BSP_SD_ReadCpltCallback+0x14>)
 8014c76:	2201      	movs	r2, #1
 8014c78:	601a      	str	r2, [r3, #0]
}
 8014c7a:	bf00      	nop
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr
 8014c84:	240016fc 	.word	0x240016fc

08014c88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b084      	sub	sp, #16
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	460b      	mov	r3, r1
 8014c92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014c94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014c98:	f002 fd2a 	bl	80176f0 <USBD_static_malloc>
 8014c9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d109      	bne.n	8014cb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	32b0      	adds	r2, #176	; 0xb0
 8014cae:	2100      	movs	r1, #0
 8014cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	e0d4      	b.n	8014e62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014cb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014cbc:	2100      	movs	r1, #0
 8014cbe:	68f8      	ldr	r0, [r7, #12]
 8014cc0:	f002 fda8 	bl	8017814 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	32b0      	adds	r2, #176	; 0xb0
 8014cce:	68f9      	ldr	r1, [r7, #12]
 8014cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	32b0      	adds	r2, #176	; 0xb0
 8014cde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	7c1b      	ldrb	r3, [r3, #16]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d138      	bne.n	8014d62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014cf0:	4b5e      	ldr	r3, [pc, #376]	; (8014e6c <USBD_CDC_Init+0x1e4>)
 8014cf2:	7819      	ldrb	r1, [r3, #0]
 8014cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014cf8:	2202      	movs	r2, #2
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	f002 fbd5 	bl	80174aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014d00:	4b5a      	ldr	r3, [pc, #360]	; (8014e6c <USBD_CDC_Init+0x1e4>)
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	f003 020f 	and.w	r2, r3, #15
 8014d08:	6879      	ldr	r1, [r7, #4]
 8014d0a:	4613      	mov	r3, r2
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	4413      	add	r3, r2
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	440b      	add	r3, r1
 8014d14:	3324      	adds	r3, #36	; 0x24
 8014d16:	2201      	movs	r2, #1
 8014d18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014d1a:	4b55      	ldr	r3, [pc, #340]	; (8014e70 <USBD_CDC_Init+0x1e8>)
 8014d1c:	7819      	ldrb	r1, [r3, #0]
 8014d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d22:	2202      	movs	r2, #2
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f002 fbc0 	bl	80174aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014d2a:	4b51      	ldr	r3, [pc, #324]	; (8014e70 <USBD_CDC_Init+0x1e8>)
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	f003 020f 	and.w	r2, r3, #15
 8014d32:	6879      	ldr	r1, [r7, #4]
 8014d34:	4613      	mov	r3, r2
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	4413      	add	r3, r2
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	440b      	add	r3, r1
 8014d3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014d42:	2201      	movs	r2, #1
 8014d44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014d46:	4b4b      	ldr	r3, [pc, #300]	; (8014e74 <USBD_CDC_Init+0x1ec>)
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	f003 020f 	and.w	r2, r3, #15
 8014d4e:	6879      	ldr	r1, [r7, #4]
 8014d50:	4613      	mov	r3, r2
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	4413      	add	r3, r2
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	440b      	add	r3, r1
 8014d5a:	3326      	adds	r3, #38	; 0x26
 8014d5c:	2210      	movs	r2, #16
 8014d5e:	801a      	strh	r2, [r3, #0]
 8014d60:	e035      	b.n	8014dce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014d62:	4b42      	ldr	r3, [pc, #264]	; (8014e6c <USBD_CDC_Init+0x1e4>)
 8014d64:	7819      	ldrb	r1, [r3, #0]
 8014d66:	2340      	movs	r3, #64	; 0x40
 8014d68:	2202      	movs	r2, #2
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f002 fb9d 	bl	80174aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014d70:	4b3e      	ldr	r3, [pc, #248]	; (8014e6c <USBD_CDC_Init+0x1e4>)
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	f003 020f 	and.w	r2, r3, #15
 8014d78:	6879      	ldr	r1, [r7, #4]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	4413      	add	r3, r2
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	440b      	add	r3, r1
 8014d84:	3324      	adds	r3, #36	; 0x24
 8014d86:	2201      	movs	r2, #1
 8014d88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014d8a:	4b39      	ldr	r3, [pc, #228]	; (8014e70 <USBD_CDC_Init+0x1e8>)
 8014d8c:	7819      	ldrb	r1, [r3, #0]
 8014d8e:	2340      	movs	r3, #64	; 0x40
 8014d90:	2202      	movs	r2, #2
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f002 fb89 	bl	80174aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014d98:	4b35      	ldr	r3, [pc, #212]	; (8014e70 <USBD_CDC_Init+0x1e8>)
 8014d9a:	781b      	ldrb	r3, [r3, #0]
 8014d9c:	f003 020f 	and.w	r2, r3, #15
 8014da0:	6879      	ldr	r1, [r7, #4]
 8014da2:	4613      	mov	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	4413      	add	r3, r2
 8014da8:	009b      	lsls	r3, r3, #2
 8014daa:	440b      	add	r3, r1
 8014dac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014db0:	2201      	movs	r2, #1
 8014db2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014db4:	4b2f      	ldr	r3, [pc, #188]	; (8014e74 <USBD_CDC_Init+0x1ec>)
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	f003 020f 	and.w	r2, r3, #15
 8014dbc:	6879      	ldr	r1, [r7, #4]
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	4413      	add	r3, r2
 8014dc4:	009b      	lsls	r3, r3, #2
 8014dc6:	440b      	add	r3, r1
 8014dc8:	3326      	adds	r3, #38	; 0x26
 8014dca:	2210      	movs	r2, #16
 8014dcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014dce:	4b29      	ldr	r3, [pc, #164]	; (8014e74 <USBD_CDC_Init+0x1ec>)
 8014dd0:	7819      	ldrb	r1, [r3, #0]
 8014dd2:	2308      	movs	r3, #8
 8014dd4:	2203      	movs	r2, #3
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f002 fb67 	bl	80174aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014ddc:	4b25      	ldr	r3, [pc, #148]	; (8014e74 <USBD_CDC_Init+0x1ec>)
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	f003 020f 	and.w	r2, r3, #15
 8014de4:	6879      	ldr	r1, [r7, #4]
 8014de6:	4613      	mov	r3, r2
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	4413      	add	r3, r2
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	440b      	add	r3, r1
 8014df0:	3324      	adds	r3, #36	; 0x24
 8014df2:	2201      	movs	r2, #1
 8014df4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	33b0      	adds	r3, #176	; 0xb0
 8014e08:	009b      	lsls	r3, r3, #2
 8014e0a:	4413      	add	r3, r2
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2200      	movs	r2, #0
 8014e16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d101      	bne.n	8014e30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014e2c:	2302      	movs	r3, #2
 8014e2e:	e018      	b.n	8014e62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	7c1b      	ldrb	r3, [r3, #16]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d10a      	bne.n	8014e4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e38:	4b0d      	ldr	r3, [pc, #52]	; (8014e70 <USBD_CDC_Init+0x1e8>)
 8014e3a:	7819      	ldrb	r1, [r3, #0]
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f002 fc1e 	bl	8017688 <USBD_LL_PrepareReceive>
 8014e4c:	e008      	b.n	8014e60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e4e:	4b08      	ldr	r3, [pc, #32]	; (8014e70 <USBD_CDC_Init+0x1e8>)
 8014e50:	7819      	ldrb	r1, [r3, #0]
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e58:	2340      	movs	r3, #64	; 0x40
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	f002 fc14 	bl	8017688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014e60:	2300      	movs	r3, #0
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3710      	adds	r7, #16
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	24000097 	.word	0x24000097
 8014e70:	24000098 	.word	0x24000098
 8014e74:	24000099 	.word	0x24000099

08014e78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	460b      	mov	r3, r1
 8014e82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014e84:	4b3a      	ldr	r3, [pc, #232]	; (8014f70 <USBD_CDC_DeInit+0xf8>)
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	4619      	mov	r1, r3
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f002 fb33 	bl	80174f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014e90:	4b37      	ldr	r3, [pc, #220]	; (8014f70 <USBD_CDC_DeInit+0xf8>)
 8014e92:	781b      	ldrb	r3, [r3, #0]
 8014e94:	f003 020f 	and.w	r2, r3, #15
 8014e98:	6879      	ldr	r1, [r7, #4]
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	009b      	lsls	r3, r3, #2
 8014e9e:	4413      	add	r3, r2
 8014ea0:	009b      	lsls	r3, r3, #2
 8014ea2:	440b      	add	r3, r1
 8014ea4:	3324      	adds	r3, #36	; 0x24
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014eaa:	4b32      	ldr	r3, [pc, #200]	; (8014f74 <USBD_CDC_DeInit+0xfc>)
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	4619      	mov	r1, r3
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f002 fb20 	bl	80174f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014eb6:	4b2f      	ldr	r3, [pc, #188]	; (8014f74 <USBD_CDC_DeInit+0xfc>)
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	f003 020f 	and.w	r2, r3, #15
 8014ebe:	6879      	ldr	r1, [r7, #4]
 8014ec0:	4613      	mov	r3, r2
 8014ec2:	009b      	lsls	r3, r3, #2
 8014ec4:	4413      	add	r3, r2
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	440b      	add	r3, r1
 8014eca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014ece:	2200      	movs	r2, #0
 8014ed0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014ed2:	4b29      	ldr	r3, [pc, #164]	; (8014f78 <USBD_CDC_DeInit+0x100>)
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f002 fb0c 	bl	80174f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014ede:	4b26      	ldr	r3, [pc, #152]	; (8014f78 <USBD_CDC_DeInit+0x100>)
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	f003 020f 	and.w	r2, r3, #15
 8014ee6:	6879      	ldr	r1, [r7, #4]
 8014ee8:	4613      	mov	r3, r2
 8014eea:	009b      	lsls	r3, r3, #2
 8014eec:	4413      	add	r3, r2
 8014eee:	009b      	lsls	r3, r3, #2
 8014ef0:	440b      	add	r3, r1
 8014ef2:	3324      	adds	r3, #36	; 0x24
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014ef8:	4b1f      	ldr	r3, [pc, #124]	; (8014f78 <USBD_CDC_DeInit+0x100>)
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	f003 020f 	and.w	r2, r3, #15
 8014f00:	6879      	ldr	r1, [r7, #4]
 8014f02:	4613      	mov	r3, r2
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4413      	add	r3, r2
 8014f08:	009b      	lsls	r3, r3, #2
 8014f0a:	440b      	add	r3, r1
 8014f0c:	3326      	adds	r3, #38	; 0x26
 8014f0e:	2200      	movs	r2, #0
 8014f10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	32b0      	adds	r2, #176	; 0xb0
 8014f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d01f      	beq.n	8014f64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	33b0      	adds	r3, #176	; 0xb0
 8014f2e:	009b      	lsls	r3, r3, #2
 8014f30:	4413      	add	r3, r2
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	32b0      	adds	r2, #176	; 0xb0
 8014f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f002 fbe0 	bl	801770c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	32b0      	adds	r2, #176	; 0xb0
 8014f56:	2100      	movs	r1, #0
 8014f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014f64:	2300      	movs	r3, #0
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3708      	adds	r7, #8
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	24000097 	.word	0x24000097
 8014f74:	24000098 	.word	0x24000098
 8014f78:	24000099 	.word	0x24000099

08014f7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	32b0      	adds	r2, #176	; 0xb0
 8014f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014f96:	2300      	movs	r3, #0
 8014f98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d101      	bne.n	8014fac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	e0bf      	b.n	801512c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d050      	beq.n	801505a <USBD_CDC_Setup+0xde>
 8014fb8:	2b20      	cmp	r3, #32
 8014fba:	f040 80af 	bne.w	801511c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	88db      	ldrh	r3, [r3, #6]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d03a      	beq.n	801503c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	b25b      	sxtb	r3, r3
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	da1b      	bge.n	8015008 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fd6:	687a      	ldr	r2, [r7, #4]
 8014fd8:	33b0      	adds	r3, #176	; 0xb0
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	4413      	add	r3, r2
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	689b      	ldr	r3, [r3, #8]
 8014fe2:	683a      	ldr	r2, [r7, #0]
 8014fe4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014fe6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014fe8:	683a      	ldr	r2, [r7, #0]
 8014fea:	88d2      	ldrh	r2, [r2, #6]
 8014fec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	88db      	ldrh	r3, [r3, #6]
 8014ff2:	2b07      	cmp	r3, #7
 8014ff4:	bf28      	it	cs
 8014ff6:	2307      	movcs	r3, #7
 8014ff8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	89fa      	ldrh	r2, [r7, #14]
 8014ffe:	4619      	mov	r1, r3
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f001 fdb3 	bl	8016b6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015006:	e090      	b.n	801512a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	785a      	ldrb	r2, [r3, #1]
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	88db      	ldrh	r3, [r3, #6]
 8015016:	2b3f      	cmp	r3, #63	; 0x3f
 8015018:	d803      	bhi.n	8015022 <USBD_CDC_Setup+0xa6>
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	88db      	ldrh	r3, [r3, #6]
 801501e:	b2da      	uxtb	r2, r3
 8015020:	e000      	b.n	8015024 <USBD_CDC_Setup+0xa8>
 8015022:	2240      	movs	r2, #64	; 0x40
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801502a:	6939      	ldr	r1, [r7, #16]
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015032:	461a      	mov	r2, r3
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f001 fdc5 	bl	8016bc4 <USBD_CtlPrepareRx>
      break;
 801503a:	e076      	b.n	801512a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015042:	687a      	ldr	r2, [r7, #4]
 8015044:	33b0      	adds	r3, #176	; 0xb0
 8015046:	009b      	lsls	r3, r3, #2
 8015048:	4413      	add	r3, r2
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	689b      	ldr	r3, [r3, #8]
 801504e:	683a      	ldr	r2, [r7, #0]
 8015050:	7850      	ldrb	r0, [r2, #1]
 8015052:	2200      	movs	r2, #0
 8015054:	6839      	ldr	r1, [r7, #0]
 8015056:	4798      	blx	r3
      break;
 8015058:	e067      	b.n	801512a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	785b      	ldrb	r3, [r3, #1]
 801505e:	2b0b      	cmp	r3, #11
 8015060:	d851      	bhi.n	8015106 <USBD_CDC_Setup+0x18a>
 8015062:	a201      	add	r2, pc, #4	; (adr r2, 8015068 <USBD_CDC_Setup+0xec>)
 8015064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015068:	08015099 	.word	0x08015099
 801506c:	08015115 	.word	0x08015115
 8015070:	08015107 	.word	0x08015107
 8015074:	08015107 	.word	0x08015107
 8015078:	08015107 	.word	0x08015107
 801507c:	08015107 	.word	0x08015107
 8015080:	08015107 	.word	0x08015107
 8015084:	08015107 	.word	0x08015107
 8015088:	08015107 	.word	0x08015107
 801508c:	08015107 	.word	0x08015107
 8015090:	080150c3 	.word	0x080150c3
 8015094:	080150ed 	.word	0x080150ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801509e:	b2db      	uxtb	r3, r3
 80150a0:	2b03      	cmp	r3, #3
 80150a2:	d107      	bne.n	80150b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80150a4:	f107 030a 	add.w	r3, r7, #10
 80150a8:	2202      	movs	r2, #2
 80150aa:	4619      	mov	r1, r3
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f001 fd5d 	bl	8016b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80150b2:	e032      	b.n	801511a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80150b4:	6839      	ldr	r1, [r7, #0]
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f001 fce7 	bl	8016a8a <USBD_CtlError>
            ret = USBD_FAIL;
 80150bc:	2303      	movs	r3, #3
 80150be:	75fb      	strb	r3, [r7, #23]
          break;
 80150c0:	e02b      	b.n	801511a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150c8:	b2db      	uxtb	r3, r3
 80150ca:	2b03      	cmp	r3, #3
 80150cc:	d107      	bne.n	80150de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80150ce:	f107 030d 	add.w	r3, r7, #13
 80150d2:	2201      	movs	r2, #1
 80150d4:	4619      	mov	r1, r3
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f001 fd48 	bl	8016b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80150dc:	e01d      	b.n	801511a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80150de:	6839      	ldr	r1, [r7, #0]
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f001 fcd2 	bl	8016a8a <USBD_CtlError>
            ret = USBD_FAIL;
 80150e6:	2303      	movs	r3, #3
 80150e8:	75fb      	strb	r3, [r7, #23]
          break;
 80150ea:	e016      	b.n	801511a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	2b03      	cmp	r3, #3
 80150f6:	d00f      	beq.n	8015118 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80150f8:	6839      	ldr	r1, [r7, #0]
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f001 fcc5 	bl	8016a8a <USBD_CtlError>
            ret = USBD_FAIL;
 8015100:	2303      	movs	r3, #3
 8015102:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015104:	e008      	b.n	8015118 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015106:	6839      	ldr	r1, [r7, #0]
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f001 fcbe 	bl	8016a8a <USBD_CtlError>
          ret = USBD_FAIL;
 801510e:	2303      	movs	r3, #3
 8015110:	75fb      	strb	r3, [r7, #23]
          break;
 8015112:	e002      	b.n	801511a <USBD_CDC_Setup+0x19e>
          break;
 8015114:	bf00      	nop
 8015116:	e008      	b.n	801512a <USBD_CDC_Setup+0x1ae>
          break;
 8015118:	bf00      	nop
      }
      break;
 801511a:	e006      	b.n	801512a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801511c:	6839      	ldr	r1, [r7, #0]
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f001 fcb3 	bl	8016a8a <USBD_CtlError>
      ret = USBD_FAIL;
 8015124:	2303      	movs	r3, #3
 8015126:	75fb      	strb	r3, [r7, #23]
      break;
 8015128:	bf00      	nop
  }

  return (uint8_t)ret;
 801512a:	7dfb      	ldrb	r3, [r7, #23]
}
 801512c:	4618      	mov	r0, r3
 801512e:	3718      	adds	r7, #24
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}

08015134 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	460b      	mov	r3, r1
 801513e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	32b0      	adds	r2, #176	; 0xb0
 8015152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d101      	bne.n	801515e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801515a:	2303      	movs	r3, #3
 801515c:	e065      	b.n	801522a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	32b0      	adds	r2, #176	; 0xb0
 8015168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801516c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801516e:	78fb      	ldrb	r3, [r7, #3]
 8015170:	f003 020f 	and.w	r2, r3, #15
 8015174:	6879      	ldr	r1, [r7, #4]
 8015176:	4613      	mov	r3, r2
 8015178:	009b      	lsls	r3, r3, #2
 801517a:	4413      	add	r3, r2
 801517c:	009b      	lsls	r3, r3, #2
 801517e:	440b      	add	r3, r1
 8015180:	3318      	adds	r3, #24
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d02f      	beq.n	80151e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015188:	78fb      	ldrb	r3, [r7, #3]
 801518a:	f003 020f 	and.w	r2, r3, #15
 801518e:	6879      	ldr	r1, [r7, #4]
 8015190:	4613      	mov	r3, r2
 8015192:	009b      	lsls	r3, r3, #2
 8015194:	4413      	add	r3, r2
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	440b      	add	r3, r1
 801519a:	3318      	adds	r3, #24
 801519c:	681a      	ldr	r2, [r3, #0]
 801519e:	78fb      	ldrb	r3, [r7, #3]
 80151a0:	f003 010f 	and.w	r1, r3, #15
 80151a4:	68f8      	ldr	r0, [r7, #12]
 80151a6:	460b      	mov	r3, r1
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	440b      	add	r3, r1
 80151ac:	009b      	lsls	r3, r3, #2
 80151ae:	4403      	add	r3, r0
 80151b0:	3344      	adds	r3, #68	; 0x44
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80151b8:	fb01 f303 	mul.w	r3, r1, r3
 80151bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d112      	bne.n	80151e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80151c2:	78fb      	ldrb	r3, [r7, #3]
 80151c4:	f003 020f 	and.w	r2, r3, #15
 80151c8:	6879      	ldr	r1, [r7, #4]
 80151ca:	4613      	mov	r3, r2
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	4413      	add	r3, r2
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	440b      	add	r3, r1
 80151d4:	3318      	adds	r3, #24
 80151d6:	2200      	movs	r2, #0
 80151d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80151da:	78f9      	ldrb	r1, [r7, #3]
 80151dc:	2300      	movs	r3, #0
 80151de:	2200      	movs	r2, #0
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f002 fa30 	bl	8017646 <USBD_LL_Transmit>
 80151e6:	e01f      	b.n	8015228 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	2200      	movs	r2, #0
 80151ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	33b0      	adds	r3, #176	; 0xb0
 80151fa:	009b      	lsls	r3, r3, #2
 80151fc:	4413      	add	r3, r2
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	691b      	ldr	r3, [r3, #16]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d010      	beq.n	8015228 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	33b0      	adds	r3, #176	; 0xb0
 8015210:	009b      	lsls	r3, r3, #2
 8015212:	4413      	add	r3, r2
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	691b      	ldr	r3, [r3, #16]
 8015218:	68ba      	ldr	r2, [r7, #8]
 801521a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015224:	78fa      	ldrb	r2, [r7, #3]
 8015226:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015228:	2300      	movs	r3, #0
}
 801522a:	4618      	mov	r0, r3
 801522c:	3710      	adds	r7, #16
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}

08015232 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015232:	b580      	push	{r7, lr}
 8015234:	b084      	sub	sp, #16
 8015236:	af00      	add	r7, sp, #0
 8015238:	6078      	str	r0, [r7, #4]
 801523a:	460b      	mov	r3, r1
 801523c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	32b0      	adds	r2, #176	; 0xb0
 8015248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801524c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	32b0      	adds	r2, #176	; 0xb0
 8015258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d101      	bne.n	8015264 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015260:	2303      	movs	r3, #3
 8015262:	e01a      	b.n	801529a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015264:	78fb      	ldrb	r3, [r7, #3]
 8015266:	4619      	mov	r1, r3
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f002 fa2e 	bl	80176ca <USBD_LL_GetRxDataSize>
 801526e:	4602      	mov	r2, r0
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801527c:	687a      	ldr	r2, [r7, #4]
 801527e:	33b0      	adds	r3, #176	; 0xb0
 8015280:	009b      	lsls	r3, r3, #2
 8015282:	4413      	add	r3, r2
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	68db      	ldr	r3, [r3, #12]
 8015288:	68fa      	ldr	r2, [r7, #12]
 801528a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801528e:	68fa      	ldr	r2, [r7, #12]
 8015290:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015294:	4611      	mov	r1, r2
 8015296:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015298:	2300      	movs	r3, #0
}
 801529a:	4618      	mov	r0, r3
 801529c:	3710      	adds	r7, #16
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}

080152a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80152a2:	b580      	push	{r7, lr}
 80152a4:	b084      	sub	sp, #16
 80152a6:	af00      	add	r7, sp, #0
 80152a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	32b0      	adds	r2, #176	; 0xb0
 80152b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d101      	bne.n	80152c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80152c0:	2303      	movs	r3, #3
 80152c2:	e025      	b.n	8015310 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	33b0      	adds	r3, #176	; 0xb0
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	4413      	add	r3, r2
 80152d2:	685b      	ldr	r3, [r3, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d01a      	beq.n	801530e <USBD_CDC_EP0_RxReady+0x6c>
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80152de:	2bff      	cmp	r3, #255	; 0xff
 80152e0:	d015      	beq.n	801530e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	33b0      	adds	r3, #176	; 0xb0
 80152ec:	009b      	lsls	r3, r3, #2
 80152ee:	4413      	add	r3, r2
 80152f0:	685b      	ldr	r3, [r3, #4]
 80152f2:	689b      	ldr	r3, [r3, #8]
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80152fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80152fc:	68fa      	ldr	r2, [r7, #12]
 80152fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015302:	b292      	uxth	r2, r2
 8015304:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	22ff      	movs	r2, #255	; 0xff
 801530a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801530e:	2300      	movs	r3, #0
}
 8015310:	4618      	mov	r0, r3
 8015312:	3710      	adds	r7, #16
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015320:	2182      	movs	r1, #130	; 0x82
 8015322:	4818      	ldr	r0, [pc, #96]	; (8015384 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015324:	f000 fd4f 	bl	8015dc6 <USBD_GetEpDesc>
 8015328:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801532a:	2101      	movs	r1, #1
 801532c:	4815      	ldr	r0, [pc, #84]	; (8015384 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801532e:	f000 fd4a 	bl	8015dc6 <USBD_GetEpDesc>
 8015332:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015334:	2181      	movs	r1, #129	; 0x81
 8015336:	4813      	ldr	r0, [pc, #76]	; (8015384 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015338:	f000 fd45 	bl	8015dc6 <USBD_GetEpDesc>
 801533c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d002      	beq.n	801534a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015344:	697b      	ldr	r3, [r7, #20]
 8015346:	2210      	movs	r2, #16
 8015348:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d006      	beq.n	801535e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	2200      	movs	r2, #0
 8015354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015358:	711a      	strb	r2, [r3, #4]
 801535a:	2200      	movs	r2, #0
 801535c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d006      	beq.n	8015372 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	2200      	movs	r2, #0
 8015368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801536c:	711a      	strb	r2, [r3, #4]
 801536e:	2200      	movs	r2, #0
 8015370:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2243      	movs	r2, #67	; 0x43
 8015376:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015378:	4b02      	ldr	r3, [pc, #8]	; (8015384 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801537a:	4618      	mov	r0, r3
 801537c:	3718      	adds	r7, #24
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
 8015382:	bf00      	nop
 8015384:	24000054 	.word	0x24000054

08015388 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b086      	sub	sp, #24
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015390:	2182      	movs	r1, #130	; 0x82
 8015392:	4818      	ldr	r0, [pc, #96]	; (80153f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015394:	f000 fd17 	bl	8015dc6 <USBD_GetEpDesc>
 8015398:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801539a:	2101      	movs	r1, #1
 801539c:	4815      	ldr	r0, [pc, #84]	; (80153f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801539e:	f000 fd12 	bl	8015dc6 <USBD_GetEpDesc>
 80153a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80153a4:	2181      	movs	r1, #129	; 0x81
 80153a6:	4813      	ldr	r0, [pc, #76]	; (80153f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80153a8:	f000 fd0d 	bl	8015dc6 <USBD_GetEpDesc>
 80153ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d002      	beq.n	80153ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	2210      	movs	r2, #16
 80153b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d006      	beq.n	80153ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	2200      	movs	r2, #0
 80153c4:	711a      	strb	r2, [r3, #4]
 80153c6:	2200      	movs	r2, #0
 80153c8:	f042 0202 	orr.w	r2, r2, #2
 80153cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d006      	beq.n	80153e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2200      	movs	r2, #0
 80153d8:	711a      	strb	r2, [r3, #4]
 80153da:	2200      	movs	r2, #0
 80153dc:	f042 0202 	orr.w	r2, r2, #2
 80153e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2243      	movs	r2, #67	; 0x43
 80153e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80153e8:	4b02      	ldr	r3, [pc, #8]	; (80153f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	3718      	adds	r7, #24
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}
 80153f2:	bf00      	nop
 80153f4:	24000054 	.word	0x24000054

080153f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b086      	sub	sp, #24
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015400:	2182      	movs	r1, #130	; 0x82
 8015402:	4818      	ldr	r0, [pc, #96]	; (8015464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015404:	f000 fcdf 	bl	8015dc6 <USBD_GetEpDesc>
 8015408:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801540a:	2101      	movs	r1, #1
 801540c:	4815      	ldr	r0, [pc, #84]	; (8015464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801540e:	f000 fcda 	bl	8015dc6 <USBD_GetEpDesc>
 8015412:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015414:	2181      	movs	r1, #129	; 0x81
 8015416:	4813      	ldr	r0, [pc, #76]	; (8015464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015418:	f000 fcd5 	bl	8015dc6 <USBD_GetEpDesc>
 801541c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d002      	beq.n	801542a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	2210      	movs	r2, #16
 8015428:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801542a:	693b      	ldr	r3, [r7, #16]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d006      	beq.n	801543e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	2200      	movs	r2, #0
 8015434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015438:	711a      	strb	r2, [r3, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d006      	beq.n	8015452 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2200      	movs	r2, #0
 8015448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801544c:	711a      	strb	r2, [r3, #4]
 801544e:	2200      	movs	r2, #0
 8015450:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2243      	movs	r2, #67	; 0x43
 8015456:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015458:	4b02      	ldr	r3, [pc, #8]	; (8015464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801545a:	4618      	mov	r0, r3
 801545c:	3718      	adds	r7, #24
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	24000054 	.word	0x24000054

08015468 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015468:	b480      	push	{r7}
 801546a:	b083      	sub	sp, #12
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	220a      	movs	r2, #10
 8015474:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015476:	4b03      	ldr	r3, [pc, #12]	; (8015484 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015478:	4618      	mov	r0, r3
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr
 8015484:	24000010 	.word	0x24000010

08015488 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015488:	b480      	push	{r7}
 801548a:	b083      	sub	sp, #12
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d101      	bne.n	801549c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015498:	2303      	movs	r3, #3
 801549a:	e009      	b.n	80154b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	33b0      	adds	r3, #176	; 0xb0
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	4413      	add	r3, r2
 80154aa:	683a      	ldr	r2, [r7, #0]
 80154ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80154ae:	2300      	movs	r3, #0
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	370c      	adds	r7, #12
 80154b4:	46bd      	mov	sp, r7
 80154b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ba:	4770      	bx	lr

080154bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80154bc:	b480      	push	{r7}
 80154be:	b087      	sub	sp, #28
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	32b0      	adds	r2, #176	; 0xb0
 80154d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d101      	bne.n	80154e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80154de:	2303      	movs	r3, #3
 80154e0:	e008      	b.n	80154f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	68ba      	ldr	r2, [r7, #8]
 80154e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	687a      	ldr	r2, [r7, #4]
 80154ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80154f2:	2300      	movs	r3, #0
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	371c      	adds	r7, #28
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr

08015500 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015500:	b480      	push	{r7}
 8015502:	b085      	sub	sp, #20
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	32b0      	adds	r2, #176	; 0xb0
 8015514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015518:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d101      	bne.n	8015524 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015520:	2303      	movs	r3, #3
 8015522:	e004      	b.n	801552e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	683a      	ldr	r2, [r7, #0]
 8015528:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801552c:	2300      	movs	r3, #0
}
 801552e:	4618      	mov	r0, r3
 8015530:	3714      	adds	r7, #20
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr
	...

0801553c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b084      	sub	sp, #16
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	32b0      	adds	r2, #176	; 0xb0
 801554e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015552:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015554:	2301      	movs	r3, #1
 8015556:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d101      	bne.n	8015562 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801555e:	2303      	movs	r3, #3
 8015560:	e025      	b.n	80155ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015568:	2b00      	cmp	r3, #0
 801556a:	d11f      	bne.n	80155ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	2201      	movs	r2, #1
 8015570:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015574:	4b10      	ldr	r3, [pc, #64]	; (80155b8 <USBD_CDC_TransmitPacket+0x7c>)
 8015576:	781b      	ldrb	r3, [r3, #0]
 8015578:	f003 020f 	and.w	r2, r3, #15
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	4613      	mov	r3, r2
 8015586:	009b      	lsls	r3, r3, #2
 8015588:	4413      	add	r3, r2
 801558a:	009b      	lsls	r3, r3, #2
 801558c:	4403      	add	r3, r0
 801558e:	3318      	adds	r3, #24
 8015590:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015592:	4b09      	ldr	r3, [pc, #36]	; (80155b8 <USBD_CDC_TransmitPacket+0x7c>)
 8015594:	7819      	ldrb	r1, [r3, #0]
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	f002 f84f 	bl	8017646 <USBD_LL_Transmit>

    ret = USBD_OK;
 80155a8:	2300      	movs	r3, #0
 80155aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80155ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3710      	adds	r7, #16
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	24000097 	.word	0x24000097

080155bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	32b0      	adds	r2, #176	; 0xb0
 80155ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	32b0      	adds	r2, #176	; 0xb0
 80155de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d101      	bne.n	80155ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80155e6:	2303      	movs	r3, #3
 80155e8:	e018      	b.n	801561c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	7c1b      	ldrb	r3, [r3, #16]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d10a      	bne.n	8015608 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155f2:	4b0c      	ldr	r3, [pc, #48]	; (8015624 <USBD_CDC_ReceivePacket+0x68>)
 80155f4:	7819      	ldrb	r1, [r3, #0]
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f002 f841 	bl	8017688 <USBD_LL_PrepareReceive>
 8015606:	e008      	b.n	801561a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015608:	4b06      	ldr	r3, [pc, #24]	; (8015624 <USBD_CDC_ReceivePacket+0x68>)
 801560a:	7819      	ldrb	r1, [r3, #0]
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015612:	2340      	movs	r3, #64	; 0x40
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f002 f837 	bl	8017688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801561a:	2300      	movs	r3, #0
}
 801561c:	4618      	mov	r0, r3
 801561e:	3710      	adds	r7, #16
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	24000098 	.word	0x24000098

08015628 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b086      	sub	sp, #24
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	4613      	mov	r3, r2
 8015634:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d101      	bne.n	8015640 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801563c:	2303      	movs	r3, #3
 801563e:	e01f      	b.n	8015680 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2200      	movs	r2, #0
 8015644:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	2200      	movs	r2, #0
 801564c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2200      	movs	r2, #0
 8015654:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d003      	beq.n	8015666 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	68ba      	ldr	r2, [r7, #8]
 8015662:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2201      	movs	r2, #1
 801566a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	79fa      	ldrb	r2, [r7, #7]
 8015672:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f001 feab 	bl	80173d0 <USBD_LL_Init>
 801567a:	4603      	mov	r3, r0
 801567c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015680:	4618      	mov	r0, r3
 8015682:	3718      	adds	r7, #24
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}

08015688 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b084      	sub	sp, #16
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
 8015690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015692:	2300      	movs	r3, #0
 8015694:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d101      	bne.n	80156a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801569c:	2303      	movs	r3, #3
 801569e:	e025      	b.n	80156ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	683a      	ldr	r2, [r7, #0]
 80156a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	32ae      	adds	r2, #174	; 0xae
 80156b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d00f      	beq.n	80156dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	32ae      	adds	r2, #174	; 0xae
 80156c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156cc:	f107 020e 	add.w	r2, r7, #14
 80156d0:	4610      	mov	r0, r2
 80156d2:	4798      	blx	r3
 80156d4:	4602      	mov	r2, r0
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80156e2:	1c5a      	adds	r2, r3, #1
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80156ea:	2300      	movs	r3, #0
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3710      	adds	r7, #16
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f001 feb9 	bl	8017474 <USBD_LL_Start>
 8015702:	4603      	mov	r3, r0
}
 8015704:	4618      	mov	r0, r3
 8015706:	3708      	adds	r7, #8
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015714:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015716:	4618      	mov	r0, r3
 8015718:	370c      	adds	r7, #12
 801571a:	46bd      	mov	sp, r7
 801571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015720:	4770      	bx	lr

08015722 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015722:	b580      	push	{r7, lr}
 8015724:	b084      	sub	sp, #16
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
 801572a:	460b      	mov	r3, r1
 801572c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801572e:	2300      	movs	r3, #0
 8015730:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015738:	2b00      	cmp	r3, #0
 801573a:	d009      	beq.n	8015750 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	78fa      	ldrb	r2, [r7, #3]
 8015746:	4611      	mov	r1, r2
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	4798      	blx	r3
 801574c:	4603      	mov	r3, r0
 801574e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015750:	7bfb      	ldrb	r3, [r7, #15]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3710      	adds	r7, #16
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}

0801575a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801575a:	b580      	push	{r7, lr}
 801575c:	b084      	sub	sp, #16
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]
 8015762:	460b      	mov	r3, r1
 8015764:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015766:	2300      	movs	r3, #0
 8015768:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	78fa      	ldrb	r2, [r7, #3]
 8015774:	4611      	mov	r1, r2
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	4798      	blx	r3
 801577a:	4603      	mov	r3, r0
 801577c:	2b00      	cmp	r3, #0
 801577e:	d001      	beq.n	8015784 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015780:	2303      	movs	r3, #3
 8015782:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015784:	7bfb      	ldrb	r3, [r7, #15]
}
 8015786:	4618      	mov	r0, r3
 8015788:	3710      	adds	r7, #16
 801578a:	46bd      	mov	sp, r7
 801578c:	bd80      	pop	{r7, pc}

0801578e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801578e:	b580      	push	{r7, lr}
 8015790:	b084      	sub	sp, #16
 8015792:	af00      	add	r7, sp, #0
 8015794:	6078      	str	r0, [r7, #4]
 8015796:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801579e:	6839      	ldr	r1, [r7, #0]
 80157a0:	4618      	mov	r0, r3
 80157a2:	f001 f938 	bl	8016a16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2201      	movs	r2, #1
 80157aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80157b4:	461a      	mov	r2, r3
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80157c2:	f003 031f 	and.w	r3, r3, #31
 80157c6:	2b02      	cmp	r3, #2
 80157c8:	d01a      	beq.n	8015800 <USBD_LL_SetupStage+0x72>
 80157ca:	2b02      	cmp	r3, #2
 80157cc:	d822      	bhi.n	8015814 <USBD_LL_SetupStage+0x86>
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d002      	beq.n	80157d8 <USBD_LL_SetupStage+0x4a>
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d00a      	beq.n	80157ec <USBD_LL_SetupStage+0x5e>
 80157d6:	e01d      	b.n	8015814 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157de:	4619      	mov	r1, r3
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f000 fb65 	bl	8015eb0 <USBD_StdDevReq>
 80157e6:	4603      	mov	r3, r0
 80157e8:	73fb      	strb	r3, [r7, #15]
      break;
 80157ea:	e020      	b.n	801582e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157f2:	4619      	mov	r1, r3
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f000 fbcd 	bl	8015f94 <USBD_StdItfReq>
 80157fa:	4603      	mov	r3, r0
 80157fc:	73fb      	strb	r3, [r7, #15]
      break;
 80157fe:	e016      	b.n	801582e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015806:	4619      	mov	r1, r3
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f000 fc2f 	bl	801606c <USBD_StdEPReq>
 801580e:	4603      	mov	r3, r0
 8015810:	73fb      	strb	r3, [r7, #15]
      break;
 8015812:	e00c      	b.n	801582e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801581a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801581e:	b2db      	uxtb	r3, r3
 8015820:	4619      	mov	r1, r3
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f001 fe86 	bl	8017534 <USBD_LL_StallEP>
 8015828:	4603      	mov	r3, r0
 801582a:	73fb      	strb	r3, [r7, #15]
      break;
 801582c:	bf00      	nop
  }

  return ret;
 801582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015830:	4618      	mov	r0, r3
 8015832:	3710      	adds	r7, #16
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}

08015838 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b086      	sub	sp, #24
 801583c:	af00      	add	r7, sp, #0
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	460b      	mov	r3, r1
 8015842:	607a      	str	r2, [r7, #4]
 8015844:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015846:	2300      	movs	r3, #0
 8015848:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801584a:	7afb      	ldrb	r3, [r7, #11]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d16e      	bne.n	801592e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015856:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801585e:	2b03      	cmp	r3, #3
 8015860:	f040 8098 	bne.w	8015994 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015864:	693b      	ldr	r3, [r7, #16]
 8015866:	689a      	ldr	r2, [r3, #8]
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	429a      	cmp	r2, r3
 801586e:	d913      	bls.n	8015898 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	689a      	ldr	r2, [r3, #8]
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	1ad2      	subs	r2, r2, r3
 801587a:	693b      	ldr	r3, [r7, #16]
 801587c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	68da      	ldr	r2, [r3, #12]
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	689b      	ldr	r3, [r3, #8]
 8015886:	4293      	cmp	r3, r2
 8015888:	bf28      	it	cs
 801588a:	4613      	movcs	r3, r2
 801588c:	461a      	mov	r2, r3
 801588e:	6879      	ldr	r1, [r7, #4]
 8015890:	68f8      	ldr	r0, [r7, #12]
 8015892:	f001 f9b4 	bl	8016bfe <USBD_CtlContinueRx>
 8015896:	e07d      	b.n	8015994 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801589e:	f003 031f 	and.w	r3, r3, #31
 80158a2:	2b02      	cmp	r3, #2
 80158a4:	d014      	beq.n	80158d0 <USBD_LL_DataOutStage+0x98>
 80158a6:	2b02      	cmp	r3, #2
 80158a8:	d81d      	bhi.n	80158e6 <USBD_LL_DataOutStage+0xae>
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d002      	beq.n	80158b4 <USBD_LL_DataOutStage+0x7c>
 80158ae:	2b01      	cmp	r3, #1
 80158b0:	d003      	beq.n	80158ba <USBD_LL_DataOutStage+0x82>
 80158b2:	e018      	b.n	80158e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80158b4:	2300      	movs	r3, #0
 80158b6:	75bb      	strb	r3, [r7, #22]
            break;
 80158b8:	e018      	b.n	80158ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	4619      	mov	r1, r3
 80158c4:	68f8      	ldr	r0, [r7, #12]
 80158c6:	f000 fa64 	bl	8015d92 <USBD_CoreFindIF>
 80158ca:	4603      	mov	r3, r0
 80158cc:	75bb      	strb	r3, [r7, #22]
            break;
 80158ce:	e00d      	b.n	80158ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80158d6:	b2db      	uxtb	r3, r3
 80158d8:	4619      	mov	r1, r3
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f000 fa66 	bl	8015dac <USBD_CoreFindEP>
 80158e0:	4603      	mov	r3, r0
 80158e2:	75bb      	strb	r3, [r7, #22]
            break;
 80158e4:	e002      	b.n	80158ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80158e6:	2300      	movs	r3, #0
 80158e8:	75bb      	strb	r3, [r7, #22]
            break;
 80158ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80158ec:	7dbb      	ldrb	r3, [r7, #22]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d119      	bne.n	8015926 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158f8:	b2db      	uxtb	r3, r3
 80158fa:	2b03      	cmp	r3, #3
 80158fc:	d113      	bne.n	8015926 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80158fe:	7dba      	ldrb	r2, [r7, #22]
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	32ae      	adds	r2, #174	; 0xae
 8015904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015908:	691b      	ldr	r3, [r3, #16]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d00b      	beq.n	8015926 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801590e:	7dba      	ldrb	r2, [r7, #22]
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015916:	7dba      	ldrb	r2, [r7, #22]
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	32ae      	adds	r2, #174	; 0xae
 801591c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015920:	691b      	ldr	r3, [r3, #16]
 8015922:	68f8      	ldr	r0, [r7, #12]
 8015924:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f001 f97a 	bl	8016c20 <USBD_CtlSendStatus>
 801592c:	e032      	b.n	8015994 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801592e:	7afb      	ldrb	r3, [r7, #11]
 8015930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015934:	b2db      	uxtb	r3, r3
 8015936:	4619      	mov	r1, r3
 8015938:	68f8      	ldr	r0, [r7, #12]
 801593a:	f000 fa37 	bl	8015dac <USBD_CoreFindEP>
 801593e:	4603      	mov	r3, r0
 8015940:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015942:	7dbb      	ldrb	r3, [r7, #22]
 8015944:	2bff      	cmp	r3, #255	; 0xff
 8015946:	d025      	beq.n	8015994 <USBD_LL_DataOutStage+0x15c>
 8015948:	7dbb      	ldrb	r3, [r7, #22]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d122      	bne.n	8015994 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015954:	b2db      	uxtb	r3, r3
 8015956:	2b03      	cmp	r3, #3
 8015958:	d117      	bne.n	801598a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801595a:	7dba      	ldrb	r2, [r7, #22]
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	32ae      	adds	r2, #174	; 0xae
 8015960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015964:	699b      	ldr	r3, [r3, #24]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d00f      	beq.n	801598a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801596a:	7dba      	ldrb	r2, [r7, #22]
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015972:	7dba      	ldrb	r2, [r7, #22]
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	32ae      	adds	r2, #174	; 0xae
 8015978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597c:	699b      	ldr	r3, [r3, #24]
 801597e:	7afa      	ldrb	r2, [r7, #11]
 8015980:	4611      	mov	r1, r2
 8015982:	68f8      	ldr	r0, [r7, #12]
 8015984:	4798      	blx	r3
 8015986:	4603      	mov	r3, r0
 8015988:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801598a:	7dfb      	ldrb	r3, [r7, #23]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d001      	beq.n	8015994 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015990:	7dfb      	ldrb	r3, [r7, #23]
 8015992:	e000      	b.n	8015996 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015994:	2300      	movs	r3, #0
}
 8015996:	4618      	mov	r0, r3
 8015998:	3718      	adds	r7, #24
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801599e:	b580      	push	{r7, lr}
 80159a0:	b086      	sub	sp, #24
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	60f8      	str	r0, [r7, #12]
 80159a6:	460b      	mov	r3, r1
 80159a8:	607a      	str	r2, [r7, #4]
 80159aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80159ac:	7afb      	ldrb	r3, [r7, #11]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d16f      	bne.n	8015a92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	3314      	adds	r3, #20
 80159b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80159be:	2b02      	cmp	r3, #2
 80159c0:	d15a      	bne.n	8015a78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	689a      	ldr	r2, [r3, #8]
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	68db      	ldr	r3, [r3, #12]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d914      	bls.n	80159f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	689a      	ldr	r2, [r3, #8]
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	68db      	ldr	r3, [r3, #12]
 80159d6:	1ad2      	subs	r2, r2, r3
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	689b      	ldr	r3, [r3, #8]
 80159e0:	461a      	mov	r2, r3
 80159e2:	6879      	ldr	r1, [r7, #4]
 80159e4:	68f8      	ldr	r0, [r7, #12]
 80159e6:	f001 f8dc 	bl	8016ba2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159ea:	2300      	movs	r3, #0
 80159ec:	2200      	movs	r2, #0
 80159ee:	2100      	movs	r1, #0
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	f001 fe49 	bl	8017688 <USBD_LL_PrepareReceive>
 80159f6:	e03f      	b.n	8015a78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	68da      	ldr	r2, [r3, #12]
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	689b      	ldr	r3, [r3, #8]
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d11c      	bne.n	8015a3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	685a      	ldr	r2, [r3, #4]
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d316      	bcc.n	8015a3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	685a      	ldr	r2, [r3, #4]
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d20f      	bcs.n	8015a3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015a1e:	2200      	movs	r2, #0
 8015a20:	2100      	movs	r1, #0
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	f001 f8bd 	bl	8016ba2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015a30:	2300      	movs	r3, #0
 8015a32:	2200      	movs	r2, #0
 8015a34:	2100      	movs	r1, #0
 8015a36:	68f8      	ldr	r0, [r7, #12]
 8015a38:	f001 fe26 	bl	8017688 <USBD_LL_PrepareReceive>
 8015a3c:	e01c      	b.n	8015a78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a44:	b2db      	uxtb	r3, r3
 8015a46:	2b03      	cmp	r3, #3
 8015a48:	d10f      	bne.n	8015a6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d009      	beq.n	8015a6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a6a:	2180      	movs	r1, #128	; 0x80
 8015a6c:	68f8      	ldr	r0, [r7, #12]
 8015a6e:	f001 fd61 	bl	8017534 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015a72:	68f8      	ldr	r0, [r7, #12]
 8015a74:	f001 f8e7 	bl	8016c46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d03a      	beq.n	8015af8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015a82:	68f8      	ldr	r0, [r7, #12]
 8015a84:	f7ff fe42 	bl	801570c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015a90:	e032      	b.n	8015af8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015a92:	7afb      	ldrb	r3, [r7, #11]
 8015a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	f000 f985 	bl	8015dac <USBD_CoreFindEP>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015aa6:	7dfb      	ldrb	r3, [r7, #23]
 8015aa8:	2bff      	cmp	r3, #255	; 0xff
 8015aaa:	d025      	beq.n	8015af8 <USBD_LL_DataInStage+0x15a>
 8015aac:	7dfb      	ldrb	r3, [r7, #23]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d122      	bne.n	8015af8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ab8:	b2db      	uxtb	r3, r3
 8015aba:	2b03      	cmp	r3, #3
 8015abc:	d11c      	bne.n	8015af8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015abe:	7dfa      	ldrb	r2, [r7, #23]
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	32ae      	adds	r2, #174	; 0xae
 8015ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ac8:	695b      	ldr	r3, [r3, #20]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d014      	beq.n	8015af8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015ace:	7dfa      	ldrb	r2, [r7, #23]
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015ad6:	7dfa      	ldrb	r2, [r7, #23]
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	32ae      	adds	r2, #174	; 0xae
 8015adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ae0:	695b      	ldr	r3, [r3, #20]
 8015ae2:	7afa      	ldrb	r2, [r7, #11]
 8015ae4:	4611      	mov	r1, r2
 8015ae6:	68f8      	ldr	r0, [r7, #12]
 8015ae8:	4798      	blx	r3
 8015aea:	4603      	mov	r3, r0
 8015aec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015aee:	7dbb      	ldrb	r3, [r7, #22]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d001      	beq.n	8015af8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015af4:	7dbb      	ldrb	r3, [r7, #22]
 8015af6:	e000      	b.n	8015afa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015af8:	2300      	movs	r3, #0
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3718      	adds	r7, #24
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bd80      	pop	{r7, pc}

08015b02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015b02:	b580      	push	{r7, lr}
 8015b04:	b084      	sub	sp, #16
 8015b06:	af00      	add	r7, sp, #0
 8015b08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2201      	movs	r2, #1
 8015b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2200      	movs	r2, #0
 8015b22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2200      	movs	r2, #0
 8015b28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d014      	beq.n	8015b68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d00e      	beq.n	8015b68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	6852      	ldr	r2, [r2, #4]
 8015b56:	b2d2      	uxtb	r2, r2
 8015b58:	4611      	mov	r1, r2
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	4798      	blx	r3
 8015b5e:	4603      	mov	r3, r0
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d001      	beq.n	8015b68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015b64:	2303      	movs	r3, #3
 8015b66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b68:	2340      	movs	r3, #64	; 0x40
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	2100      	movs	r1, #0
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f001 fc9b 	bl	80174aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2201      	movs	r2, #1
 8015b78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2240      	movs	r2, #64	; 0x40
 8015b80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b84:	2340      	movs	r3, #64	; 0x40
 8015b86:	2200      	movs	r2, #0
 8015b88:	2180      	movs	r1, #128	; 0x80
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f001 fc8d 	bl	80174aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2201      	movs	r2, #1
 8015b94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2240      	movs	r2, #64	; 0x40
 8015b9a:	621a      	str	r2, [r3, #32]

  return ret;
 8015b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}

08015ba6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015ba6:	b480      	push	{r7}
 8015ba8:	b083      	sub	sp, #12
 8015baa:	af00      	add	r7, sp, #0
 8015bac:	6078      	str	r0, [r7, #4]
 8015bae:	460b      	mov	r3, r1
 8015bb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	78fa      	ldrb	r2, [r7, #3]
 8015bb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015bb8:	2300      	movs	r3, #0
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	370c      	adds	r7, #12
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc4:	4770      	bx	lr

08015bc6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015bc6:	b480      	push	{r7}
 8015bc8:	b083      	sub	sp, #12
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bd4:	b2db      	uxtb	r3, r3
 8015bd6:	2b04      	cmp	r3, #4
 8015bd8:	d006      	beq.n	8015be8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2204      	movs	r2, #4
 8015bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015bf0:	2300      	movs	r3, #0
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	370c      	adds	r7, #12
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfc:	4770      	bx	lr

08015bfe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015bfe:	b480      	push	{r7}
 8015c00:	b083      	sub	sp, #12
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c0c:	b2db      	uxtb	r3, r3
 8015c0e:	2b04      	cmp	r3, #4
 8015c10:	d106      	bne.n	8015c20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015c18:	b2da      	uxtb	r2, r3
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015c20:	2300      	movs	r3, #0
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	370c      	adds	r7, #12
 8015c26:	46bd      	mov	sp, r7
 8015c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2c:	4770      	bx	lr

08015c2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015c2e:	b580      	push	{r7, lr}
 8015c30:	b082      	sub	sp, #8
 8015c32:	af00      	add	r7, sp, #0
 8015c34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	2b03      	cmp	r3, #3
 8015c40:	d110      	bne.n	8015c64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d00b      	beq.n	8015c64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c52:	69db      	ldr	r3, [r3, #28]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d005      	beq.n	8015c64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c5e:	69db      	ldr	r3, [r3, #28]
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015c64:	2300      	movs	r3, #0
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3708      	adds	r7, #8
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}

08015c6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015c6e:	b580      	push	{r7, lr}
 8015c70:	b082      	sub	sp, #8
 8015c72:	af00      	add	r7, sp, #0
 8015c74:	6078      	str	r0, [r7, #4]
 8015c76:	460b      	mov	r3, r1
 8015c78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	32ae      	adds	r2, #174	; 0xae
 8015c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d101      	bne.n	8015c90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015c8c:	2303      	movs	r3, #3
 8015c8e:	e01c      	b.n	8015cca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c96:	b2db      	uxtb	r3, r3
 8015c98:	2b03      	cmp	r3, #3
 8015c9a:	d115      	bne.n	8015cc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	32ae      	adds	r2, #174	; 0xae
 8015ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015caa:	6a1b      	ldr	r3, [r3, #32]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00b      	beq.n	8015cc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	32ae      	adds	r2, #174	; 0xae
 8015cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cbe:	6a1b      	ldr	r3, [r3, #32]
 8015cc0:	78fa      	ldrb	r2, [r7, #3]
 8015cc2:	4611      	mov	r1, r2
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015cc8:	2300      	movs	r3, #0
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3708      	adds	r7, #8
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}

08015cd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015cd2:	b580      	push	{r7, lr}
 8015cd4:	b082      	sub	sp, #8
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	6078      	str	r0, [r7, #4]
 8015cda:	460b      	mov	r3, r1
 8015cdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	32ae      	adds	r2, #174	; 0xae
 8015ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d101      	bne.n	8015cf4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015cf0:	2303      	movs	r3, #3
 8015cf2:	e01c      	b.n	8015d2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cfa:	b2db      	uxtb	r3, r3
 8015cfc:	2b03      	cmp	r3, #3
 8015cfe:	d115      	bne.n	8015d2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	32ae      	adds	r2, #174	; 0xae
 8015d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d00b      	beq.n	8015d2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	32ae      	adds	r2, #174	; 0xae
 8015d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d24:	78fa      	ldrb	r2, [r7, #3]
 8015d26:	4611      	mov	r1, r2
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015d2c:	2300      	movs	r3, #0
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}

08015d36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015d36:	b480      	push	{r7}
 8015d38:	b083      	sub	sp, #12
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015d3e:	2300      	movs	r3, #0
}
 8015d40:	4618      	mov	r0, r3
 8015d42:	370c      	adds	r7, #12
 8015d44:	46bd      	mov	sp, r7
 8015d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4a:	4770      	bx	lr

08015d4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015d54:	2300      	movs	r3, #0
 8015d56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2201      	movs	r2, #1
 8015d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d00e      	beq.n	8015d88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	6852      	ldr	r2, [r2, #4]
 8015d76:	b2d2      	uxtb	r2, r2
 8015d78:	4611      	mov	r1, r2
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	4798      	blx	r3
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d001      	beq.n	8015d88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015d84:	2303      	movs	r3, #3
 8015d86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}

08015d92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d92:	b480      	push	{r7}
 8015d94:	b083      	sub	sp, #12
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
 8015d9a:	460b      	mov	r3, r1
 8015d9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	370c      	adds	r7, #12
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr

08015dac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015dac:	b480      	push	{r7}
 8015dae:	b083      	sub	sp, #12
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	460b      	mov	r3, r1
 8015db6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015db8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	370c      	adds	r7, #12
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc4:	4770      	bx	lr

08015dc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015dc6:	b580      	push	{r7, lr}
 8015dc8:	b086      	sub	sp, #24
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	6078      	str	r0, [r7, #4]
 8015dce:	460b      	mov	r3, r1
 8015dd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	885b      	ldrh	r3, [r3, #2]
 8015de2:	b29a      	uxth	r2, r3
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d920      	bls.n	8015e30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015df6:	e013      	b.n	8015e20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015df8:	f107 030a 	add.w	r3, r7, #10
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	6978      	ldr	r0, [r7, #20]
 8015e00:	f000 f81b 	bl	8015e3a <USBD_GetNextDesc>
 8015e04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	785b      	ldrb	r3, [r3, #1]
 8015e0a:	2b05      	cmp	r3, #5
 8015e0c:	d108      	bne.n	8015e20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	789b      	ldrb	r3, [r3, #2]
 8015e16:	78fa      	ldrb	r2, [r7, #3]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d008      	beq.n	8015e2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	885b      	ldrh	r3, [r3, #2]
 8015e24:	b29a      	uxth	r2, r3
 8015e26:	897b      	ldrh	r3, [r7, #10]
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d8e5      	bhi.n	8015df8 <USBD_GetEpDesc+0x32>
 8015e2c:	e000      	b.n	8015e30 <USBD_GetEpDesc+0x6a>
          break;
 8015e2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015e30:	693b      	ldr	r3, [r7, #16]
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3718      	adds	r7, #24
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}

08015e3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015e3a:	b480      	push	{r7}
 8015e3c:	b085      	sub	sp, #20
 8015e3e:	af00      	add	r7, sp, #0
 8015e40:	6078      	str	r0, [r7, #4]
 8015e42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	881a      	ldrh	r2, [r3, #0]
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	4413      	add	r3, r2
 8015e54:	b29a      	uxth	r2, r3
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	461a      	mov	r2, r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	4413      	add	r3, r2
 8015e64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015e66:	68fb      	ldr	r3, [r7, #12]
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	3714      	adds	r7, #20
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e72:	4770      	bx	lr

08015e74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b087      	sub	sp, #28
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	3301      	adds	r3, #1
 8015e8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015e92:	8a3b      	ldrh	r3, [r7, #16]
 8015e94:	021b      	lsls	r3, r3, #8
 8015e96:	b21a      	sxth	r2, r3
 8015e98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e9c:	4313      	orrs	r3, r2
 8015e9e:	b21b      	sxth	r3, r3
 8015ea0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015ea2:	89fb      	ldrh	r3, [r7, #14]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	371c      	adds	r7, #28
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eae:	4770      	bx	lr

08015eb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b084      	sub	sp, #16
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
 8015eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	781b      	ldrb	r3, [r3, #0]
 8015ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015ec6:	2b40      	cmp	r3, #64	; 0x40
 8015ec8:	d005      	beq.n	8015ed6 <USBD_StdDevReq+0x26>
 8015eca:	2b40      	cmp	r3, #64	; 0x40
 8015ecc:	d857      	bhi.n	8015f7e <USBD_StdDevReq+0xce>
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d00f      	beq.n	8015ef2 <USBD_StdDevReq+0x42>
 8015ed2:	2b20      	cmp	r3, #32
 8015ed4:	d153      	bne.n	8015f7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	32ae      	adds	r2, #174	; 0xae
 8015ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ee4:	689b      	ldr	r3, [r3, #8]
 8015ee6:	6839      	ldr	r1, [r7, #0]
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	4798      	blx	r3
 8015eec:	4603      	mov	r3, r0
 8015eee:	73fb      	strb	r3, [r7, #15]
      break;
 8015ef0:	e04a      	b.n	8015f88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	785b      	ldrb	r3, [r3, #1]
 8015ef6:	2b09      	cmp	r3, #9
 8015ef8:	d83b      	bhi.n	8015f72 <USBD_StdDevReq+0xc2>
 8015efa:	a201      	add	r2, pc, #4	; (adr r2, 8015f00 <USBD_StdDevReq+0x50>)
 8015efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f00:	08015f55 	.word	0x08015f55
 8015f04:	08015f69 	.word	0x08015f69
 8015f08:	08015f73 	.word	0x08015f73
 8015f0c:	08015f5f 	.word	0x08015f5f
 8015f10:	08015f73 	.word	0x08015f73
 8015f14:	08015f33 	.word	0x08015f33
 8015f18:	08015f29 	.word	0x08015f29
 8015f1c:	08015f73 	.word	0x08015f73
 8015f20:	08015f4b 	.word	0x08015f4b
 8015f24:	08015f3d 	.word	0x08015f3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015f28:	6839      	ldr	r1, [r7, #0]
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 fa3c 	bl	80163a8 <USBD_GetDescriptor>
          break;
 8015f30:	e024      	b.n	8015f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015f32:	6839      	ldr	r1, [r7, #0]
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fbcb 	bl	80166d0 <USBD_SetAddress>
          break;
 8015f3a:	e01f      	b.n	8015f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015f3c:	6839      	ldr	r1, [r7, #0]
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f000 fc0a 	bl	8016758 <USBD_SetConfig>
 8015f44:	4603      	mov	r3, r0
 8015f46:	73fb      	strb	r3, [r7, #15]
          break;
 8015f48:	e018      	b.n	8015f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015f4a:	6839      	ldr	r1, [r7, #0]
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f000 fcad 	bl	80168ac <USBD_GetConfig>
          break;
 8015f52:	e013      	b.n	8015f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015f54:	6839      	ldr	r1, [r7, #0]
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f000 fcde 	bl	8016918 <USBD_GetStatus>
          break;
 8015f5c:	e00e      	b.n	8015f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015f5e:	6839      	ldr	r1, [r7, #0]
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f000 fd0d 	bl	8016980 <USBD_SetFeature>
          break;
 8015f66:	e009      	b.n	8015f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015f68:	6839      	ldr	r1, [r7, #0]
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 fd31 	bl	80169d2 <USBD_ClrFeature>
          break;
 8015f70:	e004      	b.n	8015f7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015f72:	6839      	ldr	r1, [r7, #0]
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f000 fd88 	bl	8016a8a <USBD_CtlError>
          break;
 8015f7a:	bf00      	nop
      }
      break;
 8015f7c:	e004      	b.n	8015f88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015f7e:	6839      	ldr	r1, [r7, #0]
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f000 fd82 	bl	8016a8a <USBD_CtlError>
      break;
 8015f86:	bf00      	nop
  }

  return ret;
 8015f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3710      	adds	r7, #16
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop

08015f94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b084      	sub	sp, #16
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
 8015f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015faa:	2b40      	cmp	r3, #64	; 0x40
 8015fac:	d005      	beq.n	8015fba <USBD_StdItfReq+0x26>
 8015fae:	2b40      	cmp	r3, #64	; 0x40
 8015fb0:	d852      	bhi.n	8016058 <USBD_StdItfReq+0xc4>
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d001      	beq.n	8015fba <USBD_StdItfReq+0x26>
 8015fb6:	2b20      	cmp	r3, #32
 8015fb8:	d14e      	bne.n	8016058 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	3b01      	subs	r3, #1
 8015fc4:	2b02      	cmp	r3, #2
 8015fc6:	d840      	bhi.n	801604a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	889b      	ldrh	r3, [r3, #4]
 8015fcc:	b2db      	uxtb	r3, r3
 8015fce:	2b01      	cmp	r3, #1
 8015fd0:	d836      	bhi.n	8016040 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	889b      	ldrh	r3, [r3, #4]
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	4619      	mov	r1, r3
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	f7ff fed9 	bl	8015d92 <USBD_CoreFindIF>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015fe4:	7bbb      	ldrb	r3, [r7, #14]
 8015fe6:	2bff      	cmp	r3, #255	; 0xff
 8015fe8:	d01d      	beq.n	8016026 <USBD_StdItfReq+0x92>
 8015fea:	7bbb      	ldrb	r3, [r7, #14]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d11a      	bne.n	8016026 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015ff0:	7bba      	ldrb	r2, [r7, #14]
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	32ae      	adds	r2, #174	; 0xae
 8015ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ffa:	689b      	ldr	r3, [r3, #8]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d00f      	beq.n	8016020 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016000:	7bba      	ldrb	r2, [r7, #14]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016008:	7bba      	ldrb	r2, [r7, #14]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	32ae      	adds	r2, #174	; 0xae
 801600e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016012:	689b      	ldr	r3, [r3, #8]
 8016014:	6839      	ldr	r1, [r7, #0]
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	4798      	blx	r3
 801601a:	4603      	mov	r3, r0
 801601c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801601e:	e004      	b.n	801602a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016020:	2303      	movs	r3, #3
 8016022:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016024:	e001      	b.n	801602a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016026:	2303      	movs	r3, #3
 8016028:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	88db      	ldrh	r3, [r3, #6]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d110      	bne.n	8016054 <USBD_StdItfReq+0xc0>
 8016032:	7bfb      	ldrb	r3, [r7, #15]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d10d      	bne.n	8016054 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 fdf1 	bl	8016c20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801603e:	e009      	b.n	8016054 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016040:	6839      	ldr	r1, [r7, #0]
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 fd21 	bl	8016a8a <USBD_CtlError>
          break;
 8016048:	e004      	b.n	8016054 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801604a:	6839      	ldr	r1, [r7, #0]
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f000 fd1c 	bl	8016a8a <USBD_CtlError>
          break;
 8016052:	e000      	b.n	8016056 <USBD_StdItfReq+0xc2>
          break;
 8016054:	bf00      	nop
      }
      break;
 8016056:	e004      	b.n	8016062 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016058:	6839      	ldr	r1, [r7, #0]
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f000 fd15 	bl	8016a8a <USBD_CtlError>
      break;
 8016060:	bf00      	nop
  }

  return ret;
 8016062:	7bfb      	ldrb	r3, [r7, #15]
}
 8016064:	4618      	mov	r0, r3
 8016066:	3710      	adds	r7, #16
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}

0801606c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b084      	sub	sp, #16
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
 8016074:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016076:	2300      	movs	r3, #0
 8016078:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	889b      	ldrh	r3, [r3, #4]
 801607e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016088:	2b40      	cmp	r3, #64	; 0x40
 801608a:	d007      	beq.n	801609c <USBD_StdEPReq+0x30>
 801608c:	2b40      	cmp	r3, #64	; 0x40
 801608e:	f200 817f 	bhi.w	8016390 <USBD_StdEPReq+0x324>
 8016092:	2b00      	cmp	r3, #0
 8016094:	d02a      	beq.n	80160ec <USBD_StdEPReq+0x80>
 8016096:	2b20      	cmp	r3, #32
 8016098:	f040 817a 	bne.w	8016390 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801609c:	7bbb      	ldrb	r3, [r7, #14]
 801609e:	4619      	mov	r1, r3
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7ff fe83 	bl	8015dac <USBD_CoreFindEP>
 80160a6:	4603      	mov	r3, r0
 80160a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160aa:	7b7b      	ldrb	r3, [r7, #13]
 80160ac:	2bff      	cmp	r3, #255	; 0xff
 80160ae:	f000 8174 	beq.w	801639a <USBD_StdEPReq+0x32e>
 80160b2:	7b7b      	ldrb	r3, [r7, #13]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	f040 8170 	bne.w	801639a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80160ba:	7b7a      	ldrb	r2, [r7, #13]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80160c2:	7b7a      	ldrb	r2, [r7, #13]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	32ae      	adds	r2, #174	; 0xae
 80160c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160cc:	689b      	ldr	r3, [r3, #8]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	f000 8163 	beq.w	801639a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80160d4:	7b7a      	ldrb	r2, [r7, #13]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	32ae      	adds	r2, #174	; 0xae
 80160da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160de:	689b      	ldr	r3, [r3, #8]
 80160e0:	6839      	ldr	r1, [r7, #0]
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	4798      	blx	r3
 80160e6:	4603      	mov	r3, r0
 80160e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80160ea:	e156      	b.n	801639a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	785b      	ldrb	r3, [r3, #1]
 80160f0:	2b03      	cmp	r3, #3
 80160f2:	d008      	beq.n	8016106 <USBD_StdEPReq+0x9a>
 80160f4:	2b03      	cmp	r3, #3
 80160f6:	f300 8145 	bgt.w	8016384 <USBD_StdEPReq+0x318>
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	f000 809b 	beq.w	8016236 <USBD_StdEPReq+0x1ca>
 8016100:	2b01      	cmp	r3, #1
 8016102:	d03c      	beq.n	801617e <USBD_StdEPReq+0x112>
 8016104:	e13e      	b.n	8016384 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801610c:	b2db      	uxtb	r3, r3
 801610e:	2b02      	cmp	r3, #2
 8016110:	d002      	beq.n	8016118 <USBD_StdEPReq+0xac>
 8016112:	2b03      	cmp	r3, #3
 8016114:	d016      	beq.n	8016144 <USBD_StdEPReq+0xd8>
 8016116:	e02c      	b.n	8016172 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016118:	7bbb      	ldrb	r3, [r7, #14]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d00d      	beq.n	801613a <USBD_StdEPReq+0xce>
 801611e:	7bbb      	ldrb	r3, [r7, #14]
 8016120:	2b80      	cmp	r3, #128	; 0x80
 8016122:	d00a      	beq.n	801613a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016124:	7bbb      	ldrb	r3, [r7, #14]
 8016126:	4619      	mov	r1, r3
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f001 fa03 	bl	8017534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801612e:	2180      	movs	r1, #128	; 0x80
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f001 f9ff 	bl	8017534 <USBD_LL_StallEP>
 8016136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016138:	e020      	b.n	801617c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801613a:	6839      	ldr	r1, [r7, #0]
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f000 fca4 	bl	8016a8a <USBD_CtlError>
              break;
 8016142:	e01b      	b.n	801617c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	885b      	ldrh	r3, [r3, #2]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d10e      	bne.n	801616a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801614c:	7bbb      	ldrb	r3, [r7, #14]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d00b      	beq.n	801616a <USBD_StdEPReq+0xfe>
 8016152:	7bbb      	ldrb	r3, [r7, #14]
 8016154:	2b80      	cmp	r3, #128	; 0x80
 8016156:	d008      	beq.n	801616a <USBD_StdEPReq+0xfe>
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	88db      	ldrh	r3, [r3, #6]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d104      	bne.n	801616a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016160:	7bbb      	ldrb	r3, [r7, #14]
 8016162:	4619      	mov	r1, r3
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f001 f9e5 	bl	8017534 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f000 fd58 	bl	8016c20 <USBD_CtlSendStatus>

              break;
 8016170:	e004      	b.n	801617c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016172:	6839      	ldr	r1, [r7, #0]
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f000 fc88 	bl	8016a8a <USBD_CtlError>
              break;
 801617a:	bf00      	nop
          }
          break;
 801617c:	e107      	b.n	801638e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016184:	b2db      	uxtb	r3, r3
 8016186:	2b02      	cmp	r3, #2
 8016188:	d002      	beq.n	8016190 <USBD_StdEPReq+0x124>
 801618a:	2b03      	cmp	r3, #3
 801618c:	d016      	beq.n	80161bc <USBD_StdEPReq+0x150>
 801618e:	e04b      	b.n	8016228 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016190:	7bbb      	ldrb	r3, [r7, #14]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d00d      	beq.n	80161b2 <USBD_StdEPReq+0x146>
 8016196:	7bbb      	ldrb	r3, [r7, #14]
 8016198:	2b80      	cmp	r3, #128	; 0x80
 801619a:	d00a      	beq.n	80161b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801619c:	7bbb      	ldrb	r3, [r7, #14]
 801619e:	4619      	mov	r1, r3
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f001 f9c7 	bl	8017534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80161a6:	2180      	movs	r1, #128	; 0x80
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f001 f9c3 	bl	8017534 <USBD_LL_StallEP>
 80161ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80161b0:	e040      	b.n	8016234 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80161b2:	6839      	ldr	r1, [r7, #0]
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 fc68 	bl	8016a8a <USBD_CtlError>
              break;
 80161ba:	e03b      	b.n	8016234 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	885b      	ldrh	r3, [r3, #2]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d136      	bne.n	8016232 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80161c4:	7bbb      	ldrb	r3, [r7, #14]
 80161c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d004      	beq.n	80161d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80161ce:	7bbb      	ldrb	r3, [r7, #14]
 80161d0:	4619      	mov	r1, r3
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f001 f9cd 	bl	8017572 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f000 fd21 	bl	8016c20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80161de:	7bbb      	ldrb	r3, [r7, #14]
 80161e0:	4619      	mov	r1, r3
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f7ff fde2 	bl	8015dac <USBD_CoreFindEP>
 80161e8:	4603      	mov	r3, r0
 80161ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161ec:	7b7b      	ldrb	r3, [r7, #13]
 80161ee:	2bff      	cmp	r3, #255	; 0xff
 80161f0:	d01f      	beq.n	8016232 <USBD_StdEPReq+0x1c6>
 80161f2:	7b7b      	ldrb	r3, [r7, #13]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d11c      	bne.n	8016232 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80161f8:	7b7a      	ldrb	r2, [r7, #13]
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016200:	7b7a      	ldrb	r2, [r7, #13]
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	32ae      	adds	r2, #174	; 0xae
 8016206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801620a:	689b      	ldr	r3, [r3, #8]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d010      	beq.n	8016232 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016210:	7b7a      	ldrb	r2, [r7, #13]
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	32ae      	adds	r2, #174	; 0xae
 8016216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	4798      	blx	r3
 8016222:	4603      	mov	r3, r0
 8016224:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016226:	e004      	b.n	8016232 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016228:	6839      	ldr	r1, [r7, #0]
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f000 fc2d 	bl	8016a8a <USBD_CtlError>
              break;
 8016230:	e000      	b.n	8016234 <USBD_StdEPReq+0x1c8>
              break;
 8016232:	bf00      	nop
          }
          break;
 8016234:	e0ab      	b.n	801638e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801623c:	b2db      	uxtb	r3, r3
 801623e:	2b02      	cmp	r3, #2
 8016240:	d002      	beq.n	8016248 <USBD_StdEPReq+0x1dc>
 8016242:	2b03      	cmp	r3, #3
 8016244:	d032      	beq.n	80162ac <USBD_StdEPReq+0x240>
 8016246:	e097      	b.n	8016378 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016248:	7bbb      	ldrb	r3, [r7, #14]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d007      	beq.n	801625e <USBD_StdEPReq+0x1f2>
 801624e:	7bbb      	ldrb	r3, [r7, #14]
 8016250:	2b80      	cmp	r3, #128	; 0x80
 8016252:	d004      	beq.n	801625e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016254:	6839      	ldr	r1, [r7, #0]
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f000 fc17 	bl	8016a8a <USBD_CtlError>
                break;
 801625c:	e091      	b.n	8016382 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801625e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016262:	2b00      	cmp	r3, #0
 8016264:	da0b      	bge.n	801627e <USBD_StdEPReq+0x212>
 8016266:	7bbb      	ldrb	r3, [r7, #14]
 8016268:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801626c:	4613      	mov	r3, r2
 801626e:	009b      	lsls	r3, r3, #2
 8016270:	4413      	add	r3, r2
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	3310      	adds	r3, #16
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	4413      	add	r3, r2
 801627a:	3304      	adds	r3, #4
 801627c:	e00b      	b.n	8016296 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801627e:	7bbb      	ldrb	r3, [r7, #14]
 8016280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016284:	4613      	mov	r3, r2
 8016286:	009b      	lsls	r3, r3, #2
 8016288:	4413      	add	r3, r2
 801628a:	009b      	lsls	r3, r3, #2
 801628c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	4413      	add	r3, r2
 8016294:	3304      	adds	r3, #4
 8016296:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	2200      	movs	r2, #0
 801629c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	2202      	movs	r2, #2
 80162a2:	4619      	mov	r1, r3
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f000 fc61 	bl	8016b6c <USBD_CtlSendData>
              break;
 80162aa:	e06a      	b.n	8016382 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80162ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	da11      	bge.n	80162d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80162b4:	7bbb      	ldrb	r3, [r7, #14]
 80162b6:	f003 020f 	and.w	r2, r3, #15
 80162ba:	6879      	ldr	r1, [r7, #4]
 80162bc:	4613      	mov	r3, r2
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	4413      	add	r3, r2
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	440b      	add	r3, r1
 80162c6:	3324      	adds	r3, #36	; 0x24
 80162c8:	881b      	ldrh	r3, [r3, #0]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d117      	bne.n	80162fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80162ce:	6839      	ldr	r1, [r7, #0]
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f000 fbda 	bl	8016a8a <USBD_CtlError>
                  break;
 80162d6:	e054      	b.n	8016382 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80162d8:	7bbb      	ldrb	r3, [r7, #14]
 80162da:	f003 020f 	and.w	r2, r3, #15
 80162de:	6879      	ldr	r1, [r7, #4]
 80162e0:	4613      	mov	r3, r2
 80162e2:	009b      	lsls	r3, r3, #2
 80162e4:	4413      	add	r3, r2
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	440b      	add	r3, r1
 80162ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80162ee:	881b      	ldrh	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d104      	bne.n	80162fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80162f4:	6839      	ldr	r1, [r7, #0]
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f000 fbc7 	bl	8016a8a <USBD_CtlError>
                  break;
 80162fc:	e041      	b.n	8016382 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016302:	2b00      	cmp	r3, #0
 8016304:	da0b      	bge.n	801631e <USBD_StdEPReq+0x2b2>
 8016306:	7bbb      	ldrb	r3, [r7, #14]
 8016308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801630c:	4613      	mov	r3, r2
 801630e:	009b      	lsls	r3, r3, #2
 8016310:	4413      	add	r3, r2
 8016312:	009b      	lsls	r3, r3, #2
 8016314:	3310      	adds	r3, #16
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	4413      	add	r3, r2
 801631a:	3304      	adds	r3, #4
 801631c:	e00b      	b.n	8016336 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801631e:	7bbb      	ldrb	r3, [r7, #14]
 8016320:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016324:	4613      	mov	r3, r2
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	4413      	add	r3, r2
 801632a:	009b      	lsls	r3, r3, #2
 801632c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016330:	687a      	ldr	r2, [r7, #4]
 8016332:	4413      	add	r3, r2
 8016334:	3304      	adds	r3, #4
 8016336:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016338:	7bbb      	ldrb	r3, [r7, #14]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d002      	beq.n	8016344 <USBD_StdEPReq+0x2d8>
 801633e:	7bbb      	ldrb	r3, [r7, #14]
 8016340:	2b80      	cmp	r3, #128	; 0x80
 8016342:	d103      	bne.n	801634c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	2200      	movs	r2, #0
 8016348:	601a      	str	r2, [r3, #0]
 801634a:	e00e      	b.n	801636a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801634c:	7bbb      	ldrb	r3, [r7, #14]
 801634e:	4619      	mov	r1, r3
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f001 f92d 	bl	80175b0 <USBD_LL_IsStallEP>
 8016356:	4603      	mov	r3, r0
 8016358:	2b00      	cmp	r3, #0
 801635a:	d003      	beq.n	8016364 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	2201      	movs	r2, #1
 8016360:	601a      	str	r2, [r3, #0]
 8016362:	e002      	b.n	801636a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	2200      	movs	r2, #0
 8016368:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	2202      	movs	r2, #2
 801636e:	4619      	mov	r1, r3
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f000 fbfb 	bl	8016b6c <USBD_CtlSendData>
              break;
 8016376:	e004      	b.n	8016382 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016378:	6839      	ldr	r1, [r7, #0]
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f000 fb85 	bl	8016a8a <USBD_CtlError>
              break;
 8016380:	bf00      	nop
          }
          break;
 8016382:	e004      	b.n	801638e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016384:	6839      	ldr	r1, [r7, #0]
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f000 fb7f 	bl	8016a8a <USBD_CtlError>
          break;
 801638c:	bf00      	nop
      }
      break;
 801638e:	e005      	b.n	801639c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016390:	6839      	ldr	r1, [r7, #0]
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f000 fb79 	bl	8016a8a <USBD_CtlError>
      break;
 8016398:	e000      	b.n	801639c <USBD_StdEPReq+0x330>
      break;
 801639a:	bf00      	nop
  }

  return ret;
 801639c:	7bfb      	ldrb	r3, [r7, #15]
}
 801639e:	4618      	mov	r0, r3
 80163a0:	3710      	adds	r7, #16
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
	...

080163a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b084      	sub	sp, #16
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80163b2:	2300      	movs	r3, #0
 80163b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80163b6:	2300      	movs	r3, #0
 80163b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80163ba:	2300      	movs	r3, #0
 80163bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	885b      	ldrh	r3, [r3, #2]
 80163c2:	0a1b      	lsrs	r3, r3, #8
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	3b01      	subs	r3, #1
 80163c8:	2b0e      	cmp	r3, #14
 80163ca:	f200 8152 	bhi.w	8016672 <USBD_GetDescriptor+0x2ca>
 80163ce:	a201      	add	r2, pc, #4	; (adr r2, 80163d4 <USBD_GetDescriptor+0x2c>)
 80163d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163d4:	08016445 	.word	0x08016445
 80163d8:	0801645d 	.word	0x0801645d
 80163dc:	0801649d 	.word	0x0801649d
 80163e0:	08016673 	.word	0x08016673
 80163e4:	08016673 	.word	0x08016673
 80163e8:	08016613 	.word	0x08016613
 80163ec:	0801663f 	.word	0x0801663f
 80163f0:	08016673 	.word	0x08016673
 80163f4:	08016673 	.word	0x08016673
 80163f8:	08016673 	.word	0x08016673
 80163fc:	08016673 	.word	0x08016673
 8016400:	08016673 	.word	0x08016673
 8016404:	08016673 	.word	0x08016673
 8016408:	08016673 	.word	0x08016673
 801640c:	08016411 	.word	0x08016411
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016416:	69db      	ldr	r3, [r3, #28]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d00b      	beq.n	8016434 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016422:	69db      	ldr	r3, [r3, #28]
 8016424:	687a      	ldr	r2, [r7, #4]
 8016426:	7c12      	ldrb	r2, [r2, #16]
 8016428:	f107 0108 	add.w	r1, r7, #8
 801642c:	4610      	mov	r0, r2
 801642e:	4798      	blx	r3
 8016430:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016432:	e126      	b.n	8016682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016434:	6839      	ldr	r1, [r7, #0]
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f000 fb27 	bl	8016a8a <USBD_CtlError>
        err++;
 801643c:	7afb      	ldrb	r3, [r7, #11]
 801643e:	3301      	adds	r3, #1
 8016440:	72fb      	strb	r3, [r7, #11]
      break;
 8016442:	e11e      	b.n	8016682 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	7c12      	ldrb	r2, [r2, #16]
 8016450:	f107 0108 	add.w	r1, r7, #8
 8016454:	4610      	mov	r0, r2
 8016456:	4798      	blx	r3
 8016458:	60f8      	str	r0, [r7, #12]
      break;
 801645a:	e112      	b.n	8016682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	7c1b      	ldrb	r3, [r3, #16]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d10d      	bne.n	8016480 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801646c:	f107 0208 	add.w	r2, r7, #8
 8016470:	4610      	mov	r0, r2
 8016472:	4798      	blx	r3
 8016474:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	3301      	adds	r3, #1
 801647a:	2202      	movs	r2, #2
 801647c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801647e:	e100      	b.n	8016682 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016488:	f107 0208 	add.w	r2, r7, #8
 801648c:	4610      	mov	r0, r2
 801648e:	4798      	blx	r3
 8016490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	3301      	adds	r3, #1
 8016496:	2202      	movs	r2, #2
 8016498:	701a      	strb	r2, [r3, #0]
      break;
 801649a:	e0f2      	b.n	8016682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	885b      	ldrh	r3, [r3, #2]
 80164a0:	b2db      	uxtb	r3, r3
 80164a2:	2b05      	cmp	r3, #5
 80164a4:	f200 80ac 	bhi.w	8016600 <USBD_GetDescriptor+0x258>
 80164a8:	a201      	add	r2, pc, #4	; (adr r2, 80164b0 <USBD_GetDescriptor+0x108>)
 80164aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164ae:	bf00      	nop
 80164b0:	080164c9 	.word	0x080164c9
 80164b4:	080164fd 	.word	0x080164fd
 80164b8:	08016531 	.word	0x08016531
 80164bc:	08016565 	.word	0x08016565
 80164c0:	08016599 	.word	0x08016599
 80164c4:	080165cd 	.word	0x080165cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164ce:	685b      	ldr	r3, [r3, #4]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00b      	beq.n	80164ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	7c12      	ldrb	r2, [r2, #16]
 80164e0:	f107 0108 	add.w	r1, r7, #8
 80164e4:	4610      	mov	r0, r2
 80164e6:	4798      	blx	r3
 80164e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164ea:	e091      	b.n	8016610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164ec:	6839      	ldr	r1, [r7, #0]
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f000 facb 	bl	8016a8a <USBD_CtlError>
            err++;
 80164f4:	7afb      	ldrb	r3, [r7, #11]
 80164f6:	3301      	adds	r3, #1
 80164f8:	72fb      	strb	r3, [r7, #11]
          break;
 80164fa:	e089      	b.n	8016610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016502:	689b      	ldr	r3, [r3, #8]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d00b      	beq.n	8016520 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801650e:	689b      	ldr	r3, [r3, #8]
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	7c12      	ldrb	r2, [r2, #16]
 8016514:	f107 0108 	add.w	r1, r7, #8
 8016518:	4610      	mov	r0, r2
 801651a:	4798      	blx	r3
 801651c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801651e:	e077      	b.n	8016610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016520:	6839      	ldr	r1, [r7, #0]
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f000 fab1 	bl	8016a8a <USBD_CtlError>
            err++;
 8016528:	7afb      	ldrb	r3, [r7, #11]
 801652a:	3301      	adds	r3, #1
 801652c:	72fb      	strb	r3, [r7, #11]
          break;
 801652e:	e06f      	b.n	8016610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016536:	68db      	ldr	r3, [r3, #12]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d00b      	beq.n	8016554 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	7c12      	ldrb	r2, [r2, #16]
 8016548:	f107 0108 	add.w	r1, r7, #8
 801654c:	4610      	mov	r0, r2
 801654e:	4798      	blx	r3
 8016550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016552:	e05d      	b.n	8016610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016554:	6839      	ldr	r1, [r7, #0]
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fa97 	bl	8016a8a <USBD_CtlError>
            err++;
 801655c:	7afb      	ldrb	r3, [r7, #11]
 801655e:	3301      	adds	r3, #1
 8016560:	72fb      	strb	r3, [r7, #11]
          break;
 8016562:	e055      	b.n	8016610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801656a:	691b      	ldr	r3, [r3, #16]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d00b      	beq.n	8016588 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016576:	691b      	ldr	r3, [r3, #16]
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	7c12      	ldrb	r2, [r2, #16]
 801657c:	f107 0108 	add.w	r1, r7, #8
 8016580:	4610      	mov	r0, r2
 8016582:	4798      	blx	r3
 8016584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016586:	e043      	b.n	8016610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016588:	6839      	ldr	r1, [r7, #0]
 801658a:	6878      	ldr	r0, [r7, #4]
 801658c:	f000 fa7d 	bl	8016a8a <USBD_CtlError>
            err++;
 8016590:	7afb      	ldrb	r3, [r7, #11]
 8016592:	3301      	adds	r3, #1
 8016594:	72fb      	strb	r3, [r7, #11]
          break;
 8016596:	e03b      	b.n	8016610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801659e:	695b      	ldr	r3, [r3, #20]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d00b      	beq.n	80165bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165aa:	695b      	ldr	r3, [r3, #20]
 80165ac:	687a      	ldr	r2, [r7, #4]
 80165ae:	7c12      	ldrb	r2, [r2, #16]
 80165b0:	f107 0108 	add.w	r1, r7, #8
 80165b4:	4610      	mov	r0, r2
 80165b6:	4798      	blx	r3
 80165b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165ba:	e029      	b.n	8016610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80165bc:	6839      	ldr	r1, [r7, #0]
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f000 fa63 	bl	8016a8a <USBD_CtlError>
            err++;
 80165c4:	7afb      	ldrb	r3, [r7, #11]
 80165c6:	3301      	adds	r3, #1
 80165c8:	72fb      	strb	r3, [r7, #11]
          break;
 80165ca:	e021      	b.n	8016610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165d2:	699b      	ldr	r3, [r3, #24]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d00b      	beq.n	80165f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165de:	699b      	ldr	r3, [r3, #24]
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	7c12      	ldrb	r2, [r2, #16]
 80165e4:	f107 0108 	add.w	r1, r7, #8
 80165e8:	4610      	mov	r0, r2
 80165ea:	4798      	blx	r3
 80165ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165ee:	e00f      	b.n	8016610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80165f0:	6839      	ldr	r1, [r7, #0]
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f000 fa49 	bl	8016a8a <USBD_CtlError>
            err++;
 80165f8:	7afb      	ldrb	r3, [r7, #11]
 80165fa:	3301      	adds	r3, #1
 80165fc:	72fb      	strb	r3, [r7, #11]
          break;
 80165fe:	e007      	b.n	8016610 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016600:	6839      	ldr	r1, [r7, #0]
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f000 fa41 	bl	8016a8a <USBD_CtlError>
          err++;
 8016608:	7afb      	ldrb	r3, [r7, #11]
 801660a:	3301      	adds	r3, #1
 801660c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801660e:	bf00      	nop
      }
      break;
 8016610:	e037      	b.n	8016682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	7c1b      	ldrb	r3, [r3, #16]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d109      	bne.n	801662e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016622:	f107 0208 	add.w	r2, r7, #8
 8016626:	4610      	mov	r0, r2
 8016628:	4798      	blx	r3
 801662a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801662c:	e029      	b.n	8016682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f000 fa2a 	bl	8016a8a <USBD_CtlError>
        err++;
 8016636:	7afb      	ldrb	r3, [r7, #11]
 8016638:	3301      	adds	r3, #1
 801663a:	72fb      	strb	r3, [r7, #11]
      break;
 801663c:	e021      	b.n	8016682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	7c1b      	ldrb	r3, [r3, #16]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d10d      	bne.n	8016662 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801664e:	f107 0208 	add.w	r2, r7, #8
 8016652:	4610      	mov	r0, r2
 8016654:	4798      	blx	r3
 8016656:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	3301      	adds	r3, #1
 801665c:	2207      	movs	r2, #7
 801665e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016660:	e00f      	b.n	8016682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016662:	6839      	ldr	r1, [r7, #0]
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f000 fa10 	bl	8016a8a <USBD_CtlError>
        err++;
 801666a:	7afb      	ldrb	r3, [r7, #11]
 801666c:	3301      	adds	r3, #1
 801666e:	72fb      	strb	r3, [r7, #11]
      break;
 8016670:	e007      	b.n	8016682 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8016672:	6839      	ldr	r1, [r7, #0]
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f000 fa08 	bl	8016a8a <USBD_CtlError>
      err++;
 801667a:	7afb      	ldrb	r3, [r7, #11]
 801667c:	3301      	adds	r3, #1
 801667e:	72fb      	strb	r3, [r7, #11]
      break;
 8016680:	bf00      	nop
  }

  if (err != 0U)
 8016682:	7afb      	ldrb	r3, [r7, #11]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d11e      	bne.n	80166c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	88db      	ldrh	r3, [r3, #6]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d016      	beq.n	80166be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8016690:	893b      	ldrh	r3, [r7, #8]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00e      	beq.n	80166b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	88da      	ldrh	r2, [r3, #6]
 801669a:	893b      	ldrh	r3, [r7, #8]
 801669c:	4293      	cmp	r3, r2
 801669e:	bf28      	it	cs
 80166a0:	4613      	movcs	r3, r2
 80166a2:	b29b      	uxth	r3, r3
 80166a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80166a6:	893b      	ldrh	r3, [r7, #8]
 80166a8:	461a      	mov	r2, r3
 80166aa:	68f9      	ldr	r1, [r7, #12]
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f000 fa5d 	bl	8016b6c <USBD_CtlSendData>
 80166b2:	e009      	b.n	80166c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80166b4:	6839      	ldr	r1, [r7, #0]
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f000 f9e7 	bl	8016a8a <USBD_CtlError>
 80166bc:	e004      	b.n	80166c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80166be:	6878      	ldr	r0, [r7, #4]
 80166c0:	f000 faae 	bl	8016c20 <USBD_CtlSendStatus>
 80166c4:	e000      	b.n	80166c8 <USBD_GetDescriptor+0x320>
    return;
 80166c6:	bf00      	nop
  }
}
 80166c8:	3710      	adds	r7, #16
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop

080166d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b084      	sub	sp, #16
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	889b      	ldrh	r3, [r3, #4]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d131      	bne.n	8016746 <USBD_SetAddress+0x76>
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	88db      	ldrh	r3, [r3, #6]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d12d      	bne.n	8016746 <USBD_SetAddress+0x76>
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	885b      	ldrh	r3, [r3, #2]
 80166ee:	2b7f      	cmp	r3, #127	; 0x7f
 80166f0:	d829      	bhi.n	8016746 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	885b      	ldrh	r3, [r3, #2]
 80166f6:	b2db      	uxtb	r3, r3
 80166f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016704:	b2db      	uxtb	r3, r3
 8016706:	2b03      	cmp	r3, #3
 8016708:	d104      	bne.n	8016714 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801670a:	6839      	ldr	r1, [r7, #0]
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f000 f9bc 	bl	8016a8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016712:	e01d      	b.n	8016750 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	7bfa      	ldrb	r2, [r7, #15]
 8016718:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801671c:	7bfb      	ldrb	r3, [r7, #15]
 801671e:	4619      	mov	r1, r3
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f000 ff71 	bl	8017608 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f000 fa7a 	bl	8016c20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801672c:	7bfb      	ldrb	r3, [r7, #15]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d004      	beq.n	801673c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	2202      	movs	r2, #2
 8016736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801673a:	e009      	b.n	8016750 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	2201      	movs	r2, #1
 8016740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016744:	e004      	b.n	8016750 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016746:	6839      	ldr	r1, [r7, #0]
 8016748:	6878      	ldr	r0, [r7, #4]
 801674a:	f000 f99e 	bl	8016a8a <USBD_CtlError>
  }
}
 801674e:	bf00      	nop
 8016750:	bf00      	nop
 8016752:	3710      	adds	r7, #16
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}

08016758 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b084      	sub	sp, #16
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016762:	2300      	movs	r3, #0
 8016764:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016766:	683b      	ldr	r3, [r7, #0]
 8016768:	885b      	ldrh	r3, [r3, #2]
 801676a:	b2da      	uxtb	r2, r3
 801676c:	4b4e      	ldr	r3, [pc, #312]	; (80168a8 <USBD_SetConfig+0x150>)
 801676e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016770:	4b4d      	ldr	r3, [pc, #308]	; (80168a8 <USBD_SetConfig+0x150>)
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	2b01      	cmp	r3, #1
 8016776:	d905      	bls.n	8016784 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016778:	6839      	ldr	r1, [r7, #0]
 801677a:	6878      	ldr	r0, [r7, #4]
 801677c:	f000 f985 	bl	8016a8a <USBD_CtlError>
    return USBD_FAIL;
 8016780:	2303      	movs	r3, #3
 8016782:	e08c      	b.n	801689e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2b02      	cmp	r3, #2
 801678e:	d002      	beq.n	8016796 <USBD_SetConfig+0x3e>
 8016790:	2b03      	cmp	r3, #3
 8016792:	d029      	beq.n	80167e8 <USBD_SetConfig+0x90>
 8016794:	e075      	b.n	8016882 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016796:	4b44      	ldr	r3, [pc, #272]	; (80168a8 <USBD_SetConfig+0x150>)
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d020      	beq.n	80167e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801679e:	4b42      	ldr	r3, [pc, #264]	; (80168a8 <USBD_SetConfig+0x150>)
 80167a0:	781b      	ldrb	r3, [r3, #0]
 80167a2:	461a      	mov	r2, r3
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167a8:	4b3f      	ldr	r3, [pc, #252]	; (80168a8 <USBD_SetConfig+0x150>)
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	4619      	mov	r1, r3
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f7fe ffb7 	bl	8015722 <USBD_SetClassConfig>
 80167b4:	4603      	mov	r3, r0
 80167b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80167b8:	7bfb      	ldrb	r3, [r7, #15]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d008      	beq.n	80167d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80167be:	6839      	ldr	r1, [r7, #0]
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f000 f962 	bl	8016a8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2202      	movs	r2, #2
 80167ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80167ce:	e065      	b.n	801689c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f000 fa25 	bl	8016c20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2203      	movs	r2, #3
 80167da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80167de:	e05d      	b.n	801689c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	f000 fa1d 	bl	8016c20 <USBD_CtlSendStatus>
      break;
 80167e6:	e059      	b.n	801689c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80167e8:	4b2f      	ldr	r3, [pc, #188]	; (80168a8 <USBD_SetConfig+0x150>)
 80167ea:	781b      	ldrb	r3, [r3, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d112      	bne.n	8016816 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2202      	movs	r2, #2
 80167f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80167f8:	4b2b      	ldr	r3, [pc, #172]	; (80168a8 <USBD_SetConfig+0x150>)
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	461a      	mov	r2, r3
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016802:	4b29      	ldr	r3, [pc, #164]	; (80168a8 <USBD_SetConfig+0x150>)
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	4619      	mov	r1, r3
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f7fe ffa6 	bl	801575a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f000 fa06 	bl	8016c20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016814:	e042      	b.n	801689c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016816:	4b24      	ldr	r3, [pc, #144]	; (80168a8 <USBD_SetConfig+0x150>)
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	461a      	mov	r2, r3
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	429a      	cmp	r2, r3
 8016822:	d02a      	beq.n	801687a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	685b      	ldr	r3, [r3, #4]
 8016828:	b2db      	uxtb	r3, r3
 801682a:	4619      	mov	r1, r3
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f7fe ff94 	bl	801575a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016832:	4b1d      	ldr	r3, [pc, #116]	; (80168a8 <USBD_SetConfig+0x150>)
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	461a      	mov	r2, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801683c:	4b1a      	ldr	r3, [pc, #104]	; (80168a8 <USBD_SetConfig+0x150>)
 801683e:	781b      	ldrb	r3, [r3, #0]
 8016840:	4619      	mov	r1, r3
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7fe ff6d 	bl	8015722 <USBD_SetClassConfig>
 8016848:	4603      	mov	r3, r0
 801684a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801684c:	7bfb      	ldrb	r3, [r7, #15]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d00f      	beq.n	8016872 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016852:	6839      	ldr	r1, [r7, #0]
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f000 f918 	bl	8016a8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	685b      	ldr	r3, [r3, #4]
 801685e:	b2db      	uxtb	r3, r3
 8016860:	4619      	mov	r1, r3
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f7fe ff79 	bl	801575a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2202      	movs	r2, #2
 801686c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016870:	e014      	b.n	801689c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016872:	6878      	ldr	r0, [r7, #4]
 8016874:	f000 f9d4 	bl	8016c20 <USBD_CtlSendStatus>
      break;
 8016878:	e010      	b.n	801689c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f000 f9d0 	bl	8016c20 <USBD_CtlSendStatus>
      break;
 8016880:	e00c      	b.n	801689c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016882:	6839      	ldr	r1, [r7, #0]
 8016884:	6878      	ldr	r0, [r7, #4]
 8016886:	f000 f900 	bl	8016a8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801688a:	4b07      	ldr	r3, [pc, #28]	; (80168a8 <USBD_SetConfig+0x150>)
 801688c:	781b      	ldrb	r3, [r3, #0]
 801688e:	4619      	mov	r1, r3
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	f7fe ff62 	bl	801575a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016896:	2303      	movs	r3, #3
 8016898:	73fb      	strb	r3, [r7, #15]
      break;
 801689a:	bf00      	nop
  }

  return ret;
 801689c:	7bfb      	ldrb	r3, [r7, #15]
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3710      	adds	r7, #16
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	24001700 	.word	0x24001700

080168ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	88db      	ldrh	r3, [r3, #6]
 80168ba:	2b01      	cmp	r3, #1
 80168bc:	d004      	beq.n	80168c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80168be:	6839      	ldr	r1, [r7, #0]
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f000 f8e2 	bl	8016a8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80168c6:	e023      	b.n	8016910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168ce:	b2db      	uxtb	r3, r3
 80168d0:	2b02      	cmp	r3, #2
 80168d2:	dc02      	bgt.n	80168da <USBD_GetConfig+0x2e>
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	dc03      	bgt.n	80168e0 <USBD_GetConfig+0x34>
 80168d8:	e015      	b.n	8016906 <USBD_GetConfig+0x5a>
 80168da:	2b03      	cmp	r3, #3
 80168dc:	d00b      	beq.n	80168f6 <USBD_GetConfig+0x4a>
 80168de:	e012      	b.n	8016906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2200      	movs	r2, #0
 80168e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	3308      	adds	r3, #8
 80168ea:	2201      	movs	r2, #1
 80168ec:	4619      	mov	r1, r3
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 f93c 	bl	8016b6c <USBD_CtlSendData>
        break;
 80168f4:	e00c      	b.n	8016910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	3304      	adds	r3, #4
 80168fa:	2201      	movs	r2, #1
 80168fc:	4619      	mov	r1, r3
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f000 f934 	bl	8016b6c <USBD_CtlSendData>
        break;
 8016904:	e004      	b.n	8016910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016906:	6839      	ldr	r1, [r7, #0]
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f000 f8be 	bl	8016a8a <USBD_CtlError>
        break;
 801690e:	bf00      	nop
}
 8016910:	bf00      	nop
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016928:	b2db      	uxtb	r3, r3
 801692a:	3b01      	subs	r3, #1
 801692c:	2b02      	cmp	r3, #2
 801692e:	d81e      	bhi.n	801696e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	88db      	ldrh	r3, [r3, #6]
 8016934:	2b02      	cmp	r3, #2
 8016936:	d004      	beq.n	8016942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016938:	6839      	ldr	r1, [r7, #0]
 801693a:	6878      	ldr	r0, [r7, #4]
 801693c:	f000 f8a5 	bl	8016a8a <USBD_CtlError>
        break;
 8016940:	e01a      	b.n	8016978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2201      	movs	r2, #1
 8016946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801694e:	2b00      	cmp	r3, #0
 8016950:	d005      	beq.n	801695e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	f043 0202 	orr.w	r2, r3, #2
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	330c      	adds	r3, #12
 8016962:	2202      	movs	r2, #2
 8016964:	4619      	mov	r1, r3
 8016966:	6878      	ldr	r0, [r7, #4]
 8016968:	f000 f900 	bl	8016b6c <USBD_CtlSendData>
      break;
 801696c:	e004      	b.n	8016978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801696e:	6839      	ldr	r1, [r7, #0]
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 f88a 	bl	8016a8a <USBD_CtlError>
      break;
 8016976:	bf00      	nop
  }
}
 8016978:	bf00      	nop
 801697a:	3708      	adds	r7, #8
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801698a:	683b      	ldr	r3, [r7, #0]
 801698c:	885b      	ldrh	r3, [r3, #2]
 801698e:	2b01      	cmp	r3, #1
 8016990:	d107      	bne.n	80169a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	2201      	movs	r2, #1
 8016996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f000 f940 	bl	8016c20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80169a0:	e013      	b.n	80169ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	885b      	ldrh	r3, [r3, #2]
 80169a6:	2b02      	cmp	r3, #2
 80169a8:	d10b      	bne.n	80169c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	889b      	ldrh	r3, [r3, #4]
 80169ae:	0a1b      	lsrs	r3, r3, #8
 80169b0:	b29b      	uxth	r3, r3
 80169b2:	b2da      	uxtb	r2, r3
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f000 f930 	bl	8016c20 <USBD_CtlSendStatus>
}
 80169c0:	e003      	b.n	80169ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80169c2:	6839      	ldr	r1, [r7, #0]
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 f860 	bl	8016a8a <USBD_CtlError>
}
 80169ca:	bf00      	nop
 80169cc:	3708      	adds	r7, #8
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b082      	sub	sp, #8
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169e2:	b2db      	uxtb	r3, r3
 80169e4:	3b01      	subs	r3, #1
 80169e6:	2b02      	cmp	r3, #2
 80169e8:	d80b      	bhi.n	8016a02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	885b      	ldrh	r3, [r3, #2]
 80169ee:	2b01      	cmp	r3, #1
 80169f0:	d10c      	bne.n	8016a0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2200      	movs	r2, #0
 80169f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f000 f910 	bl	8016c20 <USBD_CtlSendStatus>
      }
      break;
 8016a00:	e004      	b.n	8016a0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016a02:	6839      	ldr	r1, [r7, #0]
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 f840 	bl	8016a8a <USBD_CtlError>
      break;
 8016a0a:	e000      	b.n	8016a0e <USBD_ClrFeature+0x3c>
      break;
 8016a0c:	bf00      	nop
  }
}
 8016a0e:	bf00      	nop
 8016a10:	3708      	adds	r7, #8
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}

08016a16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016a16:	b580      	push	{r7, lr}
 8016a18:	b084      	sub	sp, #16
 8016a1a:	af00      	add	r7, sp, #0
 8016a1c:	6078      	str	r0, [r7, #4]
 8016a1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	781a      	ldrb	r2, [r3, #0]
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	3301      	adds	r3, #1
 8016a30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	781a      	ldrb	r2, [r3, #0]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016a40:	68f8      	ldr	r0, [r7, #12]
 8016a42:	f7ff fa17 	bl	8015e74 <SWAPBYTE>
 8016a46:	4603      	mov	r3, r0
 8016a48:	461a      	mov	r2, r3
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	3301      	adds	r3, #1
 8016a52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	3301      	adds	r3, #1
 8016a58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016a5a:	68f8      	ldr	r0, [r7, #12]
 8016a5c:	f7ff fa0a 	bl	8015e74 <SWAPBYTE>
 8016a60:	4603      	mov	r3, r0
 8016a62:	461a      	mov	r2, r3
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	3301      	adds	r3, #1
 8016a6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	3301      	adds	r3, #1
 8016a72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a74:	68f8      	ldr	r0, [r7, #12]
 8016a76:	f7ff f9fd 	bl	8015e74 <SWAPBYTE>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	80da      	strh	r2, [r3, #6]
}
 8016a82:	bf00      	nop
 8016a84:	3710      	adds	r7, #16
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}

08016a8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a8a:	b580      	push	{r7, lr}
 8016a8c:	b082      	sub	sp, #8
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	6078      	str	r0, [r7, #4]
 8016a92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a94:	2180      	movs	r1, #128	; 0x80
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f000 fd4c 	bl	8017534 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a9c:	2100      	movs	r1, #0
 8016a9e:	6878      	ldr	r0, [r7, #4]
 8016aa0:	f000 fd48 	bl	8017534 <USBD_LL_StallEP>
}
 8016aa4:	bf00      	nop
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b086      	sub	sp, #24
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	60f8      	str	r0, [r7, #12]
 8016ab4:	60b9      	str	r1, [r7, #8]
 8016ab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d036      	beq.n	8016b30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016ac6:	6938      	ldr	r0, [r7, #16]
 8016ac8:	f000 f836 	bl	8016b38 <USBD_GetLen>
 8016acc:	4603      	mov	r3, r0
 8016ace:	3301      	adds	r3, #1
 8016ad0:	b29b      	uxth	r3, r3
 8016ad2:	005b      	lsls	r3, r3, #1
 8016ad4:	b29a      	uxth	r2, r3
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016ada:	7dfb      	ldrb	r3, [r7, #23]
 8016adc:	68ba      	ldr	r2, [r7, #8]
 8016ade:	4413      	add	r3, r2
 8016ae0:	687a      	ldr	r2, [r7, #4]
 8016ae2:	7812      	ldrb	r2, [r2, #0]
 8016ae4:	701a      	strb	r2, [r3, #0]
  idx++;
 8016ae6:	7dfb      	ldrb	r3, [r7, #23]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016aec:	7dfb      	ldrb	r3, [r7, #23]
 8016aee:	68ba      	ldr	r2, [r7, #8]
 8016af0:	4413      	add	r3, r2
 8016af2:	2203      	movs	r2, #3
 8016af4:	701a      	strb	r2, [r3, #0]
  idx++;
 8016af6:	7dfb      	ldrb	r3, [r7, #23]
 8016af8:	3301      	adds	r3, #1
 8016afa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016afc:	e013      	b.n	8016b26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016afe:	7dfb      	ldrb	r3, [r7, #23]
 8016b00:	68ba      	ldr	r2, [r7, #8]
 8016b02:	4413      	add	r3, r2
 8016b04:	693a      	ldr	r2, [r7, #16]
 8016b06:	7812      	ldrb	r2, [r2, #0]
 8016b08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	613b      	str	r3, [r7, #16]
    idx++;
 8016b10:	7dfb      	ldrb	r3, [r7, #23]
 8016b12:	3301      	adds	r3, #1
 8016b14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016b16:	7dfb      	ldrb	r3, [r7, #23]
 8016b18:	68ba      	ldr	r2, [r7, #8]
 8016b1a:	4413      	add	r3, r2
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016b20:	7dfb      	ldrb	r3, [r7, #23]
 8016b22:	3301      	adds	r3, #1
 8016b24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d1e7      	bne.n	8016afe <USBD_GetString+0x52>
 8016b2e:	e000      	b.n	8016b32 <USBD_GetString+0x86>
    return;
 8016b30:	bf00      	nop
  }
}
 8016b32:	3718      	adds	r7, #24
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}

08016b38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016b38:	b480      	push	{r7}
 8016b3a:	b085      	sub	sp, #20
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016b40:	2300      	movs	r3, #0
 8016b42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016b48:	e005      	b.n	8016b56 <USBD_GetLen+0x1e>
  {
    len++;
 8016b4a:	7bfb      	ldrb	r3, [r7, #15]
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	3301      	adds	r3, #1
 8016b54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d1f5      	bne.n	8016b4a <USBD_GetLen+0x12>
  }

  return len;
 8016b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3714      	adds	r7, #20
 8016b64:	46bd      	mov	sp, r7
 8016b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6a:	4770      	bx	lr

08016b6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b084      	sub	sp, #16
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	60f8      	str	r0, [r7, #12]
 8016b74:	60b9      	str	r1, [r7, #8]
 8016b76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	2202      	movs	r2, #2
 8016b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	687a      	ldr	r2, [r7, #4]
 8016b84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	68ba      	ldr	r2, [r7, #8]
 8016b90:	2100      	movs	r1, #0
 8016b92:	68f8      	ldr	r0, [r7, #12]
 8016b94:	f000 fd57 	bl	8017646 <USBD_LL_Transmit>

  return USBD_OK;
 8016b98:	2300      	movs	r3, #0
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3710      	adds	r7, #16
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}

08016ba2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016ba2:	b580      	push	{r7, lr}
 8016ba4:	b084      	sub	sp, #16
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	60f8      	str	r0, [r7, #12]
 8016baa:	60b9      	str	r1, [r7, #8]
 8016bac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	68ba      	ldr	r2, [r7, #8]
 8016bb2:	2100      	movs	r1, #0
 8016bb4:	68f8      	ldr	r0, [r7, #12]
 8016bb6:	f000 fd46 	bl	8017646 <USBD_LL_Transmit>

  return USBD_OK;
 8016bba:	2300      	movs	r3, #0
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b084      	sub	sp, #16
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	2203      	movs	r2, #3
 8016bd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	687a      	ldr	r2, [r7, #4]
 8016bdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	687a      	ldr	r2, [r7, #4]
 8016be4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	68ba      	ldr	r2, [r7, #8]
 8016bec:	2100      	movs	r1, #0
 8016bee:	68f8      	ldr	r0, [r7, #12]
 8016bf0:	f000 fd4a 	bl	8017688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bf4:	2300      	movs	r3, #0
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	60f8      	str	r0, [r7, #12]
 8016c06:	60b9      	str	r1, [r7, #8]
 8016c08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	68ba      	ldr	r2, [r7, #8]
 8016c0e:	2100      	movs	r1, #0
 8016c10:	68f8      	ldr	r0, [r7, #12]
 8016c12:	f000 fd39 	bl	8017688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c16:	2300      	movs	r3, #0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3710      	adds	r7, #16
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	2204      	movs	r2, #4
 8016c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016c30:	2300      	movs	r3, #0
 8016c32:	2200      	movs	r2, #0
 8016c34:	2100      	movs	r1, #0
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f000 fd05 	bl	8017646 <USBD_LL_Transmit>

  return USBD_OK;
 8016c3c:	2300      	movs	r3, #0
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3708      	adds	r7, #8
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}

08016c46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016c46:	b580      	push	{r7, lr}
 8016c48:	b082      	sub	sp, #8
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	2205      	movs	r2, #5
 8016c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c56:	2300      	movs	r3, #0
 8016c58:	2200      	movs	r2, #0
 8016c5a:	2100      	movs	r1, #0
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f000 fd13 	bl	8017688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c62:	2300      	movs	r3, #0
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b087      	sub	sp, #28
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	4613      	mov	r3, r2
 8016c78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016c7e:	2300      	movs	r3, #0
 8016c80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016c82:	4b1f      	ldr	r3, [pc, #124]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016c84:	7a5b      	ldrb	r3, [r3, #9]
 8016c86:	b2db      	uxtb	r3, r3
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d131      	bne.n	8016cf0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016c8c:	4b1c      	ldr	r3, [pc, #112]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016c8e:	7a5b      	ldrb	r3, [r3, #9]
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	461a      	mov	r2, r3
 8016c94:	4b1a      	ldr	r3, [pc, #104]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016c96:	2100      	movs	r1, #0
 8016c98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016c9a:	4b19      	ldr	r3, [pc, #100]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016c9c:	7a5b      	ldrb	r3, [r3, #9]
 8016c9e:	b2db      	uxtb	r3, r3
 8016ca0:	4a17      	ldr	r2, [pc, #92]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016ca2:	009b      	lsls	r3, r3, #2
 8016ca4:	4413      	add	r3, r2
 8016ca6:	68fa      	ldr	r2, [r7, #12]
 8016ca8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016caa:	4b15      	ldr	r3, [pc, #84]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016cac:	7a5b      	ldrb	r3, [r3, #9]
 8016cae:	b2db      	uxtb	r3, r3
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	4b13      	ldr	r3, [pc, #76]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016cb4:	4413      	add	r3, r2
 8016cb6:	79fa      	ldrb	r2, [r7, #7]
 8016cb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016cba:	4b11      	ldr	r3, [pc, #68]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016cbc:	7a5b      	ldrb	r3, [r3, #9]
 8016cbe:	b2db      	uxtb	r3, r3
 8016cc0:	1c5a      	adds	r2, r3, #1
 8016cc2:	b2d1      	uxtb	r1, r2
 8016cc4:	4a0e      	ldr	r2, [pc, #56]	; (8016d00 <FATFS_LinkDriverEx+0x94>)
 8016cc6:	7251      	strb	r1, [r2, #9]
 8016cc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016cca:	7dbb      	ldrb	r3, [r7, #22]
 8016ccc:	3330      	adds	r3, #48	; 0x30
 8016cce:	b2da      	uxtb	r2, r3
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	3301      	adds	r3, #1
 8016cd8:	223a      	movs	r2, #58	; 0x3a
 8016cda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016cdc:	68bb      	ldr	r3, [r7, #8]
 8016cde:	3302      	adds	r3, #2
 8016ce0:	222f      	movs	r2, #47	; 0x2f
 8016ce2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	3303      	adds	r3, #3
 8016ce8:	2200      	movs	r2, #0
 8016cea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016cec:	2300      	movs	r3, #0
 8016cee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	371c      	adds	r7, #28
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	24001704 	.word	0x24001704

08016d04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
 8016d0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016d0e:	2200      	movs	r2, #0
 8016d10:	6839      	ldr	r1, [r7, #0]
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f7ff ffaa 	bl	8016c6c <FATFS_LinkDriverEx>
 8016d18:	4603      	mov	r3, r0
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3708      	adds	r7, #8
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}
	...

08016d24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016d28:	2201      	movs	r2, #1
 8016d2a:	4913      	ldr	r1, [pc, #76]	; (8016d78 <MX_USB_DEVICE_Init+0x54>)
 8016d2c:	4813      	ldr	r0, [pc, #76]	; (8016d7c <MX_USB_DEVICE_Init+0x58>)
 8016d2e:	f7fe fc7b 	bl	8015628 <USBD_Init>
 8016d32:	4603      	mov	r3, r0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d001      	beq.n	8016d3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016d38:	f7eb ff74 	bl	8002c24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016d3c:	4910      	ldr	r1, [pc, #64]	; (8016d80 <MX_USB_DEVICE_Init+0x5c>)
 8016d3e:	480f      	ldr	r0, [pc, #60]	; (8016d7c <MX_USB_DEVICE_Init+0x58>)
 8016d40:	f7fe fca2 	bl	8015688 <USBD_RegisterClass>
 8016d44:	4603      	mov	r3, r0
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d001      	beq.n	8016d4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016d4a:	f7eb ff6b 	bl	8002c24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016d4e:	490d      	ldr	r1, [pc, #52]	; (8016d84 <MX_USB_DEVICE_Init+0x60>)
 8016d50:	480a      	ldr	r0, [pc, #40]	; (8016d7c <MX_USB_DEVICE_Init+0x58>)
 8016d52:	f7fe fb99 	bl	8015488 <USBD_CDC_RegisterInterface>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016d5c:	f7eb ff62 	bl	8002c24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016d60:	4806      	ldr	r0, [pc, #24]	; (8016d7c <MX_USB_DEVICE_Init+0x58>)
 8016d62:	f7fe fcc7 	bl	80156f4 <USBD_Start>
 8016d66:	4603      	mov	r3, r0
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d001      	beq.n	8016d70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016d6c:	f7eb ff5a 	bl	8002c24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016d70:	f7f2 ff30 	bl	8009bd4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016d74:	bf00      	nop
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	240000b0 	.word	0x240000b0
 8016d7c:	24001710 	.word	0x24001710
 8016d80:	2400001c 	.word	0x2400001c
 8016d84:	2400009c 	.word	0x2400009c

08016d88 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	4905      	ldr	r1, [pc, #20]	; (8016da4 <CDC_Init_HS+0x1c>)
 8016d90:	4805      	ldr	r0, [pc, #20]	; (8016da8 <CDC_Init_HS+0x20>)
 8016d92:	f7fe fb93 	bl	80154bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016d96:	4905      	ldr	r1, [pc, #20]	; (8016dac <CDC_Init_HS+0x24>)
 8016d98:	4803      	ldr	r0, [pc, #12]	; (8016da8 <CDC_Init_HS+0x20>)
 8016d9a:	f7fe fbb1 	bl	8015500 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016d9e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	bd80      	pop	{r7, pc}
 8016da4:	240021ec 	.word	0x240021ec
 8016da8:	24001710 	.word	0x24001710
 8016dac:	240019ec 	.word	0x240019ec

08016db0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016db0:	b480      	push	{r7}
 8016db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016db4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	46bd      	mov	sp, r7
 8016dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbe:	4770      	bx	lr

08016dc0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016dc0:	b480      	push	{r7}
 8016dc2:	b083      	sub	sp, #12
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	6039      	str	r1, [r7, #0]
 8016dca:	71fb      	strb	r3, [r7, #7]
 8016dcc:	4613      	mov	r3, r2
 8016dce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016dd0:	79fb      	ldrb	r3, [r7, #7]
 8016dd2:	2b23      	cmp	r3, #35	; 0x23
 8016dd4:	d84a      	bhi.n	8016e6c <CDC_Control_HS+0xac>
 8016dd6:	a201      	add	r2, pc, #4	; (adr r2, 8016ddc <CDC_Control_HS+0x1c>)
 8016dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ddc:	08016e6d 	.word	0x08016e6d
 8016de0:	08016e6d 	.word	0x08016e6d
 8016de4:	08016e6d 	.word	0x08016e6d
 8016de8:	08016e6d 	.word	0x08016e6d
 8016dec:	08016e6d 	.word	0x08016e6d
 8016df0:	08016e6d 	.word	0x08016e6d
 8016df4:	08016e6d 	.word	0x08016e6d
 8016df8:	08016e6d 	.word	0x08016e6d
 8016dfc:	08016e6d 	.word	0x08016e6d
 8016e00:	08016e6d 	.word	0x08016e6d
 8016e04:	08016e6d 	.word	0x08016e6d
 8016e08:	08016e6d 	.word	0x08016e6d
 8016e0c:	08016e6d 	.word	0x08016e6d
 8016e10:	08016e6d 	.word	0x08016e6d
 8016e14:	08016e6d 	.word	0x08016e6d
 8016e18:	08016e6d 	.word	0x08016e6d
 8016e1c:	08016e6d 	.word	0x08016e6d
 8016e20:	08016e6d 	.word	0x08016e6d
 8016e24:	08016e6d 	.word	0x08016e6d
 8016e28:	08016e6d 	.word	0x08016e6d
 8016e2c:	08016e6d 	.word	0x08016e6d
 8016e30:	08016e6d 	.word	0x08016e6d
 8016e34:	08016e6d 	.word	0x08016e6d
 8016e38:	08016e6d 	.word	0x08016e6d
 8016e3c:	08016e6d 	.word	0x08016e6d
 8016e40:	08016e6d 	.word	0x08016e6d
 8016e44:	08016e6d 	.word	0x08016e6d
 8016e48:	08016e6d 	.word	0x08016e6d
 8016e4c:	08016e6d 	.word	0x08016e6d
 8016e50:	08016e6d 	.word	0x08016e6d
 8016e54:	08016e6d 	.word	0x08016e6d
 8016e58:	08016e6d 	.word	0x08016e6d
 8016e5c:	08016e6d 	.word	0x08016e6d
 8016e60:	08016e6d 	.word	0x08016e6d
 8016e64:	08016e6d 	.word	0x08016e6d
 8016e68:	08016e6d 	.word	0x08016e6d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016e6c:	bf00      	nop
  }

  return (USBD_OK);
 8016e6e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	370c      	adds	r7, #12
 8016e74:	46bd      	mov	sp, r7
 8016e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7a:	4770      	bx	lr

08016e7c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016e86:	6879      	ldr	r1, [r7, #4]
 8016e88:	480e      	ldr	r0, [pc, #56]	; (8016ec4 <CDC_Receive_HS+0x48>)
 8016e8a:	f7fe fb39 	bl	8015500 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016e8e:	480d      	ldr	r0, [pc, #52]	; (8016ec4 <CDC_Receive_HS+0x48>)
 8016e90:	f7fe fb94 	bl	80155bc <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016e9a:	4b0b      	ldr	r3, [pc, #44]	; (8016ec8 <CDC_Receive_HS+0x4c>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	4a0b      	ldr	r2, [pc, #44]	; (8016ecc <CDC_Receive_HS+0x50>)
 8016ea0:	4413      	add	r3, r2
 8016ea2:	68fa      	ldr	r2, [r7, #12]
 8016ea4:	6879      	ldr	r1, [r7, #4]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f000 fcf0 	bl	801788c <memcpy>
  usbBytesReady += cpyLen;
 8016eac:	4b06      	ldr	r3, [pc, #24]	; (8016ec8 <CDC_Receive_HS+0x4c>)
 8016eae:	681a      	ldr	r2, [r3, #0]
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	4413      	add	r3, r2
 8016eb4:	4a04      	ldr	r2, [pc, #16]	; (8016ec8 <CDC_Receive_HS+0x4c>)
 8016eb6:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016eb8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3710      	adds	r7, #16
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}
 8016ec2:	bf00      	nop
 8016ec4:	24001710 	.word	0x24001710
 8016ec8:	24000270 	.word	0x24000270
 8016ecc:	24000170 	.word	0x24000170

08016ed0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b084      	sub	sp, #16
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	460b      	mov	r3, r1
 8016eda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016edc:	2300      	movs	r3, #0
 8016ede:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016ee0:	4b0d      	ldr	r3, [pc, #52]	; (8016f18 <CDC_Transmit_HS+0x48>)
 8016ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ee6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d001      	beq.n	8016ef6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	e00b      	b.n	8016f0e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016ef6:	887b      	ldrh	r3, [r7, #2]
 8016ef8:	461a      	mov	r2, r3
 8016efa:	6879      	ldr	r1, [r7, #4]
 8016efc:	4806      	ldr	r0, [pc, #24]	; (8016f18 <CDC_Transmit_HS+0x48>)
 8016efe:	f7fe fadd 	bl	80154bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016f02:	4805      	ldr	r0, [pc, #20]	; (8016f18 <CDC_Transmit_HS+0x48>)
 8016f04:	f7fe fb1a 	bl	801553c <USBD_CDC_TransmitPacket>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f0e:	4618      	mov	r0, r3
 8016f10:	3710      	adds	r7, #16
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	24001710 	.word	0x24001710

08016f1c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016f1c:	b480      	push	{r7}
 8016f1e:	b087      	sub	sp, #28
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	60f8      	str	r0, [r7, #12]
 8016f24:	60b9      	str	r1, [r7, #8]
 8016f26:	4613      	mov	r3, r2
 8016f28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	371c      	adds	r7, #28
 8016f36:	46bd      	mov	sp, r7
 8016f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3c:	4770      	bx	lr
	...

08016f40 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f40:	b480      	push	{r7}
 8016f42:	b083      	sub	sp, #12
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	4603      	mov	r3, r0
 8016f48:	6039      	str	r1, [r7, #0]
 8016f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	2212      	movs	r2, #18
 8016f50:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016f52:	4b03      	ldr	r3, [pc, #12]	; (8016f60 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	370c      	adds	r7, #12
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5e:	4770      	bx	lr
 8016f60:	240000d0 	.word	0x240000d0

08016f64 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f64:	b480      	push	{r7}
 8016f66:	b083      	sub	sp, #12
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	6039      	str	r1, [r7, #0]
 8016f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	2204      	movs	r2, #4
 8016f74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016f76:	4b03      	ldr	r3, [pc, #12]	; (8016f84 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	370c      	adds	r7, #12
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f82:	4770      	bx	lr
 8016f84:	240000e4 	.word	0x240000e4

08016f88 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b082      	sub	sp, #8
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	4603      	mov	r3, r0
 8016f90:	6039      	str	r1, [r7, #0]
 8016f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f94:	79fb      	ldrb	r3, [r7, #7]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d105      	bne.n	8016fa6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016f9a:	683a      	ldr	r2, [r7, #0]
 8016f9c:	4907      	ldr	r1, [pc, #28]	; (8016fbc <USBD_HS_ProductStrDescriptor+0x34>)
 8016f9e:	4808      	ldr	r0, [pc, #32]	; (8016fc0 <USBD_HS_ProductStrDescriptor+0x38>)
 8016fa0:	f7ff fd84 	bl	8016aac <USBD_GetString>
 8016fa4:	e004      	b.n	8016fb0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016fa6:	683a      	ldr	r2, [r7, #0]
 8016fa8:	4904      	ldr	r1, [pc, #16]	; (8016fbc <USBD_HS_ProductStrDescriptor+0x34>)
 8016faa:	4805      	ldr	r0, [pc, #20]	; (8016fc0 <USBD_HS_ProductStrDescriptor+0x38>)
 8016fac:	f7ff fd7e 	bl	8016aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8016fb0:	4b02      	ldr	r3, [pc, #8]	; (8016fbc <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3708      	adds	r7, #8
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	240029ec 	.word	0x240029ec
 8016fc0:	08018c24 	.word	0x08018c24

08016fc4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	4603      	mov	r3, r0
 8016fcc:	6039      	str	r1, [r7, #0]
 8016fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016fd0:	683a      	ldr	r2, [r7, #0]
 8016fd2:	4904      	ldr	r1, [pc, #16]	; (8016fe4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016fd4:	4804      	ldr	r0, [pc, #16]	; (8016fe8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016fd6:	f7ff fd69 	bl	8016aac <USBD_GetString>
  return USBD_StrDesc;
 8016fda:	4b02      	ldr	r3, [pc, #8]	; (8016fe4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3708      	adds	r7, #8
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}
 8016fe4:	240029ec 	.word	0x240029ec
 8016fe8:	08018c40 	.word	0x08018c40

08016fec <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	6039      	str	r1, [r7, #0]
 8016ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	221a      	movs	r2, #26
 8016ffc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016ffe:	f000 f843 	bl	8017088 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017002:	4b02      	ldr	r3, [pc, #8]	; (801700c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8017004:	4618      	mov	r0, r3
 8017006:	3708      	adds	r7, #8
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	240000e8 	.word	0x240000e8

08017010 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b082      	sub	sp, #8
 8017014:	af00      	add	r7, sp, #0
 8017016:	4603      	mov	r3, r0
 8017018:	6039      	str	r1, [r7, #0]
 801701a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801701c:	79fb      	ldrb	r3, [r7, #7]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d105      	bne.n	801702e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017022:	683a      	ldr	r2, [r7, #0]
 8017024:	4907      	ldr	r1, [pc, #28]	; (8017044 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017026:	4808      	ldr	r0, [pc, #32]	; (8017048 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017028:	f7ff fd40 	bl	8016aac <USBD_GetString>
 801702c:	e004      	b.n	8017038 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801702e:	683a      	ldr	r2, [r7, #0]
 8017030:	4904      	ldr	r1, [pc, #16]	; (8017044 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017032:	4805      	ldr	r0, [pc, #20]	; (8017048 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017034:	f7ff fd3a 	bl	8016aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8017038:	4b02      	ldr	r3, [pc, #8]	; (8017044 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801703a:	4618      	mov	r0, r3
 801703c:	3708      	adds	r7, #8
 801703e:	46bd      	mov	sp, r7
 8017040:	bd80      	pop	{r7, pc}
 8017042:	bf00      	nop
 8017044:	240029ec 	.word	0x240029ec
 8017048:	08018c44 	.word	0x08018c44

0801704c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b082      	sub	sp, #8
 8017050:	af00      	add	r7, sp, #0
 8017052:	4603      	mov	r3, r0
 8017054:	6039      	str	r1, [r7, #0]
 8017056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017058:	79fb      	ldrb	r3, [r7, #7]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d105      	bne.n	801706a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801705e:	683a      	ldr	r2, [r7, #0]
 8017060:	4907      	ldr	r1, [pc, #28]	; (8017080 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017062:	4808      	ldr	r0, [pc, #32]	; (8017084 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017064:	f7ff fd22 	bl	8016aac <USBD_GetString>
 8017068:	e004      	b.n	8017074 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801706a:	683a      	ldr	r2, [r7, #0]
 801706c:	4904      	ldr	r1, [pc, #16]	; (8017080 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801706e:	4805      	ldr	r0, [pc, #20]	; (8017084 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017070:	f7ff fd1c 	bl	8016aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8017074:	4b02      	ldr	r3, [pc, #8]	; (8017080 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017076:	4618      	mov	r0, r3
 8017078:	3708      	adds	r7, #8
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	240029ec 	.word	0x240029ec
 8017084:	08018c50 	.word	0x08018c50

08017088 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b084      	sub	sp, #16
 801708c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801708e:	4b0f      	ldr	r3, [pc, #60]	; (80170cc <Get_SerialNum+0x44>)
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017094:	4b0e      	ldr	r3, [pc, #56]	; (80170d0 <Get_SerialNum+0x48>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801709a:	4b0e      	ldr	r3, [pc, #56]	; (80170d4 <Get_SerialNum+0x4c>)
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80170a0:	68fa      	ldr	r2, [r7, #12]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	4413      	add	r3, r2
 80170a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d009      	beq.n	80170c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80170ae:	2208      	movs	r2, #8
 80170b0:	4909      	ldr	r1, [pc, #36]	; (80170d8 <Get_SerialNum+0x50>)
 80170b2:	68f8      	ldr	r0, [r7, #12]
 80170b4:	f000 f814 	bl	80170e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80170b8:	2204      	movs	r2, #4
 80170ba:	4908      	ldr	r1, [pc, #32]	; (80170dc <Get_SerialNum+0x54>)
 80170bc:	68b8      	ldr	r0, [r7, #8]
 80170be:	f000 f80f 	bl	80170e0 <IntToUnicode>
  }
}
 80170c2:	bf00      	nop
 80170c4:	3710      	adds	r7, #16
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}
 80170ca:	bf00      	nop
 80170cc:	1ff1e800 	.word	0x1ff1e800
 80170d0:	1ff1e804 	.word	0x1ff1e804
 80170d4:	1ff1e808 	.word	0x1ff1e808
 80170d8:	240000ea 	.word	0x240000ea
 80170dc:	240000fa 	.word	0x240000fa

080170e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80170e0:	b480      	push	{r7}
 80170e2:	b087      	sub	sp, #28
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	4613      	mov	r3, r2
 80170ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80170ee:	2300      	movs	r3, #0
 80170f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80170f2:	2300      	movs	r3, #0
 80170f4:	75fb      	strb	r3, [r7, #23]
 80170f6:	e027      	b.n	8017148 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	0f1b      	lsrs	r3, r3, #28
 80170fc:	2b09      	cmp	r3, #9
 80170fe:	d80b      	bhi.n	8017118 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	0f1b      	lsrs	r3, r3, #28
 8017104:	b2da      	uxtb	r2, r3
 8017106:	7dfb      	ldrb	r3, [r7, #23]
 8017108:	005b      	lsls	r3, r3, #1
 801710a:	4619      	mov	r1, r3
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	440b      	add	r3, r1
 8017110:	3230      	adds	r2, #48	; 0x30
 8017112:	b2d2      	uxtb	r2, r2
 8017114:	701a      	strb	r2, [r3, #0]
 8017116:	e00a      	b.n	801712e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	0f1b      	lsrs	r3, r3, #28
 801711c:	b2da      	uxtb	r2, r3
 801711e:	7dfb      	ldrb	r3, [r7, #23]
 8017120:	005b      	lsls	r3, r3, #1
 8017122:	4619      	mov	r1, r3
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	440b      	add	r3, r1
 8017128:	3237      	adds	r2, #55	; 0x37
 801712a:	b2d2      	uxtb	r2, r2
 801712c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	011b      	lsls	r3, r3, #4
 8017132:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017134:	7dfb      	ldrb	r3, [r7, #23]
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	3301      	adds	r3, #1
 801713a:	68ba      	ldr	r2, [r7, #8]
 801713c:	4413      	add	r3, r2
 801713e:	2200      	movs	r2, #0
 8017140:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017142:	7dfb      	ldrb	r3, [r7, #23]
 8017144:	3301      	adds	r3, #1
 8017146:	75fb      	strb	r3, [r7, #23]
 8017148:	7dfa      	ldrb	r2, [r7, #23]
 801714a:	79fb      	ldrb	r3, [r7, #7]
 801714c:	429a      	cmp	r2, r3
 801714e:	d3d3      	bcc.n	80170f8 <IntToUnicode+0x18>
  }
}
 8017150:	bf00      	nop
 8017152:	bf00      	nop
 8017154:	371c      	adds	r7, #28
 8017156:	46bd      	mov	sp, r7
 8017158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715c:	4770      	bx	lr
	...

08017160 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b0b2      	sub	sp, #200	; 0xc8
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017168:	f107 0310 	add.w	r3, r7, #16
 801716c:	22b8      	movs	r2, #184	; 0xb8
 801716e:	2100      	movs	r1, #0
 8017170:	4618      	mov	r0, r3
 8017172:	f000 fb4f 	bl	8017814 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	4a1a      	ldr	r2, [pc, #104]	; (80171e4 <HAL_PCD_MspInit+0x84>)
 801717c:	4293      	cmp	r3, r2
 801717e:	d12c      	bne.n	80171da <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017180:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017184:	f04f 0300 	mov.w	r3, #0
 8017188:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801718c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8017190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017194:	f107 0310 	add.w	r3, r7, #16
 8017198:	4618      	mov	r0, r3
 801719a:	f7f3 fcfb 	bl	800ab94 <HAL_RCCEx_PeriphCLKConfig>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d001      	beq.n	80171a8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80171a4:	f7eb fd3e 	bl	8002c24 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80171a8:	f7f2 fd14 	bl	8009bd4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80171ac:	4b0e      	ldr	r3, [pc, #56]	; (80171e8 <HAL_PCD_MspInit+0x88>)
 80171ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80171b2:	4a0d      	ldr	r2, [pc, #52]	; (80171e8 <HAL_PCD_MspInit+0x88>)
 80171b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80171b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80171bc:	4b0a      	ldr	r3, [pc, #40]	; (80171e8 <HAL_PCD_MspInit+0x88>)
 80171be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80171c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80171c6:	60fb      	str	r3, [r7, #12]
 80171c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80171ca:	2200      	movs	r2, #0
 80171cc:	2100      	movs	r1, #0
 80171ce:	204d      	movs	r0, #77	; 0x4d
 80171d0:	f7ee fa85 	bl	80056de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80171d4:	204d      	movs	r0, #77	; 0x4d
 80171d6:	f7ee fa9c 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80171da:	bf00      	nop
 80171dc:	37c8      	adds	r7, #200	; 0xc8
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}
 80171e2:	bf00      	nop
 80171e4:	40040000 	.word	0x40040000
 80171e8:	58024400 	.word	0x58024400

080171ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b082      	sub	sp, #8
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017200:	4619      	mov	r1, r3
 8017202:	4610      	mov	r0, r2
 8017204:	f7fe fac3 	bl	801578e <USBD_LL_SetupStage>
}
 8017208:	bf00      	nop
 801720a:	3708      	adds	r7, #8
 801720c:	46bd      	mov	sp, r7
 801720e:	bd80      	pop	{r7, pc}

08017210 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b082      	sub	sp, #8
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	460b      	mov	r3, r1
 801721a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017222:	78fa      	ldrb	r2, [r7, #3]
 8017224:	6879      	ldr	r1, [r7, #4]
 8017226:	4613      	mov	r3, r2
 8017228:	00db      	lsls	r3, r3, #3
 801722a:	4413      	add	r3, r2
 801722c:	009b      	lsls	r3, r3, #2
 801722e:	440b      	add	r3, r1
 8017230:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017234:	681a      	ldr	r2, [r3, #0]
 8017236:	78fb      	ldrb	r3, [r7, #3]
 8017238:	4619      	mov	r1, r3
 801723a:	f7fe fafd 	bl	8015838 <USBD_LL_DataOutStage>
}
 801723e:	bf00      	nop
 8017240:	3708      	adds	r7, #8
 8017242:	46bd      	mov	sp, r7
 8017244:	bd80      	pop	{r7, pc}

08017246 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017246:	b580      	push	{r7, lr}
 8017248:	b082      	sub	sp, #8
 801724a:	af00      	add	r7, sp, #0
 801724c:	6078      	str	r0, [r7, #4]
 801724e:	460b      	mov	r3, r1
 8017250:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017258:	78fa      	ldrb	r2, [r7, #3]
 801725a:	6879      	ldr	r1, [r7, #4]
 801725c:	4613      	mov	r3, r2
 801725e:	00db      	lsls	r3, r3, #3
 8017260:	4413      	add	r3, r2
 8017262:	009b      	lsls	r3, r3, #2
 8017264:	440b      	add	r3, r1
 8017266:	3348      	adds	r3, #72	; 0x48
 8017268:	681a      	ldr	r2, [r3, #0]
 801726a:	78fb      	ldrb	r3, [r7, #3]
 801726c:	4619      	mov	r1, r3
 801726e:	f7fe fb96 	bl	801599e <USBD_LL_DataInStage>
}
 8017272:	bf00      	nop
 8017274:	3708      	adds	r7, #8
 8017276:	46bd      	mov	sp, r7
 8017278:	bd80      	pop	{r7, pc}

0801727a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801727a:	b580      	push	{r7, lr}
 801727c:	b082      	sub	sp, #8
 801727e:	af00      	add	r7, sp, #0
 8017280:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017288:	4618      	mov	r0, r3
 801728a:	f7fe fcd0 	bl	8015c2e <USBD_LL_SOF>
}
 801728e:	bf00      	nop
 8017290:	3708      	adds	r7, #8
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}

08017296 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017296:	b580      	push	{r7, lr}
 8017298:	b084      	sub	sp, #16
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801729e:	2301      	movs	r3, #1
 80172a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	691b      	ldr	r3, [r3, #16]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d102      	bne.n	80172b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80172aa:	2300      	movs	r3, #0
 80172ac:	73fb      	strb	r3, [r7, #15]
 80172ae:	e008      	b.n	80172c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	691b      	ldr	r3, [r3, #16]
 80172b4:	2b02      	cmp	r3, #2
 80172b6:	d102      	bne.n	80172be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80172b8:	2301      	movs	r3, #1
 80172ba:	73fb      	strb	r3, [r7, #15]
 80172bc:	e001      	b.n	80172c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80172be:	f7eb fcb1 	bl	8002c24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172c8:	7bfa      	ldrb	r2, [r7, #15]
 80172ca:	4611      	mov	r1, r2
 80172cc:	4618      	mov	r0, r3
 80172ce:	f7fe fc6a 	bl	8015ba6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172d8:	4618      	mov	r0, r3
 80172da:	f7fe fc12 	bl	8015b02 <USBD_LL_Reset>
}
 80172de:	bf00      	nop
 80172e0:	3710      	adds	r7, #16
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
	...

080172e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b082      	sub	sp, #8
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7fe fc65 	bl	8015bc6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	687a      	ldr	r2, [r7, #4]
 8017308:	6812      	ldr	r2, [r2, #0]
 801730a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801730e:	f043 0301 	orr.w	r3, r3, #1
 8017312:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6a1b      	ldr	r3, [r3, #32]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d005      	beq.n	8017328 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801731c:	4b04      	ldr	r3, [pc, #16]	; (8017330 <HAL_PCD_SuspendCallback+0x48>)
 801731e:	691b      	ldr	r3, [r3, #16]
 8017320:	4a03      	ldr	r2, [pc, #12]	; (8017330 <HAL_PCD_SuspendCallback+0x48>)
 8017322:	f043 0306 	orr.w	r3, r3, #6
 8017326:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017328:	bf00      	nop
 801732a:	3708      	adds	r7, #8
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	e000ed00 	.word	0xe000ed00

08017334 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017342:	4618      	mov	r0, r3
 8017344:	f7fe fc5b 	bl	8015bfe <USBD_LL_Resume>
}
 8017348:	bf00      	nop
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	460b      	mov	r3, r1
 801735a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017362:	78fa      	ldrb	r2, [r7, #3]
 8017364:	4611      	mov	r1, r2
 8017366:	4618      	mov	r0, r3
 8017368:	f7fe fcb3 	bl	8015cd2 <USBD_LL_IsoOUTIncomplete>
}
 801736c:	bf00      	nop
 801736e:	3708      	adds	r7, #8
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}

08017374 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b082      	sub	sp, #8
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	460b      	mov	r3, r1
 801737e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017386:	78fa      	ldrb	r2, [r7, #3]
 8017388:	4611      	mov	r1, r2
 801738a:	4618      	mov	r0, r3
 801738c:	f7fe fc6f 	bl	8015c6e <USBD_LL_IsoINIncomplete>
}
 8017390:	bf00      	nop
 8017392:	3708      	adds	r7, #8
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7fe fcc5 	bl	8015d36 <USBD_LL_DevConnected>
}
 80173ac:	bf00      	nop
 80173ae:	3708      	adds	r7, #8
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7fe fcc2 	bl	8015d4c <USBD_LL_DevDisconnected>
}
 80173c8:	bf00      	nop
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	781b      	ldrb	r3, [r3, #0]
 80173dc:	2b01      	cmp	r3, #1
 80173de:	d140      	bne.n	8017462 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80173e0:	4a22      	ldr	r2, [pc, #136]	; (801746c <USBD_LL_Init+0x9c>)
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	4a20      	ldr	r2, [pc, #128]	; (801746c <USBD_LL_Init+0x9c>)
 80173ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80173f0:	4b1e      	ldr	r3, [pc, #120]	; (801746c <USBD_LL_Init+0x9c>)
 80173f2:	4a1f      	ldr	r2, [pc, #124]	; (8017470 <USBD_LL_Init+0xa0>)
 80173f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80173f6:	4b1d      	ldr	r3, [pc, #116]	; (801746c <USBD_LL_Init+0x9c>)
 80173f8:	2209      	movs	r2, #9
 80173fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80173fc:	4b1b      	ldr	r3, [pc, #108]	; (801746c <USBD_LL_Init+0x9c>)
 80173fe:	2202      	movs	r2, #2
 8017400:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017402:	4b1a      	ldr	r3, [pc, #104]	; (801746c <USBD_LL_Init+0x9c>)
 8017404:	2200      	movs	r2, #0
 8017406:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017408:	4b18      	ldr	r3, [pc, #96]	; (801746c <USBD_LL_Init+0x9c>)
 801740a:	2202      	movs	r2, #2
 801740c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801740e:	4b17      	ldr	r3, [pc, #92]	; (801746c <USBD_LL_Init+0x9c>)
 8017410:	2200      	movs	r2, #0
 8017412:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017414:	4b15      	ldr	r3, [pc, #84]	; (801746c <USBD_LL_Init+0x9c>)
 8017416:	2200      	movs	r2, #0
 8017418:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801741a:	4b14      	ldr	r3, [pc, #80]	; (801746c <USBD_LL_Init+0x9c>)
 801741c:	2200      	movs	r2, #0
 801741e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017420:	4b12      	ldr	r3, [pc, #72]	; (801746c <USBD_LL_Init+0x9c>)
 8017422:	2200      	movs	r2, #0
 8017424:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017426:	4b11      	ldr	r3, [pc, #68]	; (801746c <USBD_LL_Init+0x9c>)
 8017428:	2200      	movs	r2, #0
 801742a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801742c:	4b0f      	ldr	r3, [pc, #60]	; (801746c <USBD_LL_Init+0x9c>)
 801742e:	2200      	movs	r2, #0
 8017430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017432:	480e      	ldr	r0, [pc, #56]	; (801746c <USBD_LL_Init+0x9c>)
 8017434:	f7f1 f8db 	bl	80085ee <HAL_PCD_Init>
 8017438:	4603      	mov	r3, r0
 801743a:	2b00      	cmp	r3, #0
 801743c:	d001      	beq.n	8017442 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801743e:	f7eb fbf1 	bl	8002c24 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017446:	4809      	ldr	r0, [pc, #36]	; (801746c <USBD_LL_Init+0x9c>)
 8017448:	f7f2 fb49 	bl	8009ade <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801744c:	2280      	movs	r2, #128	; 0x80
 801744e:	2100      	movs	r1, #0
 8017450:	4806      	ldr	r0, [pc, #24]	; (801746c <USBD_LL_Init+0x9c>)
 8017452:	f7f2 fafd 	bl	8009a50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017456:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801745a:	2101      	movs	r1, #1
 801745c:	4803      	ldr	r0, [pc, #12]	; (801746c <USBD_LL_Init+0x9c>)
 801745e:	f7f2 faf7 	bl	8009a50 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017462:	2300      	movs	r3, #0
}
 8017464:	4618      	mov	r0, r3
 8017466:	3708      	adds	r7, #8
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}
 801746c:	24002bec 	.word	0x24002bec
 8017470:	40040000 	.word	0x40040000

08017474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b084      	sub	sp, #16
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801747c:	2300      	movs	r3, #0
 801747e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017480:	2300      	movs	r3, #0
 8017482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801748a:	4618      	mov	r0, r3
 801748c:	f7f1 f9d3 	bl	8008836 <HAL_PCD_Start>
 8017490:	4603      	mov	r3, r0
 8017492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017494:	7bfb      	ldrb	r3, [r7, #15]
 8017496:	4618      	mov	r0, r3
 8017498:	f000 f942 	bl	8017720 <USBD_Get_USB_Status>
 801749c:	4603      	mov	r3, r0
 801749e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	3710      	adds	r7, #16
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}

080174aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80174aa:	b580      	push	{r7, lr}
 80174ac:	b084      	sub	sp, #16
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	6078      	str	r0, [r7, #4]
 80174b2:	4608      	mov	r0, r1
 80174b4:	4611      	mov	r1, r2
 80174b6:	461a      	mov	r2, r3
 80174b8:	4603      	mov	r3, r0
 80174ba:	70fb      	strb	r3, [r7, #3]
 80174bc:	460b      	mov	r3, r1
 80174be:	70bb      	strb	r3, [r7, #2]
 80174c0:	4613      	mov	r3, r2
 80174c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174c4:	2300      	movs	r3, #0
 80174c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174c8:	2300      	movs	r3, #0
 80174ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80174d2:	78bb      	ldrb	r3, [r7, #2]
 80174d4:	883a      	ldrh	r2, [r7, #0]
 80174d6:	78f9      	ldrb	r1, [r7, #3]
 80174d8:	f7f1 fed3 	bl	8009282 <HAL_PCD_EP_Open>
 80174dc:	4603      	mov	r3, r0
 80174de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174e0:	7bfb      	ldrb	r3, [r7, #15]
 80174e2:	4618      	mov	r0, r3
 80174e4:	f000 f91c 	bl	8017720 <USBD_Get_USB_Status>
 80174e8:	4603      	mov	r3, r0
 80174ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	3710      	adds	r7, #16
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}

080174f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174f6:	b580      	push	{r7, lr}
 80174f8:	b084      	sub	sp, #16
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	6078      	str	r0, [r7, #4]
 80174fe:	460b      	mov	r3, r1
 8017500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017502:	2300      	movs	r3, #0
 8017504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017506:	2300      	movs	r3, #0
 8017508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017510:	78fa      	ldrb	r2, [r7, #3]
 8017512:	4611      	mov	r1, r2
 8017514:	4618      	mov	r0, r3
 8017516:	f7f1 ff1c 	bl	8009352 <HAL_PCD_EP_Close>
 801751a:	4603      	mov	r3, r0
 801751c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801751e:	7bfb      	ldrb	r3, [r7, #15]
 8017520:	4618      	mov	r0, r3
 8017522:	f000 f8fd 	bl	8017720 <USBD_Get_USB_Status>
 8017526:	4603      	mov	r3, r0
 8017528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801752a:	7bbb      	ldrb	r3, [r7, #14]
}
 801752c:	4618      	mov	r0, r3
 801752e:	3710      	adds	r7, #16
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	460b      	mov	r3, r1
 801753e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017540:	2300      	movs	r3, #0
 8017542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017544:	2300      	movs	r3, #0
 8017546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801754e:	78fa      	ldrb	r2, [r7, #3]
 8017550:	4611      	mov	r1, r2
 8017552:	4618      	mov	r0, r3
 8017554:	f7f1 ffd6 	bl	8009504 <HAL_PCD_EP_SetStall>
 8017558:	4603      	mov	r3, r0
 801755a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801755c:	7bfb      	ldrb	r3, [r7, #15]
 801755e:	4618      	mov	r0, r3
 8017560:	f000 f8de 	bl	8017720 <USBD_Get_USB_Status>
 8017564:	4603      	mov	r3, r0
 8017566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017568:	7bbb      	ldrb	r3, [r7, #14]
}
 801756a:	4618      	mov	r0, r3
 801756c:	3710      	adds	r7, #16
 801756e:	46bd      	mov	sp, r7
 8017570:	bd80      	pop	{r7, pc}

08017572 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017572:	b580      	push	{r7, lr}
 8017574:	b084      	sub	sp, #16
 8017576:	af00      	add	r7, sp, #0
 8017578:	6078      	str	r0, [r7, #4]
 801757a:	460b      	mov	r3, r1
 801757c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801757e:	2300      	movs	r3, #0
 8017580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017582:	2300      	movs	r3, #0
 8017584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801758c:	78fa      	ldrb	r2, [r7, #3]
 801758e:	4611      	mov	r1, r2
 8017590:	4618      	mov	r0, r3
 8017592:	f7f2 f81b 	bl	80095cc <HAL_PCD_EP_ClrStall>
 8017596:	4603      	mov	r3, r0
 8017598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801759a:	7bfb      	ldrb	r3, [r7, #15]
 801759c:	4618      	mov	r0, r3
 801759e:	f000 f8bf 	bl	8017720 <USBD_Get_USB_Status>
 80175a2:	4603      	mov	r3, r0
 80175a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3710      	adds	r7, #16
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175b0:	b480      	push	{r7}
 80175b2:	b085      	sub	sp, #20
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
 80175b8:	460b      	mov	r3, r1
 80175ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80175c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80175c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	da0b      	bge.n	80175e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80175cc:	78fb      	ldrb	r3, [r7, #3]
 80175ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80175d2:	68f9      	ldr	r1, [r7, #12]
 80175d4:	4613      	mov	r3, r2
 80175d6:	00db      	lsls	r3, r3, #3
 80175d8:	4413      	add	r3, r2
 80175da:	009b      	lsls	r3, r3, #2
 80175dc:	440b      	add	r3, r1
 80175de:	333e      	adds	r3, #62	; 0x3e
 80175e0:	781b      	ldrb	r3, [r3, #0]
 80175e2:	e00b      	b.n	80175fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80175e4:	78fb      	ldrb	r3, [r7, #3]
 80175e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80175ea:	68f9      	ldr	r1, [r7, #12]
 80175ec:	4613      	mov	r3, r2
 80175ee:	00db      	lsls	r3, r3, #3
 80175f0:	4413      	add	r3, r2
 80175f2:	009b      	lsls	r3, r3, #2
 80175f4:	440b      	add	r3, r1
 80175f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80175fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3714      	adds	r7, #20
 8017600:	46bd      	mov	sp, r7
 8017602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017606:	4770      	bx	lr

08017608 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b084      	sub	sp, #16
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
 8017610:	460b      	mov	r3, r1
 8017612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017614:	2300      	movs	r3, #0
 8017616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017618:	2300      	movs	r3, #0
 801761a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017622:	78fa      	ldrb	r2, [r7, #3]
 8017624:	4611      	mov	r1, r2
 8017626:	4618      	mov	r0, r3
 8017628:	f7f1 fe06 	bl	8009238 <HAL_PCD_SetAddress>
 801762c:	4603      	mov	r3, r0
 801762e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017630:	7bfb      	ldrb	r3, [r7, #15]
 8017632:	4618      	mov	r0, r3
 8017634:	f000 f874 	bl	8017720 <USBD_Get_USB_Status>
 8017638:	4603      	mov	r3, r0
 801763a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801763c:	7bbb      	ldrb	r3, [r7, #14]
}
 801763e:	4618      	mov	r0, r3
 8017640:	3710      	adds	r7, #16
 8017642:	46bd      	mov	sp, r7
 8017644:	bd80      	pop	{r7, pc}

08017646 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017646:	b580      	push	{r7, lr}
 8017648:	b086      	sub	sp, #24
 801764a:	af00      	add	r7, sp, #0
 801764c:	60f8      	str	r0, [r7, #12]
 801764e:	607a      	str	r2, [r7, #4]
 8017650:	603b      	str	r3, [r7, #0]
 8017652:	460b      	mov	r3, r1
 8017654:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017656:	2300      	movs	r3, #0
 8017658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801765a:	2300      	movs	r3, #0
 801765c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017664:	7af9      	ldrb	r1, [r7, #11]
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	687a      	ldr	r2, [r7, #4]
 801766a:	f7f1 ff10 	bl	800948e <HAL_PCD_EP_Transmit>
 801766e:	4603      	mov	r3, r0
 8017670:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017672:	7dfb      	ldrb	r3, [r7, #23]
 8017674:	4618      	mov	r0, r3
 8017676:	f000 f853 	bl	8017720 <USBD_Get_USB_Status>
 801767a:	4603      	mov	r3, r0
 801767c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801767e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017680:	4618      	mov	r0, r3
 8017682:	3718      	adds	r7, #24
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}

08017688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b086      	sub	sp, #24
 801768c:	af00      	add	r7, sp, #0
 801768e:	60f8      	str	r0, [r7, #12]
 8017690:	607a      	str	r2, [r7, #4]
 8017692:	603b      	str	r3, [r7, #0]
 8017694:	460b      	mov	r3, r1
 8017696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017698:	2300      	movs	r3, #0
 801769a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801769c:	2300      	movs	r3, #0
 801769e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80176a6:	7af9      	ldrb	r1, [r7, #11]
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	f7f1 fe9b 	bl	80093e6 <HAL_PCD_EP_Receive>
 80176b0:	4603      	mov	r3, r0
 80176b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176b4:	7dfb      	ldrb	r3, [r7, #23]
 80176b6:	4618      	mov	r0, r3
 80176b8:	f000 f832 	bl	8017720 <USBD_Get_USB_Status>
 80176bc:	4603      	mov	r3, r0
 80176be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80176c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3718      	adds	r7, #24
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}

080176ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176ca:	b580      	push	{r7, lr}
 80176cc:	b082      	sub	sp, #8
 80176ce:	af00      	add	r7, sp, #0
 80176d0:	6078      	str	r0, [r7, #4]
 80176d2:	460b      	mov	r3, r1
 80176d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80176dc:	78fa      	ldrb	r2, [r7, #3]
 80176de:	4611      	mov	r1, r2
 80176e0:	4618      	mov	r0, r3
 80176e2:	f7f1 febc 	bl	800945e <HAL_PCD_EP_GetRxCount>
 80176e6:	4603      	mov	r3, r0
}
 80176e8:	4618      	mov	r0, r3
 80176ea:	3708      	adds	r7, #8
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}

080176f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80176f0:	b480      	push	{r7}
 80176f2:	b083      	sub	sp, #12
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80176f8:	4b03      	ldr	r3, [pc, #12]	; (8017708 <USBD_static_malloc+0x18>)
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	370c      	adds	r7, #12
 80176fe:	46bd      	mov	sp, r7
 8017700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017704:	4770      	bx	lr
 8017706:	bf00      	nop
 8017708:	240030f8 	.word	0x240030f8

0801770c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801770c:	b480      	push	{r7}
 801770e:	b083      	sub	sp, #12
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017714:	bf00      	nop
 8017716:	370c      	adds	r7, #12
 8017718:	46bd      	mov	sp, r7
 801771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771e:	4770      	bx	lr

08017720 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017720:	b480      	push	{r7}
 8017722:	b085      	sub	sp, #20
 8017724:	af00      	add	r7, sp, #0
 8017726:	4603      	mov	r3, r0
 8017728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801772a:	2300      	movs	r3, #0
 801772c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801772e:	79fb      	ldrb	r3, [r7, #7]
 8017730:	2b03      	cmp	r3, #3
 8017732:	d817      	bhi.n	8017764 <USBD_Get_USB_Status+0x44>
 8017734:	a201      	add	r2, pc, #4	; (adr r2, 801773c <USBD_Get_USB_Status+0x1c>)
 8017736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801773a:	bf00      	nop
 801773c:	0801774d 	.word	0x0801774d
 8017740:	08017753 	.word	0x08017753
 8017744:	08017759 	.word	0x08017759
 8017748:	0801775f 	.word	0x0801775f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801774c:	2300      	movs	r3, #0
 801774e:	73fb      	strb	r3, [r7, #15]
    break;
 8017750:	e00b      	b.n	801776a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017752:	2303      	movs	r3, #3
 8017754:	73fb      	strb	r3, [r7, #15]
    break;
 8017756:	e008      	b.n	801776a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017758:	2301      	movs	r3, #1
 801775a:	73fb      	strb	r3, [r7, #15]
    break;
 801775c:	e005      	b.n	801776a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801775e:	2303      	movs	r3, #3
 8017760:	73fb      	strb	r3, [r7, #15]
    break;
 8017762:	e002      	b.n	801776a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017764:	2303      	movs	r3, #3
 8017766:	73fb      	strb	r3, [r7, #15]
    break;
 8017768:	bf00      	nop
  }
  return usb_status;
 801776a:	7bfb      	ldrb	r3, [r7, #15]
}
 801776c:	4618      	mov	r0, r3
 801776e:	3714      	adds	r7, #20
 8017770:	46bd      	mov	sp, r7
 8017772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017776:	4770      	bx	lr

08017778 <siprintf>:
 8017778:	b40e      	push	{r1, r2, r3}
 801777a:	b500      	push	{lr}
 801777c:	b09c      	sub	sp, #112	; 0x70
 801777e:	ab1d      	add	r3, sp, #116	; 0x74
 8017780:	9002      	str	r0, [sp, #8]
 8017782:	9006      	str	r0, [sp, #24]
 8017784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017788:	4809      	ldr	r0, [pc, #36]	; (80177b0 <siprintf+0x38>)
 801778a:	9107      	str	r1, [sp, #28]
 801778c:	9104      	str	r1, [sp, #16]
 801778e:	4909      	ldr	r1, [pc, #36]	; (80177b4 <siprintf+0x3c>)
 8017790:	f853 2b04 	ldr.w	r2, [r3], #4
 8017794:	9105      	str	r1, [sp, #20]
 8017796:	6800      	ldr	r0, [r0, #0]
 8017798:	9301      	str	r3, [sp, #4]
 801779a:	a902      	add	r1, sp, #8
 801779c:	f000 f9d6 	bl	8017b4c <_svfiprintf_r>
 80177a0:	9b02      	ldr	r3, [sp, #8]
 80177a2:	2200      	movs	r2, #0
 80177a4:	701a      	strb	r2, [r3, #0]
 80177a6:	b01c      	add	sp, #112	; 0x70
 80177a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80177ac:	b003      	add	sp, #12
 80177ae:	4770      	bx	lr
 80177b0:	24000150 	.word	0x24000150
 80177b4:	ffff0208 	.word	0xffff0208

080177b8 <siscanf>:
 80177b8:	b40e      	push	{r1, r2, r3}
 80177ba:	b510      	push	{r4, lr}
 80177bc:	b09f      	sub	sp, #124	; 0x7c
 80177be:	ac21      	add	r4, sp, #132	; 0x84
 80177c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80177c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80177c8:	9201      	str	r2, [sp, #4]
 80177ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 80177ce:	9004      	str	r0, [sp, #16]
 80177d0:	9008      	str	r0, [sp, #32]
 80177d2:	f7e8 fda7 	bl	8000324 <strlen>
 80177d6:	4b0c      	ldr	r3, [pc, #48]	; (8017808 <siscanf+0x50>)
 80177d8:	9005      	str	r0, [sp, #20]
 80177da:	9009      	str	r0, [sp, #36]	; 0x24
 80177dc:	930d      	str	r3, [sp, #52]	; 0x34
 80177de:	480b      	ldr	r0, [pc, #44]	; (801780c <siscanf+0x54>)
 80177e0:	9a01      	ldr	r2, [sp, #4]
 80177e2:	6800      	ldr	r0, [r0, #0]
 80177e4:	9403      	str	r4, [sp, #12]
 80177e6:	2300      	movs	r3, #0
 80177e8:	9311      	str	r3, [sp, #68]	; 0x44
 80177ea:	9316      	str	r3, [sp, #88]	; 0x58
 80177ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80177f4:	a904      	add	r1, sp, #16
 80177f6:	4623      	mov	r3, r4
 80177f8:	f000 fb00 	bl	8017dfc <__ssvfiscanf_r>
 80177fc:	b01f      	add	sp, #124	; 0x7c
 80177fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017802:	b003      	add	sp, #12
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop
 8017808:	08017811 	.word	0x08017811
 801780c:	24000150 	.word	0x24000150

08017810 <__seofread>:
 8017810:	2000      	movs	r0, #0
 8017812:	4770      	bx	lr

08017814 <memset>:
 8017814:	4402      	add	r2, r0
 8017816:	4603      	mov	r3, r0
 8017818:	4293      	cmp	r3, r2
 801781a:	d100      	bne.n	801781e <memset+0xa>
 801781c:	4770      	bx	lr
 801781e:	f803 1b01 	strb.w	r1, [r3], #1
 8017822:	e7f9      	b.n	8017818 <memset+0x4>

08017824 <__errno>:
 8017824:	4b01      	ldr	r3, [pc, #4]	; (801782c <__errno+0x8>)
 8017826:	6818      	ldr	r0, [r3, #0]
 8017828:	4770      	bx	lr
 801782a:	bf00      	nop
 801782c:	24000150 	.word	0x24000150

08017830 <__libc_init_array>:
 8017830:	b570      	push	{r4, r5, r6, lr}
 8017832:	4d0d      	ldr	r5, [pc, #52]	; (8017868 <__libc_init_array+0x38>)
 8017834:	4c0d      	ldr	r4, [pc, #52]	; (801786c <__libc_init_array+0x3c>)
 8017836:	1b64      	subs	r4, r4, r5
 8017838:	10a4      	asrs	r4, r4, #2
 801783a:	2600      	movs	r6, #0
 801783c:	42a6      	cmp	r6, r4
 801783e:	d109      	bne.n	8017854 <__libc_init_array+0x24>
 8017840:	4d0b      	ldr	r5, [pc, #44]	; (8017870 <__libc_init_array+0x40>)
 8017842:	4c0c      	ldr	r4, [pc, #48]	; (8017874 <__libc_init_array+0x44>)
 8017844:	f001 f8fe 	bl	8018a44 <_init>
 8017848:	1b64      	subs	r4, r4, r5
 801784a:	10a4      	asrs	r4, r4, #2
 801784c:	2600      	movs	r6, #0
 801784e:	42a6      	cmp	r6, r4
 8017850:	d105      	bne.n	801785e <__libc_init_array+0x2e>
 8017852:	bd70      	pop	{r4, r5, r6, pc}
 8017854:	f855 3b04 	ldr.w	r3, [r5], #4
 8017858:	4798      	blx	r3
 801785a:	3601      	adds	r6, #1
 801785c:	e7ee      	b.n	801783c <__libc_init_array+0xc>
 801785e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017862:	4798      	blx	r3
 8017864:	3601      	adds	r6, #1
 8017866:	e7f2      	b.n	801784e <__libc_init_array+0x1e>
 8017868:	08018e88 	.word	0x08018e88
 801786c:	08018e88 	.word	0x08018e88
 8017870:	08018e88 	.word	0x08018e88
 8017874:	08018e8c 	.word	0x08018e8c

08017878 <__retarget_lock_acquire_recursive>:
 8017878:	4770      	bx	lr

0801787a <__retarget_lock_release_recursive>:
 801787a:	4770      	bx	lr

0801787c <strcpy>:
 801787c:	4603      	mov	r3, r0
 801787e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017882:	f803 2b01 	strb.w	r2, [r3], #1
 8017886:	2a00      	cmp	r2, #0
 8017888:	d1f9      	bne.n	801787e <strcpy+0x2>
 801788a:	4770      	bx	lr

0801788c <memcpy>:
 801788c:	440a      	add	r2, r1
 801788e:	4291      	cmp	r1, r2
 8017890:	f100 33ff 	add.w	r3, r0, #4294967295
 8017894:	d100      	bne.n	8017898 <memcpy+0xc>
 8017896:	4770      	bx	lr
 8017898:	b510      	push	{r4, lr}
 801789a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801789e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178a2:	4291      	cmp	r1, r2
 80178a4:	d1f9      	bne.n	801789a <memcpy+0xe>
 80178a6:	bd10      	pop	{r4, pc}

080178a8 <_free_r>:
 80178a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178aa:	2900      	cmp	r1, #0
 80178ac:	d044      	beq.n	8017938 <_free_r+0x90>
 80178ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178b2:	9001      	str	r0, [sp, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	f1a1 0404 	sub.w	r4, r1, #4
 80178ba:	bfb8      	it	lt
 80178bc:	18e4      	addlt	r4, r4, r3
 80178be:	f000 f8df 	bl	8017a80 <__malloc_lock>
 80178c2:	4a1e      	ldr	r2, [pc, #120]	; (801793c <_free_r+0x94>)
 80178c4:	9801      	ldr	r0, [sp, #4]
 80178c6:	6813      	ldr	r3, [r2, #0]
 80178c8:	b933      	cbnz	r3, 80178d8 <_free_r+0x30>
 80178ca:	6063      	str	r3, [r4, #4]
 80178cc:	6014      	str	r4, [r2, #0]
 80178ce:	b003      	add	sp, #12
 80178d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178d4:	f000 b8da 	b.w	8017a8c <__malloc_unlock>
 80178d8:	42a3      	cmp	r3, r4
 80178da:	d908      	bls.n	80178ee <_free_r+0x46>
 80178dc:	6825      	ldr	r5, [r4, #0]
 80178de:	1961      	adds	r1, r4, r5
 80178e0:	428b      	cmp	r3, r1
 80178e2:	bf01      	itttt	eq
 80178e4:	6819      	ldreq	r1, [r3, #0]
 80178e6:	685b      	ldreq	r3, [r3, #4]
 80178e8:	1949      	addeq	r1, r1, r5
 80178ea:	6021      	streq	r1, [r4, #0]
 80178ec:	e7ed      	b.n	80178ca <_free_r+0x22>
 80178ee:	461a      	mov	r2, r3
 80178f0:	685b      	ldr	r3, [r3, #4]
 80178f2:	b10b      	cbz	r3, 80178f8 <_free_r+0x50>
 80178f4:	42a3      	cmp	r3, r4
 80178f6:	d9fa      	bls.n	80178ee <_free_r+0x46>
 80178f8:	6811      	ldr	r1, [r2, #0]
 80178fa:	1855      	adds	r5, r2, r1
 80178fc:	42a5      	cmp	r5, r4
 80178fe:	d10b      	bne.n	8017918 <_free_r+0x70>
 8017900:	6824      	ldr	r4, [r4, #0]
 8017902:	4421      	add	r1, r4
 8017904:	1854      	adds	r4, r2, r1
 8017906:	42a3      	cmp	r3, r4
 8017908:	6011      	str	r1, [r2, #0]
 801790a:	d1e0      	bne.n	80178ce <_free_r+0x26>
 801790c:	681c      	ldr	r4, [r3, #0]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	6053      	str	r3, [r2, #4]
 8017912:	440c      	add	r4, r1
 8017914:	6014      	str	r4, [r2, #0]
 8017916:	e7da      	b.n	80178ce <_free_r+0x26>
 8017918:	d902      	bls.n	8017920 <_free_r+0x78>
 801791a:	230c      	movs	r3, #12
 801791c:	6003      	str	r3, [r0, #0]
 801791e:	e7d6      	b.n	80178ce <_free_r+0x26>
 8017920:	6825      	ldr	r5, [r4, #0]
 8017922:	1961      	adds	r1, r4, r5
 8017924:	428b      	cmp	r3, r1
 8017926:	bf04      	itt	eq
 8017928:	6819      	ldreq	r1, [r3, #0]
 801792a:	685b      	ldreq	r3, [r3, #4]
 801792c:	6063      	str	r3, [r4, #4]
 801792e:	bf04      	itt	eq
 8017930:	1949      	addeq	r1, r1, r5
 8017932:	6021      	streq	r1, [r4, #0]
 8017934:	6054      	str	r4, [r2, #4]
 8017936:	e7ca      	b.n	80178ce <_free_r+0x26>
 8017938:	b003      	add	sp, #12
 801793a:	bd30      	pop	{r4, r5, pc}
 801793c:	24003458 	.word	0x24003458

08017940 <sbrk_aligned>:
 8017940:	b570      	push	{r4, r5, r6, lr}
 8017942:	4e0e      	ldr	r6, [pc, #56]	; (801797c <sbrk_aligned+0x3c>)
 8017944:	460c      	mov	r4, r1
 8017946:	6831      	ldr	r1, [r6, #0]
 8017948:	4605      	mov	r5, r0
 801794a:	b911      	cbnz	r1, 8017952 <sbrk_aligned+0x12>
 801794c:	f000 ff3a 	bl	80187c4 <_sbrk_r>
 8017950:	6030      	str	r0, [r6, #0]
 8017952:	4621      	mov	r1, r4
 8017954:	4628      	mov	r0, r5
 8017956:	f000 ff35 	bl	80187c4 <_sbrk_r>
 801795a:	1c43      	adds	r3, r0, #1
 801795c:	d00a      	beq.n	8017974 <sbrk_aligned+0x34>
 801795e:	1cc4      	adds	r4, r0, #3
 8017960:	f024 0403 	bic.w	r4, r4, #3
 8017964:	42a0      	cmp	r0, r4
 8017966:	d007      	beq.n	8017978 <sbrk_aligned+0x38>
 8017968:	1a21      	subs	r1, r4, r0
 801796a:	4628      	mov	r0, r5
 801796c:	f000 ff2a 	bl	80187c4 <_sbrk_r>
 8017970:	3001      	adds	r0, #1
 8017972:	d101      	bne.n	8017978 <sbrk_aligned+0x38>
 8017974:	f04f 34ff 	mov.w	r4, #4294967295
 8017978:	4620      	mov	r0, r4
 801797a:	bd70      	pop	{r4, r5, r6, pc}
 801797c:	2400345c 	.word	0x2400345c

08017980 <_malloc_r>:
 8017980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017984:	1ccd      	adds	r5, r1, #3
 8017986:	f025 0503 	bic.w	r5, r5, #3
 801798a:	3508      	adds	r5, #8
 801798c:	2d0c      	cmp	r5, #12
 801798e:	bf38      	it	cc
 8017990:	250c      	movcc	r5, #12
 8017992:	2d00      	cmp	r5, #0
 8017994:	4607      	mov	r7, r0
 8017996:	db01      	blt.n	801799c <_malloc_r+0x1c>
 8017998:	42a9      	cmp	r1, r5
 801799a:	d905      	bls.n	80179a8 <_malloc_r+0x28>
 801799c:	230c      	movs	r3, #12
 801799e:	603b      	str	r3, [r7, #0]
 80179a0:	2600      	movs	r6, #0
 80179a2:	4630      	mov	r0, r6
 80179a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017a7c <_malloc_r+0xfc>
 80179ac:	f000 f868 	bl	8017a80 <__malloc_lock>
 80179b0:	f8d8 3000 	ldr.w	r3, [r8]
 80179b4:	461c      	mov	r4, r3
 80179b6:	bb5c      	cbnz	r4, 8017a10 <_malloc_r+0x90>
 80179b8:	4629      	mov	r1, r5
 80179ba:	4638      	mov	r0, r7
 80179bc:	f7ff ffc0 	bl	8017940 <sbrk_aligned>
 80179c0:	1c43      	adds	r3, r0, #1
 80179c2:	4604      	mov	r4, r0
 80179c4:	d155      	bne.n	8017a72 <_malloc_r+0xf2>
 80179c6:	f8d8 4000 	ldr.w	r4, [r8]
 80179ca:	4626      	mov	r6, r4
 80179cc:	2e00      	cmp	r6, #0
 80179ce:	d145      	bne.n	8017a5c <_malloc_r+0xdc>
 80179d0:	2c00      	cmp	r4, #0
 80179d2:	d048      	beq.n	8017a66 <_malloc_r+0xe6>
 80179d4:	6823      	ldr	r3, [r4, #0]
 80179d6:	4631      	mov	r1, r6
 80179d8:	4638      	mov	r0, r7
 80179da:	eb04 0903 	add.w	r9, r4, r3
 80179de:	f000 fef1 	bl	80187c4 <_sbrk_r>
 80179e2:	4581      	cmp	r9, r0
 80179e4:	d13f      	bne.n	8017a66 <_malloc_r+0xe6>
 80179e6:	6821      	ldr	r1, [r4, #0]
 80179e8:	1a6d      	subs	r5, r5, r1
 80179ea:	4629      	mov	r1, r5
 80179ec:	4638      	mov	r0, r7
 80179ee:	f7ff ffa7 	bl	8017940 <sbrk_aligned>
 80179f2:	3001      	adds	r0, #1
 80179f4:	d037      	beq.n	8017a66 <_malloc_r+0xe6>
 80179f6:	6823      	ldr	r3, [r4, #0]
 80179f8:	442b      	add	r3, r5
 80179fa:	6023      	str	r3, [r4, #0]
 80179fc:	f8d8 3000 	ldr.w	r3, [r8]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d038      	beq.n	8017a76 <_malloc_r+0xf6>
 8017a04:	685a      	ldr	r2, [r3, #4]
 8017a06:	42a2      	cmp	r2, r4
 8017a08:	d12b      	bne.n	8017a62 <_malloc_r+0xe2>
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	605a      	str	r2, [r3, #4]
 8017a0e:	e00f      	b.n	8017a30 <_malloc_r+0xb0>
 8017a10:	6822      	ldr	r2, [r4, #0]
 8017a12:	1b52      	subs	r2, r2, r5
 8017a14:	d41f      	bmi.n	8017a56 <_malloc_r+0xd6>
 8017a16:	2a0b      	cmp	r2, #11
 8017a18:	d917      	bls.n	8017a4a <_malloc_r+0xca>
 8017a1a:	1961      	adds	r1, r4, r5
 8017a1c:	42a3      	cmp	r3, r4
 8017a1e:	6025      	str	r5, [r4, #0]
 8017a20:	bf18      	it	ne
 8017a22:	6059      	strne	r1, [r3, #4]
 8017a24:	6863      	ldr	r3, [r4, #4]
 8017a26:	bf08      	it	eq
 8017a28:	f8c8 1000 	streq.w	r1, [r8]
 8017a2c:	5162      	str	r2, [r4, r5]
 8017a2e:	604b      	str	r3, [r1, #4]
 8017a30:	4638      	mov	r0, r7
 8017a32:	f104 060b 	add.w	r6, r4, #11
 8017a36:	f000 f829 	bl	8017a8c <__malloc_unlock>
 8017a3a:	f026 0607 	bic.w	r6, r6, #7
 8017a3e:	1d23      	adds	r3, r4, #4
 8017a40:	1af2      	subs	r2, r6, r3
 8017a42:	d0ae      	beq.n	80179a2 <_malloc_r+0x22>
 8017a44:	1b9b      	subs	r3, r3, r6
 8017a46:	50a3      	str	r3, [r4, r2]
 8017a48:	e7ab      	b.n	80179a2 <_malloc_r+0x22>
 8017a4a:	42a3      	cmp	r3, r4
 8017a4c:	6862      	ldr	r2, [r4, #4]
 8017a4e:	d1dd      	bne.n	8017a0c <_malloc_r+0x8c>
 8017a50:	f8c8 2000 	str.w	r2, [r8]
 8017a54:	e7ec      	b.n	8017a30 <_malloc_r+0xb0>
 8017a56:	4623      	mov	r3, r4
 8017a58:	6864      	ldr	r4, [r4, #4]
 8017a5a:	e7ac      	b.n	80179b6 <_malloc_r+0x36>
 8017a5c:	4634      	mov	r4, r6
 8017a5e:	6876      	ldr	r6, [r6, #4]
 8017a60:	e7b4      	b.n	80179cc <_malloc_r+0x4c>
 8017a62:	4613      	mov	r3, r2
 8017a64:	e7cc      	b.n	8017a00 <_malloc_r+0x80>
 8017a66:	230c      	movs	r3, #12
 8017a68:	603b      	str	r3, [r7, #0]
 8017a6a:	4638      	mov	r0, r7
 8017a6c:	f000 f80e 	bl	8017a8c <__malloc_unlock>
 8017a70:	e797      	b.n	80179a2 <_malloc_r+0x22>
 8017a72:	6025      	str	r5, [r4, #0]
 8017a74:	e7dc      	b.n	8017a30 <_malloc_r+0xb0>
 8017a76:	605b      	str	r3, [r3, #4]
 8017a78:	deff      	udf	#255	; 0xff
 8017a7a:	bf00      	nop
 8017a7c:	24003458 	.word	0x24003458

08017a80 <__malloc_lock>:
 8017a80:	4801      	ldr	r0, [pc, #4]	; (8017a88 <__malloc_lock+0x8>)
 8017a82:	f7ff bef9 	b.w	8017878 <__retarget_lock_acquire_recursive>
 8017a86:	bf00      	nop
 8017a88:	24003454 	.word	0x24003454

08017a8c <__malloc_unlock>:
 8017a8c:	4801      	ldr	r0, [pc, #4]	; (8017a94 <__malloc_unlock+0x8>)
 8017a8e:	f7ff bef4 	b.w	801787a <__retarget_lock_release_recursive>
 8017a92:	bf00      	nop
 8017a94:	24003454 	.word	0x24003454

08017a98 <__ssputs_r>:
 8017a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a9c:	688e      	ldr	r6, [r1, #8]
 8017a9e:	461f      	mov	r7, r3
 8017aa0:	42be      	cmp	r6, r7
 8017aa2:	680b      	ldr	r3, [r1, #0]
 8017aa4:	4682      	mov	sl, r0
 8017aa6:	460c      	mov	r4, r1
 8017aa8:	4690      	mov	r8, r2
 8017aaa:	d82c      	bhi.n	8017b06 <__ssputs_r+0x6e>
 8017aac:	898a      	ldrh	r2, [r1, #12]
 8017aae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017ab2:	d026      	beq.n	8017b02 <__ssputs_r+0x6a>
 8017ab4:	6965      	ldr	r5, [r4, #20]
 8017ab6:	6909      	ldr	r1, [r1, #16]
 8017ab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017abc:	eba3 0901 	sub.w	r9, r3, r1
 8017ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017ac4:	1c7b      	adds	r3, r7, #1
 8017ac6:	444b      	add	r3, r9
 8017ac8:	106d      	asrs	r5, r5, #1
 8017aca:	429d      	cmp	r5, r3
 8017acc:	bf38      	it	cc
 8017ace:	461d      	movcc	r5, r3
 8017ad0:	0553      	lsls	r3, r2, #21
 8017ad2:	d527      	bpl.n	8017b24 <__ssputs_r+0x8c>
 8017ad4:	4629      	mov	r1, r5
 8017ad6:	f7ff ff53 	bl	8017980 <_malloc_r>
 8017ada:	4606      	mov	r6, r0
 8017adc:	b360      	cbz	r0, 8017b38 <__ssputs_r+0xa0>
 8017ade:	6921      	ldr	r1, [r4, #16]
 8017ae0:	464a      	mov	r2, r9
 8017ae2:	f7ff fed3 	bl	801788c <memcpy>
 8017ae6:	89a3      	ldrh	r3, [r4, #12]
 8017ae8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017af0:	81a3      	strh	r3, [r4, #12]
 8017af2:	6126      	str	r6, [r4, #16]
 8017af4:	6165      	str	r5, [r4, #20]
 8017af6:	444e      	add	r6, r9
 8017af8:	eba5 0509 	sub.w	r5, r5, r9
 8017afc:	6026      	str	r6, [r4, #0]
 8017afe:	60a5      	str	r5, [r4, #8]
 8017b00:	463e      	mov	r6, r7
 8017b02:	42be      	cmp	r6, r7
 8017b04:	d900      	bls.n	8017b08 <__ssputs_r+0x70>
 8017b06:	463e      	mov	r6, r7
 8017b08:	6820      	ldr	r0, [r4, #0]
 8017b0a:	4632      	mov	r2, r6
 8017b0c:	4641      	mov	r1, r8
 8017b0e:	f000 fe3e 	bl	801878e <memmove>
 8017b12:	68a3      	ldr	r3, [r4, #8]
 8017b14:	1b9b      	subs	r3, r3, r6
 8017b16:	60a3      	str	r3, [r4, #8]
 8017b18:	6823      	ldr	r3, [r4, #0]
 8017b1a:	4433      	add	r3, r6
 8017b1c:	6023      	str	r3, [r4, #0]
 8017b1e:	2000      	movs	r0, #0
 8017b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b24:	462a      	mov	r2, r5
 8017b26:	f000 fe5d 	bl	80187e4 <_realloc_r>
 8017b2a:	4606      	mov	r6, r0
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	d1e0      	bne.n	8017af2 <__ssputs_r+0x5a>
 8017b30:	6921      	ldr	r1, [r4, #16]
 8017b32:	4650      	mov	r0, sl
 8017b34:	f7ff feb8 	bl	80178a8 <_free_r>
 8017b38:	230c      	movs	r3, #12
 8017b3a:	f8ca 3000 	str.w	r3, [sl]
 8017b3e:	89a3      	ldrh	r3, [r4, #12]
 8017b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b44:	81a3      	strh	r3, [r4, #12]
 8017b46:	f04f 30ff 	mov.w	r0, #4294967295
 8017b4a:	e7e9      	b.n	8017b20 <__ssputs_r+0x88>

08017b4c <_svfiprintf_r>:
 8017b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b50:	4698      	mov	r8, r3
 8017b52:	898b      	ldrh	r3, [r1, #12]
 8017b54:	061b      	lsls	r3, r3, #24
 8017b56:	b09d      	sub	sp, #116	; 0x74
 8017b58:	4607      	mov	r7, r0
 8017b5a:	460d      	mov	r5, r1
 8017b5c:	4614      	mov	r4, r2
 8017b5e:	d50e      	bpl.n	8017b7e <_svfiprintf_r+0x32>
 8017b60:	690b      	ldr	r3, [r1, #16]
 8017b62:	b963      	cbnz	r3, 8017b7e <_svfiprintf_r+0x32>
 8017b64:	2140      	movs	r1, #64	; 0x40
 8017b66:	f7ff ff0b 	bl	8017980 <_malloc_r>
 8017b6a:	6028      	str	r0, [r5, #0]
 8017b6c:	6128      	str	r0, [r5, #16]
 8017b6e:	b920      	cbnz	r0, 8017b7a <_svfiprintf_r+0x2e>
 8017b70:	230c      	movs	r3, #12
 8017b72:	603b      	str	r3, [r7, #0]
 8017b74:	f04f 30ff 	mov.w	r0, #4294967295
 8017b78:	e0d0      	b.n	8017d1c <_svfiprintf_r+0x1d0>
 8017b7a:	2340      	movs	r3, #64	; 0x40
 8017b7c:	616b      	str	r3, [r5, #20]
 8017b7e:	2300      	movs	r3, #0
 8017b80:	9309      	str	r3, [sp, #36]	; 0x24
 8017b82:	2320      	movs	r3, #32
 8017b84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b8c:	2330      	movs	r3, #48	; 0x30
 8017b8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017d34 <_svfiprintf_r+0x1e8>
 8017b92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b96:	f04f 0901 	mov.w	r9, #1
 8017b9a:	4623      	mov	r3, r4
 8017b9c:	469a      	mov	sl, r3
 8017b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ba2:	b10a      	cbz	r2, 8017ba8 <_svfiprintf_r+0x5c>
 8017ba4:	2a25      	cmp	r2, #37	; 0x25
 8017ba6:	d1f9      	bne.n	8017b9c <_svfiprintf_r+0x50>
 8017ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8017bac:	d00b      	beq.n	8017bc6 <_svfiprintf_r+0x7a>
 8017bae:	465b      	mov	r3, fp
 8017bb0:	4622      	mov	r2, r4
 8017bb2:	4629      	mov	r1, r5
 8017bb4:	4638      	mov	r0, r7
 8017bb6:	f7ff ff6f 	bl	8017a98 <__ssputs_r>
 8017bba:	3001      	adds	r0, #1
 8017bbc:	f000 80a9 	beq.w	8017d12 <_svfiprintf_r+0x1c6>
 8017bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bc2:	445a      	add	r2, fp
 8017bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8017bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	f000 80a1 	beq.w	8017d12 <_svfiprintf_r+0x1c6>
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8017bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bda:	f10a 0a01 	add.w	sl, sl, #1
 8017bde:	9304      	str	r3, [sp, #16]
 8017be0:	9307      	str	r3, [sp, #28]
 8017be2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017be6:	931a      	str	r3, [sp, #104]	; 0x68
 8017be8:	4654      	mov	r4, sl
 8017bea:	2205      	movs	r2, #5
 8017bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bf0:	4850      	ldr	r0, [pc, #320]	; (8017d34 <_svfiprintf_r+0x1e8>)
 8017bf2:	f7e8 fba5 	bl	8000340 <memchr>
 8017bf6:	9a04      	ldr	r2, [sp, #16]
 8017bf8:	b9d8      	cbnz	r0, 8017c32 <_svfiprintf_r+0xe6>
 8017bfa:	06d0      	lsls	r0, r2, #27
 8017bfc:	bf44      	itt	mi
 8017bfe:	2320      	movmi	r3, #32
 8017c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c04:	0711      	lsls	r1, r2, #28
 8017c06:	bf44      	itt	mi
 8017c08:	232b      	movmi	r3, #43	; 0x2b
 8017c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8017c12:	2b2a      	cmp	r3, #42	; 0x2a
 8017c14:	d015      	beq.n	8017c42 <_svfiprintf_r+0xf6>
 8017c16:	9a07      	ldr	r2, [sp, #28]
 8017c18:	4654      	mov	r4, sl
 8017c1a:	2000      	movs	r0, #0
 8017c1c:	f04f 0c0a 	mov.w	ip, #10
 8017c20:	4621      	mov	r1, r4
 8017c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c26:	3b30      	subs	r3, #48	; 0x30
 8017c28:	2b09      	cmp	r3, #9
 8017c2a:	d94d      	bls.n	8017cc8 <_svfiprintf_r+0x17c>
 8017c2c:	b1b0      	cbz	r0, 8017c5c <_svfiprintf_r+0x110>
 8017c2e:	9207      	str	r2, [sp, #28]
 8017c30:	e014      	b.n	8017c5c <_svfiprintf_r+0x110>
 8017c32:	eba0 0308 	sub.w	r3, r0, r8
 8017c36:	fa09 f303 	lsl.w	r3, r9, r3
 8017c3a:	4313      	orrs	r3, r2
 8017c3c:	9304      	str	r3, [sp, #16]
 8017c3e:	46a2      	mov	sl, r4
 8017c40:	e7d2      	b.n	8017be8 <_svfiprintf_r+0x9c>
 8017c42:	9b03      	ldr	r3, [sp, #12]
 8017c44:	1d19      	adds	r1, r3, #4
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	9103      	str	r1, [sp, #12]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	bfbb      	ittet	lt
 8017c4e:	425b      	neglt	r3, r3
 8017c50:	f042 0202 	orrlt.w	r2, r2, #2
 8017c54:	9307      	strge	r3, [sp, #28]
 8017c56:	9307      	strlt	r3, [sp, #28]
 8017c58:	bfb8      	it	lt
 8017c5a:	9204      	strlt	r2, [sp, #16]
 8017c5c:	7823      	ldrb	r3, [r4, #0]
 8017c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8017c60:	d10c      	bne.n	8017c7c <_svfiprintf_r+0x130>
 8017c62:	7863      	ldrb	r3, [r4, #1]
 8017c64:	2b2a      	cmp	r3, #42	; 0x2a
 8017c66:	d134      	bne.n	8017cd2 <_svfiprintf_r+0x186>
 8017c68:	9b03      	ldr	r3, [sp, #12]
 8017c6a:	1d1a      	adds	r2, r3, #4
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	9203      	str	r2, [sp, #12]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	bfb8      	it	lt
 8017c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c78:	3402      	adds	r4, #2
 8017c7a:	9305      	str	r3, [sp, #20]
 8017c7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017d44 <_svfiprintf_r+0x1f8>
 8017c80:	7821      	ldrb	r1, [r4, #0]
 8017c82:	2203      	movs	r2, #3
 8017c84:	4650      	mov	r0, sl
 8017c86:	f7e8 fb5b 	bl	8000340 <memchr>
 8017c8a:	b138      	cbz	r0, 8017c9c <_svfiprintf_r+0x150>
 8017c8c:	9b04      	ldr	r3, [sp, #16]
 8017c8e:	eba0 000a 	sub.w	r0, r0, sl
 8017c92:	2240      	movs	r2, #64	; 0x40
 8017c94:	4082      	lsls	r2, r0
 8017c96:	4313      	orrs	r3, r2
 8017c98:	3401      	adds	r4, #1
 8017c9a:	9304      	str	r3, [sp, #16]
 8017c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ca0:	4825      	ldr	r0, [pc, #148]	; (8017d38 <_svfiprintf_r+0x1ec>)
 8017ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ca6:	2206      	movs	r2, #6
 8017ca8:	f7e8 fb4a 	bl	8000340 <memchr>
 8017cac:	2800      	cmp	r0, #0
 8017cae:	d038      	beq.n	8017d22 <_svfiprintf_r+0x1d6>
 8017cb0:	4b22      	ldr	r3, [pc, #136]	; (8017d3c <_svfiprintf_r+0x1f0>)
 8017cb2:	bb1b      	cbnz	r3, 8017cfc <_svfiprintf_r+0x1b0>
 8017cb4:	9b03      	ldr	r3, [sp, #12]
 8017cb6:	3307      	adds	r3, #7
 8017cb8:	f023 0307 	bic.w	r3, r3, #7
 8017cbc:	3308      	adds	r3, #8
 8017cbe:	9303      	str	r3, [sp, #12]
 8017cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cc2:	4433      	add	r3, r6
 8017cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8017cc6:	e768      	b.n	8017b9a <_svfiprintf_r+0x4e>
 8017cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ccc:	460c      	mov	r4, r1
 8017cce:	2001      	movs	r0, #1
 8017cd0:	e7a6      	b.n	8017c20 <_svfiprintf_r+0xd4>
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	3401      	adds	r4, #1
 8017cd6:	9305      	str	r3, [sp, #20]
 8017cd8:	4619      	mov	r1, r3
 8017cda:	f04f 0c0a 	mov.w	ip, #10
 8017cde:	4620      	mov	r0, r4
 8017ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ce4:	3a30      	subs	r2, #48	; 0x30
 8017ce6:	2a09      	cmp	r2, #9
 8017ce8:	d903      	bls.n	8017cf2 <_svfiprintf_r+0x1a6>
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d0c6      	beq.n	8017c7c <_svfiprintf_r+0x130>
 8017cee:	9105      	str	r1, [sp, #20]
 8017cf0:	e7c4      	b.n	8017c7c <_svfiprintf_r+0x130>
 8017cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	e7f0      	b.n	8017cde <_svfiprintf_r+0x192>
 8017cfc:	ab03      	add	r3, sp, #12
 8017cfe:	9300      	str	r3, [sp, #0]
 8017d00:	462a      	mov	r2, r5
 8017d02:	4b0f      	ldr	r3, [pc, #60]	; (8017d40 <_svfiprintf_r+0x1f4>)
 8017d04:	a904      	add	r1, sp, #16
 8017d06:	4638      	mov	r0, r7
 8017d08:	f3af 8000 	nop.w
 8017d0c:	1c42      	adds	r2, r0, #1
 8017d0e:	4606      	mov	r6, r0
 8017d10:	d1d6      	bne.n	8017cc0 <_svfiprintf_r+0x174>
 8017d12:	89ab      	ldrh	r3, [r5, #12]
 8017d14:	065b      	lsls	r3, r3, #25
 8017d16:	f53f af2d 	bmi.w	8017b74 <_svfiprintf_r+0x28>
 8017d1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d1c:	b01d      	add	sp, #116	; 0x74
 8017d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d22:	ab03      	add	r3, sp, #12
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	462a      	mov	r2, r5
 8017d28:	4b05      	ldr	r3, [pc, #20]	; (8017d40 <_svfiprintf_r+0x1f4>)
 8017d2a:	a904      	add	r1, sp, #16
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	f000 fa4b 	bl	80181c8 <_printf_i>
 8017d32:	e7eb      	b.n	8017d0c <_svfiprintf_r+0x1c0>
 8017d34:	08018d30 	.word	0x08018d30
 8017d38:	08018d3a 	.word	0x08018d3a
 8017d3c:	00000000 	.word	0x00000000
 8017d40:	08017a99 	.word	0x08017a99
 8017d44:	08018d36 	.word	0x08018d36

08017d48 <_sungetc_r>:
 8017d48:	b538      	push	{r3, r4, r5, lr}
 8017d4a:	1c4b      	adds	r3, r1, #1
 8017d4c:	4614      	mov	r4, r2
 8017d4e:	d103      	bne.n	8017d58 <_sungetc_r+0x10>
 8017d50:	f04f 35ff 	mov.w	r5, #4294967295
 8017d54:	4628      	mov	r0, r5
 8017d56:	bd38      	pop	{r3, r4, r5, pc}
 8017d58:	8993      	ldrh	r3, [r2, #12]
 8017d5a:	f023 0320 	bic.w	r3, r3, #32
 8017d5e:	8193      	strh	r3, [r2, #12]
 8017d60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d62:	6852      	ldr	r2, [r2, #4]
 8017d64:	b2cd      	uxtb	r5, r1
 8017d66:	b18b      	cbz	r3, 8017d8c <_sungetc_r+0x44>
 8017d68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	dd08      	ble.n	8017d80 <_sungetc_r+0x38>
 8017d6e:	6823      	ldr	r3, [r4, #0]
 8017d70:	1e5a      	subs	r2, r3, #1
 8017d72:	6022      	str	r2, [r4, #0]
 8017d74:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017d78:	6863      	ldr	r3, [r4, #4]
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	6063      	str	r3, [r4, #4]
 8017d7e:	e7e9      	b.n	8017d54 <_sungetc_r+0xc>
 8017d80:	4621      	mov	r1, r4
 8017d82:	f000 fcca 	bl	801871a <__submore>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	d0f1      	beq.n	8017d6e <_sungetc_r+0x26>
 8017d8a:	e7e1      	b.n	8017d50 <_sungetc_r+0x8>
 8017d8c:	6921      	ldr	r1, [r4, #16]
 8017d8e:	6823      	ldr	r3, [r4, #0]
 8017d90:	b151      	cbz	r1, 8017da8 <_sungetc_r+0x60>
 8017d92:	4299      	cmp	r1, r3
 8017d94:	d208      	bcs.n	8017da8 <_sungetc_r+0x60>
 8017d96:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017d9a:	42a9      	cmp	r1, r5
 8017d9c:	d104      	bne.n	8017da8 <_sungetc_r+0x60>
 8017d9e:	3b01      	subs	r3, #1
 8017da0:	3201      	adds	r2, #1
 8017da2:	6023      	str	r3, [r4, #0]
 8017da4:	6062      	str	r2, [r4, #4]
 8017da6:	e7d5      	b.n	8017d54 <_sungetc_r+0xc>
 8017da8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017db0:	6363      	str	r3, [r4, #52]	; 0x34
 8017db2:	2303      	movs	r3, #3
 8017db4:	63a3      	str	r3, [r4, #56]	; 0x38
 8017db6:	4623      	mov	r3, r4
 8017db8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017dbc:	6023      	str	r3, [r4, #0]
 8017dbe:	2301      	movs	r3, #1
 8017dc0:	e7dc      	b.n	8017d7c <_sungetc_r+0x34>

08017dc2 <__ssrefill_r>:
 8017dc2:	b510      	push	{r4, lr}
 8017dc4:	460c      	mov	r4, r1
 8017dc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017dc8:	b169      	cbz	r1, 8017de6 <__ssrefill_r+0x24>
 8017dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017dce:	4299      	cmp	r1, r3
 8017dd0:	d001      	beq.n	8017dd6 <__ssrefill_r+0x14>
 8017dd2:	f7ff fd69 	bl	80178a8 <_free_r>
 8017dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017dd8:	6063      	str	r3, [r4, #4]
 8017dda:	2000      	movs	r0, #0
 8017ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8017dde:	b113      	cbz	r3, 8017de6 <__ssrefill_r+0x24>
 8017de0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017de2:	6023      	str	r3, [r4, #0]
 8017de4:	bd10      	pop	{r4, pc}
 8017de6:	6923      	ldr	r3, [r4, #16]
 8017de8:	6023      	str	r3, [r4, #0]
 8017dea:	2300      	movs	r3, #0
 8017dec:	6063      	str	r3, [r4, #4]
 8017dee:	89a3      	ldrh	r3, [r4, #12]
 8017df0:	f043 0320 	orr.w	r3, r3, #32
 8017df4:	81a3      	strh	r3, [r4, #12]
 8017df6:	f04f 30ff 	mov.w	r0, #4294967295
 8017dfa:	e7f3      	b.n	8017de4 <__ssrefill_r+0x22>

08017dfc <__ssvfiscanf_r>:
 8017dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e00:	460c      	mov	r4, r1
 8017e02:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017e06:	2100      	movs	r1, #0
 8017e08:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017e0c:	49a6      	ldr	r1, [pc, #664]	; (80180a8 <__ssvfiscanf_r+0x2ac>)
 8017e0e:	91a0      	str	r1, [sp, #640]	; 0x280
 8017e10:	f10d 0804 	add.w	r8, sp, #4
 8017e14:	49a5      	ldr	r1, [pc, #660]	; (80180ac <__ssvfiscanf_r+0x2b0>)
 8017e16:	4fa6      	ldr	r7, [pc, #664]	; (80180b0 <__ssvfiscanf_r+0x2b4>)
 8017e18:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80180b4 <__ssvfiscanf_r+0x2b8>
 8017e1c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017e20:	4606      	mov	r6, r0
 8017e22:	91a1      	str	r1, [sp, #644]	; 0x284
 8017e24:	9300      	str	r3, [sp, #0]
 8017e26:	7813      	ldrb	r3, [r2, #0]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	f000 815a 	beq.w	80180e2 <__ssvfiscanf_r+0x2e6>
 8017e2e:	5cf9      	ldrb	r1, [r7, r3]
 8017e30:	f011 0108 	ands.w	r1, r1, #8
 8017e34:	f102 0501 	add.w	r5, r2, #1
 8017e38:	d019      	beq.n	8017e6e <__ssvfiscanf_r+0x72>
 8017e3a:	6863      	ldr	r3, [r4, #4]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	dd0f      	ble.n	8017e60 <__ssvfiscanf_r+0x64>
 8017e40:	6823      	ldr	r3, [r4, #0]
 8017e42:	781a      	ldrb	r2, [r3, #0]
 8017e44:	5cba      	ldrb	r2, [r7, r2]
 8017e46:	0712      	lsls	r2, r2, #28
 8017e48:	d401      	bmi.n	8017e4e <__ssvfiscanf_r+0x52>
 8017e4a:	462a      	mov	r2, r5
 8017e4c:	e7eb      	b.n	8017e26 <__ssvfiscanf_r+0x2a>
 8017e4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017e50:	3201      	adds	r2, #1
 8017e52:	9245      	str	r2, [sp, #276]	; 0x114
 8017e54:	6862      	ldr	r2, [r4, #4]
 8017e56:	3301      	adds	r3, #1
 8017e58:	3a01      	subs	r2, #1
 8017e5a:	6062      	str	r2, [r4, #4]
 8017e5c:	6023      	str	r3, [r4, #0]
 8017e5e:	e7ec      	b.n	8017e3a <__ssvfiscanf_r+0x3e>
 8017e60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017e62:	4621      	mov	r1, r4
 8017e64:	4630      	mov	r0, r6
 8017e66:	4798      	blx	r3
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	d0e9      	beq.n	8017e40 <__ssvfiscanf_r+0x44>
 8017e6c:	e7ed      	b.n	8017e4a <__ssvfiscanf_r+0x4e>
 8017e6e:	2b25      	cmp	r3, #37	; 0x25
 8017e70:	d012      	beq.n	8017e98 <__ssvfiscanf_r+0x9c>
 8017e72:	469a      	mov	sl, r3
 8017e74:	6863      	ldr	r3, [r4, #4]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	f340 8091 	ble.w	8017f9e <__ssvfiscanf_r+0x1a2>
 8017e7c:	6822      	ldr	r2, [r4, #0]
 8017e7e:	7813      	ldrb	r3, [r2, #0]
 8017e80:	4553      	cmp	r3, sl
 8017e82:	f040 812e 	bne.w	80180e2 <__ssvfiscanf_r+0x2e6>
 8017e86:	6863      	ldr	r3, [r4, #4]
 8017e88:	3b01      	subs	r3, #1
 8017e8a:	6063      	str	r3, [r4, #4]
 8017e8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017e8e:	3201      	adds	r2, #1
 8017e90:	3301      	adds	r3, #1
 8017e92:	6022      	str	r2, [r4, #0]
 8017e94:	9345      	str	r3, [sp, #276]	; 0x114
 8017e96:	e7d8      	b.n	8017e4a <__ssvfiscanf_r+0x4e>
 8017e98:	9141      	str	r1, [sp, #260]	; 0x104
 8017e9a:	9143      	str	r1, [sp, #268]	; 0x10c
 8017e9c:	7853      	ldrb	r3, [r2, #1]
 8017e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8017ea0:	bf02      	ittt	eq
 8017ea2:	2310      	moveq	r3, #16
 8017ea4:	1c95      	addeq	r5, r2, #2
 8017ea6:	9341      	streq	r3, [sp, #260]	; 0x104
 8017ea8:	220a      	movs	r2, #10
 8017eaa:	46aa      	mov	sl, r5
 8017eac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017eb0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017eb4:	2b09      	cmp	r3, #9
 8017eb6:	d91c      	bls.n	8017ef2 <__ssvfiscanf_r+0xf6>
 8017eb8:	487e      	ldr	r0, [pc, #504]	; (80180b4 <__ssvfiscanf_r+0x2b8>)
 8017eba:	2203      	movs	r2, #3
 8017ebc:	f7e8 fa40 	bl	8000340 <memchr>
 8017ec0:	b138      	cbz	r0, 8017ed2 <__ssvfiscanf_r+0xd6>
 8017ec2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017ec4:	eba0 0009 	sub.w	r0, r0, r9
 8017ec8:	2301      	movs	r3, #1
 8017eca:	4083      	lsls	r3, r0
 8017ecc:	4313      	orrs	r3, r2
 8017ece:	9341      	str	r3, [sp, #260]	; 0x104
 8017ed0:	4655      	mov	r5, sl
 8017ed2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017ed6:	2b78      	cmp	r3, #120	; 0x78
 8017ed8:	d806      	bhi.n	8017ee8 <__ssvfiscanf_r+0xec>
 8017eda:	2b57      	cmp	r3, #87	; 0x57
 8017edc:	d810      	bhi.n	8017f00 <__ssvfiscanf_r+0x104>
 8017ede:	2b25      	cmp	r3, #37	; 0x25
 8017ee0:	d0c7      	beq.n	8017e72 <__ssvfiscanf_r+0x76>
 8017ee2:	d857      	bhi.n	8017f94 <__ssvfiscanf_r+0x198>
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d065      	beq.n	8017fb4 <__ssvfiscanf_r+0x1b8>
 8017ee8:	2303      	movs	r3, #3
 8017eea:	9347      	str	r3, [sp, #284]	; 0x11c
 8017eec:	230a      	movs	r3, #10
 8017eee:	9342      	str	r3, [sp, #264]	; 0x108
 8017ef0:	e076      	b.n	8017fe0 <__ssvfiscanf_r+0x1e4>
 8017ef2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017ef4:	fb02 1103 	mla	r1, r2, r3, r1
 8017ef8:	3930      	subs	r1, #48	; 0x30
 8017efa:	9143      	str	r1, [sp, #268]	; 0x10c
 8017efc:	4655      	mov	r5, sl
 8017efe:	e7d4      	b.n	8017eaa <__ssvfiscanf_r+0xae>
 8017f00:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017f04:	2a20      	cmp	r2, #32
 8017f06:	d8ef      	bhi.n	8017ee8 <__ssvfiscanf_r+0xec>
 8017f08:	a101      	add	r1, pc, #4	; (adr r1, 8017f10 <__ssvfiscanf_r+0x114>)
 8017f0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017f0e:	bf00      	nop
 8017f10:	08017fc3 	.word	0x08017fc3
 8017f14:	08017ee9 	.word	0x08017ee9
 8017f18:	08017ee9 	.word	0x08017ee9
 8017f1c:	08018021 	.word	0x08018021
 8017f20:	08017ee9 	.word	0x08017ee9
 8017f24:	08017ee9 	.word	0x08017ee9
 8017f28:	08017ee9 	.word	0x08017ee9
 8017f2c:	08017ee9 	.word	0x08017ee9
 8017f30:	08017ee9 	.word	0x08017ee9
 8017f34:	08017ee9 	.word	0x08017ee9
 8017f38:	08017ee9 	.word	0x08017ee9
 8017f3c:	08018037 	.word	0x08018037
 8017f40:	0801801d 	.word	0x0801801d
 8017f44:	08017f9b 	.word	0x08017f9b
 8017f48:	08017f9b 	.word	0x08017f9b
 8017f4c:	08017f9b 	.word	0x08017f9b
 8017f50:	08017ee9 	.word	0x08017ee9
 8017f54:	08017fd9 	.word	0x08017fd9
 8017f58:	08017ee9 	.word	0x08017ee9
 8017f5c:	08017ee9 	.word	0x08017ee9
 8017f60:	08017ee9 	.word	0x08017ee9
 8017f64:	08017ee9 	.word	0x08017ee9
 8017f68:	08018047 	.word	0x08018047
 8017f6c:	08018015 	.word	0x08018015
 8017f70:	08017fbb 	.word	0x08017fbb
 8017f74:	08017ee9 	.word	0x08017ee9
 8017f78:	08017ee9 	.word	0x08017ee9
 8017f7c:	08018043 	.word	0x08018043
 8017f80:	08017ee9 	.word	0x08017ee9
 8017f84:	0801801d 	.word	0x0801801d
 8017f88:	08017ee9 	.word	0x08017ee9
 8017f8c:	08017ee9 	.word	0x08017ee9
 8017f90:	08017fc3 	.word	0x08017fc3
 8017f94:	3b45      	subs	r3, #69	; 0x45
 8017f96:	2b02      	cmp	r3, #2
 8017f98:	d8a6      	bhi.n	8017ee8 <__ssvfiscanf_r+0xec>
 8017f9a:	2305      	movs	r3, #5
 8017f9c:	e01f      	b.n	8017fde <__ssvfiscanf_r+0x1e2>
 8017f9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017fa0:	4621      	mov	r1, r4
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	4798      	blx	r3
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	f43f af68 	beq.w	8017e7c <__ssvfiscanf_r+0x80>
 8017fac:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	f040 808d 	bne.w	80180ce <__ssvfiscanf_r+0x2d2>
 8017fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb8:	e08f      	b.n	80180da <__ssvfiscanf_r+0x2de>
 8017fba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017fbc:	f042 0220 	orr.w	r2, r2, #32
 8017fc0:	9241      	str	r2, [sp, #260]	; 0x104
 8017fc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017fc8:	9241      	str	r2, [sp, #260]	; 0x104
 8017fca:	2210      	movs	r2, #16
 8017fcc:	2b6f      	cmp	r3, #111	; 0x6f
 8017fce:	9242      	str	r2, [sp, #264]	; 0x108
 8017fd0:	bf34      	ite	cc
 8017fd2:	2303      	movcc	r3, #3
 8017fd4:	2304      	movcs	r3, #4
 8017fd6:	e002      	b.n	8017fde <__ssvfiscanf_r+0x1e2>
 8017fd8:	2300      	movs	r3, #0
 8017fda:	9342      	str	r3, [sp, #264]	; 0x108
 8017fdc:	2303      	movs	r3, #3
 8017fde:	9347      	str	r3, [sp, #284]	; 0x11c
 8017fe0:	6863      	ldr	r3, [r4, #4]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	dd3d      	ble.n	8018062 <__ssvfiscanf_r+0x266>
 8017fe6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017fe8:	0659      	lsls	r1, r3, #25
 8017fea:	d404      	bmi.n	8017ff6 <__ssvfiscanf_r+0x1fa>
 8017fec:	6823      	ldr	r3, [r4, #0]
 8017fee:	781a      	ldrb	r2, [r3, #0]
 8017ff0:	5cba      	ldrb	r2, [r7, r2]
 8017ff2:	0712      	lsls	r2, r2, #28
 8017ff4:	d43c      	bmi.n	8018070 <__ssvfiscanf_r+0x274>
 8017ff6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017ff8:	2b02      	cmp	r3, #2
 8017ffa:	dc4b      	bgt.n	8018094 <__ssvfiscanf_r+0x298>
 8017ffc:	466b      	mov	r3, sp
 8017ffe:	4622      	mov	r2, r4
 8018000:	a941      	add	r1, sp, #260	; 0x104
 8018002:	4630      	mov	r0, r6
 8018004:	f000 fa02 	bl	801840c <_scanf_chars>
 8018008:	2801      	cmp	r0, #1
 801800a:	d06a      	beq.n	80180e2 <__ssvfiscanf_r+0x2e6>
 801800c:	2802      	cmp	r0, #2
 801800e:	f47f af1c 	bne.w	8017e4a <__ssvfiscanf_r+0x4e>
 8018012:	e7cb      	b.n	8017fac <__ssvfiscanf_r+0x1b0>
 8018014:	2308      	movs	r3, #8
 8018016:	9342      	str	r3, [sp, #264]	; 0x108
 8018018:	2304      	movs	r3, #4
 801801a:	e7e0      	b.n	8017fde <__ssvfiscanf_r+0x1e2>
 801801c:	220a      	movs	r2, #10
 801801e:	e7d5      	b.n	8017fcc <__ssvfiscanf_r+0x1d0>
 8018020:	4629      	mov	r1, r5
 8018022:	4640      	mov	r0, r8
 8018024:	f000 fb40 	bl	80186a8 <__sccl>
 8018028:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801802a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801802e:	9341      	str	r3, [sp, #260]	; 0x104
 8018030:	4605      	mov	r5, r0
 8018032:	2301      	movs	r3, #1
 8018034:	e7d3      	b.n	8017fde <__ssvfiscanf_r+0x1e2>
 8018036:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801803c:	9341      	str	r3, [sp, #260]	; 0x104
 801803e:	2300      	movs	r3, #0
 8018040:	e7cd      	b.n	8017fde <__ssvfiscanf_r+0x1e2>
 8018042:	2302      	movs	r3, #2
 8018044:	e7cb      	b.n	8017fde <__ssvfiscanf_r+0x1e2>
 8018046:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018048:	06c3      	lsls	r3, r0, #27
 801804a:	f53f aefe 	bmi.w	8017e4a <__ssvfiscanf_r+0x4e>
 801804e:	9b00      	ldr	r3, [sp, #0]
 8018050:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018052:	1d19      	adds	r1, r3, #4
 8018054:	9100      	str	r1, [sp, #0]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	07c0      	lsls	r0, r0, #31
 801805a:	bf4c      	ite	mi
 801805c:	801a      	strhmi	r2, [r3, #0]
 801805e:	601a      	strpl	r2, [r3, #0]
 8018060:	e6f3      	b.n	8017e4a <__ssvfiscanf_r+0x4e>
 8018062:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018064:	4621      	mov	r1, r4
 8018066:	4630      	mov	r0, r6
 8018068:	4798      	blx	r3
 801806a:	2800      	cmp	r0, #0
 801806c:	d0bb      	beq.n	8017fe6 <__ssvfiscanf_r+0x1ea>
 801806e:	e79d      	b.n	8017fac <__ssvfiscanf_r+0x1b0>
 8018070:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018072:	3201      	adds	r2, #1
 8018074:	9245      	str	r2, [sp, #276]	; 0x114
 8018076:	6862      	ldr	r2, [r4, #4]
 8018078:	3a01      	subs	r2, #1
 801807a:	2a00      	cmp	r2, #0
 801807c:	6062      	str	r2, [r4, #4]
 801807e:	dd02      	ble.n	8018086 <__ssvfiscanf_r+0x28a>
 8018080:	3301      	adds	r3, #1
 8018082:	6023      	str	r3, [r4, #0]
 8018084:	e7b2      	b.n	8017fec <__ssvfiscanf_r+0x1f0>
 8018086:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018088:	4621      	mov	r1, r4
 801808a:	4630      	mov	r0, r6
 801808c:	4798      	blx	r3
 801808e:	2800      	cmp	r0, #0
 8018090:	d0ac      	beq.n	8017fec <__ssvfiscanf_r+0x1f0>
 8018092:	e78b      	b.n	8017fac <__ssvfiscanf_r+0x1b0>
 8018094:	2b04      	cmp	r3, #4
 8018096:	dc0f      	bgt.n	80180b8 <__ssvfiscanf_r+0x2bc>
 8018098:	466b      	mov	r3, sp
 801809a:	4622      	mov	r2, r4
 801809c:	a941      	add	r1, sp, #260	; 0x104
 801809e:	4630      	mov	r0, r6
 80180a0:	f000 fa0e 	bl	80184c0 <_scanf_i>
 80180a4:	e7b0      	b.n	8018008 <__ssvfiscanf_r+0x20c>
 80180a6:	bf00      	nop
 80180a8:	08017d49 	.word	0x08017d49
 80180ac:	08017dc3 	.word	0x08017dc3
 80180b0:	08018d7f 	.word	0x08018d7f
 80180b4:	08018d36 	.word	0x08018d36
 80180b8:	4b0b      	ldr	r3, [pc, #44]	; (80180e8 <__ssvfiscanf_r+0x2ec>)
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	f43f aec5 	beq.w	8017e4a <__ssvfiscanf_r+0x4e>
 80180c0:	466b      	mov	r3, sp
 80180c2:	4622      	mov	r2, r4
 80180c4:	a941      	add	r1, sp, #260	; 0x104
 80180c6:	4630      	mov	r0, r6
 80180c8:	f3af 8000 	nop.w
 80180cc:	e79c      	b.n	8018008 <__ssvfiscanf_r+0x20c>
 80180ce:	89a3      	ldrh	r3, [r4, #12]
 80180d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80180d4:	bf18      	it	ne
 80180d6:	f04f 30ff 	movne.w	r0, #4294967295
 80180da:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80180de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80180e4:	e7f9      	b.n	80180da <__ssvfiscanf_r+0x2de>
 80180e6:	bf00      	nop
 80180e8:	00000000 	.word	0x00000000

080180ec <_printf_common>:
 80180ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180f0:	4616      	mov	r6, r2
 80180f2:	4699      	mov	r9, r3
 80180f4:	688a      	ldr	r2, [r1, #8]
 80180f6:	690b      	ldr	r3, [r1, #16]
 80180f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80180fc:	4293      	cmp	r3, r2
 80180fe:	bfb8      	it	lt
 8018100:	4613      	movlt	r3, r2
 8018102:	6033      	str	r3, [r6, #0]
 8018104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018108:	4607      	mov	r7, r0
 801810a:	460c      	mov	r4, r1
 801810c:	b10a      	cbz	r2, 8018112 <_printf_common+0x26>
 801810e:	3301      	adds	r3, #1
 8018110:	6033      	str	r3, [r6, #0]
 8018112:	6823      	ldr	r3, [r4, #0]
 8018114:	0699      	lsls	r1, r3, #26
 8018116:	bf42      	ittt	mi
 8018118:	6833      	ldrmi	r3, [r6, #0]
 801811a:	3302      	addmi	r3, #2
 801811c:	6033      	strmi	r3, [r6, #0]
 801811e:	6825      	ldr	r5, [r4, #0]
 8018120:	f015 0506 	ands.w	r5, r5, #6
 8018124:	d106      	bne.n	8018134 <_printf_common+0x48>
 8018126:	f104 0a19 	add.w	sl, r4, #25
 801812a:	68e3      	ldr	r3, [r4, #12]
 801812c:	6832      	ldr	r2, [r6, #0]
 801812e:	1a9b      	subs	r3, r3, r2
 8018130:	42ab      	cmp	r3, r5
 8018132:	dc26      	bgt.n	8018182 <_printf_common+0x96>
 8018134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018138:	1e13      	subs	r3, r2, #0
 801813a:	6822      	ldr	r2, [r4, #0]
 801813c:	bf18      	it	ne
 801813e:	2301      	movne	r3, #1
 8018140:	0692      	lsls	r2, r2, #26
 8018142:	d42b      	bmi.n	801819c <_printf_common+0xb0>
 8018144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018148:	4649      	mov	r1, r9
 801814a:	4638      	mov	r0, r7
 801814c:	47c0      	blx	r8
 801814e:	3001      	adds	r0, #1
 8018150:	d01e      	beq.n	8018190 <_printf_common+0xa4>
 8018152:	6823      	ldr	r3, [r4, #0]
 8018154:	6922      	ldr	r2, [r4, #16]
 8018156:	f003 0306 	and.w	r3, r3, #6
 801815a:	2b04      	cmp	r3, #4
 801815c:	bf02      	ittt	eq
 801815e:	68e5      	ldreq	r5, [r4, #12]
 8018160:	6833      	ldreq	r3, [r6, #0]
 8018162:	1aed      	subeq	r5, r5, r3
 8018164:	68a3      	ldr	r3, [r4, #8]
 8018166:	bf0c      	ite	eq
 8018168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801816c:	2500      	movne	r5, #0
 801816e:	4293      	cmp	r3, r2
 8018170:	bfc4      	itt	gt
 8018172:	1a9b      	subgt	r3, r3, r2
 8018174:	18ed      	addgt	r5, r5, r3
 8018176:	2600      	movs	r6, #0
 8018178:	341a      	adds	r4, #26
 801817a:	42b5      	cmp	r5, r6
 801817c:	d11a      	bne.n	80181b4 <_printf_common+0xc8>
 801817e:	2000      	movs	r0, #0
 8018180:	e008      	b.n	8018194 <_printf_common+0xa8>
 8018182:	2301      	movs	r3, #1
 8018184:	4652      	mov	r2, sl
 8018186:	4649      	mov	r1, r9
 8018188:	4638      	mov	r0, r7
 801818a:	47c0      	blx	r8
 801818c:	3001      	adds	r0, #1
 801818e:	d103      	bne.n	8018198 <_printf_common+0xac>
 8018190:	f04f 30ff 	mov.w	r0, #4294967295
 8018194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018198:	3501      	adds	r5, #1
 801819a:	e7c6      	b.n	801812a <_printf_common+0x3e>
 801819c:	18e1      	adds	r1, r4, r3
 801819e:	1c5a      	adds	r2, r3, #1
 80181a0:	2030      	movs	r0, #48	; 0x30
 80181a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80181a6:	4422      	add	r2, r4
 80181a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80181ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80181b0:	3302      	adds	r3, #2
 80181b2:	e7c7      	b.n	8018144 <_printf_common+0x58>
 80181b4:	2301      	movs	r3, #1
 80181b6:	4622      	mov	r2, r4
 80181b8:	4649      	mov	r1, r9
 80181ba:	4638      	mov	r0, r7
 80181bc:	47c0      	blx	r8
 80181be:	3001      	adds	r0, #1
 80181c0:	d0e6      	beq.n	8018190 <_printf_common+0xa4>
 80181c2:	3601      	adds	r6, #1
 80181c4:	e7d9      	b.n	801817a <_printf_common+0x8e>
	...

080181c8 <_printf_i>:
 80181c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80181cc:	7e0f      	ldrb	r7, [r1, #24]
 80181ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80181d0:	2f78      	cmp	r7, #120	; 0x78
 80181d2:	4691      	mov	r9, r2
 80181d4:	4680      	mov	r8, r0
 80181d6:	460c      	mov	r4, r1
 80181d8:	469a      	mov	sl, r3
 80181da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80181de:	d807      	bhi.n	80181f0 <_printf_i+0x28>
 80181e0:	2f62      	cmp	r7, #98	; 0x62
 80181e2:	d80a      	bhi.n	80181fa <_printf_i+0x32>
 80181e4:	2f00      	cmp	r7, #0
 80181e6:	f000 80d4 	beq.w	8018392 <_printf_i+0x1ca>
 80181ea:	2f58      	cmp	r7, #88	; 0x58
 80181ec:	f000 80c0 	beq.w	8018370 <_printf_i+0x1a8>
 80181f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80181f8:	e03a      	b.n	8018270 <_printf_i+0xa8>
 80181fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80181fe:	2b15      	cmp	r3, #21
 8018200:	d8f6      	bhi.n	80181f0 <_printf_i+0x28>
 8018202:	a101      	add	r1, pc, #4	; (adr r1, 8018208 <_printf_i+0x40>)
 8018204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018208:	08018261 	.word	0x08018261
 801820c:	08018275 	.word	0x08018275
 8018210:	080181f1 	.word	0x080181f1
 8018214:	080181f1 	.word	0x080181f1
 8018218:	080181f1 	.word	0x080181f1
 801821c:	080181f1 	.word	0x080181f1
 8018220:	08018275 	.word	0x08018275
 8018224:	080181f1 	.word	0x080181f1
 8018228:	080181f1 	.word	0x080181f1
 801822c:	080181f1 	.word	0x080181f1
 8018230:	080181f1 	.word	0x080181f1
 8018234:	08018379 	.word	0x08018379
 8018238:	080182a1 	.word	0x080182a1
 801823c:	08018333 	.word	0x08018333
 8018240:	080181f1 	.word	0x080181f1
 8018244:	080181f1 	.word	0x080181f1
 8018248:	0801839b 	.word	0x0801839b
 801824c:	080181f1 	.word	0x080181f1
 8018250:	080182a1 	.word	0x080182a1
 8018254:	080181f1 	.word	0x080181f1
 8018258:	080181f1 	.word	0x080181f1
 801825c:	0801833b 	.word	0x0801833b
 8018260:	682b      	ldr	r3, [r5, #0]
 8018262:	1d1a      	adds	r2, r3, #4
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	602a      	str	r2, [r5, #0]
 8018268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801826c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018270:	2301      	movs	r3, #1
 8018272:	e09f      	b.n	80183b4 <_printf_i+0x1ec>
 8018274:	6820      	ldr	r0, [r4, #0]
 8018276:	682b      	ldr	r3, [r5, #0]
 8018278:	0607      	lsls	r7, r0, #24
 801827a:	f103 0104 	add.w	r1, r3, #4
 801827e:	6029      	str	r1, [r5, #0]
 8018280:	d501      	bpl.n	8018286 <_printf_i+0xbe>
 8018282:	681e      	ldr	r6, [r3, #0]
 8018284:	e003      	b.n	801828e <_printf_i+0xc6>
 8018286:	0646      	lsls	r6, r0, #25
 8018288:	d5fb      	bpl.n	8018282 <_printf_i+0xba>
 801828a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801828e:	2e00      	cmp	r6, #0
 8018290:	da03      	bge.n	801829a <_printf_i+0xd2>
 8018292:	232d      	movs	r3, #45	; 0x2d
 8018294:	4276      	negs	r6, r6
 8018296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801829a:	485a      	ldr	r0, [pc, #360]	; (8018404 <_printf_i+0x23c>)
 801829c:	230a      	movs	r3, #10
 801829e:	e012      	b.n	80182c6 <_printf_i+0xfe>
 80182a0:	682b      	ldr	r3, [r5, #0]
 80182a2:	6820      	ldr	r0, [r4, #0]
 80182a4:	1d19      	adds	r1, r3, #4
 80182a6:	6029      	str	r1, [r5, #0]
 80182a8:	0605      	lsls	r5, r0, #24
 80182aa:	d501      	bpl.n	80182b0 <_printf_i+0xe8>
 80182ac:	681e      	ldr	r6, [r3, #0]
 80182ae:	e002      	b.n	80182b6 <_printf_i+0xee>
 80182b0:	0641      	lsls	r1, r0, #25
 80182b2:	d5fb      	bpl.n	80182ac <_printf_i+0xe4>
 80182b4:	881e      	ldrh	r6, [r3, #0]
 80182b6:	4853      	ldr	r0, [pc, #332]	; (8018404 <_printf_i+0x23c>)
 80182b8:	2f6f      	cmp	r7, #111	; 0x6f
 80182ba:	bf0c      	ite	eq
 80182bc:	2308      	moveq	r3, #8
 80182be:	230a      	movne	r3, #10
 80182c0:	2100      	movs	r1, #0
 80182c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80182c6:	6865      	ldr	r5, [r4, #4]
 80182c8:	60a5      	str	r5, [r4, #8]
 80182ca:	2d00      	cmp	r5, #0
 80182cc:	bfa2      	ittt	ge
 80182ce:	6821      	ldrge	r1, [r4, #0]
 80182d0:	f021 0104 	bicge.w	r1, r1, #4
 80182d4:	6021      	strge	r1, [r4, #0]
 80182d6:	b90e      	cbnz	r6, 80182dc <_printf_i+0x114>
 80182d8:	2d00      	cmp	r5, #0
 80182da:	d04b      	beq.n	8018374 <_printf_i+0x1ac>
 80182dc:	4615      	mov	r5, r2
 80182de:	fbb6 f1f3 	udiv	r1, r6, r3
 80182e2:	fb03 6711 	mls	r7, r3, r1, r6
 80182e6:	5dc7      	ldrb	r7, [r0, r7]
 80182e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80182ec:	4637      	mov	r7, r6
 80182ee:	42bb      	cmp	r3, r7
 80182f0:	460e      	mov	r6, r1
 80182f2:	d9f4      	bls.n	80182de <_printf_i+0x116>
 80182f4:	2b08      	cmp	r3, #8
 80182f6:	d10b      	bne.n	8018310 <_printf_i+0x148>
 80182f8:	6823      	ldr	r3, [r4, #0]
 80182fa:	07de      	lsls	r6, r3, #31
 80182fc:	d508      	bpl.n	8018310 <_printf_i+0x148>
 80182fe:	6923      	ldr	r3, [r4, #16]
 8018300:	6861      	ldr	r1, [r4, #4]
 8018302:	4299      	cmp	r1, r3
 8018304:	bfde      	ittt	le
 8018306:	2330      	movle	r3, #48	; 0x30
 8018308:	f805 3c01 	strble.w	r3, [r5, #-1]
 801830c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018310:	1b52      	subs	r2, r2, r5
 8018312:	6122      	str	r2, [r4, #16]
 8018314:	f8cd a000 	str.w	sl, [sp]
 8018318:	464b      	mov	r3, r9
 801831a:	aa03      	add	r2, sp, #12
 801831c:	4621      	mov	r1, r4
 801831e:	4640      	mov	r0, r8
 8018320:	f7ff fee4 	bl	80180ec <_printf_common>
 8018324:	3001      	adds	r0, #1
 8018326:	d14a      	bne.n	80183be <_printf_i+0x1f6>
 8018328:	f04f 30ff 	mov.w	r0, #4294967295
 801832c:	b004      	add	sp, #16
 801832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018332:	6823      	ldr	r3, [r4, #0]
 8018334:	f043 0320 	orr.w	r3, r3, #32
 8018338:	6023      	str	r3, [r4, #0]
 801833a:	4833      	ldr	r0, [pc, #204]	; (8018408 <_printf_i+0x240>)
 801833c:	2778      	movs	r7, #120	; 0x78
 801833e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018342:	6823      	ldr	r3, [r4, #0]
 8018344:	6829      	ldr	r1, [r5, #0]
 8018346:	061f      	lsls	r7, r3, #24
 8018348:	f851 6b04 	ldr.w	r6, [r1], #4
 801834c:	d402      	bmi.n	8018354 <_printf_i+0x18c>
 801834e:	065f      	lsls	r7, r3, #25
 8018350:	bf48      	it	mi
 8018352:	b2b6      	uxthmi	r6, r6
 8018354:	07df      	lsls	r7, r3, #31
 8018356:	bf48      	it	mi
 8018358:	f043 0320 	orrmi.w	r3, r3, #32
 801835c:	6029      	str	r1, [r5, #0]
 801835e:	bf48      	it	mi
 8018360:	6023      	strmi	r3, [r4, #0]
 8018362:	b91e      	cbnz	r6, 801836c <_printf_i+0x1a4>
 8018364:	6823      	ldr	r3, [r4, #0]
 8018366:	f023 0320 	bic.w	r3, r3, #32
 801836a:	6023      	str	r3, [r4, #0]
 801836c:	2310      	movs	r3, #16
 801836e:	e7a7      	b.n	80182c0 <_printf_i+0xf8>
 8018370:	4824      	ldr	r0, [pc, #144]	; (8018404 <_printf_i+0x23c>)
 8018372:	e7e4      	b.n	801833e <_printf_i+0x176>
 8018374:	4615      	mov	r5, r2
 8018376:	e7bd      	b.n	80182f4 <_printf_i+0x12c>
 8018378:	682b      	ldr	r3, [r5, #0]
 801837a:	6826      	ldr	r6, [r4, #0]
 801837c:	6961      	ldr	r1, [r4, #20]
 801837e:	1d18      	adds	r0, r3, #4
 8018380:	6028      	str	r0, [r5, #0]
 8018382:	0635      	lsls	r5, r6, #24
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	d501      	bpl.n	801838c <_printf_i+0x1c4>
 8018388:	6019      	str	r1, [r3, #0]
 801838a:	e002      	b.n	8018392 <_printf_i+0x1ca>
 801838c:	0670      	lsls	r0, r6, #25
 801838e:	d5fb      	bpl.n	8018388 <_printf_i+0x1c0>
 8018390:	8019      	strh	r1, [r3, #0]
 8018392:	2300      	movs	r3, #0
 8018394:	6123      	str	r3, [r4, #16]
 8018396:	4615      	mov	r5, r2
 8018398:	e7bc      	b.n	8018314 <_printf_i+0x14c>
 801839a:	682b      	ldr	r3, [r5, #0]
 801839c:	1d1a      	adds	r2, r3, #4
 801839e:	602a      	str	r2, [r5, #0]
 80183a0:	681d      	ldr	r5, [r3, #0]
 80183a2:	6862      	ldr	r2, [r4, #4]
 80183a4:	2100      	movs	r1, #0
 80183a6:	4628      	mov	r0, r5
 80183a8:	f7e7 ffca 	bl	8000340 <memchr>
 80183ac:	b108      	cbz	r0, 80183b2 <_printf_i+0x1ea>
 80183ae:	1b40      	subs	r0, r0, r5
 80183b0:	6060      	str	r0, [r4, #4]
 80183b2:	6863      	ldr	r3, [r4, #4]
 80183b4:	6123      	str	r3, [r4, #16]
 80183b6:	2300      	movs	r3, #0
 80183b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80183bc:	e7aa      	b.n	8018314 <_printf_i+0x14c>
 80183be:	6923      	ldr	r3, [r4, #16]
 80183c0:	462a      	mov	r2, r5
 80183c2:	4649      	mov	r1, r9
 80183c4:	4640      	mov	r0, r8
 80183c6:	47d0      	blx	sl
 80183c8:	3001      	adds	r0, #1
 80183ca:	d0ad      	beq.n	8018328 <_printf_i+0x160>
 80183cc:	6823      	ldr	r3, [r4, #0]
 80183ce:	079b      	lsls	r3, r3, #30
 80183d0:	d413      	bmi.n	80183fa <_printf_i+0x232>
 80183d2:	68e0      	ldr	r0, [r4, #12]
 80183d4:	9b03      	ldr	r3, [sp, #12]
 80183d6:	4298      	cmp	r0, r3
 80183d8:	bfb8      	it	lt
 80183da:	4618      	movlt	r0, r3
 80183dc:	e7a6      	b.n	801832c <_printf_i+0x164>
 80183de:	2301      	movs	r3, #1
 80183e0:	4632      	mov	r2, r6
 80183e2:	4649      	mov	r1, r9
 80183e4:	4640      	mov	r0, r8
 80183e6:	47d0      	blx	sl
 80183e8:	3001      	adds	r0, #1
 80183ea:	d09d      	beq.n	8018328 <_printf_i+0x160>
 80183ec:	3501      	adds	r5, #1
 80183ee:	68e3      	ldr	r3, [r4, #12]
 80183f0:	9903      	ldr	r1, [sp, #12]
 80183f2:	1a5b      	subs	r3, r3, r1
 80183f4:	42ab      	cmp	r3, r5
 80183f6:	dcf2      	bgt.n	80183de <_printf_i+0x216>
 80183f8:	e7eb      	b.n	80183d2 <_printf_i+0x20a>
 80183fa:	2500      	movs	r5, #0
 80183fc:	f104 0619 	add.w	r6, r4, #25
 8018400:	e7f5      	b.n	80183ee <_printf_i+0x226>
 8018402:	bf00      	nop
 8018404:	08018d41 	.word	0x08018d41
 8018408:	08018d52 	.word	0x08018d52

0801840c <_scanf_chars>:
 801840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018410:	4615      	mov	r5, r2
 8018412:	688a      	ldr	r2, [r1, #8]
 8018414:	4680      	mov	r8, r0
 8018416:	460c      	mov	r4, r1
 8018418:	b932      	cbnz	r2, 8018428 <_scanf_chars+0x1c>
 801841a:	698a      	ldr	r2, [r1, #24]
 801841c:	2a00      	cmp	r2, #0
 801841e:	bf0c      	ite	eq
 8018420:	2201      	moveq	r2, #1
 8018422:	f04f 32ff 	movne.w	r2, #4294967295
 8018426:	608a      	str	r2, [r1, #8]
 8018428:	6822      	ldr	r2, [r4, #0]
 801842a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80184bc <_scanf_chars+0xb0>
 801842e:	06d1      	lsls	r1, r2, #27
 8018430:	bf5f      	itttt	pl
 8018432:	681a      	ldrpl	r2, [r3, #0]
 8018434:	1d11      	addpl	r1, r2, #4
 8018436:	6019      	strpl	r1, [r3, #0]
 8018438:	6816      	ldrpl	r6, [r2, #0]
 801843a:	2700      	movs	r7, #0
 801843c:	69a0      	ldr	r0, [r4, #24]
 801843e:	b188      	cbz	r0, 8018464 <_scanf_chars+0x58>
 8018440:	2801      	cmp	r0, #1
 8018442:	d107      	bne.n	8018454 <_scanf_chars+0x48>
 8018444:	682a      	ldr	r2, [r5, #0]
 8018446:	7811      	ldrb	r1, [r2, #0]
 8018448:	6962      	ldr	r2, [r4, #20]
 801844a:	5c52      	ldrb	r2, [r2, r1]
 801844c:	b952      	cbnz	r2, 8018464 <_scanf_chars+0x58>
 801844e:	2f00      	cmp	r7, #0
 8018450:	d031      	beq.n	80184b6 <_scanf_chars+0xaa>
 8018452:	e022      	b.n	801849a <_scanf_chars+0x8e>
 8018454:	2802      	cmp	r0, #2
 8018456:	d120      	bne.n	801849a <_scanf_chars+0x8e>
 8018458:	682b      	ldr	r3, [r5, #0]
 801845a:	781b      	ldrb	r3, [r3, #0]
 801845c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018460:	071b      	lsls	r3, r3, #28
 8018462:	d41a      	bmi.n	801849a <_scanf_chars+0x8e>
 8018464:	6823      	ldr	r3, [r4, #0]
 8018466:	06da      	lsls	r2, r3, #27
 8018468:	bf5e      	ittt	pl
 801846a:	682b      	ldrpl	r3, [r5, #0]
 801846c:	781b      	ldrbpl	r3, [r3, #0]
 801846e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018472:	682a      	ldr	r2, [r5, #0]
 8018474:	686b      	ldr	r3, [r5, #4]
 8018476:	3201      	adds	r2, #1
 8018478:	602a      	str	r2, [r5, #0]
 801847a:	68a2      	ldr	r2, [r4, #8]
 801847c:	3b01      	subs	r3, #1
 801847e:	3a01      	subs	r2, #1
 8018480:	606b      	str	r3, [r5, #4]
 8018482:	3701      	adds	r7, #1
 8018484:	60a2      	str	r2, [r4, #8]
 8018486:	b142      	cbz	r2, 801849a <_scanf_chars+0x8e>
 8018488:	2b00      	cmp	r3, #0
 801848a:	dcd7      	bgt.n	801843c <_scanf_chars+0x30>
 801848c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018490:	4629      	mov	r1, r5
 8018492:	4640      	mov	r0, r8
 8018494:	4798      	blx	r3
 8018496:	2800      	cmp	r0, #0
 8018498:	d0d0      	beq.n	801843c <_scanf_chars+0x30>
 801849a:	6823      	ldr	r3, [r4, #0]
 801849c:	f013 0310 	ands.w	r3, r3, #16
 80184a0:	d105      	bne.n	80184ae <_scanf_chars+0xa2>
 80184a2:	68e2      	ldr	r2, [r4, #12]
 80184a4:	3201      	adds	r2, #1
 80184a6:	60e2      	str	r2, [r4, #12]
 80184a8:	69a2      	ldr	r2, [r4, #24]
 80184aa:	b102      	cbz	r2, 80184ae <_scanf_chars+0xa2>
 80184ac:	7033      	strb	r3, [r6, #0]
 80184ae:	6923      	ldr	r3, [r4, #16]
 80184b0:	443b      	add	r3, r7
 80184b2:	6123      	str	r3, [r4, #16]
 80184b4:	2000      	movs	r0, #0
 80184b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184ba:	bf00      	nop
 80184bc:	08018d7f 	.word	0x08018d7f

080184c0 <_scanf_i>:
 80184c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c4:	4698      	mov	r8, r3
 80184c6:	4b74      	ldr	r3, [pc, #464]	; (8018698 <_scanf_i+0x1d8>)
 80184c8:	460c      	mov	r4, r1
 80184ca:	4682      	mov	sl, r0
 80184cc:	4616      	mov	r6, r2
 80184ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80184d2:	b087      	sub	sp, #28
 80184d4:	ab03      	add	r3, sp, #12
 80184d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80184da:	4b70      	ldr	r3, [pc, #448]	; (801869c <_scanf_i+0x1dc>)
 80184dc:	69a1      	ldr	r1, [r4, #24]
 80184de:	4a70      	ldr	r2, [pc, #448]	; (80186a0 <_scanf_i+0x1e0>)
 80184e0:	2903      	cmp	r1, #3
 80184e2:	bf18      	it	ne
 80184e4:	461a      	movne	r2, r3
 80184e6:	68a3      	ldr	r3, [r4, #8]
 80184e8:	9201      	str	r2, [sp, #4]
 80184ea:	1e5a      	subs	r2, r3, #1
 80184ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80184f0:	bf88      	it	hi
 80184f2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80184f6:	4627      	mov	r7, r4
 80184f8:	bf82      	ittt	hi
 80184fa:	eb03 0905 	addhi.w	r9, r3, r5
 80184fe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018502:	60a3      	strhi	r3, [r4, #8]
 8018504:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018508:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801850c:	bf98      	it	ls
 801850e:	f04f 0900 	movls.w	r9, #0
 8018512:	6023      	str	r3, [r4, #0]
 8018514:	463d      	mov	r5, r7
 8018516:	f04f 0b00 	mov.w	fp, #0
 801851a:	6831      	ldr	r1, [r6, #0]
 801851c:	ab03      	add	r3, sp, #12
 801851e:	7809      	ldrb	r1, [r1, #0]
 8018520:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018524:	2202      	movs	r2, #2
 8018526:	f7e7 ff0b 	bl	8000340 <memchr>
 801852a:	b328      	cbz	r0, 8018578 <_scanf_i+0xb8>
 801852c:	f1bb 0f01 	cmp.w	fp, #1
 8018530:	d159      	bne.n	80185e6 <_scanf_i+0x126>
 8018532:	6862      	ldr	r2, [r4, #4]
 8018534:	b92a      	cbnz	r2, 8018542 <_scanf_i+0x82>
 8018536:	6822      	ldr	r2, [r4, #0]
 8018538:	2308      	movs	r3, #8
 801853a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801853e:	6063      	str	r3, [r4, #4]
 8018540:	6022      	str	r2, [r4, #0]
 8018542:	6822      	ldr	r2, [r4, #0]
 8018544:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018548:	6022      	str	r2, [r4, #0]
 801854a:	68a2      	ldr	r2, [r4, #8]
 801854c:	1e51      	subs	r1, r2, #1
 801854e:	60a1      	str	r1, [r4, #8]
 8018550:	b192      	cbz	r2, 8018578 <_scanf_i+0xb8>
 8018552:	6832      	ldr	r2, [r6, #0]
 8018554:	1c51      	adds	r1, r2, #1
 8018556:	6031      	str	r1, [r6, #0]
 8018558:	7812      	ldrb	r2, [r2, #0]
 801855a:	f805 2b01 	strb.w	r2, [r5], #1
 801855e:	6872      	ldr	r2, [r6, #4]
 8018560:	3a01      	subs	r2, #1
 8018562:	2a00      	cmp	r2, #0
 8018564:	6072      	str	r2, [r6, #4]
 8018566:	dc07      	bgt.n	8018578 <_scanf_i+0xb8>
 8018568:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801856c:	4631      	mov	r1, r6
 801856e:	4650      	mov	r0, sl
 8018570:	4790      	blx	r2
 8018572:	2800      	cmp	r0, #0
 8018574:	f040 8085 	bne.w	8018682 <_scanf_i+0x1c2>
 8018578:	f10b 0b01 	add.w	fp, fp, #1
 801857c:	f1bb 0f03 	cmp.w	fp, #3
 8018580:	d1cb      	bne.n	801851a <_scanf_i+0x5a>
 8018582:	6863      	ldr	r3, [r4, #4]
 8018584:	b90b      	cbnz	r3, 801858a <_scanf_i+0xca>
 8018586:	230a      	movs	r3, #10
 8018588:	6063      	str	r3, [r4, #4]
 801858a:	6863      	ldr	r3, [r4, #4]
 801858c:	4945      	ldr	r1, [pc, #276]	; (80186a4 <_scanf_i+0x1e4>)
 801858e:	6960      	ldr	r0, [r4, #20]
 8018590:	1ac9      	subs	r1, r1, r3
 8018592:	f000 f889 	bl	80186a8 <__sccl>
 8018596:	f04f 0b00 	mov.w	fp, #0
 801859a:	68a3      	ldr	r3, [r4, #8]
 801859c:	6822      	ldr	r2, [r4, #0]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d03d      	beq.n	801861e <_scanf_i+0x15e>
 80185a2:	6831      	ldr	r1, [r6, #0]
 80185a4:	6960      	ldr	r0, [r4, #20]
 80185a6:	f891 c000 	ldrb.w	ip, [r1]
 80185aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80185ae:	2800      	cmp	r0, #0
 80185b0:	d035      	beq.n	801861e <_scanf_i+0x15e>
 80185b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80185b6:	d124      	bne.n	8018602 <_scanf_i+0x142>
 80185b8:	0510      	lsls	r0, r2, #20
 80185ba:	d522      	bpl.n	8018602 <_scanf_i+0x142>
 80185bc:	f10b 0b01 	add.w	fp, fp, #1
 80185c0:	f1b9 0f00 	cmp.w	r9, #0
 80185c4:	d003      	beq.n	80185ce <_scanf_i+0x10e>
 80185c6:	3301      	adds	r3, #1
 80185c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80185cc:	60a3      	str	r3, [r4, #8]
 80185ce:	6873      	ldr	r3, [r6, #4]
 80185d0:	3b01      	subs	r3, #1
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	6073      	str	r3, [r6, #4]
 80185d6:	dd1b      	ble.n	8018610 <_scanf_i+0x150>
 80185d8:	6833      	ldr	r3, [r6, #0]
 80185da:	3301      	adds	r3, #1
 80185dc:	6033      	str	r3, [r6, #0]
 80185de:	68a3      	ldr	r3, [r4, #8]
 80185e0:	3b01      	subs	r3, #1
 80185e2:	60a3      	str	r3, [r4, #8]
 80185e4:	e7d9      	b.n	801859a <_scanf_i+0xda>
 80185e6:	f1bb 0f02 	cmp.w	fp, #2
 80185ea:	d1ae      	bne.n	801854a <_scanf_i+0x8a>
 80185ec:	6822      	ldr	r2, [r4, #0]
 80185ee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80185f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80185f6:	d1bf      	bne.n	8018578 <_scanf_i+0xb8>
 80185f8:	2310      	movs	r3, #16
 80185fa:	6063      	str	r3, [r4, #4]
 80185fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018600:	e7a2      	b.n	8018548 <_scanf_i+0x88>
 8018602:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018606:	6022      	str	r2, [r4, #0]
 8018608:	780b      	ldrb	r3, [r1, #0]
 801860a:	f805 3b01 	strb.w	r3, [r5], #1
 801860e:	e7de      	b.n	80185ce <_scanf_i+0x10e>
 8018610:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018614:	4631      	mov	r1, r6
 8018616:	4650      	mov	r0, sl
 8018618:	4798      	blx	r3
 801861a:	2800      	cmp	r0, #0
 801861c:	d0df      	beq.n	80185de <_scanf_i+0x11e>
 801861e:	6823      	ldr	r3, [r4, #0]
 8018620:	05d9      	lsls	r1, r3, #23
 8018622:	d50d      	bpl.n	8018640 <_scanf_i+0x180>
 8018624:	42bd      	cmp	r5, r7
 8018626:	d909      	bls.n	801863c <_scanf_i+0x17c>
 8018628:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801862c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018630:	4632      	mov	r2, r6
 8018632:	4650      	mov	r0, sl
 8018634:	4798      	blx	r3
 8018636:	f105 39ff 	add.w	r9, r5, #4294967295
 801863a:	464d      	mov	r5, r9
 801863c:	42bd      	cmp	r5, r7
 801863e:	d028      	beq.n	8018692 <_scanf_i+0x1d2>
 8018640:	6822      	ldr	r2, [r4, #0]
 8018642:	f012 0210 	ands.w	r2, r2, #16
 8018646:	d113      	bne.n	8018670 <_scanf_i+0x1b0>
 8018648:	702a      	strb	r2, [r5, #0]
 801864a:	6863      	ldr	r3, [r4, #4]
 801864c:	9e01      	ldr	r6, [sp, #4]
 801864e:	4639      	mov	r1, r7
 8018650:	4650      	mov	r0, sl
 8018652:	47b0      	blx	r6
 8018654:	f8d8 3000 	ldr.w	r3, [r8]
 8018658:	6821      	ldr	r1, [r4, #0]
 801865a:	1d1a      	adds	r2, r3, #4
 801865c:	f8c8 2000 	str.w	r2, [r8]
 8018660:	f011 0f20 	tst.w	r1, #32
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	d00f      	beq.n	8018688 <_scanf_i+0x1c8>
 8018668:	6018      	str	r0, [r3, #0]
 801866a:	68e3      	ldr	r3, [r4, #12]
 801866c:	3301      	adds	r3, #1
 801866e:	60e3      	str	r3, [r4, #12]
 8018670:	6923      	ldr	r3, [r4, #16]
 8018672:	1bed      	subs	r5, r5, r7
 8018674:	445d      	add	r5, fp
 8018676:	442b      	add	r3, r5
 8018678:	6123      	str	r3, [r4, #16]
 801867a:	2000      	movs	r0, #0
 801867c:	b007      	add	sp, #28
 801867e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018682:	f04f 0b00 	mov.w	fp, #0
 8018686:	e7ca      	b.n	801861e <_scanf_i+0x15e>
 8018688:	07ca      	lsls	r2, r1, #31
 801868a:	bf4c      	ite	mi
 801868c:	8018      	strhmi	r0, [r3, #0]
 801868e:	6018      	strpl	r0, [r3, #0]
 8018690:	e7eb      	b.n	801866a <_scanf_i+0x1aa>
 8018692:	2001      	movs	r0, #1
 8018694:	e7f2      	b.n	801867c <_scanf_i+0x1bc>
 8018696:	bf00      	nop
 8018698:	08018c60 	.word	0x08018c60
 801869c:	08018a31 	.word	0x08018a31
 80186a0:	08018949 	.word	0x08018949
 80186a4:	08018d73 	.word	0x08018d73

080186a8 <__sccl>:
 80186a8:	b570      	push	{r4, r5, r6, lr}
 80186aa:	780b      	ldrb	r3, [r1, #0]
 80186ac:	4604      	mov	r4, r0
 80186ae:	2b5e      	cmp	r3, #94	; 0x5e
 80186b0:	bf0b      	itete	eq
 80186b2:	784b      	ldrbeq	r3, [r1, #1]
 80186b4:	1c4a      	addne	r2, r1, #1
 80186b6:	1c8a      	addeq	r2, r1, #2
 80186b8:	2100      	movne	r1, #0
 80186ba:	bf08      	it	eq
 80186bc:	2101      	moveq	r1, #1
 80186be:	3801      	subs	r0, #1
 80186c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80186c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80186c8:	42a8      	cmp	r0, r5
 80186ca:	d1fb      	bne.n	80186c4 <__sccl+0x1c>
 80186cc:	b90b      	cbnz	r3, 80186d2 <__sccl+0x2a>
 80186ce:	1e50      	subs	r0, r2, #1
 80186d0:	bd70      	pop	{r4, r5, r6, pc}
 80186d2:	f081 0101 	eor.w	r1, r1, #1
 80186d6:	54e1      	strb	r1, [r4, r3]
 80186d8:	4610      	mov	r0, r2
 80186da:	4602      	mov	r2, r0
 80186dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80186e0:	2d2d      	cmp	r5, #45	; 0x2d
 80186e2:	d005      	beq.n	80186f0 <__sccl+0x48>
 80186e4:	2d5d      	cmp	r5, #93	; 0x5d
 80186e6:	d016      	beq.n	8018716 <__sccl+0x6e>
 80186e8:	2d00      	cmp	r5, #0
 80186ea:	d0f1      	beq.n	80186d0 <__sccl+0x28>
 80186ec:	462b      	mov	r3, r5
 80186ee:	e7f2      	b.n	80186d6 <__sccl+0x2e>
 80186f0:	7846      	ldrb	r6, [r0, #1]
 80186f2:	2e5d      	cmp	r6, #93	; 0x5d
 80186f4:	d0fa      	beq.n	80186ec <__sccl+0x44>
 80186f6:	42b3      	cmp	r3, r6
 80186f8:	dcf8      	bgt.n	80186ec <__sccl+0x44>
 80186fa:	3002      	adds	r0, #2
 80186fc:	461a      	mov	r2, r3
 80186fe:	3201      	adds	r2, #1
 8018700:	4296      	cmp	r6, r2
 8018702:	54a1      	strb	r1, [r4, r2]
 8018704:	dcfb      	bgt.n	80186fe <__sccl+0x56>
 8018706:	1af2      	subs	r2, r6, r3
 8018708:	3a01      	subs	r2, #1
 801870a:	1c5d      	adds	r5, r3, #1
 801870c:	42b3      	cmp	r3, r6
 801870e:	bfa8      	it	ge
 8018710:	2200      	movge	r2, #0
 8018712:	18ab      	adds	r3, r5, r2
 8018714:	e7e1      	b.n	80186da <__sccl+0x32>
 8018716:	4610      	mov	r0, r2
 8018718:	e7da      	b.n	80186d0 <__sccl+0x28>

0801871a <__submore>:
 801871a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801871e:	460c      	mov	r4, r1
 8018720:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018722:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018726:	4299      	cmp	r1, r3
 8018728:	d11d      	bne.n	8018766 <__submore+0x4c>
 801872a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801872e:	f7ff f927 	bl	8017980 <_malloc_r>
 8018732:	b918      	cbnz	r0, 801873c <__submore+0x22>
 8018734:	f04f 30ff 	mov.w	r0, #4294967295
 8018738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801873c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018740:	63a3      	str	r3, [r4, #56]	; 0x38
 8018742:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018746:	6360      	str	r0, [r4, #52]	; 0x34
 8018748:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801874c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018750:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018754:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018758:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801875c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018760:	6020      	str	r0, [r4, #0]
 8018762:	2000      	movs	r0, #0
 8018764:	e7e8      	b.n	8018738 <__submore+0x1e>
 8018766:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018768:	0077      	lsls	r7, r6, #1
 801876a:	463a      	mov	r2, r7
 801876c:	f000 f83a 	bl	80187e4 <_realloc_r>
 8018770:	4605      	mov	r5, r0
 8018772:	2800      	cmp	r0, #0
 8018774:	d0de      	beq.n	8018734 <__submore+0x1a>
 8018776:	eb00 0806 	add.w	r8, r0, r6
 801877a:	4601      	mov	r1, r0
 801877c:	4632      	mov	r2, r6
 801877e:	4640      	mov	r0, r8
 8018780:	f7ff f884 	bl	801788c <memcpy>
 8018784:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018788:	f8c4 8000 	str.w	r8, [r4]
 801878c:	e7e9      	b.n	8018762 <__submore+0x48>

0801878e <memmove>:
 801878e:	4288      	cmp	r0, r1
 8018790:	b510      	push	{r4, lr}
 8018792:	eb01 0402 	add.w	r4, r1, r2
 8018796:	d902      	bls.n	801879e <memmove+0x10>
 8018798:	4284      	cmp	r4, r0
 801879a:	4623      	mov	r3, r4
 801879c:	d807      	bhi.n	80187ae <memmove+0x20>
 801879e:	1e43      	subs	r3, r0, #1
 80187a0:	42a1      	cmp	r1, r4
 80187a2:	d008      	beq.n	80187b6 <memmove+0x28>
 80187a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80187a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80187ac:	e7f8      	b.n	80187a0 <memmove+0x12>
 80187ae:	4402      	add	r2, r0
 80187b0:	4601      	mov	r1, r0
 80187b2:	428a      	cmp	r2, r1
 80187b4:	d100      	bne.n	80187b8 <memmove+0x2a>
 80187b6:	bd10      	pop	{r4, pc}
 80187b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80187bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80187c0:	e7f7      	b.n	80187b2 <memmove+0x24>
	...

080187c4 <_sbrk_r>:
 80187c4:	b538      	push	{r3, r4, r5, lr}
 80187c6:	4d06      	ldr	r5, [pc, #24]	; (80187e0 <_sbrk_r+0x1c>)
 80187c8:	2300      	movs	r3, #0
 80187ca:	4604      	mov	r4, r0
 80187cc:	4608      	mov	r0, r1
 80187ce:	602b      	str	r3, [r5, #0]
 80187d0:	f7eb f996 	bl	8003b00 <_sbrk>
 80187d4:	1c43      	adds	r3, r0, #1
 80187d6:	d102      	bne.n	80187de <_sbrk_r+0x1a>
 80187d8:	682b      	ldr	r3, [r5, #0]
 80187da:	b103      	cbz	r3, 80187de <_sbrk_r+0x1a>
 80187dc:	6023      	str	r3, [r4, #0]
 80187de:	bd38      	pop	{r3, r4, r5, pc}
 80187e0:	24003450 	.word	0x24003450

080187e4 <_realloc_r>:
 80187e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187e8:	4680      	mov	r8, r0
 80187ea:	4614      	mov	r4, r2
 80187ec:	460e      	mov	r6, r1
 80187ee:	b921      	cbnz	r1, 80187fa <_realloc_r+0x16>
 80187f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187f4:	4611      	mov	r1, r2
 80187f6:	f7ff b8c3 	b.w	8017980 <_malloc_r>
 80187fa:	b92a      	cbnz	r2, 8018808 <_realloc_r+0x24>
 80187fc:	f7ff f854 	bl	80178a8 <_free_r>
 8018800:	4625      	mov	r5, r4
 8018802:	4628      	mov	r0, r5
 8018804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018808:	f000 f914 	bl	8018a34 <_malloc_usable_size_r>
 801880c:	4284      	cmp	r4, r0
 801880e:	4607      	mov	r7, r0
 8018810:	d802      	bhi.n	8018818 <_realloc_r+0x34>
 8018812:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018816:	d812      	bhi.n	801883e <_realloc_r+0x5a>
 8018818:	4621      	mov	r1, r4
 801881a:	4640      	mov	r0, r8
 801881c:	f7ff f8b0 	bl	8017980 <_malloc_r>
 8018820:	4605      	mov	r5, r0
 8018822:	2800      	cmp	r0, #0
 8018824:	d0ed      	beq.n	8018802 <_realloc_r+0x1e>
 8018826:	42bc      	cmp	r4, r7
 8018828:	4622      	mov	r2, r4
 801882a:	4631      	mov	r1, r6
 801882c:	bf28      	it	cs
 801882e:	463a      	movcs	r2, r7
 8018830:	f7ff f82c 	bl	801788c <memcpy>
 8018834:	4631      	mov	r1, r6
 8018836:	4640      	mov	r0, r8
 8018838:	f7ff f836 	bl	80178a8 <_free_r>
 801883c:	e7e1      	b.n	8018802 <_realloc_r+0x1e>
 801883e:	4635      	mov	r5, r6
 8018840:	e7df      	b.n	8018802 <_realloc_r+0x1e>
	...

08018844 <_strtol_l.constprop.0>:
 8018844:	2b01      	cmp	r3, #1
 8018846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801884a:	d001      	beq.n	8018850 <_strtol_l.constprop.0+0xc>
 801884c:	2b24      	cmp	r3, #36	; 0x24
 801884e:	d906      	bls.n	801885e <_strtol_l.constprop.0+0x1a>
 8018850:	f7fe ffe8 	bl	8017824 <__errno>
 8018854:	2316      	movs	r3, #22
 8018856:	6003      	str	r3, [r0, #0]
 8018858:	2000      	movs	r0, #0
 801885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801885e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018944 <_strtol_l.constprop.0+0x100>
 8018862:	460d      	mov	r5, r1
 8018864:	462e      	mov	r6, r5
 8018866:	f815 4b01 	ldrb.w	r4, [r5], #1
 801886a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801886e:	f017 0708 	ands.w	r7, r7, #8
 8018872:	d1f7      	bne.n	8018864 <_strtol_l.constprop.0+0x20>
 8018874:	2c2d      	cmp	r4, #45	; 0x2d
 8018876:	d132      	bne.n	80188de <_strtol_l.constprop.0+0x9a>
 8018878:	782c      	ldrb	r4, [r5, #0]
 801887a:	2701      	movs	r7, #1
 801887c:	1cb5      	adds	r5, r6, #2
 801887e:	2b00      	cmp	r3, #0
 8018880:	d05b      	beq.n	801893a <_strtol_l.constprop.0+0xf6>
 8018882:	2b10      	cmp	r3, #16
 8018884:	d109      	bne.n	801889a <_strtol_l.constprop.0+0x56>
 8018886:	2c30      	cmp	r4, #48	; 0x30
 8018888:	d107      	bne.n	801889a <_strtol_l.constprop.0+0x56>
 801888a:	782c      	ldrb	r4, [r5, #0]
 801888c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018890:	2c58      	cmp	r4, #88	; 0x58
 8018892:	d14d      	bne.n	8018930 <_strtol_l.constprop.0+0xec>
 8018894:	786c      	ldrb	r4, [r5, #1]
 8018896:	2310      	movs	r3, #16
 8018898:	3502      	adds	r5, #2
 801889a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801889e:	f108 38ff 	add.w	r8, r8, #4294967295
 80188a2:	f04f 0e00 	mov.w	lr, #0
 80188a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80188aa:	4676      	mov	r6, lr
 80188ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80188b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80188b4:	f1bc 0f09 	cmp.w	ip, #9
 80188b8:	d816      	bhi.n	80188e8 <_strtol_l.constprop.0+0xa4>
 80188ba:	4664      	mov	r4, ip
 80188bc:	42a3      	cmp	r3, r4
 80188be:	dd24      	ble.n	801890a <_strtol_l.constprop.0+0xc6>
 80188c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80188c4:	d008      	beq.n	80188d8 <_strtol_l.constprop.0+0x94>
 80188c6:	45b1      	cmp	r9, r6
 80188c8:	d31c      	bcc.n	8018904 <_strtol_l.constprop.0+0xc0>
 80188ca:	d101      	bne.n	80188d0 <_strtol_l.constprop.0+0x8c>
 80188cc:	45a2      	cmp	sl, r4
 80188ce:	db19      	blt.n	8018904 <_strtol_l.constprop.0+0xc0>
 80188d0:	fb06 4603 	mla	r6, r6, r3, r4
 80188d4:	f04f 0e01 	mov.w	lr, #1
 80188d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80188dc:	e7e8      	b.n	80188b0 <_strtol_l.constprop.0+0x6c>
 80188de:	2c2b      	cmp	r4, #43	; 0x2b
 80188e0:	bf04      	itt	eq
 80188e2:	782c      	ldrbeq	r4, [r5, #0]
 80188e4:	1cb5      	addeq	r5, r6, #2
 80188e6:	e7ca      	b.n	801887e <_strtol_l.constprop.0+0x3a>
 80188e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80188ec:	f1bc 0f19 	cmp.w	ip, #25
 80188f0:	d801      	bhi.n	80188f6 <_strtol_l.constprop.0+0xb2>
 80188f2:	3c37      	subs	r4, #55	; 0x37
 80188f4:	e7e2      	b.n	80188bc <_strtol_l.constprop.0+0x78>
 80188f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80188fa:	f1bc 0f19 	cmp.w	ip, #25
 80188fe:	d804      	bhi.n	801890a <_strtol_l.constprop.0+0xc6>
 8018900:	3c57      	subs	r4, #87	; 0x57
 8018902:	e7db      	b.n	80188bc <_strtol_l.constprop.0+0x78>
 8018904:	f04f 3eff 	mov.w	lr, #4294967295
 8018908:	e7e6      	b.n	80188d8 <_strtol_l.constprop.0+0x94>
 801890a:	f1be 3fff 	cmp.w	lr, #4294967295
 801890e:	d105      	bne.n	801891c <_strtol_l.constprop.0+0xd8>
 8018910:	2322      	movs	r3, #34	; 0x22
 8018912:	6003      	str	r3, [r0, #0]
 8018914:	4646      	mov	r6, r8
 8018916:	b942      	cbnz	r2, 801892a <_strtol_l.constprop.0+0xe6>
 8018918:	4630      	mov	r0, r6
 801891a:	e79e      	b.n	801885a <_strtol_l.constprop.0+0x16>
 801891c:	b107      	cbz	r7, 8018920 <_strtol_l.constprop.0+0xdc>
 801891e:	4276      	negs	r6, r6
 8018920:	2a00      	cmp	r2, #0
 8018922:	d0f9      	beq.n	8018918 <_strtol_l.constprop.0+0xd4>
 8018924:	f1be 0f00 	cmp.w	lr, #0
 8018928:	d000      	beq.n	801892c <_strtol_l.constprop.0+0xe8>
 801892a:	1e69      	subs	r1, r5, #1
 801892c:	6011      	str	r1, [r2, #0]
 801892e:	e7f3      	b.n	8018918 <_strtol_l.constprop.0+0xd4>
 8018930:	2430      	movs	r4, #48	; 0x30
 8018932:	2b00      	cmp	r3, #0
 8018934:	d1b1      	bne.n	801889a <_strtol_l.constprop.0+0x56>
 8018936:	2308      	movs	r3, #8
 8018938:	e7af      	b.n	801889a <_strtol_l.constprop.0+0x56>
 801893a:	2c30      	cmp	r4, #48	; 0x30
 801893c:	d0a5      	beq.n	801888a <_strtol_l.constprop.0+0x46>
 801893e:	230a      	movs	r3, #10
 8018940:	e7ab      	b.n	801889a <_strtol_l.constprop.0+0x56>
 8018942:	bf00      	nop
 8018944:	08018d7f 	.word	0x08018d7f

08018948 <_strtol_r>:
 8018948:	f7ff bf7c 	b.w	8018844 <_strtol_l.constprop.0>

0801894c <_strtoul_l.constprop.0>:
 801894c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018950:	4f36      	ldr	r7, [pc, #216]	; (8018a2c <_strtoul_l.constprop.0+0xe0>)
 8018952:	4686      	mov	lr, r0
 8018954:	460d      	mov	r5, r1
 8018956:	4628      	mov	r0, r5
 8018958:	f815 4b01 	ldrb.w	r4, [r5], #1
 801895c:	5d3e      	ldrb	r6, [r7, r4]
 801895e:	f016 0608 	ands.w	r6, r6, #8
 8018962:	d1f8      	bne.n	8018956 <_strtoul_l.constprop.0+0xa>
 8018964:	2c2d      	cmp	r4, #45	; 0x2d
 8018966:	d130      	bne.n	80189ca <_strtoul_l.constprop.0+0x7e>
 8018968:	782c      	ldrb	r4, [r5, #0]
 801896a:	2601      	movs	r6, #1
 801896c:	1c85      	adds	r5, r0, #2
 801896e:	2b00      	cmp	r3, #0
 8018970:	d057      	beq.n	8018a22 <_strtoul_l.constprop.0+0xd6>
 8018972:	2b10      	cmp	r3, #16
 8018974:	d109      	bne.n	801898a <_strtoul_l.constprop.0+0x3e>
 8018976:	2c30      	cmp	r4, #48	; 0x30
 8018978:	d107      	bne.n	801898a <_strtoul_l.constprop.0+0x3e>
 801897a:	7828      	ldrb	r0, [r5, #0]
 801897c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018980:	2858      	cmp	r0, #88	; 0x58
 8018982:	d149      	bne.n	8018a18 <_strtoul_l.constprop.0+0xcc>
 8018984:	786c      	ldrb	r4, [r5, #1]
 8018986:	2310      	movs	r3, #16
 8018988:	3502      	adds	r5, #2
 801898a:	f04f 38ff 	mov.w	r8, #4294967295
 801898e:	2700      	movs	r7, #0
 8018990:	fbb8 f8f3 	udiv	r8, r8, r3
 8018994:	fb03 f908 	mul.w	r9, r3, r8
 8018998:	ea6f 0909 	mvn.w	r9, r9
 801899c:	4638      	mov	r0, r7
 801899e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80189a2:	f1bc 0f09 	cmp.w	ip, #9
 80189a6:	d815      	bhi.n	80189d4 <_strtoul_l.constprop.0+0x88>
 80189a8:	4664      	mov	r4, ip
 80189aa:	42a3      	cmp	r3, r4
 80189ac:	dd23      	ble.n	80189f6 <_strtoul_l.constprop.0+0xaa>
 80189ae:	f1b7 3fff 	cmp.w	r7, #4294967295
 80189b2:	d007      	beq.n	80189c4 <_strtoul_l.constprop.0+0x78>
 80189b4:	4580      	cmp	r8, r0
 80189b6:	d31b      	bcc.n	80189f0 <_strtoul_l.constprop.0+0xa4>
 80189b8:	d101      	bne.n	80189be <_strtoul_l.constprop.0+0x72>
 80189ba:	45a1      	cmp	r9, r4
 80189bc:	db18      	blt.n	80189f0 <_strtoul_l.constprop.0+0xa4>
 80189be:	fb00 4003 	mla	r0, r0, r3, r4
 80189c2:	2701      	movs	r7, #1
 80189c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80189c8:	e7e9      	b.n	801899e <_strtoul_l.constprop.0+0x52>
 80189ca:	2c2b      	cmp	r4, #43	; 0x2b
 80189cc:	bf04      	itt	eq
 80189ce:	782c      	ldrbeq	r4, [r5, #0]
 80189d0:	1c85      	addeq	r5, r0, #2
 80189d2:	e7cc      	b.n	801896e <_strtoul_l.constprop.0+0x22>
 80189d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80189d8:	f1bc 0f19 	cmp.w	ip, #25
 80189dc:	d801      	bhi.n	80189e2 <_strtoul_l.constprop.0+0x96>
 80189de:	3c37      	subs	r4, #55	; 0x37
 80189e0:	e7e3      	b.n	80189aa <_strtoul_l.constprop.0+0x5e>
 80189e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80189e6:	f1bc 0f19 	cmp.w	ip, #25
 80189ea:	d804      	bhi.n	80189f6 <_strtoul_l.constprop.0+0xaa>
 80189ec:	3c57      	subs	r4, #87	; 0x57
 80189ee:	e7dc      	b.n	80189aa <_strtoul_l.constprop.0+0x5e>
 80189f0:	f04f 37ff 	mov.w	r7, #4294967295
 80189f4:	e7e6      	b.n	80189c4 <_strtoul_l.constprop.0+0x78>
 80189f6:	1c7b      	adds	r3, r7, #1
 80189f8:	d106      	bne.n	8018a08 <_strtoul_l.constprop.0+0xbc>
 80189fa:	2322      	movs	r3, #34	; 0x22
 80189fc:	f8ce 3000 	str.w	r3, [lr]
 8018a00:	4638      	mov	r0, r7
 8018a02:	b932      	cbnz	r2, 8018a12 <_strtoul_l.constprop.0+0xc6>
 8018a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a08:	b106      	cbz	r6, 8018a0c <_strtoul_l.constprop.0+0xc0>
 8018a0a:	4240      	negs	r0, r0
 8018a0c:	2a00      	cmp	r2, #0
 8018a0e:	d0f9      	beq.n	8018a04 <_strtoul_l.constprop.0+0xb8>
 8018a10:	b107      	cbz	r7, 8018a14 <_strtoul_l.constprop.0+0xc8>
 8018a12:	1e69      	subs	r1, r5, #1
 8018a14:	6011      	str	r1, [r2, #0]
 8018a16:	e7f5      	b.n	8018a04 <_strtoul_l.constprop.0+0xb8>
 8018a18:	2430      	movs	r4, #48	; 0x30
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d1b5      	bne.n	801898a <_strtoul_l.constprop.0+0x3e>
 8018a1e:	2308      	movs	r3, #8
 8018a20:	e7b3      	b.n	801898a <_strtoul_l.constprop.0+0x3e>
 8018a22:	2c30      	cmp	r4, #48	; 0x30
 8018a24:	d0a9      	beq.n	801897a <_strtoul_l.constprop.0+0x2e>
 8018a26:	230a      	movs	r3, #10
 8018a28:	e7af      	b.n	801898a <_strtoul_l.constprop.0+0x3e>
 8018a2a:	bf00      	nop
 8018a2c:	08018d7f 	.word	0x08018d7f

08018a30 <_strtoul_r>:
 8018a30:	f7ff bf8c 	b.w	801894c <_strtoul_l.constprop.0>

08018a34 <_malloc_usable_size_r>:
 8018a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a38:	1f18      	subs	r0, r3, #4
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	bfbc      	itt	lt
 8018a3e:	580b      	ldrlt	r3, [r1, r0]
 8018a40:	18c0      	addlt	r0, r0, r3
 8018a42:	4770      	bx	lr

08018a44 <_init>:
 8018a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a46:	bf00      	nop
 8018a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a4a:	bc08      	pop	{r3}
 8018a4c:	469e      	mov	lr, r3
 8018a4e:	4770      	bx	lr

08018a50 <_fini>:
 8018a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a52:	bf00      	nop
 8018a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a56:	bc08      	pop	{r3}
 8018a58:	469e      	mov	lr, r3
 8018a5a:	4770      	bx	lr
